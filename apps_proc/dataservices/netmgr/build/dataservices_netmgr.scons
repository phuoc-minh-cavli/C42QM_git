#===============================================================================
#
# QMIMSGS APSS TN
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2011-2021 by QUALCOMM Technologies, Inc. All Rights Reserved.
#
#-------------------------------------------------------------------------------
#                      EDIT HISTORY FOR FILE
#
#  $Header: //components/rel/dataservices.tx/6.0/netmgr/build/dataservices_netmgr.scons#8 $
#  $DateTime: 2021/06/15 00:57:11 $
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 3/28/12   sdt     Baseline
#===============================================================================
Import('env')
env = env.Clone()

#Changes for MOB
if 'USES_MOB' in env:
	env.RequirePublicApi('STUB')
	env.RequirePublicApi('WDS', area='qmimsgs')
	env.RequirePublicApi('WDA', area='qmimsgs')
	env.RequirePublicApi('WDS_EXT', area='qmimsgs')
	env.RequirePublicApi('DFS', area='qmimsgs')
	env.RequirePublicApi('NIPD', area='qmimsgs')
	env.RequirePublicApi('DPM', area='qmimsgs')
	env.RequirePublicApi('COMMON', area='qmimsgs')

#env.Append(CPPDEFINES=["MHI_TEST_VIRTIO_ENV"])

env.RequirePublicApi('KERNEL', area='core')
env.RequirePublicApi('SERVICES', area='core')
env.RequirePublicApi('DEBUGTOOLS', area='core')
env.RequirePublicApi('SYSTEMDRIVERS', area='core')
env.RequirePublicApi('HWENGINES', area='core')
env.RequirePublicApi('DAL', area='core')
env.RequirePublicApi('MEMORY', area='core')
env.RequirePublicApi('POWER', area='core')
env.RequirePublicApi('MPROC', area='core')
env.RequirePublicApi('STORAGE', area='core')
env.RequirePublicApi('WIREDCONNECTIVITY', area='core')
env.RequirePublicApi('WDS', area='api')
env.RequirePublicApi('WDA', area='api')
env.RequirePublicApi('WDS_EXT', area='api')
env.RequirePublicApi('DFS', area='api')
env.RequirePublicApi('NIPD', area='api')
env.RequirePublicApi('DPM', area='api')
env.RequirePublicApi('COMMON', area='api')
env.RequirePublicApi(['QAPI'], area='dataservices')
env.RequirePublicApi(['DATASERVICES_NET'], area='dataservices')
env.RequirePublicApi(['NICHESTACK_PORT'], area='dataservices')
env.RequirePublicApi(['NICHESTACK'], area='dataservices')
env.RequirePublicApi(['DSS_NET'],area='dataservices')
env.RequirePublicApi('UTILS_EXT')
env.RequireRestrictedApi(['TS_M2M_COMMON'])
env.RequirePublicApi(['UTILS'], area='dataservices')
DATASERVICES_RESTRICTED_APIS = [
  'DS_UTILS',
  'NETMGR'
  ]

env.RequireRestrictedApi(DATASERVICES_RESTRICTED_APIS)

env.RequireRestrictedApi(['NET_UTILS'])

SRCPATH = '${BUILD_ROOT}/dataservices/netmgr/src'
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

NETMGR_SOURCES = [
  '${BUILDPATH}/netmgr_main.c',
  '${BUILDPATH}/netmgr_qmi_dpm.c',
  '${BUILDPATH}/netmgr_platform.c',
  '${BUILDPATH}/netmgr_qmi.c',
  '${BUILDPATH}/netmgr_exec.c',
  '${BUILDPATH}/netmgr_qmi_wds.c',
  '${BUILDPATH}/netmgr_qmi_wda.c',
  '${BUILDPATH}/netmgr_qmi_dfs.c',
  '${BUILDPATH}/netmgr_qmi_nipd.c', 
  '${BUILDPATH}/netmgr_qmi_dins.c',
  '${BUILDPATH}/netmgr_dins.c',
  '${BUILDPATH}/netmgr_sm.c',
  '${BUILDPATH}/netmgr_sm_int.c',
  '${BUILDPATH}/netmgr_service_manager.c',
  '${BUILDPATH}/netmgr_call_manager.c',
  '${BUILDPATH}/netmgr_ext_util.c',
  '${BUILDPATH}/netmgr_iface_config.c',
  '${BUILDPATH}/qapi_dss.c',
  '${BUILDPATH}/qapi_dss_txm.c'

  ]


IMAGES = ['DATA_TN', 'APPS_PROC','MOB_DATASERVICES']
env.AddBinaryLibrary(IMAGES, ('${BUILDPATH}/netmgr'), NETMGR_SOURCES)
	
#-------------------------------------------------------------------------------
# Load the rest of the software units
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()

#-------------------------------------------------------------------------------
# RCINIT Task and Init Fields and Initialization
#-------------------------------------------------------------------------------
RCINIT_INIT_NETMGR_TASK = {
  'sequence_group'             : 'RCINIT_GROUP_3',          # required
  'thread_name'                : 'netmgr_dss',              # required
  'thread_entry'               : 'netmgr_main',           
  'stack_size_bytes'           : '8192',
  'priority_amss_order'        : 'NETMGR_CMDQ_PRI_ORDER'
}

if 'USES_RCINIT' in env:
  RCINIT_IMG = ['CBSP_APPS_IMAGE', 'APPS_IMAGE','MOB_DATASERVICES']
  env.AddRCInitTask( RCINIT_IMG, RCINIT_INIT_NETMGR_TASK )
  
if 'USES_MOB' not in env:
	env.Append(CCFLAGS = "--diag_error=warning")
