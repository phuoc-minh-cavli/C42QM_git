#===============================================================================
#
# TLMM LIBRARY
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2019 Qualcomm Technologies Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.tx/6.0/systemdrivers/tlmm/build/tlmm.scons#1 $
#  $DateTime: 2020/01/30 22:49:35 $
#  $Author: pwbldsvc $
#
#===============================================================================

import os

Import('env')
env = env.Clone()

#------------------------------------------------------------------------------
# Add API folders
#------------------------------------------------------------------------------

env.PublishPrivateApi("SYSTEMDRIVERS_TLMM", [
   "${INC_ROOT}/core/systemdrivers/tlmm/inc",
   "${INC_ROOT}/core/api/systemdrivers/hwio/${CHIPSET}",
   "${INC_ROOT}/core/systemdrivers/tlmm/config/${CHIPSET}"
])

SRCPATH = "../"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------

env.Append(CPPPATH = [
   "${INC_ROOT}/core/systemdrivers/tlmm/src",
   "${INC_ROOT}/core/systemdrivers/tlmm/config",
   "${INC_ROOT}/core/systemdrivers/tlmm/hw/v2"
])

#-------------------------------------------------------------------------------
# Internal Defines
#-------------------------------------------------------------------------------

env.Append(CPPDEFINES = ["TLMM_LOG_SIZE=512"])
#env.Append(CPPDEFINES = ["QAPI_TXM_SOURCE_CODE"])

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'HAL',
   'SERVICES',
   'SYSTEMDRIVERS',
   'DAL',
   'DEBUGTOOLS',
   'QAPI',
   'KERNEL'
   # needs to be last also contains wrong comdef.h
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)


#-------------------------------------------------------------------------------
# Build Images
#-------------------------------------------------------------------------------

TLMM_IMAGES = ['CORE_APPS']


#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------

HAL_TLMM_SOURCES = [
   '${BUILDPATH}/hw/v2/HALtlmm.c'
]


TLMM_COMMON_SOURCES =  [
  '${BUILDPATH}/src/DALTLMMFwk.c',
  '${BUILDPATH}/src/DALTLMMInfo.c',
  '${BUILDPATH}/src/DALTLMM.c',
  '${BUILDPATH}/src/DALTLMMState.c'
]


#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------

env.AddLibrary(TLMM_IMAGES, '${BUILDPATH}/DALtlmm', TLMM_COMMON_SOURCES)
env.AddLibrary(TLMM_IMAGES, '${BUILDPATH}/HALtlmmV2', HAL_TLMM_SOURCES)

#-------------------------------------------------------------------------------
# QAPI
#-------------------------------------------------------------------------------
# Creating a separate library QAPI source files to be shipped as binary

TLMM_QAPI_SOURCES = [
  '${BUILDPATH}/src/qapi_tlmm.c',
]

env.AddLibrary('CORE_APPS', '${BUILDPATH}/pwm_qapi', TLMM_QAPI_SOURCES)

#-------------------------------------------------------------------------------
# Register initialization function and dependencies.
#-------------------------------------------------------------------------------

if 'USES_RCINIT' in env:
  RCINIT_IMG = ['CORE_APPS']
  env.AddRCInitFunc( 
    RCINIT_IMG,
    {
      'sequence_group' : 'RCINIT_GROUP_0',                     # required
      'init_name'      : 'qapi_tlmm',                          # required
      'init_function'  : '__qapi_TLMM_Module_Init',              # required
      'dependencies'   : ['dalsys']
    })

#---------------------------------------------------------------------------
# Invoke document generation SConscript
#---------------------------------------------------------------------------

if os.path.exists(env['BUILD_ROOT'] + '/core/api/systemdrivers/docsrc/tlmm/SConscript') :
  env.SConscript(
    '${BUILD_ROOT}/core/api/systemdrivers/docsrc/tlmm/SConscript',
    exports='env')


#---------------------------------------------------------------------------
# Add DAL XML file
#---------------------------------------------------------------------------

if 'USES_DEVCFG' in env:
   DEVCFG_IMG = ['DAL_DEVCFG_IMG']
   env.AddDevCfgInfo(DEVCFG_IMG, 
   {
      'devcfg_xml'    : '${BUILD_ROOT}/core/systemdrivers/tlmm/config/DalTLMM.xml'
   })


#---------------------------------------------------------------------------
# Pack out target specific files not needed
#---------------------------------------------------------------------------

# Remove target config files
ALL_CONFIG_FILES = env.FindFiles(
  ['*'],
  '../config/')
SHARED_CONFIG_FILES = env.FindFiles(
  ['DALTLMMPropDef.h','DalTLMM.xml'],
  '../config/')
MY_CONFIG_FILES = env.FindFiles(
  ['*'],
  '../config/${CHIPSET}')
PACK_CONFIG_FILES = list(set(ALL_CONFIG_FILES) - set(SHARED_CONFIG_FILES) - set(MY_CONFIG_FILES))
env.CleanPack(TLMM_IMAGES, PACK_CONFIG_FILES)

