#===============================================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2013 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //source/qcom/qct/apps/rfa2/pmic2/config/msm8974_pm8941_badger/appsproc/v2_0/main/latest/build/pmic_config_apps.scons#2 $
# $DateTime: 2012/06/26 11:06:57 $ 
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 01/23/13   vk      Enable device configuration. 
# 06/25/12   hs      Moved to core\systemdrivers.
# 06/20/12   hs      Created
#===============================================================================

Import('env')

LIB_NAME        = 'pmic_config_apps'
IMAGE_SOURCES   = ['MODEM_MODEM','CORE_MODEM','CORE_QDSP6_SW','SBL3_BOOT_IMAGE', 'RPM_IMAGE', 'PMIC_BOOT_DRIVER', 'MODEM_APPS']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'


from glob import glob

env = env.Clone()

# Method to abort processing of this file, if not required for current air interface mode, etc
#if ( (USES_TEST_FLAG1 in env and USES_TEST_FLAG2 not in env) or USES_TEST_FLAG3 not in env)):
#   Return( )

#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg apps_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)


env.RequireProtectedApi([
    'PMIC_APPLICATION',
    'PMIC_CONFIG',
    'PMIC_COMM',
    'PMIC_DRIVERS',
    'PMIC_DEVICES',
    'PMIC_FRAMEWORK',
    'PMIC_NPA',
    'PMIC_TARGET_RPM_SBL1',
    'PMIC_TARGET_APPSPROC_SBL3',
    ])

env.RequirePublicApi([
    'DAL',
    'BUSES',
    'SERVICES',
    'SYSTEMDRIVERS',
    ],
    area='CORE')

#=================================================================
#uncomment this section if src directory is added
#Device configuration layer is not working so moved files a protected for now.

#LIB_SOURCES = [ ]  #empy list

#SOURCE_FILES = [ ] 

#find all .c
#SOURCE_FILES.extend(glob(SRCPATH + '/'+ env['CHIPSET'] +'/*.c'))

#find all .cpp files 
#SOURCE_FILES.extend(glob(SRCPATH + '/'+ env['CHIPSET'] +'/*.cpp'))

#find all .s files
#SOURCE_FILES.extend(glob(SRCPATH + '/'+ env['CHIPSET'] +'/*.s'))


#for filename in SOURCE_FILES:
#        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#if LIB_SOURCES:

#        env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME,[
#        LIB_SOURCES,
#        ])


env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#-------------------------------------------------------------------------------
# DEVCFG - PMIC
#-------------------------------------------------------------------------------


PM_CFG_SOURCES = [
   '${BUILD_ROOT}/core/systemdrivers/pmic/config/${CHIPSET}/pm_config_target.c',
   '${BUILD_ROOT}/core/systemdrivers/pmic/config/${CHIPSET}/pm_config_pam.c',
   '${BUILD_ROOT}/core/systemdrivers/pmic/config/common/pm_config_common.c',
]
if 'USES_DEVCFG' in env:
   DEVCFG_IMG = ['DAL_DEVCFG_IMG']
   # env.AddDevCfgInfo(DEVCFG_IMG, {'devcfg_xml' : '${BUILD_ROOT}/core/systemdrivers/pmic/config/${CHIPSET}/pm_config_target.xml'})
   env.AddDevCfgInfo(DEVCFG_IMG, 
   {
    'devcfg_xml' : ['${BUILD_ROOT}/core/systemdrivers/pmic/config/${CHIPSET}/pm_config_target.xml',
                    '${BUILD_ROOT}/core/systemdrivers/pmic/config/common/pm_config_common.xml',
                    '${BUILD_ROOT}/core/systemdrivers/pmic/config/${CHIPSET}/pm_config_target.c',
                    '${BUILD_ROOT}/core/systemdrivers/pmic/config/${CHIPSET}/pm_config_pam.c',
                    '${BUILD_ROOT}/core/systemdrivers/pmic/config/common/pm_config_common.c']
   })
 
   # env.AddLibrary(DEVCFG_IMG, '${BUILDPATH}/'+LIB_NAME, PM_CFG_SOURCES)
   
#-------------------------------------------------------------------------------
# Pack out files
#-------------------------------------------------------------------------------

# Remove other target files
ALL_CONFIG_FILES = env.FindFiles(
  ['*.h', '*.xml', '*.c', '*.cpp', '*.s'],
  '${BUILD_ROOT}/core/systemdrivers/pmic/config/')
TARGET_CONFIG_FILES = env.FindFiles(
  ['*'],
  '${BUILD_ROOT}/core/systemdrivers/pmic/config/${CHIPSET}')
COMMON_CONFIG_FILES = env.FindFiles(
  ['*'],
  '${BUILD_ROOT}/core/systemdrivers/pmic/config/common')
BUILD_FILES = env.FindFiles(
  ['*'],
  '${BUILD_ROOT}/core/systemdrivers/pmic/config/build')
PACK_CONFIG_FILES = list(set(ALL_CONFIG_FILES) - set(TARGET_CONFIG_FILES) - set(COMMON_CONFIG_FILES) -set(BUILD_FILES))
env.CleanPack(['CORE_APPS'], PACK_CONFIG_FILES)

