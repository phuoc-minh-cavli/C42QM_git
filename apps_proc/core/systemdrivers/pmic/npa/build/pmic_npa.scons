#===============================================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2011 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/core.tx/6.0/systemdrivers/pmic/npa/build/pmic_npa.scons#1 $
# $DateTime: 2020/01/30 22:49:35 $ 
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 06/25/12   hs      Moved to core\systemdrivers.
# 04/23/11   prp     Created
#===============================================================================

Import('env')

LIB_NAME        = 'pmic_npa'
IMAGE_SOURCES   = ['MODEM_MODEM','CORE_MODEM','CORE_QDSP6_SW','SBL3_BOOT_IMAGE', 'PMIC_BOOT_DRIVER','CBSP_QDSP6_SW_IMAGE', 'WCN_IMAGE', 'CBSP_WCN_IMAGE', 'CORE_WCN', 'RPM_IMAGE', 'MODEM_APPS']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'
LIB_TEST        = 'test'


from glob import glob

env = env.Clone()

# Method to abort processing of this file, if not required for current air interface mode, etc
#if ( (USES_TEST_FLAG1 in env and USES_TEST_FLAG2 not in env) or USES_TEST_FLAG3 not in env)):
#   Return( )

#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

    
env.RequirePublicApi([
    'BUSES',
    'DAL',
    'DEBUGTOOLS',
    'HWENGINES',
    'KERNEL',
    'SERVICES',
    'SYSTEMDRIVERS',
    ],
    area='CORE')

env.RequirePublicApi([
    'ONEX',
    'HDR',
    'MMODE',
    'UIM',
    ],
    area='MODEM')

env.RequireRestrictedApi([
    'GERAN',
    'ONEX',
    ])
        
env.RequireProtectedApi([        
    'RF_1X',
    'RF_COMMON',
    'RF_DEVICE',
    'RF_GSM',
    'RF_HAL',
    'RF_WCDMA',
    'PMIC_APPLICATION',
    'PMIC_COMM',
    'PMIC_DRIVERS',
    'PMIC_DEVICES',
    'PMIC_FRAMEWORK',
	'PMIC_NPA',
    'PMIC_TARGET_RPM_SBL1',
    'PMIC_TARGET_APPSPROC_SBL3',
    'PMIC_UTILS',
    ])



##################################################################################
############# uncomment this section if protected directory is added ############# 

#env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that AddBinaryLibrary can be launched
#LIB_SOURCES = []  #empy list

#if 'USES_NO_STRIP_NO_ODM' in env:

#        SOURCE_FILES = [ ] 

        #find all .c
#        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.c'))

        #find all .cpp files 
#        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))

        #find all .s files
#        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.s'))


#        for filename in SOURCE_FILES:
#                LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that the pre-built library will be added to the list file
#env.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_protected',[
#    LIB_SOURCES,
#    ])

##################################################################################

LIB_SOURCES = [ ]  #empy list

SOURCE_FILES = [ ] 

#find all .c
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))

#find all .cpp files 
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))

#find all .s files
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.s'))

#find all .c
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/apps/*.c'))

#find all .cpp files 
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/apps/*.cpp'))

#find all .s files
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/apps/*.s'))


for filename in SOURCE_FILES:
        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME, [LIB_SOURCES])

##################################################################################

TEST_SOURCE_FILES = [ ]

TEST_LIB_SOURCES = [ ]  #empy list

#find all .c files
TEST_SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_TEST+'/*.c'))

#find all .cpp files
TEST_SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_TEST+'/*.cpp'))

#find all .s files
TEST_SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_TEST+'/*.s'))

for filename in TEST_SOURCE_FILES:
        TEST_LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))

if TEST_LIB_SOURCES:
        env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_test',[
        TEST_LIB_SOURCES,
        ])

if 'USES_CLEAN_PACK' in env:
        PACK_TEST_SRC_FILES = env.FindFiles(['*'], (SRCPATH  + '/' + LIB_TEST)) 
        PACK_TEST_INC_FILES = env.FindFiles(['pm_npa_test.h'], (SRCPATH + '/../inc')) 
        env.CleanPack(IMAGE_SOURCES, PACK_TEST_SRC_FILES)
        env.CleanPack(IMAGE_SOURCES, PACK_TEST_INC_FILES)
