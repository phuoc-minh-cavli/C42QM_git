#===============================================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2011-2015,2020 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //source/qcom/qct/modem/rfa2/pmic2/build/v6_0/main/latest/pmic.scons#2 $
# $DateTime: 2012/07/03 09:26:40 $ 
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 05/29/17   kcs     Added Vbatt support.
# 06/25/12   hs      Moved to core\systemdrivers.
# 03/30/12   hs      Added support for VBATT APP.
# 03/07/12   hs      Added support for BOOT builds.
# 03/12/12   hs      Updated.
# 03/07/12   hs      Added support for MPSS and RPM builds.
# 01/24/12   hs      Created
#===============================================================================

Import('env')

if env.has_key('MODEM_PROC'):
   env.Replace(PMIC_ROOT = [
      "${INC_ROOT}/core/systemdrivers/pmic",
   ])
   env.Append(CPPDEFINES = 'PM_IMAGE_MODEM_PROC')
elif env.has_key('RPM_IMAGE'):
   env.Replace(PMIC_ROOT = [
      "${INC_ROOT}/core/systemdrivers/pmic",
   ])
   env.Append(CPPDEFINES = 'PM_IMAGE_RPM_PROC')
elif env.has_key('CBSP_QDSP6_SW_IMAGE'):
   env.Replace(PMIC_ROOT = [
      "${INC_ROOT}/pmic",
   ])
   env.Append(CPPDEFINES = 'PM_IMAGE_LPASS_PROC')
elif env.has_key('IMAGE_WCN_PROC'):
   env.Replace(PMIC_ROOT = [
      "${INC_ROOT}/pmic",
   ])
   env.Append(CPPDEFINES = 'PM_IMAGE_WCN_PROC')
else:
   env.Replace(PMIC_ROOT = [
      "${INC_ROOT}/core/systemdrivers/pmic",
   ])
   env.Append(CPPDEFINES = 'PM_IMAGE_APPS_PROC')

env.PublishProtectedApi( 'PMIC_APPLICATION', [  
    '${PMIC_ROOT}/application/rtc/common/src',
    '${PMIC_ROOT}/application/pon/src',     
    '${PMIC_ROOT}/application/usb/src',
    '${PMIC_ROOT}/application/ecm/src',
    '${PMIC_ROOT}/application/pwr/src',
    '${PMIC_ROOT}/application/vbatt/src',
    '${PMIC_ROOT}/application/fg/src',
])
    
env.PublishProtectedApi( 'PMIC_CONFIG', [    
    '${PMIC_ROOT}/config/${CHIPSET}',
    ])

env.PublishProtectedApi( 'PMIC_COMM', [    
    '${PMIC_ROOT}/comm/src',
    '${PMIC_ROOT}/comm/spmi_lite/src',
    '${PMIC_ROOT}/comm/spmi_dal/src',
    
    ])

env.PublishProtectedApi( 'PMIC_DRIVERS', [    
    '${PMIC_ROOT}/drivers/smps/src',
    '${PMIC_ROOT}/drivers/ldo/src',
    '${PMIC_ROOT}/drivers/pwr/src',
    '${PMIC_ROOT}/drivers/vs/src',
    '${PMIC_ROOT}/drivers/clk/src',
    '${PMIC_ROOT}/drivers/gpio/src',
    '${PMIC_ROOT}/drivers/mpp/src',
    '${PMIC_ROOT}/drivers/pon/src',
    '${PMIC_ROOT}/drivers/rgb/src',
    '${PMIC_ROOT}/drivers/lpg/src',
    '${PMIC_ROOT}/drivers/vib/src',
    '${PMIC_ROOT}/drivers/smbb/src',
    '${PMIC_ROOT}/drivers/smb/src',
    '${PMIC_ROOT}/drivers/lbc/src',
    '${PMIC_ROOT}/drivers/pbs/src',
    '${PMIC_ROOT}/drivers/rtc/src',
    '${PMIC_ROOT}/drivers/ibb/src',
    '${PMIC_ROOT}/drivers/lab/src',
    '${PMIC_ROOT}/drivers/wled/src',
    '${PMIC_ROOT}/drivers/pwm/src',
    '${PMIC_ROOT}/drivers/coincell/src',
    '${PMIC_ROOT}/drivers/vbus/src',
    '${PMIC_ROOT}/drivers/ecm/src',
   ])
      
env.PublishProtectedApi( 'PMIC_DEVICES', [    
    '${PMIC_ROOT}/pmic_devices/common/src',
    ])

env.PublishProtectedApi( 'PMIC_FRAMEWORK', [    
    '${PMIC_ROOT}/framework/src',
	'${PMIC_ROOT}/framework/inc',
    ])
    
env.PublishProtectedApi( 'PMIC_NPA', [    
    '${PMIC_ROOT}/npa/src',
    '${PMIC_ROOT}/npa/inc',
    '${PMIC_ROOT}/framework/src/apps',
    ])

env.PublishProtectedApi( 'PMIC_UTILS', [    
    '${PMIC_ROOT}/utils/src',
    ])
    
env.PublishProtectedApi( 'PMIC_TARGET', [    
    '${PMIC_ROOT}/target/${CHIPSET}/src',
    '${PMIC_ROOT}/target/inc',
    ])

CBSP_API = [
   'DAL',
   'KERNEL',
   'BUSES',
   'HAL',
   'SERVICES',
   'SYSTEMDRIVERS',
   'POWER',
   'BUSES_SPMI',
   'HWENGINES',
   'DEBUGTRACE',
   'DEBUGTOOLS',
   'QAPI'
]

env.RequirePublicApi(CBSP_API)

env.RequireRestrictedApi([
    'POWER',
    ])
env.RequirePublicApi('QAPI')
#-------------------------------------------------------------------------------
# QDSS software events
#-------------------------------------------------------------------------------

if 'USES_QDSS_SWE' in env:
   env.Append(CPPDEFINES = ["PMIC_NPA_LOGGING"])
   QDSS_IMG = ['QDSS_EN_IMG']
   events = [['PMIC_EVENT_FIRST=512','PMIC first event placeholder'],
             ['PMIC_EVENT_INIT','PMIC Driver Initialize'],
             ['PMIC_PAM_INIT','PMIC PAM Initialize'],             
             ['PMIC_RESOURCE_VDD_UVOL_INIT','PMIC resouce initialize - vdd_uvol '],
             ['PMIC_LDO_AGG1', 'device_index = %d sw_en = %d ldo_sw_mode = %d'],
             ['PMIC_LDO_AGG2', 'pc_en = %d pc_mode = %d'],
             ['PMIC_LDO_AGG3', 'regulated_uvol = %d current_value = %d'],
             ['PMIC_LDO_AGG4', 'headroom_vol = %d corner_value = %d'], 
             ['PMIC_LDO_NO_CHANGE', 'id = %d device_index = %d'],
             ['PMIC_SET_VDD_MEM_UVOL','vdd_mem_uvol(MX) Rail Voltage = %d (uV)'],
             ['PMIC_CLK_BUF_AGG1', 'CLK Agg for both Suppressable and Required:  id = %d device_index = %d sw_enable = %d pc_enable = %d'],
             ['PMIC_CLK_BUF_AGG2', 'CLK Agg for Required req:  id = %d device_index = %d sw_enable = %d pc_enable = %d'],
             ['PMIC_PROCESS_RESOURCE','PMIC process resource'],
             ['PMIC_EVENT_LAST=639','PMIC last event placeholder']
            ]
   env.AddSWEInfo(QDSS_IMG, events)

if 'QDSS_TRACER_SWE' in env:
   env.SWEBuilder(['${PMIC_ROOT}/utils/src/pm_sw_event_id.h'],None)

    
env.LoadSoftwareUnits( ) 
