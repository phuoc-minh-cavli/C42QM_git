#ifndef SECAPI_H
#define SECAPI_H


/** 
  @file secapi.h
  @brief General Cryptographic Algorithm support API.
  This file contains the definitions of the constants, data structures
  and interfaces that provide Cryptographic Alogrithms support. It
  defines the external interfaces for key exchange, message digest, and
  encrypt/decrypt for various algorithms.
 * 
 */
/*===========================================================================
  Copyright (c) 2009 - 2013 Qualcomm Technologies Incorporated.
  All Rights Reserved.
  Qualcomm Confidential and Proprietary
===========================================================================*/

/*===========================================================================

                      EDIT HISTORY FOR FILE
  $Header: //components/rel/core.tx/6.0/api/securemsm/secapi.h#1 $ 
  $DateTime: 2020/01/30 22:49:35 $ 
  $Author: pwbldsvc $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
03/18/14   nk      Intial version
=============================================================================*/
#include "comdef.h"
#include "rex.h"
#include "IxErrno.h"

/*===========================================================================

                        DEFINITIONS AND TYPES

===========================================================================*/
      
/**
  Specifies the random data generator entropy.
*/
typedef enum
{
  SECAPI_PSEUDO_RANDOM         = 0,  /**< Get pseudo random number from pool which is periodically filled with random number generated by PRNG HW */
  SECAPI_SECURE_RANDOM         = 1,  /**< Currently behavior is same as ECAPI_PSEUDO_RANDOM */
  SECAPI_SECURE_DIRECT_RANDOM  = 2,  /**< Get pseudo random number directly from PRNG HW  */
  SECAPI_PKCS_RANDOM           = 3,  /**< As above, with no zero bytes in stream. */
  SECAPI_TIME_CRITICAL_RANDOM  = 4   /**< Get pseudo random number from pool only if available otherwise returns an error */
} secapi_rnd_enum_type;

typedef errno_enum_type secerrno_enum_type;

/*===========================================================================

                      PUBLIC FUNCTION DECLARATIONS

===========================================================================*/
/**
  Fetches random data from its internal random buffer.

  The random buffer is either filled with noise-level quantities from searcher 
  measurements or with HMAC pseudo random data.
 
  The required randomness is specified as follows (increasing entropy): \n
  - SECAPI_PSEUDO_RANDOM - Pseudo random data generated by the ARM.
  - SECAPI_SECURE_RANDOM -  Random data enhanced for maximum entropy (even 
    distributions of 0 and 1 bits), suitable for commercial and cryptographic 
    applications.
 
  @param[in] rnd_data_type  Required randomness of random data.
  @param[out] rnd_data_ptr  Pointer to an array that will be filled with the 
                            random data.
  @param[in] rnd_data_len   Length of data requested (in bytes).

  @return
  E_SUCCESS - Successful completion. \n

  @dependencies
  Pseudo random data -  None. \n
  Secure random data -  Random data plus access to hash algorithms (runtime on 
                        the application DSP).
*/
extern secerrno_enum_type secapi_get_random
(
  secapi_rnd_enum_type  rnd_data_type,
  uint8*                rnd_data_ptr,
  uint16                rnd_data_len
);

/**
  Fetches random data from its internal random buffer.
  Except that this API is not Dal dependent and not mutex protected.

  The random buffer is either filled with noise-level quantities from searcher 
  measurements or with HMAC pseudo random data.
 
  The required randomness is specified as follows (increasing entropy): \n
  - SECAPI_PSEUDO_RANDOM - Pseudo random data generated by the ARM.
  - SECAPI_SECURE_RANDOM -  Random data enhanced for maximum entropy (even 
    distributions of 0 and 1 bits), suitable for commercial and cryptographic 
    applications.
 
  @param[in] rnd_data_type  Required randomness of random data.
  @param[out] rnd_data_ptr  Pointer to an array that will be filled with the 
                            random data.
  @param[in] rnd_data_len   Length of data requested (in bytes).

  @return
  E_SUCCESS - Successful completion. \n

  @dependencies
  Pseudo random data -  None. \n
  Secure random data -  Random data plus access to hash algorithms (runtime on 
                        the application DSP).
*/
extern secerrno_enum_type secapi_get_random_lite
(
  secapi_rnd_enum_type  rnd_data_type,
  uint8*                rnd_data_ptr,
  uint16                rnd_data_len
);

#endif /* SECAPI_H */



