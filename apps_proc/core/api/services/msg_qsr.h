#ifndef MSG_QSR_H
#define MSG_QSR_H
/*
 QSHRINK SUPPORTED = 40
*/

/* 
   Qshrink parser will search for the above line in this file and only then 
   it will modify source code based on the new parameter processing feature
   Otherwise it will modify source code as before. 
*/

/*!
  @ingroup diag_message_service
  @file msg_qsr.h 
  @brief
  All the declarations and definitions necessary to support the optimized f3 
  messages (a.k.a. QSHRINK messages) for errors and debugging.

  This file includes support for the extended capabilities as well as the 
  legacy messaging scheme.
  @note
  Please do NOT include this file directly. Clients 
  need to include msg.h to use Diagnostic Debug Message Service.
  
  @par 
  The Qshrink message service is designed to optimize memory use in debug 
  messages. Qshrink extended messages do not contain format strings and file 
  names as compared to extended debug messages (Command_code 121/0x79). The 
  debug strings associated with debug messages are hashed and stored locally 
  to reduce their memory foot-print. The hash value is sent as a message field 
  to the tool to print the actual debug string.
  The packet with CMD_CODE 146/0x92 is generated by the DMSS with no 
  associated request packet. The service is configured using the Extended 
  Configuration Request/Response message (command 125)
*/

/*
Copyright (c) 2010-2011,2016, 2020-2022 by Qualcomm Technologies, Incorporated.
All Rights Reserved.
Qualcomm Confidential and Proprietary
*/

/*===========================================================================
                        EDIT HISTORY FOR FILE

$Header: //components/rel/core.tx/6.0/api/services/msg_qsr.h#6 $

when       who     what, where, why
--------   ---   ----------------------------------------------------------
06/24/16   nk      Added Support for ThreadX
04/20/16   ph      Support for QShrink 2.0
03/31/11   hm      Changes in QSR_MSG_XXX macros to support Parameter Processing
06/10/10   mad     Doxygenated.
06/08/10   vs      Fixed compile error in QSR_MSG_ERR_LOG
05/20/10   vs      Changed QSR_ERR_LOG to QSR_MSG_ERR_LOG
04/08/10   vs      Changes to include memory optimizations for ERR macro
04/01/10   sg      Removed the undefines for QSR_MSG_LOW,MEDIUM,HIGH,ERROR,
                   FATAL
10/11/09   vg      8200 Warning Clean Up
20/05/09   ps      Created new file for qsr feature based on msg.h

===========================================================================*/

/*===========================================================================

                     INCLUDE FILES FOR MODULE

===========================================================================*/
#include "comdef.h"		       /* Definitions for byte, word, etc. */
#include "msg_pkt_defs.h"
#include "msgcfg.h" 

#ifdef __cplusplus
  #define SECT_EXT __FILE__
#else
  #define SECT_EXT
#endif

/* Macros MAX_MSG_V4_SSID_TABLE_ENTRY and MAX_MSG_V4_SSID_AAM_TABLE_ENTRY
   should be defined at core level. */

#ifndef MAX_MSG_V4_SSID_TABLE_ENTRY
  #define MAX_MSG_V4_SSID_TABLE_ENTRY 64          /*Maxinum number of entries in SSID table*/
#endif

#ifndef MAX_MSG_V4_SSID_AAM_TABLE_ENTRY
  #define MAX_MSG_V4_SSID_AAM_TABLE_ENTRY 16000    /*Maxinum number of entries in aligned address mapping table*/
#endif
#define MAX_MSG_V4_SSID_UAM_TABLE_ENTRY 100      /*Maxinum number of entries in unaligned address mapping table*/	    
#define MAX_MSG_V4_DBASE_NAME_SIZE 50
#define MAX_ARGS_NUM  9

#define QSR_ATTR __attribute__((section ("QSR_STR.fmt.rodata." SECT_EXT),aligned (4))) 

/*---------------------------------------------------------------------------
  The extended message packet is defined to be processed as efficiently as
  possible in the caller's context.  Therefore, the packet is divided into
  logical blocks that are aligned w/out declaring the structure as PACK.
  
  A header, static constant block, and argument list are defined to minimize
  the work done by the caller's task.
   
   1. Header
   2. Constant variable length data (format string and filename string, etc).
   3. Arguments ("Variable" variable-length data)
   
  The data is delivered in this order in the packet to simplify the runtime 
  processing of each message.  All constant data is handled in DIAG task 
  context, leaving the caller's task to only process variable data at runtime.
   
  The phone will never process the constant data directly, except to copy 
  format and filename strings. 
---------------------------------------------------------------------------*/
#define _MSG_STR(A) #A
#define MSG_STR(A) _MSG_STR(A)
/*!
  QShrink attribute flag to move QSR strings into QSR_STR region of scatter load file
*/
#define QSR_ATTR __attribute__((section ("QSR_STR.fmt.rodata." SECT_EXT),aligned (4))) 
#define QSR_MSG_ATTR __attribute__((section (".qsr.rodata.QSR_F3_MSG." SECT_EXT)))
#define QSR_MSG_ERR_ATTR __attribute__((section (".qsr.rodata.QSR_F3_ERR." SECT_EXT)))
#define QSR_MSG_LEGACY_ATTR __attribute__((section (".qsr.rodata.QSR_LEGACY." SECT_EXT),used))
#define QSR_MSG_V3_ATTR __attribute__((section (".sdata.qsr"),aligned (4)))
#define QSR_MSG_V4_ATTR_DATA __attribute__((section (".data.qsr"),aligned (4),used))
#define QSR_4_0_ATTR __attribute__((section ("QSR_4_0_STR.fmt.rodata." SECT_EXT),aligned (4),used)) 
typedef struct
{
  uint16 rt_mask; /* Run time mask set by tools/DIAG */
  uint16 ss_id;    /* Subsystem ID */
  uint32 ss_mask;  /* Subsystem mask*/
} msg_v3_ssid_table_entry_type;

typedef struct
{
  uint32 start_address; /* Start address */
  uint32 index_to_v4_ssid_table;
} msg_v4_ss_uam_table_entry_type;


typedef struct
{
  uint32 index_to_v4_ssid_table;
} msg_v4_ss_aam_table_entry_type;
typedef msg_v3_ssid_table_entry_type msg_v3_ssid_table_type[1];  
/* QShrink 4*/
typedef msg_v3_ssid_table_entry_type msg_v4_ssid_table_type[MAX_MSG_V4_SSID_TABLE_ENTRY];  
typedef msg_v4_ss_aam_table_entry_type msg_v4_ss_aam_table_type[MAX_MSG_V4_SSID_AAM_TABLE_ENTRY];
typedef msg_v4_ss_uam_table_entry_type msg_v4_ss_uam_table_type[MAX_MSG_V4_SSID_UAM_TABLE_ENTRY];
typedef char* msg_v4_dbase_name_type[MAX_MSG_V4_DBASE_NAME_SIZE];


/*!
@ingroup diag_message_service
  All constant information stored for an optimized debug message.
   
  The values for the fields of this structure are known at compile time. 
  So this is to be defined as a "static " in the MACRO, so it ends up
  being defined and initialized at compile time for each and every message 
  in the software. This minimizes the amount of work to do during run time.
  
  So this structure is to be used in the "caller's" context. "Caller" is the
  client of the Message Services.
*/
typedef struct
{
  msg_desc_type desc;	/*!< contains mask, line number and subsystem-id. defined in msg_pkt_defs.h */
  uint32 msg_hash;		 /*!< message hash value */
}
msg_qsr_const_type;

/*!
@ingroup diag_message_service
  All constant information stored for an optimized debug message, for use by 
  error service.
   
  The values for the fields of this structure are known at compile time. 
  So this is to be defined as a "static " in the MACRO, so it ends up
  being defined and initialized at compile time for each and every message 
  in the software. This minimizes the amount of work to do during run time.
  
  So this structure is to be used in the "caller's" context. "Caller" is the
  client of the Message Services.
*/
typedef struct
{
  msg_qsr_const_type qsr_const_blk; /*!< contains mask, line number, subsystem-id and hash value. */
  const char *fname;                /*!<file name */
} err_msg_qsr_const_type;

/*!
Bit flag for qsr_flag to check if msg contains a QSR hash.
*/
#define QSR_BITFLAG_UNHASHED (0x00000000)
#define QSR_BITFLAG_IS_HASH (0x00000001)
#define QSR_BITFLAG_IS_V3 (0x00000002)
#define QSR_BITFLAG_IS_V4 (0x10000000)

/*!
@ingroup diag_message_service
	This is the structure that is stored by the caller's task in qsr_msg_send().
	The DIAG task will expand the constant data into the final packet before
	sending to the external device.
*/
typedef struct
{
  msg_hdr_type hdr; /*!< Header, defined in msg_pkt_defs.h */
  const msg_qsr_const_type* qsr_const_data_ptr; /*!< contains mask, line number, subsystem-id and hash value. */
  uint32 qsr_flag; /*!< Bit 0: True, if hash value is passed, False, if string pointer is passed */
  uint32 args[1];   /*!< starting address of arguments */
}
msg_qsr_store_type;
  

/* QShrink 3.0 structures */

/*!
@ingroup diag_message_service
  All constant information stored for an optimized debug message.
   
  The values for the fields of this structure are known at compile time. 
  So this is to be defined as a "static " in the MACRO, so it ends up
  being defined and initialized at compile time for each and every message 
  in the software. This minimizes the amount of work to do during run time.
  
  So this structure is to be used in the "caller's" context. "Caller" is the
  client of the Message Services.
*/
typedef struct
{
  uint16 ssid_index; /* Index to msg_v3_ssid_table_type */
  uint16 line;  /* Line number of the F3 message*/
  uint32 msg;		  /*!will contain Message hash , if  hashed */
                /*  (char*)< filename + format string - if not hashed */
}
msg_v3_const_hash;

/* This struct exists only for initialization purposes.  It will be replaced
   with a msg_v3_const_hash by the QShrink 3.0 tool. */
typedef struct
{
  uint32 ss_mask;
  const char *msg;
}
msg_v3_const_string;
/* This will statically initialize to the first entry. */
typedef union
{
  msg_v3_const_string msg_const_string;
  msg_v3_const_hash qsr_const_blk;
}
msg_v3_const_type;
/*!
@ingroup diag_message_service
 This union points to either a v2-style descrptor or a v3-style descriptor.
 You can find out which one it is from the accompanying field:
 msg_qsr_flag_enum qsr_flag;
*/

typedef union
{
  const msg_qsr_const_type* msg_desc;
  const msg_v3_const_hash* v3_index;
}
msg_qsr_const_ptr;

/* The structure will map to msg_qsr_const_type, after QShrink tool runs */

/*!
@ingroup diag_message_service
	This is the structure that is stored by the caller's task in qsr_msg_send().
	The DIAG task will expand the constant data into the final packet before
	sending to the external device.
*/
typedef struct
{
  msg_hdr_type hdr; /*!< Header, defined in msg_pkt_defs.h */
  msg_qsr_const_ptr qsr_const_data_ptr; /*!< contains mask, line number, subsystem-id and hash value. */
  uint32 qsr_flag; /*!< Bit 0: True, if hash value is passed, False, if string pointer is passed */
  uint32 args[1]; /*!< starting address of arguments */
}
msg_v3_store_type;


typedef struct
{
  uint8 cmd_code; /*!< cmd code for the extended pkts */
  uint8 version; /*!< version of the pkt; currently we support 1 */
  uint16 proc_id;/*!< Processor ID in which this F3 is being generated */
  uint32 id; /*!< Generic field for clients to use as needed */
  msg_v3_store_type msg;
}
msg_v3_multi_client_store_type;
typedef struct
{
  msg_v3_const_type msg_v3_const_blk;     
  const char *fname;                      /*!<file name */
} err_msg_v3_const_type;
/* The structure will map to err_msg_qsr_const_type, after QShrink tool runs */

/* QShrink 4.0 structures */
 typedef struct
 {
   msg_v3_const_string msg_const_string;
 }
 msg_v4_const_type;

typedef PACK(struct) {
  msg_hdr_type hdr; /*!< Header, defined in msg_pkt_defs.h */
  uint32 qsr_hash; /*!< Hash -structure pointer*/
  uint8 dbase_guid[2];    /*!< Last two bytes of  */
  uint32 args[1]; /*!< starting address of arguments */
 }msg_v4_store_type;

typedef struct
{
  uint8 cmd_code; /*!< cmd code for the extended pkts */
  uint8 version; /*!< version of the pkt; currently we support 1 */
  uint16 proc_id;/*!< Processor ID in which this F3 is being generated */
  uint32 id; /*!< Generic field for clients to use as needed */
  msg_v4_store_type msg;
}
msg_v4_multi_client_store_type;
 /* QShrink 4.0 MACROS */

/*!
  Constructs a msg_v4_const_type from the SSID, mask and format-string
*/
 #define XX_MSG_V4_CONST(xx_ss_id, xx_ss_mask, xx_fmt) \
   static const char QSR_string_ptr[] QSR_4_0_ATTR  \
     = MSG_STR(xx_ss_id) ":" MSG_STR(__LINE__)":" msg_file ":" xx_fmt ; \
   static const msg_v4_const_type xx_msg_v4_const \
     __attribute__((section ("QSR_4_0_MSG.fmt.rodata." MSG_STR(xx_ss_id)"." MSG_STR(xx_ss_mask)"." SECT_EXT)))= \
     { { xx_ss_mask, (char*)&QSR_string_ptr} }
/*!
@ingroup diag_message_service
@name XX_QSR_MSG_CONST macros
The purpose of these macros is to define the constant part of the message
that can be initialized at compile time and stored in ROM. msg_qsr_const_type 
is constructed from the Subsystem-ID (@a xx_ss_id), Mask (@a xx_ss_mask) 
and hash value (@a hash).The "static" limits the scope to the file the 
macro is called from.
@note 
Please do not call these directly, these are to be used internally,
by the different externalised MSG_ macros, which in-turn get text-substituted 
with QSR_MSG_ macros and the corresponding hash.
@note
XX_QSR_MSG_CONST_FMT_VAR can be removed. (!!!!!!!)
*/
/*@{*/ /* start group XX_QSR_MSG_CONST macros */         
/*!
Constructs a msg_qsr_const_type from the SSID, mask and message hash.
*/
  #define XX_QSR_MSG_CONST(xx_ss_id, xx_ss_mask, hash) \
	static const msg_qsr_const_type xx_msg_qsr_const = { \
	  {__LINE__, (xx_ss_id), (xx_ss_mask)}, hash}
/*!
Constructs a msg_qsr_const_type from the SSID, mask and message hash.
*/
  #define XX_QSR_MSG_CONST_FMT_VAR(xx_ss_id, xx_ss_mask,hash) \
	const msg_qsr_const_type xx_msg_qsr_const = { \
	  {__LINE__, (xx_ss_id), (xx_ss_mask)}, hash}
/*!
Constructs an err_msg_qsr_const_type from the SSID, mask, message hash and file-name.
*/
  #define XX_ERR_QSR_MSG_CONST(xx_ss_id, xx_ss_mask, hash) \
	static const err_msg_qsr_const_type xx_err_msg_qsr_const = { \
	  {{__LINE__, (xx_ss_id), (xx_ss_mask)}, hash}, msg_file}
/*@}*/ /* end group XX_QSR_MSG_CONST macros */

/*!
@ingroup diag_message_service
@name QSR MSG 2.0 macros
These are the optimized message macros that support messages with 0-9 integer 
arguments.Build-time mask-check is done against @a xx_ss_mask before macro expansion.
Defining the macro in a do{}while() limits the scope and guarantees the 
uniqueness of the variable name defined by the XX_QSR_MSG_CONST macros.
@a xx_ss_id specifies the Sub-system ID of the client, @a xx_fmt is the 
format-string that gets replaced with the hash value and @a xx_arg1 etc 
specify the integer arguments.
*/
/*@{*/ /*Start group QSR MSG 2.0 macros */

typedef struct
{
  msg_desc_type desc; /*!< ss_mask, line, ss_id */
  const char * msg;   /*!< filename + format string - This field may be changed to a hash value when the 
                           QSHRINK20 script runs on the linker output */
}
msg_v2_const_type;

typedef struct
{
  msg_v2_const_type msg_v2_const_blk;     /*!< contains mask, line number, subsystem-id and hash value. */
  const char *fname;                      /*!<file name */
} err_msg_v2_const_type;



#define XX_MSG_V2_CONST(xx_ss_id, xx_ss_mask, xx_fmt) \
    static const char QSR_string_ptr[] QSR_ATTR  \
      = msg_file ":" xx_fmt ; \
    static const msg_v2_const_type xx_msg_v2_const = { \
      {__LINE__, (xx_ss_id), (xx_ss_mask)}, \
          (char*)&QSR_string_ptr }

  #define XX_ERR_MSG_V2_CONST(xx_ss_id, xx_ss_mask, xx_fmt) \
    static const char QSR_string_ptr[] QSR_ATTR  \
      = msg_file ":" xx_fmt ; \
    static const err_msg_v2_const_type xx_err_msg_v2_const = { \
      {{__LINE__, (xx_ss_id), (xx_ss_mask)}, \
          (char*)&QSR_string_ptr} , msg_file}



/* -------------------------------------------------------------------------
   Function Definitions
   ------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C"
{
#endif

/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with no parameters. 

   @warning
   Do not call directly; use macro MSG()

   @param[in] *xx_msg_v2_const static constant constructed using 
   the different XX_MSG_V2_CONST macros

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v2_send_1, msg_v2_send_2, msg_v2_send_3, msg_v2_send_var
*/
  void msg_v2_send ( const msg_v2_const_type * xx_msg_const_ptr);

/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with 1 parameter. 

   @warning
   Do not call directly; use macro MSG_1()

   @param[in] *xx_msg_v2_const  static constant constructed using 
   the different XX_MSG_V2_CONST macros
   @param[in]  xx_arg1           integer parameter 1 for the optimized message

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v2_send, msg_v2_send_2, msg_v2_send_3, msg_v2_send_var
*/
  void msg_v2_send_1 (const msg_v2_const_type * xx_msg_const_ptr, uint32 xx_arg1);


/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with 2 parameters. 

   @warning
   Do not call directly; use macro MSG_2()

   @param[in] *xx_msg_v2_const  static constant constructed using 
   the different XX_MSG_V2_CONST macros
   @param[in]  xx_arg1           integer parameter 1 for the optimized message
   @param[in]  xx_arg2           integer parameter 2 for the optimized message

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v2_send, msg_v2_send_1, msg_v2_send_3, msg_v2_send_var
*/
  void msg_v2_send_2 ( const msg_v2_const_type * xx_msg_const_ptr,uint32 xx_arg1,
    uint32 xx_arg2);


/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with 3 parameters. 

   @warning
   Do not call directly; use macro MSG_3()

   @param[in] *xx_msg_v2_const  static constant constructed using 
   the different XX_MSG_V2_CONST macros
   @param[in]  xx_arg1           integer parameter 1 for the optimized message
   @param[in]  xx_arg2           integer parameter 2 for the optimized message
   @param[in]  xx_arg3           integer parameter 3 for the optimized message

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v2_send, msg_v2_send_1, msg_v2_send_2, msg_v2_send_var
*/
  void msg_v2_send_3 ( const msg_v2_const_type * xx_msg_const_ptr, uint32 xx_arg1,
    uint32 xx_arg2, uint32 xx_arg3);

/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with variable number 
   of (4 to 9) parameters.  

   @warning
   Do not call directly; use macros MSG_4(), ..MSG_9()

   @param[in] *xx_msg_v2_const            static constant constructed using 
   the different XX_MSG_V2_CONST macros
   @param[in] num_args                     number of parameters

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v2_send, msg_v2_send_1, msg_v2_send_2, msg_v2_send_3
*/
  void msg_v2_send_var ( const msg_v2_const_type * xx_msg_const_ptr, uint32 num_args, ...);


/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with no parameters. 

   @warning
   Do not call directly; use macro MSG()

   @param[in] *xx_msg_v4 const static constant constructed using 
   the different XX_MSG_V4_CONST macros

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v4_send_1, msg_v4_send_2, msg_v4_send_3, msg_v4_send_var
*/

  /*!
  @ingroup diag_message_service
	 @brief
	 This will build a new style optimized diagnostic message with no parameters. 
  
	 @warning
	 Do not call directly; use macro MSG()
  
	 @param[in] *xx_msg_v4 const static constant constructed using 
	 the different XX_MSG_V4_CONST macros
  
	 @dependencies 
	 msg_init() must have been called previously.  A free buffer must
	 be available or the message will be ignored (never buffered).
  
	 @sideeffects
	 None
  
	 @return
	 None
  
	 @sa
	 msg_v4_send_1, msg_v4_send_2, msg_v4_send_3, msg_v4_send_var
  */

  void msg_v4_send (const msg_v4_const_type * xx_msg_const_ptr);

/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with no parameters. 

   @warning
   Do not call directly; use macro MSG_EXT()

   @param[in] *xx_msg_v4_const static constant constructed using 
   the different XX_MSG_V4_CONST macros
   @param[in] version				   Specifies the version - currently, there are two versions 
									   0 - same as msg_v4_send() (for backwards compatibility)
									   1 - The outgoing msg header will have the support to
										   include ID field to differentiate messages
										   coming from different instances of the processor.
   
   @param[in] *parameter			   Based on the version passed in, this pointer is interpreted
									   as follows-
									   version		 pointer
									   0			 NULL
									   1			 uint32 * . The uint32 value this pointer points to,
													 is the ID of the instance generating the msg.

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v4_send_1_ext, msg_v4_send_2_ext, msg_v4_send_3_ext, msg_v4_send_var_ext
*/
  void msg_v4_send_ext ( const msg_v4_const_type * xx_msg_const_ptr, uint32 version, void* parameter);

/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with 1 parameter. 

   @warning
   Do not call directly; use macro MSG_1()

   @param[in] *xx_msg_v4_const  static constant constructed using 
   the different XX_MSG_V4_CONST macros
   @param[in]  xx_arg1           integer parameter 1 for the optimized message

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v4_send, msg_v4_send_2, msg_v4_send_3, msg_v4_send_var
*/
  void msg_v4_send_1 (const msg_v4_const_type * xx_msg_const_ptr, uint32 xx_arg1);

/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with 1 parameter. 

   @warning
   Do not call directly; use macro MSG_1_EXT()

   @param[in] *xx_msg_v4_const  static constant constructed using 
   the different XX_MSG_V4_CONST macros
   @param[in] version                  Specifies the version - currently, there are two versions 
                                       0 - same as msg_v3_send_1() (for backwards compatibility)
                                       1 - The outgoing msg header will have the support to
                                           include ID field to differentiate messages
                                           coming from different instances of the processor.
   
   @param[in] *parameter               Based on the version passed in, this pointer is interpreted
                                       as follows-
                                       version       pointer
                                       0             NULL
                                       1             uint32 * . The uint32 value this pointer points to,
                                                     is the ID of the instance generating the msg.

   @param[in]  xx_arg1           integer parameter 1 for the optimized message

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v4_send_ext, msg_v4_send_2_ext, msg_v4_send_3_ext, msg_v4_send_var_ext
*/
  void msg_v4_send_1_ext (const msg_v4_const_type * xx_msg_const_ptr, uint32 version, void* parameter, uint32 xx_arg1);

/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with 2 parameters. 

   @warning
   Do not call directly; use macro MSG_2()

   @param[in] *xx_msg_v4_const  static constant constructed using 
   the different XX_MSG_V4_CONST macros
   @param[in]  xx_arg1           integer parameter 1 for the optimized message
   @param[in]  xx_arg2           integer parameter 2 for the optimized message

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v4_send, msg_v4_send_1, msg_v4_send_3, msg_v4_send_var
*/
  void msg_v4_send_2 (const msg_v4_const_type * xx_msg_const_ptr, uint32 xx_arg1,uint32 xx_arg2);


/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with 2 parameters. 

   @warning
   Do not call directly; use macro MSG_2()

   @param[in] *xx_msg_v4_const  static constant constructed using 
   the different XX_MSG_V4_CONST macros
   @param[in] version                  Specifies the version - currently, there are two versions 
                                       0 - same as msg_v4_send_2() (for backwards compatibility)
                                       1 - The outgoing msg header will have the support to
                                           include ID field to differentiate messages
                                           coming from different instances of the processor.
   
   @param[in] *parameter                Based on the version passed in, this pointer is interpreted
                                       as follows-
                                       version       pointer
                                       0             NULL
                                       1             uint32 * . The uint32 value this pointer points to,
                                                     is the ID of the instance generating the msg.

   @param[in]  xx_arg1          integer parameter 1 for the optimized message
   @param[in]  xx_arg2          integer parameter 2 for the optimized message

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v4_send_ext, msg_v4_send_1_ext, msg_v4_send_3_ext, msg_v4_send_var_ext
*/
  void msg_v4_send_2_ext ( const msg_v4_const_type * xx_msg_const_ptr, uint32 version, void* parameter,
                           uint32 xx_arg1, uint32 xx_arg2);


/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with 3 parameters. 

   @warning
   Do not call directly; use macro MSG_3()

   @param[in] *xx_msg_v4_const  static constant constructed using 
   the different XX_MSG_V4_CONST macros
   @param[in]  xx_arg1           integer parameter 1 for the optimized message
   @param[in]  xx_arg2           integer parameter 2 for the optimized message
   @param[in]  xx_arg3           integer parameter 3 for the optimized message

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v4_send, msg_v4_send_1, msg_v4_send_2, msg_v4_send_var
*/
  void msg_v4_send_3 ( const msg_v4_const_type * xx_msg_const_ptr, uint32 xx_arg1,uint32 xx_arg2, uint32 xx_arg3);


/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with 3 parameters. 

   @warning
   Do not call directly; use macro MSG_3()

   @param[in] *xx_msg_v4_const  static constant constructed using 
   the different XX_MSG_V4_CONST macros
   @param[in] version                  Specifies the version - currently, there are two versions 
                                       0 - same as msg_v4_send_3() (for backwards compatibility)
                                       1 - The outgoing msg header will have the support to
                                           include ID field to differentiate messages
                                           coming from different instances of the processor.
   
   @param[in] *parameter                Based on the version passed in, this pointer is interpreted
                                       as follows-
                                       version       pointer
                                       0             NULL
                                       1             uint32 * . The uint32 value this pointer points to,
                                                     is the ID of the instance generating the msg.

   @param[in]  xx_arg1                integer parameter 1 for the optimized message
   @param[in]  xx_arg2                integer parameter 2 for the optimized message
   @param[in]  xx_arg3                integer parameter 3 for the optimized message

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v4_send, msg_v4_send_1, msg_v4_send_2, msg_v4_send_var
*/
  void msg_v4_send_3_ext ( const msg_v4_const_type * xx_msg_const_ptr, uint32 version, void* parameter,
                           uint32 xx_arg1, uint32 xx_arg2, uint32 xx_arg3);


/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with variable number 
   of (4 to 9) parameters.  

   @warning
   Do not call directly; use macros MSG_4(), ..MSG_9()

   @param[in] *xx_msg_v4_const            static constant constructed using 
   the different XX_MSG_V4_CONST macros
   @param[in] num_args                     number of parameters

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v4_send, msg_v4_send_1, msg_v4_send_2, msg_v4_send_3
*/
  void msg_v4_send_var(const msg_v4_const_type * xx_msg_const_ptr, uint32 num_args, ...);


/*!
@ingroup diag_message_service
   @brief
   This will build a new style optimized diagnostic message with variable number 
   of (4 to 9) parameters.  

   @warning
   Do not call directly; use macros MSG_4(), ..MSG_9()

   @param[in] *xx_msg_v4_const            static constant constructed using 
   the different XX_MSG_V4_CONST macros
   @param[in] version                  Specifies the version - currently, there are two versions 
                                       0 - same as msg_v4_send_var() (for backwards compatibility)
                                       1 - The outgoing msg header will have the support to
                                           include ID field to differentiate messages
                                           coming from different instances of the processor.

   @param[in] *parameter                Based on the version passed in, this pointer is interpreted
                                       as follows-
                                       version       pointer
                                       0             NULL
                                       1             uint32 * . The uint32 value this pointer points to,
                                                     is the ID of the instance generating the msg.

   @param[in] num_args                number of parameters

   @dependencies 
   msg_init() must have been called previously.  A free buffer must
   be available or the message will be ignored (never buffered).

   @sideeffects
   None

   @return
   None

   @sa
   msg_v4_send, msg_v4_send_1, msg_v4_send_2, msg_v4_send_3
*/
  void msg_v4_send_var_ext ( const msg_v4_const_type * xx_msg_const_ptr, uint32 version, void* parameter,
                              uint32 num_args, ...);

/*!
@ingroup diag_message_service
   @brief
   Sends the desired optimized debug message using msg_v2_send_3, in addition 
   to invoking err_put_log. This reduces one function call for top level macro.

   @warning
   Do not call directly, use MSG_ERR_LOG macro

   @param[in] *const_blk          static constant constructed using 
   the different xx_err_msg_v2_const macros
   @param[in] code1              integer parameter 1
   @param[in] code2              integer parameter 2
   @param[in] code3              integer parameter 3
   
   @dependencies
   None

   @return
   None

   @sideeffects
   None

   @sa
   None
*/
void msg_v2_errlog_3 (const err_msg_v2_const_type* const_blk, uint32 code1, uint32 code2, uint32 code3,const char * file,uint32 line);

/*!
@ingroup diag_message_service
   @brief
   Sends the desired optimized debug message using msg_v2_send_2, in addition 
   to invoking err_put_log. This reduces one function call for top level macro.

   @warning
   Do not call directly, use MSG_ERR_LOG macro

   @param[in] *const_blk          static constant constructed using 
   the different xx_err_msg_v2_const macros
   @param[in] code1              integer parameter 1
   @param[in] code2              integer parameter 2
   @param[in] code3              integer parameter 3
   
   @dependencies
   None

   @return
   None

   @sideeffects
   None

   @sa
   None
*/
void msg_v2_errlog_2 (const err_msg_v2_const_type* const_blk, uint32 code1, uint32 code2,const char * file,uint32 line);

/*!
@ingroup diag_message_service
   @brief
   Sends the desired optimized debug message using msg_v2_send_1, in addition 
   to invoking err_put_log. This reduces one function call for top level macro.

   @warning
   Do not call directly, use MSG_ERR_LOG macro

   @param[in] *const_blk          static constant constructed using 
   the different xx_err_msg_v2_const macros
   @param[in] code1              integer parameter 1
   @param[in] code2              integer parameter 2
   @param[in] code3              integer parameter 3
   
   @dependencies
   None

   @return
   None

   @sideeffects
   None

   @sa
   None
*/
void msg_v2_errlog_1 (const err_msg_v2_const_type* const_blk, uint32 code1,const char * file,uint32 line);

/*!
@ingroup diag_message_service
   @brief
   Sends the desired optimized debug message using msg_v2_send, in addition 
   to invoking err_put_log. This reduces one function call for top level macro.

   @warning
   Do not call directly, use MSG_ERR_LOG macro

   @param[in] *const_blk          static constant constructed using 
   the different xx_err_msg_v2_const macros
   @param[in] code1              integer parameter 1
   @param[in] code2              integer parameter 2
   @param[in] code3              integer parameter 3
   
   @dependencies
   None

   @return
   None

   @sideeffects
   None

   @sa
   None
*/
void msg_v2_errlog_0 (const err_msg_v2_const_type* const_blk,const char * file,uint32 line);

	/*!
	@ingroup diag_message_service
	   @brief
	   Sends the desired optimized debug message using msg_v3_send_3, in addition 
	   to invoking err_put_log. This reduces one function call for top level macro.
	
	   @warning
	   Do not call directly, use MSG_ERR_LOG macro
	
	   @param[in] *const_blk		  static constant constructed using 
	   the different xx_err_msg_v3_const macros
	   @param[in] code1 			 integer parameter 1
	   @param[in] code2 			 integer parameter 2
	   @param[in] code3 			 integer parameter 3
	   @param[in] file				 file name
	   @param[in] line				 line number
	   @dependencies
	   None
	
	   @return
	   None
	
	   @sideeffects
	   None
	
	   @sa
	   None
	*/
	void msg_v4_errlog_3 ( const msg_v4_const_type * const_blk, uint32 code1, uint32 code2, uint32 code3,const char * file,uint32 line);

	/*!
	@ingroup diag_message_service
	   @brief
	   Sends the desired optimized debug message using msg_v4_send_2, in addition 
	   to invoking err_put_log. This reduces one function call for top level macro.
	
	   @warning
	   Do not call directly, use MSG_ERR_LOG macro
	
	   @param[in] *const_blk		  static constant constructed using 
	   the different xx_err_msg_v3_const macros
	   @param[in] code1 			 integer parameter 1
	   @param[in] code2 			 integer parameter 2
	   @param[in] code3 			 integer parameter 3
	   @param[in] file				 file name
	   @param[in] line				 line number  
	   @dependencies
	   None
	
	   @return
	   None
	
	   @sideeffects
	   None
	
	   @sa
	   None
	*/
	void msg_v4_errlog_2 ( const msg_v4_const_type * const_blk, uint32 code1, uint32 code2,const char * file, uint32 line);

	/*!
	@ingroup diag_message_service
	   @brief
	   Sends the desired optimized debug message using msg_v4_send_1, in addition 
	   to invoking err_put_log. This reduces one function call for top level macro.
	
	   @warning
	   Do not call directly, use MSG_ERR_LOG macro
	
	   @param[in] *const_blk		  static constant constructed using 
	   the different xx_err_msg_v3_const macros
	   @param[in] code1 			 integer parameter 1
	   @param[in] code2 			 integer parameter 2
	   @param[in] code3 			 integer parameter 3
	   @param[in] file				 file name
	   @param[in] line				 line number	 
	   @dependencies
	   None
	
	   @return
	   None
	
	   @sideeffects
	   None
	
	   @sa
	   None
	*/
	void msg_v4_errlog_1 ( const msg_v4_const_type * const_blk, uint32 code1,const char * file,uint32 line);


	/*!
@ingroup diag_message_service
   @brief
   Sends the desired optimized debug message using msg_v4_send, in addition 
   to invoking err_put_log. This reduces one function call for top level macro.

   @warning
   Do not call directly, use MSG_ERR_LOG macro

   @param[in] *const_blk          static constant constructed using 
   the different xx_err_msg_v3_const macros
   @param[in] code1              integer parameter 1
   @param[in] code2              integer parameter 2
   @param[in] code3              integer parameter 3
   @param[in] file               file name
   @param[in] line               line number
 
   @dependencies
   None

   @return
   None

   @sideeffects
   None

   @sa
   None
*/
void msg_v4_errlog_0 ( const msg_v4_const_type * const_blk,const char * file,uint32 line);

	/*!
	@ingroup diag_message_service
	   @brief
		 This function is similar to msg_v4_errlog_3 function, except that it takes
		 additional parameters : version and void *. 
	
	   @warning
	   Do not call directly, use MSG_ERR_LOG_EXT macro
	
	   @param[in] *const_blk		  static constant constructed using 
	   the different xx_err_msg_v4_const macros
	   @param[in]  version			   version number
	   @param[in]  parameter		   void *
	   Based on the version value, void* can be interpreted as follows-
	   Version		Pointer
		  0 		 NULL
		  1 		 uint32*   
	   @param[in] code1 			 integer parameter 1
	   @param[in] code2 			 integer parameter 2
	   @param[in] code3 			 integer parameter 3
	   @param[in] file				 file name
	   @param[in] line				 line number
	 
	   @dependencies
	   None
	
	   @return
	   None
	
	   @sideeffects
	   None
	
	   @sa
	   None
	*/
	
	void msg_v4_errlog_3_ext ( const msg_v4_const_type * const_blk, uint32 version, void* parameter, uint32 code1, uint32 code2, uint32 code3, const char * file,uint32 line);

	/*!
	@ingroup diag_message_service
	   @brief
		 This function is similar to msg_v4_errlog_2 function, except that it takes
		 additional parameters : version and void *. 
	
	   @warning
	   Do not call directly, use MSG_ERR_LOG_EXT macro
	
	   @param[in] *const_blk		  static constant constructed using 
	   the different xx_err_msg_v4_const macros
	   @param[in]  version			   version number
	   @param[in]  parameter		   void *
	   Based on the version value, void* can be interpreted as follows-
	   Version		Pointer
		  0 		 NULL
		  1 		 uint32* 
	   @param[in] code1 			 integer parameter 1
	   @param[in] code2 			 integer parameter 2
	   @param[in] file				 file name
	   @param[in] line				 line number
	 
	   @dependencies
	   None
	
	   @return
	   None
	
	   @sideeffects
	   None
	
	   @sa
	   None
	*/
	
	void msg_v4_errlog_2_ext ( const msg_v4_const_type * const_blk, uint32 version, void* parameter, uint32 code1, uint32 code2, const char * file,uint32 line);

	/*!
	@ingroup diag_message_service
	   @brief
		 This function is similar to msg_v4_errlog_1 function, except that it takes
		 additional parameters : version and void *. 
	
	   @warning
	   Do not call directly, use MSG_ERR_LOG_EXT macro
	
	   @param[in] *const_blk		  static constant constructed using 
	   the different xx_err_msg_v4_const macros
	   @param[in]  version			   version number
	   @param[in]  parameter		   void *
	   Based on the version value, void* can be interpreted as follows-
	   Version		Pointer
		  0 		 NULL
		  1 		 uint32*	
	   @param[in] code1 			 integer parameter 1
	   @param[in] file				 file name
	   @param[in] line				 line number
	 
	   @dependencies
	   None
	
	   @return
	   None
	
	   @sideeffects
	   None
	
	   @sa
	   None
	*/
	
	void msg_v4_errlog_1_ext ( const msg_v4_const_type * const_blk, uint32 version, void* parameter, uint32 code1, const char * file,uint32 line);

	/*!
	@ingroup diag_message_service
	   @brief
		 This function is similar to msg_v4_errlog_0 function, except that it takes
		 additional parameters : version and void *. 
	
	   @warning
	   Do not call directly, use MSG_ERR_LOG_EXT macro
	
	   @param[in] *const_blk		  static constant constructed using 
	   the different xx_err_msg_v4_const macros
	   @param[in]  version			   version number
	   @param[in]  parameter		   void *
	   Based on the version value, void* can be interpreted as follows-
	   Version		Pointer
		  0 		 NULL
		  1 		 uint32*		 
	   @param[in] file				 file name
	   @param[in] line				 line number
	 
	   @dependencies
	   None
	
	   @return
	   None
	
	   @sideeffects
	   None
	
	   @sa
	   None
	*/
	
	void msg_v4_errlog_0_ext ( const msg_v4_const_type * const_blk, uint32 version, void* parameter, const char * file,uint32 line);


#ifdef __cplusplus
}
#endif

#endif	/* MSG_QSR_H */

