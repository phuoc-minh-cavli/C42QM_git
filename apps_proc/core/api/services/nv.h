#ifndef NV_H
#define NV_H
/*==========================================================================

         N V    T A S K    P U B L I C    H E A D E R    F I L E

DESCRIPTION

  This header file contains all the definitions necessary for any task
  to interface with the Non Volatile Memory task, in order to access
  the NV items in EFS to read, write, and start.

Copyright (c) 2005-2009 by Qualcomm Technologies, Incorporated.
All Rights Reserved.
Qualcomm Confidential and Proprietary

===========================================================================*/

/*===========================================================================

                           EDIT HISTORY FOR FILE

$Header: //components/rel/core.tx/6.0/api/services/nv.h#1 $ $DateTime: 2020/01/30 22:49:35 $ $Author: pwbldsvc $
   
when       who     what, where, why
--------   ---     ---------------------------------------------------------
08/14/09   sri     Cleanup the feature : FEATURE_UIM_RUN_TIME_ENABLE as the 
                   functions nv_rtre_control, nv_rtre_polling_control and 
                   nv_rtre_polling_for_nam are mainlined for UMTS targets also
08/11/09   sri     Removed REX dependencies from the NV on WM side 
07/15/09   sri     Remoted nv_rtre_control, nv_rtre_polling_control and 
                   nv_rtre_polling_for_nam
07/08/09   sri     Moved inline function implementations to nvim.c
11/15/08   pc      Split header into public and private versions for CMI.
06/05/05   pc      Created NV-2.
===========================================================================*/

/*===========================================================================
 
                           INCLUDE FILES

===========================================================================*/
#include "target.h"
#include "comdef.h"
#include "queue.h"
#include "qw.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include "nv_items.h"     // This header file is generated by NVC

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

#define  NV_RUIM_ACCESS_SIG   0x0010      /* R-UIM Access Synchronization  */

/*===========================================================================
                                                                         
                              MACROS                                     
                                                                         
===========================================================================*/

#define  NV_RPT_TIMER_SIG     0x0001      /* Watchdog report signal */

/*  Command codes when command is issued to the NV task.                   */
  typedef enum {
    NV_READ_F,          /* Read item */
    NV_WRITE_F,         /* Write item */
    NV_PEEK_F,          /* Peek at a location */
    NV_POKE_F,          /* Poke into a location */
    NV_FREE_F,          /* Free an nv item's memory allocation */
    NV_CHKPNT_DIS_F,    /* Disable cache checkpointing for glitch recovery */
    NV_CHKPNT_ENA_F,    /* Enable cache checkpointing for glitch recovery */
    NV_OTASP_COMMIT_F,  /* Commit (write) OTASP parameters to nv */
    NV_REPLACE_F,       /* Replace (overwrite) a dynamic pool item */
    NV_INCREMENT_F,     /* Increment the rental timer item */
    NV_RTRE_OP_CONFIG_F,/* Set the operational configuration of RTRE */
    NV_FUNC_ENUM_PAD = 0x7FFF,     /* Pad to 16 bits on ARM */
    NV_FUNC_ENUM_MAX = 0x7fffffff /* Pad to 32 bits */

  } nv_func_enum_type;


/*  Returned status codes for requested operation.                         */
  typedef enum {
    NV_DONE_S,          /* Request completed okay */
    NV_BUSY_S,          /* Request is queued */
    NV_BADCMD_S,        /* Unrecognizable command field */
    NV_FULL_S,          /* The NVM is full */
    NV_FAIL_S,          /* Command failed, reason other than NVM was full */
    NV_NOTACTIVE_S,     /* Variable was not active */
    NV_BADPARM_S,       /* Bad parameter in command block */
    NV_READONLY_S,      /* Parameter is write-protected and thus read only */
    NV_BADTG_S,         /* Item not valid for Target */
    NV_NOMEM_S,         /* free memory exhausted */
    NV_NOTALLOC_S,      /* address is not a valid allocation */
    NV_STAT_ENUM_PAD = 0x7FFF,     /* Pad to 16 bits on ARM */
    NV_STAT_ENUM_MAX = 0x7FFFFFFF     /* Pad to 16 bits on ARM */
  } nv_stat_enum_type;


#define     NV_VALID_ESN_CHKSUM     0xFFFFFFFFL


/* The command on the NVM queue */

typedef struct {
  q_link_type           link;           /* Queue field */
  nv_items_enum_type    item;           /* Item to access */
  nv_func_enum_type     cmd;            /* READ, WRITE, PEEK, POKE, etc. */
  nv_item_type          *data_ptr;      /* Pointer to read or write data */
#ifdef NV_FEATURE_REX
  rex_tcb_type          *tcb_ptr;       /* Task to signal */
  rex_sigs_type         sigs;           /* Rex signals for task */
#else /* FEATURE_WINCE */
  void                  *tcb_ptr;       /* Task to signal */
  dword                 sigs;           /* Rex signals for task */
#endif /* FEATURE_WINCE */
  q_type                *done_q_ptr;    /* Where to place done buffer */
  nv_stat_enum_type     status;         /* Status of request */
} nv_cmd_type;


/*The command on NVM queue with support for accessing items on multiple SIMs via context*/
typedef struct {
  q_link_type           link;           /* Queue field */
  nv_cmd_type		*nvcmd;
  uint16		context;	/* Context for identifying SIM */
}nv_cmd_ext_type;


/*===========================================================================

                      FUNCTION DECLARATIONS

===========================================================================*/


/*These are HTORPC Meta comments. Do not delete this*/
/*~ FIELD nv_cmd_type.data_ptr POINTER DISC nv_cmd_type.item */
/*~ FIELD nv_cmd_ext_type.data_ptr POINTER DISC nv_cmd_ext_type.item */

/*===========================================================================

FUNCTION NV_CMD

DESCRIPTION
  This is the outside world's interface to the non volatile memory task.
  This function takes an already filled out nv_cmd_type which it places
  on the nv command queue.  The function then returns to the caller.
  Return to the caller does not mean that the command has been executed
  yet, only that it is queued for execution.  When nv_cmd is done processing
  the request it returns the buffer to the specified queue if a return
  queue adress is provided.  Otherwise it does not move the buffer.

  An example NV READ request for MIN1 is as follows:
                              
  static   nv_cmd_type       cmd_buf;        - Define command buffer
  static   nv_item_type      data_buf;       - Define data buffer

  data_buf.min1.nam  = current_nam;          - Specify which NAM          
  cmd_buf.cmd        = NV_READ_F;            - Specify read operation     
  cmd_buf.tcb_ptr    = rex_self();           - Own TCB                    
  cmd_buf.sigs       = XX_NV_CMD_SIG;        - Signal to set when done    
  cmd_buf.done_q_ptr = NULL;                 - No buffer return required  
  cmd_buf.item       = NV_MIN1_I;            - Specify the item to read   
  cmd_buf.data_ptr   = &data_buf;            - Where to place read data   

  rex_clr_sigs (rex_self(), XX_NV_CMD_SIG);  - Clear the signal        
  nv_cmd (&cmd_buf);                         - And issue the command   

DEPENDENCIES
  The NV task must have been started up already.  All of the items in
  the nv_cmd_type must be already set.

RETURN VALUE
  None directly.  The requested data is returned in the buffer pointed
  to inside the nv_cmd_type.  The status variable of the nv_cmd_type
  will be updated to reflect the current status of this command as it
  is processed.  In the above nv_cmd buffer nv_cmd.status is set to:

  NV_DONE_S,      -  Request completed okay 
  NV_BUSY_S,      -  Request is queued 
  NV_BADCMD_S,    -  Unrecognizable command field 
  NV_FULL_S,      -  The NVM is full 
  NV_FAIL_S,      -  Command failed, reason other than NVM was full 
  NV_NOTACTIVE_S, -  Variable was not active 
  NV_BADPARM_S,   -  Bad parameter in command block 
  NV_READONLY_S,  -  Parameter is write-protected and thus read only 
  NV_BADTG_S,     -  Item not valid for Target 
  NV_NOMEM_S,     -  free memory exhausted 
  NV_NOTALLOC_S   -  address is not a valid allocation 

SIDE EFFECTS
  The nv_cmd_type is placed on the NV command queue.  It must not be
  modified until the command has been processed!

===========================================================================*/

extern void 
nv_cmd (
  nv_cmd_type *cmd_ptr  /* pointer to the NV command block */
);


/*===========================================================================

FUNCTION NV_CMD_EXT

DESCRIPTION
  This is the outside world's interface to the non volatile memory task when
  there is a requirement to specify which SIM/subscription is being referred
  to. This function takes an already filled out nv_cmd_ext_type which it 
  places on the nv command queue.  The function then returns to the caller.
  Return to the caller does not mean that the command has been executed
  yet, only that it is queued for execution.  When nv_cmd is done processing
  the request it returns the buffer to the specified queue if a return
  queue adress is provided.  Otherwise it does not move the buffer.

DEPENDENCIES
  The NV task must have been started up already.  All of the items in
  the nv_cmd_ext_type must be already set.

RETURN VALUE
  None directly.  The requested data is returned in the buffer pointed
  to inside the nv_cmd_ext_type.  The status variable of the nv_cmd_type
  will be updated to reflect the current status of this command as it
  is processed.  In the above nv_cmd buffer nv_cmd.status is set to:

  NV_DONE_S,      -  Request completed okay 
  NV_BUSY_S,      -  Request is queued 
  NV_BADCMD_S,    -  Unrecognizable command field 
  NV_FULL_S,      -  The NVM is full 
  NV_FAIL_S,      -  Command failed, reason other than NVM was full 
  NV_NOTACTIVE_S, -  Variable was not active 
  NV_BADPARM_S,   -  Bad parameter in command block 
  NV_READONLY_S,  -  Parameter is write-protected and thus read only 
  NV_BADTG_S,     -  Item not valid for Target 
  NV_NOMEM_S,     -  free memory exhausted 
  NV_NOTALLOC_S   -  address is not a valid allocation 

SIDE EFFECTS
  The nv_cmd_ext_type is placed on the NV command queue.  It must not be
  modified until the command has been processed!

===========================================================================*/

extern void 
nv_cmd_ext (
  nv_cmd_ext_type *cmd_ext_ptr  /* pointer to the NV command block */
);


/*===========================================================================

FUNCTION NV_TASK

DESCRIPTION
  The main control task calls this function with rex_def_task to start up
  the nv task.  This function then initializes NV timers and command queue.
  If the major revision number has changed then this function rebuilds the
  NV itself.  Once initialization is complete the function sets MC_ACK_SIG
  and it waits for NV_START_SIG.  When the start signal is received the
  function reads and processes any request it finds on its queue until
  there are no more requests.  Once the request queue is empty the task
  then starts normal operation by waiting for and processing any new commands
  when they arrrive on its command queue.  Throughout its operation the
  NV task wakes up periodically to kick the watchdog task.

DEPENDENCIES
  This function must be called with rex_def_task _once_.  It requires the
  NV_START_SIG before proceeding past the initialization stage.

RETURN VALUE
  Never returns.

SIDE EFFECTS
  Modifies NVM.

===========================================================================*/

extern void 
nv_task (
  dword param      /* parameter from REX, unused */
);


/*===========================================================================

FUNCTION NV_READ_ERR_LOG

DESCRIPTION
  This function reads an error log from NVM.

DEPENDENCIES
  The function MUST NOT USE ANY TASK SERVICES, so that it can be
  called when tasks are not initialized.  The function MUST NOT
  USE ERROR SERVICES.  It returns status to the caller if there
  is a failure.

RETURN VALUE
  NV_DONE_S         if it worked
  NV_NOT_ACTIVE_S   if item was not active
  NV_FAIL_S         if item could not be read

SIDE EFFECTS
  None.

===========================================================================*/

nv_stat_enum_type 
nv_read_err_log (
  nv_err_log_type  *nv_err_log_ptr    /* Pointer where to return read data */
);

/*These are HTORPC Meta comments. Do not delete this*/
/*~ FUNCTION nv_read_err_log */
/*~ PARAM INOUT nv_err_log_ptr POINTER */

/*===========================================================================

FUNCTION NV_WRITE_ERR_LOG

DESCRIPTION
  This function writes the boot error log to NVM.

DEPENDENCIES
  The function MUST NOT USE ANY TASK SERVICES, so that it can be
  called when tasks are not initialized.  The function MUST NOT
  USE ERROR SERVICES.  It returns status to the caller if there
  is a failure.

RETURN VALUE
  NV_DONE_S - if it worked
  NV_FAIL_S - if item could not be written

SIDE EFFECTS
  None.

===========================================================================*/

nv_stat_enum_type
nv_write_err_log (
  nv_err_log_type  *nv_err_log_ptr    /* Pointer where to get write data */
);

/*These are HTORPC Meta comments. Do not delete this*/
/*~ FUNCTION nv_write_err_log */
/*~ PARAM INOUT nv_err_log_ptr POINTER */

/*===========================================================================

FUNCTION NV_MAX_SIZE_OF_ROAMING_LIST

DESCRIPTION
  This function returns the maximum number of bytes available for
  storage of a roaming list (per NAM).  The value returned depends 
  on the total amount of NVRAM installed in the phone and the total 
  number of NAMs defined.  

DEPENDENCIES
  The function cannot be called until NV is initialized.  A
  premature call will raise err_fatal.

RETURN VALUE
  The maximum number of bytes available for storage of a roaming list
  (per NAM).

SIDE EFFECTS
  None.

===========================================================================*/

word  nv_max_size_of_roaming_list (void);

/*These are HTORPC Meta comments. Do not delete this*/
/*~ FUNCTION nv_max_size_of_roaming_list */

/*===========================================================================

FUNCTION NV_PRL_IS_VALID

DESCRIPTION
  This function returns the "valid" indicator from the specified NAM's
  roaming list.  

DEPENDENCIES
  None.

RETURN VALUE
  TRUE         if the roaming list "valid" field is TRUE 
  FALSE        if the roaming list "valid" field is FALSE or if the
                 specified NAM is invalid or if the roaming list
                 is currently NOT_ACTIVE

SIDE EFFECTS
  None.

===========================================================================*/

boolean  
nv_prl_is_valid (
  byte  nam
);

/*These are HTORPC Meta comments. Do not delete this*/
/*~ FUNCTION nv_prl_is_valid */

/*===========================================================================

FUNCTION NV_BUILT

DESCRIPTION
  This function checks the major version number of the the NV task
  as stored at edit time, against the major version number of the
  NV EEPROM as read from NVM.  If the numbers are different then the
  function returns FALSE, which indicates that the NV is not built
  and it may not be accessed from any external task.  If the numbers
  are the same then the function returns TRUE, which indicates that
  NV is built and it may be accessed.  This function lets other units
  issue direct NV read and write commands if the status returned is
  TRUE, thus allowing NV read and write before the NV task has been
  started.

DEPENDENCIES
  This is a special use function, normally called by error services
  to allow early access to NV, and before the NV task has been started.
  If NV_BUILT returns TRUE the NV may be accessed BUT ONLY USING DIRECT
  READ AND WRITES OF THE ERROR LOG (NV_READ_ERR_LOG and NV_WRITE_ERR_LOG).
  The NV task itself can not be counted upon to be started yet and normal
  NV requests must not be used.  As with all direct read and write
  operation, the data item (here it is the major version number) must
  be contained on a signle physical NV page.

RETURN VALUE
  TRUE      - The NV has been built and direct read/write is allowed
  FALSE     - The NV has not been built and access is not allowed

SIDE EFFECTS
  None.

===========================================================================*/

extern boolean nv_built (void);

/*These are HTORPC Meta comments. Do not delete this*/
/*~ FUNCTION nv_built */

/*===========================================================================

FUNCTION NV_PRL_VERSION

DESCRIPTION
  This function returns the "prl_version" indicator from the specified NAM's
  roaming list.  

DEPENDENCIES
  None.

RETURN VALUE
  prl_version             if the roaming list for the specified NAM is
                            currently ACTIVE 
  NV_PRL_VERSION_INVALID  if the specified NAM is invalid or if the 
                            roaming list for the specified NAM is 
                            currently NOT_ACTIVE

SIDE EFFECTS
  None.

===========================================================================*/


word  
nv_prl_version (
  byte  nam
);

/*These are HTORPC Meta comments. Do not delete this*/
/*~ FUNCTION nv_prl_version */

/*===========================================================================

FUNCTION NV_DETERMINE_ESN_VALIDITY

DESCRIPTION
  This function is determines if the current ESN has been programmed with the
  status of this check returned.

DEPENDENCIES
  None.

RETURN VALUE
  TRUE if the current ESN is non-zero with proper checksums, else FALSE

SIDE EFFECTS

===========================================================================*/

boolean nv_determine_esn_validity( void);

/*These are HTORPC Meta comments. Do not delete this*/
/*~ FUNCTION nv_determine_esn_validity */

/*===========================================================================

FUNCTION NV_CMD_REMOTE

DESCRIPTION
  This is the outside world's interface to the non volatile memory task.

DEPENDENCIES
  The NV task must have been started up already.  All of the items in
  the nv_cmd_type must be already set.

RETURN VALUE

  NV_DONE_S,      -  Request completed okay 
  NV_BUSY_S,      -  Request is queued 
  NV_BADCMD_S,    -  Unrecognizable command field 
  NV_FULL_S,      -  The NVM is full 
  NV_FAIL_S,      -  Command failed, reason other than NVM was full 
  NV_NOTACTIVE_S, -  Variable was not active 
  NV_BADPARM_S,   -  Bad parameter in command block 
  NV_READONLY_S,  -  Parameter is write-protected and thus read only 
  NV_BADTG_S,     -  Item not valid for Target 
  NV_NOMEM_S,     -  free memory exhausted 
  NV_NOTALLOC_S   -  address is not a valid allocation 

SIDE EFFECTS
  The nv_cmd_type is placed on the NV command queue.  It must not be
  modified until the command has been processed!

===========================================================================*/

nv_stat_enum_type nv_cmd_remote 
( 
  nv_func_enum_type cmd, 
  nv_items_enum_type item, 
  nv_item_type *data_ptr 
); 
/*~ FUNCTION nv_cmd_remote */ 
/*~ PARAM INOUT data_ptr POINTER DISC item */ 

/*===========================================================================

FUNCTION NV_CMD_EXT_REMOTE

DESCRIPTION
  This is the outside world's interface to the non volatile memory task.

DEPENDENCIES
  The NV task must have been started up already.  All of the items in
  the nv_cmd_ext_type must be already set.

RETURN VALUE

  NV_DONE_S,      -  Request completed okay 
  NV_BUSY_S,      -  Request is queued 
  NV_BADCMD_S,    -  Unrecognizable command field 
  NV_FULL_S,      -  The NVM is full 
  NV_FAIL_S,      -  Command failed, reason other than NVM was full 
  NV_NOTACTIVE_S, -  Variable was not active 
  NV_BADPARM_S,   -  Bad parameter in command block 
  NV_READONLY_S,  -  Parameter is write-protected and thus read only 
  NV_BADTG_S,     -  Item not valid for Target 
  NV_NOMEM_S,     -  free memory exhausted 
  NV_NOTALLOC_S   -  address is not a valid allocation 

SIDE EFFECTS
  The nv_cmd_ext_type is placed on the NV command queue.  It must not be
  modified until the command has been processed!

===========================================================================*/

nv_stat_enum_type nv_cmd_ext_remote
( 
  nv_func_enum_type cmd, 
  nv_items_enum_type item, 
  nv_item_type *data_ptr,
  uint16 context 
); 
/*~ FUNCTION nv_cmd_ext_remote */ 
/*~ PARAM INOUT data_ptr POINTER DISC item */ 

/*===========================================================================

FUNCTION NV_RTRE_CONTROL

DESCRIPTION
  This function provides the current RTRE control.  The control indicates 
  whether the use the R-UIM in an operation or not.

DEPENDENCIES
  The return value has a default setting and is updated when NV receives
  a NV_RTRE_OP_CONFIG_F command.

RETURN VALUE
  The RTRE control

SIDE EFFECTS
  This function returns the current value of the RTRE control.  It may
  change.

===========================================================================*/

nv_rtre_control_type nv_rtre_control( void );

/*These are HTORPC Meta comments. Do not delete this*/
/*~ FUNCTION nv_rtre_control */

/*===========================================================================

FUNCTION NV_RTRE_USE_RUIM_FOR_NAM

DESCRIPTION
  This function determines if the R-UIM is to be used (based on RTRE control)
  and the NAM is the R-UIM NAM.
  
DEPENDENCIES
  The return value has a default setting and is updated when NV receives
  a NV_RTRE_OP_CONFIG_F command.

RETURN VALUE
  The RTRE control indicates to use the R-UIM and the NAM matches the R-UIM 
  NAM.

SIDE EFFECTS
  This function uses the current value of the RTRE control.  It may
  change.

===========================================================================*/

boolean nv_rtre_use_ruim_for_nam ( byte nam );

/*These are HTORPC Meta comments. Do not delete this*/
/*~ FUNCTION nv_rtre_use_ruim_for_nam */

/*===========================================================================

FUNCTION NV_RTRE_POLLING_CONTROL

DESCRIPTION
  This function provides the current RTRE polling control.  The polling control
  indicates whether to poll the UIM card when originating a call or while on 
  the traffic channel.

DEPENDENCIES
  The return value has a default setting and is updated when NV receives
  a NV_RTRE_OP_CONFIG_F command.

RETURN VALUE
  The RTRE polling control

SIDE EFFECTS
  This function returns the current value of the RTRE polling control.  It may
  change.

===========================================================================*/

nv_rtre_polling_control_type nv_rtre_polling_control( void );

/*These are HTORPC Meta comments. Do not delete this*/
/*~ FUNCTION nv_rtre_polling_control */

/*===========================================================================

FUNCTION NV_RTRE_POLLING_FOR_NAM

DESCRIPTION
  This function provides the current RTRE polling control when the NAM is the 
  R_UIM NAM.  The polling control indicates whether to poll the UIM card when 
  originating a call or while on the traffic channel.

DEPENDENCIES
  The return value has a default setting and is updated when NV receives
  a NV_RTRE_OP_CONFIG_F command.

RETURN VALUE
  The RTRE polling control indicates whether to poll and the NAM matches the
  R-UIM NAM.

SIDE EFFECTS
  This function returns the current value of the RTRE polling control.  It may
  change.

===========================================================================*/

boolean nv_rtre_polling_for_nam ( byte nam );

/*These are HTORPC Meta comments. Do not delete this*/
/*~ FUNCTION nv_rtre_polling_for_nam */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* NV_H */
