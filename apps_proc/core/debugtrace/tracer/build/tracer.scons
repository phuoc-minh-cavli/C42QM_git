#===============================================================================
# QDSS Tracer
#
# GENERAL DESCRIPTION
#    Build script
#
# Copyright (c) 2011-2012 Qualcomm Technologies Incorporated.
# All rights reserved.
# Qualcomm Confidential and Proprietary
#-------------------------------------------------------------------------------
#
#$Header$
#

Import('env')

#-------------------------------------------------------------------------------
# Enviroment variables
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# SW workaround to HW bug
# To build tracer with the SW workaround to the HW bug of restricted
# bit-width to the STM, compile with the following two flags defined.
#   TRACER_OST_WA_PAD
#   TRACER_WA_ALIGNMENT=x  where x is 4, 8, or 16 (minimum bytes for write)
#   IMITATE_STPPKTS  Tracer generated STP pkt sequences to mimic HW bug.
#-------------------------------------------------------------------------------
#Example for MPSS image on 8974 on virtio
#if env['MSM_ID'] in ['8974'] :
#   if env.IsTargetEnable(['CORE_QDSP6_SW']):
#      env.Append(CCFLAGS = " -DTRACER_OST_WA_PAD -DTRACER_WA_ALIGNMENT=4")
#      env.Append(CCFLAGS = " -DIMITATE_STPPKTS")

#-------------------------------------------------------------------------------
# Set TRACER_TEST_ENABLE to 'Yes' (otherwise 'No') to build with tracer tests.
#   Makes call to "tracer_test()" for a quick sanity check of tracer APIs.
#   if USES_QDSS_SWE is also defined, tracer events are defined and tested.
#-------------------------------------------------------------------------------
env.Append(TRACER_TEST_ENABLED = 'No')

if env['TRACER_TEST_ENABLED'] == 'Yes':
   env.Append(CCFLAGS = " -DTRACER_TESTING_ON")

#-------------------------------------------------------------------------------
# Build with tracer software events
# Configure port pool size to maximum number of threads expected to be
#   sending simple events with parameters.
#-------------------------------------------------------------------------------
if 'USES_QDSS_SWE' in env:
   env.Append(CCFLAGS = " -DTRACER_SWEVT")
   env.Append(CCFLAGS = " -DTRACER_PORT_POOL_SIZE=4")

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "../src"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
env.RequirePublicApi([
   'DEBUGTRACE',
   'DAL',
   'SERVICES',
   'SYSTEMDRIVERS',
   'KERNEL',
   'POWER',            # Config sw events on RPM procesor.
])

env.RequireRestrictedApi([
   'DEBUGTRACE',
   'DAL',
   'KERNEL'
])

env.RequireProtectedApi(['DEBUGTRACE'])

#-------------------------------------------------------------------------------
# Publish Private APIs
#-------------------------------------------------------------------------------
env.PublishPrivateApi('QDSS_TRACER', [
   "../src",
   "../../common/src"
])

if env.IsTargetEnable(['WCN_IMAGE','CORE_GSS','VENUS_VSS']):
   env.PublishPrivateApi('TRACER_OSAL',['../src/dal'])
elif env.IsTargetEnable(['APPS_PROC']):
   env.PublishPrivateApi('TRACER_OSAL',['../src/l4'])
elif env.IsTargetEnable(['CORE_MODEM','MODEM_IMAGE','CBSP_MODEM_IMAGE',
   'CORE_QDSP6_SW','CORE_QDSP6_SENSOR_SW','CORE_QDSP6_AUDIO_SW']):
   env.PublishPrivateApi('TRACER_OSAL',['../src/qurt'])

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------

QDSS_TRACER_SRC = [
   '${BUILDPATH}/tracer.c',
   '${BUILDPATH}/tracer_config.c',
   '${BUILDPATH}/tracer_list.c',
   '${BUILDPATH}/tracer_ost.c',
   '${BUILDPATH}/tracer_portmgr.c',
   '${BUILDPATH}/tracer_stp.c',
   '${BUILDPATH}/tracer_tds.c',
   '${BUILDPATH}/tracer_test.c',
   '${BUILDPATH}/tracer_test_api.c',
   '${BUILDPATH}/tracer_throttle.c',
   ]

if not env.IsTargetEnable(['VENUS_VSS']):
   QDSS_TRACER_SRC += ['${BUILDPATH}/tracer_diag.c'
   ]

if not env.IsTargetEnable(['APPS_PROC']):
   QDSS_TRACER_SRC += ['${BUILDPATH}/tracer_test_nonappstubs.c'
   ]

if env.IsTargetEnable(['WCN_IMAGE','CORE_GSS','VENUS_VSS']):
   QDSS_TRACER_SRC += ['${BUILDPATH}/dal/tracer_mutex.c',
                       '${BUILDPATH}/dal/tracer_portget.c',
                      ]
elif env.IsTargetEnable(['APPS_PROC']):
   QDSS_TRACER_SRC += ['${BUILDPATH}/l4/tracer_mutex.c',
                       '${BUILDPATH}/l4/tracer_portget.c',
                      ]
elif env.IsTargetEnable(['CORE_MODEM','MODEM_IMAGE','CBSP_MODEM_IMAGE',
   'CORE_QDSP6_SW','CORE_QDSP6_SENSOR_SW','CORE_QDSP6_AUDIO_SW']):
   QDSS_TRACER_SRC += ['${BUILDPATH}/qurt/tracer_mutex.c',
                       '${BUILDPATH}/qurt/tracer_portget.c',
                      ]

if ( env.IsTargetEnable(['CORE_MODEM','MODEM_IMAGE','CBSP_MODEM_IMAGE']) or
     ( env.IsTargetEnable(['CORE_QDSP6_SW','CORE_QDSP6_AUDIO_SW']) and
       (env['MSM_ID'] in ['8084','8092']) )
   ):
   QDSS_TRACER_SRC += ['${BUILDPATH}/tracer_cfgrpm.c']
else:
   QDSS_TRACER_SRC += ['${BUILDPATH}/tracer_cfgrpm_stub.c']


if env['TRACER_TEST_ENABLED'] == 'Yes':
   QDSS_TRACER_SRC += ['${BUILDPATH}/tracer_apitest.c']

env.AddLibrary(['MODEM_IMAGE','CORE_QDSP6_SW','WCN_IMAGE','CBSP_WCN_IMAGE',
   'CORE_GSS','APPS_PROC','CORE_QDSP6_SENSOR_SW','CORE_QDSP6_AUDIO_SW',
   'VENUS_VSS'],
   '${BUILDPATH}/qdss_tracer',QDSS_TRACER_SRC)

#-------------------------------------------------------------------------------
# Build for QDSS SW Events
#-------------------------------------------------------------------------------

if 'USES_QDSS_SWE' in env:
   QDSS_IMG = ['QDSS_EN_IMG']
   events = [
      ['TRACER_EVENT_INIT_COMPLETE','Tracer event initialization complete', 'T'],
      ['TRCEVT_TEST1','Tracer test event','F'],
      ['TRCEVT_TEST2_3ARGS','Tracer test 3arg event %d %d %d','F'],
      ]
   env.AddSWEInfo(QDSS_IMG, events)


if 'QDSS_TRACER_SWE' in env:  #if SWE builder is loaded
   tracer_inc=env['DEBUGTRACE_TRACER_INC']
   gen_tracer_event_ids_h=tracer_inc+'/tracer_event_ids.h'
   gen_tracer_event_tbl_h=tracer_inc+'/tracer_event_tbl.h'
   gen_tracer_event_info_txt=tracer_inc+'/tracer_event_info.txt'
   env.SWEBuilder([gen_tracer_event_ids_h,
                   gen_tracer_event_tbl_h,
                   gen_tracer_event_info_txt],
                   None)

#-------------------------------------------------------------------------------
# Build for RCINIT
#-------------------------------------------------------------------------------
if 'USES_RCINIT' in env:
   if 'USES_QDSS_SWE' in env:
      RCINIT_IMG = ['USES_QDSS_SWE']
      env.AddRCInitFunc(       # Code Fragment in TMC: NO
      RCINIT_IMG,
      {
         'sequence_group'             : 'RCINIT_GROUP_0',            # required
         'init_name'                  : 'tracer_simple',             # required
         'init_function'              : 'tcfg_event_simple_init',    # required
         'dependencies'               : ['qdss']
      })
   else:
      if env['TRACER_TEST_ENABLED'] == 'Yes':
         RCINIT_IMG = ['CORE_MODEM','CORE_QDSP6_SW','WCN_IMAGE','APPS_PROC']
         env.AddRCInitFunc(       # Code Fragment in TMC: NO
         RCINIT_IMG,
         {
            'sequence_group'          : 'RCINIT_GROUP_1',            # required
            'init_name'               : 'tracer_test',               # required
            'init_function'           : 'tracer_test',               # required
            'dependencies'            : ['qdss']
         })

