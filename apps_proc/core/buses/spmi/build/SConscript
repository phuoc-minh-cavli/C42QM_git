#===============================================================================
# SPMI Libs
#
# GENERAL DESCRIPTION
#    SPMI Build Script
#
# Copyright (c) 2013 by Qualcomm Technologies Incorporated. All Rights Reserved.
#-------------------------------------------------------------------------------
#  $Header: //components/rel/core.tx/6.0/buses/spmi/build/SConscript#1 $
#  $DateTime: 2020/01/30 22:49:35 $
#  $Change: 22400605 $
#===============================================================================
import os, re
Import('env')

#-------------------------------------------------------------------------------
# Load sub scripts
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()

#-------------------------------------------------------------------------------
# Setup
#-------------------------------------------------------------------------------

INC_DIRS = []

SRCPATH = "../src"

env = env.Clone()
env['CCFLAGS'] += '--c99'


env.Append(CPPDEFINES = ["FEATURE_LIBRARY_ONLY"])   
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

CHIP_FAMILY='bear'
    
#-------------------------------------------------------------------------------
# Logging
#-------------------------------------------------------------------------------
logLevel = 'SPMI_LOG_LEVEL_INFO'

env.Append(CPPDEFINES = ["SPMI_LOG_COMPILE_LEVEL=" + logLevel])    

#-------------------------------------------------------------------------------
# Helper Functions
#-------------------------------------------------------------------------------
def getConfigFiles(target, pattern='*'):
    return getTargetFiles(target, pattern, SRCPATH + '/platform/config/' + CHIP_FAMILY)
    
def getTargetFiles(target, pattern, baseCfgDir):
    t = target
    
    # Look for an exact match
    file = env.GlobFiles(baseCfgDir + '/' + target + '/' + pattern, posix=True)
    
    if not file:
        if target[1] == 'x':
            # Try a slightly more specific version (e.g. 8x16 -> 8916)
            target = target[:1] + '[0-9]' + target[2:]
        else:
            # Try a slightly more generic version (e.g. 8916 -> 8x16)
            target = target[:1] + 'x' + target[2:]
            
        file = env.GlobFiles(baseCfgDir + '/' + target + '/' + pattern, posix=True)
        
    if not file:
        # Fallback to the default
        file = env.GlobFiles(baseCfgDir + '/default/' + pattern, posix=True)
    
    if not file:
        env.PrintDebugInfo('spmi', 'No SPMI files found for %s/%s/%s' % (baseCfgDir, t, pattern) )
        
    return file

#-------------------------------------------------------------------------------
# Private APIs
#-------------------------------------------------------------------------------
INC_DIRS = [
   '${INC_ROOT}/core/buses/spmi/src/core',
   '${INC_ROOT}/core/buses/spmi/src/core/hal',
   '${INC_ROOT}/core/buses/spmi/src/core/hal/bear',
   '${INC_ROOT}/core/buses/spmi/src/core/hal/bear/hw',
   '${INC_ROOT}/core/buses/spmi/src/platform/config/bear',
   '${INC_ROOT}/core/buses/spmi/src/platform/inc',
   '${INC_ROOT}/core/buses/spmi/src/platform',
   '${INC_ROOT}/core/buses/spmi/src/platform/os',
]

INC_DIRS.append('${INC_ROOT}/core/buses/spmi/src/platform/os/tn')
env.PublishPrivateApi('BUSES_SPMI', INC_DIRS)
 
#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_APIS = [
   'BUSES',
   'HAL',
   'DAL',
   'KERNEL',
   'SYSTEMDRIVERS',
   'SERVICES',
   'POWER',
   'DEBUGTRACE',
   'SECUREMSM',  # for tzos_log   
   'BOOT',       # for boot_log
   'MINK'
]

env.RequirePublicApi(CBSP_APIS)
env.RequireRestrictedApi(CBSP_APIS)

#-------------------------------------------------------------------------------
# Sources & Libraries
#-------------------------------------------------------------------------------
MAIN_LIB_IMAGES = ['APPS_IMAGE', 'CBSP_APPS_IMAGE']
              
SPMI_SOURCE_PATHS = [
   SRCPATH + '/core',
   SRCPATH + '/core/hal',
   SRCPATH + '/core/hal/bear',
   SRCPATH + '/core/hal/bear/hw',
   SRCPATH + '/platform',
]

spmi_config_cfile_path = getConfigFiles(env['MSM_ID'], '*.c')
spmi_block_cfg_arr = [f.replace(SRCPATH, '${BUILDPATH}') for f in spmi_config_cfile_path]

SPMI_SOURCE_PATHS.append(SRCPATH + '/platform/os/tn')

SPMI_SOURCES = []

for src_path in SPMI_SOURCE_PATHS:
   SPMI_SOURCES += env.GlobFiles(src_path + '/*.c', posix=True)

SPMI_BLD_SOURCES = [f.replace(SRCPATH, '${BUILDPATH}') for f in SPMI_SOURCES]

spmi_config_xml = getConfigFiles(env['MSM_ID'], '*.xml')
spmi_config_xml = ', '.join(spmi_config_xml)
#spmi_block_cfg = ', '.join(spmi_block_cfg_arr)


if spmi_config_xml and 'USES_DEVCFG' in env:
    if env.get('USES_DEVCFG_MULTIPLE_TAGS', False) or env.get('USES_MULTI_DEVCFG', False):
        devXmlMap = {}
        for cfg in env['DEVCFG_XML_TAGS']:
            devXmlMap[cfg] = [spmi_config_xml] + spmi_block_cfg_arr
        
        env.AddDevCfgInfo(['DAL_DEVCFG_IMG'], devXmlMap)
    else:
        spmi_dev_cfg_src = [spmi_config_xml] + spmi_block_cfg_arr
        env.AddDevCfgInfo(['DAL_DEVCFG_IMG'], {'devcfg_xml': spmi_dev_cfg_src})
        #env.AddLibrary(['DAL_DEVCFG_IMG'], '${BUILDPATH}/SpmiDalCfg', spmi_block_cfg_arr)

# Clean pack files
PACK_FILES = []
ALL_TARGET_FILES = env.FindFiles(['*'], SRCPATH + '/platform/config/' + CHIP_FAMILY)
CURRENT_TARGET_FILES = env.FindFiles(['*'], SRCPATH + '/platform/config/' + CHIP_FAMILY + '/' + env['MSM_ID'])
DEFAULT_FILES = env.FindFiles(['*'], SRCPATH + '/platform/config/' + CHIP_FAMILY + '/default')
SPMI_INFO_HEADER = env.FindFiles(['SpmiInfo.h'], SRCPATH + '/platform/config/' + CHIP_FAMILY)
PACK_FILES = list(set(ALL_TARGET_FILES) - set(CURRENT_TARGET_FILES) - set(SPMI_INFO_HEADER) - set(DEFAULT_FILES))
env.CleanPack(MAIN_LIB_IMAGES, PACK_FILES)

env.AddLibrary(MAIN_LIB_IMAGES, '${BUILDPATH}/Spmi', SPMI_BLD_SOURCES)


#-----------------------------------------------------------------------------
# Register with RCINIT framework so that it can call our init function.
#-----------------------------------------------------------------------------
if 'USES_RCINIT' in env:
  RCINIT_IMG = ['CORE_APPS']
  env.AddRCInitFunc(
    RCINIT_IMG,
    {
      'sequence_group'             : 'RCINIT_GROUP_0',
      'init_name'                  : 'SpmiClkStatus',
      'init_function'              : 'SpmiOs_ClkStatusInit',
      'dependencies'               : ['clk_regime']
    })           
    
