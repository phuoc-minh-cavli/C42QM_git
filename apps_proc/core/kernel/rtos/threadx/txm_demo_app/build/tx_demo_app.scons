#===============================================================================
#
# TX demo module app scons script
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2016 by QUALCOMM Technologies, Inc. All Rights Reserved.
#
#-------------------------------------------------------------------------------
#                      EDIT HISTORY FOR FILE
#
#  $Header: //components/rel/core.tx/6.0/kernel/rtos/threadx/txm_demo_app/build/tx_demo_app.scons#1 $
#  $DateTime: 2020/01/30 22:49:35 $
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#===============================================================================
Import('env')
env = env.Clone()

#The following flag is globally defined when compiling a module
env.Append(CPPDEFINES = [
   "TXM_MODULE",
   "QAPI_TXM_MODULE",
   "TX_DAM_QC_CUSTOMIZATIONS",
   ])

env.RequirePublicApi('KERNEL', area='core')
#env.RequirePublicApi('SERVICES', area='core')
#env.RequirePublicApi('DEBUGTOOLS', area='core')
#env.RequirePublicApi('SYSTEMDRIVERS', area='core')
#env.RequirePublicApi('HWENGINES', area='core')
#env.RequirePublicApi('MEMORY', area='core')
#env.RequirePublicApi('MPROC', area='core')
#env.RequirePublicApi('DAL', area='core')
#env.RequirePublicApi('STORAGE', area='core')
#env.RequirePublicApi('SERVICES', area='core')
#RIL_PORT_RESTRICTED_APIS = [
#    'RIL_PORT',
#    ]

#env.RequireRestrictedApi(RIL_PORT_RESTRICTED_APIS)	
	

SRCPATH = '${BUILD_ROOT}/core/kernel/rtos/threadx/txm_demo_app/src'
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

if 'USES_ARM' in env:
    TX_DEMO_APP_SOURCES = [
	'${BUILDPATH}/txm_module_preamble.S',
	'${BUILDPATH}/demo_threadx_module.c',
]
else:
    TX_DEMO_APP_SOURCES = [
    '${BUILDPATH}/txm_module_preamble_llvm.S',
    '${BUILDPATH}/demo_threadx_module.c',
]

if 'USES_ARM' in env:
    env.AddBinaryObject(['TXM_DEMO'], TX_DEMO_APP_SOURCES)
else:
    env.AddBinaryObject(['LLVM_DAM'], TX_DEMO_APP_SOURCES)


#-------------------------------------------------------------------------------
# Load the rest of the software units
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()

import os
os.system("python ../../../patch/scripts/build_DAM_demo_patch.py ../../../patch/scripts/")
