#===============================================================================
#
# DAL Framework Libs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009 - 2011 Qualcomm Incorporated.
# All Rights Reserved.
# Qualcomm Confidential and Proprietary
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.tx/6.0/dal/framework/build/SConscript#1 $
#  $DateTime: 2020/01/30 22:49:35 $
#  $Author: pwbldsvc $
#  $Change: 22400605 $
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 01/25/11   sho     Restore TZ for 8660 and 8960
# 01/17/11   sc      Updated source file for RPM
# 01/11/11   sho     Removed TZOS_IMAGE
# 12/16/10   sc      Added DALNativeGlbCtxt for SPS ucos
# 11/10/10   pg      Added Sensors ucos version of DAL FWK library.
# 10/01/10   sc      Compiled in DALGlbCtxt for SPS/ARM7
# 09/23/10   sc      Added SBL1_BOOT_IMAGE
# 09/20/10   vk      Added support for NOR_TOOLS_IMAGE
# 07/13/10   sc      Added support for RPM_IMAGE
# 07/08/10   sc      Updated with CORE_SPS and CORE_RPM
# 07/07/10   sho     Added support for WCN_IMAGE
# 04/20/10   sho     Added TZOS_IMAGE
# 03/24/10   wd      Added call to load subscripts (sys).
#
#===============================================================================
Import('env')
env = env.Clone()


env.Append(CPPDEFINES = ["DAL_CONFIG_MMU_SCHEME=DAL_CONFIG_MMU_SCHEME_MULTITHREADED_OS"])

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${DAL_ROOT}/framework/src"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0) 

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'DEBUGTOOLS',
   'DAL',
   'BUSES',
   'MPROC',
   'POWER',   
   'SERVICES',
   'SYSTEMDRIVERS',
   'DAL_INTERRUPTCONTROLLER',
   # needs to be last also contains wrong comdef.h      
   'KERNEL',
]
env.Append(CPPPATH = [                    
   '${DAL_ROOT}/drivers/TestDrivers/src'   
])
env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)
#-------------------------------------------------------------------------------
# Source Code
#-------------------------------------------------------------------------------
DALFW_APPS_SOURCES =  [
   '${BUILDPATH}/DALQueue.c',
   '${BUILDPATH}/DALGlbCtxt.c',
   '${BUILDPATH}/dalfwkbase.c',
   '${BUILDPATH}/dal_asm_wrap.c',
   '${BUILDPATH}/DALDevice.c',
]

DALFW_ARM_SOURCES =  [
   '${BUILDPATH}/dal_asm_rvct.S',
]

IMAGES = ['APPS_IMAGE', 'CBSP_APPS_IMAGE']

#-------------------------------------------------------------------------------
# Load dal config builder
#-------------------------------------------------------------------------------
env.Tool('dalconfig_builder', toolpath = ['${DEVCFG_SCRIPTS}'])

#-------------------------------------------------------------------------------
# Pass DALSystem XML file to Devcfg
#-------------------------------------------------------------------------------
if env.GetUsesFlag('USES_DEVCFG') is True:
       DEVCFG_IMG = ['DAL_DEVCFG_IMG']
       env.AddDevCfgInfo(DEVCFG_IMG,
       {
          'devcfg_xml' : ['${DAL_ROOT}/framework/dalsystem/dalsystem_apps.xml']
       })
        

#-------------------------------------------------------------------------------
# DalModDir.c file
#-------------------------------------------------------------------------------
#Get devcfg XML tag-list
devcfg_xml_tag_list = env.get('DEVCFG').getFeature('devcfgXMLTagList')
target_img          = env.get('DEVCFG').getFeature('targetImg')
config_str          = env.get('MSM_ID') + '_' + target_img
Master_XML          = File(env.subst('${DEVCFG_ROOT}/build/${BUILDPATH}/DevCfg_master_'+config_str+'.xml'))
DalModDir           = env.DALModDirSrcBuilder('${BUILDPATH}/DalModDir.c', 
                                              [Master_XML], 
                                               CONFIG=config_str)
DALFW_APPS_SOURCES.append(DalModDir[0].path)                                               

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------
env.AddLibrary(IMAGES, '${BUILDPATH}/DALFwk_apps', DALFW_APPS_SOURCES)
env.AddLibrary(IMAGES, '${BUILDPATH}/DALFwk_arm', DALFW_ARM_SOURCES)

#-------------------------------------------------------------------------------
# Pack out files
#-------------------------------------------------------------------------------

#Remove other include files
ALL_INC_FILES = env.FindFiles(
  ['*.h'],
  '${DAL_ROOT}/framework/inc')
COMMON_INC_FILES = env.FindFiles(
  ['*.h'],
  '${DAL_ROOT}/framework/inc/common')
TARGET_INC_FILES = env.FindFiles(
  ['*.h'],
  '${DAL_ROOT}/framework/inc/${MSM_ID}')
PACK_INC_FILES = list(set(ALL_INC_FILES) - set(TARGET_INC_FILES) - set(COMMON_INC_FILES))
env.CleanPack(['CORE_APPS'], PACK_INC_FILES)

#-------------------------------------------------------------------------------
# Load Subunits (sys)
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()

if 'USES_RCINIT' in env:
   RCINIT_IMG = ['CORE_MODEM', 'CORE_QDSP6_SW', 'APPS_IMAGE', 'CBSP_APPS_IMAGE']
   env.AddRCInitFunc(           # Code Fragment in TMC: YES
    RCINIT_IMG,                 # define TMC_RCINIT_INIT_DALSYS_INIT
    {
     'sequence_group'             : 'RCINIT_GROUP_0',                   # required
     'init_name'                  : 'dalsys',                           # required
     'init_function'              : 'DALDeviceFwk_Init',                # required
     #'dependencies'               : ['',]
    })
