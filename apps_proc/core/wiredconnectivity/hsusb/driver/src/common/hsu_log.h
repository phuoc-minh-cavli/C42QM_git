/*==============================================================================

  HSU Generic Logging APIs

  GENERAL DESCRIPTION

  EXTERNALIZED FUNCTIONS

  INITALIZATION AND SEQUENCING REQUIREMENTS
  None

  Copyright (c) 2012 by Qualcomm Technologies, Incorporated.  All Rights Reserved.
==============================================================================*/

/*==============================================================================

                            EDIT HISTORY FOR MODULE
  
  This section contains comments describing changes made to the module.
  Notice that changes are listed in reverse chronological order.
  
  $Header: //components/rel/core.tx/6.0/wiredconnectivity/hsusb/driver/src/common/hsu_log.h#1 $
  $DateTime: 2020/01/30 22:49:35 $
    
  when      who       what, where, why
  --------  ------    ------------------------------------------------------------
  11/15/13  kameya    support for snps circular buffer logging.
  02/05/12  ac        Initial version
==============================================================================*/


#ifndef _HSU_LOG__H_
#define _HSU_LOG__H_

//#include "rex.h"
#include "hsu_qurt_util.h"

#include "hsu_timer.h"
#include "hsu_conf_sel_types_int.h"

#include "ULogFront.h"

#define HSU_GENERIC_LOG_SIZE       (128)
#define HSU_BAM_LOG_SIZE           (128)
#define HSU_DUN_LOG_SIZE           (64)
#define HSU_DUN_LOG_STACK_SIZE     (16*1024)
#define HSU_DUN_MAX_DATA_SIZE      (128)

#define HSU_AUDIO_LOG_SIZE         (1)
#define HSU_PERF_LOG_SIZE          (1)
#define HSU_SNPS_CTRL_LOG_SIZE     (64)
#define HSU_SNPS_LOG_SIZE          (128)
#define HSU_BUS_LOG_SIZE           (256)
#define HSU_DATA_LOG_SIZE          (1024)
#define HSU_QMI_LOG_SIZE           (64)
#define HSU_QMI_DATA_LOG_SIZE      (32)
#define HSU_SER4_LOG_SIZE          (64)
#define HSU_SER4_DATA_LOG_SIZE     (8)
#define HSU_VDDMIN_LOG_SIZE        (1)
#define HSU_DBG_E_LOG_SIZE         (64)
#define HSU_DBG_E_LOG_STR_SIZE     (1) /* record upto 64 chars per line */
#define HSU_EP0_LOG_SIZE           (1)
#define HSU_TASK_SCHEDULE_LOG_SIZE (1)
#define HSU_DTD_LOG_SIZE           (1)
#define HSU_MEM_LOG_SIZE           (1)
#define HSU_TIMER_LOG_SIZE         (1)
#define HSU_FUNC_LOG_SIZE          (1)
#define HSU_REG_LOG_SIZE           (1024)
#define HSU_REG_DUMP_LOG_SIZE      (1)

#define HSU_CLAIMED_IFACE_TO_RMNET_IFACE(a)   ((a)-1)
#define HSU_RMNET_IFACE_TO_CLAIMED_IFACE(a)   ((a)+1)

#define HSU_NON_APPLICABLE_VAL_LOG    (0xDEADDEAD)

#define DIAG_ENUM_STR 0

typedef enum
{
  DUN__TX__LOG = 1,
  DUN__RX__LOG
} hsu_dun_log_enum;

/*==============================================================================
**
** PERF logging 
**
*=============================================================================*/
// Handles macro over load
// p1 to p4 -  param1 to param4
#define PERF1(p1)  PERF__##p1##_LOG
#define PERF2(p1,p2) PERF__##p1##__##p2##_LOG
#define PERF3(p1,p2,p3) PERF__##p1##__##p2##__##p3##_LOG
#define PERF4(p1,p2,p3,p4) PERF__##p1##__##p2##__##p3##__##p4##_LOG
#define PERF_VA(_1,_2,_3,_4,N,...) N
#define PERF(...) PERF_VA(__VA_ARGS__,  \
                  PERF4(__VA_ARGS__),   \
                  PERF3(__VA_ARGS__),   \
                  PERF2(__VA_ARGS__),   \
                  PERF1(__VA_ARGS__))
typedef enum
{
  PERF( HSU_AL_ECM_RX_DONE_INTERNAL, Entry) = 1,
  PERF( HSU_AL_ECM_SETUP_READ, Entry),
  
  PERF( CDC_READ_MULTIPLE, Entry),
  PERF( CDC_READ_MULTIPLE, Exit),

  PERF( SNPS_DCD_INIT_STREAM_TRBS, Entry),
  PERF( SNPS_DCD_INIT_STREAM_TRBS, Skipped),
  PERF( SNPS_DCD_ENQUEUE_REQUEST, Multiple_requests_queued),
  PERF( SNPS_DCD_ENQUEUE_REQUEST, Enqueued_all_trbs),
  PERF( SNPS_DCD_HANDLE_XFER_COMPLETION, Callback_request_complete),

  PERF( ERROR)

} hsu_perf_log_enum;

/*==============================================================================
**
** SNPS logging 
**
*=============================================================================*/	 
// Handles macro over load
// v - verbosity level
// p1 to p3 -  param1 to param3
#define SNPS1(v)  SNPS_DCD__##v##_LOG
#define SNPS2(v,p1) SNPS_DCD__##v##__##p1##_LOG
#define SNPS3(v,p1,p2) SNPS_DCD__##v##__##p1##__##p2##_LOG
#define SNPS4(v,p1,p2,p3) SNPS_DCD__##v##__##p1##__##p2##__##p3##_LOG
#define SNPS_VA(_1,_2,_3,_4,N,...) N
#define SNPS(...) SNPS_VA(__VA_ARGS__,  \
                  SNPS4(__VA_ARGS__),   \
                  SNPS3(__VA_ARGS__),   \
                  SNPS2(__VA_ARGS__),   \
                  SNPS1(__VA_ARGS__))

typedef enum
{
  SNPS(V, UPDATE_TRB_LIST_FOR_REQUEST, Queue_trb, TRB_words) = 1,
  SNPS(V, ENQUEUE_REQUEST, Multiple_requests_are_enqueued_for_ep),
  SNPS(V, ENQUEUE_REQUEST, Request_is_enqueued_for_ep),
  SNPS(V, ENQUEUE_ZLP_TRB),
  SNPS(V, DEQUEUE_REQUEST, Request_is_dequeued_for_ep),
  SNPS(V, HANDLE_XFER_COMPLETION, DEPVT_XFER_COMPLETE, Ep_stream_has_no_transfer),
  SNPS(V, HANDLE_XFER_COMPLETION, DEPVT_XFER_COMPLETE, Without_TRB, Ep_and_stream_id),
  SNPS(V, HANDLE_XFER_COMPLETION, TRB_words),
  SNPS(V, HANDLE_XFER_COMPLETION, DEPEVT_XFER_COMPLETE, Ep_and_stream_id),
  SNPS(V, PREPARE_TRB_FOR_INFINITE_XFER_MODE, Queue_TRB),

  SNPS(V, OPS_ALLOC_PIPE, Find_matching_iface),
  SNPS(V, OPS_ALLOC_PIPE, EP_matched_to_address),
  SNPS(V, SET_TEST_MODE, Setting_test_mode),
  SNPS(V, SET_ADDRESS_STATE, Adress_Wait_for_status_stage),
  SNPS(V, SET_CONFIG_STATE, Set_config),
  SNPS(V, IOCTL, Set_isoch_delay_is_not_supported),


  SNPS(V, CONFIG_EP_CFG, EP_specific_config),
  SNPS(V, CONFIG_EP_XFER, For_EP),
  SNPS(V, CONFIG_EP, For_EP),
  SNPS(V, UNCONFIG_EP, For_EP),

  SNPS(V, HANDLE_CONNECT, Connection_speed_is),
  SNPS(V, HANDLE_RESUME, Power_up_bit_is_asserted_clearing),
  SNPS(V, HANDLE_EP_EVENT, Ep_and_stream_id),
  SNPS(V, HANDLE_EP_EVENT, Evt_XFER_COMPLETE),
  SNPS(V, HANDLE_EP_EVENT, Evt_XFER_INPROGRESS),
  SNPS(V, HANDLE_EP_EVENT, Evt_XFER_NOTREADY),
  SNPS(V, HANDLE_EP_EVENT, STREAM),
  SNPS(V, HANDLE_EP_EVENT, EP_CMD_COMPLETE),
  SNPS(V, HANDLE_DEVICE_EVENT, LINK_STATE_CHANGE),
  SNPS(V, INIT_SNPS_USB),

  SNPS(V, INIT_STREAM_TRBS_EX, HW_PTR__first_time),
  SNPS(V, INIT_STREAM_TRBS_EX, HW_PTR__subsequent_time),
  SNPS(V, INIT_STREAM_TRB, HW_PTR),
  SNPS(V, XFER_COMPLETION, INC_HW_PTR),
  SNPS(V, SAVE_XFER_RSC_ID),
  SNPS(V, UPDATE_TRANSFER, UPDATE_XFER_RSC_ID),
  SNPS(V, START_TRANSFER, NO_ID_UNTIL_CMD_COMP),
  SNPS(V, START_NEXT_TRANSFER, BUT_PIPE_REQ_QUEUE_EMPTY),
  SNPS(V, START_NEXT_TRANSFER, NEXT_ITEM_AVAIL),
  SNPS(V, AL_SEND_ALL),
  SNPS(V, ADD_REQ_TO_STREAM, FILL_CNT),
  SNPS(V, REMOVE_REQ_FROM_STREAM, FILL_CNT),
  SNPS(V, REMOVE_RESET_REQ_IN_STREAM, FILL_CNT),
} hsu_snps_log_enum;

// Control State Machine Log Enum
typedef enum
{
  SNPS(CTRL_SM, Entry) = 1,
  SNPS(CTRL_SM, Exit),

  SNPS(CTRL_SM, State, SETUP_START),
  SNPS(CTRL_SM, State, SETUP_RCVD),
  SNPS(CTRL_SM, State, DATA_OR_STATUS2),
  SNPS(CTRL_SM, State, DATA_INTERPRETE),
  SNPS(CTRL_SM, State, STATUS3_OUT),
  SNPS(CTRL_SM, State, STATUS3_IN),

  SNPS(CTRL_SM, Queue, Setup_request),
  SNPS(CTRL_SM, Queue, Data_IN_request),
  SNPS(CTRL_SM, Queue, Data_OUT_request),
  SNPS(CTRL_SM, Queue, Status_IN_request),
  SNPS(CTRL_SM, Queue, Status_OUT_request),

  SNPS(CTRL_SM, Ignore_XFER_NOTEREADY),
  SNPS(ENQUEUE_REQUEST, Ctrl_pending_request)

} hsu_snps_ctrl_log_enum;

/*==============================================================================
**
** Register dump API MACRO
**
*=============================================================================*/	 
#define HSU_REG_DUMP_LOG(reg) \
  HSU_ULOG_2(NO_MSG, REG_LOG, "0x%08X, 0x%08X", (HWIO_##reg##_ADDR), (HWIO_##reg##_IN));

#define HSU_REG_DUMP_p_LOG(reg) \
  { \
    uint32 i; \
    for (i = 0; i <= HWIO_##reg##_MAXp; i++) \
    { \
      HSU_ULOG_2(NO_MSG, REG_LOG, "0x%08X, 0x%08X", (HWIO_##reg##_ADDR(i)), (HWIO_##reg##_INI(i))); \
    } \
  }

#define HSU_REG_DUMP_n_LOG(reg) \
  { \
    uint32 i; \
    for (i = 0; i <= HWIO_##reg##_MAXn; i++) \
    { \
      HSU_ULOG_2(NO_MSG, REG_LOG, "0x%08X, 0x%08X", (HWIO_##reg##_ADDR(i)), (HWIO_##reg##_INI(i))); \
    } \
  }

/* This enumerated type must end with a suffix _LOG */
typedef enum
{
  /* HSU_UNDEFINED_OFFSET */
  /* HSU_UNDEFINED_LOG = 0, */

/*==============================================================================
**
** HSUSB BUS NOTIFICATIONS
**
*=============================================================================*/
  /* ++HSU BUS NOTIFY      */
  /* HSU_BUS_NOTIFY_OFFSET */
  NOTIFY_DEVICE_CONNECT_LOG = 1,
  NOTIFY_DEVICE_DISCONNECT_LOG,
  NOTIFY_DEVICE_SUSPEND_LOG,
  NOTIFY_DEVICE_RESUME_LOG,
  NOTIFY_DEVICE_RESUME_COMPLETED_LOG,
  NOTIFY_DEVICE_REMOTE_WAKEUP_LOG,
  NOTIFY_DEVICE_CONFIGURED_LOG,
  NOTIFY_DEVICE_UNCONFIGURED_LOG,
  NOTIFY_DEVICE_RESET_LOG,
  NOTIFY_DEVICE_SPEED_CHANGE_LOG,
  /* --HSU BUS NOTIFY */

/*==============================================================================
**
** HSUSB GENERAL LOGGING
**
*=============================================================================*/
  /* General logging enum */
  HSU_LPM_GPIO_INTR_REGISTER_LOG,
  HSU_LPM_GPIO_INTR_DEREGISTER_LOG,
  HSU_LPM_GPIO_INTR_TRIGGER_CB_LOG,
  HSU_LPM_GPIO_INTR_INIT_LOG,
  HSU_LPM_ENTER_SUSPEND_LOG, 
  HSU_LPM_ENTER_SUSPEND_FAILED_LOG,
  HSU_LPM_ENTER_DISCONNECT_LOG,
  
  HSU_LPM_ENTER_LOG,
  HSU_LPM_EXIT_LOG,
  HSU_LPM_EXIT_REMOTE_WAKEUP_ONLY_LOG,
  HSU_LPM_EXIT_FROM_SUSPEND_LOG,
  HSU_LPM_EXIT_FROM_SUSPEND_REMOTE_WAKEUP_LOG,
  HSU_LPM_EXIT_FROM_DISCONNECT_LOG,

  HSU_OS_HS_ISR_LOG,
  HSU_OS_BUS_EXIT_LPM_BY_INTR_LOG,

  HAL_HSUSB_PORTSC_FPR_BMSK_LOG,
  HSU_LPM_HSIC_ENTER_LOG,
  HSU_LPM_WAKEUP_PHY_LOG,
  HSU_LPM_HSIC_WAKEUP_PHY_LOG,
  HSU_LPM_HSIC_EXIT_LOG,
  HSU_LPM_HSIC_ENTER_SUSPEND_FAILED_LOG,

  HSU_LPM_SNPS_ENTER_LOG,
  HSU_LPM_SNPS_ENTER_IS_VALID_LOG,
  HSU_LPM_SNPS_EXIT_LOG,
  HSU_LPM_SNPS_EXIT__DISCONNECTED_LOG,
  DISCARD_PWR_EVT_LOG,
  
  DISCONNECT_LOG,
  SUSPEND_LOG,
  FILTERED_NO_SW_VOTE_IRQ_LOG,
  FILTERED_NO_PWR_EVT_IRQ_LOG,
  
  HSU_AL_ECM_DATA_TRANSMIT_LOG,
  HSU_AL_ECM_CONTROL_TRANSMIT_LOG,
  HSU_BUS_MODE_SUSPENDED_LOG,

  /* REMOTE WAKEUP related loggings */
  HSU_LOG_CLEAR_FEATURE_LOG,
  HSU_DEVICE_REMOTE_WAKEUP_LOG,
  HSU_HANDLE_FEATURE_LOG,
  HSU_INTERFACE_FUNCTION_SUSPEND_LOG,

  AL_SER_BASE_TX_SEND_BUFFER_LOG, 

  HSU_AL_ECM_PIPE_WAKEUP_CB_LOG,
  HSU_AL_ECM_WAKEUP_HOST_LOG,
  HSU_AL_TASK_MAIN_LOG,
  AL_TASK_REMOTE_WAKEUP_SIG_LOG,
  DALSPS_REGISTEREVENT_LOG,

  HSU_EP0_HANDLER_LOG,
  HSU_DCD_SOFT_INTR_EP_SETUP_STALL_LOG,

  /* Chapter 9 CMD's */
  HSU_CHP9_REQ_GET_STATUS_LOG,
  HSU_CHP9_REQ_CLEAR_FEATURE_LOG,
  HSU_DUMMY_1_LOG,
  HSU_CHP9_REQ_SET_FEATURE_LOG,
  HSU_DUMMY_2_LOG,
  HSU_CHP9_REQ_SET_ADDRESS_LOG,
  HSU_CHP9_REQ_GET_DESCRIPTOR_LOG,
  HSU_CHP9_REQ_SET_DESCRIPTOR_LOG,
  HSU_CHP9_REQ_GET_CONFIGURATION_LOG,
  HSU_CHP9_REQ_SET_CONFIGURATION_LOG,
  HSU_CHP9_REQ_GET_INTERFACE_LOG,
  HSU_CHP9_REQ_SET_INTERFACE_LOG,
  HSU_CHP9_REQ_SYNCH_FRAME_LOG,

  /* Send ZLP for Set CMD's */
  HSU_CHP9_REQ_SET_ADDRESS_SEND_ZLP_LOG,
  HSU_CHP9_REQ_SET_CONFIGURATION_SEND_ZLP_LOG,
  HSU_CHP9_REQ_SET_INTERFACE_SEND_ZLP_LOG,

  HSU_CHP9_UNSUPPORTED_REQUEST_RECIEVED_LOG,
  HSU_CHP9_REQ_FILTERED_REDUNDANT_SET_CONFIGURATION_LOG,

  HSU_RECIP_DEVICE_LOG,
  HSU_USB_RECIP_DEVICE_LOG,
  HSU_CHP9_HANDLE_USB_COMMAND_TO_CHP9_HANDLE_VENDOR_REQUEST,

  /* Get Descriptor CMD's */
  /* 0*/ GET_DESCRIPTOR_INVALID_LOG,
  /* 1*/ GET_DEVICE_DESCRIPTOR_LOG,
  /* 2*/ GET_CONFIG_DESCRIPTOR_LOG,
  /* 3*/ GET_STRING_DESCRIPTOR_LOG,
  /* 4*/ GET_INTERFACE_DESCRIPTOR_LOG,
  /* 5*/ GET_ENDPOINT_DESCRIPTOR_LOG,
  /* 6*/ GET_DEVICE_QUALIFIER_DESCRIPTOR_LOG,
  /* 7*/ GET_OTHER_SPEED_CONFIG_DESCRIPTOR_LOG,
  /* 8*/ GET_INTERFACE_POWER_DESCRIPTOR_LOG,
  /* 9*/ GET_OTG_DESCRIPTOR_LOG,
  /* A*/ GET_DEBUG_DESCRIPTOR_LOG,
  /* B*/ GET_INTERFACE_ASSOCIATION_DESCRIPTOR_LOG,
  /* C*/ GET_0x0C_LOG,
  /* D*/ GET_0x0D_LOG,
  /* E*/ GET_0x0E_LOG,
  /* F*/ GET_BOS_DESCRIPTOR_LOG,
  /*10*/ GET_DEVICE_CAPABILITY_LOG,
  /*11*/ GET_DEVICE_DESCRIPTOR_OUT_OF_LOG,

  HSU_HANDLE_ACM_REQUEST_LOG,

  CORE_RESUME_LOG,
  HERE_WE_CRASH_LOG,
  HSU_GPIO_LOW_LOG,
  TDI_4X_INTR_STS_SLI_LOG,
  TDI_4X_INTR_STS_URE_LOG,
  TDI_4X_INTR_STS_PCI_LOG,
  HSU_GPIO_HIGH_LOG,
  HSU_LPM_REMOTE_WAKEUP_GPIO_HIGH,
  HSU_CALL_HSIC_START_LOG,  
  HSU_AP_HSIC_READY_CALL_HSIC_START_LOG,  //48
  HSU_EFS_HSU_DIAG_SER3_SER4_MDM_MBIM_LOG,  //49
  HSU_EFS_HSU_DIAG_SER3_SER4_MDM_NET5_LOG,
  DCD_VBUS_CONNECT_PENDING_ENUM_ALLOWED_LOG,
  DCD_VBUS_CONNECT_ENUM_ALLOWED_FALSE_LOG,
  DCD_VBUS_CONNECT_ENUM_ALLOWED_NORMAL_LOG,
  SNPS_DCD_VBUS_CONNECT_PENDING_ENUM_ALLOWED_LOG,
  SNPS_DCD_VBUS_CONNECT_ENUM_ALLOWED_FALSE_LOG,
  SNPS_DCD_VBUS_CONNECT_ENUM_ALLOWED_NORMAL_LOG,
  HSU_EFS_SYNC_APP_PTR_NULL_LOG,
  HSU_EFS_SYNC_APP_FIELD_NULL_LOG,
  HSU_AL_SER_BASE_I_TX_DONE_LOG,
  RECOVER_DROPPED__AL_SER_BASE_TX_CHECK_COMPLETE_LOG,
  AL_SER_BASE_TX_CHECK_COMPLETE_LOG,
  CDC_TRANSFER_CANCELLED_LOG,
  HSU_LPM_HSIC_TIMEOUT_TMR_START_LOG,
  TIMER_ALREADY_IN_USE_LOG,
  HSU_DROP_DUN_PACKET_LOG,
  HSU_AL_ECM_HANDLE_SET_CONFIGURATION_LOG,
  HSU_AL_ECM_SPS_SM_ABORT_ALL_PIPE_LOG,
  HSU_AL_ECM_SPS_SM_ABORT_ALL_READ_PIPE_LOG,
  HSU_AL_ECM_SPS_SM_ABORT_ALL_WRITE_PIPE_LOG,
  HSU_AL_ECM_SPS_SM_ABORT_ALL_READ_WRITE_PIPE_LOG,
  DALSPS_TRIGGERPIPEEVENT_LOG,
  SIO_IOCTL_DTE_READY_ASSERTED_LOG,

  HSU_OS_BUS_INIT_LOG,
  HSU_LPM_HSIC_REMOTE_WAKEUP_GPIO_INIT_LOG,
  HSU_9X15_PLATFORM_DETECT_LOG,
  HSU_PLATFORM_STANDALONE_LOG,
  HSU_PLATFORM_STANDALONE_PID_9055_LOG,
  HSU_PLATFORM_M_FUSION_LOG,
  HSU_PLATFORM_M2_FUSION_LOG,
  HSU_PLATFORM_LA_FUSION_LOG,
  HSU_PLATFORM_GOBI_FUSION_LOG,
  HSU_UNKNOWN_PLATFORM_LOG,

  DAL_DEVICEATTACH_FAILED_LOG,
  RPM_REQUEST_LOG,
  HSU_OS_VDDMIN_GPIO_REGISTER_LOG,
  GPIO_HSIC_READY_NOT_CONFIGURED_LOG,
  GPIO_VDD_LOGGING_NOT_CONFIGURED_LOG,
  GPIO_REMOTE_WAKEUP_NOT_CONFIGURED_LOG,

  HSU_OS_BUS_SUSPEND_LOG,
  EXPLICIT_REMOTE_WAKEUP_DELAY_LOG,
  SUSPEND_TO_REMOTE_WAKEUP_ELAPSED_TIME_LOG,
  REMOTE_WAKEUP_MIN_DELAY_TIMER_SCHEDULED_LOG,
  HSU_OS_BUS_RM_WAKEUP_TIMER_CB_DEFERRED_LOG,
  AP2MDM_STATUS_GPIO_CB_FOR_SYS_WAKEUP_LOG,
  HSU_LPM_GPIO_REMOTE_WAKEUP_GPIO_INIT,
  HSU_LPM_REMOTE_WAKEUP_GPIO_INIT_CALLED_MULTIPLE_TIMES_LOG,
  HSU_LPM_GPIO_CONFIGURE_GPIO_LOG,
  DAL_DEVICEATTACH_LOG,
  DALDEVICE_OPEN_LOG,
  DALTLMM_SETINACTIVECONFIG_LOG,
  DALTLMM_CONFIGGPIO_LOG,

  CUR_DEV_COMP_DETAILS_IS_NULL,
  HSU_CONFIG_SELECTOR_IS_ECM_INT_EP_SHARING_SUPPORTED_LOG,

  /*==============================================================================
  **
  ** HSUSB QMI NOTIFICATIONS
  **
  *=============================================================================*/
  HSU_QMI_AL_ECM_CONTROL_TRANSMIT_LOG,
  HSU_ENCAPSULATED_COMMAND_COMPLETE_LOG,
  HSU_CDC_HANDLE_ENCAPSULATED_COMMAND_LOG,
  HSU_ENCAPSULATED_RESPONSE_COMPLETE_LOG,
  HSU_CDC_HANDLE_ENCAPSULATED_RESPONSE_LOG,
  HSU_RESPONSE_AVAILABLE_COMPLETE_LOG,
  HSU_RESPONSE_AVAILABLE_COMPLETE__WITH_ERROR_LOG,
  HSU_RESPONSE_AVAILABLE_COMPLETE__WITH_CANCELLED_LOG,
  HSU_NOTIFY_RESPONSE_AVAILABLE_LOG,
  HSU_NOTIFY_RESPONSE_AVAILABLE_WITH_INT_EP_SHARING_LOG,
  HSU_AL_ECM_FORWARD_CONTROL_RX_TO_APP_LOG,	
  HSU_AL_ECM_ENCAP_COMMAND_CB_LOG,
  HSU_AL_ECM_ENCAP_RESP_COMP_CB_LOG,
  HSU_QMI_DATA_LOG,
  HSU_AL_ECM_TRANSMIT_PENDING_CONTROL_PKT_LOG,
  HSU_AL_ECM_TRANSMIT_PENDING_CONTROL_PKT__CDC_NOT_READY_LOG,
  HSU_ZLDP_ENCAPSULATED_RESPONSE_COMPLETE_LOG,
  HSU_TX_ZLP_STATUS_COMPLETE_LOG, /* TX ZLP completion for SEND ENCAP CMD */
  HSU_RX_ZLP_COMPLETE_LOG, /* RX ZLP completion for GET ENCAP RESP */
  HSU_RX_ZLDP_COMPLETE_LOG,
  HSU_ENCAPSULATED_RESPONSE_COMPLETE_INSUFFICIENT_BYTES_SENT_LOG,
  HSU_RX_ZLP_NOT_CREATED_FOR_ZLDP_LOG,
  HSU_RESET_ENCAP_STATE_LOG,
  HSU_ENCAPSULATED_COMMAND_COMPLETE_STATUS_CDC_TRANSFER_NOT_OK_LOG,
  HSU_ENCAPSULATED_COMMAND_COMPLETE_STATUS_CDC_TRANSFER_CANCELLED_LOG,
  HSU_ENCAPSULATED_COMMAND_COMPLETE_STATUS_CDC_TRANSFER_ERROR_LOG,
  HSU_ZLDP_ENCAPSULATED_RESPONSE_COMPLETE_CREATE_EP0_READ_FAILED_LOG,
  HSU_ENCAPSULATED_RESPONSE_COMPLETE_CREATE_EP0_READ_FAILED_LOG,
  HSU_ENCAPSULATED_RESPONSE_COMPLETE_CLEAN_UP_LOG,
  HSU_CDC_HANDLE_ENCAP__CMD_CREATE_EP0_READ_LOG,
  HSU_RESET_ENCAP_STATE__STATUS_LOG,
  HSU_RESET_ENCAP_STATE__NOTIFY_APP_LOG,
  /*==============================================================================
  **
  ** HSUSB SER4 NOTIFICATIONS
  **
  *=============================================================================*/
  SER4_TRANSFER_INITIATED_LOG,
  SER4_TRANSFER_SUBMITTED_LOG,
  SER4__PACKET__TRANSFER__COMPLETED__LOG,
  SER4_RECIEVED_FROM_AP_LOG,
  SER4_PACKET_DATA_LOG,
  AL_SER_BASE_RX_DONE_FORWARD_TO_APP_LOG,
  HSU_AL_SER_BASE_FORWARD_RX_TO_APP_LOG,

/*==============================================================================
  **
  ** VDD MIN
  **
  *=============================================================================*/  
  HSU_VDDMIN_ENTER_LOG,
  HSU_VDDMIN_EXIT_LOG,
  HSU_VDDMIN_RPM_REGISTERED,
  HSU_VDDMIN_ERROR1,
  HSU_VDDMIN_ERROR2,

  /* ++HSU STATUS  */
  HSU_STATUS_SUCCESS_LOG,
  HSU_STATUS_ERROR_LOG,

  /* ++HSU GENERAL EXCEPTION LOCATION */
  HSU_EXCEPTION_1_LOG,
  HSU_EXCEPTION_2_LOG,
  HSU_EXCEPTION_3_LOG,
  HSU_EXCEPTION_4_LOG,
  HSU_EXCEPTION_5_LOG,

/*==============================================================================
  **
  ** NEW SPS SM LOGS
  **
  *=============================================================================*/  
  HSU_SPS_SM_MDM_POWER_CONTROL_1_SIMULATED_AT_BOOTUP_LOG,
  HSU_SPS_SM_SKIP_MDM_POWER_CONTROL_1_A2_ALREADY_INITIALIZED_LOG,
  HSU_SMSM_SIMULATED_POWER_CONTROL_1_LOG,
  HSU_SMSM_DISCARD_REDUNDANT_POWER_CONTROL_1_LOG,

/*==============================================================================
  **
  ** BAM SM and IPA LOGS
  **
  *=============================================================================*/  
  IPA_STATE_CHG_SUSPEND_LOG,
  IPA_STATE_CHG_RESUME_LOG,
  IPA_PER_ALL_UL_PIPE_ENABLE_LOG,
  IPA_PER_ALL_DL_PIPE_ENABLE_LOG,
  IPA_PER_ALL_UL_PIPE_DISABLE_LOG,
  IPA_PER_ALL_DL_PIPE_DISABLE_LOG,
  IPA_PM_RELEASE_CLK_LOG,
  IPA_PM_REQUSET_CLK_LOG,

  FILTERED_IPA_STATE_CHG_SUSPEND_LOG,
  FILTERED_IPA_STATE_CHG_RESUME_LOG,
  FILTERED_IPA_PER_ALL_UL_PIPE_ENABLE_LOG,
  FILTERED_IPA_PER_ALL_DL_PIPE_ENABLE_LOG,
  FILTERED_IPA_PER_ALL_UL_PIPE_DISABLE_LOG,
  FILTERED_IPA_PER_ALL_DL_PIPE_DISABLE_LOG,
  FILTERED_IPA_PM_RELEASE_CLK_LOG,
  FILTERED_IPA_PM_REQUSET_CLK_LOG,

  DISCARDED_EVENT_LOG,
  SKIP_NEXT_ENTRY_FUNC_DUE_TO_ATOMIC_JUMP_LOG,
  NEW_DEST_STATE_LOG,

  BAM_DISABLE_BIT_TO_0_LOG,
  BAM_DISABLE_BIT_TO_1_LOG,

  FILTERED_BAM_UTILS_DISABLE_ALL_PIPES_LOG,
  FILTERED_BAM_UTILS_DISABLE_ALL_UL_PIPES_LOG,
  FILTERED_BAM_UTILS_DISABLE_ALL_DL_PIPES_LOG,

  FILTERED_BAM_UTILS_RESET_BAM_AND_ENABLE_ALL_UL_PIPE_LOG,
  FILTERED_BAM_UTILS_RESET_BAM_AND_ENABLE_ALL_DL_PIPE_LOG,
  RESET_BAM_AND_ENABLE_ALL_UL_PIPE_LOG,
  RESET_BAM_AND_ENABLE_ALL_DL_PIPE_LOG,

  CORE_ALLOW_ENUMERATION_LOG,
  CORE_DISALLOW_ENUMERATION_LOG,
  CORE_DBM_INIT_LOG,
  CORE_SET_PIPE_PARAMS_LOG,
  CORE_DBM_EP_INIT_LOG,
  CORE_DBM_EP_RESET_LOG,
  DALEPNA_SET_LOG, /* EP enable log */
  DALEPNA_CLR_LOG, /* EP disable log */
  BAM_SM_START_EVENT_HANDLER_LOG,
  HSU_BUS_RESET_FILTERED_LOG,
  SNPS_CORE_SKIP_ENDXFER_LOG,
  SNPS_CORE_ENDXFER_FOR_BAM_EP_LOG,
  SNPS_DCD_UNINIT_EP_STREAMS_LOG,
  SNPS_CORE_INIT_SNPS_USB_LOG,
  CDC_UNINIT_ECM_LOG,
  HSU_AL_ECM_UNINIT_CB_LOG,
  HSU_AL_ECM_DISABLED_CB_LOG,
  BAM_SM_DEVICE_READY_HI_LOG,
  BAM_SM_DEVICE_READY_LO_LOG,

  /* +++ EVENTS */
  HSU_BAM_SM_NIL_EVT_LOG, /* required as event definition starts with 1 */

  /* HSU_AP_SIDEBAND_SIG */
  HSU_HOST_READY_RISE_EVT_LOG,
  HSU_HOST_READY_FALL_EVT_LOG,
  
  /* HSU_USB_BUS_SIG */
  HSU_BUS_SUSPEND_EVT_LOG,
  HSU_BUS_RESUME_EVT_LOG,
  HSU_BUS_RESET_EVT_LOG,
  HSU_BUS_CONFIGURED_EVT_LOG,

  /* HSU_IPA_SIG */
  HSU_IPA_SUSPEND_COMPLETE_IND_EVT_LOG,
  HSU_IPA_DATA_ACTIVITY_EVT_LOG,
  
  /* HSU_FRAMEWORK_SIG */
  HSU_TIMER_EVT_LOG,
  /* --- EVENTS */

  /* +++ STATES */
  // Must update hsu_generic_log_enum, hsu_event_log_enum, hsu_bam_sm_state_enum (for both BAM and NO ECM BAM state machines)
  HSU_BAM_SM_NIL_STATE_LOG, /* required as state definition starts with 1 */

  FLOW_ENABLED_STATE_LOG,
  FLOW_DISABLING_FROM_FORCE_SHUTDOWN_LOG,
  FLOW_DISABLED_FROM_FORCE_SHUTDOWN_LOG,

  DATA_ACTIVITY_WHILE_IN_FORCE_SHUTDOWN_LOG,
  ENUMERATION_WITH_AP_LOG,

  FLOW_DISABLING_FROM_SUSPEND_LOG,
  FLOW_DISABLED_FROM_SUSPEND_LOG,
  DATA_ACTIVITY_WHILE_SUSPENDED_LOG,
  BOOTUP_FLOW_DISABLED_LOG,
  /* --- STATES */

/*==============================================================================
  **
  ** DCD LOG
  **
  *=============================================================================*/  
  ECM_FD__CDC_REQ_SEND_ENCAPSULATED_COMMAND_LOG,
  ECM_FD__CDC_REQ_GET_ENCAPSULATED_RESPONSE_LOG,
  DCD__DCD_HANDLE_COMP_LOG,
  DCD__CORE_HANDLE_EP0_LOG,
  DCD__DCD_INTR_LOG,
  DCD_ENABLE_LOG,
  DCD_BSESS_END_FROM_HW_LOG,

/*==============================================================================
  **
  ** CLKMGR LOG
  **
  *=============================================================================*/   
  HSU_CLKMGR__CLK_OFF_LOG,
  HSU_CLKMGR__CLK_ON_LOG,

  HSU_CLKMGR__NPA__CLK_OFF_LOG,
  HSU_CLKMGR__NPA__CLK_ON_LOG,

  HSU_CLKMGR_ENABLE_AHB2AHB_BRIDGE_BYPASS_MODE_LOG,
  HSU_CLKMGR_ENABLE_AHB2AHB_BRIDGE_BYPASS_MODE__REDUNDANT_LOG,

  HSU_CLKMGR_DISABLE_AHB2AHB_BRIDGE_BYPASS_MODE_LOG,
  HSU_CLKMGR_DISABLE_AHB2AHB_BRIDGE_BYPASS_MODE__REDUNDANT_LOG,

  BAM_TOP_LEVEL_ERROR_LOG,

  NV_VALUE_GREATER_THAN_LIMIT_LOG,
  HSU_CONF_SEL_COMP_UTILS_UPDATE_DEFAULT_COMP_NV_VALUE_LOG,
  AL_SER_GET_OBEX_SLOT_IDX_FOR_SIO_PORT_LOG,
  GET_AND_ALLOC_OBEX_DATA_SLOT_FOR_APP_LOG,
  ECM_INSTANCE_IS_INTR_PIPE_ONLY_LOG,
  HSU_AL_ECM_DATA_OPEN_LOG,
  PORT_ID_NOT_PRESENT_IN_COMP_LOG,
  SLOT_INDEX_FOR_DIAG_LOG,
  SLOT_INDEX_FOR_NMEA_LOG,
  SLOT_INDEX_FOR_SER3_LOG,
  SLOT_INDEX_FOR_SER4_LOG,
  SLOT_INDEX_FOR_SER5_LOG,
  SLOT_INDEX_FOR_SER6_LOG,
  SLOT_INDEX_FOR_DCI_LOG,
  SLOT_INDEX_FOR_QDSS_LOG,

  CDC_SPS_READ_WRITE_INFINITE_LOG,
  CDC_SPS_READ_WRITE_INFINITE_DEFERRED_LOG,  
  UL_LOG,
  DL_LOG,
  FILTERED_LOG,

  HSU_LPM_HSIC_SUSPEND_PHY_IN_ISR_LOG,
  
/*==============================================================================
  **
  ** VREG MGR NPA VOTES
  **
  *=============================================================================*/   
  HSU_VREGMGR_TURN_ON_LOG,
  HSU_VREGMGR_TURN_OFF_LOG,
  PMIC_NPA_MODE_ID_GENERIC_ACTIVE_LOG,
  PMIC_NPA_MODE_ID_GENERIC_STANDBY_LOG,
  PMIC_NPA_MODE_ID_USB_HS_PERI_LPM_0_ACTIVE_LOG,
  PMIC_NPA_MODE_ID_USB_HS_PERI_LPM_1_STANDBY_LOG,
  PMIC_NPA_MODE_ID_USB_HS_POWER_OFF_LOG,
  PMIC_NPA_MODE_ID_CORE_RAIL_OFF_LOG,
  PMIC_NPA_MODE_ID_CORE_RAIL_NOMINAL_LOG,

  PMIC_NPA_MODE_ID_USB_OFF_LOG,
  PMIC_NPA_MODE_ID_USB_PERPH_SUSPEND_LOG,
  PMIC_NPA_MODE_ID_USB_PERPH_ACTIVE_LOG,
  
  /* HSU_CORE_OFFSET */
  USB3_SNPS_CORE_LOG,     //< -- USB3.0 core.
  UNKNOWN_CORE_LOG,       //< -- Uknown, Number of core types.

  HSU_OS_HS_ISR_WRAPPER_ASYNC_INTR_LOG,
  HSU_OS_HSIC_ISR_WRAPPER_ASYNC_INTR_LOG,
  PWR_EVNT_IRQ_STAT_LPM__IN_L2_IRQ_LOG,
  PWR_EVNT_IRQ_STAT_LPM__OUT_L2_IRQ_LOG,  
  PWR_EVNT_IRQ_STAT_LPM__IN_P3_IRQ_LOG,
  PWR_EVNT_IRQ_STAT_LPM__OUT_P3_IRQ_LOG,
  PWR_EVNT_IRQ_STAT_LPM__OUT_ELEC_IDLE_IRQ_LOG,
  PWR_EVNT_IRQ_STAT_LPM__UKNOWN_LOG,
  PWR_EVNT_IRQ_PHY_WAKEUP_LOG,
  
  // HSU_PWR_EVNT_OFFSET 
  PWR_EVNT_SW_LOG,
  PWR_EVNT_PHY_L2_LOG,
  PWR_EVNT_PHY_P3_LOG,
  QMP_PHY_LFPS_IRQ_LOG,
  QUSB2_PHY_IRQ_LOG,
  GENERIC_WAKEUP_EVNT_LOG,

  HSU_LPM_SNPS_QMP_POWER_DOWN_DISCONNECT_LOG,
  HSU_LPM_SNPS_QMP_POWER_UP_CONNECT_LOG,
  HSU_LPM_SNPS_HS_PHY_EXIT_SUSPEND_LOG,
  HSU_LPM_SNPS_HS_PHY_ENTER_SUSPEND_LOG,
  HSU_LPM_SNPS_HS_PHY_ENTER_DISCONNECT_LOG,
  HSU_LPM_SNPS_QMP_AUTO_MODE_SUSPEND_LOG,
  HSU_LPM_SNPS_QMP_AUTO_MODE_CLEAR_LOG,

  HSU_LPM_SNPS_ENTER__DISCONNECTED_LOG,
  HSU_LPM_SNPS_ENTER__SUSPEND_LOG,
  HSU_LPM_SNPS_EXIT__SUSPEND_LOG,
  NOT_U3_LOG,
  
  HSU_OS_USB3_PWR_EVT_IRQ_WRAPPER_LOG,
  USB3_HS_PHY_IRQ_LOG,
  QMP_PHY_LFPS_IRQ_WRAPPER_LOG,
  QUSB2_PHY_IRQ_WRAPPER_LOG,
  HSU_PHCD_BIT_SET_FAIL_LOG,
  HSU_API_INIT_PHY_LOG,
  HSU_CONF_SEL_STACK_UTILS_DEVICE_RESTART_CORE_LOG,

  /* HSU_SPEED_OFFSET */
  SPEED_LOW_LOG,
  SPEED_FULL_LOG,
  SPEED_HIGH_LOG,
  SPEED_SUPER_LOG,
  SPEED_UNKNOWN_LOG,

  ENABLE_L2_TRANSITION_LOG,
  DISABLE_L2_TRANSITION_LOG,

  ENABLE_P3_TRANSITION_LOG,
  DISABLE_P3_TRANSITION_LOG,

/*==============================================================================
  **
  ** JTASK_SCHEDULE debugging
  **
  *=============================================================================*/   
  JTASK_SCH_HSU_OS_MSLEEP_LOG,
  JTASK_SCH_HSU_OS_MSLEEP_2_LOG,
  JTASK_SCH_HSU_OS_MSLEEP_UNINIT_LOG,
  JTASK_SCH_HSU_OS_WAKEUP_LOG,
  JTASK_SCH_HSU_OS_SYNC_INIT_LOG,
  JTASK_SCH_JGENERIC_DSR_LOG,
  JTASK_SCH_SEND_IO_REQUEST_LOG,
  JTASK_SCH_DCD_SEND_IO_REQUEST_LOG,
  JTASK_SCH_DCD_HANDLE_TIMEOUT_LOG,
  JTASK_SCH_COUNT_INC_LOG,
  JTASK_SCH_COUNT_DEC_LOG,
  JTASK_SCH_COUNT_ZERO_LOG,
  JTASK_SCH_COUNT_ONE_LOG,
  HSU_OS_SYNC_MLSEEP_TIMER_EXPIRED_LOG,
  HSU_OS_SYNC_MLSEEP_TIMER_EXPIRED__MSEC_0_LOG,

/*==============================================================================
  **
  ** BAM API logging
  **
  *=============================================================================*/   
  BAM_INIT_LOG,
  BAM_PIPE_ENABLE_LOG,
  BAM_PIPE_ENABLE_UL_LOG,
  BAM_PIPE_ENABLE_DL_LOG,
  BAM_PIPE_DISABLE_LOG,
  BAM_PIPE_DISABLE_UL_LOG,
  BAM_PIPE_DISABLE_DL_LOG,
  BAM_PIPE_INIT_LOG,
  BAM_PIPE_DEINIT_LOG,
  BAM_DEINIT_LOG,
  BAM_PIPE_SETIRQMODE_REG_WAKEUP_LOG,
  BAM_PIPE_SETIRQMODE_UNREG_WAKEUP_LOG,
  BAM_RESET_LOG,
  BAM_PIPE_ARE_DL_EMPTY_LOG,
  BAM_PIPE_ARE_UL_EMPTY_LOG,
  BAM_PIPE_UL_NOT_EMPTY_LOG,
  BAM_PIPE_IS_EMPTY_PRINT_ALL_DL_LOG,
  BAM_PIPE_IS_EMPTY_PRINT_ALL_UL_LOG,
  HSU_AL_BAM_ALLOCATE_PIPES_LOG,
  DS_PORT_MAPPER_CONFIG_RMNET_INSTANCES_LOG,
  DS_PORT_MAPPER_CONFIG_RMNET_INSTANCES_FILTERED_LOG,
  IPA_EINPROGRESS_LOG,

  LOW_DTE_READY_LOG,
  HIGH_DTE_READY_LOG,

  BAM_PIPE_ARE_DL_EMPTY__TRIGGER_REMOTE_WAKEUP_FOR_QDSS_LOG, 
  FALSE_LOG,
  TRUE_LOG,
  ALREADY_DONE_LOG,
  NOT_BAM_MODE_LOG,

/*==============================================================================
  **
  ** DBM API logging
  **
  *=============================================================================*/   
  DBM_RESET_LOG,
  DBM_INIT_LOG,
  DBM_ABORT_DBM_EP_LOG,
  DBM_EP_INIT_LOG,
  DBM_GEN_CFG_INIT_LOG,
  TRB_FOR_INFINITE_MODE_LOG,
  TRB_FOR_ABORT_XFER_INFINITE_MODE_LOG,

/*==============================================================================
  **
  ** DTD debugging
  **
  *=============================================================================*/   
  DTD_BUILD_ETD_PARAM_LOG,
  DTD_START_MULTIPLE_XFER_PARAM_LOG,
  DTD_BUILD_TD_LIST_LOG,
  DTD_PRIME_EP_LOG,

/*==============================================================================
  **
  ** MEM debugging
  **
  *=============================================================================*/   
  MEM_DMA_BLOCK_ADD_LOG,
  MEM_JDMA_FREE_LOG,
  MEM_JMEMP_FREE_LOG,
  MEM_JDMA_FREE_DUMMY_LOG,
  MEM_BUILD_SINGLE_ETD_LOG,
  MEM_BUILD_SINGLE_TD_LOG,
  MEM_JDMA_BLOCK_FREE_LOG,
  MEM_JDMA__REQUEST_LOG,
  MEM_FREE_TD_LOG,
  MEM_JDMA_FREE_ALL_LOG,
  MEM_DMA__SIZE_LOG,
  MEM_DMA__TOTAL_DMA_FREE_LOG,
  MEM_DMA__TOTAL_DMA_ITEMS_LOG,
  MEM_DMA__POOL_OFFSET_LOG,
  MEM_JDMA__FIND_EXISTING_UNCACHABLE_LOG,
  MEM_JDMA__FIND_EXISTING_IGNORE_MAX_SIZE_LOG,

  CPU_VDD_PC_NO_RETENTION_ENTER_LOG,
  CPU_VDD_PC_NO_RETENTION_EXIT_LOG,

/*==============================================================================
  **
  ** IPA logging 
  **
  *=============================================================================*/   
  IPA_CB__RDY_FOR_CONNECT_LOG,
  IPA_PER_REG_CB_LOG,
  IPA_PER_REQUEST_PIPE_LOG,
  IPA_PIPE_CONNECT_LOG,
  ENABLE_FLOW_WITH_BAM_LOG,
  ENABLE_UL_FLOW_WITH_BAM_LOG,
  ENABLE_DL_FLOW_WITH_BAM_LOG,
  IPA_PIPE_ENABLE_UL_LOG,
  IPA_PIPE_ENABLE_DL_LOG,
  IPA_PIPE_DISABLE_UL_LOG,
  IPA_PIPE_DISABLE_DL_LOG,
  IPA_PER_PM_DATA_SUSPEND_COMPLETE_LOG,
  IPA_PER_DROP_DATA_LOG,
  FILTERED_IPA_PER_DROP_DATA_LOG,
  IPA_PER_UNDROP_DATA_LOG,
  FILTERED_IPA_PER_UNDROP_DATA_LOG,
  IPA_PER_ENABLE_CLEAR_DP_LOG,
  FILTERED_IPA_PER_ENABLE_CLEAR_DP_LOG,
  IPA_PER_DISABLE_CLEAR_DP_LOG,
  FILTERED_IPA_PER_DISABLE_CLEAR_DP_LOG,
  IPA_DATA_ACTIVITY_EVT_LOG,

/*==============================================================================
  **
  ** QDSS
  **
  *=============================================================================*/   
  QDSS_BAM_PIPE_DISABLE_LOG,
  QDSS_BAM_PIPE_ENABLE_LOG,
  CDC_SPS_READ_WRITE_INFINITE_QDSS_LOG,

/*==============================================================================
  **
  ** INTR init/deinit
  **
  *=============================================================================*/   
  INTERRUPT_UNINIT_LOG,
  INTERRUPT_INIT_LOG,
  INTERRUPT_LFPS_UNINIT_LOG,
  INTERRUPT_PWR_EVNT_INIT_LOG,
  INTERRUPT_PWR_EVNT_UNINIT_LOG,
  INTERRUPT_QUSB2_PHY_UNINIT_LOG,

/*==============================================================================
  **
  ** USB Interface Offset
  **
  *=============================================================================*/ 

  /* HSU_IFACE_OFFSET */
  NO_HSU_IFACE_LOG,

  MS_HSU_IFACE_LOG,
  
  DIAG_HSU_IFACE_LOG,
  NMEA_HSU_IFACE_LOG,
  SER3_HSU_IFACE_LOG,
  SER4_HSU_IFACE_LOG,
  SER5_HSU_IFACE_LOG,
  SER6_HSU_IFACE_LOG,
  DCI_HSU_IFACE_LOG,
  QDSS_HSU_IFACE_LOG,

  MDM_HSU_IFACE_LOG,
  CSVT_HSU_IFACE_LOG,

  NET1_HSU_IFACE_LOG,
  NET2_HSU_IFACE_LOG,
  NET3_HSU_IFACE_LOG,
  NET4_HSU_IFACE_LOG,
  NET5_HSU_IFACE_LOG,
  NET6_HSU_IFACE_LOG,
  NET7_HSU_IFACE_LOG,
  NET8_HSU_IFACE_LOG,

  MBIM_HSU_IFACE_LOG,
  GNSS_HSU_IFACE_LOG,
  IPCR_HSU_IFACE_LOG,

  AUDIO_HSU_IFACE_LOG,
  NUM_OF_HSU_IFACE_LOG,

/*==============================================================================
  **
  ** TX/RX CDC Transfer Status
  **
  *=============================================================================*/ 
  TX_CDC_TRANSFER_ERROR_LOG,
  TX_CDC_TRANSFER_OK_LOG,        /* HSU_TX_CDC_TRANSFER_OFFSET */
  TX_CDC_TRANSFER_CANCELLED_LOG,

  RX_CDC_TRANSFER_ERROR_LOG,
  RX_CDC_TRANSFER_OK_LOG,        /* HSU_RX_CDC_TRANSFER_OFFSET */
  RX_CDC_TRANSFER_CANCELLED_LOG,

/*==============================================================================
  **
  ** Logging for enforcing BAM Reset before priming EPs
  **
  *=============================================================================*/   
  HSU_BUS_MODE_RESUME_BEGIN_LOG,
  HSU_AL_SPS_UTILS_RESET_ALL_PIPE_LOG,
  HSU_AL_SPS_UTILS_RESET_ALL_PIPE__ALREADY_DONE_LOG,
  HSU_AL_SPS_UTILS_DISCONNECT_ALL_PIPE__ALREADY_DONE_LOG,
  IS_BAM_DISCONNECTED_DUE_TO_SUSPEND__SET_LOG,
  IS_BAM_DISCONNECTED_DUE_TO_SUSPEND__CLEARED_LOG,

  BAM_CORE_DUMP_FOR_PEER_PIPE_SKIPPED_DUE_TO_DEVICE_NOT_READY,
  DIAG_CMD_LOG,
  DIAG_CMD_FILTERED_LOG,
  HSU_TIMER_CANCEL__UNINITIALIZED_HANDLE_LOG,

  GET_AND_ALLOC_ECM_INSTANCE_INFO_FOR_FD_LOG,
  SKIP_ASSIGNING_TO_ECM_INSTANCE_INFO_FOR_HSIC_LOG,

  PHCD_BIT_SET_LOG,
  PHCD_BIT_CLEAR_LOG,

  RESET_EP_LOG,
  RESET_HW_LOG,
  EP_FLUSH_BIT_FAILED,
  HSU_AL_TASK_SIGNAL_REMOTE_WAKEUP_LOG,
  HSU_CONF_SEL_STACK_UTILS_ENABLE_PERF_BOOST_IDX_LOG,
  HSU_PHY_UTILS_INIT_HSIC_LOG,
  HSU_PHY_UTILS_START_HSIC_LOG,
  RECOVER_DROPPED_PACKET__UNABLE_TO_RECOVER_LOG,
  AL_SER_BASE_TX_SEND_BUFFER__DURING_SUSPEND_LOG,
  DSM_POOL_MANY_CB__SETUP_READ_LOG,
  DSM_POOL__NOT_AVAILABLE_LOG,

  HSU_SPS_SM__BUS_SUSPEND__DL_BAM_REMOTE_WAKEUP_LOG,
  HSU_SPS_SM__BUS_SUSPEND__DL_BAM_REMOTE_WAKEUP_RETRIES_EXPIRY_LOG,
  HSU_SPS_SM_IS_USB_CLOCK_OFF_ALLOWED_LOG,
  HSU_LPM_TURN_OFF_ALL_CLOCKS_LOG,
  
  AL_SER_ACM_UPDATE_SERIAL_STATE_PARAM_LOG,
  AL_SER_ACM_NOTIFY_SERIAL_STATE_IF_ENABLED_LOG,
  AL_SER_ACM_NOTIFY_SERIAL_STATE_IF_ENABLED__IN_PROG_LOG,
  AL_SER_ACM_NOTIFY_SERIAL_STATE_CB_LOG,
  AL_SER_ACM_NOTIFY_SERIAL_STATE_CB__UPDATE_LATEST_PENDING_STATE_LOG,

/*==============================================================================
  **
  ** Logging bootup sequence
  **
  *=============================================================================*/   
  SNPS_DCD_OPS_VBUS_CONNECT_LOG,
  SNPS_DCD_OPS_VBUS_DISCONNECT_LOG,
  SNPS_DCD_OPS_VBUS_RESET_LOG,
  SNPS_DCD_OPS_DISABLE_LOG,
  SNPS_DCD_OPS_WAKE_THE_HOST_LOG,
  SNPS_DCD_OPS_WAKE_THE_HOST__FINISH_LOG,
  SNPS_DCD_OPS_WAKE_THE_HOST__TRY_AGAIN_EXCEPTION_LOG,
  SNPS_DCD_OPS_SET_TEST_MODE_LOG,
  SNPS_DCD_OPS_SET_ADDRESS_STATE_LOG,
  SNPS_DCD_RUN_SCRIPTRUNNER_TEST_LOG,
  SNPS_DCD_SET_EVENT_BUFFER_ADDRESS_LOG,
  SNPS_DCD_SET_EVENT_BUFFER_SIZE_LOG,
  SNPS_DCD_SET_EVENT_BUFFER_INTERRUPT_LOG,
  SNPS_DCD_SET_EVENT_BUFFER_COUNT_LOG,
  SNPS_DCD_WRITE_EP_COMMAND_LOG,
  SNPS_DCD_WRITE_GENERAL_COMMAND_LOG,
  SNPS_DCD_RESET_CORE_LOG,
  SNPS_DCD_CONFIG_PHY_LOG,
  SNPS_DCD_SET_U1_LOG,
  SNPS_DCD_SET_U2_LOG,
  SNPS_DCD_CONFIG_CORE_LOG,
  SNPS_DCD_CONFIG_EVENTS_LOG,
  SNPS_DCD_HANDLE_CONNECT_LOG,
  SNPS_DCD_HANDLE_DISCONNECT_LOG,
  SNPS_DCD_HANDLE_RESET_LOG,
  SNPS_DCD_CONFIG_INTERRUPTS_LOG,
  SNPS_DCD_OPS_ABORT_EP_LOG,
  SNPS_DCD_CONFIG_DEVICE_RESOURCES_LOG,
  SNPS_DCD_CONFIG_EP_CFG_LOG,
  SNPS_DCD_CONFIG_EP_XFER_LOG,
  SNPS_DCD_STALL_EP_LOG,
  SNPS_DCD_ENQUEUE_REQUEST_LOG,
  SNPS_DCD_ABORT_EP0_LOG,
  SNPS_DCD_HANDLE_SET_SEL_REQUEST_LOG,
  WRITE_GCTL_LOG,
  WRITE_DCFG_LOG,
  WRITE_DCTL_LOG,
  WRITE_DGCMD_CMD_w_PARAM_0_LOG,
  WRITE_DEVTEN_LOG,
  WRITE_GEVNTADRLO_LOG,
  WRITE_GEVNTADRHI_LOG,
  WRITE_GEVNTSIZ_LOG,
  WRITE_GEVNTCOUNT_LOG,
  WRITE_DEPCMD_CMD_w_PARAM_0_1_2_LOG,
  WRITE_GUSB2PHYCFG_LOG,
  WRITE_GUSB3PIPECTL_LOG,
  DEPCMD_ENDXFER_LOG,
  DEPCMD_START_NEW_CFG_LOG,
  DEPCMD_SETEPCONF_LOG,
  DEPCMD_SETEPXFERRES_LOG,
  DEPCMD_SETSTALL_LOG,
  DEPCMD_CLRSTALL_LOG,
  DEPCMD_STARTTRANSFER_LOG,
  DEPCMD_UPDATETRANSFER_LOG,
  DEPCMD_ENDTRANSFER_LOG,
  TEMP_DISABLE_GUSB2PHYCFG_SUSPPHY_LOG,
  TEMP_DISABLE_GUSB3PIPECTL_SUSPENDENABLE_LOG,

  GENERAL_CFG_LOG,
  RAM1_LOG,
  DBM_GEVNTADR_LOG,
  DBM_GEVNTSIZ_LOG,
  DBM_GEN_CFG_LOG,
  DBM_DATA_FIFO_ADDR_EN_LOG,
  DBM_DATA_FIFO_SIZE_EN_LOG,
  DBM_DATA_SIZE_ADDRn_OUTI_LOG,
  DBM_DATA_FIFO_ADDR_LSBn_OUTI_LOG,
  DBM_EP_CFG_ADDRn_OUTMI_LOG,
  DBM_SOFT_RESET_LOG,
  DBM_EP_CFG_ADDRn_OUTI_LOG,
  DBM_GEVNTADR_LSB_ADDR_LOG,
  DBM_GEVNTADR_MSB_ADDR_LOG,

  INSPECT_ACTUAL_VAL_LOG,
  DBM_EN_LOG,

  HSU_AL_ECM_ENABLED_CB_LOG,

  HIGH_PMIC_USB_VBUS_LOG,
  LOW_PMIC_USB_VBUS_LOG,
  DCD_ALLOW_ENUMERATION_LOG,
  DCD_DISALLOW_ENUMERATION_LOG,
  SNPS_DCD_ALLOW_ENUMERATION_LOG,
  SNPS_DCD_DISALLOW_ENUMERATION_LOG,
  HSU_DALCLOCK_SETCLOCKFREQUENCY__ERROR_LOG,

  DCD_ABORT_EP_LOG,
  SNPS_USB_ENDPOINT_HALT_LOG,
  SET_STALL_LOG,
  CLR_STALL_LOG,
  HSU_OS_AP2MDM_STATUS_GPIO_REGISTER_LOG,

  CORE_RESUME_REMOTE_WAKEUP_LOG, 
  CORE_RESUME_NOT_EMPTY_LOG,
  SNPS_DCD_OPS_CORE_RESUME_LOG, 
  AL_SER_BASE_TX_WRITE_LOG,
  CORE_GET_CURR_SPEED_LOG,
  CORE_RESUME__SEND_IO_SKIPPED_DBM_REQ_LOG,
  PWR_EVNT_SW__REJECT_DUE_TO_NOT_IN_SUSPEND_LOG,

  // Function suspend and function remote wake
  SET_FEATURE_FUNC_SUSP_STATE_1_LOG,
  SET_FEATURE_FUNC_SUSP_STATE_0_LOG,
  HOST_ENABLE_FUNC_REMOTE_WAKE_LOG,
  HOST_DISABLE_FUNC_REMOTE_WAKE_LOG,
  SEND_FUNCTION_WAKE_LOG,
  REMOTE_WAKEUP_DUE_TO_FUNC_REQUEST_LOG,
  RESTART_FUNCTION_WAKE_TNOTIF_TIMEOUT_LOG,
  CLIENT_REQUESTED_FUNCTION_WAKE_LOG,
  FUNCTION_WAKEUP_CB_WHILE_CORE_NOT_ENABLED_LOG,
  LINK_STATE_NOT_U0_CANNOT_SEND_FUNC_WAKE_LOG,

  // Exception handling at CDC
  ESUSPENDED_CDC_READ_WRITE_INFINITE_SKIPPED_LOG,
  DEFAULT_CDC_SUSPEND__SKIPPED_FOR_QDSS_LOG,

  NPA_REQUIRE_REQUEST__START_LOG,
  NPA_REQUIRE_REQUEST____END_LOG,

  NPA_COMPLETE_REQUEST__START_LOG,
  NPA_COMPLETE_REQUEST____END_LOG,

  SNPS_LOCAL_CLK_ON__START_LOG,
  SNPS_LOCAL_CLK_ON____END_LOG,
  SNPS_TZ_RESTORE__START_LOG,
  SNPS_TZ_RESTORE____END_LOG,

  QDSS_NONBAM_MODE_ABORT_WRITE_LOG,
  PMIC_USB_VBUS_ISR_LOG,
  GDSCR_SW_COLLAPSE_LOG,
  XO_SHUTDOWN___NO_VDDMIN_COUNT_LOG,
  XO_SHUTDOWN_WITH_VDDMIN_COUNT_LOG,

  // PHY register writes
  PHY_REG_ARRAY_PROCESS__FAIL_LOG,
  PHY_REG_ARRAY_PROCESS__START_LOG,
  PHY_REG_ARRAY_PROCESS____END_LOG,
  QUSB2_PHY_TUNE2_UTM_HSTX_TRIM_LOG,
  SELECT_UTMI_CLK_LOG,
} hsu_generic_log_enum;


#define HSU_UNDEFINED_OFFSET      0
#define HSU_BUS_NOTIFY_OFFSET     NOTIFY_DEVICE_CONNECT_LOG
#define HSU_BUS_NOTIFY_OFFSET2     NOTIFY_DEVICE_CONNECT_ULOG


#define HSU_CLKMGR_OFFSET         HSU_CLKMGR__CLK_OFF_LOG
#define HSU_CLKMGR_OFFSET2         HSU_CLKMGR__CLK_OFF_ULOG

#define HSU_CLKMGR__NPA_OFFSET   HSU_CLKMGR__NPA__CLK_OFF_LOG
#define HSU_CLKMGR__NPA_OFFSET2   HSU_CLKMGR__NPA__CLK_OFF_ULOG

#define HSU_CORE_OFFSET           USB3_SNPS_CORE_LOG
#define HSU_CORE_OFFSET2          USB3_SNPS_CORE_ULOG 

#define HSU_CHP9_GET_DESCRIPTOR_OFFSET  GET_DESCRIPTOR_INVALID_LOG
#define HSU_CHP9_GET_DESCRIPTOR_OFFSET2  GET_DESCRIPTOR_INVALID_ULOG

#define HSU_CHP9_GET_DESCRIPTOR_LAST    (GET_DEVICE_DESCRIPTOR_OUT_OF_LOG - GET_DESCRIPTOR_INVALID_LOG)
#define HSU_CHP9_GET_DESCRIPTOR_LAST2    (GET_DEVICE_DESCRIPTOR_OUT_OF_ULOG - GET_DESCRIPTOR_INVALID_ULOG)


#define HSU_TX_CDC_TRANSFER_OFFSET      TX_CDC_TRANSFER_OK_LOG
#define HSU_RX_CDC_TRANSFER_OFFSET      RX_CDC_TRANSFER_OK_LOG
#define HSU_TX_CDC_TRANSFER_OFFSET2      TX_CDC_TRANSFER_OK_ULOG
#define HSU_RX_CDC_TRANSFER_OFFSET2      RX_CDC_TRANSFER_OK_ULOG


#define HSU_IFACE_OFFSET          NO_HSU_IFACE_LOG
#define HSU_IFACE_OFFSET2          NO_HSU_IFACE_ULOG

#define HSU_BAM_SM__EVENT_OFFSET  HSU_BAM_SM_NIL_EVT_LOG 
#define HSU_BAM_SM__EVENT_OFFSET2 HSU_BAM_SM_NIL_EVT_ULOG 

#define HSU_BAM_SM__STATE_OFFSET  HSU_BAM_SM_NIL_STATE_LOG
#define HSU_BAM_SM__STATE_OFFSET2  HSU_BAM_SM_NIL_STATE_ULOG

#define HSU_SPEED_OFFSET          SPEED_LOW_LOG
#define HSU_SPEED_OFFSET2          SPEED_LOW_ULOG

#define HSU_PWR_EVNT_OFFSET       PWR_EVNT_SW_LOG
#define HSU_PWR_EVNT_OFFSET2       PWR_EVNT_SW_ULOG

#define HSU_SNPS_EP_EVNT_OFFSET2  SNPS_CTRL_EVT_UNKNOWN_ULOG

/* Event based logging */
/* This enumerated type must have a prefix of EVT_ */
typedef enum
{
  EVT_CLK_ON___SS_CONNECTED = 1,
  EVT_CLK_OFF__SS_CONNECTED,
  EVT_CLK_ON___HS_CONNECTED,
  EVT_CLK_OFF__HS_CONNECTED,
  EVT_CLK_ON___FS_CONNECTED,
  EVT_CLK_OFF__FS_CONNECTED,
  EVT_CLK_ON___UNKNOWN_CONNECTED,
  EVT_CLK_OFF__UNKNOWN_CONNECTED,
  EVT_CLK_ON___NOT_CONNECTED,
  EVT_CLK_OFF__NOT_CONNECTED,
  EVT_LPM_ENTER_SUSPEND,
  EVT_LPM_ENTER_DISCONNECTED,
  EVT_LPM_EXIT,
  EVT_REMOTE_WAKEUP,
  EVT_REMOTE_WAKEUP_FAIL,
  EVT_PHCD_BIT_SET_FAIL,
  EVT_PHCD_BIT_CLR_FAIL,
  EVT_LPM_HSIC_ENTER,
  EVT_LPM_HSIC_EXIT,
  EVT_LPM_HSIC_ENTER_SUSPEND_FAILED,
  EVT_BUS_SUSPEND,
  EVT_BUS_RESUME,
  EVT_BUS_RESET,
  EVT_ACTIVE_BIT_SET_AFTER_IOC,
  EVT_RESET_EP_FLUSH_FAILED,    
  EVT_BAM_TOP_LEVEL_ERROR_IGNORED,
  EVT_CORE_RESUME_SEND_SKIP_DBM_REQ,
  EVT_SW_VOTED_FOR_LPM_CONNECTED__WITHOUT_SUSPEND,
  EVT_EP_COMMAND_FAIL,
  EVT_GEN_COMMAND_FAIL,
  EVT_HIGH_DTE_READY,
  EVT_LOW_DTE_READY,

  // Must update hsu_generic_log_enum, hsu_event_log_enum, hsu_bam_sm_state_enum (for both BAM and NO ECM BAM state machines)
  EVT_FLOW_ENABLED_STATE,
  EVT_FLOW_DISABLING_FROM_FORCE_SHUTDOWN,
  EVT_FLOW_DISABLED_FROM_FORCE_SHUTDOWN,
  EVT_DATA_ACTIVITY_WHILE_IN_FORCE_SHUTDOWN,
  EVT_ENUMERATION_WITH_AP,
  EVT_FLOW_DISABLING_FROM_SUSPEND,
  EVT_FLOW_DISABLED_FROM_SUSPEND,
  EVT_DATA_ACTIVITY_WHILE_SUSPENDED,
  EVT_BOOTUP_FLOW_DISABLED,

  EVT_HSU_CDC_HANDLE_ENCAPSULATED_COMMAND,
  EVT_HSU_NOTIFY_RESPONSE_AVAILABLE_WITH_INT_EP_SHARING,
  EVT_HSU_NOTIFY_RESPONSE_AVAILABLE,
  EVT_HSU_CDC_HANDLE_ENCAPSULATED_RESPONSE,
  EVT_IPA_PM_REQUSET_CLK,
  EVT_IPA_PM_RELEASE_CLK,
  EVT_SEND_FUNCTION_WAKE,
  EVT_ISSUE_REMOTE_WAKEUP_DUE_TO_FUNC_WAKE,
  EVT_CLIENT_REQUESTED_FUNCTION_WAKE,
  EVT_RESTART_FUNCTION_WAKE_TNOTIF_TIMEOUT,
  EVT_ESUSPENDED_CDC_READ_WRITE_INFINITE_SKIPPED,
  EVT_DPL_DROP_TX_CTRL_PKTS,
  EVT_SS_PHY_NOT_FUNCTIONAL,
  EVT_MISSED_ISOC_INTERVAL,
  EVT_WAIT_FOR_ZLP_TO_COMPLETE_IN_REQ,
  EVT_INVALID_REQUEST_STATUS,
  EVT_UNABLE_TO_STOP_GSI_CHANNEL_DUE_TO_BUS_IN_U0_A,
  EVT_UNABLE_TO_STOP_GSI_CHANNEL_DUE_TO_BUS_IN_U0_B,
  EVT_LINK_STATE_STILL_IN_U0,
  EVT_PMIC_VBUS_HIGH_DUPLICATE,
  EVT_PMIC_VBUS_LOW_DUPLICATE,
  EVT_L1_ENTER,
  EVT_L1_EXIT,
  
  // REMEMBER TO ADD TO DIAG EVENT LOG hsu_log_print_f3_event_logs()
  EVT_NUM_ITEMS, /* marker to determine number of items needed */
} hsu_event_log_enum;

/* enum starts with 1; hence, number of items is 1 less */
#define HSU_EVENT_LOG_NUM_ITEMS (EVT_NUM_ITEMS - 1)
#define HSU_EVENT_LOG_DEPTH (8)

typedef enum
{
  HSU_DUN_LOG_DISABLED              = 0,
  HSU_DUN_LOG_RX_TX_INTERNAL_ONLY   = 1,
  HSU_DUN_LOG_RX_TX_F3_ONLY         = 2,
  HSU_DUN_LOG_RX_INTERNAL_ONLY      = 3,
  HSU_DUN_LOG_TX_INTERNAL_ONLY      = 4,  
  HSU_DUN_LOG_RX_INTERNAL_TX_F3     = 5,
  HSU_DUN_LOG_TX_INTERNAL_RX_F3     = 6,
  HSU_DUN_LOG_RX_TX_INTERNAL_AND_F3 = 7
} hsu_dun_efs_config_type;

typedef struct
{
  jbool_t rx_internal;
  jbool_t tx_internal;
  jbool_t rx_f3;
  jbool_t tx_f3;
} hsu_dun_log_config_info_type;


typedef struct
{
  uint64 timetick;
  hsu_dun_log_enum id_0;
  uint32 buff_size;
  char* buff_ptr;
} hsu_dun_log_type;

typedef struct
{
  uint64 timetick;
  hsu_perf_log_enum id_0;
  uint32 param_0;
} hsu_perf_log_type;

#ifdef CI_MERGE
typedef struct
{
  uint64 timetick;
  hsu_audio_log_enum id_0;
  uint32 param_0;
  uint32 param_1;
} hsu_audio_log_type;
#endif

typedef struct
{
  uint64 timetick;
  hsu_snps_log_enum id_0;
  uint32 param_0;
  uint32 param_1;
} hsu_snps_log_type;


typedef struct
{
  uint64 timetick;
  hsu_snps_ctrl_log_enum id_0;
  uint32 param_0;
  uint32 param_1;
} hsu_snps_ctrl_log_type;


typedef struct
{
  uint64 timetick;
  hsu_generic_log_enum id_0;
  hsu_generic_log_enum id_1;
  uint32 param_0;
} hsu_generic_log_type;

typedef struct
{
  uint64 timetick;
  hsu_generic_log_enum id_0;
  uint8 rmnet_interface;
  uint32 param_0;
} hsu_qmi_log_type;

typedef struct
{
  uint64 timetick;
  uint32 qmi_data[5];
  uint8  size;
}hsu_qmi_data_log_type;

typedef struct
{
  uint32 ser4_data[4];
} hsu_ser4_data_log_type;

typedef struct
{
  uint64 timetick;
  hsu_generic_log_enum id_0;
  uint32 param_0;
} hsu_ser4_log_type;

typedef struct
{
  uint64 timetick;
  hsu_generic_log_enum id_0;
  uint32 param_0;
} hsu_vddmin_log_type;

typedef struct
{
  uint64 timetick;
  char str_data[HSU_DBG_E_LOG_STR_SIZE]; /* null terminated */
} hsu_dbg_e_log_type;

typedef struct
{
  uint64 timetick;
  hsu_generic_log_enum id_0;
  uint8 param_0;
} hsu_ep0_log_type;

typedef struct
{
  uint64 timetick;
  hsu_generic_log_enum id_0;
  int32 prev_count;
  rex_tcb_type rex_tcb;
} hsu_task_schedule_log_type;

/* manually redefine the dtd here to avoid header file dependency */
typedef struct
{
  uint32 next_td_ptr;
  uint32 td_header;
  uint32 buf_ptr[5];
} hsu_dtd_struct_type;

typedef struct
{
  uint64 timetick;
  void* ep;
  rex_tcb_type rex_tcb;
  void* dtd_addr;
  hsu_dtd_struct_type dtd;
  hsu_generic_log_enum id_0;
} hsu_dtd_log_type;

typedef struct
{
  uint64 timetick;
  void* mem_loc;
  uint32 size;
  rex_tcb_type rex_tcb;
  hsu_generic_log_enum id_0;
} hsu_mem_log_type;

typedef struct
{
  uint64 timetick;
  hsu_timer_type *timer_ptr;
  uint32 time_diff_ms;
} hsu_timer_log_type;

typedef struct
{
  void* addr;
  void* reg_val;
} hsu_reg_dump_log_type;

typedef struct
{
  uint32 core_idx; /* logical starting with 0 */
  uint32 total_cnt;
  hsu_event_log_enum id_0;
  uint32 log_depth_index;
  uint32 last_event_timetick;
  uint64 timetick[HSU_EVENT_LOG_DEPTH];
} hsu_event_log_type;

typedef struct
{
  uint64 timetick;
  void* addr;
  void* reg_val;
} hsu_reg_log_type;

typedef struct
{
  uint64 timetick;
  hsu_generic_log_enum id_0;
  hsu_generic_log_enum id_1;
} hsu_func_log_type;


//==============================================================================
// HSU TRACE INFORMATION
//==============================================================================
#ifdef FEATURE_HS_USB_TRACE
typedef enum
{
  BUILD_SINGLE_TD__TRC = 1,
  BUILD_SINGLE_ETD__TRC,
  INIT_ENDPOINTS__TRC,
  CORE_INIT__TRC,
  CORE_REQUEST_ALLOC_EX_JDMA,
  HSU_AL_ECM_SETUP_READ__TRC,
  HSU_AL_ECM_WRITE__TRC,
  HSU_AL_SER_BASE_SETUP_READ__TRC,
  AL_SER_BASE_TX_WRITE__TRC,
  ACM_HANDLE_REQUEST__TRC,
  ECM_HANDLE_REQUEST__TRC,
  CDC_HANDLE_ENCAPSULATED_COMMAND__REDUN_RES_AVAIL__TRC,
  CDC_RESEND_RESPONSE_AVAILABLE__TRC,
  CDC_SEND_ENCAP_RESPONSE_RES_AVAIL__TRC,
  SNPS_DCD_INIT_EVENT_BUFFER__TRC,
  SNPS_DCD_INIT_EP_STREAMS__TRC,
  SNPS_DCD_ENABLE_EP0__TRC,
  
} hsu_trace_msg_type;

typedef struct
{
  uint8                     ep;
  hsu_trace_msg_type        msg1;
  hsu_trace_msg_type        msg2;
  hsu_iface_index_enum_type iface;
  uint8                     inf;
} hsu_trace_info;

void hsu_trace_ep_set(uint8 ep);
void hsu_trace_ep_clear(void);

void hsu_trace_msg1_set(hsu_trace_msg_type msg1);
void hsu_trace_msg1_clear(void);

void hsu_trace_msg2_set(hsu_trace_msg_type msg2);
void hsu_trace_msg2_clear(void);

void hsu_trace_iface_set(hsu_iface_index_enum_type iface);
void hsu_trace_iface_clear(void);

void hsu_trace_inf_set(uint8 inf);
void hsu_trace_inf_clear(void);

void hsu_trace_copy(hsu_trace_info *trace_info_ptr);

#else  /* FEATURE_HS_USB_TRACE */

#define hsu_trace_ep_set(a)
#define hsu_trace_ep_clear()

#define hsu_trace_msg1_set(a)
#define hsu_trace_msg1_clear()

#define hsu_trace_msg2_set(a)
#define hsu_trace_msg2_clear()

#define hsu_trace_iface_set(a)
#define hsu_trace_iface_clear()

#define hsu_trace_inf_set(a)
#define hsu_trace_inf_clear()

#define hsu_trace_copy(a)

#endif /* FEATURE_HS_USB_TRACE */
//==============================================================================
// End of HSU TRACE INFORMATION
//==============================================================================


void hsu_log_init(void);
void hsu_log(uint32 id_0, uint32 offset_0, uint32 id_1, uint32 offset_1, uint32 param_0);
void hsu_dun_log(uint32 id_0, void* buff_ptr, uint32 size);
void hsu_perf_log(uint32 id_0, uint32 param_1);
void hsu_snps_ctrl_log(uint32 id_0, uint32 param_0, uint32 param_1);
void hsu_bus_log(uint32 id_0, uint32 offset_0, uint32 id_1, uint32 offset_1, uint32 param_0);
void hsu_data_log(uint32 id_0, uint32 offset_0, uint32 id_1, uint32 offset_1, uint32 param_0);
void hsu_qmi_register_iface_log(uint8 rmnet_interface, uint8 intr_in_ep, uint8 bulk_out_ep, uint8 bulk_in_ep);
void hsu_qmi_log(uint32 id_0, uint8 rmnet_interface, uint32 param_0);
void hsu_qmi_data_log(uint8 rmnet_interface, void *data, uint8 size);
void hsu_ser4_log(uint32 id_0, uint32);
void hsu_ser4_data_log(void *data);
void hsu_vddmin_log(uint32 id_0, uint32 param_0);
void hsu_dbg_e_log(void *data, uint16 buf_size);
void hsu_dbg_e_get_client_buffer_log(void **client_buf_ptr);
void hsu_ep0_log(uint32 id_0, uint8 rmnet_interface, uint8 param_0);
#ifdef FEATURE_HS_USB_DEBUG_JTASK_SCHEDULE
void hsu_task_schedule_log(uint32 id_0, int32 prev_count);
#else /* FEATURE_HS_USB_DEBUG_JTASK_SCHEDULE */
  #define hsu_task_schedule_log(a, b)
#endif /* ~FEATURE_HS_USB_DEBUG_JTASK_SCHEDULE */
#ifdef FEATURE_HS_USB_DEBUG_DTD
void hsu_dtd_log(uint32 id_0, void* ep, void* dtd);
#else /* ~FEATURE_HS_USB_DEBUG_DTD */
  #define hsu_dtd_log(a, b, c)
#endif /* ~FEATURE_HS_USB_DEBUG_DTD */
#ifdef FEATURE_HS_USB_DEBUG_MEM_ALLOC
void hsu_mem_log(uint32 id_0, void* mem_loc, uint32 size);
#else /* ~FEATURE_HS_USB_DEBUG_MEM_ALLOC */
  #define hsu_mem_log(a, b, c)
#endif /* ~FEATURE_HS_USB_DEBUG_MEM_ALLOC */
void hsu_timer_log(hsu_timer_type *timer_ptr);
void hsu_reg_dump_log(uint32 addr, uint32 reg_val);
void hsu_reg_log(uint32 addr, uint32 reg_val);
void hsu_stop_reg_log(void);
void hsu_func_log(uint32 id_0, uint32 id_1);
void hsu_stop_func_log(void);

/* core_id is zero based and uses logical core numbers */
/* HS_USB_CORE_INDEX */
void hsu_event_log(hsu_event_log_enum id_0, uint32 core_id);
uint32 hsu_get_event_total_cnt(hsu_event_log_enum id_0, uint32 core_id);

/* Debug Timer */
void hsu_log_dbg_timer_1_start(timetick_type);
void hsu_log_dbg_timer_2_start(timetick_type);
void hsu_log_dbg_timer_1_cancel(void);
void hsu_log_dbg_timer_2_cancel(void);

void hsusb_retreive_circular_buffer(hsu_generic_log_type *var,int count,uint8 type);
void hsu_vddmin_log_print_f3(void);
void hsu_usb_core_info_log_print_f3(void);
void hsu_print_dun_log(void);





/*******************************/
/*******************************/
/***   ULOG_IMPLEMNTATION*******/
/*******************************/
/*******************************/

//This ENUM need to match 1-1 with hsu_ulog_ctx in hsu_log.c
typedef enum
{
  QMI0_LOG =0,
  QMI1_LOG,
  QMI2_LOG,
  QMI3_LOG,
  QMI4_LOG,
  QMI5_LOG,
  QMI6_LOG,
  QMI7_LOG,  
  QMI8_LOG,
  QMI9_LOG,  
  QMI10_LOG,
  QMI11_LOG,
  QMI12_LOG,
  QMI13_LOG,
  QMI14_LOG,
  QMI15_LOG,
  //make sure to add the list at the bottom.
  BAM_LOG, 
  BUS_LOG,
  DATA_LOG,
  SNPS_CTRL_LOG,
  SNPS_LOG,
  SER4_LOG,
  REG_LOG,
  AUDIO_LOG,
  DBG_E_LOG,
  ENG_LOG,
  HSU_LOG_TYPE_SIZE
}hsu_ulog_log_type_enum;


typedef struct 
{
  ULogHandle handle;
  uint32     buf_size;
  char*      buf_name; //the name appear on qxdm_ulog_tag_name
} hsu_ulog_ctx_type;


typedef enum{
  NO_MSG,     //Don't Send msg to diag
  LOW_MSG,    //send msg to diag as low
  MED_MSG,    //send msg to diag as med
  HIGH_MSG,   //send msg to diag as high
  ERROR_MSG,  //send msg to diag as error
  FATAL_MSG   //send msg to diag as fatal
} qxdm_level_enum;

typedef enum
{
  /*==============================================================================
  **
  ** HSUSB BUS NOTIFICATIONS
  **
  *=============================================================================*/
  /* ++HSU BUS NOTIFY      */
  /* HSU_BUS_NOTIFY_OFFSET */
  NOTIFY_DEVICE_CONNECT_ULOG = 1,
  NOTIFY_DEVICE_DISCONNECT_ULOG,
  NOTIFY_DEVICE_SUSPEND_ULOG,
  NOTIFY_DEVICE_RESUME_ULOG,
  NOTIFY_DEVICE_RESUME_COMPLETED_ULOG,
  NOTIFY_DEVICE_REMOTE_WAKEUP_ULOG,
  NOTIFY_DEVICE_CONFIGURED_ULOG,
  NOTIFY_DEVICE_UNCONFIGURED_ULOG,
  NOTIFY_DEVICE_RESET_ULOG,
  NOTIFY_DEVICE_SPEED_CHANGE_ULOG,
  /* --HSU BUS NOTIFY */

  /* +++ EVENTS */
  HSU_BAM_SM_NIL_EVT_ULOG, /* required as event definition starts with 1 */

  /* HSU_AP_SIDEBAND_SIG */
  HSU_HOST_READY_RISE_EVT_ULOG,
  HSU_HOST_READY_FALL_EVT_ULOG,
  
  /* HSU_USB_BUS_SIG */
  HSU_BUS_SUSPEND_EVT_ULOG,
  HSU_BUS_RESUME_EVT_ULOG,
  HSU_BUS_RESET_EVT_ULOG,
  HSU_BUS_CONFIGURED_EVT_ULOG,

  /* HSU_IPA_SIG */
  HSU_IPA_SUSPEND_COMPLETE_IND_EVT_ULOG,
  HSU_IPA_DATA_ACTIVITY_EVT_ULOG,
  
  /* HSU_FRAMEWORK_SIG */
  HSU_TIMER_EVT_ULOG,
  /* --- EVENTS */

  /* +++ STATES */
  // Must update hsu_generic_log_enum, hsu_event_log_enum, hsu_bam_sm_state_enum (for both BAM and NO ECM BAM state machines),
  // HSU_ULOG_ENUM_STR, hsu_ulog_usb_enum. 
  HSU_BAM_SM_NIL_STATE_ULOG, /* required as state definition starts with 1 */

  FLOW_ENABLED_STATE_ULOG,
  FLOW_DISABLING_FROM_FORCE_SHUTDOWN_ULOG,
  FLOW_DISABLED_FROM_FORCE_SHUTDOWN_ULOG,

  DATA_ACTIVITY_WHILE_IN_FORCE_SHUTDOWN_ULOG,
  ENUMERATION_WITH_AP_ULOG,

  FLOW_DISABLING_FROM_SUSPEND_ULOG,
  FLOW_DISABLED_FROM_SUSPEND_ULOG,
  DATA_ACTIVITY_WHILE_SUSPENDED_ULOG,
  BOOTUP_FLOW_DISABLED_ULOG,

  /* --- STATES */


  /* HSU_SPEED_OFFSET */
  SPEED_LOW_ULOG,
  SPEED_FULL_ULOG,
  SPEED_HIGH_ULOG,
  SPEED_SUPER_ULOG,
  SPEED_UNKNOWN_ULOG,


  /*==============================================================================
  **
  ** USB Interface Offset
  **
  *=============================================================================*/ 
  
  /* HSU_IFACE_OFFSET */
  NO_HSU_IFACE_ULOG,
  
  MS_HSU_IFACE_ULOG,
    
  DIAG_HSU_IFACE_ULOG,
  NMEA_HSU_IFACE_ULOG,
  SER3_HSU_IFACE_ULOG,
  SER4_HSU_IFACE_ULOG,
  SER5_HSU_IFACE_ULOG,
  SER6_HSU_IFACE_ULOG,
  DCI_HSU_IFACE_ULOG,
  QDSS_HSU_IFACE_ULOG,
  
  MDM_HSU_IFACE_ULOG,
  CSVT_HSU_IFACE_ULOG,
  
  NET1_HSU_IFACE_ULOG,
  NET2_HSU_IFACE_ULOG,
  NET3_HSU_IFACE_ULOG,
  NET4_HSU_IFACE_ULOG,
  NET5_HSU_IFACE_ULOG,
  NET6_HSU_IFACE_ULOG,
  NET7_HSU_IFACE_ULOG,
  NET8_HSU_IFACE_ULOG,
  
  MBIM_HSU_IFACE_ULOG,
  GNSS_HSU_IFACE_ULOG,
  IPCR_HSU_IFACE_ULOG,
  
  AUDIO_HSU_IFACE_ULOG,
  NUM_OF_HSU_IFACE_ULOG,
  

  /*==============================================================================
  **
  ** CLKMGR LOG
  **
  *=============================================================================*/   
  HSU_CLKMGR__CLK_OFF_ULOG,
  HSU_CLKMGR__CLK_ON_ULOG,

  HSU_CLKMGR__NPA__CLK_OFF_ULOG,
  HSU_CLKMGR__NPA__CLK_ON_ULOG,

  /* HSU_CORE_OFFSET */
  USB3_SNPS_CORE_ULOG,     //< -- USB3.0 core.
  UNKNOWN_CORE_ULOG,       //< -- Uknown, Number of core types.

  // HSU_PWR_EVNT_OFFSET 
  PWR_EVNT_SW_ULOG,
  PWR_EVNT_PHY_L2_ULOG,
  PWR_EVNT_PHY_P3_ULOG,
  QMP_PHY_LFPS_IRQ_ULOG,
  QUSB2_PHY_IRQ_ULOG,
  GENERIC_WAKEUP_EVNT_ULOG,


  /* Chapter 9 CMD's */
  HSU_CHP9_REQ_GET_STATUS_ULOG,
  HSU_CHP9_REQ_CLEAR_FEATURE_ULOG,
  HSU_DUMMY_1_ULOG,
  HSU_CHP9_REQ_SET_FEATURE_ULOG,
  HSU_DUMMY_2_ULOG,
  HSU_CHP9_REQ_SET_ADDRESS_ULOG,
  HSU_CHP9_REQ_GET_DESCRIPTOR_ULOG,
  HSU_CHP9_REQ_SET_DESCRIPTOR_ULOG,
  HSU_CHP9_REQ_GET_CONFIGURATION_ULOG,
  HSU_CHP9_REQ_SET_CONFIGURATION_ULOG,
  HSU_CHP9_REQ_GET_INTERFACE_ULOG,
  HSU_CHP9_REQ_SET_INTERFACE_ULOG,
  HSU_CHP9_REQ_SYNCH_FRAME_ULOG,
  HSU_CHP9_OUT_OF_CMD_ULOG,

  
  /* Get Descriptor CMD's */
  /* 0*/ GET_DESCRIPTOR_INVALID_ULOG,
  /* 1*/ GET_DEVICE_DESCRIPTOR_ULOG,
  /* 2*/ GET_CONFIG_DESCRIPTOR_ULOG,
  /* 3*/ GET_STRING_DESCRIPTOR_ULOG,
  /* 4*/ GET_INTERFACE_DESCRIPTOR_ULOG,
  /* 5*/ GET_ENDPOINT_DESCRIPTOR_ULOG,
  /* 6*/ GET_DEVICE_QUALIFIER_DESCRIPTOR_ULOG,
  /* 7*/ GET_OTHER_SPEED_CONFIG_DESCRIPTOR_ULOG,
  /* 8*/ GET_INTERFACE_POWER_DESCRIPTOR_ULOG,
  /* 9*/ GET_OTG_DESCRIPTOR_ULOG,
  /* A*/ GET_DEBUG_DESCRIPTOR_ULOG,
  /* B*/ GET_INTERFACE_ASSOCIATION_DESCRIPTOR_ULOG,
  /* C*/ GET_0x0C_ULOG,
  /* D*/ GET_0x0D_ULOG,
  /* E*/ GET_0x0E_ULOG,
  /* F*/ GET_BOS_DESCRIPTOR_ULOG,
  /*10*/ GET_DEVICE_CAPABILITY_ULOG,
  /*11*/ GET_DEVICE_DESCRIPTOR_OUT_OF_ULOG,

  
  /*==============================================================================
  **
  ** TX/RX CDC Transfer Status
  **
  *=============================================================================*/ 
  TX_CDC_TRANSFER_ERROR_ULOG,
  TX_CDC_TRANSFER_OK_ULOG,        /* HSU_TX_CDC_TRANSFER_OFFSET */
  TX_CDC_TRANSFER_CANCELLED_ULOG,

  RX_CDC_TRANSFER_ERROR_ULOG,
  RX_CDC_TRANSFER_OK_ULOG,        /* HSU_RX_CDC_TRANSFER_OFFSET */
  RX_CDC_TRANSFER_CANCELLED_ULOG,

  
  /*==============================================================================
  **
  ** snps_dcd_ep_event_type
  **
  *=============================================================================*/ 
  SNPS_CTRL_EVT_UNKNOWN_ULOG,
  SNPS_CTRL_EVT_XFER_COMPLETE_ULOG,
  SNPS_CTRL_EVT_XFER_NOTREADY_ULOG,
  SNPS_CTRL_EVT_XFER_ERROR_ULOG,
  SNPS_CTRL_EVT_CORE_REQ_ULOG,
  
  HSU_ULOG_ENUM_SIZE
} hsu_ulog_usb_enum;


/* Example of each API
HSU_ULOG  (NO_MSG, BAM_LOG,   "ulog_with0p");
HSU_ULOG_1(LOW_MSG, BAM_LOG,  "ulog_with1p, para1 %u", counter*2);
HSU_ULOG_2(MED_MSG, BAM_LOG,  "ulog_with2p, para1 %u, para2 %u", counter*4, counter*8);
HSU_ULOG_3(HIGH_MSG, BAM_LOG, "ulog_with3p, para1 %u, para2 %u, para3 %u", counter*16, counter*32, counter*64);

HSU_ULOG_ENUM  (NO_MSG, BAM_LOG,   "ulog_enum1_with0p", HSU_BAM_SM__EVENT_OFFSET2, 0);
HSU_ULOG_ENUM_1(HIGH_MSG, BAM_LOG, "ulog_enum1_with1p, count1 %u", HSU_BAM_SM__STATE_OFFSET2, 1, counter*2);
HSU_ULOG_ENUM_2(LOW_MSG, BAM_LOG,  "ulog_enum1_with2p, count1 %u, count2 %u", HSU_BAM_SM__EVENT_OFFSET2, 2, counter*4, counter*8);
HSU_ULOG_ENUM_3(MED_MSG, BAM_LOG,  "ulog_enum1_with3p, count1 %u, count2 %u", HSU_BAM_SM__STATE_OFFSET2, 3, counter*16, counter*32, counter*64);


HSU_ULOG_ENUM2  (NO_MSG, BAM_LOG, "ulog_enum2_with0p", HSU_BAM_SM__STATE_OFFSET2, 1, HSU_BAM_SM__EVENT_OFFSET2, 2);
HSU_ULOG_ENUM2_1(MED_MSG, BAM_LOG, "ulog_enum2_with1p, firstval %u", HSU_BAM_SM__STATE_OFFSET2, 3, HSU_BAM_SM__EVENT_OFFSET2, 4, counter*2);
HSU_ULOG_ENUM2_2(HIGH_MSG, BAM_LOG, "ulog_enum2_with2p first %u, second %u", HSU_BAM_SM__STATE_OFFSET2, 1, HSU_BAM_SM__EVENT_OFFSET2, 2, counter*4, counter*8);
HSU_ULOG_ENUM2_3(LOW_MSG, BAM_LOG, "ulog_enum2_with3p first %u, second %u, third %u", HSU_BAM_SM__STATE_OFFSET2, 3, HSU_BAM_SM__EVENT_OFFSET2, 4, counter*16, counter*32, counter*64);
*/


#define DATA_RVS(data, index) \
  ((((unsigned char *)data)[index+0] << 24) | \
                                    (((unsigned char *)data)[index+1] << 16) | \
                                    (((unsigned char *)data)[index+2] << 8) | \
                                    ((unsigned char *)data)[index+3])

#define DATA_TO_PARA_4(data_ptr) \
  DATA_RVS(data_ptr, 0), DATA_RVS(data_ptr, 4), DATA_RVS(data_ptr, 8), DATA_RVS(data_ptr, 12)
 
#define DATA_TO_PARA_5(data_ptr) \
  DATA_RVS(data_ptr, 0), DATA_RVS(data_ptr, 4), DATA_RVS(data_ptr, 8), DATA_RVS(data_ptr, 12), DATA_RVS(data_ptr, 16)

#define HSU_ULOG_DATA_4(log_type, data_ptr, size) \
  hsu_ulog_5(log_type, "DATA size %u, 0x%08X, 0x%08X, 0x%08X, 0x%08X", size, DATA_TO_PARA_4(data_ptr))

#define HSU_ULOG_DATA_5(log_type, data_ptr, size) \
  hsu_ulog_6(log_type, "DATA size %u, 0x%08X, 0x%08X, 0x%08X, 0x%08X, 0x%08X", size, DATA_TO_PARA_5(data_ptr))


#define hsu_diag_log(diag_msg_level, fmt) \
  if (diag_msg_level == LOW_MSG) \
    HSU_MSG_LOW(fmt); \
  else if (diag_msg_level == MED_MSG) \
    HSU_MSG_MED(fmt); \
  else if (diag_msg_level == HIGH_MSG) \
    HSU_MSG_HIGH(fmt); \
  else if(diag_msg_level == ERROR_MSG) \
    HSU_DIAG_MSG_ERROR(fmt); \
  else if(diag_msg_level == FATAL_MSG) \
    HSU_ERR_FATAL(fmt, 0, 0, 0)

#define hsu_diag_log_1(diag_msg_level, fmt, value1) \
  if(diag_msg_level == LOW_MSG) \
    HSU_MSG_LOW_1(fmt, value1); \
  else if(diag_msg_level == MED_MSG) \
    HSU_MSG_MED_1(fmt, value1); \
  else if(diag_msg_level == HIGH_MSG) \
    HSU_MSG_HIGH_1(fmt, value1); \
  else if(diag_msg_level == ERROR_MSG) \
    HSU_DIAG_MSG_ERROR_1(fmt, value1); \
  else if(diag_msg_level == FATAL_MSG) \
    HSU_ERR_FATAL(fmt, value1, 0, 0)

#define hsu_diag_log_2(diag_msg_level, fmt, value1, value2) \
  if(diag_msg_level == LOW_MSG) \
    HSU_MSG_LOW_2(fmt, value1, value2); \
  else if(diag_msg_level == MED_MSG) \
    HSU_MSG_MED_2(fmt, value1, value2); \
  else if(diag_msg_level == HIGH_MSG) \
    HSU_MSG_HIGH_2(fmt, value1, value2); \
  else if(diag_msg_level == ERROR_MSG) \
    HSU_DIAG_MSG_ERROR_2(fmt, value1, value2); \
  else if(diag_msg_level == FATAL_MSG) \
    HSU_ERR_FATAL(fmt, value1, value2, 0)

#define hsu_diag_log_3(diag_msg_level, fmt, value1, value2, value3) \
  if(diag_msg_level == LOW_MSG) \
    HSU_MSG_LOW_3(fmt, value1, value2, value3); \
  else if(diag_msg_level == MED_MSG) \
    HSU_MSG_MED_3(fmt, value1, value2, value3); \
  else if(diag_msg_level == HIGH_MSG) \
    HSU_MSG_HIGH_3(fmt, value1, value2, value3); \
  else if(diag_msg_level == ERROR_MSG) \
    HSU_DIAG_MSG_ERROR_3(fmt, value1, value2, value3); \
  else if(diag_msg_level == FATAL_MSG) \
    HSU_ERR_FATAL(fmt, value1, value2, value3)

#define HSU_ULOG_FUNC(log_type) \
  hsu_ulog(log_type, (char*)__func__)

#define HSU_ULOG_FL(log_type) \
  hsu_ulog_str_1(log_type, "%s, line# %u", (char*)__func__,  (uint32)__LINE__)


//log with only fmt and parameter
#define HSU_ULOG(diag_msg_level, log_type, fmt) \
  hsu_ulog_str(log_type, "%s, " fmt, (char*)__func__); \
  hsu_diag_log(diag_msg_level, fmt)
  //hsu_diag_log
#define HSU_ULOG_1(diag_msg_level, log_type, fmt, value1) \
  hsu_ulog_str_1(log_type, "%s, " fmt, (char*)__func__, value1); \
  hsu_diag_log_1(diag_msg_level, fmt, value1)

#define HSU_ULOG_2(diag_msg_level, log_type, fmt, value1, value2) \
  hsu_ulog_str_2(log_type, "%s, " fmt, (char*)__func__, value1, value2); \
  hsu_diag_log_2(diag_msg_level, fmt, value1, value2)


#define HSU_ULOG_3(diag_msg_level, log_type, fmt, value1, value2, value3) \
  hsu_ulog_str_3(log_type, "%s, " fmt, (char*)__func__, value1, value2, value3); \
  hsu_diag_log_3(diag_msg_level, fmt, value1, value2, value3)


//ONLY PRINT TO ULOG NOT TO DIAG, ignore the diag_msg_level.
#define HSU_ULOG_4(diag_msg_level, log_type, fmt, value1, value2, value3, value4) \
  hsu_ulog_str_4(log_type, "%s, " fmt, (char*)__func__, value1, value2, value3, value4); \
//  hsu_diag_log_3(diag_msg_level, fmt, value1, value2, value3) //the diag part is ignore, since we dont have the api


#define HSU_ULOG_5(diag_msg_level, log_type, fmt, value1, value2, value3, value4, value5) \
  hsu_ulog_str_5(log_type, "%s, " fmt, (char*)__func__, value1, value2, value3, value4, value5)
//  hsu_diag_log_3(diag_msg_level, fmt, value1, value2, value3)

#define HSU_ULOG_6(diag_msg_level, log_type, fmt, value1, value2, value3, value4, value5, value6) \
  hsu_ulog_str_6(log_type, "%s, " fmt, (char*)__func__, value1, value2, value3, value4, value5, value6)
//  hsu_diag_log_3(diag_msg_level, fmt, value1, value2, value3)


//log with only fmt and parameter
#define HSU_ULOG_NOFN(diag_msg_level, log_type, fmt) \
  hsu_ulog(log_type, fmt); \
  hsu_diag_log(diag_msg_level, fmt)
  //hsu_diag_log
#define HSU_ULOG_NOFN_1(diag_msg_level, log_type, fmt, value1) \
  hsu_ulog_1(log_type, fmt, value1); \
  hsu_diag_log_1(diag_msg_level, fmt, value1)

#define HSU_ULOG_NOFN_2(diag_msg_level, log_type, fmt, value1, value2) \
  hsu_ulog_2(log_type, fmt, value1, value2); \
  hsu_diag_log_2(diag_msg_level, fmt, value1, value2)


#define HSU_ULOG_NOFN_3(diag_msg_level, log_type, fmt, value1, value2, value3) \
  hsu_ulog_3(log_type, fmt, value1, value2, value3); \
  hsu_diag_log_3(diag_msg_level, fmt, value1, value2, value3)


//ONLY PRINT TO ULOG NOT TO DIAG, ignore the diag_msg_level.
#define HSU_ULOG_NOFN_4(diag_msg_level, log_type, fmt, value1, value2, value3, value4) \
  hsu_ulog_4(log_type, fmt, value1, value2, value3, value4) 
//  hsu_diag_log_3(diag_msg_level, fmt, value1, value2, value3) //the diag part is ignore, since we dont have the api


#define HSU_ULOG_NOFN_5(diag_msg_level, log_type, fmt, value1, value2, value3, value4, value5) \
  hsu_ulog_5(log_type, fmt, value1, value2, value3, value4, value5)
//  hsu_diag_log_3(diag_msg_level, fmt, value1, value2, value3)

#define HSU_ULOG_NOFN_6(diag_msg_level, log_type, fmt, value1, value2, value3, value4, value5, value6) \
  hsu_ulog_6(log_type, fmt, value1, value2, value3, value4, value5, value6)
//  hsu_diag_log_3(diag_msg_level, fmt, value1, value2, value3)


#ifdef FEATURE_HS_USB_DAIG_ENUM_STR 
//printing enum_value in the string form in diag. No change for ulog side.

#define HSU_ULOG_STR(diag_msg_level, log_type, fmt, str_msg) \
  hsu_ulog_str(log_type, fmt, str_msg); \
  HSU_SPRINTF_3(diag_msg_level, fmt, str_msg, 0, 0)

#define HSU_ULOG_STR_1(diag_msg_level, log_type, fmt, str_msg, value1) \
  hsu_ulog_str_1(log_type, fmt, str_msg, value); \
  HSU_SPRINTF_3(diag_msg_level, fmt, str_msg, value, 0)

#define HSU_ULOG_STR_2(diag_msg_level, log_type, fmt, str_msg, value1, value2) \
  hsu_ulog_str_2(log_type, fmt, str_msg, value1, value2); \
  HSU_SPRINTF_3(diag_msg_level, fmt, str_msg, value1, value2)
  
#define HSU_ULOG_ENUM(diag_msg_level, log_type, fmt, enum_id, enum_offset) \
  hsu_ulog_enum(log_type, "%s, " fmt, enum_id, enum_offset); \
  hsu_diag_enum_str(enum_id, enum_offset); \
  hsu_diag_log(HIGH_MSG, fmt)
  
#define HSU_ULOG_ENUM_1(diag_msg_level, log_type, fmt, enum_id, enum_offset, value1) \
  hsu_ulog_enum_1(log_type, "%s, " fmt, enum_id, enum_offset, value1); \
  hsu_diag_enum_str(enum_id, enum_offset); \
  hsu_diag_log_1(HIGH_MSG, fmt, value1)

#define HSU_ULOG_ENUM_2(diag_msg_level, log_type, fmt, enum_id, enum_offset, value1, value2) \
  hsu_ulog_enum_2(log_type, "%s, " fmt, enum_id, enum_offset, value1, value2); \
  hsu_diag_enum_str(enum_id, enum_offset); \
  hsu_diag_log_2(HIGH_MSG, fmt, value1, value2)


#define HSU_ULOG_ENUM_3(diag_msg_level, log_type, fmt, enum_id, enum_offset, value1, value2, value3) \
  hsu_ulog_enum_3(log_type, "%s, " fmt, enum_id, enum_offset, value1, value2, value3); \
  hsu_diag_enum_str(enum_id, enum_offset); \
  hsu_diag_log_3(HIGH_MSG, fmt, value1, value2, value3)
  

//log with state + sequence number.
#define HSU_ULOG_ENUM2(diag_msg_level, log_type, fmt, enum_id1, enum_offset1, enum_id2, enum_offset2) \
  hsu_ulog_enum2(log_type, "%s, %s, " fmt, enum_id1, enum_offset1, enum_id2, enum_offset2); \
  hsu_diag_enum2_str(enum_id1, enum_offset1, enum_id2, enum_offset2); \
  hsu_diag_log(HIGH_MSG, fmt)

  
#define HSU_ULOG_ENUM2_1(diag_msg_level, log_type, fmt, enum_id1, enum_offset1, enum_id2, enum_offset2, value1) \
  hsu_ulog_enum2_1(log_type, "%s, %s, " fmt, enum_id1, enum_offset1, enum_id2, enum_offset2, value1); \
  hsu_diag_enum2_str(enum_id1, enum_offset1, enum_id2, enum_offset2); \
  hsu_diag_log_1(HIGH_MSG, fmt, value1)


#define HSU_ULOG_ENUM2_2(diag_msg_level, log_type, fmt, enum_id1, enum_offset1, enum_id2, enum_offset2, value1, value2) \
  hsu_ulog_enum2_2(log_type, "%s, %s, " fmt, enum_id1, enum_offset1, enum_id2, enum_offset2, value1, value2); \
  hsu_diag_enum2_str(enum_id1, enum_offset1, enum_id2, enum_offset2); \
  hsu_diag_log_2(HIGH_MSG, fmt, value1, value2)


#define HSU_ULOG_ENUM2_3(diag_msg_level, log_type, fmt, enum_id1, enum_offset1, enum_id2, enum_offset2, value1, value2, value3) \
  hsu_ulog_enum2_3(log_type, "%s, %s, " fmt, enum_id1, enum_offset1, enum_id2, enum_offset2, value1, value2, value3); \
  hsu_diag_enum2_str(enum_id1, enum_offset1, enum_id2, enum_offset2); \
  hsu_diag_log_3(HIGH_MSG, fmt, value1, value2, value3)

#else

#define HSU_ULOG_STR(diag_msg_level, log_type, fmt, str_msg) \
  hsu_ulog_str(log_type, fmt, str_msg); \
  hsu_diag_log(diag_msg_level, fmt)        //the diag part igrnore the str_msg for better performance (no sprintf.

#define HSU_ULOG_STR_1(diag_msg_level, log_type, fmt, str_msg, value1) \
  hsu_ulog_str_1(log_type, fmt, str_msg, value1); \
  hsu_diag_log(diag_msg_level, fmt)        //the diag part igrnore the str_msg for better performance (no sprintf.

#define HSU_ULOG_STR_2(diag_msg_level, log_type, fmt, str_msg, value1, value2) \
  hsu_ulog_str_2(log_type, fmt, str_msg, value1, value2); \
  hsu_diag_log(diag_msg_level, fmt)        //the diag part igrnore the str_msg for better performance (no sprintf.

//log with only 1 ENUM  
#define HSU_ULOG_ENUM(diag_msg_level, log_type, fmt, enum_id, enum_offset) \
  hsu_ulog_enum(log_type, "%s, " fmt, enum_id, enum_offset); \
  hsu_diag_log_1(diag_msg_level, "enum %u, " fmt, ((enum_id) + (enum_offset)))
  
#define HSU_ULOG_ENUM_1(diag_msg_level, log_type, fmt, enum_id, enum_offset, value1) \
  hsu_ulog_enum_1(log_type, "%s, " fmt, enum_id, enum_offset, value1); \
  hsu_diag_log_2(diag_msg_level, "enum %u, " fmt, ((enum_id) + (enum_offset)), value1)

#define HSU_ULOG_ENUM_2(diag_msg_level, log_type, fmt, enum_id, enum_offset, value1, value2) \
  hsu_ulog_enum_2(log_type, "%s, " fmt, enum_id, enum_offset, value1, value2); \
  hsu_diag_log_3(diag_msg_level, "enum %u, " fmt, ((enum_id) + (enum_offset)), value1, value2)

#define HSU_ULOG_ENUM_3(diag_msg_level, log_type, fmt, enum_id, enum_offset, value1, value2, value3) \
  hsu_ulog_enum_3(log_type, "%s, " fmt, enum_id, enum_offset, value1, value2, value3); \
  hsu_diag_log_1(diag_msg_level, "enum %u, cont", ((enum_id) + (enum_offset))); \
  hsu_diag_log_3(diag_msg_level, fmt, value1, value2, value3)
  

//log with state + sequence number.
#define HSU_ULOG_ENUM2(diag_msg_level, log_type, fmt, enum_id1, enum_offset1, enum_id2, enum_offset2) \
  hsu_ulog_enum2(log_type, "%s, %s " fmt, enum_id1, enum_offset1, enum_id2, enum_offset2); \
  hsu_diag_log_2(diag_msg_level,"enum1 %u, enum2 %u " fmt, ((enum_id1) + (enum_offset1)), ((enum_id2) + (enum_offset2)))
  
#define HSU_ULOG_ENUM2_1(diag_msg_level, log_type, fmt, enum_id1, enum_offset1, enum_id2, enum_offset2, value1) \
  hsu_ulog_enum2_1(log_type, "%s, %s " fmt, enum_id1, enum_offset1, enum_id2, enum_offset2, value1); \
  hsu_diag_log_3(diag_msg_level,"enum1 %u, enum2 %u, " fmt, ((enum_id1) + (enum_offset1)), ((enum_id2) + (enum_offset2)), value1)

#define HSU_ULOG_ENUM2_2(diag_msg_level, log_type, fmt, enum_id1, enum_offset1, enum_id2, enum_offset2, value1, value2) \
  hsu_ulog_enum2_2(log_type, "%s, %s " fmt, enum_id1, enum_offset1, enum_id2, enum_offset2, value1, value2); \
  hsu_diag_log_2(diag_msg_level,"enum1 %u, enum2 %u, cont" fmt, ((enum_id1) + (enum_offset1)), ((enum_id2) + (enum_offset2))); \
  hsu_diag_log_2(diag_msg_level, fmt, value1, value2)

#define HSU_ULOG_ENUM2_3(diag_msg_level, log_type, fmt, enum_id1, enum_offset1, enum_id2, enum_offset2, value1, value2, value3) \
  hsu_ulog_enum2_3(log_type, "%s, %s " fmt, enum_id1, enum_offset1, enum_id2, enum_offset2, value1, value2, value3); \
  hsu_diag_log_2(diag_msg_level,"enum1 %u, enum2 %u, cont", ((enum_id1) + (enum_offset1)), ((enum_id2) + (enum_offset2))); \
  hsu_diag_log_3(diag_msg_level, fmt, value1, value2, value3)

#endif


/* 
Adding new log type
  1. hsu_log.h hsu_ulog_log_type_enum
  2. hsu_log.c  static hsu_ulog_ctx_type hsu_ulog_ctx[HSU_LOG_TYPE_SIZE]
      the order for above two have to match
  3. hsu_log.c  hsu_ulog_init

Adding new ENUM
  1. hsu_log.h hsu_ulog_usb_enum  //need to have space holder even if the enum is define other place.
  2. hsu_log.c HSU_ULOG_ENUM_STR
    the order for both need to match
*/

void hsu_ulog_init(void);

void hsu_ulog_type_init(hsu_ulog_log_type_enum log_type);

//=============================================================================
// PLEASE USE the MARCO function for better formating
//=============================================================================

void hsu_ulog(hsu_ulog_log_type_enum log_type, const char* formatStr);

void hsu_ulog_1 (hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 value1);

void hsu_ulog_2 (hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 value1, uint32 value2);

void hsu_ulog_3 (hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 value1, uint32 value2, uint32 value3);

void hsu_ulog_4 (hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 value1, uint32 value2, uint32 value3, uint32 value4);

void hsu_ulog_5 (hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 value1, uint32 value2, uint32 value3, uint32 value4, uint32 value5);

void hsu_ulog_6 (hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 value1, uint32 value2, uint32 value3, uint32 value4, uint32 value5, uint32 value6);


void hsu_ulog_str(hsu_ulog_log_type_enum log_type, const char* formatStr, const char* stringMsg);

void hsu_ulog_str_1(hsu_ulog_log_type_enum log_type, const char* formatStr, const char* stringMsg, uint32 value1);

void hsu_ulog_str_2(hsu_ulog_log_type_enum log_type, const char* formatStr, const char* stringMsg, uint32 value1, uint32 value2);

void hsu_ulog_str_3(hsu_ulog_log_type_enum log_type, const char* formatStr, const char* stringMsg, uint32 value1, uint32 value2, uint32 value3);

void hsu_ulog_str_4(hsu_ulog_log_type_enum log_type, const char* formatStr, const char* stringMsg, uint32 value1, uint32 value2, uint32 value3, uint32 value4);

void hsu_ulog_str_5(hsu_ulog_log_type_enum log_type, const char* formatStr, const char* stringMsg, uint32 value1, uint32 value2, uint32 value3, uint32 value4, uint32 value5);

void hsu_ulog_enum  (hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 enum_id, uint32 enum_offset);

void hsu_ulog_enum_1(hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 enum_id, uint32 enum_offset, uint32 value1);

void hsu_ulog_enum_2(hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 enum_id, uint32 enum_offset, uint32 value1, uint32 value2);

void hsu_ulog_enum_3(hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 enum_id, uint32 enum_offset, uint32 value1, uint32 value2, uint32 value3);


void hsu_ulog_enum2 (hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 enum_id1, uint32 enum_offset1, uint32 enum_id2, uint32 enum_offset2);

void hsu_ulog_enum2_1(hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 enum_id1, uint32 enum_offset1, uint32 enum_id2, uint32 enum_offset2, uint32 value1);

void hsu_ulog_enum2_2(hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 enum_id1, uint32 enum_offset1, uint32 enum_id2, uint32 enum_offset2, uint32 value1, uint32 value2);

void hsu_ulog_enum2_3(hsu_ulog_log_type_enum log_type, const char* formatStr, uint32 enum_id1, uint32 enum_offset1, uint32 enum_id2, uint32 enum_offset2, uint32 value1, uint32 value2, uint32 value3);


void hsu_diag_enum_str(uint32 enum_id1, uint32 enum_offset1);

void hsu_diag_enum2_str(uint32 enum_id1, uint32 enum_offset1, uint32 enum_id2, uint32 enum_offset2);


//void hsu_diag_log_sprintf(char* fmt, uint32 value1, uint32 value2, uint32 value3);


#endif /* _HSU_LOG__H_ */
