#	Title: Sconscript

#	License: License
#	Copyright 2010 Qualcomm Inc

#	Description: General Description
#	Sconscript for CoreBSP Products CMM scripts

#	Team: Functional Area
#	CoreBSP Products 8960

#	Target: Target
#	MSM8960

#	Author: Author
#  $Author: rvennam $

#	Location: Perforce Revision
#  $Header: //source/qcom/qct/core/products/labtools/legacy/8960/Modem/core/products/build/SConscript $

#	Edits: Edits
#	Created for MSM8960 on 3/8/2011
# ------------------------------------------------------------------------------------------

import datetime
import time
# Class for a CMM script to be included in the dialog
class CMMScript:
	def __init__(self, scriptname, altname, path, team, numargs):
		self.scriptname = scriptname
		self.altname = altname
		self.path = path
		self.team = team
		self.numargs = numargs
		self.argmapping = {}
		
# T32 dialog file class
class T32Dialog:
	def __init__(self):
		self.height = 0
		self.width = 0
		self.title = "Nothing"
		self.textheight = 0
		self.textwidth = 0
		self.editheight = 0
		self.editwidth = 0
		self.chooseboxwidth = 0
		self.chooseboxheight = 0

# Function that writes the dialogfile		
def writedialogfile():
	dialogfile = open(T32_Dialog,'w')
	
	# Throw in all the comments for the cmm file
	dialogfile.write('//\t Title: std_dialogauto.dlg')

	dialogfile.write('\n\n//\t License: License')
	dialogfile.write('\n//\t Copyright 2010 Qualcomm Inc ')
	dialogfile.write('\n\n//\t Description: General Description')
	dialogfile.write('\n//\t This T32 dialog presents user with options to collect logs.')
	dialogfile.write('\n\n//\t Input: Inputs')
	dialogfile.write('\n//\t None')
	dialogfile.write('\n\n//\t Output: Outputs')
	dialogfile.write('\n//\t None')
	dialogfile.write('\n\n//\t Usage: Usage')
	dialogfile.write('\n//\t Not meant for standalone usage')
	dialogfile.write('\n\n//\t Team: Functional Area')
	dialogfile.write('\n//\t CoreBSP Products 8660')
	dialogfile.write('\n\n//\t Target: Target')
	dialogfile.write('\n//\t MSM8660')
	dialogfile.write('\n\n//\t Author: Author')
	dialogfile.write('\n//\t $Author: amcheriy $')
	dialogfile.write('\n\n//\t Location: Perforce Revision')
	dialogfile.write('\n//\t $Header: //depot/asic/msm8660/temp_dev/AMSS/products/8660/build/ms/std_buildconfig $')
	dialogfile.write('\n\n//\t Edits: Edits')
	dialogfile.write('\n//\t Autogenerated on '+datetime.datetime.now().strftime("%A %d/%m/%Y %H:%M:%S"))
	dialogfile.write('\n// ---------------------------------------------------------------------------------')
	dialogfile.write("\n \n \n")
	
	dialogfile.write('HEADER \"%s\"' % (window.title))
	dialogfile.write('\n \n')
	dialogfile.write('pos 0. 0. %s. %s.' % (window.width, window.height))
	dialogfile.write('\n')
	dialogfile.write('BOX \"Select Log Type\"')
	dialogfile.write('\n \n')
	# Scan the list
	for i in range(0,len(scripts)):
		# For each script, create an edit box corresponding to the number of the arguments 
		# Position the edit boxes like a 2D matrix
		# Labels created for the edit boxes have the format : EDIT(script number)(argument number) - starting from 0
		for argcount in range(0,int(scripts[i].numargs)):
			dialogfile.write('pos %s. %s %s. %s.' % (str(window.chooseboxwidth + 2 + (window.editwidth + 2) * argcount), i*2 + 2.5 , window.editwidth, window.editheight))
			dialogfile.write('\n')
			dialogfile.write('EDIT%s%s: EDIT \"\" \"\"' % (str(i), str(argcount)))
			dialogfile.write('\n')
	
	dialogfile.write('\n \n')
	for i in range(0,len(scripts)):
		# For each script, create an edit box corresponding to the number of the arguments 
		# Position the edit boxes like a 2D matrix
		# Labels created for the edit boxes have the format : EDIT(script number)(argument number) - starting from 0
		for argcount in range(0,int(scripts[i].numargs)):
			dialogfile.write('pos %s. %s %s. %s.' % (str(window.chooseboxwidth + 2 + (window.editwidth + 2) * argcount), i*2 + 1.5 , window.editwidth, window.editheight))
			dialogfile.write('\n')
			dialogfile.write('TEXT%s%s: TEXT \"%s\"' % (str(i), str(argcount), scripts[i].argmapping[argcount+1]))
			dialogfile.write('\n')
	
	dialogfile.write('\n \n')
	# Create the choosebox		
	dialogfile.write('pos 1. 2. %s. %s.' % (window.chooseboxwidth, window.chooseboxheight))
	dialogfile.write('\n')
	# Scan the list
	for i in range(0,len(scripts)):
		argstring =""
		for argcount in range(0,int(scripts[i].numargs)):
			argstring = argstring + " &arg" + str(argcount)
		dialogfile.write('LOGTYPE.%s: CHOOSEBOX \"%s\"' %(scripts[i].altname.replace(' ',''), scripts[i].altname))
		dialogfile.write('\n')
		dialogfile.write('(&')
		dialogfile.write('\n \t')
		# On selecting an item in the choosebox, you need to pick up the string from the corresponding edit box created above
		for argcount in range(0,int(scripts[i].numargs)):
			dialogfile.write('&arg%s=DIALOG.STRING(EDIT%s%s)' % ( str(argcount), str(i), str(argcount)))
			dialogfile.write('\n \t')
		dialogfile.write('do %s/%s %s' % (scripts[i].path, scripts[i].scriptname, argstring))
		dialogfile.write('\n')
		dialogfile.write(')')
		dialogfile.write('\n')

def writeappsconfigfile():
	# Create the file from scratch every single time
	build_config_file = open(CMM_Build_Config,'w')
	# Throw in all the comments for the cmm file
	build_config_file.write('//\t Title: std_buildconfig')

	build_config_file.write('\n\n//\t License: License')
	build_config_file.write('\n//\t Copyright 2010 Qualcomm Inc ')
	build_config_file.write('\n\n//\t Description: General Description')
	build_config_file.write('\n//\t This script contains build information.')
	build_config_file.write('\n\n//\t Input: Inputs')
	build_config_file.write('\n//\t None')
	build_config_file.write('\n\n//\t Output: Outputs')
	build_config_file.write('\n//\t None')
	build_config_file.write('\n\n//\t Usage: Usage')
	build_config_file.write('\n//\t do std_buildconfig')
	build_config_file.write('\n\n//\t Team: Functional Area')
	build_config_file.write('\n//\t CoreBSP Products 8960')
	build_config_file.write('\n\n//\t Target: Target')
	build_config_file.write('\n//\t MSM8960')
	build_config_file.write('\n\n//\t Author: Author')
	build_config_file.write('\n//\t $Author: rvennam $')
	build_config_file.write('\n\n//\t Location: Perforce Revision')
	build_config_file.write('\n//\t $Header: //depot/asic/msm8960/temp_dev/AMSS/products/8660/build/ms/std_buildconfig $')
	build_config_file.write('\n\n//\t Edits: Edits')
	build_config_file.write('\n//\t Autogenerated on '+datetime.datetime.now().strftime("%A %d/%m/%Y %H:%M:%S"))
	build_config_file.write('\n// ---------------------------------------------------------------------------------')


	build_config_file.write('\n \n \n \n')
	# Declare your GLOBAL variables here
	build_config_file.write('\n GLOBAL &APPS_BUILDID')
	build_config_file.write('\n GLOBAL &APPS_BUILDIDA')
	build_config_file.write('\n GLOBAL &CHIPSET')
	build_config_file.write('\n GLOBAL &APPS_BUILDMSDIR')
	build_config_file.write('\n GLOBAL &APPS_MBNDIR')
	build_config_file.write('\n GLOBAL &APPS_ELFFILE')
	build_config_file.write('\n GLOBAL &APPS_TIMESTAMP') 
	build_config_file.write('\n GLOBAL &BUILDID')
	build_config_file.write('\n GLOBAL &BUILDIDA')
	build_config_file.write('\n GLOBAL &CHIPSET')
	build_config_file.write('\n GLOBAL &BUILDROOT')
	build_config_file.write('\n GLOBAL &COREDIR')
	build_config_file.write('\n GLOBAL &PRODUCTSDIR')
	build_config_file.write('\n GLOBAL &BUILDMSDIR')
	build_config_file.write('\n GLOBAL &MBNDIR')
	build_config_file.write('\n GLOBAL &ELFFILE')
	build_config_file.write('\n GLOBAL &TIMESTAMP')
	build_config_file.write('\n // GLOBAL &BOOTLOADERFLAVOR')
	# Format it well
	build_config_file.write('\n \n')
	build_config_file.write('\n &APPS_BUILDID='+buildid)
	build_config_file.write('\n &APPS_BUILDIDA='+env.Dump('BUILD_ID').replace('\'','\"'))
	build_config_file.write('\n &CHIPSET=\"MDM'+chipset+'\"')
	build_config_file.write('\n &APPS_BUILDMSDIR='+'os.ppd()+'+'\"/../../build/ms\"')
	build_config_file.write('\n &APPS_MBNDIR=\"&BUILDMSDIR\"+'+'\"/bin/&BUILDID\"')
	build_config_file.write('\n &APPS_ELFFILE=\"M'+elfname+'\"')
	build_config_file.write('\n &APPS_TIMESTAMP=\"'+str(int(time.time()+0.5))+'\"')
	build_config_file.write('\n &BUILDID='+buildid)
	build_config_file.write('\n &BUILDIDM='+env.Dump('BUILD_ID').replace('\'','\"'))
	build_config_file.write('\n &CHIPSET=\"MDM'+chipset+'\"')
	build_config_file.write('\n &PRODUCTSDIR='+'os.ppd()')
	build_config_file.write('\n &BUILDROOT='+'os.ppd()+'+'\"/../..\"')
	build_config_file.write('\n &COREDIR='+'os.ppd()+'+'\"/..\"')
	build_config_file.write('\n &BUILDMSDIR='+'os.ppd()+'+'\"/../../build/ms\"')
	build_config_file.write('\n &MBNDIR=\"&BUILDMSDIR\"+'+'\"/bin/&BUILDID\"')
	build_config_file.write('\n &ELFFILE=\"M'+elfname+'\"')
	build_config_file.write('\n &TIMESTAMP=\"'+str(int(time.time()+0.5))+'\"')
	build_config_file.write('\n // &BOOTLOADERFLAVOR=\"'+ bootloaderflavor + '\"')
	# Now be a good sport and end the cmm file
	build_config_file.write('\n \n')
	build_config_file.write('ENDDO')
	build_config_file.close()

def writebootconfigfile():
	# Create the file from scratch every single time
	build_config_file = open(CMM_Build_Config,'w')
	# Throw in all the comments for the cmm file
	build_config_file.write('//\t Title: std_buildconfig')

	build_config_file.write('\n\n//\t License: License')
	build_config_file.write('\n//\t Copyright 2010 Qualcomm Inc ')
	build_config_file.write('\n\n//\t Description: General Description')
	build_config_file.write('\n//\t This script contains build information.')
	build_config_file.write('\n\n//\t Input: Inputs')
	build_config_file.write('\n//\t None')
	build_config_file.write('\n\n//\t Output: Outputs')
	build_config_file.write('\n//\t None')
	build_config_file.write('\n\n//\t Usage: Usage')
	build_config_file.write('\n//\t do std_buildconfig')
	build_config_file.write('\n\n//\t Team: Functional Area')
	build_config_file.write('\n//\t CoreBSP Products 8960')
	build_config_file.write('\n\n//\t Target: Target')
	build_config_file.write('\n//\t MSM8660')
	build_config_file.write('\n\n//\t Author: Author')
	build_config_file.write('\n//\t $Author: rvennam $')
	build_config_file.write('\n\n//\t Location: Perforce Revision')
	build_config_file.write('\n//\t $Header: //depot/asic/msm8960/temp_dev/AMSS/products/8660/build/ms/std_buildconfig $')
	build_config_file.write('\n\n//\t Edits: Edits')
	build_config_file.write('\n//\t Autogenerated on '+datetime.datetime.now().strftime("%A %d/%m/%Y %H:%M:%S"))
	build_config_file.write('\n// ---------------------------------------------------------------------------------')


	build_config_file.write('\n \n \n \n')
	# Declare your GLOBAL variables here
	build_config_file.write('\n GLOBAL &BOOT_BUILDID')
	build_config_file.write('\n GLOBAL &BOOT_BUILDIDM')
	build_config_file.write('\n GLOBAL &BOOT_MBNDIR')
	build_config_file.write('\n GLOBAL &BOOT_TIMESTAMP')
	# Format it well
	build_config_file.write('\n \n')
	build_config_file.write('\n &BOOT_BUILDID='+buildid)
	build_config_file.write('\n &BOOT_BUILDIDM='+env.Dump('BUILD_ID').replace('\'','\"'))
	build_config_file.write('\n &BOOT_MBNDIR=\"&BUILDMSDIR\"+'+'\"/bin/&BUILDID\"')
	build_config_file.write('\n &BOOT_TIMESTAMP=\"'+str(int(time.time()+0.5))+'\"')
	# Now be a good sport and end the cmm file
	build_config_file.write('\n \n')
	build_config_file.write('ENDDO')
	build_config_file.close()

# Technically, the sconscript starts here	
Import('env')
env = env.Clone()


# CMM Source Path
print "COREBSP Products SConscript \n"

CMM_source = env.subst('$COREBSP_ROOT')+'/products'
CMM_Build_Config = CMM_source + '/std_buildconfig.cmm'
T32_Dialog = CMM_source + '/std_dialogauto.dlg'

env.VariantDir('${BUILDPATH}',CMM_source, duplicate=0)

# Do all the processing here. Write the file separately
# Build ID has an A appended to indicate APPS build
buildidm = env.Dump('BUILD_ID').replace('\'','\"')
# Remove the A 
buildid = buildidm.replace('A\"','\"')
# Replace the quotes from the output of env.Dump
chipset = str(env.Dump('MSM_ID')).replace('\'','')
#print "chipset val: %s" %chipset
env.PrintInfo("chipset val:    = ${chipset}")
asicid = str(env.Dump('BUILD_ASIC')).replace('\'','')
buildidstr = str(env.Dump('BUILD_ID')).replace('\'','')
buildver = str(env.Dump('BUILD_VER')).replace('\'','')
# ELF name combines the three together
elfname=chipset + buildidstr + buildver
# Bootloader flavor is hardcoded in the build, provided here
bootloaderflavor = 'AAABQNBG'
		
# Script is the list of scripts to be included in the dialog   
scripts = []
# Delcare the scripts here one after the other
# Fields : Scriptname, Alternate Name (appears in the dialog), Location (with respect
# to CORE directory or BUILD\MS directory, Team responsible for it, Number of arguments it
# takes and the mapping of those arguments
script1=CMMScript("ULogDump","ULOG Log","&COREDIR/power/ulog/scripts","Power", "1")
script1.argmapping = { 1 : 'Log Path'}
	
script2=CMMScript("NPADump","NPA Log","&COREDIR/power/npa/scripts","Power","1")
script2.argmapping = { 1: 'Log Path'}

script3=CMMScript("testclocks_8660","Test Clock ","&BUILDMSDIR","Systemdrivers","1")
script3.argmapping = { 1: 'Clock Name'}
	
# Add each one to the list
scripts = [script1, script2, script3]
	
# Set parameters for the Dialog box here
window = T32Dialog()
window.height = len(scripts)*5
window.width = (len(scripts) + 3) * 8
window.title = "Collect Logs"
window.textheight = 1
window.textwidth = 5
window.editheight = 1
window.editwidth = 10
window.chooseboxwidth = 10
window.chooseboxheight = 2
	
#print scripts[0].argmapping[1]
# Write the config file
writeappsconfigfile()
# Write the dialog file
writedialogfile()

if env.has_key('BUILD_BOOT_CHAIN'):

   	CMM_source = env.subst('$COREBSP_ROOT')+'/products'
	CMM_Build_Config = CMM_source + '/std_buildconfig.cmm'

	env.VariantDir('${BUILDPATH}',CMM_source, duplicate=0)

       # Do all the processing here. Write the file separately
       # Build ID has an A appended to indicate APPS build
       	buildidm = env.Dump('BUILD_ID').replace('\'','\"')
       # Remove the M 
	buildid = buildidm.replace('M\"','\"')
     
        # Write the boot config file
        writebootconfigfile()

if ('USES_PRODCUTS_DLOAD_ENTRY' not in env):
	Return()


#-------------------------------------------------------------------------------
# Load sub scripts
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()

