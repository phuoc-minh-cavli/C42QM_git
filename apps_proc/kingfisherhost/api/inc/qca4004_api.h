/*****************************************************************************
  Copyright (c) 2017-2018 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
*****************************************************************************/

#ifndef __QCA4004_API_H__
#define __QCA4004_API_H__

/*-------------------------------------------------------------------------
 * Include Files
 *-----------------------------------------------------------------------*/
#include "qapi_types.h"


/*-------------------------------------------------------------------------
 * Preprocessor Definitions and Constants
 *-----------------------------------------------------------------------*/
#define QCA4004_MAC_ADDR_LEN 		(6)       	/* size of 802.11 address */
#define QCA4004_SSID_LEN_MAX		(32)		/* max length for ssid */

/** @name QCA4004 Status Codes
 * The following definitions represent the status codes common to all of
 * the QCA4004 modules.
 */
#define QCA4004_OK                              (0)   /**< Success                   */
#define QCA4004_ERR_GENERAL                     (1)   /**< General error             */
#define QCA4004_ERR_NOT_INIT                    (2)   /**< Not Initilize        		*/
#define QCA4004_ERR_INVALID_PARAM               (3)   /**< Invalid parameter         */
#define QCA4004_ERR_BUSY                        (4)   /**< Opertion busy             */
#define QCA4004_ERR_GPIO						(5)	  /**< GPIO operation fail		*/
#define QCA4004_ERR_UART						(6)	  /**< UART operation fail		*/
#define QCA4004_ERR_THREAD						(7)	  /**< THREAD operation fail		*/
#define QCA4004_ERR_POWER_STATE					(8)	  /**< Wrong power state		*/
#define QCA4004_ERR_LOCK						(9)	  /**< Operation lock			*/
#define QCA4004_ERR_TIMER						(10)  /**< Operation timer			*/

/** @} */ /* end_namegroup */
	

/*-------------------------------------------------------------------------
 * Type Declarations
 *-----------------------------------------------------------------------*/
typedef uint32_t QCA4004_Status_t;
	
/**
 * QCA4004 error codes.
 */
typedef enum {
	QCA4004_ERROR_SUCCESS = 0,				/**< Success. */
	QCA4004_ERROR_TIMEOUT,					/**< time out. */
} QCA4004_Error_Core_t;

/**
 * QCA4004 power state.
 */
typedef enum {
	QCA4004_POWER_OFF = 0,		   /**< Power Off. */
	QCA4004_POWER_ON,			   /**< Power On. */
	QCA4004_POWER_SUSPEND,		   /**< Power State is Suspend. */
	QCA4004_POWER_MAX,				  
} QCA4004_Power_State_t;

/**
 * QCA4004 scan state.
 */
typedef enum {
    QCA4004_SCAN_IDLE = 0,              /**< Idle. */
    QCA4004_SCAN_PENDING,               /**< Scan ongoing. */    
    QCA4004_SCAN_MAX,
} QCA4004_Scan_State_t;

/**
 * QCA4004 scan info for each wifi node.
 */
typedef struct _qca4004_bss_scan_info
{
	 uint8_t channel;
	 int8_t  rssi;	 /* rssi = -96dBm + SNR */
	 uint8_t bssid[QCA4004_MAC_ADDR_LEN];	 
	 uint8_t ssid_len;
	 uint8_t ssid[QCA4004_SSID_LEN_MAX];
} QCA4004_Bss_Scan_Info;

/* QCA4004 Callbacks */

/**
* @brief callback for power state change of qca4004
         It is called once the power state of qca4004 changed.

  @param[in] requestId  Request ID generated by the client to track the response. \n
						Response for this Request will contain the same request ID. \n
  @param[in] errCode Type of errors associated with the request.
  @param[in] state The current power state of qca4004.
  @param[in] mac The mac address of qca4004.

  @return None.
*/
typedef void (*qca4004_power_state_Callback)(
	uint32_t requestId,
	QCA4004_Error_Core_t errCode,
    QCA4004_Power_State_t state,
	uint8_t *mac
);

/**
* @brief callback for get the AP list.
         It is called once received the AP list from QCA4004.
		 
  @param[in] requestId  Request ID generated by the client to track the response. \n
						Response for this Request will contain the same request ID. \n
  @param[in] errCode Type of errors associated with the request.
  @param[in] mac The mac address of qca4004.
  @param[in] numAps Numbers of APs in the scan.
  @param[in] pOut   the pointer to AP list in the scan.

  @return None.
*/
typedef void (*qca4004_scan_Callback)(
	uint32_t requestId,
	QCA4004_Error_Core_t errCode,
	uint8_t *mac,
    uint8_t numAps,
	QCA4004_Bss_Scan_Info* pOut
);

/** QCA4004 callbacks */
typedef struct {
    qca4004_power_state_Callback       powerStateCb;
    qca4004_scan_Callback              scanCb;
} qca4004_Callback_Table_t;


/*-------------------------------------------------------------------------
 * Function Declarations and Documentation
 *-----------------------------------------------------------------------*/

/**
* @brief Initializes qca4004 driver and registers the callbacks.

  @param[in] pCallbacks  Pointer to the structure with the callback
                         functions to be registered.

  @return
  QCA4004_OK 			-- The operation was successful. \n
  QCA4004_ERR_GPIO 		-- GPIO operation fail. \n
  QCA4004_ERR_UART 		-- UART operation fail. \n
  QCA4004_ERR_THREAD 	-- THREAD operation fail. \n
*/
QCA4004_Status_t qca4004_init(qca4004_Callback_Table_t* pCallbackTable);

/**
* @brief De-initializes qca4004 driver.

  @return
  0 -- The operation was successful. \n
  1 -- The operation was fail. \n
*/
//QCA4004_Status_t qca4004_Deinit();

/**
* @brief change the power state of the QCA4004.

  @param[in] requestId  Request ID generated by the client to track the response. \n
					Response for this Request will contain the same request ID. \n
  @param[in] state  	the power state which will be change to for QCA4004.

  @return
  QCA4004_OK 			-- The operation was successful. \n
  QCA4004_ERR_NOT_INIT 	-- The QCA4004 Driver was not initialized. \n
*/
QCA4004_Status_t qca4004_power_state_change(uint32_t requestId,const QCA4004_Power_State_t state);

/**
* @brief send a request to qca4004 to get AP list .

  @param[in] requestId  Request ID generated by the client to track the response. \n
						Response for this Request will contain the same request ID. \n
  @param[in] timeout    Number of seconds for which the request should be active. \n
  
  @return
  0 -- The operation was successful. \n
  1 -- The operation was fail. \n
*/
QCA4004_Status_t qca4004_get_AP_list(uint32_t requestId, uint32_t timeout);

#endif

