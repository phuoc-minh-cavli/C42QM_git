#===============================================================================
#
# AUDIO INIT
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2015 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: $
#  $DateTime: $
#  $Author: jprasad $
#  $Change: $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when          who         what, where, why
# --------      ---         ----------------------------------------------------
# 09/12/14      vk       Added VoUSB feature support
# 07/06/2011    jp       Initial revision
#===============================================================================
Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Source PATH     
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/multimedia/audio/audioinit"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)


#-------------------------------------------------------------------------------
# CoreBSP dependencies
#-------------------------------------------------------------------------------

CBSP_API = [
   'BOOT',
   'BUSES',
   'DAL',
   'DEBUGTOOLS',
   'MPROC',
   'POWER',
   'PWRDB',
   'SECUREMSM',
   'SERVICES',

   # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API, area='core')
env.RequireRestrictedApi(CBSP_API)

env.RequireRestrictedApi('AUDIO_DIAG')
env.RequireRestrictedApi('CSD_AUDIO')
env.RequirePublicApi('AUDIO_INIT')
env.RequireRestrictedApi('APR')
env.RequireRestrictedApi('CSDLITE')

env.RequirePublicApi('MMUTILS')
env.RequirePublicApi('APR')
env.RequirePublicApi('AUDIO')
env.RequirePublicApi('CSD_QMI_SERVICES')
env.RequirePublicApi('CM_QMI_CLIENT')
env.RequirePublicApi('CSD_QMI_CLIENT')
env.RequirePublicApi('RTPD_SERVICES')
env.RequireRestrictedApi('RTPD_OS_DEP')
env.RequireRestrictedApi('CSD_OS_DEP')


#-------------------------------------------------------------------------------
# Sources
#-------------------------------------------------------------------------------

audioinit_SOURCES = [
    '${BUILDPATH}/src/audioinit.c',
]

RCINIT_AUDIO_INIT_BUILD_TAG = ['CORE_APPS', 'MULTIMEDIA_APPS']

# Init function descriptor
RCINIT_AUDIO_INIT_FUNC = {
     'sequence_group' : 'RCINIT_GROUP_2',
     'init_name' : 'audio_init_func',
     'init_function' : 'audio_init',
}

if 'USES_FEATURE_APSS_AUDIO_INIT' in env: 
    if 'USES_RCINIT' in env:
         env.AddRCInitFunc(RCINIT_AUDIO_INIT_BUILD_TAG , RCINIT_AUDIO_INIT_FUNC)


#-----------------------------------------------------------------------------------
RCINIT_AUDIO_DEINIT_BUILD_TAG = ['CORE_APPS', 'MULTIMEDIA_APPS']

# Init function descriptor
RCINIT_AUDIO_DEINIT_FUNC = {
     'sequence_group' : 'RCINIT_GROUP_7',
     'init_name' : 'audio_deinit',
     'init_function' : 'aud_deinit',
}

if 'USES_FEATURE_APSS_AUDIO_INIT' in env: 
   if 'USES_RCINIT' in env:
      env.AddRCInitFunc(RCINIT_AUDIO_DEINIT_BUILD_TAG , RCINIT_AUDIO_DEINIT_FUNC)


#-------------------------------------------------------------------------------
# objs, libraries
#-------------------------------------------------------------------------------

if 'USES_FEATURE_APSS_AUDIO_INIT' in env: 
    audioinit_obj = env.Object(audioinit_SOURCES)
    audioinit_lib = env.Library('${BUILDPATH}/audioinit', audioinit_obj)

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------
if 'USES_FEATURE_APSS_AUDIO_INIT' in env: 
    env.AddLibsToImage(
        ['MULTIMEDIA_APPS'],
        audioinit_lib)


  
   
env.LoadSoftwareUnits()

