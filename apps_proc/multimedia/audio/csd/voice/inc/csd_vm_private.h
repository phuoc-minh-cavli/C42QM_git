#ifndef __CSD_VM_PRIVATE_H__
#define __CSD_VM_PRIVATE_H__

/*-----------------------------------------------------------------------------
     Copyright (c) 2009 - 2011, 2016 Qualcomm Technologies Incorporated.
	 All rights reserved.
	 Qualcomm Confidential and Proprietary
-----------------------------------------------------------------------------*/
/*=============================================================================
                      EDIT HISTORY FOR MODULE
	This section contains comments describing changes made to this module.
	Notice that changes are listed in reverse chronological order.

	$Header: //components/rel/audio.tx/2.0/audio/csd/voice/inc/csd_vm_private.h#1 $
	$DateTime: 2018/12/25 22:39:07 $
	$Author: pwbldsvc $
	$Change: 17929171 $
	$Revision: #1 $
	=========================================================================*/
  /*=============================================================================
                      
  This section contains comments describing changes made to this module.
  Notice that changes are listed in reverse chronological order.
  when          who       what, where, why
  --------     -----     ---------------------------------------------------
  04/16/14      jk       added support for Voice Session Manager

=============================================================================*/

#include <string.h> /* memcpy */

#include "mmdefs.h"

#include "apr_list.h"
#include "apr_log.h"
#include "aprv2_api_inline.h"
#include "aprv2_msg_if.h"
#include "apr_objmgr.h"

#include "csd_intf.h"
#include "csd_status.h"
#include "csd_handle.h"
#include "csd_debug_msg.h"
#include "csd_diag_service_msg.h"

#include "csd_voc_common.h"
#include "csd_vm.h"
#include "csd_vm_ioctl.h"
#include "csd_vs_private.h"
#include "csd_vc_private.h"

#include "vss_public_if.h"

/*****************************************************************************
 * Voice Manager Internal API                                    *
 ****************************************************************************/
CSD_INTERNAL int32_t csd_vm_init (
  struct csd_vtable** ret_vtable
);

CSD_INTERNAL int32_t csd_vm_deinit ( void );

CSD_INTERNAL int32_t csd_vm_open (
  uint32_t open_id,
  void* params,
  uint32_t size
);

CSD_INTERNAL int32_t csd_vm_close (
  uint32_t handle
);

CSD_INTERNAL int32_t csd_vm_write (
  uint32_t handle,
  void* params,
  uint32_t size
);

CSD_INTERNAL int32_t csd_vm_read (
  uint32_t handle,
  void* params,
  uint32_t size
);

CSD_INTERNAL int32_t csd_vm_ioctl (
  uint32_t handle,
  uint32_t code,
  void* params,
  uint32_t size
);

/*****************************************************************************
 * Voice Manager Private Stuctures                                           *
 ****************************************************************************/

/*
 ** Start Internal Data & Structures
*/

#define CSD_VM_NAME_MAX_SIZE 31

typedef struct {
  bool_t                  vc_attached;
  bool_t                  vs_attached;
  bool_t                  running;
  csd_vsm_handle_state_t  state;
}csd_vm_session_state_t;

typedef uint32_t csd_vm_update_state_t;

typedef struct csd_vm_session_item_t csd_vm_session_item_t;
struct csd_vm_session_item_t{
  apr_list_node_t             link;
  int16_t                     h_apr_obj;
  uint32_t                    h_csd;
  uint32_t                    h_mvm;             /* MVM handle */
  csd_vm_event_callback_fn_t  csd_vm_cb;
  void*                       csd_vm_cb_data;
  char_t                      vm_name [CSD_VM_NAME_MAX_SIZE];
  uint32_t                    vm_name_size;
  csd_event_t                 csd_vm_event;
  csd_vm_session_state_t      sess_state;
  bool_t                      is_passive;
  bool_t                      bclosing_sequence; /* used for the closing sequence */
};


typedef union {
  csd_vm_event_command_rsp_t csd_vmw_rsp_cmd;
  csd_vm_ioctl_attach_stream_t csd_attach_stream_cmd;
  csd_vm_ioctl_detach_stream_t csd_detach_stream_cmd;
  csd_vm_ioctl_attach_context_t csd_attach_context_cmd;
  csd_vm_ioctl_detach_context_t csd_detach_context_cmd;
  csd_vm_update_state_t        update_state_cmd;
} csd_vm_command_packet_type;

enum csd_vm_command_enum_t
{
  CSD_VM_CMD_SEND_RSP_CALLBACK,
  CSD_VM_CMD_UPDATE_STATE,
  CSD_VM_COMMAND_MAX
};
typedef enum csd_vm_command_enum_t csd_vm_command_enum_t;

typedef struct {
  apr_list_node_t             link;
  csd_vm_session_item_t       *psess;
  csd_vm_command_enum_t       cmd_type;
  csd_vm_command_packet_type  cmd;
  int32_t                     client_token;
  uint32_t                    cmd_token;    /* this is the token generated by csd_vm */
} csd_vm_cmd_list_item_t;

#define CSD_VM_NUM_COMMANDS 40    //%%%TBD

#define CSD_VM_NUM_SESSIONS     10

typedef struct {
  apr_list_node_t link;
  uint32_t csd_vc_handle;
} csd_vc_handle_list_item_t;

typedef struct {
  apr_list_node_t link;
  uint32_t csd_vs_handle;
} csd_vs_handle_list_item_t;

/* Object Management */
#define CSD_VM_HANDLE_TOTAL_BITS_V ( 16 )
#define CSD_VM_HANDLE_INDEX_BITS_V ( 6 ) /* 5 bits = 64 handles. */
#define CSD_VM_MAX_OBJECTS_V ( 1 << CSD_VM_HANDLE_INDEX_BITS_V )

#define CSD_VM_NUM_TOTAL_VS_HANDLES ( CSD_VM_NUM_SESSIONS * CSD_VS_NUM_SESSIONS )
#define CSD_VM_NUM_TOTAL_VC_HANDLES ( CSD_VM_NUM_SESSIONS * CSD_VC_NUM_SESSIONS )

/* CSD VM internal IOCTLs */

/**
 * CSD_VS_IOCTL_GET_CONTEXT_LIST [synchronous]
 *
 * Gets the voice context sessions attached to a specific 
 * stream. 
 *
 * Return call:
 *   CSD_EOK on success.  
 */

#define CSD_VM_IOCTL_GET_CONTEXT_LIST ( 0x000111C3 )

typedef struct csd_vm_ioctl_get_context_list_t csd_vm_ioctl_get_context_list_t;
struct csd_vm_ioctl_get_context_list_t
{
  uint32_t csd_vs_handle;
    /**< The csd voice stream handle. */
  uint32_t* buffer;
    /**<
      The buffer to be filled. 
      @verbatim
      <----- 32 bits ----->
       -------------------
      | csd vs handle     |   
       -------------------
      | csd vs handle     |   
       -------------------    
      |                   |   
      .                   .
      .                   . 
      @endverbatim
     */
  uint32_t buffer_size;
    /**< Size of the buffer in bytes. */
  uint32_t* ret_write_size;
    /**< Number of bytes written. */
  uint32_t* ret_total_size;
    /**< Number of bytes required. */
};

#define CSD_VM_IOCTL_MAP_MEMORY ( 0x00012A0D )		

#define CSD_VM_IOCTL_UNMAP_MEMORY ( 0x00012A0E )	

#define MEMMAP_ACCESS_MASK         0
#define MEMMAP_CACHE_LINE_SIZE     128
#define MEMMAP_MAX_DATA_WIDTH      64
#define MEMMAP_MIN_DATA_WIDTH      8
#define MEMMAP_PAGE_ALIGNED        4096


/*
 ** End Internal Data Structures
*/
#endif /* __CSD_VM_PRIVATE_H__ */

