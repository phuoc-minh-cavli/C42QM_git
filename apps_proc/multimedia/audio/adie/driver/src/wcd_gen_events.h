#ifndef WCD_GEN_EVENTS_INTF_
#define WCD_GEN_EVENTS_INTF_

/**
@file wcd_gen_events.h
@brief 
Header file for generated event functions of WCD codec elements.
*/
/*-------------------------------------------------------------------------------
     Copyright (c) 2011 Qualcomm Technologies Incorporated.
	 All rights reserved.
	 Qualcomm Confidential and Proprietary
-----------------------------------------------------------------------------*/
/*=============================================================================
                             Edit History
$Id: //components/rel/audio.tx/2.0/audio/adie/driver/src/wcd_gen_events.h#2 $

when       who     what, where, why
--------   ---     ------------------------------------------------------------
03/01/13   KNM		Initial revision.
===============================================================================*/

#include "wcd_result.h"
#include "wcd_types.h"

wcd_result wcd_SBRX_1_SET_BIT_WIDTH_12BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_1_SET_BIT_WIDTH_16BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_1_SET_BIT_WIDTH_20BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_1_SET_BIT_WIDTH_24BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_2_SET_BIT_WIDTH_12BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_2_SET_BIT_WIDTH_16BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_2_SET_BIT_WIDTH_20BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_2_SET_BIT_WIDTH_24BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_3_SET_BIT_WIDTH_12BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_3_SET_BIT_WIDTH_16BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_3_SET_BIT_WIDTH_20BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_3_SET_BIT_WIDTH_24BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_4_SET_BIT_WIDTH_12BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_4_SET_BIT_WIDTH_16BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_4_SET_BIT_WIDTH_20BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_4_SET_BIT_WIDTH_24BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_5_SET_BIT_WIDTH_12BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_5_SET_BIT_WIDTH_16BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_5_SET_BIT_WIDTH_20BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBRX_5_SET_BIT_WIDTH_24BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RDAC_1_MUX_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RDAC_1_MUX_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_EAROUT_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_EAROUT_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_EAROUT_SET_GAIN_0DB(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_EAROUT_SET_GAIN_1P5DB(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_EAROUT_SET_GAIN_3DB(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_EAROUT_SET_GAIN_4P5DB(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_EAROUT_SET_GAIN_6DB(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_MAIN_MUX_1_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_MAIN_MUX_1_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_MAIN_MUX_2_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_MAIN_MUX_2_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_MAIN_MUX_3_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_MAIN_MUX_3_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_MAIN_MIXER_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_MAIN_MIXER_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_ST_MIXER_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_ST_MIXER_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_ST_MUX_1_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_ST_MUX_1_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_ST_MUX_2_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_ST_MUX_2_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_HPF_BYPASS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_HPF_SET_CUTOFF_FREQ_4HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_HPF_SET_CUTOFF_FREQ_75HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_HPF_SET_CUTOFF_FREQ_150HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_PATH_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_PATH_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_PATH_MUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_PATH_UNMUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_PATH_RESET(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_PATH_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_COMPANDER_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_1_COMPANDER_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_CLASS_CONTROLLER_1_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_CLASS_CONTROLLER_1_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_BIAS_1_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_BIAS_1_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_HPHL_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_HPHL_PRECHARGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_HPHL_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_HPHL_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_MAIN_MUX_1_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_MAIN_MUX_1_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_MAIN_MUX_2_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_MAIN_MUX_2_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_MAIN_MUX_3_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_MAIN_MUX_3_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_MAIN_MIXER_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_MAIN_MIXER_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_ST_MUX_1_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_ST_MUX_1_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_ST_MUX_2_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_ST_MUX_2_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_ST_MIXER_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_ST_MIXER_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_HPF_BYPASS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_HPF_SET_CUTOFF_FREQ_4HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_HPF_SET_CUTOFF_FREQ_75HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_HPF_SET_CUTOFF_FREQ_150HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_PATH_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_PATH_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_PATH_MUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_PATH_UNMUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_PATH_RESET(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_PATH_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_COMPANDER_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_2_COMPANDER_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_CLASS_CONTROLLER_2_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_CLASS_CONTROLLER_2_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_BIAS_2_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_BIAS_2_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RDAC_3_MUX_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RDAC_3_MUX_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_HPHR_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_HPHR_PRECHARGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_HPHR_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_HPHR_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_MAIN_MUX_1_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_MAIN_MUX_1_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_MAIN_MUX_2_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_MAIN_MUX_2_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_MAIN_MUX_3_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_MAIN_MUX_3_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_MAIN_MIXER_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_MAIN_MIXER_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_HPF_BYPASS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_HPF_SET_CUTOFF_FREQ_4HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_HPF_SET_CUTOFF_FREQ_75HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_HPF_SET_CUTOFF_FREQ_150HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_PATH_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_PATH_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_PATH_MUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_PATH_UNMUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_PATH_RESET(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_PATH_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_MAIN_MUX_1_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_MAIN_MUX_1_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_MAIN_MUX_2_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_MAIN_MUX_2_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_MAIN_MUX_3_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_MAIN_MUX_3_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_MAIN_MIXER_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_MAIN_MIXER_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_ST_MUX_1_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_ST_MUX_1_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_ST_MUX_2_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_ST_MUX_2_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_ST_MIXER_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_ST_MIXER_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_HPF_BYPASS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_HPF_SET_CUTOFF_FREQ_4HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_HPF_SET_CUTOFF_FREQ_75HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_HPF_SET_CUTOFF_FREQ_150HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_PATH_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_PATH_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_PATH_MUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_PATH_UNMUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_PATH_RESET(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_PATH_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_1_SELECT_MICBIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_1_SELECT_CFILTER(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_1_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_1_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_1_APPLY_DESIRED_VOLTAGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_1_APPLY_EXTERNAL_BYPASS_CAPACITOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_1_SET_INTERNAL_BIAS_RESISTOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_1_ENABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_1_DISABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_DMIC_1_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_DMIC_1_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_DMIC_1_SET_CLOCK_MODE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_2_SELECT_MICBIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_2_SELECT_CFILTER(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_2_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_2_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_2_APPLY_DESIRED_VOLTAGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_2_APPLY_EXTERNAL_BYPASS_CAPACITOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_2_SET_INTERNAL_BIAS_RESISTOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_2_ENABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_2_DISABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_DMIC_2_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_DMIC_2_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_DMIC_2_SET_CLOCK_MODE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_3_SELECT_MICBIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_3_SELECT_CFILTER(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_3_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_3_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_3_APPLY_DESIRED_VOLTAGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_3_APPLY_EXTERNAL_BYPASS_CAPACITOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_3_SET_INTERNAL_BIAS_RESISTOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_3_ENABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_3_DISABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_DMIC_3_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_DMIC_3_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_DMIC_3_SET_CLOCK_MODE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_4_SELECT_MICBIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_4_SELECT_CFILTER(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_4_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_4_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_4_APPLY_DESIRED_VOLTAGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_4_APPLY_EXTERNAL_BYPASS_CAPACITOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_4_SET_INTERNAL_BIAS_RESISTOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_4_ENABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_4_DISABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_DMIC_4_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_DMIC_4_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_DMIC_4_SET_CLOCK_MODE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_5_SELECT_MICBIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_5_SELECT_CFILTER(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_5_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_5_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_5_APPLY_DESIRED_VOLTAGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_5_APPLY_EXTERNAL_BYPASS_CAPACITOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_5_SET_INTERNAL_BIAS_RESISTOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_5_ENABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_5_DISABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_1_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_1_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_1_SET_ANALOG_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_6_SELECT_MICBIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_6_SELECT_CFILTER(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_6_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_6_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_6_APPLY_DESIRED_VOLTAGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_6_APPLY_EXTERNAL_BYPASS_CAPACITOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_6_SET_INTERNAL_BIAS_RESISTOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_6_ENABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_6_DISABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_7_SELECT_MICBIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_7_SELECT_CFILTER(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_7_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_7_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_7_APPLY_DESIRED_VOLTAGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_7_APPLY_EXTERNAL_BYPASS_CAPACITOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_7_SET_INTERNAL_BIAS_RESISTOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_7_ENABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_7_DISABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_8_SELECT_MICBIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_8_SELECT_CFILTER(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_8_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_8_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_8_APPLY_DESIRED_VOLTAGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_8_APPLY_EXTERNAL_BYPASS_CAPACITOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_8_SET_INTERNAL_BIAS_RESISTOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_8_ENABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_8_DISABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_2_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_2_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_2_SET_ANALOG_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_MUX_1_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_MUX_1_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_1_BYPASS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_1_SET_CUTOFF_FREQ_4HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_1_SET_CUTOFF_FREQ_75HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_1_SET_CUTOFF_FREQ_150HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_1_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_1_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_1_RESET(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_1_MUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_1_UNMUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_1_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_MUX_2_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_MUX_2_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_MUX_3_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_MUX_3_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_MUX_4_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_MUX_4_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_2_BYPASS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_2_SET_CUTOFF_FREQ_4HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_2_SET_CUTOFF_FREQ_75HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_2_SET_CUTOFF_FREQ_150HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_2_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_2_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_2_RESET(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_2_MUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_2_UNMUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_2_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_3_BYPASS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_3_SET_CUTOFF_FREQ_4HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_3_SET_CUTOFF_FREQ_75HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_3_SET_CUTOFF_FREQ_150HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_4_BYPASS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_4_SET_CUTOFF_FREQ_4HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_4_SET_CUTOFF_FREQ_75HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_HPF_4_SET_CUTOFF_FREQ_150HZ(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_3_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_3_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_3_RESET(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_3_MUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_3_UNMUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_3_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_4_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_4_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_4_RESET(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_4_MUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_4_UNMUTE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_TX_PATH_4_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_MUX_1_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_MUX_1_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_1_SET_BIT_WIDTH_12BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_1_SET_BIT_WIDTH_16BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_1_SET_BIT_WIDTH_20BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_1_SET_BIT_WIDTH_24BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_MUX_2_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_MUX_2_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_2_SET_BIT_WIDTH_12BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_2_SET_BIT_WIDTH_16BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_2_SET_BIT_WIDTH_20BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_2_SET_BIT_WIDTH_24BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_MUX_3_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_MUX_3_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_MUX_4_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_MUX_4_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_MUX_5_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_MUX_5_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_3_SET_BIT_WIDTH_12BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_3_SET_BIT_WIDTH_16BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_3_SET_BIT_WIDTH_20BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_3_SET_BIT_WIDTH_24BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_4_SET_BIT_WIDTH_12BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_4_SET_BIT_WIDTH_16BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_4_SET_BIT_WIDTH_20BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_4_SET_BIT_WIDTH_24BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_5_SET_BIT_WIDTH_12BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_5_SET_BIT_WIDTH_16BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_5_SET_BIT_WIDTH_20BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SBTX_5_SET_BIT_WIDTH_24BIT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_INTERPOLATOR_MIXER_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_INTERPOLATOR_MIXER_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_COMPANDER_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_3_COMPANDER_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_BIAS_3_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_BIAS_3_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RDAC_4_MUX_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RDAC_4_MUX_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_LO1_L_P_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_LO1_L_P_PRECHARGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_LO1_L_P_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_LO1_L_P_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_COMPANDER_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_4_COMPANDER_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_CLASS_CONTROLLER_4_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_CLASS_CONTROLLER_4_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_BIAS_4_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_RX_BIAS_4_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SPEAKER_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SPEAKER_PRECHARGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SPEAKER_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_SPEAKER_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd9306_RDAC_5_DIFF_MUX_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd9306_RDAC_5_DIFF_MUX_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd9302_RDAC_5_DIFF_MUX_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd9302_RDAC_5_DIFF_MUX_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_LO2_R_M_SET_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_LO2_R_M_PRECHARGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_LO2_R_M_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_LO2_R_M_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_USONIC_MUX_CONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_USONIC_MUX_DISCONNECT(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_3_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_3_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_3_SET_ANALOG_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_4_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_4_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_4_SET_ANALOG_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_9_SELECT_MICBIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_9_SELECT_CFILTER(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_9_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_9_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_9_APPLY_DESIRED_VOLTAGE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_9_APPLY_EXTERNAL_BYPASS_CAPACITOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_9_SET_INTERNAL_BIAS_RESISTOR(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_9_ENABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_MBIAS_MGR_9_DISABLE_INTERNAL_BIAS(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_5_ENABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_5_DISABLE(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);
wcd_result wcd_ADC_5_SET_ANALOG_GAIN(wcd_element* p_element, uint32 parameter, wcd_list* p_element_list, wcd_event_context_pointer* context_ptr);

#endif

