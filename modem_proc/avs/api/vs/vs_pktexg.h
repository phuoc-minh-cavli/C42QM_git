#ifndef __VS_PKTEXG_H__
#define __VS_PKTEXG_H__

/**
  @file  vs_voc.h
  @brief This file contains vocoder packet exchange interface definitions 
         of the Vocoder Services (VS).
*/

/*
  ============================================================================
  Copyright (C) 2017 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ============================================================================
  $Header: //components/rel/avs.mpss/8.0.c12/api/vs/vs_pktexg.h#1 $
  $Author: pwbldsvc $
  ============================================================================
*/

/****************************************************************************
 * INCLUDE HEADER FILES                                                     *
 ****************************************************************************/

#include "mmdefs.h"

/****************************************************************************
 *  VS PKTEXG TYPE definitions.
 ****************************************************************************/

/** 
 * VS vocoder buffer structure for mailbox.
 */
typedef struct vs_pktexg_buffer_t vs_pktexg_buffer_t;

#include "apr_pack_begin.h"
struct vs_pktexg_buffer_t {

  uint16_t minor_version;
    /**< Version: \n
      *  Vocoder buffer format minor version. The currently supported minor
      *  version is 1. Any changes are backward compatible.
      */
  uint64_t timestamp_us;
    /**< QTimer timestamp at microphone in microseconds.
      *
      *  - It represents the capture timestamp at mic for read buffers.
      *  - It is not used currently for write buffers.
      */
  uint32_t status_mask;
    /**< Bitmask that indicates the encoder packet status.
      *
      *  @values
      *  - if bit 0 is set -- Indicates a general encoding error, informing the
      *    client that the packet has been dropped. The frame_size set to 0.
      *  - If bits 1 to 31 are set - Reserved; set to 0.
      */
  uint32_t media_id;
    /**< Media ID. See VS_VOCXXX_MEDIA_ID. */
  uint32_t frame_size;
    /**< Actual size of the media frame (header+Data) in bytes. */
#if __STDC_VERSION__ >= 199901L
  uint8_t frame[];
    /**< Frame is comprised of frame_header(1 byte) followed by frame_data.
     *
     * The media ID determines the actual media format.
     *
     * See vs_vocxxx_frame_header_t and vs_vocxxx_frame_data_t for the 
     * media specifc structure definitions.
     */
#endif /* __STDC_VERSION__ >= 199901L */
}
#include "apr_pack_end.h" 
;

/****************************************************************************
 *  VS PKTEXG INTERFACE DEFINITIONS for UPLINK
 ****************************************************************************/

/** 
 * Encoder buffer ready notification (asynchronous event).
 *
 * This is a periodic event generated by vocoder services as per the 
 * timing configured by the client, It notifies the client to read new 
 * encoder buffer and drives the uplink vocoder packet exchange.
 *
 * The client shall
 *   - Get the encoder buffer via VS_PKTEXG_CMD_GET_ENCODER_BUFFER.
 *   - Return the encoder buffer via VS_PKTEXG_CMD_RETURN_ENCODER_BUFFER after consumption.
 */
#define VS_PKTEXG_EVENT_ENCODER_BUFFER_AVAILABLE ( 0x000132D1 )


/** Get Read Buffer command (synchronous blocking API).
 *
 * The client calls the get read command (per the timing configured) to retrieve
 * the vocoder buffer delivered by the encoder.
 *
 * Not all buffers contain speech frames. The client should check the buffer
 * to see if there is a valid speech frame.
 *
 * - Returns VS_EOK if a buffer is available. \n
 * - Returns VS_ENOTEXIST when no buffers are available.
 */
#define VS_PKTEXG_CMD_GET_ENCODER_BUFFER ( 0x000132D2 )

typedef struct vs_pktexg_cmd_get_encoder_buffer_t {

  uint32_t handle;
    /**< Open handle. */
  vs_pktexg_buffer_t** buffer;
    /**< buffer structure that is returned to the client. */
} vs_pktexg_cmd_get_encoder_buffer_t;


/** 
 * Return read buffer command. (synchronous blocking API).
 *
 * The client call this command after consuming the encoder buffer read via
 * VS_VOC_CMD_GET_ENCODER_BUFFER, so that returned buffer is further available for
 * delivering new encoder packets.
 *
 * - Returns VS_EOK if a buffer is successfully returned.
 * - Returns VS_EFAILED, denoted error during synchronous call.
 */
#define VS_PKTEXG_CMD_RETURN_ENCODER_BUFFER ( 0x000132D3 )

typedef struct vs_pktexg_cmd_return_encoder_buffer_t {

  uint32_t handle;
    /**< Open handle. */
  vs_pktexg_buffer_t* buffer;
    /**< buffer structure that is send by client. */
} vs_pktexg_cmd_return_encoder_buffer_t;


/****************************************************************************
 *  VS PKTEXG INTERFACE DEFINITIONS for DOWNLINK
 ****************************************************************************/

/** 
 * Decoder buffer request notification (asynchronous event).
 *
 * This is a periodic event generated by vocoder services as per the 
 * timing configured by the client, It notifies the client to put new decoder 
 * buffers for rendering and drives the downlink vocoder packet exchange.
 *
 * Erasure will be deocodes if Client fails to put decoder buffers timely.
 *
 * The client shall
 *   - Flushes stale decoder buffers (if any) via VS_PKTEXG_CMD_FLUSH_BUFFER.
 *   - Get the decoder buffer via VS_PKTEXG_CMD_GET_DECODER_BUFFER.
 *   - Return the vocoder buffer via VS_PKTEXG_CMD_PUT_DECODER_BUFFER after
 *     populating data for rendering.
 *   - Update the decoder data ready via VS_PKTEXG_CMD_DECDOER_BUFFER_READY.
 */
#define VS_PKTEXG_EVENT_DECODER_BUFFER_REQUEST ( 0x000132D4 )


/** Get write buffer command (synchronous blocking API).
 *
 * The client calls this command (per the timing configured) to  retrieve 
 * free decoder buffer for copying the vocoder data available on downlink for
 * rendering.
 *
 * - Returns VS_EOK if a buffer is available. \n
 * - Returns VS_ENOTEXIST when no buffers are available.
 */
#define VS_PKTEXG_CMD_GET_DECODER_BUFFER ( 0x000132D5 )

typedef struct vs_pktexg_cmd_get_decoder_buffer_t {

  uint32_t handle;
    /**< Open VS session handle. */
  vs_pktexg_buffer_t** buffer;
    /**< buffer structure that is returned to the client. */
} vs_pktexg_cmd_get_decoder_buffer_t;


/** 
 * Put write buffer command (synchronous blocking API).
 *
 * The client call this command to deliver a vocoder buffer to decoder 
 * for rendering. 
 * 
 * Decoder renders the vocoder buffers in same sequence of delivery and
 * decoder erasure if client does not deliver a vocoder buffer.
 *
 * - Returns VS_EOK, denotes call was successful.
 * - Returns VS_EFAILED, denoted generic error during call. 
 */
#define VS_PKTEXG_CMD_PUT_DECODER_BUFFER ( 0x000132D6 )

typedef struct vs_pktexg_cmd_put_decoder_buffer_t {

  uint32_t handle;
    /**< Open VS session handle. */
  vs_pktexg_buffer_t* buffer;
    /**< buffer structure that is send by client. */
} vs_pktexg_cmd_put_decoder_buffer_t;


/** 
 * Flush Buffers command (synchronous blocking API).
 *
 * This command flushes vocoder buffer data as indicated by the client.
 * Encoder buffer data is dropped and will not be available for client and 
 * decoder buffer data is dropped and will not be available for rendering.
 *
 * - Returns VS_EOK, denotes call was successful.
 * - Returns VS_EFAILED, denoted generic error during call.
 */
#define VS_PKTEXG_CMD_FLUSH_BUFFERS ( 0x000132D7 )

typedef struct vs_pktexg_cmd_flush_buffers_t {

  uint32_t handle;
    /**< Open VS session handle. */
  bool_t enc_flush;
    /**< If set to TRUE, all the encoder buffer pending to be consumed will
      *  be flushed out. */
  bool_t dec_flush;
    /**< If set to TRUE, all the decoder buffer pending to be rendered will
      *  be flushed out. */
} vs_pktexg_cmd_flush_buffers_t;

#endif /* __VS_PKTEXG_H__ */

