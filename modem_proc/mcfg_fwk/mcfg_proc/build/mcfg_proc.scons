#===============================================================================
#
# MODEM_CFG Libs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2012-2014 by QUALCOMM Technologies Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/mcfg_fwk.mpss/7.10.1.1/mcfg_proc/build/mcfg_proc.scons#1 $
#  $DateTime: 2020/02/19 23:07:19 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 01/14/12   sbt     Initial creation
#===============================================================================

#-----------------------------------------
# Import and clone the SCons environment
#-----------------------------------------
Import('env')
env = env.Clone()

#--------------------------------------------------------------------------------
# Required Public, Restricted & Protected APIs
#--------------------------------------------------------------------------------

env.RequirePublicApi([
    'DEBUGTOOLS',
    'SERVICES',
    'SYSTEMDRIVERS',
    'BUSES',
    'HAL',
    'HWENGINES',
    'IODEVICES',
    'MEMORY',
    'MPROC',
    'POWER',
    'SECUREMSM',
    'SERVICES',
    'STORAGE',
    'DAL',
    # needs to be last also contains wrong comdef.h
    'KERNEL',
    ], area='core')

env.RequirePublicApi([
    'MCFG',
    'MCS',
    ])

env.RequirePublicApi([
    'MMCP',
    ], area='mmcp')

env.RequirePublicApi([
    'PDC',
    'COMMON',
    ], area='QMIMSGS')

env.RequirePublicApi([
    'MCS',
    ], area='mcs')

env.RequirePublicApi([
    'UIM',
    'PUBLIC',
    ], area='uim')

env.RequireRestrictedApi([
    'MCFG',
    'MCS',
    ])


env.RequireProtectedApi([
    'MCFG',
    ])

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = '../src'

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = [
   "MSG_BT_SSID_DFLT=MSG_SSID_MCFG",
])

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------
if 'USES_GNSS_SA' not in env:
  # Define Formation Cimpatibility Version
  if env['PRODUCT_LINE'].startswith("MPSS.DPM"):
    env.Append(CPPDEFINES = ["MCFG_SW_COMPAT_VERSION=2"])
    env.Append(CPPDEFINES = ["MCFG_HW_COMPAT_VERSION=2"])
  elif env['PRODUCT_LINE'].startswith("MPSS.BO"):
    env.Append(CPPDEFINES = ["MCFG_SW_COMPAT_VERSION=4"])
    env.Append(CPPDEFINES = ["MCFG_HW_COMPAT_VERSION=4"])
  elif env['PRODUCT_LINE'].startswith("MPSS.JO"):
    env.Append(CPPDEFINES = ["MCFG_SW_COMPAT_VERSION=9"])
    env.Append(CPPDEFINES = ["MCFG_HW_COMPAT_VERSION=9"])
  elif env['PRODUCT_LINE'].startswith("MPSS.TH"):
    env.Append(CPPDEFINES = ["MCFG_SW_COMPAT_VERSION=8"])
    env.Append(CPPDEFINES = ["MCFG_HW_COMPAT_VERSION=8"])
  elif env['PRODUCT_LINE'].startswith("MPSS.TA"):
    env.Append(CPPDEFINES = ["MCFG_SW_COMPAT_VERSION=7"])
    env.Append(CPPDEFINES = ["MCFG_HW_COMPAT_VERSION=7"])
  elif env['PRODUCT_LINE'].startswith("MPSS.AT"):
    env.Append(CPPDEFINES = ["MCFG_SW_COMPAT_VERSION=8"])
    env.Append(CPPDEFINES = ["MCFG_HW_COMPAT_VERSION=8"])
  elif env['PRODUCT_LINE'].startswith("MPSS.CE"):
    env.Append(CPPDEFINES = ["MCFG_SW_COMPAT_VERSION=8"])
    env.Append(CPPDEFINES = ["MCFG_HW_COMPAT_VERSION=8"])
  elif env['PRODUCT_LINE'].startswith("MPSS.CT"):
    env.Append(CPPDEFINES = ["MCFG_SW_COMPAT_VERSION=9"])
    env.Append(CPPDEFINES = ["MCFG_HW_COMPAT_VERSION=9"])
  else:
    env.PrintError('Product Line'+ env['PRODUCT_LINE'] + 'is not supported!\n')
    
  # Add Source files
  MCFG_PROC_SOURCES = [
  	'${BUILDPATH}/mcfg_task.c',
  	'${BUILDPATH}/mcfg_proc.c',
  	'${BUILDPATH}/mcfg_default.c',
  	'${BUILDPATH}/mcfg_refresh.c',
	'${BUILDPATH}/mcfg_client.c',
        '${BUILDPATH}/mcfg_multi_mbn.c',
  ]

  if 'USES_MCFG_MULTI_MBN' in env:
    env.Append(CPPDEFINES = ["FEATURE_MCFG_MULTI_MBN_SUPPORT"])
    env.Append(CPPDEFINES = ["MCFG_MULTI_MBN_MAX_SIZE=0x40000"])

  # Add our library to the MODEM_AMSS image
  env.AddLibrary(['MODEM_MODEM'], '${BUILDPATH}/mcfg_proc', MCFG_PROC_SOURCES)

  # Build image for which this task belongs
  RCINIT_MCFG = ['MODEM_MODEM']

  # RC Init Function Dictionary
  RCINIT_INIT_MCFG = {
              'sequence_group'      : 'RCINIT_GROUP_2',
              'init_name'           : 'modem_cfg_init',
              'init_function'       : 'modem_cfg_init_before_task_start'
      }

  # RC Init Task Dictionary
  RCINIT_TASK_MCFG = {
              'thread_name'    : 'modem_cfg',
              'sequence_group' : 'RCINIT_GROUP_2',
              'stack_size_bytes'     : '16384',
              'priority_amss_order'  : 'SHARED_BACKGROUND_PRI_ORDER',
              'thread_entry'         : 'modem_cfg_task',
      }
      
  # Add init function to RCInit
  if 'USES_RCINIT' in env:
  	env.AddRCInitFunc(RCINIT_MCFG, RCINIT_INIT_MCFG)
  	env.AddRCInitTask(RCINIT_MCFG, RCINIT_TASK_MCFG)
