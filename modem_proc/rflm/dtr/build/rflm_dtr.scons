#====include path optimized=====================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2011 - 2013 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/rflm.mpss/1.10/dtr/build/rflm_dtr.scons#1 $
# $DateTime: 2020/04/16 12:31:05 $ 
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 07/26/13    st     Compile DTR for FW Standalone
# 07/26/13   hdz     Created.
#===============================================================================

Import('env')

LIB_NAME        = 'rflm_dtr'
IMAGE_SOURCES   = ['MODEM_MODEM','MOB_RFA']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'


from glob import glob

env = env.Clone()

#if 'USES_RF_TEST_APP' in env:
#	Return( )

# Method to abort processing of this file, if not required for current air interface mode, etc
#if ( (USES_TEST_FLAG1 in env and USES_TEST_FLAG2 not in env) or USES_TEST_FLAG3 not in env)):
#   Return( )
if 'USES_GNSS_ONLY_NO_WWAN' in env:
   Return( )

#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

env.Append(CPPDEFINES = ['MSG_BT_SSID_DFLT=MSG_SSID_RF',])  

env.RequireProtectedApi(['RFLM_INC'])

env.RequirePublicApi([
        'KERNEL',
        'SYSTEMDRIVERS',
        ],
        area='CORE')

env.RequirePublicApi([
        'COMMON',
        ],
        area='RFA')

env.RequirePublicApi([
        'DAL',
        ],
        area='CORE')

env.RequirePublicApi([
        'MCS',
        ],
        area='MCS')

env.RequirePublicApi([
        'RF',
        'COMMON',
        ],
        area='FW')

env.RequirePublicApi([
        'FW_CCS',
        ],
        area='FW_CCS')

env.RequirePublicApi([
        'FW_COMMON',
        ],
        area='FW_COMMON')
        
env.RequirePublicApi([
        'FW_GERAN',
        ],
        area='FW_GERAN')

env.RequirePublicApi([
        'LTE',
        ],
        area='LTE')

env.RequirePublicApi([
        'CDMA',
        ],
        area='RFA')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='MMCP')

env.RequirePublicApi([
        'RFDEVICE_INTERFACE',
        ],
        area='RFDEVICE_INTERFACE')

env.RequirePublicApi([
        'MMCP',
        ],
        area='MMCP')

env.RequirePublicApi([
        'SERVICES',
        ],
        area='CORE')

env.RequirePublicApi([
        'MEAS',
        ],
        area='RFA')

env.RequirePublicApi([
        'GERAN',
        ],
        area='FW')

env.RequirePublicApi([
        'FW_GERAN',
        ],
        area='FW_GERAN')

env.RequirePublicApi([
        'GSM',
        ],
        area='RFA')

env.RequirePublicApi([
        'WCDMA',
        'C2K',
        ],
        area='FW')

env.RequirePublicApi([
        'FW_WCDMA',
        ],
        area='FW_WCDMA')

env.RequirePublicApi([
        'FW_C2K',
        ],
        area='FW_C2K')

env.RequirePublicApi([
        'DEBUGTOOLS',
        ],
        area='CORE')

env.RequirePublicApi([
        'LM',
        ],
        area='RFA')

env.RequirePublicApi([
        'GERAN',
        ],
        area='GERAN')

env.RequirePublicApi([
        'MPROC',
        ],
        area='CORE')

env.RequirePublicApi([
        'LTE',
        ],
        area='RFA')

env.RequirePublicApi([
        'MEMORY',
        ],
        area='CORE')

env.RequirePublicApi([
        'WCDMA',
        ],
        area='RFA')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='ONEX')

env.RequirePublicApi([
        'POWER',
        ],
        area='CORE')

env.RequirePublicApi([
        'RFNV',
        ],
        area='RFNV')

env.RequirePublicApi([
        'RFFACTORY',
        ],
        area='RFFACTORY')

env.RequirePublicApi([
        'GNSS',
        ],
        area='RFA')

env.RequirePublicApi([
        'WCDMA',
        ],
        area='WCDMA')

env.RequirePublicApi([
        'TDSCDMA',
        'LTE',
        ],
        area='FW')

env.RequirePublicApi([
        'FW_TDSCDMA',
        ],
        area='FW_TDSCDMA')

env.RequirePublicApi([
        'FW_LTE',
        ],
        area='FW_LTE')

env.RequirePublicApi([
        'MVS',
        ],
        area='AVS')

env.RequirePublicApi([
        'OSYS',
        ],
        area='UTILS')

env.RequirePublicApi([
        'HDR',
        ],
        area='HDR')

env.RequirePublicApi([
        'RFDEVICE_WTR1605',
        ],
        area='RFDEVICE_WTR1605')

env.RequirePublicApi([
        'RFDEVICE_WTR1625',
        ],
        area='RFDEVICE_WTR1625')

env.RequirePublicApi([
        'RFDEVICE_WFR1620',
        ],
        area='RFDEVICE_WFR1620')

env.RequirePublicApi([
        'RFDEVICE_WTR3925',
        ],
        area='RFDEVICE_WTR3925')
		
env.RequirePublicApi([
        'RFDEVICE_QFE2320',
        ],
        area='RFDEVICE_QFE2320')		

env.RequirePublicApi([
        'RFDEVICE_QFE2340',
        ],
        area='RFDEVICE_QFE2340')		

env.RequirePublicApi([
        'TDSCDMA',
        ],
        area='TDSCDMA')

env.RequirePublicApi([
        'TDSCDMA',
        ],
        area='RFA')

env.RequirePublicApi([
        'ONEX',
        ],
        area='ONEX')

env.RequirePublicApi([
        'STORAGE',
        ],
        area='CORE')

env.RequirePublicApi([
        'UIM',
        ],
        area='UIM')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='WCDMA')

env.RequirePublicApi([
        'A2',
        ],
        area='UTILS')

env.RequirePublicApi([
        'GPS',
        ],
        area='GPS')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='UIM')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='HDR')

env.RequirePublicApi([
        'MPOWER',
        ],
        area='MPOWER')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='TDSCDMA')

env.RequirePublicApi([
        'HWENGINES',
        ],
        area='CORE')

env.RequirePublicApi([
        'COMMON',
        ],
        area='UTILS')
        

#manually added
env.RequirePublicApi([
        'MYPS',
        ],
        area='MYPS')


env.RequirePublicApi([
        'RF_TUNER',
        ],
        area='RFA')
		
		
env.RequirePublicApi([
        'RFDEVICE_WTR2605',
        ],
        area='RFDEVICE_WTR2605')
        

env.RequirePublicApi([
        'RFDEVICE_WFR2600',
        ],
        area='RFDEVICE_WFR2600')
        
        
env.RequirePublicApi([
        'RFTECH_LTE',
        ],
        area='RFTECH_LTE')

env.RequirePublicApi([
        'RFRPE',
        ],
        area='QMIMSGS')

env.RequirePublicApi([
        'RFTECH_GSM',
        ],
        area='RFTECH_GSM')
		
env.RequirePublicApi([
        'RFTECH_WCDMA',
        ],
        area='RFTECH_WCDMA')
		
env.RequirePublicApi([
        'RFDEVICE_PA',
        ],
        area='RFDEVICE_PA')

env.RequirePublicApi([
        'RFDEVICE_PAPM',
        ],
        area='RFDEVICE_PAPM')
		
env.RequirePublicApi([
        'RFDEVICE_ASM',
        ],
        area='RFDEVICE_ASM')

env.RequirePublicApi([
        'RFTECH_GNSS',
        ],
        area='RFTECH_GNSS')

env.RequirePublicApi(['LM'], area=env.get('RF_GLOBALS')['RFMODEM_AREA'])

env.RequireRestrictedApi(['VIOLATIONS'])

#uncomment this section if src directory is added

LIB_SOURCES = [ ]  #empy list

SOURCE_FILES = [ ] 

#find all .c
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))

#find all .cpp files 
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))

#find all .s files
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.s'))


for filename in SOURCE_FILES:
        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME, [LIB_SOURCES])

env.LoadSoftwareUnits()
