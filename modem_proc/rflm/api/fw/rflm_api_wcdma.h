/*!
  @file
  rflm_api_wcdma.h

  @brief
  RF LM API definitions for WCDMA
  
  @detail
  Provides the following API's for WFW to call:
  - RXLM and TXLM static startup configuration (via autogenerated LM code)
  - RF tune
  - fine and coarse grain rx-AGC update
  - tx-AGC update (split into gain calculation phase and HW update phase)
  
  @todo
  - add interface for PLL update for frequency error correction

*/

/*==============================================================================

  Copyright (c) 2013 - 2015 Qualcomm Technologies, Inc.  All Rights Reserved.
  Qualcomm Technologies Proprietary and Confidential.

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

==============================================================================*/

/*==============================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

$Header: //components/rel/rflm.mpss/1.10/api/fw/rflm_api_wcdma.h#1 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
07/01/15    zhh    pass the mtpl_adj_db10 to FW
04/27/15    zhh    pass the LUT revert value to WFW
03/12/15    gh     Added THERM_ENABLE event
11/25/14    kai    Add API to skip PA state change for the coming TxAGC update
10/27/14    dw     Added support for rflm_wcdma_rf_send_deadline_script
08/15/14    aro/gh Add FBRX ILPC event
08/08/14    dw     Add TxAGC cleanup API
08/06/14    dw     Added PLL settling/Tx Tune time in the get_tx_info query API for single Tx
06/25/14    bn     Adding rflm_wcdma_enqueue_fbrx_ldo_off_event fn.
06/24/14    gh     Enable MPR changes for DPM.2.0
05/30/14    bn     Moving MPR_bin from FED Calc to FED Update API input
05/15/14    aro    Renamed the Power Meter Trigger Event
05/01/14    ac     dvga_lna_gain change
04/09/14    aa     Added support for FBRX CCS Enable/Disable Scripts 
04/03/14    dw     Added rflm_wcdma_tx_proc_stable_pwr prototype
03/05/14    ac     asdiv event support
02/10/14    kg     Adding Tuner Open Loop Event Support
02/14/14    rmb    Change CGAGC Default LNA State from G2 to G1.
01/31/14    rmb    Added new FED API to get RX information.
01/21/14    ac     api to get the offset time for each event
12/04/13    vbh    Updated LNA gain state events to be device specific
10/28/13    ac     change the return type back to rflm_err_t
10/24/13    kg     Removed rflm_rxagc_api.h include
10/24/13    ac     minor fix for the schedule time calc
10/24/13    ka     Remove bpg interval parameter. Export lna states to fw.
10/22/13    ac     tx_on/off schedule time to be referred by fw
10/21/13    ac     lna_update gtest case crash fix
10/10/13    ac     removing the lna states events
10/10/13    ka     Updated LNA api. Removed obsolete apis.
10/09/13    bn     Adding exp_out_pwr and tpc_step_size to rflm_wcdma_txagc_calc_t
10/09/13    bn     Removing TxAGC DMA events
10/09/13    ka     Update fgagc parameters
10/04/13    ka     Remove undesired headers
10/04/13    ac     addition of few event IDS and ccs related changes
09/19/13    dw     Added RF_WCDMA_EVENT_TXAGC
09/19/13    dw     Export event ID definition
09/09/13    ka     Update rx agc parameters
09/06/13    ka     Update data type. Remove unused header.
09/05/13    ka     Added rflm.h
08/29/13    ka     Added FBRx parameters
07/29/13    ka     Initial version
==============================================================================*/

#ifndef RFLM_API_WCDMA_H
#define RFLM_API_WCDMA_H


/*==============================================================================

                           INCLUDE FILES

==============================================================================*/
#include "rflm_api_cmn.h"
#include "rflm_api_fbrx_fw.h"

/*==============================================================================

                   EXTERNAL DEFINITIONS AND TYPES

==============================================================================*/

/*! @brief Version of the rflm wcdma module.
*/
#define RFLM_API_WCDMA_MAJOR_VERSION            0
#define RFLM_API_WCDMA_MINOR_VERSION            1
#define RFLM_API_WCDMA_VERSION    \
              ((RFLM_API_WCDMA_MAJOR_VERSION << 16) | RFLM_API_WCDMA_MINOR_VERSION )

#define RFLM_WCDMA_LOG_REFERENCE     0x0BCB
#define RFLM_WCDMA_GAIN_CONSTANT     0xA0
#define RFLM_WCDMA_CM_LOG_REFERENCE  0x2C0

#define RFLM_WCDMA_MAX_NB 9

#define RFLM_WCDMA_CGAGC_DEFAULT_LNA_STATE 1

/*to be scheduled 3 bpgs ahead (3*66.67)* 19.2) */
#define RFLM_WCDMA_EVENT_SET_TX_ON_OFF_SCHEDULE (uint32)(3840.192)

#define RFLM_WCDMA_IMMEDIATE_UPDATE 0xFFFFFFFF

/* LNA state constants */
#define RFLM_WCDMA_LNA_STATE_0    0        /* LNA state 0 */
#define RFLM_WCDMA_LNA_STATE_1    1        /* LNA state 1 */
#define RFLM_WCDMA_LNA_STATE_2    2        /* LNA state 2 */
#define RFLM_WCDMA_LNA_STATE_3    3        /* LNA state 3 */
#define RFLM_WCDMA_LNA_STATE_4    4        /* LNA state 4 */
#define RFLM_WCDMA_LNA_STATE_5    5        /* LNA state 5 */
#define RFLM_WCDMA_NUM_LNA_STATES   6
/*----------------------------------------------------------------------------*/
/*! 
    @brief
    Macro to convert TxAGC into dBm10 
*/
#define TXAGC_TO_DBM10(v) ((v) + 512 - 700)

/*----------------------------------------------------------------------------*/
/*! 
    @brief
    Macro to convert dBm10 into TxAGC
*/
#define DBM10_TO_TXAGC(v) ((v) - 512 + 700)

/*----------------------------------------------------------------------------*/
/*! 
    @brief
    RF WCDMA CCS Event ID enum definition
 
    @details
    This enum defines the RF event ID associated with a (set of) device script
    execution for a given scenario.
    Note 1: Some of the event are not used but carried over from Dime modem in
    case it might get used in the future.
    Note 2: All events here are static (i.e. no fix up update dynamically),
    dynamic event is divided to multiple static events per LM handle
    Note 3: RF_WCDMA_EVENT_RX_SET_LNA and  RF_WCDMA_EVENT_TXAGC are a sepcial events.
    LNA script and TxAGC scripts are handled by common RxAGC module, but keep
    generic event definitions here for event building purpose and CCS memory
    allocation purpose
*/

typedef enum
{
  /*----------------------------------*/
  /*! Rx Init Event .*/
  RF_WCDMA_EVENT_RX_INIT,      
  /*----------------------------------*/
  /*! Rx Sleep Event .*/           
  RF_WCDMA_EVENT_RX_SLEEP,   
  /*----------------------------------*/
  /*! Rx Tune Event .*/    
  RF_WCDMA_EVENT_RX_TUNE, 
  /*----------------------------------*/
  /*! Rx Select bandwidth Event .*/
  RF_WCDMA_EVENT_RX_SELECT_BW, 
  /*----------------------------------*/
  /*! Rx Set band Event .*/   
  RF_WCDMA_EVENT_RX_SET_BAND,  
  /*----------------------------------*/
  /*! Rx Set LNA gain state device 0.*/   
  RF_WCDMA_EVENT_RX_SET_LNA,     
  /*----------------------------------*/
  /*! Rx Set LNA gain state device 1.*/   
  RF_WCDMA_EVENT_RX_SET_LNA_1,     
  /*----------------------------------*/
  /*! Rx Set LNA gain state device 2.*/   
  RF_WCDMA_EVENT_RX_SET_LNA_2,     
  /*----------------------------------*/
  /*! Rx Set LNA gain state device 3.*/   
  RF_WCDMA_EVENT_RX_SET_LNA_3,     
  /*----------------------------------*/
  /*! Tx Init Event .*/           
  RF_WCDMA_EVENT_TX_INIT,  
  /*----------------------------------*/
  /*! Tx Set band Event .*/
  RF_WCDMA_EVENT_TX_SET_BAND,
  /*----------------------------------*/
  /*! Tx Tune Event .*/
  RF_WCDMA_EVENT_TX_TUNE,
  /*----------------------------------*/
  /*! Tx Disable Event .*/
  RF_WCDMA_EVENT_TX_DISABLE,
  /*----------------------------------*/
  /*! Tx AGC Event .*/
  RF_WCDMA_EVENT_TXAGC,
  /*----------------------------------*/
  /*! HDET Write Event .*/
  RF_WCDMA_EVENT_TX_METER_TRIGGER,
  /*----------------------------------*/
  /*! Tx(RF)/PA On Event .*/
  RF_WCDMA_EVENT_SET_TX_ON,
  /*----------------------------------*/
  /*! Tx(RF)/PA OFF Event .*/
  RF_WCDMA_EVENT_SET_TX_OFF,
  /*----------------------------------*/
  /*! DTx Enable Event (Toggle Tx PLL OFF).*/
  RF_WCDMA_EVENT_ENABLE_DTX,
  /*----------------------------------*/
  /*! DTx Disable Event (Toggle Tx PLL ON).*/
  RF_WCDMA_EVENT_DISABLE_DTX,
  /*----------------------------------*/
  /*! DRx Enable Event (Put Rx to LPM).*/
  RF_WCDMA_EVENT_ENABLE_DRX,
  /*----------------------------------*/
  /*! DRx Disable Event (Bring Rx out of LPM).*/
  RF_WCDMA_EVENT_DISABLE_DRX,
  /*----------------------------------*/
  /*! Rx Measurement Event: WXE preload */    
  RF_WCDMA_EVENT_RX_MEAS_PRELOAD, 
  /*----------------------------------*/
  /*! Rx Measurement Event: Trigger execution */    
  RF_WCDMA_EVENT_RX_MEAS_TRIGGER, 
  /*----------------------------------*/
  /*! AOL Event: Trigger execution */    
  RF_WCDMA_EVENT_TUNER_OPEN_LOOP, 
  /*----------------------------------*/
  /*!asdiv_event*/    
  RF_WCDMA_EVENT_ENABLE_ASDIV, 
  /*----------------------------------*/
  /*!FBRx enable_event*/    
  RF_WCDMA_EVENT_ENABLE_FBRX, 
  /*----------------------------------*/
  /*!FBRx disable event*/    
  RF_WCDMA_EVENT_DISABLE_FBRX, 
  /*----------------------------------*/
  /*!FBRx ILPC readback event*/    
  RF_WCDMA_EVENT_FBRX_ILPC_READBACK, 
  /*----------------------------------*/
  /*!THERM enable event*/    
  RF_WCDMA_EVENT_THERM_ENABLE,
  /*----------------------------------*/
  /*! Number of events */
  RF_WCDMA_EVENT_NUM,
  /*----------------------------------*/
  /*! Max event */
  RF_WCDMA_EVENT_MAX=RF_WCDMA_EVENT_NUM

} rflm_wcdma_event_id_type;


/*==============================================================================

  RF tune related API input/output structure definitions
  
==============================================================================*/

/*==============================================================================
  For rflm_wcdma_rf_send_script
==============================================================================*/
/*! @brief  Input parameters for rflm_wcdma_rf_sript API */
typedef struct
{
  rflm_ustmr_t   effect_time;        ///< Time for script to take effect
  boolean         immediate_flag;     ///< Flag for immediate effect_time
  int8            event_id;          ///< id of script to run    
} rflm_wcdma_rf_send_script_in_t;


/*! @brief  Output parameters for rflm_wcdma_rf_send_script API */
typedef struct
{
  rflm_ustmr_t   est_done_time;       ///< estimated completion time  
} rflm_wcdma_rf_send_script_out_t;

/*==============================================================================
  For rflm_wcdma_rf_send_deadline_script
==============================================================================*/
/*! @brief  Input parameters for rflm_wcdma_rf_sript API */
typedef struct
{
  rflm_ustmr_t    effect_time;        ///< Time for script to take effect (deadline time)
  rflm_ustmr_t    start_time;         ///< Time at which its safe to beginn programming
  boolean         immediate_flag;     ///< Flag for immediate effect_time
  int8            event_id;          ///< id of script to run    
} rflm_wcdma_rf_send_deadline_script_in_t;

/*! @brief  Output parameters for rflm_wcdma_rf_send_script API */
typedef struct
{
  rflm_ustmr_t   est_done_time;       ///< estimated completion time  
} rflm_wcdma_rf_send_deadline_script_out_t;

/*==============================================================================
  For rflm_wcdma_get_event_offset_time()
==============================================================================*/
/*! @brief  Input parameters for rflm_wcdma_get_event_offset_time API */
typedef struct
{
  int8            event_id;          ///< Event script ID   
} rflm_wcdma_get_event_offset_time_in_t;
 
/*! @brief  Output parameters for rflm_wcdma_get_event_offset_time API */
typedef struct
{
  rflm_ustmr_t   event_offset_time;       ///< minimum time offset to execut the event
} rflm_wcdma_get_event_offset_time_out_t;
 
/*==============================================================================
  For rflm_wcdma_tx_proc_stable_pwr()
==============================================================================*/
/*! @brief  Input parameters for rflm_wcdma_tx_proc_stable_pwr API */
typedef struct
{
  rflm_db10_t  tx_pwr;                     ///< TxAGC of the stable power period
  rflm_ustmr_t tx_pwr_stable_start_time;   ///< Start time of the Tx power stable period, i.e. BPG boundary of current TxAGC update + 25us exclusion gap
  rflm_ustmr_t tx_pwr_stable_stop_time;    ///< Stop time of the Tx power stable period, i.e.  BPG boundary of next TxAGC update - 25us exclusion gap  
} rflm_wcdma_tx_proc_in_t;

/*==============================================================================
  For rflm_wcdma_txagc_cleanup
==============================================================================*/
/*! @brief  Input parameters for rflm_wcdma_txagc_cleanup API */
typedef struct
{
  rflm_ustmr_t        txagc_effect_time;  ///< Effect Time for the last TxAGC 
  rflm_ustmr_t        fbrx_trigger_time;  ///< Trigger time of last FBRx
} rflm_wcdma_txagc_cleanup_in_t;

/*==============================================================================

  Coarse and fine grain rx-agc API input/output structure definitions
  
==============================================================================*/

/*==============================================================================
  For rflm_wcdma_rx_cgagc_update
==============================================================================*/
/*! @brief  Input parameters for rflm_wcdma_rx_cgagc_update API */
typedef struct
{
  rflm_ustmr_t    effect_time;        ///< Time for gain update to take effect  
  int32           nb_ff_pwr[RFLM_WCDMA_MAX_NB];          ///< NB feedforward power
  int8            nb_index[RFLM_WCDMA_MAX_NB];           ///< NB chain index
  uint8           num_nb;                  ///(number of valid entries in nb_index[] and agc_value[]
  boolean         apply_lna_update;
} rflm_wcdma_rx_cgagc_update_in_t;


/*! @brief  Output parameters for rflm_wcdma_rx_cgagc_update API */
typedef struct
{
  int8            lna_state;          ///< updated lna state
  int16           dvga_gain[RFLM_WCDMA_MAX_NB];          ///< updated dvga gain
  int16           dvga_lna_offset[RFLM_WCDMA_MAX_NB];    ///< DVGA offset - LNA offset (from cal data)
} rflm_wcdma_rx_cgagc_update_out_t;


/*==============================================================================
  For rflm_wcdma_rx_fgagc_update
==============================================================================*/
/*! @brief  Input parameters for rflm_wcdma_rx_fgagc_update API */
typedef struct
{
  rflm_ustmr_t    effect_time;                   ///< Time for gain update to take effect  
  int16           agc_value[RFLM_WCDMA_MAX_NB];  ///< value to perform agc on
  int8            nb_index[RFLM_WCDMA_MAX_NB];   ///< NB chain index 
  uint8           num_nb;                        ///(number of valid entries in nb_index[] and agc_value[]
  boolean         apply_lna_update;              ///< Flag indicating if LNA transaction should be sent
  uint32          wb_pwr;                        ///< wideband power
  boolean         jammer_det_en;                 ///< indicates if jammer detection enabled
} rflm_wcdma_rx_fgagc_update_in_t;

/*! @brief  Output parameters for rflm_wcdma_rx_fgagc_update API */
typedef struct
{  
  int8            lna_state;          ///< updated lna state
  int16           dvga_gain[RFLM_WCDMA_MAX_NB];          ///< updated dvga gain
} rflm_wcdma_rx_fgagc_update_out_t;

/*==============================================================================
  For rflm_wcdma_rx_dvga_lna_offset_update function.
==============================================================================*/
/*! @brief  Input parameters for rflm_wcdma_rx_fgagc_update API */
typedef struct
{
  int8            lna_state;          ///get the lna state info
  int8            nb_index[RFLM_WCDMA_MAX_NB];   ///< NB chain index 
  uint8           num_nb;                        ///(number of valid entries in nb_index[] and agc_value[]
} rflm_wcdma_rx_dvga_lna_offset_update_in_t;

/*! @brief  Output parameters for rflm_wcdma_rx_fgagc_update API */
typedef struct
{  
  int16           dvga_lna_offset[RFLM_WCDMA_MAX_NB];          ///< updated dvga gain
} rflm_wcdma_rx_dvga_lna_offset_update_out_t;

/*==============================================================================
  For rflm_wcdma_rx_lna_update
==============================================================================*/
/*! @brief  Input parameters for rflm_wcdma_rx_lna_update API */
typedef struct
{
  int8   lna_state;
  uint32 action_time;
  } rflm_wcdma_rx_lna_update_in_t;

/*! @brief  Output parameters for rflm_wcdma_rx_lna_update API */
typedef struct
{  
  int8            lna_state;     
} rflm_wcdma_rx_lna_update_out_t;



/*==============================================================================

  tx-agc related API input/output structure definitions
  
==============================================================================*/

/*==============================================================================
  For rflm_wcdma_txagc_calc
==============================================================================*/
/*! @brief  Input parameters for rflm_wcdma_txagc_calc API */
typedef struct
{
  rflm_ustmr_t        effect_time;        ///< Time for gain update to take effect
  int8                waveform_type;      ///< WCDMA waveform type: 0->R'99, 1->HSDPA, 2->HSUPA, 3->HSDPA&HSUPA
  boolean             fbrx_available;
  rflm_drif_in_cfg_t  drif_in_cfg;    ///< DRIF input config. Calc function may clear DRIF lmem.
  rflm_db10_t         exp_out_pwr;    ///< expected output power to precompute txagc and fixup
  int16               tpc_step_size;  ///< TPC power control step size                                    
} rflm_wcdma_txagc_calc_in_t;


/*! @brief  Output parameters for rflm_wcdma_txagc_calc API */
typedef struct
{
  rflm_fbrx_dynamic_param_t fbrx_params;
  rflm_db10_t               ilpc_error_db10;
  rflm_db10_t               mtpl_adj_db10;
} rflm_wcdma_txagc_calc_out_t;


/*==============================================================================
  For rflm_wcdma_txagc_update
==============================================================================*/
/*! @brief  Input parameters for rflm_wcdma_txagc_update API */
typedef struct
{
  rflm_db10_t        out_pwr;        ///< Desired output power
  int16              mpr_bin;              ///< index into MPR array
  boolean            nextBpgHasPwrUpdate;  ///< Indicate if next BPG has TX power update or not
} rflm_wcdma_txagc_update_in_t;


/*! @brief  Output parameters for rflm_wcdma_txagc_update API */
typedef struct
{
  int8                            pa_state;       ///< PA state index for logging
  int8                            rgi_row_index;  ///< RGI index for logging
  int8                            smps_value;     ///< SMPS value for logging    
  rflm_drif_out_cfg_t             drif_out_cfg;   ///< DRIF output config. Cluster mask,table pointers
  boolean                         run_fbrx;
  rflm_fbrx_pwr_dependent_param_t fbrx_pwr_dep_params; 
} rflm_wcdma_txagc_update_out_t;

/*! @brief  Output parameters for rflm_wcdma_get_rx_info API */
typedef struct
{  
  /*! Downlink LO frequency in Q6 Hz */
  uint64 dl_freq;

  /*! inverse of the downlink LO frequency to calculate ppm, 2^33/Downlink_frequency, Q19 */
  uint32 inv_dl_freq;

  /*! Rx agc min value */
  int16 rx_agc_min[RFLM_WCDMA_NUM_LNA_STATES];

  /*! Rx agc max value */
  int16 rx_agc_max[RFLM_WCDMA_NUM_LNA_STATES];

} rflm_wcdma_get_rx_info_out_t;

/*! @brief  Input parameters for rflm_wcdma_get_tx_info API */
typedef struct
{
  /*! MPR bin index */
  int16 mpr_bin;            ///< index into MPR array

}rflm_wcdma_get_tx_info_in_t;


/*! @brief  Output parameters for rflm_wcdma_get_tx_info API */
typedef struct
{
  /*! MPR backoff value based mpr_bin */
  int16 mpr_backoff;     ///< MPR (max power reduction amount)

  /*! MPR beta scaling value based mpr_bin */
  int16 mpr_beta_scaling; /// <MPR beta scaling amount

  /* WTR Tx PLL settling time in STMR unit */
  uint32 pll_settling_time;

  /* Tx tune script execution time in STMR unit */
  uint32 tx_tune_time;

} rflm_wcdma_get_tx_info_out_t;

/*==============================================================================

                    EXTERNAL FUNCTION PROTOTYPES

==============================================================================*/

#ifdef __cplusplus
extern "C" {
#endif


/*==============================================================================
  RF scripts related API's prototypes
==============================================================================*/

/*----------------------------------------------------------------------------*/
/*!
  @brief
  Sends an RF control script.

  @details
  This API tells LM to execute a generic RF control script, for example a
  tuning script or IRAT measurement script.

  @param handle : Handle containing script data and control information
  @param *in    : pointer to input data structure. Contains Event ID 
  @param *out   : pointer to data structure where results will be returned.

  @retval Returns an error status



===========================================================================*/
extern rflm_err_t rflm_wcdma_rf_send_script( rflm_handle_rx_t handle,
                                             rflm_wcdma_rf_send_script_in_t  *in,
                                             rflm_wcdma_rf_send_script_out_t *out );

 
/*----------------------------------------------------------------------------*/
/*!
  @brief
  API to get RF event execution time offset
 
  @details
  This API tells FW for a given RF event, what is the minimum time offset
  from the effect time to call rflm_wcdma_rf_send_script() API for RF script execution.
  It shall typically account for the script execution time + any settling time required
 
  @param handle : Handle containing script data and control information
  @param *in    : pointer to input data structure. Contains Event ID 
  @param *out   : pointer to data structure where results will be returned.
 
  @retval Returns an error status
 
 
 
===========================================================================*/
extern rflm_err_t rflm_wcdma_get_event_offset_time( rflm_handle_rx_t handle,
                                                    rflm_wcdma_get_event_offset_time_in_t  *in,
                                                    rflm_wcdma_get_event_offset_time_out_t *out );
 
/*==============================================================================
  rx-AGC related API's
==============================================================================*/

/*----------------------------------------------------------------------------*/
/*!
  @brief
  CGAGC update function.

  @details
  This API tells LM to update the coarse-grain AGC.
  TBD - does this update DVGA HW reg?

  @param handle : Rx Handle 
  @param *in    : pointer to input data structure. Contains
                  NB index, NB FF power, and action time.
  @param *out   : pointer to data structure where results will be returned.
                  Contains DVGA gain, DVGA+LNA offset

  @retval Returns an error status

  @pre
  rflm_wcdma_rx_lna_update() must be called to set default LNA state

===========================================================================*/
extern rflm_err_t rflm_wcdma_rx_cgagc_update( rflm_handle_rx_t handle,
                                        rflm_wcdma_rx_cgagc_update_in_t  *in,
                                        rflm_wcdma_rx_cgagc_update_out_t *out );

/*----------------------------------------------------------------------------*/
/*!
  @brief
  FGAGC update function.

  @details
  This API tells LM to update the fine-grain AGC.

  @param handle : Rx Handle 
  @param *in    : pointer to input data structure. Contains NB index,
                  Rx AGC value, and action time.
  @param *out   : pointer to data structure where results will be returned.          

  @retval Returns an error status



===========================================================================*/
extern rflm_err_t rflm_wcdma_rx_fgagc_update( rflm_handle_rx_t handle,
                                        rflm_wcdma_rx_fgagc_update_in_t  *in,
                                        rflm_wcdma_rx_fgagc_update_out_t *out );

/*----------------------------------------------------------------------------*/
/*!
  @brief
  dvga_lna_offset_update function.

  @details
 function that returns DVGA offsets (sum of offsets) for all Narrow Bands mapped
 to an Rx Handle,assuming that the currently active LNA gain state will stay the same.
 WFW will invoke this API in thread context to retrieve current DVGA offsets and then
 store them in TCM whenever there is LNA state change.

  @param handle : Rx Handle 
  @param *in    : pointer to input data structure. Contains NB index,
                  lna_state
  @param *out   : pointer to data structure where results will be returned.
                  NOTE: out->dvga_lna_gain[] is sorted by narrowband index

  @retval Returns an error status



===========================================================================*/
rflm_err_t rflm_wcdma_rx_dvga_lna_offset_update( rflm_handle_rx_t handle,
                                        rflm_wcdma_rx_dvga_lna_offset_update_in_t  *in,
                                        rflm_wcdma_rx_dvga_lna_offset_update_out_t *out );

/*----------------------------------------------------------------------------*/
/*!
  @brief
  LNA state update function.

  @details
  This API tells LM to set the LNA state to the default value, independent of the
  normal LNA state machine operation. It is intended for use to set the
  default LNA state before CGAGC is started.

  @param handle : Rx Handle 
  @param *in    : pointer to input data structure.
  @param *out   : pointer to data structure where results will be returned.          

  @retval Returns an error status



===========================================================================*/
extern rflm_err_t rflm_wcdma_rx_lna_update( rflm_handle_rx_t handle,
                                        rflm_wcdma_rx_lna_update_in_t  *in,
                                        rflm_wcdma_rx_lna_update_out_t *out
                                         );

/*==============================================================================
  tx-AGC related API's
==============================================================================*/

/*----------------------------------------------------------------------------*/
/*!
  @brief
  Tx AGC calculation function.

  @details
  Calculates Tx AGC template in preparation for Tx AGC update.

  @param handle : Tx Handle 
  @param *in    : pointer to input data structure. Contains action time,
                  tx agc value, MPR bin, voice mode flag, and hypothesis index.
  @param *out   : pointer to data structure where results will be returned.        

  @retval Returns an error status



===========================================================================*/
extern rflm_err_t rflm_wcdma_txagc_calc(  rflm_handle_tx_t handle,
                                        rflm_wcdma_txagc_calc_in_t  *in,
                                        rflm_wcdma_txagc_calc_out_t *out );

/*----------------------------------------------------------------------------*/
/*!
  @brief
  Tx AGC update function.

  @details
  Prepares and sends the Tx AGC update.

  @param handle : Tx Handle 
  @param *in    : pointer to input data structure. Contains action time
                  and hypothesis index.
  @param *out   : pointer to data structure where results will be returned.   
                  Contains PA state, RGI, and SMPS for logging purposes.     

  @retval Returns an error status

  @pre 
  rflm_wcdma_txagc_calc() must be called

===========================================================================*/
extern rflm_err_t rflm_wcdma_txagc_update( rflm_handle_tx_t handle,
                                        rflm_wcdma_txagc_update_in_t  *in,
                                        rflm_wcdma_txagc_update_out_t *out );
/*==============================================================================
  Get RF Rx info API's prototypes
==============================================================================*/

/*----------------------------------------------------------------------------*/
/*!
  @brief
  Query API to get Rx info based on the RFLM handle

  @details
  This API provides FW the necessary RF-related Rx information it needs but not
  included in other Rx RFLM API routine.


  @param handle : Handle containing script data and control information 
  @param *out   : pointer to data structure where results will be returned.

  @retval Returns an error status



===========================================================================*/
extern rflm_err_t rflm_wcdma_get_rx_info( rflm_handle_rx_t handle,
                                          rflm_wcdma_get_rx_info_out_t *out );

/*==============================================================================
  Get RF Tx info API's prototypes
==============================================================================*/

/*----------------------------------------------------------------------------*/
/*!
  @brief
  Query API to get Tx info based on the RFLM handle

  @details
  This API provides FW the necessary RF-related Tx information it needs but not
  included in other Tx RFLM API routine.


  @param handle : Handle containing script data and control information 
  @param *in     : pointer to data structure where input params are provided.
  @param *out   : pointer to data structure where results will be returned.

  @retval Returns an error status



===========================================================================*/
extern rflm_err_t rflm_wcdma_get_tx_info( rflm_handle_tx_t handle,
                                          rflm_wcdma_get_tx_info_in_t *in,
                                          rflm_wcdma_get_tx_info_out_t *out );


/*==============================================================================
  Tx proc function at stable power
==============================================================================*/

/*----------------------------------------------------------------------------*/
/*!
  @brief
  API to process RF Tx related events at stable power

  @details
  Process RF Tx related events (HDET, Tuner Close loop) that required to be
  triggered when Tx power is stable. FW is expected to call the API when there
  is no expected TxAGC update in at least 4BPGs, at the rate of every slot or
  roughly equivalent period.

  @param *in    : pointer to input data structure.

  @retval Returns an error status



===========================================================================*/
extern rflm_err_t rflm_wcdma_tx_proc_stable_pwr( rflm_handle_tx_t handle,
                                                 rflm_wcdma_tx_proc_in_t  *in);

/*----------------------------------------------------------------------------*/
/*!
  @brief
  API to queue the FBRX LDO OFF CCS Events 

  @param handle : Tx handle

  @retval none
===========================================================================*/
void rflm_wcdma_enqueue_fbrx_ldo_off_event( rflm_handle_tx_t handle,
                                            rflm_ustmr_t txagc_effect_time,
                                            boolean enable_offset);

/*==============================================================================
  Trflm_wcdma_txagc_cleanup
==============================================================================*/
/*----------------------------------------------------------------------------*/
/*!
  @brief
  API to do TxAGC cleanup
 
  @details
  Do necessary clean up of the last TxAGC update, to be called after TxAGC update is
  complete and FBRx triggered to common FW. The API will schedule FBRx LDO off event
  and other necessary TxAGC cleanups
 
  @param *in    : pointer to input data structure.
 
  @retval Returns an error status
 
 
 
===========================================================================*/
extern rflm_err_t rflm_wcdma_txagc_cleanup( rflm_handle_tx_t handle,
                                            rflm_wcdma_txagc_cleanup_in_t  *in);

/*==============================================================================
  RF scripts related API's prototypes
==============================================================================*/

/*----------------------------------------------------------------------------*/
/*!
  @brief
  Sends an RF control script.

  @details
  This is a new API modified from the original rflm_wcdma_rf_send_script() API
  for deadline based RF programming. It requires additional time parameter to tell
  FED the time when it safe to beginning programming in addition to the effect time
  when the HW is expected to be settled


  @param handle : Handle containing script data and control information
  @param *in    : pointer to input data structure. Contains Event ID 
  @param *out   : pointer to data structure where results will be returned.

  @retval Returns an error status



===========================================================================*/
extern rflm_err_t rflm_wcdma_rf_send_deadline_script( rflm_handle_rx_t handle_id,
                                             rflm_wcdma_rf_send_deadline_script_in_t  *in,
                                             rflm_wcdma_rf_send_deadline_script_out_t *out );

/*----------------------------------------------------------------------------*/
/*!
  @brief
  API to skip PA state machine for the coming TxAGC update

  @details
  This API will be called by FW in certain scenario where system is sensitivie to the
  Tx glitch caused by PA state change. It will set internal flag for the following TxAGC
  update to skip PA state machine update. FW will call the API again to clear the flag when
  its safe to change PA state again.
 

  @param handle : Handle containing script data and control information
  @param skip_pa_stm: flag to skip PA state machine

  @retval Returns an error status

===========================================================================*/
extern rflm_err_t rflm_wcdma_txagc_skip_pa_stm(rflm_handle_tx_t handle_id, boolean skip_pa_stm);

/*----------------------------------------------------------------------------*/
/*!
  @brief
  API to get the mtpl_adj_db10

  @details
  This API will be called by SW when it want to adjust the mtpl during HDET Loop and Temp
  comp.
 

  @param handle : Handle containing script data and control information

  @retval Returns mtpl_adj_db10

===========================================================================*/
extern int16 rflm_wcdma_txagc_get_mtpl_adj_db10(rflm_handle_tx_t handle);

#ifdef __cplusplus
} // extern "C"
#endif

#endif /* RFLM_API_WCDMA_H */
