
#====include path optimized=====================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2011 - 2013 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/rfmodem_jolokia.mpss/1.10/rflm/ccs/rf_ccs/build/rfmodem_jolokia_rflm_ccs_rf_ccs.scons#1 $
# $DateTime: 2020/04/16 12:27:55 $ 
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 06/02/14   dr      Adding support for JOLOKIA
# 11/19/13   kg      Import os to fix strip/pack error 
# 10/26/13   Saul    CCS. Enable/disable clocks for startup
# 10/02/13   ra      Added Publish CCS API support
# 09/11/13   ra      Disable MOB support - temporary
# 08/26/13   ra      Removed conditional compile of source files
# 07/31/13   ra      Added support for source and library files
# 02/04/13   dyc     Updated qualifiers for pack.
# 09/12/12   dej     Moved support for msm8x26 to separate Dime and Triton targets
# 09/10/12   kb      Added support for msm8x26
# 04/24/12   jfc     Return if not Dime target
# 05/17/11   vrb     Added call to load SW units
# 04/23/11   prp     Created
#===============================================================================
import os

Import('env')

env = env.Clone()

# Method to abort processing of this file, if not required for current air interface mode, etc
#if ( (USES_TEST_FLAG1 in env and USES_TEST_FLAG2 not in env) or USES_TEST_FLAG3 not in env)):
#   Return( )

LIB_NAME        = 'rfmodem_dimepm_rflm_rf_ccs'
IMAGE_SOURCES   = ['MODEM_MODEM', 'MOB_RFA']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'


from glob import glob




#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."


#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

env.Append(CPPDEFINES = ['MSG_BT_SSID_DFLT=MSG_SSID_RF',]) 

if env.PathExists('${BUILD_ROOT}/rfa'):
  env.Replace(RFMODEM_DIMEPM_ROOT = '${INC_ROOT}/rfmodem_jolokia')


env.PublishPrivateApi('RFMODEM_DIMEPM_PRIVATE_RFLM_CCS',[
	'${RFMODEM_DIMEPM_ROOT}/rflm/ccs/rf_ccs/protected',
        '${RFMODEM_DIMEPM_ROOT}/rflm/ccs/downloader/protected',
	'${RFMODEM_DIMEPM_ROOT}/rflm/ccs/hwio',
        ])

env.RequirePublicApi([
    'RFLM'],
     area='RFLM')
env.RequirePublicApi([
    'BUSES', 
    'KERNEL',
    'SYSTEMDRIVERS', 
    ],
    area='CORE')

env.RequirePublicApi(['CCS'], area='RFMODEM_DIMEPM')

env.RequirePublicApi(['RFMODEM_DIMEPM_PRIVATE_RFLM_CCS'])


env.RequireProtectedApi(['RFMODEM_DIMEPM_PRIVATE_RFLM_CCS'])
#uncomment this section if src directory is added

LIB_SOURCES = [ ]  #empy list
SOURCE_FILES = [ ] 
#find all .c
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))
#find all .cpp files 
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))
#find all .cc files 
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cc'))
#find all .s files
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.s'))
if 'RFA_MSDEV' == env['IMAGE_NAME']:
      SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.c'))
      SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))
      SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cc'))
      SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.s'))

for filename in SOURCE_FILES:
   LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))
env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME, [LIB_SOURCES])

#uncomment this section if protected directory is added

env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that AddBinaryLibrary can be launched
LIB_SOURCES = []  #empy list

if 'USES_NO_STRIP_NO_ODM' in env:

        SOURCE_FILES = [ ] 

        #find all .c
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.c'))

        #find all .cpp files 
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))

        #find all .cc files 
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cc'))

        #find all .s files
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.s'))


        for filename in SOURCE_FILES:
                LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that the pre-built library will be added to the list file
if SOURCE_FILES or os.path.exists(env.subst('${BUILDPATH}/'+LIB_NAME+'_protected'+'${LIBSUFFIX}')):
      env.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_protected',[
         LIB_SOURCES,
         ], pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])


env.LoadSoftwareUnits()
