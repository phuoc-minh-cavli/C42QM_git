#ifndef SIM_INTERNAL_SERVICE_01_H
#define SIM_INTERNAL_SERVICE_01_H
/**
  @file subscriber_identity_module_internal_v01.h
  
  @brief This is the public header file which defines the sim_internal service Data structures.

  This header file defines the types and structures that were defined in 
  sim_internal. It contains the constant values defined, enums, structures,
  messages, and service message IDs (in that order) Structures that were 
  defined in the IDL as messages contain mandatory elements, optional 
  elements, a combination of mandatory and optional elements (mandatory 
  always come before optionals in the structure), or nothing (null message)
   
  An optional element in a message is preceded by a uint8_t value that must be
  set to true if the element is going to be included. When decoding a received
  message, the uint8_t values will be set to true or false by the decode
  routine, and should be checked before accessing the values that they
  correspond to. 
   
  Variable sized arrays are defined as static sized arrays with an unsigned
  integer (32 bit) preceding it that must be set to the number of elements
  in the array that are valid. For Example:
   
  uint32_t test_opaque_len;
  uint8_t test_opaque[16];
   
  If only 4 elements are added to test_opaque[] then test_opaque_len must be
  set to 4 before sending the message.  When decoding, the _len value is set 
  by the decode routine and should be checked so that the correct number of 
  elements in the array will be accessed. 

*/
/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*
  Copyright (c) 2012-2013 Qualcomm Technologies, Inc.
  All rights reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.


  $Header: //components/rel/qmimsgs.mpss/4.3.4/sim_internal/api/subscriber_identity_module_internal_v01.h#1 $
 *====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*/
/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====* 
 *THIS IS AN AUTO GENERATED FILE. DO NOT ALTER IN ANY WAY 
 *====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*/

/* This file was generated with Tool version 6.2 
   It was generated on: Wed Jul 24 2013 (Spin 1)
   From IDL File: subscriber_identity_module_internal_v01.idl */

/** @defgroup sim_internal_qmi_consts Constant values defined in the IDL */
/** @defgroup sim_internal_qmi_msg_ids Constant values for QMI message IDs */
/** @defgroup sim_internal_qmi_enums Enumerated types used in QMI messages */
/** @defgroup sim_internal_qmi_messages Structures sent as QMI messages */
/** @defgroup sim_internal_qmi_aggregates Aggregate types used in QMI messages */
/** @defgroup sim_internal_qmi_accessor Accessor for QMI service object */
/** @defgroup sim_internal_qmi_version Constant values for versioning information */

#include <stdint.h>
#include "qmi_idl_lib.h"
#include "common_v01.h"


#ifdef __cplusplus
extern "C" {
#endif

/** @addtogroup sim_internal_qmi_version 
    @{ 
  */ 
/** Major Version Number of the IDL used to generate this file */
#define SIM_INTERNAL_V01_IDL_MAJOR_VERS 0x01
/** Revision Number of the IDL used to generate this file */
#define SIM_INTERNAL_V01_IDL_MINOR_VERS 0x08
/** Major Version Number of the qmi_idl_compiler used to generate this file */
#define SIM_INTERNAL_V01_IDL_TOOL_VERS 0x06
/** Maximum Defined Message ID */
#define SIM_INTERNAL_V01_MAX_MESSAGE_ID 0x004A;
/** 
    @} 
  */


/** @addtogroup sim_internal_qmi_consts 
    @{ 
  */
#define QMI_SIM_INTERNAL_MMGSDI_DATA_MAX_LENGTH_V01 255
#define QMI_SIM_INTERNAL_MMGSDI_LARGE_DATA_MAX_LENGTH_V01 4000
#define QMI_SIM_INTERNAL_MMGSDI_MAX_APP_INFO_V01 9
#define QMI_SIM_INTERNAL_MMGSDI_MAX_AID_LEN_V01 32
#define QMI_SIM_INTERNAL_MMGSDI_REFRESH_FILE_MAX_LENGTH_V01 50
#define QMI_SIM_INTERNAL_MMGSDI_REFRESH_PATH_MAX_LENGTH_V01 255
#define QMI_SIM_INTERNAL_MMGSDI_MAX_PATH_LEN_V01 5
#define QMI_SIM_INTERNAL_MMGSDI_MAX_FILE_PATHS_V01 2
#define QMI_SIM_INTERNAL_MMGSDI_MAX_FILE_LIST_V01 255
#define QMI_SIM_INTERNAL_MMGSDI_FILE_ID_SIZE_V01 2
#define QMI_SIM_INTERNAL_MMGSDI_PIN_MAX_LENGTH_V01 10
#define QMI_SIM_INTERNAL_MMGSDI_AUTH_RESP_MAX_LENGTH_V01 256
#define QMI_SIM_INTERNAL_MMGSDI_GSM_ALGO_SRES_LEN_V01 4
#define QMI_SIM_INTERNAL_MMGSDI_GSM_ALGO_KC_LEN_V01 8
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_RETURN_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_SUCCESS_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_INCORRECT_PARAMS_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_CMD_QUEUE_FULL_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_ERROR_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_ACCESS_DENIED_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_NOT_FOUND_V01 = 0x05, 
  SIM_INTERNAL_MMGSDI_INCOMPAT_PIN_STATUS_V01 = 0x06, 
  SIM_INTERNAL_MMGSDI_INCORRECT_CODE_V01 = 0x07, 
  SIM_INTERNAL_MMGSDI_CODE_BLOCKED_V01 = 0x08, 
  SIM_INTERNAL_MMGSDI_INCREASE_IMPOSSIBLE_V01 = 0x09, 
  SIM_INTERNAL_MMGSDI_NOT_SUPPORTED_V01 = 0x0A, 
  SIM_INTERNAL_MMGSDI_NOT_INIT_V01 = 0x0B, 
  SIM_INTERNAL_MMGSDI_SUCCESS_BUT_ILLEGAL_SIM_V01 = 0x0C, 
  SIM_INTERNAL_MMGSDI_AUTH_ERROR_INCORRECT_MAC_V01 = 0x0D, 
  SIM_INTERNAL_MMGSDI_AUTH_ERROR_GSM_CNTXT_NOT_SUP_V01 = 0x0E, 
  SIM_INTERNAL_MMGSDI_SIM_TECHNICAL_PROBLEMS_V01 = 0x0F, 
  SIM_INTERNAL_MMGSDI_NO_EF_SELECTED_V01 = 0x10, 
  SIM_INTERNAL_MMGSDI_EF_INCONSISTENT_V01 = 0x11, 
  SIM_INTERNAL_MMGSDI_ERROR_NO_EVENT_NEEDED_V01 = 0x12, 
  SIM_INTERNAL_MMGSDI_PIN_NOT_INITIALIZED_V01 = 0x13, 
  SIM_INTERNAL_MMGSDI_UNKNOWN_INST_CLASS_V01 = 0x14, 
  SIM_INTERNAL_MMGSDI_WARNING_NO_INFO_GIVEN_V01 = 0x15, 
  SIM_INTERNAL_MMGSDI_WARNING_POSSIBLE_CORRUPTION_V01 = 0x16, 
  SIM_INTERNAL_MMGSDI_INCORRECT_LENGTH_V01 = 0x17, 
  SIM_INTERNAL_MMGSDI_UIM_CMD_TIMEOUT_V01 = 0x18, 
  SIM_INTERNAL_MMGSDI_CODE_PERM_BLOCKED_V01 = 0x19, 
  SIM_INTERNAL_MMGSDI_REFRESH_SUCCESS_V01 = 0x1A, 
  SIM_INTERNAL_MMGSDI_REFRESH_IN_PROGRESS_V01 = 0x1B, 
  SIM_INTERNAL_MMGSDI_CAN_NOT_REFRESH_V01 = 0x1C, 
  SIM_INTERNAL_MMGSDI_REFRESH_LATER_V01 = 0x1D, 
  SIM_INTERNAL_MMGSDI_PATHS_DECODE_ERROR_V01 = 0x1E, 
  SIM_INTERNAL_MMGSDI_SUCCESS_AFTER_CARD_INTERNAL_UPDATE_V01 = 0x1F, 
  SIM_INTERNAL_MMGSDI_SIM_BUSY_V01 = 0x20, 
  SIM_INTERNAL_MMGSDI_INVALIDATION_CONTRADICTION_STATUS_V01 = 0x21, 
  SIM_INTERNAL_MMGSDI_INCREASE_MAX_REACHED_V01 = 0x22, 
  SIM_INTERNAL_MMGSDI_AUTH_FAIL_V01 = 0x23, 
  SIM_INTERNAL_MMGSDI_AUTS_FAIL_V01 = 0x24, 
  SIM_INTERNAL_MMGSDI_MEMORY_ERROR_HEAP_EXHAUSTED_V01 = 0x25, 
  SIM_INTERNAL_MMGSDI_UIM_INTERNALLY_RESET_V01 = 0x26, 
  SIM_INTERNAL_MMGSDI_AUTH_ERROR_KEY_FRESHNESS_FAIL_V01 = 0x27, 
  SIM_INTERNAL_MMGSDI_AUTH_ERROR_NO_MEM_SPACE_V01 = 0x28, 
  SIM_INTERNAL_MMGSDI_REF_DATA_NOT_FOUND_V01 = 0x29, 
  SIM_INTERNAL_MMGSDI_LOCKED_INIT_PARAM_V01 = 0x2A, 
  SIM_INTERNAL_MMGSDI_APP_NOT_INIT_V01 = 0x2B, 
  SIM_INTERNAL_MMGSDI_PUBLIC_KEY_CERT_NOT_INIT_V01 = 0x2C, 
  SIM_INTERNAL_MMGSDI_UCAST_AUTH_KEY_NOT_INIT_V01 = 0x2D, 
  SIM_INTERNAL_MMGSDI_UCAST_DATA_BLOCK_NOT_INIT_V01 = 0x2E, 
  SIM_INTERNAL_MMGSDI_VERIFY_UCAST_FAILED_V01 = 0x2F, 
  SIM_INTERNAL_MMGSDI_REFRESH_SUCCESS_NO_AID_ACTIVE_V01 = 0x30, 
  SIM_INTERNAL_MMGSDI_REFRESH_ADDITIONAL_FILES_READ_V01 = 0x31, 
  SIM_INTERNAL_MMGSDI_AUTH_ERROR_CAVE_NOT_RUN_V01 = 0x32, 
  SIM_INTERNAL_MMGSDI_REFRESH_FAIL_INVALID_AID_V01 = 0x33, 
  SIM_INTERNAL_MMGSDI_RPC_ERROR_V01 = 0x34, 
  SIM_INTERNAL_MMGSDI_WRONG_CLASS_V01 = 0x35, 
  SIM_INTERNAL_MMGSDI_PERSO_CHECK_FAILED_V01 = 0x36, 
  SIM_INTERNAL_MMGSDI_PERSO_INVALID_CK_V01 = 0x37, 
  SIM_INTERNAL_MMGSDI_PERSO_CK_BLOCKED_V01 = 0x38, 
  SIM_INTERNAL_MMGSDI_PERSO_INVALID_DATA_V01 = 0x39, 
  SIM_INTERNAL_MMGSDI_PERSO_PERM_DISABLED_V01 = 0x3A, 
  SIM_INTERNAL_MMGSDI_MANAGE_CHANNEL_FAILED_V01 = 0x3B, 
  SIM_INTERNAL_MMGSDI_SELECT_AID_FAILED_V01 = 0x3C, 
  SIM_INTERNAL_MMGSDI_RETURN_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_return_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_SLOT_ID_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_SLOT_1_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_SLOT_2_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_SLOT_AUTOMATIC_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_SLOT_ID_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_slot_id_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_GSTK_SLOT_ID_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_GSTK_SLOT_1_V01 = 0x01, 
  SIM_INTERNAL_GSTK_SLOT_2_V01 = 0x02, 
  SIM_INTERNAL_GSTK_SLOT_AUTOMATIC_V01 = 0x03, 
  SIM_INTERNAL_GSTK_SLOT_ID_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_gstk_slot_id_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_PIN_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_PIN1_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_PIN2_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_UNIVERSAL_PIN_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_ADM1_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_ADM2_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_ADM3_V01 = 0x05, 
  SIM_INTERNAL_MMGSDI_ADM4_V01 = 0x06, 
  SIM_INTERNAL_MMGSDI_ADM5_V01 = 0x07, 
  SIM_INTERNAL_MMGSDI_ADM6_V01 = 0x08, 
  SIM_INTERNAL_MMGSDI_ADM7_V01 = 0x09, 
  SIM_INTERNAL_MMGSDI_ADM8_V01 = 0x0A, 
  SIM_INTERNAL_MMGSDI_ADM9_V01 = 0x0B, 
  SIM_INTERNAL_MMGSDI_ADM10_V01 = 0x0C, 
  SIM_INTERNAL_MMGSDI_ADM11_V01 = 0x0D, 
  SIM_INTERNAL_MMGSDI_ADM12_V01 = 0x0E, 
  SIM_INTERNAL_MMGSDI_ADM13_V01 = 0x0F, 
  SIM_INTERNAL_MMGSDI_ADM14_V01 = 0x10, 
  SIM_INTERNAL_MMGSDI_ADM15_V01 = 0x11, 
  SIM_INTERNAL_MMGSDI_HIDDENKEY_V01 = 0x12, 
  SIM_INTERNAL_MMGSDI_PIN_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_pin_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_PIN_STATUS_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_PIN_STATUS_NOT_INITIALIZED_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_PIN_ENABLED_NOT_VERIFIED_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_PIN_ENABLED_VERIFIED_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_PIN_DISABLED_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_PIN_BLOCKED_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_PIN_PERM_BLOCKED_V01 = 0x05, 
  SIM_INTERNAL_MMGSDI_PIN_UNBLOCKED_V01 = 0x06, 
  SIM_INTERNAL_MMGSDI_PIN_CHANGED_V01 = 0x07, 
  SIM_INTERNAL_MMGSDI_PIN_NOT_FOUND_V01 = 0x08, 
  SIM_INTERNAL_MMGSDI_PIN_RETRY_COUNT_DECREASED_V01 = 0x09, 
  SIM_INTERNAL_MMGSDI_PIN_STATUS_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_pin_status_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_PIN_REPLACE_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_PIN_NOT_REPLACED_BY_UNIVERSAL_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_PIN_REPLACED_BY_UNIVERSAL_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_PIN_REPLACE_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_pin_replace_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_APP_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_APP_NONE_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_APP_SIM_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_APP_RUIM_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_APP_USIM_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_APP_CSIM_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_APP_UNKNOWN_V01 = 0x05, 
  SIM_INTERNAL_MMGSDI_APP_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_app_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_PROTOCOL_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_NO_PROTOCOL_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_ICC_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_UICC_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_PROTOCOL_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_protocol_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_REFRESH_STAGE_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_REFRESH_STAGE_START_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_REFRESH_STAGE_IN_PROGRESS_APP_DEACTIVATED_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_REFRESH_STAGE_IN_PROGRESS_APP_ACTIVATED_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_REFRESH_STAGE_END_SUCCESS_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_REFRESH_STAGE_END_FAILED_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_REFRESH_STAGE_WAIT_FOR_OK_TO_INIT_V01 = 0x05, 
  SIM_INTERNAL_MMGSDI_REFRESH_STAGE_WAIT_FOR_OK_TO_FCN_V01 = 0x06, 
  SIM_INTERNAL_MMGSDI_REFRESH_STAGE_WAIT_FOR_PROCEED_WITH_REFRESH_V01 = 0x07, 
  SIM_INTERNAL_MMGSDI_REFRESH_STAGE_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_refresh_stage_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_REFRESH_MODE_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_REFRESH_RESET_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_REFRESH_NAA_INIT_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_REFRESH_NAA_INIT_FCN_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_REFRESH_NAA_FCN_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_REFRESH_NAA_INIT_FULL_FCN_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_REFRESH_NAA_APP_RESET_V01 = 0x05, 
  SIM_INTERNAL_MMGSDI_REFRESH_3G_SESSION_RESET_V01 = 0x06, 
  SIM_INTERNAL_MMGSDI_REFRESH_STEERING_OF_ROAMING_V01 = 0x07, 
  SIM_INTERNAL_MMGSDI_REFRESH_RESET_AUTO_V01 = 0x08, 
  SIM_INTERNAL_MMGSDI_REFRESH_APP_RESET_AUTO_V01 = 0x09, 
  SIM_INTERNAL_MMGSDI_REFRESH_MODE_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_refresh_mode_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_FILE_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_NO_FILE_ENUM_V01 = 0x0000, 
  SIM_INTERNAL_MMGSDI_ICCID_V01 = 0x0001, 
  SIM_INTERNAL_MMGSDI_ELP_V01 = 0x0002, 
  SIM_INTERNAL_MMGSDI_DIR_V01 = 0x0003, 
  SIM_INTERNAL_MMGSDI_ARR_V01 = 0x0004, 
  SIM_INTERNAL_MMGSDI_GSM_LP_V01 = 0x0030, 
  SIM_INTERNAL_MMGSDI_GSM_IMSI_V01 = 0x0031, 
  SIM_INTERNAL_MMGSDI_GSM_KC_V01 = 0x0032, 
  SIM_INTERNAL_MMGSDI_GSM_PLMN_V01 = 0x0033, 
  SIM_INTERNAL_MMGSDI_GSM_HPLMN_V01 = 0x0034, 
  SIM_INTERNAL_MMGSDI_GSM_ACM_MAX_V01 = 0x0035, 
  SIM_INTERNAL_MMGSDI_GSM_SST_V01 = 0x0036, 
  SIM_INTERNAL_MMGSDI_GSM_ACM_V01 = 0x0037, 
  SIM_INTERNAL_MMGSDI_GSM_GID1_V01 = 0x0038, 
  SIM_INTERNAL_MMGSDI_GSM_GID2_V01 = 0x0039, 
  SIM_INTERNAL_MMGSDI_GSM_SPN_V01 = 0x003A, 
  SIM_INTERNAL_MMGSDI_GSM_PUCT_V01 = 0x003B, 
  SIM_INTERNAL_MMGSDI_GSM_CBMI_V01 = 0x003C, 
  SIM_INTERNAL_MMGSDI_GSM_BCCH_V01 = 0x003D, 
  SIM_INTERNAL_MMGSDI_GSM_ACC_V01 = 0x003E, 
  SIM_INTERNAL_MMGSDI_GSM_FPLMN_V01 = 0x003F, 
  SIM_INTERNAL_MMGSDI_GSM_LOCI_V01 = 0x0040, 
  SIM_INTERNAL_MMGSDI_GSM_AD_V01 = 0x0041, 
  SIM_INTERNAL_MMGSDI_GSM_PHASE_V01 = 0x0042, 
  SIM_INTERNAL_MMGSDI_GSM_VGCS_V01 = 0x0043, 
  SIM_INTERNAL_MMGSDI_GSM_VGCSS_V01 = 0x0044, 
  SIM_INTERNAL_MMGSDI_GSM_VBS_V01 = 0x0045, 
  SIM_INTERNAL_MMGSDI_GSM_VBSS_V01 = 0x0046, 
  SIM_INTERNAL_MMGSDI_GSM_EMLPP_V01 = 0x0047, 
  SIM_INTERNAL_MMGSDI_GSM_AAEM_V01 = 0x0048, 
  SIM_INTERNAL_MMGSDI_GSM_CBMID_V01 = 0x0049, 
  SIM_INTERNAL_MMGSDI_GSM_ECC_V01 = 0x004A, 
  SIM_INTERNAL_MMGSDI_GSM_CBMIR_V01 = 0x004B, 
  SIM_INTERNAL_MMGSDI_GSM_DCK_V01 = 0x004C, 
  SIM_INTERNAL_MMGSDI_GSM_CNL_V01 = 0x004D, 
  SIM_INTERNAL_MMGSDI_GSM_NIA_V01 = 0x004E, 
  SIM_INTERNAL_MMGSDI_GSM_KCGPRS_V01 = 0x004F, 
  SIM_INTERNAL_MMGSDI_GSM_LOCIGPRS_V01 = 0x0050, 
  SIM_INTERNAL_MMGSDI_GSM_SUME_V01 = 0x0051, 
  SIM_INTERNAL_MMGSDI_GSM_PLMNWACT_V01 = 0x0052, 
  SIM_INTERNAL_MMGSDI_GSM_OPLMNWACT_V01 = 0x0053, 
  SIM_INTERNAL_MMGSDI_GSM_HPLMNACT_V01 = 0x0054, 
  SIM_INTERNAL_MMGSDI_GSM_CPBCCH_V01 = 0x0055, 
  SIM_INTERNAL_MMGSDI_GSM_INVSCAN_V01 = 0x0056, 
  SIM_INTERNAL_MMGSDI_GSM_RPLMNAT_V01 = 0x0057, 
  SIM_INTERNAL_MMGSDI_GSM_PNN_V01 = 0x0058, 
  SIM_INTERNAL_MMGSDI_GSM_OPL_V01 = 0x0059, 
  SIM_INTERNAL_MMGSDI_GSM_MBDN_V01 = 0x005A, 
  SIM_INTERNAL_MMGSDI_GSM_EXT6_V01 = 0x005B, 
  SIM_INTERNAL_MMGSDI_GSM_MBI_V01 = 0x005C, 
  SIM_INTERNAL_MMGSDI_GSM_MWIS_V01 = 0x005D, 
  SIM_INTERNAL_MMGSDI_GSM_EXT1_V01 = 0x005E, 
  SIM_INTERNAL_MMGSDI_GSM_SPDI_V01 = 0x005F, 
  SIM_INTERNAL_MMGSDI_GSM_CFIS_V01 = 0x0060, 
  SIM_INTERNAL_MMGSDI_GSM_VMWI_V01 = 0x0061, 
  SIM_INTERNAL_MMGSDI_GSM_SVC_STR_TBL_V01 = 0x0062, 
  SIM_INTERNAL_MMGSDI_GSM_CFF_V01 = 0x0063, 
  SIM_INTERNAL_MMGSDI_GSM_ONS_V01 = 0x0064, 
  SIM_INTERNAL_MMGSDI_GSM_CSP_V01 = 0x0065, 
  SIM_INTERNAL_MMGSDI_GSM_CPHSI_V01 = 0x0066, 
  SIM_INTERNAL_MMGSDI_GSM_MN_V01 = 0x0067, 
  SIM_INTERNAL_MMGSDI_GSM_SAI_V01 = 0x0068, 
  SIM_INTERNAL_MMGSDI_GSM_SLL_V01 = 0x0069, 
  SIM_INTERNAL_MMGSDI_GSM_MEXE_ST_V01 = 0x006A, 
  SIM_INTERNAL_MMGSDI_GSM_ORPK_V01 = 0x006B, 
  SIM_INTERNAL_MMGSDI_GSM_ARPK_V01 = 0x006C, 
  SIM_INTERNAL_MMGSDI_GSM_TPRPK_V01 = 0x006D, 
  SIM_INTERNAL_MMGSDI_GSM_IMG_V01 = 0x006E, 
  SIM_INTERNAL_MMGSDI_GSM_IMG1INST1_V01 = 0x006F, 
  SIM_INTERNAL_MMGSDI_GSM_IMG1INST2_V01 = 0x0070, 
  SIM_INTERNAL_MMGSDI_GSM_IMG1INST3_V01 = 0x0071, 
  SIM_INTERNAL_MMGSDI_GSM_IMG2INST1_V01 = 0x0072, 
  SIM_INTERNAL_MMGSDI_GSM_IMG2INST2_V01 = 0x0073, 
  SIM_INTERNAL_MMGSDI_GSM_IMG2INST3_V01 = 0x0074, 
  SIM_INTERNAL_MMGSDI_GSM_IMG3INST1_V01 = 0x0075, 
  SIM_INTERNAL_MMGSDI_GSM_IMG3INST2_V01 = 0x0076, 
  SIM_INTERNAL_MMGSDI_GSM_IMG3INST3_V01 = 0x0077, 
  SIM_INTERNAL_MMGSDI_GSM_ONS_SHORT_V01 = 0x0078, 
  SIM_INTERNAL_MMGSDI_IMAGE_V01 = 0x0079, 
  SIM_INTERNAL_MMGSDI_USIM_LI_V01 = 0x0100, 
  SIM_INTERNAL_MMGSDI_USIM_IMSI_V01 = 0x0101, 
  SIM_INTERNAL_MMGSDI_USIM_KEYS_V01 = 0x0102, 
  SIM_INTERNAL_MMGSDI_USIM_KEYSPS_V01 = 0x0103, 
  SIM_INTERNAL_MMGSDI_USIM_PLMNWACT_V01 = 0x0104, 
  SIM_INTERNAL_MMGSDI_USIM_UPLMNSEL_V01 = 0x0105, 
  SIM_INTERNAL_MMGSDI_USIM_HPLMN_V01 = 0x0106, 
  SIM_INTERNAL_MMGSDI_USIM_ACM_MAX_V01 = 0x0107, 
  SIM_INTERNAL_MMGSDI_USIM_UST_V01 = 0x0108, 
  SIM_INTERNAL_MMGSDI_USIM_ACM_V01 = 0x0109, 
  SIM_INTERNAL_MMGSDI_USIM_GID1_V01 = 0x010A, 
  SIM_INTERNAL_MMGSDI_USIM_GID2_V01 = 0x010B, 
  SIM_INTERNAL_MMGSDI_USIM_SPN_V01 = 0x010C, 
  SIM_INTERNAL_MMGSDI_USIM_PUCT_V01 = 0x010D, 
  SIM_INTERNAL_MMGSDI_USIM_CBMI_V01 = 0x010E, 
  SIM_INTERNAL_MMGSDI_USIM_ACC_V01 = 0x010F, 
  SIM_INTERNAL_MMGSDI_USIM_FPLMN_V01 = 0x0110, 
  SIM_INTERNAL_MMGSDI_USIM_LOCI_V01 = 0x0111, 
  SIM_INTERNAL_MMGSDI_USIM_AD_V01 = 0x0112, 
  SIM_INTERNAL_MMGSDI_USIM_CBMID_V01 = 0x0113, 
  SIM_INTERNAL_MMGSDI_USIM_ECC_V01 = 0x0114, 
  SIM_INTERNAL_MMGSDI_USIM_CBMIR_V01 = 0x0115, 
  SIM_INTERNAL_MMGSDI_USIM_PSLOCI_V01 = 0x0116, 
  SIM_INTERNAL_MMGSDI_USIM_FDN_V01 = 0x0117, 
  SIM_INTERNAL_MMGSDI_USIM_SMS_V01 = 0x0118, 
  SIM_INTERNAL_MMGSDI_USIM_MSISDN_V01 = 0x0119, 
  SIM_INTERNAL_MMGSDI_USIM_SMSP_V01 = 0x011A, 
  SIM_INTERNAL_MMGSDI_USIM_SMSS_V01 = 0x011B, 
  SIM_INTERNAL_MMGSDI_USIM_SDN_V01 = 0x011C, 
  SIM_INTERNAL_MMGSDI_USIM_EXT2_V01 = 0x011D, 
  SIM_INTERNAL_MMGSDI_USIM_EXT3_V01 = 0x011E, 
  SIM_INTERNAL_MMGSDI_USIM_SMSR_V01 = 0x011F, 
  SIM_INTERNAL_MMGSDI_USIM_ICI_V01 = 0x0120, 
  SIM_INTERNAL_MMGSDI_USIM_OCI_V01 = 0x0121, 
  SIM_INTERNAL_MMGSDI_USIM_ICT_V01 = 0x0122, 
  SIM_INTERNAL_MMGSDI_USIM_OCT_V01 = 0x0123, 
  SIM_INTERNAL_MMGSDI_USIM_EXT5_V01 = 0x0124, 
  SIM_INTERNAL_MMGSDI_USIM_CCP2_V01 = 0x0125, 
  SIM_INTERNAL_MMGSDI_USIM_EMLPP_V01 = 0x0126, 
  SIM_INTERNAL_MMGSDI_USIM_AAEM_V01 = 0x0127, 
  SIM_INTERNAL_MMGSDI_USIM_GMSI_V01 = 0x0128, 
  SIM_INTERNAL_MMGSDI_USIM_HIDDENKEY_V01 = 0x0129, 
  SIM_INTERNAL_MMGSDI_USIM_BDN_V01 = 0x012A, 
  SIM_INTERNAL_MMGSDI_USIM_EXT4_V01 = 0x012B, 
  SIM_INTERNAL_MMGSDI_USIM_CMI_V01 = 0x012C, 
  SIM_INTERNAL_MMGSDI_USIM_EST_V01 = 0x012D, 
  SIM_INTERNAL_MMGSDI_USIM_ACL_V01 = 0x012E, 
  SIM_INTERNAL_MMGSDI_USIM_DCK_V01 = 0x012F, 
  SIM_INTERNAL_MMGSDI_USIM_CNL_V01 = 0x0130, 
  SIM_INTERNAL_MMGSDI_USIM_START_HFN_V01 = 0x0131, 
  SIM_INTERNAL_MMGSDI_USIM_THRESHOLD_V01 = 0x0132, 
  SIM_INTERNAL_MMGSDI_USIM_OPLMNWACT_V01 = 0x0133, 
  SIM_INTERNAL_MMGSDI_USIM_OPLMNSEL_V01 = 0x0134, 
  SIM_INTERNAL_MMGSDI_USIM_HPLMNWACT_V01 = 0x0135, 
  SIM_INTERNAL_MMGSDI_USIM_ARR_V01 = 0x0136, 
  SIM_INTERNAL_MMGSDI_USIM_RPLMNACT_V01 = 0x0137, 
  SIM_INTERNAL_MMGSDI_USIM_NETPAR_V01 = 0x0138, 
  SIM_INTERNAL_MMGSDI_USIM_PNN_V01 = 0x0139, 
  SIM_INTERNAL_MMGSDI_USIM_OPL_V01 = 0x013A, 
  SIM_INTERNAL_MMGSDI_USIM_MBDN_V01 = 0x013B, 
  SIM_INTERNAL_MMGSDI_USIM_EXT6_V01 = 0x013C, 
  SIM_INTERNAL_MMGSDI_USIM_MBI_V01 = 0x013D, 
  SIM_INTERNAL_MMGSDI_USIM_MWIS_V01 = 0x013E, 
  SIM_INTERNAL_MMGSDI_USIM_SPDI_V01 = 0x013F, 
  SIM_INTERNAL_MMGSDI_USIM_EHPLMN_V01 = 0x0140, 
  SIM_INTERNAL_MMGSDI_USIM_CFIS_V01 = 0x0141, 
  SIM_INTERNAL_MMGSDI_USIM_VGCSCA_V01 = 0x0142, 
  SIM_INTERNAL_MMGSDI_USIM_VBSCA_V01 = 0x0143, 
  SIM_INTERNAL_MMGSDI_USIM_GBABP_V01 = 0x0144, 
  SIM_INTERNAL_MMGSDI_USIM_GBANL_V01 = 0x0145, 
  SIM_INTERNAL_MMGSDI_USIM_MSK_V01 = 0x0146, 
  SIM_INTERNAL_MMGSDI_USIM_MUK_V01 = 0x0147, 
  SIM_INTERNAL_MMGSDI_USIM_VMWI_V01 = 0x0148, 
  SIM_INTERNAL_MMGSDI_USIM_SVC_STR_TBL_V01 = 0x0149, 
  SIM_INTERNAL_MMGSDI_USIM_CFF_V01 = 0x014A, 
  SIM_INTERNAL_MMGSDI_USIM_ONS_V01 = 0x014B, 
  SIM_INTERNAL_MMGSDI_USIM_CSP_V01 = 0x014C, 
  SIM_INTERNAL_MMGSDI_USIM_CPHSI_V01 = 0x014D, 
  SIM_INTERNAL_MMGSDI_USIM_MN_V01 = 0x014E, 
  SIM_INTERNAL_MMGSDI_USIM_PBR_V01 = 0x014F, 
  SIM_INTERNAL_MMGSDI_USIM_PSC_V01 = 0x0150, 
  SIM_INTERNAL_MMGSDI_USIM_CC_V01 = 0x0151, 
  SIM_INTERNAL_MMGSDI_USIM_PUID_V01 = 0x0152, 
  SIM_INTERNAL_MMGSDI_USIM_KC_V01 = 0x0153, 
  SIM_INTERNAL_MMGSDI_USIM_KCGPRS_V01 = 0x0154, 
  SIM_INTERNAL_MMGSDI_USIM_CPBCCH_V01 = 0x0155, 
  SIM_INTERNAL_MMGSDI_USIM_INVSCAN_V01 = 0x0156, 
  SIM_INTERNAL_MMGSDI_USIM_MEXE_ST_V01 = 0x0157, 
  SIM_INTERNAL_MMGSDI_USIM_ORPK_V01 = 0x0158, 
  SIM_INTERNAL_MMGSDI_USIM_ARPK_V01 = 0x0159, 
  SIM_INTERNAL_MMGSDI_USIM_TPRPK_V01 = 0x015A, 
  SIM_INTERNAL_MMGSDI_USIM_MMSN_V01 = 0x015B, 
  SIM_INTERNAL_MMGSDI_USIM_MMSICP_V01 = 0x015C, 
  SIM_INTERNAL_MMGSDI_USIM_MMSUP_V01 = 0x015D, 
  SIM_INTERNAL_MMGSDI_USIM_MMSUCP_V01 = 0x015E, 
  SIM_INTERNAL_MMGSDI_USIM_EXT8_V01 = 0x015F, 
  SIM_INTERNAL_MMGSDI_USIM_EPSLOCI_V01 = 0x0160, 
  SIM_INTERNAL_MMGSDI_USIM_EPSNSC_V01 = 0x0161, 
  SIM_INTERNAL_MMGSDI_USIM_SPNI_V01 = 0x0162, 
  SIM_INTERNAL_MMGSDI_USIM_PNNI_V01 = 0x0163, 
  SIM_INTERNAL_MMGSDI_USIM_NCP_IP_V01 = 0x0164, 
  SIM_INTERNAL_MMGSDI_USIM_HPLMNDAI_V01 = 0x0165, 
  SIM_INTERNAL_MMGSDI_USIM_ACSGL_V01 = 0x0166, 
  SIM_INTERNAL_MMGSDI_USIM_CSGI_V01 = 0x0167, 
  SIM_INTERNAL_MMGSDI_USIM_HNBN_V01 = 0x0168, 
  SIM_INTERNAL_MMGSDI_USIM_EHPLMNPI_V01 = 0x0169, 
  SIM_INTERNAL_MMGSDI_USIM_LRPLMNSI_V01 = 0x016A, 
  SIM_INTERNAL_MMGSDI_USIM_ONS_SHORT_V01 = 0x016B, 
  SIM_INTERNAL_MMGSDI_SIM_7F40_PROP1_DFS_V01 = 0x0200, 
  SIM_INTERNAL_MMGSDI_SIM_7F40_PROP1_D2FS_V01 = 0x0201, 
  SIM_INTERNAL_MMGSDI_SIM_7F40_PROP1_CSP2_V01 = 0x0202, 
  SIM_INTERNAL_MMGSDI_SIM_7F40_PROP1_PARAMS_V01 = 0x0203, 
  SIM_INTERNAL_MMGSDI_USIM_7F40_PROP1_DFS_V01 = 0x0204, 
  SIM_INTERNAL_MMGSDI_USIM_7F40_PROP1_D2FS_V01 = 0x0205, 
  SIM_INTERNAL_MMGSDI_USIM_7F40_PROP1_CSP2_V01 = 0x0206, 
  SIM_INTERNAL_MMGSDI_USIM_7F40_PROP1_PARAMS_V01 = 0x0207, 
  SIM_INTERNAL_MMGSDI_SIM_7F66_PROP1_ACT_HPLMN_V01 = 0x0208, 
  SIM_INTERNAL_MMGSDI_SIM_7F66_PROP1_SPT_TABLE_V01 = 0x0209, 
  SIM_INTERNAL_MMGSDI_USIM_7F66_PROP1_ACT_HPLMN_V01 = 0x020A, 
  SIM_INTERNAL_MMGSDI_USIM_7F66_PROP1_SPT_TABLE_V01 = 0x020B, 
  SIM_INTERNAL_MMGSDI_USIM_7F66_PROP1_RAT_V01 = 0x020C, 
  SIM_INTERNAL_MMGSDI_USIM_7F66_PROP1_RPM_EF_V01 = 0x020D, 
  SIM_INTERNAL_MMGSDI_USIM_7F66_PROP1_RPM_PARAM_V01 = 0x020E, 
  SIM_INTERNAL_MMGSDI_SIM_7F43_PROP1_HZ_V01 = 0x020F, 
  SIM_INTERNAL_MMGSDI_SIM_7F43_PROP1_CACHE1_V01 = 0x0210, 
  SIM_INTERNAL_MMGSDI_SIM_7F43_PROP1_CACHE2_V01 = 0x0211, 
  SIM_INTERNAL_MMGSDI_SIM_7F43_PROP1_CACHE3_V01 = 0x0212, 
  SIM_INTERNAL_MMGSDI_SIM_7F43_PROP1_CACHE4_V01 = 0x0213, 
  SIM_INTERNAL_MMGSDI_SIM_7F43_PROP1_SUBSCRIBED_LAC_CI_1_V01 = 0x0214, 
  SIM_INTERNAL_MMGSDI_SIM_7F43_PROP1_SUBSCRIBED_LAC_CI_2_V01 = 0x0215, 
  SIM_INTERNAL_MMGSDI_SIM_7F43_PROP1_SUBSCRIBED_LAC_CI_3_V01 = 0x0216, 
  SIM_INTERNAL_MMGSDI_SIM_7F43_PROP1_SUBSCRIBED_LAC_CI_4_V01 = 0x0217, 
  SIM_INTERNAL_MMGSDI_SIM_7F43_PROP1_TAGS_V01 = 0x0218, 
  SIM_INTERNAL_MMGSDI_SIM_7F43_PROP1_SETTINGS_V01 = 0x0219, 
  SIM_INTERNAL_MMGSDI_TELECOM_ADN_V01 = 0x0250, 
  SIM_INTERNAL_MMGSDI_TELECOM_FDN_V01 = 0x0251, 
  SIM_INTERNAL_MMGSDI_TELECOM_SMS_V01 = 0x0252, 
  SIM_INTERNAL_MMGSDI_TELECOM_CCP_V01 = 0x0253, 
  SIM_INTERNAL_MMGSDI_TELECOM_ECCP_V01 = 0x0254, 
  SIM_INTERNAL_MMGSDI_TELECOM_MSISDN_V01 = 0x0255, 
  SIM_INTERNAL_MMGSDI_TELECOM_SMSP_V01 = 0x0256, 
  SIM_INTERNAL_MMGSDI_TELECOM_SMSS_V01 = 0x0257, 
  SIM_INTERNAL_MMGSDI_TELECOM_LND_V01 = 0x0258, 
  SIM_INTERNAL_MMGSDI_TELECOM_SDN_V01 = 0x0259, 
  SIM_INTERNAL_MMGSDI_TELECOM_EXT1_V01 = 0x025A, 
  SIM_INTERNAL_MMGSDI_TELECOM_EXT2_V01 = 0x025B, 
  SIM_INTERNAL_MMGSDI_TELECOM_EXT3_V01 = 0x025C, 
  SIM_INTERNAL_MMGSDI_TELECOM_BDN_V01 = 0x025D, 
  SIM_INTERNAL_MMGSDI_TELECOM_EXT4_V01 = 0x025E, 
  SIM_INTERNAL_MMGSDI_TELECOM_SMSR_V01 = 0x025F, 
  SIM_INTERNAL_MMGSDI_TELECOM_CMI_V01 = 0x0260, 
  SIM_INTERNAL_MMGSDI_TELECOM_SUME_V01 = 0x0261, 
  SIM_INTERNAL_MMGSDI_TELECOM_ARR_V01 = 0x0262, 
  SIM_INTERNAL_MMGSDI_IMAGE_FILE_V01 = 0x0263, 
  SIM_INTERNAL_MMGSDI_TELECOM_PBR_V01 = 0x0264, 
  SIM_INTERNAL_MMGSDI_TELECOM_PSC_V01 = 0x0265, 
  SIM_INTERNAL_MMGSDI_TELECOM_CC_V01 = 0x0266, 
  SIM_INTERNAL_MMGSDI_TELECOM_PUID_V01 = 0x0267, 
  SIM_INTERNAL_MMGSDI_TELECOM_MML_V01 = 0x0268, 
  SIM_INTERNAL_MMGSDI_TELECOM_MMDF_V01 = 0x0269, 
  SIM_INTERNAL_MMGSDI_TELECOM_MLPL_V01 = 0x026A, 
  SIM_INTERNAL_MMGSDI_TELECOM_MSPL_V01 = 0x026B, 
  SIM_INTERNAL_MMGSDI_TELECOM_MMSSMODE_V01 = 0x026C, 
  SIM_INTERNAL_MMGSDI_CDMA_SMS_V01 = 0x0320, 
  SIM_INTERNAL_MMGSDI_CDMA_SMS_PARAMS_V01 = 0x0321, 
  SIM_INTERNAL_MMGSDI_CDMA_SMS_STATUS_V01 = 0x0322, 
  SIM_INTERNAL_MMGSDI_CSIM_SMS_V01 = 0x0400, 
  SIM_INTERNAL_MMGSDI_CSIM_SMS_PARAMS_V01 = 0x0401, 
  SIM_INTERNAL_MMGSDI_CSIM_SMS_STATUS_V01 = 0x0402, 
  SIM_INTERNAL_MMGSDI_FILE_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_file_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_CARD_ERR_INFO_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_CARD_ERR_UNKNOWN_ERROR_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_POLL_ERROR_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_NO_ATR_RCVD_AT_MAX_VOLT_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_NO_ATR_RCVD_AFTER_RESET_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_CORRUPT_ATR_RCVD_MAX_TIMES_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_PPS_TIMED_OUT_MAX_TIMES_V01 = 0x05, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_VOLT_MISMATCH_V01 = 0x06, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_INT_CMD_TIMED_OUT_AFTER_PPS_V01 = 0x07, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_INT_CMD_ERR_EXCEED_MAX_NUMS_V01 = 0x08, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_MAXED_PARITY_ERROR_V01 = 0x09, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_MAXED_RX_BREAK_ERR_V01 = 0x0A, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_MAXED_OVERRUN_ERR_V01 = 0x0B, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_TRANS_TIMER_EXP_V01 = 0x0C, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_PWR_DN_CMD_NOTIFY_V01 = 0x0D, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_INT_ERR_IN_PASSIVE_MODE_V01 = 0x0E, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_TIMED_OUT_IN_PASSIVE_MODE_V01 = 0x0F, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_MAX_PARITY_IN_PASSIVE_V01 = 0x10, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_MAX_RXBRK_IN_PASSIVE_V01 = 0x11, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_MAX_OVERRUN_IN_PASSIVE_V01 = 0x12, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_NO_PROTOCOL_AT_CARD_PUP_V01 = 0x13, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_CARD_REMOVED_V01 = 0x14, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_TECHNICAL_PROBLEM_V01 = 0x15, 
  SIM_INTERNAL_MMGSDI_CARD_ERR_INFO_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_card_err_info_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_PERSO_FEATURE_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_PERSO_NW_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_PERSO_NS_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_PERSO_SP_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_PERSO_CP_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_PERSO_SIM_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_PERSO_FEATURE_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_perso_feature_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_PERSO_STATUS_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_PERSO_STATUS_NONE_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_PERSO_STATUS_DONE_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_PERSO_STATUS_LOCKED_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_PERSO_STATUS_UNLOCKED_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_PERSO_STATUS_BLOCKED_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_PERSO_STATUS_UNBLOCKED_V01 = 0x05, 
  SIM_INTERNAL_MMGSDI_PERSO_STATUS_SANITY_ERROR_V01 = 0x06, 
  SIM_INTERNAL_MMGSDI_PERSO_STATUS_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_perso_status_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_SESSION_TYPE_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_GW_PROV_PRI_SESSION_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_1X_PROV_PRI_SESSION_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_GW_PROV_SEC_SESSION_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_1X_PROV_SEC_SESSION_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_NON_PROV_SESSION_SLOT_1_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_NON_PROV_SESSION_SLOT_2_V01 = 0x05, 
  SIM_INTERNAL_MMGSDI_CARD_SESSION_SLOT_1_V01 = 0x06, 
  SIM_INTERNAL_MMGSDI_CARD_SESSION_SLOT_2_V01 = 0x07, 
  SIM_INTERNAL_MMGSDI_SESSION_TYPE_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_session_type_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_AUTN_CONTEXT_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_AUTN_USIM_GSM_CONTEXT_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_AUTN_USIM_3G_CONTEXT_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_AUTN_CONTEXT_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_autn_context_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_FILE_STRUCTURE_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_LINEAR_FIXED_FILE_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_CYCLIC_FILE_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_TRANSPARENT_FILE_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_MASTER_FILE_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_DEDICATED_FILE_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_FILE_STRUCTURE_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_file_structure_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_FILE_SECURITY_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_ALWAYS_ALLOWED_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_NEVER_ALLOWED_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_AND_ALLOWED_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_OR_ALLOWED_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_SINGLE_ALLOWED_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_FILE_SECURITY_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_file_security_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_PIN_EVENTS_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_PIN1_EVT_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_PIN2_EVT_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_UNIVERSAL_PIN_EVT_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_HIDDENKEY_EVT_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_PIN_EVENTS_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_pin_events_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_SERVICE_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_NONE_V01 = 0x0000, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_CHV1_DISABLE_V01 = 0x0001, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_ADN_V01 = 0x0002, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_FDN_V01 = 0x0003, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_SMS_V01 = 0x0004, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_AOC_V01 = 0x0005, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_CCP_V01 = 0x0006, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_PLMN_V01 = 0x0007, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_MSISDN_V01 = 0x0008, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_EXT1_V01 = 0x0009, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_EXT2_V01 = 0x000A, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_SMSP_V01 = 0x000B, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_LND_V01 = 0x000C, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_CBMI_V01 = 0x000D, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_GID1_V01 = 0x000E, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_GID2_V01 = 0x000F, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_SPN_V01 = 0x0010, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_SDN_V01 = 0x0011, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_EXT3_V01 = 0x0012, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_RFU2_V01 = 0x0013, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_VGCS_V01 = 0x0014, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_VBS_V01 = 0x0015, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_ENH_ML_SVC_V01 = 0x0016, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_AA_EMLPP_V01 = 0x0017, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_DATA_DL_SMSCB_V01 = 0x0018, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_DATA_DL_SMSPP_V01 = 0x0019, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_MENU_SEL_V01 = 0x001A, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_CALL_CONTROL_V01 = 0x001B, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_PROACTIVE_V01 = 0x001C, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_CBMIR_V01 = 0x001D, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_BDN_V01 = 0x001E, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_EXT4_V01 = 0x001F, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_DCK_V01 = 0x0020, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_CNL_V01 = 0x0021, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_SMSR_V01 = 0x0022, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_NIA_V01 = 0x0023, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_MOSMS_CONTROL_V01 = 0x0024, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_GPRS_V01 = 0x0025, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_IMAGE_V01 = 0x0026, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_SOLSA_V01 = 0x0027, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_USSD_V01 = 0x0028, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_RUN_AT_CMD_V01 = 0x0029, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_UPLMN_SEL_WACT_V01 = 0x002A, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_OPLMN_SEL_WACT_V01 = 0x002B, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_HPLMN_WACT_V01 = 0x002C, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_CPBCCH_V01 = 0x002D, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_INV_SCAN_V01 = 0x002E, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_ECCP_V01 = 0x002F, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_MEXE_V01 = 0x0030, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_RPLMN_LACT_V01 = 0x0031, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_PLMN_NTWRK_NAME_V01 = 0x0032, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_OPLMN_LIST_V01 = 0x0033, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_MDN_V01 = 0x0034, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_MWI_V01 = 0x0035, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_CFI_V01 = 0x0036, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_SPDI_V01 = 0x0037, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_MMS_V01 = 0x0038, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_EXT8_V01 = 0x0039, 
  SIM_INTERNAL_MMGSDI_GSM_SRV_MMS_USR_P_V01 = 0x003A, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_LOCAL_PHONEBOOK_V01 = 0x003B, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_FDN_V01 = 0x003C, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_EXT2_V01 = 0x003D, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_SDN_V01 = 0x003E, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_EXT3_V01 = 0x003F, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_BDN_V01 = 0x0040, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_EXT4_V01 = 0x0041, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_OCI_OCT_V01 = 0x0042, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_ICI_ICT_V01 = 0x0043, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_SMS_V01 = 0x0044, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_SMSR_V01 = 0x0045, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_SMSP_V01 = 0x0046, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_AOC_V01 = 0x0047, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_CCP_V01 = 0x0048, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_CBMI_V01 = 0x0049, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_CBMIR_V01 = 0x004A, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_GID1_V01 = 0x004B, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_GID2_V01 = 0x004C, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_SPN_V01 = 0x004D, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_UPLMN_SEL_WACT_V01 = 0x004E, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_MSISDN_V01 = 0x004F, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_IMAGE_V01 = 0x0050, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_SOLSA_V01 = 0x0051, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_ENH_ML_SVC_V01 = 0x0052, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_AA_EMLPP_V01 = 0x0053, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_RFU1_V01 = 0x0054, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_GSM_ACCESS_V01 = 0x0055, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_DATA_DL_SMSPP_V01 = 0x0056, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_DATA_DL_SMSCB_V01 = 0x0057, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_CALL_CONTROL_V01 = 0x0058, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_MOSMS_CONTROL_V01 = 0x0059, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_RUN_AT_CMD_V01 = 0x005A, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_SET_TO_1_V01 = 0x005B, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_EST_V01 = 0x005C, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_ACL_V01 = 0x005D, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_DCK_V01 = 0x005E, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_CNL_V01 = 0x005F, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_GSM_SECURITY_CONTEXT_V01 = 0x0060, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_CPBCCH_V01 = 0x0061, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_INV_SCAN_V01 = 0x0062, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_MEXE_V01 = 0x0063, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_OPLMN_SEL_WACT_V01 = 0x0064, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_HPLMN_WACT_V01 = 0x0065, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_EXT5_V01 = 0x0066, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_PLMN_NTWRK_NAME_V01 = 0x0067, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_OPLMN_LIST_V01 = 0x0068, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_MDN_V01 = 0x0069, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_MWI_V01 = 0x006A, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_CFI_V01 = 0x006B, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_RPLMN_LACT_V01 = 0x006C, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_SPDI_V01 = 0x006D, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_MMS_V01 = 0x006E, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_EXT8_V01 = 0x006F, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_GPRS_CC_V01 = 0x0070, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_MMS_USR_P_V01 = 0x0071, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_NIA_V01 = 0x0072, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_VGCS_V01 = 0x0073, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_VBS_V01 = 0x0074, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_PSEUDONYM_V01 = 0x0075, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_UPLMN_WLAN_ACC_V01 = 0x0076, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_OPLMN_WLAN_ACC_V01 = 0x0077, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_USER_CTRL_WSID_V01 = 0x0078, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_OPER_CTRL_WSID_V01 = 0x0079, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_VGCS_SECURITY_V01 = 0x007A, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_VBS_SECURITY_V01 = 0x007B, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_WLAN_REAUTH_ID_V01 = 0x007C, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_MM_STORAGE_V01 = 0x007D, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_GBA_V01 = 0x007E, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_MBMS_SECURITY_V01 = 0x007F, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_DATA_DL_USSD_V01 = 0x0080, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_EHPLMN_V01 = 0x0081, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_TP_AFTER_UICC_ACT_V01 = 0x0082, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_EHPLMNI_V01 = 0x0083, 
  SIM_INTERNAL_MMGSDI_USIM_LAST_RPMN_SEL_IND_V01 = 0x0084, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_OMA_BCAST_V01 = 0x0085, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_GBA_KEY_EST_V01 = 0x0086, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_TERMINAL_APPS_V01 = 0x0087, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_SPNI_V01 = 0x0088, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_PNNI_V01 = 0x0089, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_NCP_IP_V01 = 0x008A, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_HWSIDL_V01 = 0x008B, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_WEHPLMNPI_V01 = 0x008C, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_WHPI_V01 = 0x008D, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_WLRPLMN_V01 = 0x008E, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_EPS_MMI_V01 = 0x008F, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_ACSGL_V01 = 0x0090, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_EPS_PDN_CC_V01 = 0x0091, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_HPLMN_DA_V01 = 0x0092, 
  SIM_INTERNAL_MMGSDI_USIM_SRV_ECALL_V01 = 0x0093, 
  SIM_INTERNAL_MMGSDI_SERVICE_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_service_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_IN_TC_MODE_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_NOT_IN_TC_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_IN_TC_GW_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_IN_TC_MODE_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_in_tc_mode_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_SESSION_INFO_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_SESSION_INFO_QUERY_BY_ID_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_SESSION_INFO_QUERY_BY_TYPE_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_SESSION_INFO_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_session_info_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_APP_STATE_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_APP_STATE_UNKNOWN_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_APP_STATE_DETECTED_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_APP_STATE_DEACTIVATED_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_APP_STATE_ACTIVATED_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_APP_STATE_PIN_EVT_SENT_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_APP_STATE_READY_FOR_PERSO_V01 = 0x05, 
  SIM_INTERNAL_MMGSDI_APP_STATE_PERSO_VERIFIED_V01 = 0x06, 
  SIM_INTERNAL_MMGSDI_APP_STATE_READY_V01 = 0x07, 
  SIM_INTERNAL_MMGSDI_APP_STATE_ILLEGAL_V01 = 0x08, 
  SIM_INTERNAL_MMGSDI_APP_STATE_WAIT_FOR_SUB_OK_V01 = 0x09, 
  SIM_INTERNAL_MMGSDI_APP_STATE_READY_NO_SUB_EVT_V01 = 0x0A, 
  SIM_INTERNAL_MMGSDI_APP_STATE_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_app_state_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_REFRESH_ORIG_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_REFRESH_ORIG_REFRESH_REQ_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_REFRESH_ORIG_PUP_REQ_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_REFRESH_ORIG_REG_REQ_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_REFRESH_ORIG_DEREG_REQ_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_REFRESH_ORIG_OK_TO_REFRESH_REQ_V01 = 0x04, 
  SIM_INTERNAL_MMGSDI_REFRESH_ORIG_COMPLETE_REQ_V01 = 0x05, 
  SIM_INTERNAL_MMGSDI_REFRESH_ORIG_AUTO_REFRESH_REQ_V01 = 0x06, 
  SIM_INTERNAL_MMGSDI_REFRESH_ORIG_TIMER_EXPIRY_REQ_V01 = 0x07, 
  SIM_INTERNAL_MMGSDI_REFRESH_ORIG_PROCEED_WITH_REFRESH_REQ_V01 = 0x08, 
  SIM_INTERNAL_MMGSDI_REFRESH_ORIG_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_refresh_orig_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_PERSO_ACTION_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_PERSO_OTA_DEPERSO_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_PERSO_ACTION_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_perso_action_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_SEARCH_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_SEARCH_NONE_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_ICC_SEARCH_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_UICC_SIMPLE_SEARCH_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_UICC_ENHANCED_SEARCH_V01 = 0x03, 
  SIM_INTERNAL_MMGSDI_SEARCH_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_search_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_SEARCH_DIRECTION_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_SEARCH_DIRECTION_NONE_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_SEARCH_FORWARD_FROM_REC_NUM_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_SEARCH_BACKWARD_FROM_REC_NUM_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_SEARCH_DIRECTION_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_search_direction_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_SEARCH_OPTION_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_SEARCH_OPTION_NONE_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_SEARCH_BY_OFFSET_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_SEARCH_BY_CHAR_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_SEARCH_OPTION_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_search_option_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_MMGSDI_SEEK_DIRECTION_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_MMGSDI_SEEK_DIRECTION_NONE_V01 = 0x00, 
  SIM_INTERNAL_MMGSDI_SEEK_BEGINNING_FORWARDS_V01 = 0x01, 
  SIM_INTERNAL_MMGSDI_SEEK_END_BACKWARDS_V01 = 0x02, 
  SIM_INTERNAL_MMGSDI_SEEK_DIRECTION_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_mmgsdi_seek_direction_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_GSTK_STATUS_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_GSTK_SUCCESS_V01 = 0x00, 
  SIM_INTERNAL_GSTK_ERROR_V01 = 0x01, 
  SIM_INTERNAL_GSTK_DUPLICATE_REGISTRATION_V01 = 0x02, 
  SIM_INTERNAL_GSTK_CLIENT_NOT_REGISTERED_V01 = 0x03, 
  SIM_INTERNAL_GSTK_NO_CLIENT_REG_FOUND_V01 = 0x04, 
  SIM_INTERNAL_GSTK_INVALID_CLIENT_TYPE_V01 = 0x05, 
  SIM_INTERNAL_GSTK_PROFILE_VALUE_NOT_ALLOWED_V01 = 0x06, 
  SIM_INTERNAL_GSTK_PROFILE_ALREADY_SENT_V01 = 0x07, 
  SIM_INTERNAL_GSTK_MEMORY_ERROR_V01 = 0x08, 
  SIM_INTERNAL_GSTK_CLIENT_SPACE_FULL_V01 = 0x09, 
  SIM_INTERNAL_GSTK_BAD_PARAM_V01 = 0x0A, 
  SIM_INTERNAL_GSTK_NULL_INPUT_PARAM_V01 = 0x0B, 
  SIM_INTERNAL_GSTK_PARAM_EXCEED_BOUNDARY_V01 = 0x0C, 
  SIM_INTERNAL_GSTK_INVALID_LENGTH_V01 = 0x0D, 
  SIM_INTERNAL_GSTK_EXTRA_PARAM_MISSING_V01 = 0x0E, 
  SIM_INTERNAL_GSTK_EXTRA_PARAM_NOT_REQUIRED_V01 = 0x0F, 
  SIM_INTERNAL_GSTK_UNSUPPORTED_COMMAND_V01 = 0x10, 
  SIM_INTERNAL_GSTK_INVALID_COMMAND_V01 = 0x11, 
  SIM_INTERNAL_GSTK_INSUFFICIENT_INFO_V01 = 0x12, 
  SIM_INTERNAL_GSTK_FILE_ACCESS_FAIL_V01 = 0x13, 
  SIM_INTERNAL_GSTK_CONTRADICTING_TIMER_REQUEST_V01 = 0x14, 
  SIM_INTERNAL_GSTK_NOT_INIT_V01 = 0x15, 
  SIM_INTERNAL_GSTK_INVALID_DEVICE_COMMAND_V01 = 0x16, 
  SIM_INTERNAL_GSTK_RPC_ERROR_V01 = 0x17, 
  SIM_INTERNAL_GSTK_STATUS_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_gstk_status_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_GSTK_TAL_CLIENT_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_GSTK_TAL_LOCAL_CLIENT_V01 = 0x00, 
  SIM_INTERNAL_GSTK_TAL_REMOTE_CLIENT_V01 = 0x01, 
  SIM_INTERNAL_GSTK_TAL_CLIENT_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_gstk_tal_client_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_GSTK_ACCESS_TECHNOLOGY_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_GSTK_ACCESS_TECH_GSM_V01 = 0x00, 
  SIM_INTERNAL_GSTK_ACCESS_TECH_UTRAN_V01 = 0x01, 
  SIM_INTERNAL_GSTK_ACCESS_TECH_CDMA_V01 = 0x02, 
  SIM_INTERNAL_GSTK_ACCESS_TECH_LTE_V01 = 0x03, 
  SIM_INTERNAL_GSTK_ACCESS_TECH_NONE_V01 = 0xFF, 
  SIM_INTERNAL_GSTK_ACCESS_TECHNOLOGY_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_gstk_access_technology_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_GSTK_LOCATION_STATUS_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_GSTK_NORMAL_SERVICE_V01 = 0x00, 
  SIM_INTERNAL_GSTK_LIMITED_SERVICE_V01 = 0x01, 
  SIM_INTERNAL_GSTK_NO_SERVICE_V01 = 0x02, 
  SIM_INTERNAL_GSTK_LOCATION_STATUS_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_gstk_location_status_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_GSTK_CMD_GROUP_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_GSTK_PROACTIVE_CMD_V01 = 0x00, 
  SIM_INTERNAL_GSTK_TERMINAL_RSP_V01 = 0x01, 
  SIM_INTERNAL_GSTK_ENVELOPE_CMD_V01 = 0x02, 
  SIM_INTERNAL_GSTK_ENVELOPE_RSP_V01 = 0x03, 
  SIM_INTERNAL_GSTK_TERMINAL_PROFILE_CMD_V01 = 0x04, 
  SIM_INTERNAL_GSTK_TERMINAL_PROFILE_EXT_CMD_V01 = 0x05, 
  SIM_INTERNAL_GSTK_TERMINAL_PROFILE_RSP_V01 = 0x06, 
  SIM_INTERNAL_GSTK_STOP_CMD_V01 = 0x07, 
  SIM_INTERNAL_GSTK_MMGSDI_CMD_V01 = 0x08, 
  SIM_INTERNAL_GSTK_TIMER_EXP_CMD_V01 = 0x09, 
  SIM_INTERNAL_GSTK_MM_IDLE_CMD_V01 = 0x0A, 
  SIM_INTERNAL_GSTK_RRC_CELL_CHANGE_IND_V01 = 0x0B, 
  SIM_INTERNAL_GSTK_MODE_CHANGE_IND_V01 = 0x0C, 
  SIM_INTERNAL_GSTK_PH_NW_SEL_PREF_CHANGE_IND_V01 = 0x0D, 
  SIM_INTERNAL_GSTK_CLIENT_REG_REQ_CMD_V01 = 0x0E, 
  SIM_INTERNAL_GSTK_GET_CURR_ACCESS_TECH_CMD_V01 = 0x0F, 
  SIM_INTERNAL_GSTK_RETRY_ENVELOPE_CMD_V01 = 0x10, 
  SIM_INTERNAL_GSTK_SEND_POSTPONE_ENVELOPE_CMD_V01 = 0x11, 
  SIM_INTERNAL_GSTK_TIMER_FOR_ENV_RETRY_CMD_V01 = 0x12, 
  SIM_INTERNAL_GSTK_SETUP_OTASP_CALL_CMD_V01 = 0x13, 
  SIM_INTERNAL_GSTK_TAL_CMD_V01 = 0x14, 
  SIM_INTERNAL_GSTK_TAL_SEND_LS_CMD_V01 = 0x15, 
  SIM_INTERNAL_GSTK_CMD_GROUP_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_gstk_cmd_group_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_enums
    @{
  */
typedef enum {
  SIM_INTERNAL_GSTK_TAL_RPT_STATUS_ENUM_MIN_ENUM_VAL_V01 = -2147483647, /**< To force a 32 bit signed enum.  Do not change or use*/
  SIM_INTERNAL_GSTK_TAL_UIM_FAIL_V01 = 0x00, 
  SIM_INTERNAL_GSTK_TAL_UIM_PASS_V01 = 0x01, 
  SIM_INTERNAL_GSTK_TAL_RPT_STATUS_ENUM_MAX_ENUM_VAL_V01 = 2147483647 /**< To force a 32 bit signed enum.  Do not change or use*/
}sim_internal_gstk_tal_rpt_status_enum_v01;
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint32_t response_handle;
  /**<   response handle contains the handle performed at the client's request*/

  uint32_t client_ref;
  /**<   User data*/
}sim_internal_mmgsdi_request_data_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_app_enum_v01 app_type;
  /**<   Type of card containing the application.*/

  uint32_t aid_len;  /**< Must be set to # of elements in aid */
  uint8_t aid[QMI_SIM_INTERNAL_MMGSDI_MAX_AID_LEN_V01];
  /**<   Application Identifier.*/

  uint32_t label_len;  /**< Must be set to # of elements in label */
  uint8_t label[QMI_SIM_INTERNAL_MMGSDI_MAX_AID_LEN_V01];
  /**<   Label for the AID.*/
}sim_internal_mmgsdi_aid_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_pin_enum_v01 pin_id;
  /**<   Type of pin.*/

  sim_internal_mmgsdi_pin_status_enum_v01 status;
  /**<   Status of PIN checking.*/

  sim_internal_mmgsdi_pin_replace_enum_v01 pin_replacement;
  /**<   PIN, or replaced by UPIN.*/

  uint8_t num_retries;
  /**<   Number of retries before PIN is blocked.*/

  uint8_t num_unblock_retries;
  /**<   Number of consecutive false UNBLOCK PIN presentations
       allowed before unblocking is blocked. */

  uint8_t valid_num_retries;
  /**<   Remaining retries counter.*/

  uint8_t valid_num_unblock_retries;
  /**<   Remaining unblock retries counter.*/
}sim_internal_mmgsdi_pin_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint8_t cached;
  /**<   If set to TRUE, indicates that the application has been selected and
         that activation may be in progress (applicable only for provisioning
         applications). */

  sim_internal_mmgsdi_slot_id_enum_v01 slot;
  /**<   Slot in which the card is inserted.*/

  sim_internal_mmgsdi_pin_info_type_v01 pin1;
  /**<   PIN1 information*/

  sim_internal_mmgsdi_pin_info_type_v01 pin2;
  /**<   PIN2 information*/

  sim_internal_mmgsdi_pin_info_type_v01 universal_pin;
  /**<   UPIN information*/

  uint8_t prov_app;

  sim_internal_mmgsdi_aid_type_v01 app_data;
  /**<   Information about the associated application.*/

  sim_internal_mmgsdi_pin_info_type_v01 hiddenkey;
  /**<   EF Hidden Key used for hiding UICC phone book entries.*/

  uint8_t dir_index;
  /**<   Record number in the EF-DIR corresponding to the selected application.*/
}sim_internal_mmgsdi_app_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint32_t file_list_len;  /**< Must be set to # of elements in file_list */
  sim_internal_mmgsdi_file_enum_v01 file_list[QMI_SIM_INTERNAL_MMGSDI_REFRESH_FILE_MAX_LENGTH_V01];
  /**<   Refresh file list*/

  uint32_t file_path_len;  /**< Must be set to # of elements in file_path */
  uint8_t file_path[QMI_SIM_INTERNAL_MMGSDI_REFRESH_PATH_MAX_LENGTH_V01];
  /**<   Refresh file path*/
}sim_internal_mmgsdi_refresh_file_list_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint32_t data_len;  /**< Must be set to # of elements in data */
  uint8_t data[QMI_SIM_INTERNAL_MMGSDI_DATA_MAX_LENGTH_V01];
  /**<   Data with max size of 255*/
}sim_internal_mmgsdi_data_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint32_t data_len;  /**< Must be set to # of elements in data */
  uint8_t data[QMI_SIM_INTERNAL_MMGSDI_LARGE_DATA_MAX_LENGTH_V01];
}sim_internal_mmgsdi_large_data_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint8_t valid;
  /**<   Indicates whether Status Word 1 and
       Status Word 2 members are to be checked. */

  uint8_t sw1;
  /**<   Status Word 1.*/

  uint8_t sw2;
  /**<   Status Word 2.*/
}sim_internal_mmgsdi_sw_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint8_t sw1;
  /**<   Status Word 1.*/

  uint8_t sw2;
  /**<   Status Word 2.*/
}sim_internal_gstk_sw_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;
  /**<   Return status of the request.*/

  uint32_t client_ref;
  /**<   Client data that was passed in earlier in the request.*/

  uint64_t client_id;
  /**<   ID of the client to be notified.*/

  uint64_t session_id;
  /**<   Client session ID*/

  uint32_t response_len;
  /**<   Length of message plus header.*/

  uint32_t payload_len;
  /**<   Length of the message payload. This includes the size of the
       structure without the header, as well as the size of data
       being allocated. */

  sim_internal_mmgsdi_slot_id_enum_v01 slot_id;
  /**<   Slot on which the request is to be performed.*/

  sim_internal_mmgsdi_sw_type_v01 status_word;
  /**<   Status word.*/

  uint32_t response_handle;
  /**<   Response handle*/
}sim_internal_mmgsdi_response_header_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_file_security_enum_v01 protection_method;
  /**<   Protection method*/

  uint32_t protection_pin_len;  /**< Must be set to # of elements in protection_pin */
  sim_internal_mmgsdi_pin_enum_v01 protection_pin[QMI_SIM_INTERNAL_MMGSDI_PIN_MAX_LENGTH_V01];
  /**<   List of protection PINs.*/
}sim_internal_mmgsdi_file_security_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_file_security_type_v01 read;
  /**<   Read security requirements.*/

  sim_internal_mmgsdi_file_security_type_v01 write;
  /**<   Write security requirements.*/

  sim_internal_mmgsdi_file_security_type_v01 increase;
  /**<   Increase security requirements.*/

  sim_internal_mmgsdi_file_security_type_v01 invalidate_deactivate;
  /**<   Invalidate or deactivate security requirements.*/

  sim_internal_mmgsdi_file_security_type_v01 rehabilitate_activate;
  /**<   Rehabilitate or activate security requirements.*/
}sim_internal_mmgsdi_file_security_access_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint8_t file_invalidated;
  /**<   Indicates whether the file is invalidated.*/

  uint8_t read_write_when_invalidated;
  /**<   Indicates if a read/write operation is allowed when the
       file is invalidated. */
}sim_internal_mmgsdi_file_status_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint32_t path_buf_len;  /**< Must be set to # of elements in path_buf */
  uint16_t path_buf[QMI_SIM_INTERNAL_MMGSDI_MAX_PATH_LEN_V01];
  /**<   Path buffer*/
}sim_internal_mmgsdi_path_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint8_t accessed_rec_num;
  /**<   Accessed record number.*/

  uint16_t accessed_offset;
  /**<   Accessed record offset.*/

  sim_internal_mmgsdi_large_data_type_v01 read_data;
  /**<   Data read from the card.*/
}sim_internal_mmgsdi_session_read_data_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint8_t accessed_rec_num;
  /**<   Accessed record number.*/

  uint16_t accessed_offset;
  /**<   Accessed record offset.*/

  uint16_t write_data_len;
  /**<   Length of the data written to the card.*/
}sim_internal_mmgsdi_session_write_data_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID of the caller*/

  sim_internal_mmgsdi_file_enum_v01 file_num;
  /**<   Offset from the start of a file.*/
}sim_internal_mmgsdi_session_cache_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session id*/

  sim_internal_mmgsdi_autn_context_enum_v01 auth_context;
  /**<   Authentication context*/

  sim_internal_mmgsdi_data_type_v01 auth_req;
  /**<   Authentication request*/
}sim_internal_mmgsdi_auth_request_data_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID of the caller*/

  sim_internal_mmgsdi_refresh_file_list_type_v01 refresh_files;
  /**<   List of changed EF files for the ME to read.*/

  uint8_t vote_for_init;
  /**<   Vote to bring down the call stack or terminate the application.*/
}sim_internal_mmgsdi_session_register_for_refresh_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Registers a client for new events and allocates a client
             ID for any sessions owned by that client. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Event handle */
  uint32_t event_handle;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_client_id_and_evt_reg_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Registers a client for new events and allocates a client
             ID for any sessions owned by that client. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_client_id_and_evt_reg_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with client id and event reg confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_client_id_and_evt_reg_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; De-registers a client for events and deallocates the client ID
             and any sessions owned by that client. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Client ID */
  uint64_t client_id;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_client_id_and_evt_dereg_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; De-registers a client for events and deallocates the client ID
             and any sessions owned by that client. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_client_id_and_evt_dereg_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with client id and event de-reg confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_client_id_and_evt_dereg_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t client_id;
  /**<   Client ID.*/

  sim_internal_mmgsdi_session_type_enum_v01 session_type;
  /**<   Session type.*/

  uint32_t event_handle;
  /**<   App Event handle for events to be notified.*/

  uint8_t set_notify;
  /**<   Boolean indicating whether clients should call
       mmgsdi_session_prov_app_init_complete() when they
       finish their initialization procedure for the
       applications. This is only applicable to the
       provisioning-session types and only used if
       event_handle is not NULL.*/
}sim_internal_mmgsdi_session_open_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_data_type_v01 app_info;
  /**<   Application identifier.*/

  uint8_t exclusive_channel;
  /**<   Indicates whether other session
       IDs can be mapped to the same
       channel. */
}sim_internal_mmgsdi_non_prov_app_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Opens a session to an application on the card */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Session open request data */
  sim_internal_mmgsdi_session_open_req_type_v01 session_open;
  /**<   Application information associated with non-provisioning session.
       The optional TLV should be present if the session is of type
       SIM_INTERNAL_MMGSDI_NON_PROV_SESSION_SLOT_1 or
       MMGSDI_NON_PROV_SESSION_SLOT_2. TLV will be ignored for other
       session types. */

  /* Optional */
  uint8_t non_prov_app_data_valid;  /**< Must be set to true if non_prov_app_data is being passed */
  sim_internal_mmgsdi_non_prov_app_info_type_v01 non_prov_app_data;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_open_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Opens a session to an application on the card */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_open_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID returned to indicate which session has been selected.*/

  uint8_t channel_id;
  /**<   Channel ID*/

  sim_internal_mmgsdi_slot_id_enum_v01 slot_id;
  /**<   Slot ID corresponding to the session (valid only if an
       application is linked to the session). */

  sim_internal_mmgsdi_aid_type_v01 app_info;
  /**<   Application details (application type, ID, and label); valid only
       if an application is linked to the session. */
}sim_internal_mmgsdi_session_open_cnf_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with session open confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Mandatory */
  /*  Session open confirmation */
  sim_internal_mmgsdi_session_open_cnf_type_v01 session_open_cnf;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_open_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Closes the currently active session associated with the
             specified session ID. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Session ID */
  uint64_t session_id;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_close_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Closes the currently active session associated with the
             specified session ID. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_close_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID returned to indicate which session has been selected.*/

  sim_internal_mmgsdi_aid_type_v01 app_info;
  /**<   Application details (application type, ID, and label); valid only
       if an application is linked to the session. */
}sim_internal_mmgsdi_session_close_cnf_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with session close confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Mandatory */
  /*  Session close confirmation */
  sim_internal_mmgsdi_session_close_cnf_type_v01 session_close_cnf;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_close_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Gets the information of all available applications on UICC/ICC cards. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Client ID */
  uint64_t client_id;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_get_all_available_apps_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Gets the information of all available applications on UICC/ICC cards. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_get_all_available_apps_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with get all available applications confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Card 1 app info */
  uint8_t card_1_app_info_valid;  /**< Must be set to true if card_1_app_info is being passed */
  uint32_t card_1_app_info_len;  /**< Must be set to # of elements in card_1_app_info */
  sim_internal_mmgsdi_app_info_type_v01 card_1_app_info[QMI_SIM_INTERNAL_MMGSDI_MAX_APP_INFO_V01];

  /* Optional */
  /*  Card 2 app info */
  uint8_t card_2_app_info_valid;  /**< Must be set to true if card_2_app_info is being passed */
  uint32_t card_2_app_info_len;  /**< Must be set to # of elements in card_2_app_info */
  sim_internal_mmgsdi_app_info_type_v01 card_2_app_info[QMI_SIM_INTERNAL_MMGSDI_MAX_APP_INFO_V01];

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_get_all_available_apps_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Gets the information of all available applications on UICC/ICC cards. */
typedef struct {

  /* Mandatory */
  /*  Client ID */
  uint64_t client_id;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_get_all_available_apps_sync_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Gets the information of all available applications on UICC/ICC cards. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Card 1 app info */
  uint8_t card_1_app_info_valid;  /**< Must be set to true if card_1_app_info is being passed */
  uint32_t card_1_app_info_len;  /**< Must be set to # of elements in card_1_app_info */
  sim_internal_mmgsdi_app_info_type_v01 card_1_app_info[QMI_SIM_INTERNAL_MMGSDI_MAX_APP_INFO_V01];

  /* Optional */
  /*  Card 2 app info */
  uint8_t card_2_app_info_valid;  /**< Must be set to true if card_2_app_info is being passed */
  uint32_t card_2_app_info_len;  /**< Must be set to # of elements in card_2_app_info */
  sim_internal_mmgsdi_app_info_type_v01 card_2_app_info[QMI_SIM_INTERNAL_MMGSDI_MAX_APP_INFO_V01];

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_get_all_available_apps_sync_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Gets file attributes from any file in the SIM, USIM, RUIM, or CSIM card. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Session ID */
  uint64_t session_id;
  /**<   File enum file.
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;
  /**<   Path type file
      Either one of the optional TLV needs to be present in the request.
      Error is returned otherwise. */

  /* Optional */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_file_attr_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Gets file attributes from any file in the SIM, USIM, RUIM, or CSIM card. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_file_attr_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint32_t file_size;
  /**<   Total size of the file (MF, DF, or EF).*/

  uint8_t file_id[QMI_SIM_INTERNAL_MMGSDI_FILE_ID_SIZE_V01];
  /**<   ID used in the SIM/USIM/RUIM.*/

  sim_internal_mmgsdi_file_structure_enum_v01 file_type;
  /**<   Indicates which file_info type to use.*/
}sim_internal_mmgsdi_file_attributes_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_file_security_access_type_v01 file_security;
  /**<   Security access condition for the file.*/

  sim_internal_mmgsdi_file_status_type_v01 file_status;
  /**<   Status of the file.*/
}sim_internal_mmgsdi_transparent_file_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_file_security_access_type_v01 file_security;
  /**<   Security access condition for the file.*/

  sim_internal_mmgsdi_file_status_type_v01 file_status;
  /**<   Status of the file.*/

  uint16_t num_of_rec;
  /**<   Number of records in the file.*/

  uint16_t rec_len;
  /**<   Length of each record.*/
}sim_internal_mmgsdi_linear_fixed_file_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_file_security_access_type_v01 file_security;
  /**<   Security access condition for the file.*/

  sim_internal_mmgsdi_file_status_type_v01 file_status;
  /**<   Status of the file.*/

  uint16_t num_of_rec;
  /**<   Number of records in the file.*/

  uint16_t rec_len;
  /**<   Length of each record.*/

  uint8_t increase_allowed;
  /**<   Increase operation is or is not allowed.*/
}sim_internal_mmgsdi_cyclic_file_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with get file attributes confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Mandatory */
  /*  File path */
  uint32_t file_path_len;  /**< Must be set to # of elements in file_path */
  sim_internal_mmgsdi_path_type_v01 file_path[QMI_SIM_INTERNAL_MMGSDI_MAX_FILE_PATHS_V01];

  /* Optional */
  /*  File attributes */
  uint8_t file_attr_valid;  /**< Must be set to true if file_attr is being passed */
  sim_internal_mmgsdi_file_attributes_type_v01 file_attr;

  /* Optional */
  /*  Raw file attributes data */
  uint8_t raw_file_attr_data_valid;  /**< Must be set to true if raw_file_attr_data is being passed */
  sim_internal_mmgsdi_data_type_v01 raw_file_attr_data;

  /* Optional */
  /*  File enum file */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;

  /* Optional */
  /*  Path type file */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Transparent file info */
  uint8_t transparent_file_info_valid;  /**< Must be set to true if transparent_file_info is being passed */
  sim_internal_mmgsdi_transparent_file_info_type_v01 transparent_file_info;

  /* Optional */
  /*  Linear fixed file info */
  uint8_t linear_fixed_file_info_valid;  /**< Must be set to true if linear_fixed_file_info is being passed */
  sim_internal_mmgsdi_linear_fixed_file_info_type_v01 linear_fixed_file_info;

  /* Optional */
  /*  Cyclic file info */
  uint8_t cyclic_file_info_valid;  /**< Must be set to true if cyclic_file_info is being passed */
  sim_internal_mmgsdi_cyclic_file_info_type_v01 cyclic_file_info;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_file_attr_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID of the caller*/

  uint16_t offset;
  /**<   Offset from the start of a file.*/

  uint16_t req_len;
  /**<   Request length*/
}sim_internal_mmgsdi_session_read_transparent_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Provides read access (by file enumeration or path) to any transparent
             file in the SIM, USIM, RUIM, or CSIM. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Read transparent request data */
  sim_internal_mmgsdi_session_read_transparent_req_type_v01 read_req;
  /**<   File enum file
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;
  /**<   Path type file
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_read_transparent_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Provides read access (by file enumeration or path) to any transparent
             file in the SIM, USIM, RUIM, or CSIM. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_read_transparent_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with read confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Read confirmation data */
  uint8_t read_resp_data_valid;  /**< Must be set to true if read_resp_data is being passed */
  sim_internal_mmgsdi_session_read_data_type_v01 read_resp_data;

  /* Optional */
  /*  File enum file */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;

  /* Optional */
  /*  Path type file */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_read_transparent_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID of the caller*/

  uint16_t record_num;
  /**<   Offset from the start of a file.*/

  uint16_t req_len;
  /**<   Request length*/
}sim_internal_mmgsdi_session_read_record_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Provides read access (by file enumeration or path) to any record file
             file in the SIM, USIM, RUIM, or CSIM. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Read record request data */
  sim_internal_mmgsdi_session_read_record_req_type_v01 read_req;
  /**<   File enum file
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;
  /**<   Path type file
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_read_record_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Provides read access (by file enumeration or path) to any record file
             file in the SIM, USIM, RUIM, or CSIM. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_read_record_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with read confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Read confirmation data */
  uint8_t read_resp_data_valid;  /**< Must be set to true if read_resp_data is being passed */
  sim_internal_mmgsdi_session_read_data_type_v01 read_resp_data;

  /* Optional */
  /*  File enum file */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;

  /* Optional */
  /*  Path type file */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_read_record_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID of the caller*/

  uint16_t offset;
  /**<   Offset from the start of a file.*/

  sim_internal_mmgsdi_large_data_type_v01 write_data;
  /**<   Request length*/
}sim_internal_mmgsdi_session_write_transparent_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Provides write access (by file enumeration or path) to any transparent file. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Write transparent request data */
  sim_internal_mmgsdi_session_write_transparent_req_type_v01 write_req;
  /**<   File enum file
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;
  /**<   Path type file
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_write_transparent_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Provides write access (by file enumeration or path) to any transparent file. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_write_transparent_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with write confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Write confirmation data */
  uint8_t write_resp_data_valid;  /**< Must be set to true if write_resp_data is being passed */
  sim_internal_mmgsdi_session_write_data_type_v01 write_resp_data;

  /* Optional */
  /*  File enum file */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;

  /* Optional */
  /*  Path type file */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_write_transparent_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID of the caller*/

  sim_internal_mmgsdi_file_structure_enum_v01 record_type;
  /**<   Record type*/

  uint16_t record_num;
  /**<   Record number*/

  sim_internal_mmgsdi_large_data_type_v01 write_data;
  /**<   Request length*/
}sim_internal_mmgsdi_session_write_record_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Provides write access (by file enumeration or path) to any record file. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Write record request data */
  sim_internal_mmgsdi_session_write_record_req_type_v01 write_req;
  /**<   File enum file
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;
  /**<   Path type file
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_write_record_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Provides write access (by file enumeration or path) to any record file. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_write_record_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with write confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Write confirmation data */
  uint8_t write_resp_data_valid;  /**< Must be set to true if write_resp_data is being passed */
  sim_internal_mmgsdi_session_write_data_type_v01 write_resp_data;

  /* Optional */
  /*  File enum file */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;

  /* Optional */
  /*  Path type file */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_write_record_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Read data from a cached file. */
typedef struct {

  /* Mandatory */
  /*  Read cache request data */
  sim_internal_mmgsdi_session_cache_req_type_v01 read_req;

  /* Mandatory */
  /*  Read data length */
  uint16_t read_data_len;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_read_cache_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Read data from a cached file. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Read data */
  uint8_t read_data_valid;  /**< Must be set to true if read_data is being passed */
  sim_internal_mmgsdi_large_data_type_v01 read_data;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_read_cache_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Provide the size of the file to be cached for read. */
typedef struct {

  /* Mandatory */
  /*  Read cache request data */
  sim_internal_mmgsdi_session_cache_req_type_v01 read_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_read_cache_file_size_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Provide the size of the file to be cached for read. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Read data */
  uint8_t file_size_valid;  /**< Must be set to true if file_size is being passed */
  uint16_t file_size;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_read_cache_file_size_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Write data to a cached file. */
typedef struct {

  /* Mandatory */
  /*  Write cache request data */
  sim_internal_mmgsdi_session_cache_req_type_v01 write_req;

  /* Mandatory */
  /*  Write data */
  sim_internal_mmgsdi_data_type_v01 write_data;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_write_cache_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Write data to a cached file. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_write_cache_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session id*/

  sim_internal_mmgsdi_service_enum_v01 srvc_type;
  /**<   Service type*/
}sim_internal_mmgsdi_service_avail_req_data_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Determines if a service is available, given the service type. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Service Available request data */
  sim_internal_mmgsdi_service_avail_req_data_type_v01 srvc_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_is_service_available_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Determines if a service is available, given the service type. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_is_service_available_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with read confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Read confirmation data */
  uint8_t srvc_available_valid;  /**< Must be set to true if srvc_available is being passed */
  uint8_t srvc_available;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_is_service_available_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Extracts all the FDN, BDN, ACL, and IMSI status provisioning
            application capabilities, and the phone book-related capabilities. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Session ID */
  uint64_t session_id;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_app_capabilities_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Extracts all the FDN, BDN, ACL, and IMSI status provisioning
            application capabilities, and the phone book-related capabilities. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_app_capabilities_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint8_t fdn_enabled;
  /**<   Fixed Dialing Number is enabled for this application.*/

  uint8_t bdn_enabled;
  /**<   Barred Dialing Number is enabled for this application.*/

  uint8_t acl_enabled;
  /**<   Access Control List is enabled for this  application.*/

  uint8_t imsi_invalidated;
  /**<   International Mobile Subscriber Identity is invalidated.*/
}sim_internal_mmgsdi_session_app_capabilities_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with app capabilities confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  App capabilities data */
  uint8_t app_capabilities_valid;  /**< Must be set to true if app_capabilities is being passed */
  sim_internal_mmgsdi_session_app_capabilities_type_v01 app_capabilities;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_app_capabilities_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Extracts all the FDN, BDN, ACL, and IMSI status provisioning
            application capabilities, and the phone book-related capabilities. */
typedef struct {

  /* Mandatory */
  /*  Session ID */
  uint64_t session_id;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_app_capabilities_sync_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Extracts all the FDN, BDN, ACL, and IMSI status provisioning
            application capabilities, and the phone book-related capabilities. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  App capabilities data */
  uint8_t app_capabilities_valid;  /**< Must be set to true if app_capabilities is being passed */
  sim_internal_mmgsdi_session_app_capabilities_type_v01 app_capabilities;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_app_capabilities_sync_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session id*/

  sim_internal_mmgsdi_data_type_v01 increase_data;
  /**<   Increase data*/
}sim_internal_mmgsdi_session_increase_request_data_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Provides increase access (by file enumeration or path) to the
            last-selected record in a cyclic file. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Session ID */
  sim_internal_mmgsdi_session_increase_request_data_type_v01 increase_req_data;
  /**<   File enum file.
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;
  /**<   Path type file
      Either one of the optional TLV needs to be present in the request.
      Error is returned otherwise. */

  /* Optional */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_increase_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Provides increase access (by file enumeration or path) to the
            last-selected record in a cyclic file. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_increase_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with increase confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Increase data */
  uint8_t increase_data_valid;  /**< Must be set to true if increase_data is being passed */
  sim_internal_mmgsdi_data_type_v01 increase_data;
  /**<   File enum file.
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;
  /**<   Path type file
      Either one of the optional TLV needs to be present in the request.
      Error is returned otherwise. */

  /* Optional */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_increase_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Gets the PIN status of all relevant PINs applicable to the session ID
            provided. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Session ID */
  uint64_t session_id;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_all_pin_status_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Gets the PIN status of all relevant PINs applicable to the session ID
            provided. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_all_pin_status_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_pin_info_type_v01 pin1;
  /**<   PIN1 information*/

  sim_internal_mmgsdi_pin_info_type_v01 pin2;
  /**<   PIN2 information*/

  sim_internal_mmgsdi_pin_info_type_v01 universal_pin;
  /**<   UPIN information*/

  sim_internal_mmgsdi_pin_info_type_v01 hiddenkey;
  /**<   EF Hidden Key used for hiding UICC phone book entries.*/

  uint8_t dir_index;
  /**<   Record number in the EF-DIR corresponding to the selected application.*/
}sim_internal_mmgsdi_session_all_pin_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with pin status confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  All pin status info */
  uint8_t all_pin_info_valid;  /**< Must be set to true if all_pin_info is being passed */
  sim_internal_mmgsdi_session_all_pin_info_type_v01 all_pin_info;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_all_pin_status_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session id*/

  sim_internal_mmgsdi_in_tc_mode_enum_v01 mode;
  /**<   Mode on which traffic channel established GW or 1X*/
}sim_internal_mmgsdi_toggle_uim_power_control_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Inform UIM when the modem is in and out of traffic channel. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_toggle_uim_power_control_req_type_v01 req_data;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_toggle_uim_power_control_sync_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Inform UIM when the modem is in and out of traffic channel. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Boolean for in traffic channel */
  uint8_t in_TC_valid;  /**< Must be set to true if in_TC is being passed */
  uint8_t in_TC;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_toggle_uim_power_control_sync_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Gets session information: session ID, session type, slot number,
             and channel ID. */
typedef struct {

  /* Mandatory */
  /*  Query info */
  sim_internal_mmgsdi_session_info_enum_v01 query_info;
  /**<   Session ID
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t session_id_valid;  /**< Must be set to true if session_id is being passed */
  uint64_t session_id;
  /**<   Session type
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t session_type_valid;  /**< Must be set to true if session_type is being passed */
  sim_internal_mmgsdi_session_type_enum_v01 session_type;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_info_sync_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_session_type_enum_v01 session_type;

  sim_internal_mmgsdi_slot_id_enum_v01 slot_id;

  uint8_t channel_id;

  sim_internal_mmgsdi_aid_type_v01 app_data;

  sim_internal_mmgsdi_app_state_enum_v01 app_state;
}sim_internal_mmgsdi_session_get_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Gets session information: session ID, session type, slot number,
             and channel ID. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Boolean for in traffic channel */
  uint8_t get_info_valid;  /**< Must be set to true if get_info is being passed */
  sim_internal_mmgsdi_session_get_info_type_v01 get_info;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_get_info_sync_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Indicates that a subscription on the card is illegal and is to be
             blocked. */
typedef struct {

  /* Mandatory */
  /*  Session ID */
  uint64_t session_id;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_illegal_subscription_sync_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Indicates that a subscription on the card is illegal and is to be
             blocked. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_illegal_subscription_sync_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Perform a "Network" Initiated Authentication with a UICC
             Application. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Auth request data */
  sim_internal_mmgsdi_auth_request_data_type_v01 auth_req_data;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_uicc_authenticate_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Perform a "Network" Initiated Authentication with a UICC
             Application. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_uicc_authenticate_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with authentication confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Auth response data buffer */
  uint8_t data_valid;  /**< Must be set to true if data is being passed */
  uint32_t data_len;  /**< Must be set to # of elements in data */
  uint8_t data[QMI_SIM_INTERNAL_MMGSDI_AUTH_RESP_MAX_LENGTH_V01];

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_uicc_authenticate_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Perform a "Network" Initiated Authentication with the USIM
               Application. This is only valid and applicable when an USIM
               Application is available. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Auth request data */
  sim_internal_mmgsdi_auth_request_data_type_v01 auth_req_data;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_usim_authenticate_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Perform a "Network" Initiated Authentication with the USIM
               Application. This is only valid and applicable when an USIM
               Application is available. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_usim_authenticate_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with authentication confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Auth response data buffer */
  uint8_t data_valid;  /**< Must be set to true if data is being passed */
  uint32_t data_len;  /**< Must be set to # of elements in data */
  uint8_t data[QMI_SIM_INTERNAL_MMGSDI_AUTH_RESP_MAX_LENGTH_V01];

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_usim_authenticate_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Perform a "Network" Initiated Authentication with the SIM card. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Session id */
  uint64_t session_id;

  /* Mandatory */
  /*  Rand data */
  sim_internal_mmgsdi_data_type_v01 rand_data;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_run_gsm_algo_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Perform a "Network" Initiated Authentication with the SIM card. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_run_gsm_algo_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint8_t sres_resp[QMI_SIM_INTERNAL_MMGSDI_GSM_ALGO_SRES_LEN_V01];
  /**<   Signed Response calculated by a USIM.*/

  uint8_t kc_resp[QMI_SIM_INTERNAL_MMGSDI_GSM_ALGO_KC_LEN_V01];
  /**<   GSM Key Cipher.*/
}sim_internal_mmgsdi_run_gsm_algo_response_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with authentication confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  GSM algo response */
  uint8_t run_gsm_algo_resp_valid;  /**< Must be set to true if run_gsm_algo_resp is being passed */
  sim_internal_mmgsdi_run_gsm_algo_response_type_v01 run_gsm_algo_resp;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_run_gsm_algo_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session id*/

  sim_internal_mmgsdi_perso_feature_enum_v01 feature;
  /**<   Identifier for the personalization feature.*/

  sim_internal_mmgsdi_data_type_v01 deperso_data;
  /**<   Pointer to the depersonalization data
       containing the control key.
   */
}sim_internal_mmgsdi_deperso_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Perform a "Network" Initiated Authentication with the SIM card. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Session id */
  sim_internal_mmgsdi_deperso_req_type_v01 ota_deperso_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_perso_ota_deperso_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Perform a "Network" Initiated Authentication with the SIM card. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_perso_ota_deperso_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with authentication confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  OTA deperso response */
  uint8_t ota_deperso_resp_valid;  /**< Must be set to true if ota_deperso_resp is being passed */
  sim_internal_mmgsdi_data_type_v01 ota_deperso_resp;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_perso_ota_deperso_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Registers a client for File Change Notifications (FCNs) for
            specific files, or for voting to refresh an application. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Register for refresh request */
  sim_internal_mmgsdi_session_register_for_refresh_req_type_v01 refresh_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_register_for_refresh_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Registers a client for File Change Notifications (FCNs) for
            specific files, or for voting to refresh an application. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_register_for_refresh_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with refresh confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Origination of the refresh request */
  uint8_t orig_refresh_req_valid;  /**< Must be set to true if orig_refresh_req is being passed */
  sim_internal_mmgsdi_refresh_orig_enum_v01 orig_refresh_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_register_for_refresh_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Registers a client for FCNs for specific files, or for voting to refresh an
            application, or sending approval for proceeding with refresh. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Register for refresh request */
  sim_internal_mmgsdi_session_register_for_refresh_req_type_v01 refresh_req;

  /* Mandatory */
  /*  Proceed with refresh approval */
  uint8_t proceed_with_refresh;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_register_for_refresh_ok_to_proceed_voting_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Registers a client for FCNs for specific files, or for voting to refresh an
            application, or sending approval for proceeding with refresh. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_register_for_refresh_ok_to_proceed_voting_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with refresh ok to proceed voting confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Origination of the refresh request */
  uint8_t orig_refresh_req_valid;  /**< Must be set to true if orig_refresh_req is being passed */
  sim_internal_mmgsdi_refresh_orig_enum_v01 orig_refresh_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_register_for_refresh_ok_to_proceed_voting_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   List of changed EF files for the ME to read.*/

  uint8_t ok_to_proceed;
  /**<   OK to continue with refresh (TRUE) or not (FALSE).*/
}sim_internal_mmgsdi_session_proceed_with_refresh_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Approves to proceed with refresh. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Proceed with refresh data */
  sim_internal_mmgsdi_session_proceed_with_refresh_req_type_v01 refresh_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_ok_to_proceed_with_refresh_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Approves to proceed with refresh. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_ok_to_proceed_with_refresh_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with refresh confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Origination of the refresh request */
  uint8_t orig_refresh_req_valid;  /**< Must be set to true if orig_refresh_req is being passed */
  sim_internal_mmgsdi_refresh_orig_enum_v01 orig_refresh_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_ok_to_proceed_with_refresh_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID*/

  uint8_t ok_to_refresh;
  /**<   OK to refresh (TRUE) or not (FALSE).*/
}sim_internal_mmgsdi_session_ok_to_refresh_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Approves to refresh. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Proceed with refresh data */
  sim_internal_mmgsdi_session_ok_to_refresh_req_type_v01 refresh_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_ok_to_refresh_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Approves to refresh. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_ok_to_refresh_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with refresh confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Origination of the refresh request */
  uint8_t orig_refresh_req_valid;  /**< Must be set to true if orig_refresh_req is being passed */
  sim_internal_mmgsdi_refresh_orig_enum_v01 orig_refresh_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_ok_to_refresh_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID*/

  uint8_t pass_fail;
  /**<   Refresh successfully (TRUE) or not (FALSE).
       Client successfully read all files that were refreshed.
       This can also be applicable to initialization cases,
       where the client was able to perform its initialization properly.
   */
}sim_internal_mmgsdi_session_refresh_complete_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Notifies the MMGSDI when the client has finished processing all
            the files that were refreshed. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Proceed with refresh data */
  sim_internal_mmgsdi_session_refresh_complete_req_type_v01 refresh_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_refresh_complete_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Notifies the MMGSDI when the client has finished processing all
            the files that were refreshed. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_refresh_complete_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with refresh confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Origination of the refresh request */
  uint8_t orig_refresh_req_valid;  /**< Must be set to true if orig_refresh_req is being passed */
  sim_internal_mmgsdi_refresh_orig_enum_v01 orig_refresh_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_refresh_complete_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Deregisters a client for FCNs for specific files, voting for
            refresh, or both. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Register for refresh request */
  sim_internal_mmgsdi_session_register_for_refresh_req_type_v01 deregister_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_deregister_for_refresh_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Deregisters a client for FCNs for specific files, voting for
            refresh, or both. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_deregister_for_refresh_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with deregister refresh confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_deregister_for_refresh_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_search_option_enum_v01 offset_type;
  /**<   Indicates a search option in a record.*/

  uint16_t offset_data;
  /**<   One byte of information. For a record offset, the range is from 0x00
        to 0xFE. For a character value, the range is from 0x00 to 0xFF. */
}sim_internal_mmgsdi_search_offset_data_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID of the caller*/

  sim_internal_mmgsdi_search_enum_v01 search_type;
  /**<   UICC search type*/

  uint16_t search_rec_num;
  /**<   Record number from where the search starts in
       the file */

  sim_internal_mmgsdi_search_direction_enum_v01 search_direction;
  /**<   Search direction*/

  sim_internal_mmgsdi_search_offset_data_type_v01 enhanced_search_offset_data;
  /**<   Offset from where the search starts in a record*/

  sim_internal_mmgsdi_data_type_v01 search_pattern;
  /**<   Data to be searched*/
}sim_internal_mmgsdi_session_search_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Performs a Search command on a UICC card. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Search request data */
  sim_internal_mmgsdi_session_search_req_type_v01 search_req;
  /**<   File enum file
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;
  /**<   Path type file
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_search_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Performs a Search command on a UICC card. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_search_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with search confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  List of record numbers */
  uint8_t searched_record_nums_valid;  /**< Must be set to true if searched_record_nums is being passed */
  sim_internal_mmgsdi_data_type_v01 searched_record_nums;

  /* Optional */
  /*  File enum file */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;

  /* Optional */
  /*  Path type file */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_search_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID of the caller*/

  sim_internal_mmgsdi_seek_direction_enum_v01 seek_direction;
  /**<   UICC seek direction*/

  sim_internal_mmgsdi_data_type_v01 seek_pattern;
  /**<   Seek data*/
}sim_internal_mmgsdi_session_seek_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Performs a Search command on a UICC card. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Search request data */
  sim_internal_mmgsdi_session_seek_req_type_v01 seek_req;
  /**<   File enum file
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file;
  /**<   Path type file
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  sim_internal_mmgsdi_path_type_v01 path_type_file;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_seek_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Performs a Search command on a UICC card. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_seek_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Performs a Search command on a UICC card. */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  Session ID */
  uint64_t session_id;
  /**<   File enum file list
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t file_enum_file_valid;  /**< Must be set to true if file_enum_file is being passed */
  uint32_t file_enum_file_len;  /**< Must be set to # of elements in file_enum_file */
  sim_internal_mmgsdi_file_enum_v01 file_enum_file[QMI_SIM_INTERNAL_MMGSDI_MAX_FILE_LIST_V01];
  /**<   Path type file list
       Either one of the optional TLV needs to be present in the request.
       Error is returned otherwise. */

  /* Optional */
  uint8_t path_type_file_valid;  /**< Must be set to true if path_type_file is being passed */
  uint32_t path_type_file_len;  /**< Must be set to # of elements in path_type_file */
  sim_internal_mmgsdi_path_type_v01 path_type_file[QMI_SIM_INTERNAL_MMGSDI_MAX_FILE_LIST_V01];

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_register_for_file_update_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Performs a Search command on a UICC card. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_register_for_file_update_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates clients with seek confirmation. */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_session_register_for_file_update_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Request protocol for the slot. */
typedef struct {

  /* Mandatory */
  /*  Client ID */
  uint64_t client_id;

  /* Mandatory */
  /*  Slot ID */
  sim_internal_mmgsdi_slot_id_enum_v01 slot;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_get_protocol_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Request protocol for the slot. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Protocol */
  uint8_t protocol_valid;  /**< Must be set to true if protocol is being passed */
  sim_internal_mmgsdi_protocol_enum_v01 protocol;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_get_protocol_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t client_id;
  /**<   ID of the client to be notified.*/

  uint64_t session_id;
  /**<   Client session ID*/

  uint32_t event_handle;
  /**<   Event handle.*/
}sim_internal_mmgsdi_event_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_pin_events_enum_v01 pin_event_enum;
  /**<   Name of the pin event.*/

  sim_internal_mmgsdi_slot_id_enum_v01 slot;
  /**<   Slot in which the card is inserted.*/

  sim_internal_mmgsdi_pin_info_type_v01 pin_info;
  /**<   Status of the PINs returned.*/

  uint32_t aid_type_len;  /**< Must be set to # of elements in aid_type */
  sim_internal_mmgsdi_aid_type_v01 aid_type[QMI_SIM_INTERNAL_MMGSDI_MAX_APP_INFO_V01];
  /**<   Application information*/

  uint8_t dir_index;
  /**<   Record number in the EF-DIR
       corresponding to the selected
       application. */
}sim_internal_mmgsdi_pin_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_slot_id_enum_v01 slot;
  /**<   Slot in which the card is inserted.*/

  sim_internal_mmgsdi_protocol_enum_v01 protocol;
  /**<   Type of card protocol.*/

  uint8_t ok_dl;
  /**<   State of download event.*/
}sim_internal_mmgsdi_tp_dl_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_slot_id_enum_v01 slot;
  /**<   Slot in which the card is inserted.*/

  sim_internal_mmgsdi_refresh_stage_enum_v01 stage;
  /**<   Stage of the refresh event.*/

  sim_internal_mmgsdi_refresh_mode_enum_v01 mode;
  /**<   Current refresh mode.*/

  sim_internal_mmgsdi_aid_type_v01 aid;
  /**<   Application Identifier.*/

  sim_internal_mmgsdi_app_info_type_v01 app_info;
  /**<   Application information.*/

  sim_internal_mmgsdi_refresh_file_list_type_v01 refresh_files;
  /**<   List of changed EF files for the ME to read.*/

  sim_internal_mmgsdi_refresh_mode_enum_v01 orig_mode;
  /**<   Previous refresh mode.*/

  sim_internal_mmgsdi_data_type_v01 plmn_list;
  /**<   List of Public Land Mobile Networks.*/
}sim_internal_mmgsdi_refresh_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_slot_id_enum_v01 slot;
  /**<   Slot in which the card is inserted.*/

  uint8_t enabled;
  /**<   Indicates whether the FDN feature is enabled.*/

  uint16_t rec_num;
  /**<   FDN record number which is updated.*/

  sim_internal_mmgsdi_data_type_v01 rec_data;
  /**<   FDN record data which is updated in the card*/
}sim_internal_mmgsdi_fdn_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_slot_id_enum_v01 slot;
  /**<   Slot in which the card is inserted.*/

  uint32_t aid_info_len;  /**< Must be set to # of elements in aid_info */
  sim_internal_mmgsdi_aid_type_v01 aid_info[QMI_SIM_INTERNAL_MMGSDI_MAX_APP_INFO_V01];
  /**<   Application ID, applicable only if avail_apps has usim_app in it.*/
}sim_internal_mmgsdi_card_inserted_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint8_t activated;
  /**<   Indicates if the Session ID is
       associated with an application on the
       card. If FALSE, access to session-
       related data will probably fail. */

  sim_internal_mmgsdi_app_info_type_v01 app_info;
  /**<   Application information.*/
}sim_internal_mmgsdi_session_changed_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_app_info_type_v01 app_info;
  /**<   Application information*/
}sim_internal_mmgsdi_subscription_ready_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_slot_id_enum_v01 slot;
  /**<   Slot in which the card is inserted.*/

  sim_internal_mmgsdi_card_err_info_enum_v01 info;
  /**<   Specific card error condition.*/
}sim_internal_mmgsdi_card_err_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID of the closed request.*/

  sim_internal_mmgsdi_slot_id_enum_v01 slot;
  /**<   Slot in which the card is inserted.*/

  sim_internal_mmgsdi_data_type_v01 app_id;
  /**<   Application details.*/
}sim_internal_mmgsdi_session_close_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t session_id;
  /**<   Session ID returned to indicate the application that was made illegal.*/
}sim_internal_mmgsdi_session_illegal_subscription_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_mmgsdi_perso_feature_enum_v01 feature;
  /**<   Ways to personalize an ME.*/

  sim_internal_mmgsdi_perso_status_enum_v01 status;
  /**<   Status of the personalization event.*/

  uint8_t num_retries;
  /**<   Number of personalization retries.*/

  uint8_t num_unblock_retries;
  /**<   Number of unblock retries allowed.*/
}sim_internal_mmgsdi_perso_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint8_t file_enum_file_isvalid;
  /**<   Valid flag for record number*/

  sim_internal_mmgsdi_file_enum_v01 file_enum_file;
  /**<   File enum file*/

  uint8_t path_type_file_isvalid;
  /**<   Valid flag for record number*/

  sim_internal_mmgsdi_path_type_v01 path_type_file;
  /**<   Path type file*/

  sim_internal_mmgsdi_file_structure_enum_v01 file_type;
  /**<   File type.*/

  uint8_t rec_num_isvalid;
  /**<   Valid flag for record number*/

  uint8_t rec_num;
  /**<   record number*/

  uint8_t offset_isvalid;
  /**<   Valid flag for offset*/

  uint16_t offset;
  /**<   offset*/

  sim_internal_mmgsdi_data_type_v01 file_data;
  /**<   File data.*/
}sim_internal_mmgsdi_file_update_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint16_t num_of_rec;
  /**<   Number of records in the file.*/

  uint16_t rec_len;
  /**<   Length of each record.*/

  sim_internal_mmgsdi_data_type_v01 valid_record_list;
  /**<   Number of valid records and record number list.*/
}mmgsdi_record_ef_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  mmgsdi_record_ef_info_type_v01 opl_info;
  /**<   record info of EF-OPL*/

  mmgsdi_record_ef_info_type_v01 pnn_info;
  /**<   record info of EF-OPL*/
}sim_internal_mmgsdi_eons_opl_pnn_cache_ready_evt_info_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates a QMI_SIM_INTERNAL_MMGSDI event. */
typedef struct {

  /* Mandatory */
  /*  event info */
  sim_internal_mmgsdi_event_info_type_v01 evt_info;

  /* Optional */
  /*  Pin event info */
  uint8_t evt_pin_valid;  /**< Must be set to true if evt_pin is being passed */
  sim_internal_mmgsdi_pin_evt_info_type_v01 evt_pin;

  /* Optional */
  /*  TP download info */
  uint8_t evt_terminal_profile_valid;  /**< Must be set to true if evt_terminal_profile is being passed */
  sim_internal_mmgsdi_tp_dl_evt_info_type_v01 evt_terminal_profile;

  /* Optional */
  /*  Refresh event info */
  uint8_t evt_refresh_valid;  /**< Must be set to true if evt_refresh is being passed */
  sim_internal_mmgsdi_refresh_evt_info_type_v01 evt_refresh;

  /* Optional */
  /*  FDN event info */
  uint8_t evt_fdn_valid;  /**< Must be set to true if evt_fdn is being passed */
  sim_internal_mmgsdi_fdn_evt_info_type_v01 evt_fdn;

  /* Optional */
  /*  Card inserted event info */
  uint8_t evt_card_inserted_valid;  /**< Must be set to true if evt_card_inserted is being passed */
  sim_internal_mmgsdi_card_inserted_evt_info_type_v01 evt_card_inserted;

  /* Optional */
  /*  Session changed event info */
  uint8_t evt_session_changed_valid;  /**< Must be set to true if evt_session_changed is being passed */
  sim_internal_mmgsdi_session_changed_evt_info_type_v01 evt_session_changed;

  /* Optional */
  /*  Subscription ready event info */
  uint8_t evt_subscription_ready_valid;  /**< Must be set to true if evt_subscription_ready is being passed */
  sim_internal_mmgsdi_subscription_ready_evt_info_type_v01 evt_subscription_ready;

  /* Optional */
  /*  Card error event info */
  uint8_t evt_card_error_valid;  /**< Must be set to true if evt_card_error is being passed */
  sim_internal_mmgsdi_card_err_evt_info_type_v01 evt_card_error;

  /* Optional */
  /*  Session close event info */
  uint8_t evt_session_close_valid;  /**< Must be set to true if evt_session_close is being passed */
  sim_internal_mmgsdi_session_close_evt_info_type_v01 evt_session_close;

  /* Optional */
  /*  Perso event info */
  uint8_t evt_perso_valid;  /**< Must be set to true if evt_perso is being passed */
  sim_internal_mmgsdi_perso_evt_info_type_v01 evt_perso;

  /* Optional */
  /*  Session illegal subscription event info */
  uint8_t evt_illegal_session_valid;  /**< Must be set to true if evt_illegal_session is being passed */
  sim_internal_mmgsdi_session_illegal_subscription_evt_info_type_v01 evt_illegal_session;

  /* Optional */
  /*  Update event info */
  uint8_t evt_update_valid;  /**< Must be set to true if evt_update is being passed */
  sim_internal_mmgsdi_file_update_evt_info_type_v01 evt_update;

  /* Optional */
  /*  EONS OPL PNN cache ready event info */
  uint8_t evt_eons_opl_pnn_cache_ready_valid;  /**< Must be set to true if evt_eons_opl_pnn_cache_ready is being passed */
  sim_internal_mmgsdi_eons_opl_pnn_cache_ready_evt_info_type_v01 evt_eons_opl_pnn_cache_ready;

  /* Optional */
  /*  Test MCC (Mobile Country Code) status event info  */
  uint8_t evt_test_mcc_status_valid;  /**< Must be set to true if evt_test_mcc_status is being passed */
  uint8_t evt_test_mcc_status;
  /**<   Indicates whether the MCC read from the card is a test MCC*/
}sim_internal_mmgsdi_event_report_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Performs a Search command on a UICC card. */
typedef struct {

  /* Mandatory */
  /*  Client type (reomte or local) */
  sim_internal_gstk_tal_client_enum_v01 client_type;

  /* Mandatory */
  /*  GSTK TAL handle */
  uint32_t gstk_tal_handle;

  /* Mandatory */
  /*  Bitmask to inform GSTK TAL about supported technologies or proactive commands */
  uint32_t tech_support_mask;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_gstk_tal_client_registration_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Performs a Search command on a UICC card. */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  GSTK status */
  uint8_t gstk_status_valid;  /**< Must be set to true if gstk_status is being passed */
  sim_internal_gstk_status_enum_v01 gstk_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_gstk_tal_client_registration_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_gstk_cmd_group_enum_v01 cmd_type;
  /**<   GSTK command group*/

  uint32_t user_data;
  /**<   User reference data*/

  sim_internal_mmgsdi_slot_id_enum_v01 slot_id;
  /**<   Slot id*/

  uint32_t data_len;  /**< Must be set to # of elements in data */
  uint8_t data[QMI_SIM_INTERNAL_MMGSDI_LARGE_DATA_MAX_LENGTH_V01];
  /**<   Data buffer*/
}sim_internal_gstk_tal_uim_cmd_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Send terminal response, terminal profile, or envelope commands */
typedef struct {

  /* Mandatory */
  /*  Client type (reomte or local) */
  sim_internal_gstk_tal_client_enum_v01 client_type;

  /* Mandatory */
  /*  GSTK TAL handle */
  sim_internal_gstk_tal_uim_cmd_type_v01 tal_cmd;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_gstk_tal_send_cmd_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Send terminal response, terminal profile, or envelope commands */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  GSTK status */
  uint8_t gstk_status_valid;  /**< Must be set to true if gstk_status is being passed */
  sim_internal_gstk_status_enum_v01 gstk_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_gstk_tal_send_cmd_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Notify GSTK TAL about the subscription availibility to the radio
             access technology */
typedef struct {

  /* Mandatory */
  /*  Client type (reomte or local) */
  sim_internal_gstk_tal_client_enum_v01 client_type;

  /* Mandatory */
  /*  Radio access technology */
  sim_internal_gstk_access_technology_enum_v01 rat;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_gstk_tal_notify_rat_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Notify GSTK TAL about the subscription availibility to the radio
             access technology */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  GSTK status */
  uint8_t gstk_status_valid;  /**< Must be set to true if gstk_status is being passed */
  sim_internal_gstk_status_enum_v01 gstk_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_gstk_tal_notify_rat_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Notify GSTK TAL about current Location Status */
typedef struct {

  /* Mandatory */
  /*  Client type (reomte or local) */
  sim_internal_gstk_tal_client_enum_v01 client_type;

  /* Mandatory */
  /*  Radio access technology */
  sim_internal_gstk_location_status_enum_v01 ls;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_gstk_tal_notify_ls_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Notify GSTK TAL about current Location Status */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  GSTK status */
  uint8_t gstk_status_valid;  /**< Must be set to true if gstk_status is being passed */
  sim_internal_gstk_status_enum_v01 gstk_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_gstk_tal_notify_ls_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint32_t user_data;
  /**<   User reference data*/

  uint8_t sw1;
  /**<   Status word 1*/

  uint8_t sw2;
  /**<   Status word 2*/

  sim_internal_gstk_tal_rpt_status_enum_v01 rpt_status;
  /**<   Report status*/

  uint32_t data_len;  /**< Must be set to # of elements in data */
  uint8_t data[QMI_SIM_INTERNAL_MMGSDI_LARGE_DATA_MAX_LENGTH_V01];
}sim_internal_gstk_tal_uim_report_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  sim_internal_gstk_slot_id_enum_v01 slot;
  /**<   Slot id*/

  uint32_t data_len;  /**< Must be set to # of elements in data */
  uint8_t data[QMI_SIM_INTERNAL_MMGSDI_LARGE_DATA_MAX_LENGTH_V01];
}sim_internal_gstk_tal_send_pro_cmd_arg_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Indicates a QMI_SIM_INTERNAL_GSTK_TAL event. */
typedef struct {

  /* Mandatory */
  /*  Event handle */
  uint32_t event_handle;

  /* Mandatory */
  /*  Command group */
  sim_internal_gstk_cmd_group_enum_v01 cmd_group;

  /* Optional */
  /*  TAL UIM report */
  uint8_t tal_uim_report_valid;  /**< Must be set to true if tal_uim_report is being passed */
  sim_internal_gstk_tal_uim_report_type_v01 tal_uim_report;

  /* Optional */
  /*  TAL proactive command */
  uint8_t tal_pro_cmd_valid;  /**< Must be set to true if tal_pro_cmd is being passed */
  sim_internal_gstk_tal_send_pro_cmd_arg_type_v01 tal_pro_cmd;

  /* Optional */
  /*  TAL intermediate status words accompanying the UIM report */
  uint8_t tal_intermediate_sw_valid;  /**< Must be set to true if tal_intermediate_sw is being passed */
  sim_internal_gstk_sw_type_v01 tal_intermediate_sw;

  /* Optional */
  /*  Pending Proactive Command Flag */
  uint8_t proactive_cmd_pending_valid;  /**< Must be set to true if proactive_cmd_pending is being passed */
  uint8_t proactive_cmd_pending;
  /**<   Indicates if a proactive command is pending. Default value if the TLV 
       is missing is FALSE. */
}sim_internal_gstk_tal_event_report_ind_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_aggregates
    @{
  */
typedef struct {

  uint64_t client_id;
  /**<   Client ID of the caller*/

  sim_internal_mmgsdi_slot_id_enum_v01 slot;
  /**<   Slot associated with the REFRESH*/

  sim_internal_mmgsdi_aid_type_v01 aid;
  /**<   Application Identifier.*/

  sim_internal_mmgsdi_refresh_mode_enum_v01 mode;
  /**<   Current refresh mode.*/

  sim_internal_mmgsdi_data_type_v01 file_list;
  /**<   Paths of files in the REFRESH file list as specified in Section 6.6.13
       of ETSI 102.223
  */

  uint8_t num_files;
  /**<   Number of files in the REFRESH file list  */
}sim_internal_mmgsdi_naa_refresh_req_type_v01;  /* Type */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Request Message; Request MMGSDI to execute an NAA (Network Access Application) REFRESH */
typedef struct {

  /* Mandatory */
  /*  Request data */
  sim_internal_mmgsdi_request_data_type_v01 req_data;

  /* Mandatory */
  /*  NAA REFRESH request data */
  sim_internal_mmgsdi_naa_refresh_req_type_v01 refresh_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_naa_refresh_req_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Response Message; Request MMGSDI to execute an NAA (Network Access Application) REFRESH */
typedef struct {

  /* Mandatory */
  /*  Result Code */
  qmi_response_type_v01 resp;
  /**<   Standard response type. Contains the following data members:
       qmi_result_type - QMI_RESULT_SUCCESS or QMI_RESULT_FAILURE
       qmi_error_type  - Error code. Possible error code values are described in
                         the error codes section of each message definition.
  */

  /* Optional */
  /*  MMGSDI status */
  uint8_t mmgsdi_status_valid;  /**< Must be set to true if mmgsdi_status is being passed */
  sim_internal_mmgsdi_return_enum_v01 mmgsdi_status;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_naa_refresh_resp_msg_v01;  /* Message */
/**
    @}
  */

/** @addtogroup sim_internal_qmi_messages
    @{
  */
/** Indication Message; Provide confirmation that REFRESH request was processed */
typedef struct {

  /* Mandatory */
  /*  Response header */
  sim_internal_mmgsdi_response_header_type_v01 response_header;

  /* Optional */
  /*  Original REFRESH request type */
  uint8_t orig_refresh_req_valid;  /**< Must be set to true if orig_refresh_req is being passed */
  sim_internal_mmgsdi_refresh_orig_enum_v01 orig_refresh_req;

  /* Optional */
  /*  Token to track transaction */
  uint8_t token_valid;  /**< Must be set to true if token is being passed */
  uint16_t token;
}sim_internal_mmgsdi_naa_refresh_ind_msg_v01;  /* Message */
/**
    @}
  */

/*Service Message Definition*/
/** @addtogroup sim_internal_qmi_msg_ids
    @{
  */
#define QMI_SIM_INTERNAL_GET_SUPPORTED_MSGS_REQ_V01 0x001E
#define QMI_SIM_INTERNAL_GET_SUPPORTED_MSGS_RESP_V01 0x001E
#define QMI_SIM_INTERNAL_GET_SUPPORTED_FIELDS_REQ_V01 0x001F
#define QMI_SIM_INTERNAL_GET_SUPPORTED_FIELDS_RESP_V01 0x001F
#define QMI_SIM_INTERNAL_MMGSDI_CLIENT_ID_AND_EVT_REG_REQ_V01 0x0020
#define QMI_SIM_INTERNAL_MMGSDI_CLIENT_ID_AND_EVT_REG_RESP_V01 0x0020
#define QMI_SIM_INTERNAL_MMGSDI_CLIENT_ID_AND_EVT_REG_IND_V01 0x0020
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_OPEN_REQ_V01 0x0021
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_OPEN_RESP_V01 0x0021
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_OPEN_IND_V01 0x0021
#define QMI_SIM_INTERNAL_MMGSDI_GET_ALL_AVAILABLE_APPS_REQ_V01 0x0022
#define QMI_SIM_INTERNAL_MMGSDI_GET_ALL_AVAILABLE_APPS_RESP_V01 0x0022
#define QMI_SIM_INTERNAL_MMGSDI_GET_ALL_AVAILABLE_APPS_IND_V01 0x0022
#define QMI_SIM_INTERNAL_MMGSDI_GET_ALL_AVAILABLE_APPS_SYNC_REQ_V01 0x0023
#define QMI_SIM_INTERNAL_MMGSDI_GET_ALL_AVAILABLE_APPS_SYNC_RESP_V01 0x0023
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_FILE_ATTR_REQ_V01 0x0024
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_FILE_ATTR_RESP_V01 0x0024
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_FILE_ATTR_IND_V01 0x0024
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_READ_TRANSPARENT_REQ_V01 0x0025
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_READ_TRANSPARENT_RESP_V01 0x0025
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_READ_TRANSPARENT_IND_V01 0x0025
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_READ_RECORD_REQ_V01 0x0026
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_READ_RECORD_RESP_V01 0x0026
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_READ_RECORD_IND_V01 0x0026
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_WRITE_TRANSPARENT_REQ_V01 0x0027
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_WRITE_TRANSPARENT_RESP_V01 0x0027
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_WRITE_TRANSPARENT_IND_V01 0x0027
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_WRITE_RECORD_REQ_V01 0x0028
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_WRITE_RECORD_RESP_V01 0x0028
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_WRITE_RECORD_IND_V01 0x0028
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_READ_CACHE_REQ_V01 0x0029
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_READ_CACHE_RESP_V01 0x0029
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_READ_CACHE_FILE_SIZE_REQ_V01 0x002A
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_READ_CACHE_FILE_SIZE_RESP_V01 0x002A
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_WRITE_CACHE_REQ_V01 0x002B
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_WRITE_CACHE_RESP_V01 0x002B
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_IS_SERVICE_AVAILABLE_REQ_V01 0x002C
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_IS_SERVICE_AVAILABLE_RESP_V01 0x002C
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_IS_SERVICE_AVAILABLE_IND_V01 0x002C
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_APP_CAPABILITIES_REQ_V01 0x002D
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_APP_CAPABILITIES_RESP_V01 0x002D
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_APP_CAPABILITIES_IND_V01 0x002D
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_TOGGLE_UIM_POWER_CONTROL_SYNC_REQ_V01 0x002E
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_TOGGLE_UIM_POWER_CONTROL_SYNC_RESP_V01 0x002E
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_INFO_SYNC_REQ_V01 0x002F
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_INFO_SYNC_RESP_V01 0x002F
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_UICC_AUTHENTICATE_REQ_V01 0x0030
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_UICC_AUTHENTICATE_RESP_V01 0x0030
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_UICC_AUTHENTICATE_IND_V01 0x0030
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_USIM_AUTHENTICATE_REQ_V01 0x0031
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_USIM_AUTHENTICATE_RESP_V01 0x0031
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_USIM_AUTHENTICATE_IND_V01 0x0031
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_RUN_GSM_ALGO_REQ_V01 0x0032
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_RUN_GSM_ALGO_RESP_V01 0x0032
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_RUN_GSM_ALGO_IND_V01 0x0032
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_REGISTER_FOR_REFRESH_REQ_V01 0x0033
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_REGISTER_FOR_REFRESH_RESP_V01 0x0033
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_REGISTER_FOR_REFRESH_IND_V01 0x0033
#define QMI_SIM_INTERNAL_MMGSDI_EVENT_REPORT_IND_V01 0x0034
#define QMI_SIM_INTERNAL_MMGSDI_CLIENT_ID_AND_EVT_DEREG_REQ_V01 0x0035
#define QMI_SIM_INTERNAL_MMGSDI_CLIENT_ID_AND_EVT_DEREG_RESP_V01 0x0035
#define QMI_SIM_INTERNAL_MMGSDI_CLIENT_ID_AND_EVT_DEREG_IND_V01 0x0035
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_CLOSE_REQ_V01 0x0036
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_CLOSE_RESP_V01 0x0036
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_CLOSE_IND_V01 0x0036
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_APP_CAPABILITIES_SYNC_REQ_V01 0x0037
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_APP_CAPABILITIES_SYNC_RESP_V01 0x0037
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_INCREASE_REQ_V01 0x0038
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_INCREASE_RESP_V01 0x0038
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_INCREASE_IND_V01 0x0038
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_ALL_PIN_STATUS_REQ_V01 0x0039
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_ALL_PIN_STATUS_RESP_V01 0x0039
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_GET_ALL_PIN_STATUS_IND_V01 0x0039
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_ILLEGAL_SUBSCRIPTION_SYNC_REQ_V01 0x003A
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_ILLEGAL_SUBSCRIPTION_SYNC_RESP_V01 0x003A
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_PERSO_OTA_DEPERSO_REQ_V01 0x003B
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_PERSO_OTA_DEPERSO_RESP_V01 0x003B
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_PERSO_OTA_DEPERSO_IND_V01 0x003B
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_REGISTER_FOR_REFRESH_OK_TO_PROCEED_VOTING_REQ_V01 0x003C
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_REGISTER_FOR_REFRESH_OK_TO_PROCEED_VOTING_RESP_V01 0x003C
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_REGISTER_FOR_REFRESH_OK_TO_PROCEED_VOTING_IND_V01 0x003C
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_OK_TO_PROCEED_WITH_REFRESH_REQ_V01 0x003D
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_OK_TO_PROCEED_WITH_REFRESH_RESP_V01 0x003D
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_OK_TO_PROCEED_WITH_REFRESH_IND_V01 0x003D
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_OK_TO_REFRESH_REQ_V01 0x003E
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_OK_TO_REFRESH_RESP_V01 0x003E
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_OK_TO_REFRESH_IND_V01 0x003E
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_REFRESH_COMPLETE_REQ_V01 0x003F
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_REFRESH_COMPLETE_RESP_V01 0x003F
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_REFRESH_COMPLETE_IND_V01 0x003F
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_DEREGISTER_FOR_REFRESH_REQ_V01 0x0040
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_DEREGISTER_FOR_REFRESH_RESP_V01 0x0040
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_DEREGISTER_FOR_REFRESH_IND_V01 0x0040
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_SEARCH_REQ_V01 0x0041
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_SEARCH_RESP_V01 0x0041
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_SEARCH_IND_V01 0x0041
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_SEEK_REQ_V01 0x0042
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_SEEK_RESP_V01 0x0042
#define QMI_SIM_INTERNAL_GSTK_TAL_CLIENT_REGISTRATION_REQ_V01 0x0043
#define QMI_SIM_INTERNAL_GSTK_TAL_CLIENT_REGISTRATION_RESP_V01 0x0043
#define QMI_SIM_INTERNAL_GSTK_TAL_EVENT_REPORT_IND_V01 0x0044
#define QMI_SIM_INTERNAL_GSTK_TAL_SEND_CMD_REQ_V01 0x0045
#define QMI_SIM_INTERNAL_GSTK_TAL_SEND_CMD_RESP_V01 0x0045
#define QMI_SIM_INTERNAL_GSTK_TAL_NOTIFY_RAT_REQ_V01 0x0046
#define QMI_SIM_INTERNAL_GSTK_TAL_NOTIFY_RAT_RESP_V01 0x0046
#define QMI_SIM_INTERNAL_GSTK_TAL_NOTIFY_LS_REQ_V01 0x0047
#define QMI_SIM_INTERNAL_GSTK_TAL_NOTIFY_LS_RESP_V01 0x0047
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_REGISTER_FOR_FILE_UPDATE_REQ_V01 0x0048
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_REGISTER_FOR_FILE_UPDATE_RESP_V01 0x0048
#define QMI_SIM_INTERNAL_MMGSDI_SESSION_REGISTER_FOR_FILE_UPDATE_IND_V01 0x0048
#define QMI_SIM_INTERNAL_MMGSDI_GET_PROTOCOL_REQ_V01 0x0049
#define QMI_SIM_INTERNAL_MMGSDI_GET_PROTOCOL_RESP_V01 0x0049
#define QMI_SIM_INTERNAL_MMGSDI_NAA_REFRESH_REQ_V01 0x004A
#define QMI_SIM_INTERNAL_MMGSDI_NAA_REFRESH_RESP_V01 0x004A
#define QMI_SIM_INTERNAL_MMGSDI_NAA_REFRESH_IND_V01 0x004A
/**
    @}
  */

/* Service Object Accessor */
/** @addtogroup wms_qmi_accessor 
    @{
  */
/** This function is used internally by the autogenerated code.  Clients should use the
   macro sim_internal_get_service_object_v01( ) that takes in no arguments. */
qmi_idl_service_object_type sim_internal_get_service_object_internal_v01
 ( int32_t idl_maj_version, int32_t idl_min_version, int32_t library_version );
 
/** This macro should be used to get the service object */ 
#define sim_internal_get_service_object_v01( ) \
          sim_internal_get_service_object_internal_v01( \
            SIM_INTERNAL_V01_IDL_MAJOR_VERS, SIM_INTERNAL_V01_IDL_MINOR_VERS, \
            SIM_INTERNAL_V01_IDL_TOOL_VERS )
/** 
    @} 
  */


#ifdef __cplusplus
}
#endif
#endif

