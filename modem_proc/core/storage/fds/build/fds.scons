#===============================================================================

#

# Flash Driver Service Libs

#

# GENERAL DESCRIPTION

#    build script

#

# Copyright (c) 2013 by QUALCOMM Technologies, Inc.

# All Rights Reserved.

# QUALCOMM Proprietary/GTDR

#

#-------------------------------------------------------------------------------

#

#  $Header: //components/rel/core.mpss/3.10/storage/fds/build/fds.scons#1 $  $DateTime: 2018/06/26 03:18:17 $  $Author: pwbldsvc $

#  $Change: 16502877 $

#                      EDIT HISTORY FOR FILE

#

#  This section contains comments describing changes made to the module.

#  Notice that changes are listed in reverse chronological order.

#

# when        who  what, where, why

# ----------  ---  -------------------------------------------------------------

# 2013-09-20  wek  Swap MSG_HIGH/MED/LOW macros for MSG_3 macro.

# 2013-07-25  dks  Fix target compilation issues

# 2013-07-19  dks  Create

#

#===============================================================================

Import('env')

env = env.Clone()



#-------------------------------------------------------------------------------

# Source PATH

#-------------------------------------------------------------------------------

SRCPATH = "${BUILD_ROOT}/core/storage/fds/src"



env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)



#-------------------------------------------------------------------------------

# External depends within CoreBSP

#-------------------------------------------------------------------------------

# add support for qmimsgs so api folder can rename to qmimsgs

qmimsgs_path = env.RealPath('${BUILD_ROOT}/qmimsgs')

if env.PathExists(qmimsgs_path):

   env.RequirePublicApi(['COMMON', 'FDS'], area='QMIMSGS')



api_path = env.RealPath('${BUILD_ROOT}/api')

if env.PathExists(api_path):

   env.RequirePublicApi(['COMMON', 'FDS'], area='api')



#-------------------------------------------------------------------------------

# Internal depends within CoreBSP

#-------------------------------------------------------------------------------

CBSP_API = [

   'DAL',

   'DEBUGTOOLS',

   'MPROC',

   'SERVICES',

   'STORAGE',

   # needs to be last as it may contain wrong comdef.h

   'KERNEL',

]



env.RequirePublicApi(CBSP_API)

env.RequireRestrictedApi(CBSP_API)



#-------------------------------------------------------------------------------

# Sources, libraries

#-------------------------------------------------------------------------------



FDS_SOURCES = [

    '${BUILDPATH}/fds.c',

    '${BUILDPATH}/fds_task.c',

    '${BUILDPATH}/fds_util.c',

    '${BUILDPATH}/flash_driver_service_impl_v01.c',

]





#-------------------------------------------------------------------------------

# Add Libraries to image

#-------------------------------------------------------------------------------



FSD_DEST_IMAGES = [

	'MODEM_IMAGE',

	'CBSP_MODEM_IMAGE',

	'SINGLE_IMAGE',

	'CBSP_SINGLE_IMAGE',

	'QDSP6_SW_IMAGE',

	'CBSP_QDSP6_SW_IMAGE',

]



if 'USES_FLASH_SCRUB' in env:

  env.AddLibrary(FSD_DEST_IMAGES,'${BUILDPATH}/fds',

                 FDS_SOURCES)



#----------------------------------------------------------------------------

# RCINIT Initialization of the flash_scrub task

#----------------------------------------------------------------------------



if 'USES_FLASH_SCRUB' in env:

  RCINIT_IMG = ['CORE_MODEM', 'CORE_QDSP6_SW']

  env.AddRCInitTask(RCINIT_IMG,

   {

     'sequence_group'      : 'RCINIT_GROUP_7', # Low priority, start last

     'thread_name'         : 'fds',

     'thread_entry'        : 'fds_task',

     'stack_size_bytes'    : '4096',           # processing task calls efs_API

     'priority_amss_order' : 'SHARED_IDLE_SERVICE_PRI_ORDER',

     'cpu_affinity'        : 'REX_ANY_SMT_MASK',

   })

