#ifndef NVI_ITEMS_H
#define NVI_ITEMS_H

/*===========================================================================

                               NVI_ITEMS.H 

DESCRIPTION
  This file is generated by NVC and contains constants, types, and definitions
  of all items in NV that are used internally by NV module. 

  $Header: //components/rel/core.mpss/3.10/services/nv/src/nvi_items.h#1 $
   Copyright (c) 2006-2017 by Qualcomm Technologies, Inc.  All Rights Reserved.
===========================================================================*/

/* NVC Version: 2.0.0 */

/* Include Files */
#include "comdef.h"
#include "qw.h"
#include "nv_items.h"


/*=========================================================================*/
/* NVM Items Internal NV Constant Definitions.                             */
/*=========================================================================*/

/* Redial extension */
#define  NVI_REDIAL_EXTENSIONS                                   1

/* 32 digits (16 bytes) worth of dial storage reserved */
#define  NVI_MAX_DIAL_DIGITS_STORAGE                            16

/* Ext digit size */
#define  NVI_EXT_DIGIT_SIZ                                       8

/* Specifies the number of bytes in adder array used by rental timer */
#define  NVI_ADDER_ARRAY_SIZE                                   50

/* Half of NV_MAX_DIAL_DIGITS */
#define  NVI_MAX_DIAL_DIGITS                                    16

/* Maximum number of SMS entries. */
#define  NVI_MAX_SMS_ADDR                                      501

/* 16 bytes for auto-generated vernos */
#define  NV_AUTO_VERNO_LENGTH                                   16

/* NAM1 A-key invariant offset */
#define  NV_A_KEY_NAM1_ADDR                            0x0031

/* NAM2 A-key invariant offset */
#define  NV_A_KEY_NAM2_ADDR                            0x003A

/* NAM3 A-key invariant offset */
#define  NV_A_KEY_NAM3_ADDR                            0x0043

/* NAM4 A-Key invariant offset */
#define  NV_A_KEY_NAM4_ADDR                            0x004C

/* UP Key 1 invariant offset */
#define  NV_UP_KEY1_ADDR                               0x0055

/* UP Key 2 invariant offset */
#define  NV_UP_KEY2_ADDR                               0x0066

/* Extended version Number invariant offset */
#define  NV_VERNO_EXT_ADDR                             0x0077

/* NAM1 SSD A invariant offset */
#define  NV_SSD_A_NAM1_ADDR                            0x0091

/* NAM2 SSD A invariant offset */
#define  NV_SSD_A_NAM2_ADDR                            0x009A

/* NAM3 SSD A invariant offset */
#define  NV_SSD_A_NAM3_ADDR                            0x00A3

/* NAM4 SSD A invariant offset */
#define  NV_SSD_A_NAM4_ADDR                            0x00AC

/* NAM1 SSD B invariant address */
#define  NV_SSD_B_NAM1_ADDR                            0x00F1

/* NAM2 SSD B invariant offset */
#define  NV_SSD_B_NAM2_ADDR                            0x00FA

/* NAM3 SSD B invariant offset */
#define  NV_SSD_B_NAM3_ADDR                            0x0103

/* NAM4 SSD B invariant offset */
#define  NV_SSD_B_NAM4_ADDR                            0x010C

/* PAP password invariant offset */
#define  NV_PAP_PASSWORD_ADDR                          0x00B5

/* Bluetooth address invariant offset */
#define  NV_BD_ADDRESS_ADDR                            0x0115

/* IMEI invariant offset */
#define  NV_UE_IMEI_ADDR                               0x011B

#define  NVI_MAX_OP_TABLE_SIZE                         7233



/*=========================================================================*/
/* NVM Items Internal Type Definitions.                                    */
/*=========================================================================*/


typedef PACKED struct PACKED_POST{ 
  /* Chcksum */
  word                                             chksum;
} nvi_a_key_chksum_type;


typedef PACKED struct PACKED_POST{ 
  /* A key array */
  qword                                            key;
} nvi_a_key_type;

/* Type to hold aagps_default_ip_address  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             aagps_default_ip_address[16];
} nvi_aagps_default_ip_address_type;

/* Type to hold aagps_ipc_dm_thread_mask  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           aagps_ipc_dm_thread_mask[32];
} nvi_aagps_ipc_dm_thread_mask_type;

/* Type to hold aagps_xtra_secondary_server_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            aagps_xtra_secondary_server_url[128];
} nvi_aagps_xtra_secondary_server_url_type;

/* Type to hold aagps_xtra_secondary_sntp_server_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            aagps_xtra_secondary_sntp_server_url[128];
} nvi_aagps_xtra_secondary_sntp_server_url_type;

/* Type to hold aagps_xtra_tertiary_server_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            aagps_xtra_tertiary_server_url[128];
} nvi_aagps_xtra_tertiary_server_url_type;

/* Type to hold aagps_xtra_tertiary_sntp_server_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            aagps_xtra_tertiary_sntp_server_url[128];
} nvi_aagps_xtra_tertiary_sntp_server_url_type;


typedef PACKED struct PACKED_POST{ 
  /* ACCLOCp class */
  byte                                             ACCOLCpClass[NV_MAX_MINS];
} nvi_accolc_type;


typedef PACKED struct PACKED_POST{ 
  /* Next Acquisition pointer to be read */
  uint32                                           curr_rd_index;
  /* Next Acquisition pointer to write */
  uint32                                           curr_wr_index;
  /* Indicates if the last entry in database pointer list is Invalid */
  boolean                                          last_entry_invalid;
  /* List of ordered indices to acquisition entries */
  uint8                                            acq_list_indices[MAX_ACQ_DB_ENTRIES];
} nvi_acq_db_type;


typedef PACKED struct PACKED_POST{ 
  /* Acquisition entry */
  nv_acq_entry_type                                acq_entry[3];
} nvi_acq_list1_type;


typedef PACKED struct PACKED_POST{ 
  /* Acquisition entry */
  nv_acq_entry_type                                acq_entry[2];
} nvi_acq_list2_type;


typedef PACKED struct PACKED_POST{ 
  /* acquisition order preference */
  word                                             acq_order;
} nvi_acq_order_pref_type;


typedef PACKED struct PACKED_POST{ 
  /* Used for QDSP6 voltage scaling */
  boolean                                          dyn_clock_on;
  /* Enables/disables ADSP dynamic voltage scaling */
  boolean                                          dyn_voltage_on;
} nvi_adsp_dyn_clock_voltage_type;


typedef PACKED struct PACKED_POST{ 
  /* Max. Power in dBm of AMAM Master  table */
  int32                                            maxdBm;
  /* Min power in dBm of AMAM master table */
  int32                                            mindBm;
} nvi_amam_dynamic_range;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           amam_tbl_seg[GSM_AMAM_TBL_LINEAR_PA_SIZE];
} nvi_amam_linear_seg_type;


typedef PACKED struct PACKED_POST{ 
  
  int16                                            ampm_tbl_seg[GSM_AMPM_TBL_LINEAR_PA_SIZE];
} nvi_ampm_linear_seg_type;


typedef PACKED struct PACKED_POST{ 
  /* Registration kind per enum above */
  word                                             kind;
} nvi_analog_reg_type;

/* Type to hold ant2_cdma_lna_12_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             ant2_cdma_lna_12_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_ant2_cdma_lna_12_offset_vs_freq_type;

/* Type to hold ant2_cdma_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             ant2_cdma_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_ant2_cdma_lna_offset_vs_freq_type;

/* Type to hold ant2_cdma_rx_comp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             ant2_cdma_rx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_ant2_cdma_rx_comp_vs_freq_type;

/* Type to hold ant2_cdma_rx_lin_slp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             ant2_cdma_rx_lin_slp[NV_CDMA_RX_LIN_SIZ];
} nvi_ant2_cdma_rx_lin_slp_type;

/* Type to hold ant2_cdma_rx_lin_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             ant2_cdma_rx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_ant2_cdma_rx_lin_vs_temp_type;

/* Type to hold ant2_cdma_rx_slp_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             ant2_cdma_rx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_ant2_cdma_rx_slp_vs_temp_type;

/* Type to hold ant2_pcs_cdma_lna_12_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             ant2_pcs_cdma_lna_12_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_ant2_pcs_cdma_lna_12_offset_vs_freq_type;

/* Type to hold ant2_pcs_cdma_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             ant2_pcs_cdma_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_ant2_pcs_cdma_lna_offset_vs_freq_type;

/* Type to hold ant2_pcs_rx_comp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             ant2_pcs_rx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_ant2_pcs_rx_comp_vs_freq_type;

/* Type to hold ant2_pcs_rx_lin_slp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             ant2_pcs_rx_lin_slp[NV_PCS_RX_LIN_SIZ];
} nvi_ant2_pcs_rx_lin_slp_type;

/* Type to hold ant2_pcs_rx_lin_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             ant2_pcs_rx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_ant2_pcs_rx_lin_vs_temp_type;

/* Type to hold ant2_pcs_rx_slp_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             ant2_pcs_rx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_ant2_pcs_rx_slp_vs_temp_type;

/* Type to hold apn_name  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             apn_name[NV_MAX_APN_STRING_LEN];
} nvi_apn_name_type;


typedef PACKED struct PACKED_POST{ 
  /* Appendix 5 on/off */
  boolean                                          appx5_enabled;
  /* Appendix 5 IP address */
  uint32                                           appx5_mpc_addr;
  /* Appendix 5 Port */
  uint16                                           appx5_mpc_port;
} nvi_appx5_pref_type;


typedef PACKED struct PACKED_POST{ 
  /* TRUE if auto answer enabled */
  boolean                                          enable;
  /* Number of rings when to answer call */
  byte                                             rings;
} nvi_auto_answer_type;


typedef PACKED struct PACKED_POST{ 
  /* TRUE if auto redial enabled */
  boolean                                          enable;
  /* Number of 10 seconds system busy before redial */
  byte                                             rings;
} nvi_auto_redial_type;


typedef PACKED struct PACKED_POST{ 
  
  int16                                            pwrdBm;
  
  uint16                                           dacval;
} nvi_autocal_pwr_dac_type;


typedef PACKED struct PACKED_POST{ 
  /* band */
  uint32                                           band;
} nvi_band_pref_32_63_type;


typedef PACKED struct PACKED_POST{ 
  /* band */
  word                                             band;
} nvi_band_pref_type;

/* Type to hold bc0_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc0_exp_hdet_vs_agc[16];
} nvi_bc0_exp_hdet_vs_agc_type;

/* Type to hold bc0_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc0_exp_hdet_vs_agc_v2[16];
} nvi_bc0_exp_hdet_vs_agc_v2_type;

/* Type to hold bc0_hdr_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc0_hdr_p1_rise_fall_off[16];
} nvi_bc0_hdr_p1_rise_fall_off_type;

/* Type to hold bc0_hdr_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc0_hdr_p3_rise_fall_off[16];
} nvi_bc0_hdr_p3_rise_fall_off_type;

/* Type to hold bc0_hdr_reva_tx_predistort  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc0_hdr_reva_tx_predistort[16];
} nvi_bc0_hdr_reva_tx_predistort_type;

/* Type to hold bc0_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc0_p1_rise_fall_off[8];
} nvi_bc0_p1_rise_fall_off_type;

/* Type to hold bc0_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc0_p3_rise_fall_off[8];
} nvi_bc0_p3_rise_fall_off_type;

/* Type to hold bc0_tx_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc0_tx_lin_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc0_tx_lin_1_type;

/* Type to hold bc0_tx_pdm_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc0_tx_pdm_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc0_tx_pdm_0_type;

/* Type to hold bc0_tx_pdm_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc0_tx_pdm_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc0_tx_pdm_2_type;

/* Type to hold bc0_tx_pdm_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc0_tx_pdm_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc0_tx_pdm_3_type;

/* Type to hold bc0_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc0_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_bc0_tx_pdm_lin_0_type;

/* Type to hold bc0_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc0_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_bc0_tx_pdm_lin_1_type;

/* Type to hold bc0_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc0_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_bc0_tx_pdm_lin_2_type;

/* Type to hold bc0_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc0_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_bc0_tx_pdm_lin_3_type;

/* Type to hold bc0_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc0_vco_coarse_tune_table[NV_VCO_CAL_LENGTH];
} nvi_bc0_vco_coarse_tune_table_type;

/* Type to hold bc0_vco_tune_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc0_vco_tune_2[NV_VCO_CAL_LENGTH];
} nvi_bc0_vco_tune_2_type;

/* Type to hold bc10_ant_quality  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc10_ant_quality[NV_MAX_ANT_NO_SIZ][NV_FREQ_TABLE_SIZ];
} nvi_bc10_ant_quality_type;

/* Type to hold bc10_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc10_exp_hdet_vs_agc[16];
} nvi_bc10_exp_hdet_vs_agc_type;

/* Type to hold bc10_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc10_exp_hdet_vs_agc_v2[16];
} nvi_bc10_exp_hdet_vs_agc_v2_type;

/* Type to hold bc10_hdr_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc10_hdr_p1_rise_fall_off[16];
} nvi_bc10_hdr_p1_rise_fall_off_type;

/* Type to hold bc10_hdr_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc10_hdr_p2_rise_fall_off[16];
} nvi_bc10_hdr_p2_rise_fall_off_type;

/* Type to hold bc10_hdr_reva_tx_predistort  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc10_hdr_reva_tx_predistort[16];
} nvi_bc10_hdr_reva_tx_predistort_type;

/* Type to hold bc10_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc10_p1_rise_fall_off[8];
} nvi_bc10_p1_rise_fall_off_type;

/* Type to hold bc10_tx_pdm_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc10_tx_pdm_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc10_tx_pdm_0_type;

/* Type to hold bc10_tx_pdm_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc10_tx_pdm_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc10_tx_pdm_1_type;

/* Type to hold bc10_tx_pdm_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc10_tx_pdm_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc10_tx_pdm_3_type;

/* Type to hold bc10_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc10_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_bc10_tx_pdm_lin_0_type;

/* Type to hold bc10_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc10_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_bc10_tx_pdm_lin_1_type;

/* Type to hold bc10_vco_tune_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc10_vco_tune_2[NV_VCO_CAL_LENGTH];
} nvi_bc10_vco_tune_2_type;

/* Type to hold bc11_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc11_exp_hdet_vs_agc[16];
} nvi_bc11_exp_hdet_vs_agc_type;

/* Type to hold bc11_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc11_exp_hdet_vs_agc_v2[16];
} nvi_bc11_exp_hdet_vs_agc_v2_type;

/* Type to hold bc11_hdr_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc11_hdr_p1_rise_fall_off[16];
} nvi_bc11_hdr_p1_rise_fall_off_type;

/* Type to hold bc11_hdr_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc11_hdr_p2_rise_fall_off[16];
} nvi_bc11_hdr_p2_rise_fall_off_type;

/* Type to hold bc11_hdr_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc11_hdr_p3_rise_fall_off[16];
} nvi_bc11_hdr_p3_rise_fall_off_type;

/* Type to hold bc11_hdr_reva_tx_predistort  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc11_hdr_reva_tx_predistort[16];
} nvi_bc11_hdr_reva_tx_predistort_type;

/* Type to hold bc11_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc11_p2_rise_fall_off[8];
} nvi_bc11_p2_rise_fall_off_type;

/* Type to hold bc11_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc11_p3_rise_fall_off[8];
} nvi_bc11_p3_rise_fall_off_type;

/* Type to hold bc11_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             bc11_tx_lim_vs_freq[16];
} nvi_bc11_tx_lim_vs_freq_type;

/* Type to hold bc11_tx_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc11_tx_lin_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc11_tx_lin_3_type;

/* Type to hold bc11_tx_pdm_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc11_tx_pdm_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc11_tx_pdm_3_type;

/* Type to hold bc11_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc11_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_bc11_tx_pdm_lin_0_type;

/* Type to hold bc11_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc11_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_bc11_tx_pdm_lin_1_type;

/* Type to hold bc11_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc11_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_bc11_tx_pdm_lin_2_type;

/* Type to hold bc11_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc11_vco_coarse_tune_table[NV_VCO_CAL_LENGTH];
} nvi_bc11_vco_coarse_tune_table_type;

/* Type to hold bc11_vco_tune_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc11_vco_tune_2[NV_VCO_CAL_LENGTH];
} nvi_bc11_vco_tune_2_type;

/* Type to hold bc12_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc12_exp_hdet_vs_agc_v2[16];
} nvi_bc12_exp_hdet_vs_agc_v2_type;

/* Type to hold bc13_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc13_exp_hdet_vs_agc_v2[16];
} nvi_bc13_exp_hdet_vs_agc_v2_type;

/* Type to hold bc14_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc14_exp_hdet_vs_agc[16];
} nvi_bc14_exp_hdet_vs_agc_type;

/* Type to hold bc14_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc14_exp_hdet_vs_agc_v2[16];
} nvi_bc14_exp_hdet_vs_agc_v2_type;

/* Type to hold bc14_hdr_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc14_hdr_p1_rise_fall_off[16];
} nvi_bc14_hdr_p1_rise_fall_off_type;

/* Type to hold bc14_hdr_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc14_hdr_p2_rise_fall_off[16];
} nvi_bc14_hdr_p2_rise_fall_off_type;

/* Type to hold bc14_hdr_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc14_hdr_p3_rise_fall_off[16];
} nvi_bc14_hdr_p3_rise_fall_off_type;

/* Type to hold bc14_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc14_p2_rise_fall_off[8];
} nvi_bc14_p2_rise_fall_off_type;

/* Type to hold bc14_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc14_p3_rise_fall_off[8];
} nvi_bc14_p3_rise_fall_off_type;

/* Type to hold bc14_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc14_tx_lim_vs_freq[16];
} nvi_bc14_tx_lim_vs_freq_type;

/* Type to hold bc14_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc14_tx_lim_vs_temp[8];
} nvi_bc14_tx_lim_vs_temp_type;

/* Type to hold bc14_tx_pdm_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc14_tx_pdm_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc14_tx_pdm_1_type;

/* Type to hold bc14_tx_pdm_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc14_tx_pdm_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc14_tx_pdm_2_type;

/* Type to hold bc14_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc14_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_bc14_tx_pdm_lin_0_type;

/* Type to hold bc14_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc14_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_bc14_tx_pdm_lin_1_type;

/* Type to hold bc14_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc14_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_bc14_tx_pdm_lin_2_type;

/* Type to hold bc14_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc14_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_bc14_tx_pdm_lin_3_type;

/* Type to hold bc14_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc14_vco_coarse_tune_table[NV_VCO_CAL_LENGTH];
} nvi_bc14_vco_coarse_tune_table_type;

/* Type to hold bc15_ant_quality  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc15_ant_quality[NV_MAX_ANT_NO_SIZ][NV_FREQ_TABLE_SIZ];
} nvi_bc15_ant_quality_type;

/* Type to hold bc15_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc15_exp_hdet_vs_agc[16];
} nvi_bc15_exp_hdet_vs_agc_type;

/* Type to hold bc15_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc15_exp_hdet_vs_agc_v2[16];
} nvi_bc15_exp_hdet_vs_agc_v2_type;

/* Type to hold bc15_hdr_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc15_hdr_p1_rise_fall_off[16];
} nvi_bc15_hdr_p1_rise_fall_off_type;

/* Type to hold bc15_hdr_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc15_hdr_p2_rise_fall_off[16];
} nvi_bc15_hdr_p2_rise_fall_off_type;

/* Type to hold bc15_hdr_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc15_hdr_p3_rise_fall_off[16];
} nvi_bc15_hdr_p3_rise_fall_off_type;

/* Type to hold bc15_hdr_reva_tx_predistort  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc15_hdr_reva_tx_predistort[16];
} nvi_bc15_hdr_reva_tx_predistort_type;

/* Type to hold bc15_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc15_p1_rise_fall_off[8];
} nvi_bc15_p1_rise_fall_off_type;

/* Type to hold bc15_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc15_p2_rise_fall_off[8];
} nvi_bc15_p2_rise_fall_off_type;

/* Type to hold bc15_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc15_p3_rise_fall_off[8];
} nvi_bc15_p3_rise_fall_off_type;

/* Type to hold bc15_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc15_tx_lim_vs_freq[16];
} nvi_bc15_tx_lim_vs_freq_type;

/* Type to hold bc15_tx_pdm_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc15_tx_pdm_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc15_tx_pdm_0_type;

/* Type to hold bc15_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc15_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_bc15_tx_pdm_lin_0_type;

/* Type to hold bc15_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc15_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_bc15_tx_pdm_lin_1_type;

/* Type to hold bc15_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc15_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_bc15_tx_pdm_lin_2_type;

/* Type to hold bc15_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc15_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_bc15_tx_pdm_lin_3_type;

/* Type to hold bc15_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc15_vco_coarse_tune_table[NV_VCO_CAL_LENGTH];
} nvi_bc15_vco_coarse_tune_table_type;

/* Type to hold bc15_vco_tune_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc15_vco_tune_2[NV_VCO_CAL_LENGTH];
} nvi_bc15_vco_tune_2_type;

/* Type to hold bc1_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc1_exp_hdet_vs_agc[16];
} nvi_bc1_exp_hdet_vs_agc_type;

/* Type to hold bc1_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc1_exp_hdet_vs_agc_v2[16];
} nvi_bc1_exp_hdet_vs_agc_v2_type;

/* Type to hold bc1_hdr_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc1_hdr_p1_rise_fall_off[16];
} nvi_bc1_hdr_p1_rise_fall_off_type;

/* Type to hold bc1_hdr_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc1_hdr_p2_rise_fall_off[16];
} nvi_bc1_hdr_p2_rise_fall_off_type;

/* Type to hold bc1_hdr_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc1_hdr_p3_rise_fall_off[16];
} nvi_bc1_hdr_p3_rise_fall_off_type;

/* Type to hold bc1_hdr_reva_tx_predistort  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc1_hdr_reva_tx_predistort[16];
} nvi_bc1_hdr_reva_tx_predistort_type;

/* Type to hold bc1_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc1_p1_rise_fall_off[8];
} nvi_bc1_p1_rise_fall_off_type;

/* Type to hold bc1_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc1_p2_rise_fall_off[8];
} nvi_bc1_p2_rise_fall_off_type;

/* Type to hold bc1_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc1_p3_rise_fall_off[8];
} nvi_bc1_p3_rise_fall_off_type;

/* Type to hold bc1_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             bc1_tx_lim_vs_freq[16];
} nvi_bc1_tx_lim_vs_freq_type;

/* Type to hold bc1_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc1_tx_lim_vs_temp[8];
} nvi_bc1_tx_lim_vs_temp_type;

/* Type to hold bc1_tx_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc1_tx_lin_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc1_tx_lin_1_type;

/* Type to hold bc1_tx_pdm_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc1_tx_pdm_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc1_tx_pdm_0_type;

/* Type to hold bc1_tx_pdm_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc1_tx_pdm_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc1_tx_pdm_1_type;

/* Type to hold bc1_tx_pdm_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc1_tx_pdm_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc1_tx_pdm_2_type;

/* Type to hold bc1_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc1_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_bc1_tx_pdm_lin_1_type;

/* Type to hold bc1_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc1_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_bc1_tx_pdm_lin_2_type;

/* Type to hold bc1_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc1_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_bc1_tx_pdm_lin_3_type;

/* Type to hold bc1_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc1_vco_coarse_tune_table[NV_VCO_CAL_LENGTH];
} nvi_bc1_vco_coarse_tune_table_type;

/* Type to hold bc1_vco_tune_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc1_vco_tune_2[NV_VCO_CAL_LENGTH];
} nvi_bc1_vco_tune_2_type;

/* Type to hold bc3_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc3_exp_hdet_vs_agc[16];
} nvi_bc3_exp_hdet_vs_agc_type;

/* Type to hold bc3_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc3_exp_hdet_vs_agc_v2[16];
} nvi_bc3_exp_hdet_vs_agc_v2_type;

/* Type to hold bc3_hdr_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc3_hdr_p1_rise_fall_off[16];
} nvi_bc3_hdr_p1_rise_fall_off_type;

/* Type to hold bc3_hdr_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc3_hdr_p2_rise_fall_off[16];
} nvi_bc3_hdr_p2_rise_fall_off_type;

/* Type to hold bc3_hdr_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc3_hdr_p3_rise_fall_off[16];
} nvi_bc3_hdr_p3_rise_fall_off_type;

/* Type to hold bc3_hdr_reva_tx_predistort  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc3_hdr_reva_tx_predistort[16];
} nvi_bc3_hdr_reva_tx_predistort_type;

/* Type to hold bc3_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc3_p1_rise_fall_off[8];
} nvi_bc3_p1_rise_fall_off_type;

/* Type to hold bc3_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc3_p2_rise_fall_off[8];
} nvi_bc3_p2_rise_fall_off_type;

/* Type to hold bc3_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc3_p3_rise_fall_off[8];
} nvi_bc3_p3_rise_fall_off_type;

/* Type to hold bc3_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             bc3_tx_lim_vs_freq[16];
} nvi_bc3_tx_lim_vs_freq_type;

/* Type to hold bc3_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc3_tx_lim_vs_temp[8];
} nvi_bc3_tx_lim_vs_temp_type;

/* Type to hold bc3_tx_pdm_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc3_tx_pdm_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc3_tx_pdm_0_type;

/* Type to hold bc3_tx_pdm_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc3_tx_pdm_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc3_tx_pdm_1_type;

/* Type to hold bc3_tx_pdm_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc3_tx_pdm_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc3_tx_pdm_2_type;

/* Type to hold bc3_tx_pdm_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc3_tx_pdm_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc3_tx_pdm_3_type;

/* Type to hold bc3_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc3_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_bc3_tx_pdm_lin_0_type;

/* Type to hold bc3_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc3_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_bc3_tx_pdm_lin_2_type;

/* Type to hold bc3_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc3_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_bc3_tx_pdm_lin_3_type;

/* Type to hold bc3_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc3_vco_coarse_tune_table[NV_VCO_CAL_LENGTH];
} nvi_bc3_vco_coarse_tune_table_type;

/* Type to hold bc4_ant_quality  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc4_ant_quality[NV_MAX_ANT_NO_SIZ][NV_FREQ_TABLE_SIZ];
} nvi_bc4_ant_quality_type;

/* Type to hold bc4_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc4_exp_hdet_vs_agc[16];
} nvi_bc4_exp_hdet_vs_agc_type;

/* Type to hold bc4_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc4_exp_hdet_vs_agc_v2[16];
} nvi_bc4_exp_hdet_vs_agc_v2_type;

/* Type to hold bc4_hdr_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc4_hdr_p1_rise_fall_off[16];
} nvi_bc4_hdr_p1_rise_fall_off_type;

/* Type to hold bc4_hdr_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc4_hdr_p2_rise_fall_off[16];
} nvi_bc4_hdr_p2_rise_fall_off_type;

/* Type to hold bc4_hdr_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc4_hdr_p3_rise_fall_off[16];
} nvi_bc4_hdr_p3_rise_fall_off_type;

/* Type to hold bc4_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc4_p1_rise_fall_off[8];
} nvi_bc4_p1_rise_fall_off_type;

/* Type to hold bc4_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc4_p2_rise_fall_off[8];
} nvi_bc4_p2_rise_fall_off_type;

/* Type to hold bc4_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc4_p3_rise_fall_off[8];
} nvi_bc4_p3_rise_fall_off_type;

/* Type to hold bc4_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             bc4_tx_lim_vs_freq[16];
} nvi_bc4_tx_lim_vs_freq_type;

/* Type to hold bc4_tx_pdm_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc4_tx_pdm_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc4_tx_pdm_0_type;

/* Type to hold bc4_tx_pdm_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc4_tx_pdm_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc4_tx_pdm_1_type;

/* Type to hold bc4_tx_pdm_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc4_tx_pdm_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc4_tx_pdm_3_type;

/* Type to hold bc4_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc4_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_bc4_tx_pdm_lin_1_type;

/* Type to hold bc4_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc4_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_bc4_tx_pdm_lin_2_type;

/* Type to hold bc4_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc4_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_bc4_tx_pdm_lin_3_type;

/* Type to hold bc4_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc4_vco_coarse_tune_table[NV_VCO_CAL_LENGTH];
} nvi_bc4_vco_coarse_tune_table_type;

/* Type to hold bc4_vco_tune_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc4_vco_tune_2[NV_VCO_CAL_LENGTH];
} nvi_bc4_vco_tune_2_type;

/* Type to hold bc5_ant_quality  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc5_ant_quality[NV_MAX_ANT_NO_SIZ][NV_FREQ_TABLE_SIZ];
} nvi_bc5_ant_quality_type;

/* Type to hold bc5_hdr_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc5_hdr_p1_rise_fall_off[16];
} nvi_bc5_hdr_p1_rise_fall_off_type;

/* Type to hold bc5_hdr_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc5_hdr_p2_rise_fall_off[16];
} nvi_bc5_hdr_p2_rise_fall_off_type;

/* Type to hold bc5_hdr_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc5_hdr_p3_rise_fall_off[16];
} nvi_bc5_hdr_p3_rise_fall_off_type;

/* Type to hold bc5_hdr_reva_tx_predistort  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc5_hdr_reva_tx_predistort[16];
} nvi_bc5_hdr_reva_tx_predistort_type;

/* Type to hold bc5_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc5_p1_rise_fall_off[8];
} nvi_bc5_p1_rise_fall_off_type;

/* Type to hold bc5_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc5_p2_rise_fall_off[8];
} nvi_bc5_p2_rise_fall_off_type;

/* Type to hold bc5_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc5_p3_rise_fall_off[8];
} nvi_bc5_p3_rise_fall_off_type;

/* Type to hold bc5_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc5_tx_lim_vs_temp[8];
} nvi_bc5_tx_lim_vs_temp_type;

/* Type to hold bc5_tx_pdm_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc5_tx_pdm_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc5_tx_pdm_1_type;

/* Type to hold bc5_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc5_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_bc5_tx_pdm_lin_0_type;

/* Type to hold bc5_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc5_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_bc5_tx_pdm_lin_1_type;

/* Type to hold bc5_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc5_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_bc5_tx_pdm_lin_2_type;

/* Type to hold bc5_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc5_vco_coarse_tune_table[NV_VCO_CAL_LENGTH];
} nvi_bc5_vco_coarse_tune_table_type;

/* Type to hold bc5_vco_tune_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc5_vco_tune_2[NV_VCO_CAL_LENGTH];
} nvi_bc5_vco_tune_2_type;

/* Type to hold bc6_ant_quality  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc6_ant_quality[NV_MAX_ANT_NO_SIZ][NV_FREQ_TABLE_SIZ];
} nvi_bc6_ant_quality_type;

/* Type to hold bc6_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc6_exp_hdet_vs_agc_v2[16];
} nvi_bc6_exp_hdet_vs_agc_v2_type;

/* Type to hold bc6_hdr_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc6_hdr_p1_rise_fall_off[16];
} nvi_bc6_hdr_p1_rise_fall_off_type;

/* Type to hold bc6_hdr_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc6_hdr_p2_rise_fall_off[16];
} nvi_bc6_hdr_p2_rise_fall_off_type;

/* Type to hold bc6_hdr_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc6_hdr_p3_rise_fall_off[16];
} nvi_bc6_hdr_p3_rise_fall_off_type;

/* Type to hold bc6_hdr_reva_tx_predistort  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc6_hdr_reva_tx_predistort[16];
} nvi_bc6_hdr_reva_tx_predistort_type;

/* Type to hold bc6_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc6_p1_rise_fall_off[8];
} nvi_bc6_p1_rise_fall_off_type;

/* Type to hold bc6_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc6_p2_rise_fall_off[8];
} nvi_bc6_p2_rise_fall_off_type;

/* Type to hold bc6_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc6_p3_rise_fall_off[8];
} nvi_bc6_p3_rise_fall_off_type;

/* Type to hold bc6_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             bc6_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_bc6_tx_lim_vs_freq_type;

/* Type to hold bc6_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc6_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_bc6_tx_lim_vs_temp_type;

/* Type to hold bc6_tx_pdm_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc6_tx_pdm_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc6_tx_pdm_0_type;

/* Type to hold bc6_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc6_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_bc6_tx_pdm_lin_1_type;

/* Type to hold bc6_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc6_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_bc6_tx_pdm_lin_2_type;

/* Type to hold bc6_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc6_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_bc6_tx_pdm_lin_3_type;

/* Type to hold bc6_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc6_vco_coarse_tune_table[NV_VCO_CAL_LENGTH];
} nvi_bc6_vco_coarse_tune_table_type;

/* Type to hold bc6_vco_tune_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc6_vco_tune_2[NV_VCO_CAL_LENGTH];
} nvi_bc6_vco_tune_2_type;

/* Type to hold bc9_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc9_exp_hdet_vs_agc_v2[16];
} nvi_bc9_exp_hdet_vs_agc_v2_type;

/* Type to hold bcx_block_1_ant_quality  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bcx_block_1_ant_quality[NV_MAX_ANT_NO_SIZ][NV_FREQ_TABLE_SIZ];
} nvi_bcx_block_1_ant_quality_type;

/* Type to hold bcx_block_1_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_1_exp_hdet_vs_agc[16];
} nvi_bcx_block_1_exp_hdet_vs_agc_type;

/* Type to hold bcx_block_1_hdr_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_1_hdr_p2_rise_fall_off[16];
} nvi_bcx_block_1_hdr_p2_rise_fall_off_type;

/* Type to hold bcx_block_1_hdr_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_1_hdr_p3_rise_fall_off[16];
} nvi_bcx_block_1_hdr_p3_rise_fall_off_type;

/* Type to hold bcx_block_1_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_1_p2_rise_fall_off[8];
} nvi_bcx_block_1_p2_rise_fall_off_type;

/* Type to hold bcx_block_1_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_1_p3_rise_fall_off[8];
} nvi_bcx_block_1_p3_rise_fall_off_type;

/* Type to hold bcx_block_1_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bcx_block_1_tx_lim_vs_freq[16];
} nvi_bcx_block_1_tx_lim_vs_freq_type;

/* Type to hold bcx_block_1_tx_pdm_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_1_tx_pdm_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_1_tx_pdm_0_type;

/* Type to hold bcx_block_1_tx_pdm_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_1_tx_pdm_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_1_tx_pdm_2_type;

/* Type to hold bcx_block_1_tx_pdm_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_1_tx_pdm_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_1_tx_pdm_3_type;

/* Type to hold bcx_block_1_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bcx_block_1_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_bcx_block_1_tx_pdm_lin_0_type;

/* Type to hold bcx_block_1_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bcx_block_1_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_bcx_block_1_tx_pdm_lin_1_type;

/* Type to hold bcx_block_1_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bcx_block_1_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_bcx_block_1_tx_pdm_lin_2_type;

/* Type to hold bcx_block_1_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bcx_block_1_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_bcx_block_1_tx_pdm_lin_3_type;

/* Type to hold bcx_block_ant_quality  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bcx_block_ant_quality[NV_MAX_ANT_NO_SIZ][NV_FREQ_TABLE_SIZ];
} nvi_bcx_block_ant_quality_type;

/* Type to hold bcx_block_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bcx_block_exp_hdet_vs_agc[16];
} nvi_bcx_block_exp_hdet_vs_agc_type;

/* Type to hold bcx_block_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bcx_block_exp_hdet_vs_agc_v2[16];
} nvi_bcx_block_exp_hdet_vs_agc_v2_type;

/* Type to hold bcx_block_hdr_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_hdr_p1_rise_fall_off[16];
} nvi_bcx_block_hdr_p1_rise_fall_off_type;

/* Type to hold bcx_block_hdr_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_hdr_p2_rise_fall_off[16];
} nvi_bcx_block_hdr_p2_rise_fall_off_type;

/* Type to hold bcx_block_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bcx_block_p1_rise_fall_off[8];
} nvi_bcx_block_p1_rise_fall_off_type;

/* Type to hold bcx_block_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_p2_rise_fall_off[8];
} nvi_bcx_block_p2_rise_fall_off_type;

/* Type to hold bcx_block_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_p3_rise_fall_off[8];
} nvi_bcx_block_p3_rise_fall_off_type;

/* Type to hold bcx_block_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             bcx_block_tx_lim_vs_freq[16];
} nvi_bcx_block_tx_lim_vs_freq_type;

/* Type to hold bcx_block_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bcx_block_tx_lim_vs_temp[8];
} nvi_bcx_block_tx_lim_vs_temp_type;

/* Type to hold bcx_block_tx_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_tx_lin_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_tx_lin_0_type;

/* Type to hold bcx_block_tx_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_tx_lin_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_tx_lin_2_type;

/* Type to hold bcx_block_tx_pdm_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_tx_pdm_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_tx_pdm_1_type;

/* Type to hold bcx_block_tx_pdm_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_tx_pdm_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_tx_pdm_2_type;

/* Type to hold bcx_block_tx_pdm_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_tx_pdm_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_tx_pdm_3_type;

/* Type to hold bcx_block_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bcx_block_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_bcx_block_tx_pdm_lin_0_type;

/* Type to hold bcx_block_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bcx_block_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_bcx_block_tx_pdm_lin_2_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           num_broken_charges;
  
  uint16                                           num_charges;
  
  uint16                                           num_usb_charges;
  
  uint16                                           num_mins_charging;
  
  uint16                                           mins_since_charging;
  
  uint8                                            one_min_condition_met;
} nvi_bm_bat_stats_type;

/* Type to hold brew_bkey  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             brew_bkey[NV_BREW_BKEY_SIZ];
} nvi_brew_bkey_type;

/* Type to hold brew_server  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             brew_server[NV_BREW_SERVER_SIZ];
} nvi_brew_server_type;

/* Type to hold brew_subscriber_id  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             brew_subscriber_id[NV_BREW_SID_SIZ];
} nvi_brew_subscriber_id_type;

/* Type to hold browser_domain_trusted  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            browser_domain_trusted[NV_UI_IOTA_URL_SIZE_64];
} nvi_browser_domain_trusted_type;

/* Type to hold browser_jump_embdlnk1_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           browser_jump_embdlnk1_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
} nvi_browser_jump_embdlnk1_name_type;

/* Type to hold browser_jump_embdlnk4_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           browser_jump_embdlnk4_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
} nvi_browser_jump_embdlnk4_name_type;

/* Type to hold browser_jump_embdlnk5_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           browser_jump_embdlnk5_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
} nvi_browser_jump_embdlnk5_name_type;

/* Type to hold browser_jump_embdlnk8_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           browser_jump_embdlnk8_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
} nvi_browser_jump_embdlnk8_name_type;

/* Type to hold browser_jump_portal_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           browser_jump_portal_name[NV_BROWSER_JUMP_PORTAL_NAME_SIZ];
} nvi_browser_jump_portal_name_type;

/* Type to hold bus_prof_ebi1_mode  */
typedef PACKED struct PACKED_POST{ 
  
  boolean                                          bus_prof_ebi1_mode[NV_MAX_BUS_PROF_MONITORS];
} nvi_bus_prof_ebi1_mode_type;

/* Type to hold bus_prof_imem_mode  */
typedef PACKED struct PACKED_POST{ 
  
  boolean                                          bus_prof_imem_mode[NV_MAX_BUS_PROF_MONITORS];
} nvi_bus_prof_imem_mode_type;

/* Type to hold c0_bc0_intelliceiver_cal  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc0_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
} nvi_c0_bc0_intelliceiver_cal_type;

/* Type to hold c0_bc0_intelliceiver_det_thresh  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc0_intelliceiver_det_thresh[NV_INTELLICEIVER_DETECTOR_COUNT][5];
} nvi_c0_bc0_intelliceiver_det_thresh_type;

/* Type to hold c0_bc0_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc0_lna_1_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc0_lna_1_offset_vs_freq_type;

/* Type to hold c0_bc0_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc0_lna_2_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc0_lna_2_offset_vs_freq_type;

/* Type to hold c0_bc0_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc0_lna_3_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc0_lna_3_offset_vs_freq_type;

/* Type to hold c0_bc0_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc0_lna_4_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc0_lna_4_offset_vs_freq_type;

/* Type to hold c0_bc0_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc0_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c0_bc0_rx_cal_chan_lru_type;

/* Type to hold c0_bc0_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bc0_rx_cal_chan[16];
} nvi_c0_bc0_rx_cal_chan_type;

/* Type to hold c0_bc0_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bc0_tx_cal_chan[16];
} nvi_c0_bc0_tx_cal_chan_type;

/* Type to hold c0_bc0_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc0_vga_gain_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc0_vga_gain_offset_vs_freq_type;

/* Type to hold c0_bc10_intelliceiver_det_thresh  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc10_intelliceiver_det_thresh[NV_INTELLICEIVER_DETECTOR_COUNT][5];
} nvi_c0_bc10_intelliceiver_det_thresh_type;

/* Type to hold c0_bc10_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc10_lna_1_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc10_lna_1_offset_vs_freq_type;

/* Type to hold c0_bc10_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc10_lna_2_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc10_lna_2_offset_vs_freq_type;

/* Type to hold c0_bc10_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc10_lna_3_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc10_lna_3_offset_vs_freq_type;

/* Type to hold c0_bc10_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc10_lna_4_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc10_lna_4_offset_vs_freq_type;

/* Type to hold c0_bc10_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc10_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c0_bc10_rx_cal_chan_lru_type;

/* Type to hold c0_bc10_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c0_bc10_rx_cal_chan[16];
} nvi_c0_bc10_rx_cal_chan_type;

/* Type to hold c0_bc10_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc10_vga_gain_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc10_vga_gain_offset_vs_freq_type;

/* Type to hold c0_bc11_intelliceiver_det_thresh  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc11_intelliceiver_det_thresh[NV_INTELLICEIVER_DETECTOR_COUNT][5];
} nvi_c0_bc11_intelliceiver_det_thresh_type;

/* Type to hold c0_bc11_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc11_lna_1_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc11_lna_1_offset_vs_freq_type;

/* Type to hold c0_bc11_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc11_lna_2_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc11_lna_2_offset_vs_freq_type;

/* Type to hold c0_bc11_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc11_lna_3_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc11_lna_3_offset_vs_freq_type;

/* Type to hold c0_bc11_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc11_lna_4_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc11_lna_4_offset_vs_freq_type;

/* Type to hold c0_bc11_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bc11_rx_cal_chan[16];
} nvi_c0_bc11_rx_cal_chan_type;

/* Type to hold c0_bc11_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc11_vga_gain_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc11_vga_gain_offset_vs_freq_type;

/* Type to hold c0_bc14_intelliceiver_cal  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc14_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
} nvi_c0_bc14_intelliceiver_cal_type;

/* Type to hold c0_bc14_intelliceiver_det_thresh  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc14_intelliceiver_det_thresh[NV_INTELLICEIVER_DETECTOR_COUNT][5];
} nvi_c0_bc14_intelliceiver_det_thresh_type;

/* Type to hold c0_bc14_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc14_lna_1_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc14_lna_1_offset_vs_freq_type;

/* Type to hold c0_bc14_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc14_lna_2_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc14_lna_2_offset_vs_freq_type;

/* Type to hold c0_bc14_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc14_lna_3_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc14_lna_3_offset_vs_freq_type;

/* Type to hold c0_bc14_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc14_lna_4_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc14_lna_4_offset_vs_freq_type;

/* Type to hold c0_bc14_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc14_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c0_bc14_rx_cal_chan_lru_type;

/* Type to hold c0_bc15_intelliceiver_cal  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc15_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
} nvi_c0_bc15_intelliceiver_cal_type;

/* Type to hold c0_bc15_intelliceiver_det_thresh  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc15_intelliceiver_det_thresh[NV_INTELLICEIVER_DETECTOR_COUNT][5];
} nvi_c0_bc15_intelliceiver_det_thresh_type;

/* Type to hold c0_bc15_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc15_lna_1_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc15_lna_1_offset_vs_freq_type;

/* Type to hold c0_bc15_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc15_lna_3_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc15_lna_3_offset_vs_freq_type;

/* Type to hold c0_bc15_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc15_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c0_bc15_rx_cal_chan_lru_type;

/* Type to hold c0_bc15_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c0_bc15_rx_cal_chan[16];
} nvi_c0_bc15_rx_cal_chan_type;

/* Type to hold c0_bc15_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c0_bc15_tx_cal_chan[16];
} nvi_c0_bc15_tx_cal_chan_type;

/* Type to hold c0_bc1_intelliceiver_cal  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc1_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
} nvi_c0_bc1_intelliceiver_cal_type;

/* Type to hold c0_bc1_intelliceiver_det_thresh  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc1_intelliceiver_det_thresh[NV_INTELLICEIVER_DETECTOR_COUNT][5];
} nvi_c0_bc1_intelliceiver_det_thresh_type;

/* Type to hold c0_bc1_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc1_lna_1_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc1_lna_1_offset_vs_freq_type;

/* Type to hold c0_bc1_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc1_lna_2_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc1_lna_2_offset_vs_freq_type;

/* Type to hold c0_bc1_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc1_lna_3_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc1_lna_3_offset_vs_freq_type;

/* Type to hold c0_bc1_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc1_lna_4_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc1_lna_4_offset_vs_freq_type;

/* Type to hold c0_bc1_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc1_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c0_bc1_rx_cal_chan_lru_type;

/* Type to hold c0_bc1_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bc1_rx_cal_chan[16];
} nvi_c0_bc1_rx_cal_chan_type;

/* Type to hold c0_bc1_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bc1_tx_cal_chan[16];
} nvi_c0_bc1_tx_cal_chan_type;

/* Type to hold c0_bc1_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc1_vga_gain_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc1_vga_gain_offset_vs_freq_type;

/* Type to hold c0_bc3_intelliceiver_cal  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc3_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
} nvi_c0_bc3_intelliceiver_cal_type;

/* Type to hold c0_bc3_intelliceiver_det_thresh  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc3_intelliceiver_det_thresh[NV_INTELLICEIVER_DETECTOR_COUNT][5];
} nvi_c0_bc3_intelliceiver_det_thresh_type;

/* Type to hold c0_bc3_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc3_lna_3_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc3_lna_3_offset_vs_freq_type;

/* Type to hold c0_bc3_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc3_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c0_bc3_rx_cal_chan_lru_type;

/* Type to hold c0_bc3_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bc3_tx_cal_chan[16];
} nvi_c0_bc3_tx_cal_chan_type;

/* Type to hold c0_bc3_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc3_vga_gain_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc3_vga_gain_offset_vs_freq_type;

/* Type to hold c0_bc4_intelliceiver_cal  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc4_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
} nvi_c0_bc4_intelliceiver_cal_type;

/* Type to hold c0_bc4_intelliceiver_det_thresh  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc4_intelliceiver_det_thresh[NV_INTELLICEIVER_DETECTOR_COUNT][5];
} nvi_c0_bc4_intelliceiver_det_thresh_type;

/* Type to hold c0_bc4_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc4_lna_1_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc4_lna_1_offset_vs_freq_type;

/* Type to hold c0_bc4_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc4_lna_2_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc4_lna_2_offset_vs_freq_type;

/* Type to hold c0_bc4_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc4_lna_3_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc4_lna_3_offset_vs_freq_type;

/* Type to hold c0_bc4_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc4_lna_4_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc4_lna_4_offset_vs_freq_type;

/* Type to hold c0_bc4_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc4_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c0_bc4_rx_cal_chan_lru_type;

/* Type to hold c0_bc4_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bc4_tx_cal_chan[16];
} nvi_c0_bc4_tx_cal_chan_type;

/* Type to hold c0_bc4_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc4_vga_gain_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc4_vga_gain_offset_vs_freq_type;

/* Type to hold c0_bc5_intelliceiver_cal  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc5_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
} nvi_c0_bc5_intelliceiver_cal_type;

/* Type to hold c0_bc5_intelliceiver_det_thresh  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc5_intelliceiver_det_thresh[NV_INTELLICEIVER_DETECTOR_COUNT][5];
} nvi_c0_bc5_intelliceiver_det_thresh_type;

/* Type to hold c0_bc5_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc5_lna_1_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc5_lna_1_offset_vs_freq_type;

/* Type to hold c0_bc5_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc5_lna_4_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc5_lna_4_offset_vs_freq_type;

/* Type to hold c0_bc5_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc5_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c0_bc5_rx_cal_chan_lru_type;

/* Type to hold c0_bc5_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bc5_rx_cal_chan[16];
} nvi_c0_bc5_rx_cal_chan_type;

/* Type to hold c0_bc5_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bc5_tx_cal_chan[16];
} nvi_c0_bc5_tx_cal_chan_type;

/* Type to hold c0_bc6_intelliceiver_cal  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc6_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
} nvi_c0_bc6_intelliceiver_cal_type;

/* Type to hold c0_bc6_intelliceiver_det_thresh  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc6_intelliceiver_det_thresh[NV_INTELLICEIVER_DETECTOR_COUNT][5];
} nvi_c0_bc6_intelliceiver_det_thresh_type;

/* Type to hold c0_bc6_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc6_lna_1_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc6_lna_1_offset_vs_freq_type;

/* Type to hold c0_bc6_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc6_lna_2_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc6_lna_2_offset_vs_freq_type;

/* Type to hold c0_bc6_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc6_lna_3_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc6_lna_3_offset_vs_freq_type;

/* Type to hold c0_bc6_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc6_lna_4_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc6_lna_4_offset_vs_freq_type;

/* Type to hold c0_bc6_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc6_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c0_bc6_rx_cal_chan_lru_type;

/* Type to hold c0_bc6_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc6_vga_gain_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc6_vga_gain_offset_vs_freq_type;

/* Type to hold c0_bc6_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int2                                             c0_bc6_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_c0_bc6_vga_gain_offset_vs_temp_type;

/* Type to hold c0_bcx_block_1_intelliceiver_cal  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bcx_block_1_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
} nvi_c0_bcx_block_1_intelliceiver_cal_type;

/* Type to hold c0_bcx_block_1_intelliceiver_det_thresh  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bcx_block_1_intelliceiver_det_thresh[NV_INTELLICEIVER_DETECTOR_COUNT][5];
} nvi_c0_bcx_block_1_intelliceiver_det_thresh_type;

/* Type to hold c0_bcx_block_1_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bcx_block_1_lna_1_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bcx_block_1_lna_1_offset_vs_freq_type;

/* Type to hold c0_bcx_block_1_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c0_bcx_block_1_rx_cal_chan[16];
} nvi_c0_bcx_block_1_rx_cal_chan_type;

/* Type to hold c0_bcx_block_intelliceiver_cal  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bcx_block_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
} nvi_c0_bcx_block_intelliceiver_cal_type;

/* Type to hold c0_bcx_block_intelliceiver_det_thresh  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bcx_block_intelliceiver_det_thresh[NV_INTELLICEIVER_DETECTOR_COUNT][5];
} nvi_c0_bcx_block_intelliceiver_det_thresh_type;

/* Type to hold c0_bcx_block_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bcx_block_lna_1_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bcx_block_lna_1_offset_vs_freq_type;

/* Type to hold c0_bcx_block_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bcx_block_lna_2_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bcx_block_lna_2_offset_vs_freq_type;

/* Type to hold c0_bcx_block_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bcx_block_lna_3_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bcx_block_lna_3_offset_vs_freq_type;

/* Type to hold c0_bcx_block_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bcx_block_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c0_bcx_block_rx_cal_chan_lru_type;

/* Type to hold c0_bcx_block_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bcx_block_rx_cal_chan[16];
} nvi_c0_bcx_block_rx_cal_chan_type;

/* Type to hold c0_bcx_block_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bcx_block_tx_cal_chan[16];
} nvi_c0_bcx_block_tx_cal_chan_type;

/* Type to hold c0_bcx_block_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bcx_block_vga_gain_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bcx_block_vga_gain_offset_vs_freq_type;

/* Type to hold c1_bc0_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc0_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc0_lna_1_offset_vs_freq_type;

/* Type to hold c1_bc0_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc0_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc0_lna_2_offset_vs_freq_type;

/* Type to hold c1_bc0_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc0_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc0_lna_3_offset_vs_freq_type;

/* Type to hold c1_bc0_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc0_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc0_lna_4_offset_vs_freq_type;

/* Type to hold c1_bc0_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bc0_rx_cal_chan[16];
} nvi_c1_bc0_rx_cal_chan_type;

/* Type to hold c1_bc0_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bc0_tx_cal_chan[16];
} nvi_c1_bc0_tx_cal_chan_type;

/* Type to hold c1_bc0_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             c1_bc0_vco_coarse_tune_table[16];
} nvi_c1_bc0_vco_coarse_tune_table_type;

/* Type to hold c1_bc0_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc0_vga_gain_offset_vs_freq[16];
} nvi_c1_bc0_vga_gain_offset_vs_freq_type;

/* Type to hold c1_bc10_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc10_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc10_lna_1_offset_vs_freq_type;

/* Type to hold c1_bc10_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc10_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc10_lna_3_offset_vs_freq_type;

/* Type to hold c1_bc10_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc10_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc10_lna_4_offset_vs_freq_type;

/* Type to hold c1_bc10_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc10_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc10_rx_cal_chan_lru_type;

/* Type to hold c1_bc10_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_bc10_tx_cal_chan[16];
} nvi_c1_bc10_tx_cal_chan_type;

/* Type to hold c1_bc10_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc10_vco_coarse_tune_table[16];
} nvi_c1_bc10_vco_coarse_tune_table_type;

/* Type to hold c1_bc10_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc10_vga_gain_offset_vs_freq[16];
} nvi_c1_bc10_vga_gain_offset_vs_freq_type;

/* Type to hold c1_bc11_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc11_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc11_lna_2_offset_vs_freq_type;

/* Type to hold c1_bc11_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc11_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc11_lna_3_offset_vs_freq_type;

/* Type to hold c1_bc11_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc11_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc11_rx_cal_chan_lru_type;

/* Type to hold c1_bc11_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bc11_rx_cal_chan[16];
} nvi_c1_bc11_rx_cal_chan_type;

/* Type to hold c1_bc11_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bc11_tx_cal_chan[16];
} nvi_c1_bc11_tx_cal_chan_type;

/* Type to hold c1_bc11_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             c1_bc11_vco_coarse_tune_table[16];
} nvi_c1_bc11_vco_coarse_tune_table_type;

/* Type to hold c1_bc11_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc11_vga_gain_offset_vs_freq[16];
} nvi_c1_bc11_vga_gain_offset_vs_freq_type;

/* Type to hold c1_bc14_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc14_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc14_lna_1_offset_vs_freq_type;

/* Type to hold c1_bc14_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc14_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc14_lna_2_offset_vs_freq_type;

/* Type to hold c1_bc14_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc14_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc14_rx_cal_chan_lru_type;

/* Type to hold c1_bc14_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_bc14_rx_cal_chan[16];
} nvi_c1_bc14_rx_cal_chan_type;

/* Type to hold c1_bc14_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc14_vco_coarse_tune_table[16];
} nvi_c1_bc14_vco_coarse_tune_table_type;

/* Type to hold c1_bc14_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc14_vga_gain_offset_vs_freq[16];
} nvi_c1_bc14_vga_gain_offset_vs_freq_type;

/* Type to hold c1_bc15_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc15_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc15_lna_1_offset_vs_freq_type;

/* Type to hold c1_bc15_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc15_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc15_lna_2_offset_vs_freq_type;

/* Type to hold c1_bc15_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc15_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc15_lna_3_offset_vs_freq_type;

/* Type to hold c1_bc15_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc15_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc15_lna_4_offset_vs_freq_type;

/* Type to hold c1_bc15_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_bc15_rx_cal_chan[16];
} nvi_c1_bc15_rx_cal_chan_type;

/* Type to hold c1_bc15_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_bc15_tx_cal_chan[16];
} nvi_c1_bc15_tx_cal_chan_type;

/* Type to hold c1_bc15_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc15_vco_coarse_tune_table[16];
} nvi_c1_bc15_vco_coarse_tune_table_type;

/* Type to hold c1_bc15_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc15_vga_gain_offset_vs_freq[16];
} nvi_c1_bc15_vga_gain_offset_vs_freq_type;

/* Type to hold c1_bc1_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc1_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc1_lna_1_offset_vs_freq_type;

/* Type to hold c1_bc1_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc1_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc1_lna_2_offset_vs_freq_type;

/* Type to hold c1_bc1_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc1_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc1_lna_3_offset_vs_freq_type;

/* Type to hold c1_bc1_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc1_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc1_lna_4_offset_vs_freq_type;

/* Type to hold c1_bc1_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc1_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc1_rx_cal_chan_lru_type;

/* Type to hold c1_bc1_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             c1_bc1_vco_coarse_tune_table[16];
} nvi_c1_bc1_vco_coarse_tune_table_type;

/* Type to hold c1_bc1_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc1_vga_gain_offset_vs_freq[16];
} nvi_c1_bc1_vga_gain_offset_vs_freq_type;

/* Type to hold c1_bc3_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc3_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc3_lna_1_offset_vs_freq_type;

/* Type to hold c1_bc3_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc3_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc3_lna_2_offset_vs_freq_type;

/* Type to hold c1_bc3_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc3_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc3_lna_3_offset_vs_freq_type;

/* Type to hold c1_bc3_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc3_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc3_rx_cal_chan_lru_type;

/* Type to hold c1_bc3_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bc3_rx_cal_chan[16];
} nvi_c1_bc3_rx_cal_chan_type;

/* Type to hold c1_bc3_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             c1_bc3_vco_coarse_tune_table[16];
} nvi_c1_bc3_vco_coarse_tune_table_type;

/* Type to hold c1_bc4_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc4_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc4_lna_1_offset_vs_freq_type;

/* Type to hold c1_bc4_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc4_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc4_lna_2_offset_vs_freq_type;

/* Type to hold c1_bc4_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc4_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc4_lna_3_offset_vs_freq_type;

/* Type to hold c1_bc4_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc4_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc4_lna_4_offset_vs_freq_type;

/* Type to hold c1_bc4_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc4_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc4_rx_cal_chan_lru_type;

/* Type to hold c1_bc4_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bc4_rx_cal_chan[16];
} nvi_c1_bc4_rx_cal_chan_type;

/* Type to hold c1_bc4_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bc4_tx_cal_chan[16];
} nvi_c1_bc4_tx_cal_chan_type;

/* Type to hold c1_bc4_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             c1_bc4_vco_coarse_tune_table[16];
} nvi_c1_bc4_vco_coarse_tune_table_type;

/* Type to hold c1_bc4_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc4_vga_gain_offset_vs_freq[16];
} nvi_c1_bc4_vga_gain_offset_vs_freq_type;

/* Type to hold c1_bc5_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc5_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc5_lna_2_offset_vs_freq_type;

/* Type to hold c1_bc5_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc5_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc5_lna_3_offset_vs_freq_type;

/* Type to hold c1_bc5_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc5_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc5_lna_4_offset_vs_freq_type;

/* Type to hold c1_bc5_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc5_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc5_rx_cal_chan_lru_type;

/* Type to hold c1_bc5_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bc5_rx_cal_chan[16];
} nvi_c1_bc5_rx_cal_chan_type;

/* Type to hold c1_bc5_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bc5_tx_cal_chan[16];
} nvi_c1_bc5_tx_cal_chan_type;

/* Type to hold c1_bc5_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             c1_bc5_vco_coarse_tune_table[16];
} nvi_c1_bc5_vco_coarse_tune_table_type;

/* Type to hold c1_bc6_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc6_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc6_lna_1_offset_vs_freq_type;

/* Type to hold c1_bc6_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc6_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc6_lna_3_offset_vs_freq_type;

/* Type to hold c1_bc6_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc6_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc6_lna_4_offset_vs_freq_type;

/* Type to hold c1_bc6_p1_rise_fall_offset  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             c1_bc6_p1_rise_fall_offset[8];
} nvi_c1_bc6_p1_rise_fall_offset_type;

/* Type to hold c1_bc6_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc6_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc6_rx_cal_chan_lru_type;

/* Type to hold c1_bc6_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             c1_bc6_vco_coarse_tune_table[16];
} nvi_c1_bc6_vco_coarse_tune_table_type;

/* Type to hold c1_bc6_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc6_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc6_vga_gain_offset_vs_freq_type;

/* Type to hold c1_bc6_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int2                                             c1_bc6_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_c1_bc6_vga_gain_offset_vs_temp_type;

/* Type to hold c1_bcx_block_1_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bcx_block_1_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bcx_block_1_lna_3_offset_vs_freq_type;

/* Type to hold c1_bcx_block_1_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bcx_block_1_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bcx_block_1_lna_4_offset_vs_freq_type;

/* Type to hold c1_bcx_block_1_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bcx_block_1_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c1_bcx_block_1_rx_cal_chan_lru_type;

/* Type to hold c1_bcx_block_1_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_bcx_block_1_tx_cal_chan[16];
} nvi_c1_bcx_block_1_tx_cal_chan_type;

/* Type to hold c1_bcx_block_1_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bcx_block_1_vco_coarse_tune_table[16];
} nvi_c1_bcx_block_1_vco_coarse_tune_table_type;

/* Type to hold c1_bcx_block_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bcx_block_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bcx_block_lna_1_offset_vs_freq_type;

/* Type to hold c1_bcx_block_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bcx_block_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bcx_block_lna_2_offset_vs_freq_type;

/* Type to hold c1_bcx_block_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bcx_block_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bcx_block_lna_3_offset_vs_freq_type;

/* Type to hold c1_bcx_block_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bcx_block_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c1_bcx_block_rx_cal_chan_lru_type;

/* Type to hold c1_bcx_block_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bcx_block_rx_cal_chan[16];
} nvi_c1_bcx_block_rx_cal_chan_type;

/* Type to hold c1_bcx_block_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bcx_block_tx_cal_chan[16];
} nvi_c1_bcx_block_tx_cal_chan_type;

/* Type to hold c1_bcx_block_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bcx_block_vco_coarse_tune_table[16];
} nvi_c1_bcx_block_vco_coarse_tune_table_type;

/* Type to hold c1_bcx_block_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bcx_block_vga_gain_offset_vs_freq[16];
} nvi_c1_bcx_block_vga_gain_offset_vs_freq_type;

/* Type to hold c1_cdma_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_cdma_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_cdma_lna_3_offset_vs_freq_type;

/* Type to hold c1_cdma_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_cdma_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_cdma_lna_4_offset_vs_freq_type;

/* Type to hold c1_cdma_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_cdma_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_cdma_lna_offset_vs_freq_type;

/* Type to hold c1_cdma_p1_rise_fall_offset  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             c1_cdma_p1_rise_fall_offset[8];
} nvi_c1_cdma_p1_rise_fall_offset_type;

/* Type to hold c1_cdma_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_cdma_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_cdma_vga_gain_offset_vs_freq_type;

/* Type to hold c1_pcs_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_pcs_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_pcs_lna_offset_vs_freq_type;

/* Type to hold c1_pcs_p1_rise_fall_offset  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             c1_pcs_p1_rise_fall_offset[8];
} nvi_c1_pcs_p1_rise_fall_offset_type;

/* Type to hold c1_pcs_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_pcs_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_pcs_vga_gain_offset_vs_freq_type;

/* Type to hold c1_pcs_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int2                                             c1_pcs_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_c1_pcs_vga_gain_offset_vs_temp_type;

/* Type to hold c1_rf_antsel_umts_1500  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_rf_antsel_umts_1500[4];
} nvi_c1_rf_antsel_umts_1500_type;

/* Type to hold c1_rf_antsel_umts_1900  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_rf_antsel_umts_1900[4];
} nvi_c1_rf_antsel_umts_1900_type;

/* Type to hold c1_rf_antsel_umts_800  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_rf_antsel_umts_800[4];
} nvi_c1_rf_antsel_umts_800_type;

/* Type to hold c1_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             c1_vco_coarse_tune_table[NV_VCO_COARSE_TUNE_TABLE_SIZ];
} nvi_c1_vco_coarse_tune_table_type;

/* Type to hold c1_wcdma_1500_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1500_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1500_lna_offset_vs_freq_3_type;

/* Type to hold c1_wcdma_1500_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1500_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1500_lna_offset_vs_freq_4_type;

/* Type to hold c1_wcdma_1500_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1500_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1500_lna_offset_vs_freq_type;

/* Type to hold c1_wcdma_1500_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_1500_lna_phase_ctl[6];
} nvi_c1_wcdma_1500_lna_phase_ctl_type;

/* Type to hold c1_wcdma_1500_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_1500_rx_cal_chan[16];
} nvi_c1_wcdma_1500_rx_cal_chan_type;

/* Type to hold c1_wcdma_1500_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1500_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_c1_wcdma_1500_vga_gain_offset_vs_temp_type;

/* Type to hold c1_wcdma_1800_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1800_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1800_lna_offset_vs_freq_2_type;

/* Type to hold c1_wcdma_1800_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1800_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1800_lna_offset_vs_freq_3_type;

/* Type to hold c1_wcdma_1800_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1800_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1800_lna_offset_vs_freq_4_type;

/* Type to hold c1_wcdma_1800_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1800_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1800_lna_offset_vs_freq_type;

/* Type to hold c1_wcdma_1800_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_1800_lna_phase_ctl[6];
} nvi_c1_wcdma_1800_lna_phase_ctl_type;

/* Type to hold c1_wcdma_1800_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_1800_rx_cal_chan[16];
} nvi_c1_wcdma_1800_rx_cal_chan_type;

/* Type to hold c1_wcdma_1800_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1800_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1800_vga_gain_offset_vs_freq_type;

/* Type to hold c1_wcdma_1800_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1800_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_c1_wcdma_1800_vga_gain_offset_vs_temp_type;

/* Type to hold c1_wcdma_1900_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1900_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1900_lna_offset_vs_freq_2_type;

/* Type to hold c1_wcdma_1900_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1900_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1900_lna_offset_vs_freq_type;

/* Type to hold c1_wcdma_1900_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_1900_lna_phase_ctl[6];
} nvi_c1_wcdma_1900_lna_phase_ctl_type;

/* Type to hold c1_wcdma_1900_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1900_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1900_vga_gain_offset_vs_freq_type;

/* Type to hold c1_wcdma_1900_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1900_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_c1_wcdma_1900_vga_gain_offset_vs_temp_type;

/* Type to hold c1_wcdma_2100_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_2100_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_2100_lna_offset_vs_freq_2_type;

/* Type to hold c1_wcdma_2100_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_2100_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_2100_lna_offset_vs_freq_3_type;

/* Type to hold c1_wcdma_2100_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_2100_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_2100_lna_offset_vs_freq_4_type;

/* Type to hold c1_wcdma_2100_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_2100_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_2100_lna_offset_vs_freq_type;

/* Type to hold c1_wcdma_2100_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_2100_rx_cal_chan[16];
} nvi_c1_wcdma_2100_rx_cal_chan_type;

/* Type to hold c1_wcdma_2100_rxf_ici_cal_data_car0  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           c1_wcdma_2100_rxf_ici_cal_data_car0[17];
} nvi_c1_wcdma_2100_rxf_ici_cal_data_car0_type;

/* Type to hold c1_wcdma_2100_rxf_ici_cal_data_car1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           c1_wcdma_2100_rxf_ici_cal_data_car1[17];
} nvi_c1_wcdma_2100_rxf_ici_cal_data_car1_type;

/* Type to hold c1_wcdma_2100_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_2100_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_2100_vga_gain_offset_vs_freq_type;

/* Type to hold c1_wcdma_2100_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_2100_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_c1_wcdma_2100_vga_gain_offset_vs_temp_type;

/* Type to hold c1_wcdma_800_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_800_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_800_lna_offset_vs_freq_3_type;

/* Type to hold c1_wcdma_800_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_800_lna_phase_ctl[6];
} nvi_c1_wcdma_800_lna_phase_ctl_type;

/* Type to hold c1_wcdma_800_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_800_rx_cal_chan[16];
} nvi_c1_wcdma_800_rx_cal_chan_type;

/* Type to hold c1_wcdma_800_rxf_ici_cal_data_car0  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           c1_wcdma_800_rxf_ici_cal_data_car0[17];
} nvi_c1_wcdma_800_rxf_ici_cal_data_car0_type;

/* Type to hold c1_wcdma_800_rxf_ici_cal_data_car1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           c1_wcdma_800_rxf_ici_cal_data_car1[17];
} nvi_c1_wcdma_800_rxf_ici_cal_data_car1_type;

/* Type to hold c1_wcdma_900_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_900_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_900_lna_offset_vs_freq_2_type;

/* Type to hold c1_wcdma_900_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_900_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_900_lna_offset_vs_freq_3_type;

/* Type to hold c1_wcdma_900_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_900_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_900_lna_offset_vs_freq_4_type;

/* Type to hold c1_wcdma_900_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_900_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_900_lna_offset_vs_freq_type;

/* Type to hold c1_wcdma_900_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_900_rx_cal_chan[16];
} nvi_c1_wcdma_900_rx_cal_chan_type;

/* Type to hold c1_wcdma_900_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_900_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_900_vga_gain_offset_vs_freq_type;

/* Type to hold c1_wcdma_bc4_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_bc4_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_bc4_lna_offset_vs_freq_3_type;

/* Type to hold c1_wcdma_bc4_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_bc4_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_bc4_lna_offset_vs_freq_4_type;

/* Type to hold c1_wcdma_bc4_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_bc4_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_bc4_lna_offset_vs_freq_type;

/* Type to hold c1_wcdma_bc4_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_bc4_rx_cal_chan[16];
} nvi_c1_wcdma_bc4_rx_cal_chan_type;

/* Type to hold c1_wcdma_bc4_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_bc4_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_bc4_vga_gain_offset_vs_freq_type;

/* Type to hold c1_wcdma_bc4_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_bc4_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_c1_wcdma_bc4_vga_gain_offset_vs_temp_type;

/* Type to hold c1_wcdma_dc1_rxf_ici_cal_data_car0  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           c1_wcdma_dc1_rxf_ici_cal_data_car0[17];
} nvi_c1_wcdma_dc1_rxf_ici_cal_data_car0_type;

/* Type to hold c1_wcdma_dc1_rxf_ici_cal_data_car1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           c1_wcdma_dc1_rxf_ici_cal_data_car1[17];
} nvi_c1_wcdma_dc1_rxf_ici_cal_data_car1_type;

/* Type to hold c1_wcdma_dc2_rxf_ici_cal_data_car0  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           c1_wcdma_dc2_rxf_ici_cal_data_car0[17];
} nvi_c1_wcdma_dc2_rxf_ici_cal_data_car0_type;

/* Type to hold c1_wcdma_dc2_rxf_ici_cal_data_car1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           c1_wcdma_dc2_rxf_ici_cal_data_car1[17];
} nvi_c1_wcdma_dc2_rxf_ici_cal_data_car1_type;

/* Type to hold c1_wcdma_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_lna_phase_ctl[6];
} nvi_c1_wcdma_lna_phase_ctl_type;

/* Type to hold camera_default_name_prefix  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           camera_default_name_prefix[NV_CAMERA_PREFIX_SIZ];
} nvi_camera_default_name_prefix_type;

/* Type to hold cdma_err_slp_vs_hdet  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             cdma_err_slp_vs_hdet[NV_CDMA_ERR_SLP_VS_HDET_SIZ];
} nvi_cdma_err_slp_vs_hdet_type;

/* Type to hold cdma_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             cdma_exp_hdet_vs_agc[NV_CDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_cdma_exp_hdet_vs_agc_type;

/* Type to hold cdma_lna_12_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             cdma_lna_12_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_cdma_lna_12_offset_vs_freq_type;

/* Type to hold cdma_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             cdma_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_cdma_lna_4_offset_vs_freq_type;

/* Type to hold cdma_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             cdma_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_cdma_lna_offset_vs_freq_type;

/* Type to hold cdma_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             cdma_p1_rise_fall_off[8];
} nvi_cdma_p1_rise_fall_off_type;

/* Type to hold cdma_rx_lin_slp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             cdma_rx_lin_slp[NV_CDMA_RX_LIN_SIZ];
} nvi_cdma_rx_lin_slp_type;

/* Type to hold cdma_tx_lin_master_slp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             cdma_tx_lin_master_slp[NV_CDMA_TX_LIN_MASTER_SIZ];
} nvi_cdma_tx_lin_master_slp_type;

/* Type to hold cdma_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             cdma_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_cdma_vga_gain_offset_vs_freq_type;

/* Type to hold cdma_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int2                                             cdma_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_cdma_vga_gain_offset_vs_temp_type;


typedef PACKED struct PACKED_POST{ 
  /* A carrier channel number */
  word                                             channel_a;
  /* B carrier channel number */
  word                                             channel_b;
} nvi_cdmach_type;

/* Type to hold cell_1x_olta_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             cell_1x_olta_backoff[4];
} nvi_cell_1x_olta_backoff_type;

/* Type to hold cell_hdr_olta_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             cell_hdr_olta_backoff[4];
} nvi_cell_hdr_olta_backoff_type;

/* Type to hold cgps_1x_mpc_server_addr_ipv6  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           cgps_1x_mpc_server_addr_ipv6[8];
} nvi_cgps_1x_mpc_server_addr_ipv6_type;

/* Type to hold cgps_1x_pde_server_addr_ipv6  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           cgps_1x_pde_server_addr_ipv6[8];
} nvi_cgps_1x_pde_server_addr_ipv6_type;

/* Type to hold cgps_1x_pde_server_addr_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            cgps_1x_pde_server_addr_url[128];
} nvi_cgps_1x_pde_server_addr_url_type;


typedef PACKED struct PACKED_POST{ 
  /* Min hepe threshold for wiper data */
  uint32                                           min_hepe_thres_m;
  /* Max hepe threshold in meters */
  uint32                                           max_hepe_thres_m;
} nvi_cgps_qwip_hepe_params_type;


typedef PACKED struct PACKED_POST{ 
  /* Configure network parameters for SUPL Session */
  uint32                                           supl_network_param_1;
  /* Second field for SUPL session network param */
  uint32                                           supl_network_param_2;
} nvi_cgps_sm_supl_network_params_type;

/* Type to hold cgps_umts_pde_server_addr_ipv6  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           cgps_umts_pde_server_addr_ipv6[8];
} nvi_cgps_umts_pde_server_addr_ipv6_type;

/* Type to hold cgps_umts_pde_server_addr_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            cgps_umts_pde_server_addr_url[128];
} nvi_cgps_umts_pde_server_addr_url_type;


typedef PACKED struct PACKED_POST{ 
  /* Cipher Key */
  uint8                                            key[NV_3G_KEY_SIZE];
} nvi_cipher_key_type;


typedef PACKED struct PACKED_POST{ 
  /* CK Lifetime Threshold */
  uint32                                           threshold;
} nvi_ck_threshold_type;

/* Type to hold clkrgm_debug  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           clkrgm_debug[10];
} nvi_clkrgm_debug_type;


typedef PACKED struct PACKED_POST{ 
  /* Config checksum */
  word                                             chksum;
} nvi_config_chksum_type;


typedef PACKED struct PACKED_POST{ 
  /* COUNTsp */
  byte                                             count;
} nvi_count_type;


typedef PACKED struct PACKED_POST{ 
  /* 1X Application configuration for CSIM feature */
  int32                                            data_len;
  /* 1X Application configuration for CSIM feature */
  uint8                                            data_ptr[32];
} nvi_csim_static_1x_app;

/* Type to hold data_agg_timer  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           data_agg_timer[SMD_DATA_PORT_COUNT];
} nvi_data_agg_timer_type;


typedef PACKED struct PACKED_POST{ 
  
  boolean                                          ehrpd_only_flag;
  
  uint8                                            max_failure_count;
  
  uint8                                            max_failure_total_count;
  
  uint8                                            new_attempt_max_timer;
} nvi_data_call_over_ehrpd_only_type;

/* Type to hold dcs_amam_arfcn  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_arfcn[2];
} nvi_dcs_amam_arfcn_type;

/* Type to hold dcs_amam_master_tbl_seg1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg1_f1[64];
} nvi_dcs_amam_master_tbl_seg1_f1_type;

/* Type to hold dcs_amam_master_tbl_seg1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg1_f2[64];
} nvi_dcs_amam_master_tbl_seg1_f2_type;

/* Type to hold dcs_amam_master_tbl_seg2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg2_f1[64];
} nvi_dcs_amam_master_tbl_seg2_f1_type;

/* Type to hold dcs_amam_master_tbl_seg2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg2_f2[64];
} nvi_dcs_amam_master_tbl_seg2_f2_type;

/* Type to hold dcs_amam_master_tbl_seg3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg3_f1[64];
} nvi_dcs_amam_master_tbl_seg3_f1_type;

/* Type to hold dcs_amam_master_tbl_seg3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg3_f2[64];
} nvi_dcs_amam_master_tbl_seg3_f2_type;

/* Type to hold dcs_amam_master_tbl_seg3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg3_f3[64];
} nvi_dcs_amam_master_tbl_seg3_f3_type;

/* Type to hold dcs_amam_master_tbl_seg4_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg4_f1[64];
} nvi_dcs_amam_master_tbl_seg4_f1_type;

/* Type to hold dcs_amam_master_tbl_seg4_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg4_f2[64];
} nvi_dcs_amam_master_tbl_seg4_f2_type;

/* Type to hold dcs_amam_master_tbl_seg4_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg4_f3[64];
} nvi_dcs_amam_master_tbl_seg4_f3_type;

/* Type to hold dcs_amam_master_tbl_seg5_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg5_f1[64];
} nvi_dcs_amam_master_tbl_seg5_f1_type;

/* Type to hold dcs_amam_master_tbl_seg5_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg5_f2[64];
} nvi_dcs_amam_master_tbl_seg5_f2_type;

/* Type to hold dcs_amam_master_tbl_seg5_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg5_f3[64];
} nvi_dcs_amam_master_tbl_seg5_f3_type;

/* Type to hold dcs_amam_master_tbl_seg6_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg6_f1[64];
} nvi_dcs_amam_master_tbl_seg6_f1_type;

/* Type to hold dcs_amam_master_tbl_seg6_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg6_f2[64];
} nvi_dcs_amam_master_tbl_seg6_f2_type;

/* Type to hold dcs_amam_master_tbl_seg6_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg6_f3[64];
} nvi_dcs_amam_master_tbl_seg6_f3_type;

/* Type to hold dcs_amam_master_tbl_seg7_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg7_f1[64];
} nvi_dcs_amam_master_tbl_seg7_f1_type;

/* Type to hold dcs_amam_master_tbl_seg7_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg7_f2[64];
} nvi_dcs_amam_master_tbl_seg7_f2_type;

/* Type to hold dcs_amam_master_tbl_seg7_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg7_f3[64];
} nvi_dcs_amam_master_tbl_seg7_f3_type;

/* Type to hold dcs_amam_master_tbl_seg8_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg8_f2[64];
} nvi_dcs_amam_master_tbl_seg8_f2_type;

/* Type to hold dcs_amam_master_tbl_seg8_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg8_f3[64];
} nvi_dcs_amam_master_tbl_seg8_f3_type;

/* Type to hold dcs_ampm_master_tbl_seg1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg1_f2[32];
} nvi_dcs_ampm_master_tbl_seg1_f2_type;

/* Type to hold dcs_ampm_master_tbl_seg1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg1_f3[32];
} nvi_dcs_ampm_master_tbl_seg1_f3_type;

/* Type to hold dcs_ampm_master_tbl_seg2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg2_f1[32];
} nvi_dcs_ampm_master_tbl_seg2_f1_type;

/* Type to hold dcs_ampm_master_tbl_seg2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg2_f3[32];
} nvi_dcs_ampm_master_tbl_seg2_f3_type;

/* Type to hold dcs_ampm_master_tbl_seg3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg3_f2[32];
} nvi_dcs_ampm_master_tbl_seg3_f2_type;

/* Type to hold dcs_ampm_master_tbl_seg3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg3_f3[32];
} nvi_dcs_ampm_master_tbl_seg3_f3_type;

/* Type to hold dcs_ampm_master_tbl_seg4_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg4_f2[32];
} nvi_dcs_ampm_master_tbl_seg4_f2_type;

/* Type to hold dcs_ampm_master_tbl_seg4_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg4_f3[32];
} nvi_dcs_ampm_master_tbl_seg4_f3_type;

/* Type to hold dcs_ampm_master_tbl_seg5_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg5_f2[32];
} nvi_dcs_ampm_master_tbl_seg5_f2_type;

/* Type to hold dcs_ampm_master_tbl_seg6_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg6_f3[32];
} nvi_dcs_ampm_master_tbl_seg6_f3_type;

/* Type to hold dcs_ampm_master_tbl_seg7_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg7_f3[32];
} nvi_dcs_ampm_master_tbl_seg7_f3_type;

/* Type to hold dcs_ampm_master_tbl_seg8_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg8_f3[32];
} nvi_dcs_ampm_master_tbl_seg8_f3_type;

/* Type to hold dcs_c1_tx_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             dcs_c1_tx_freq_comp[8];
} nvi_dcs_c1_tx_freq_comp_type;

/* Type to hold dcs_cal_arfcn  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_cal_arfcn[NV_DCS_CAL_ARFCN_SIZ];
} nvi_dcs_cal_arfcn_type;

/* Type to hold dcs_enable_tx_freq_comp_vs_pcl  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_enable_tx_freq_comp_vs_pcl[16];
} nvi_dcs_enable_tx_freq_comp_vs_pcl_type;

/* Type to hold dcs_pa_gain_slope  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             dcs_pa_gain_slope[NV_NUM_DCS_PA_PROFILES];
} nvi_dcs_pa_gain_slope_type;

/* Type to hold dcs_pa_temp_comp_max_pwr  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            dcs_pa_temp_comp_max_pwr[16];
} nvi_dcs_pa_temp_comp_max_pwr_type;

/* Type to hold dcs_power_levels  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            dcs_power_levels[16];
} nvi_dcs_power_levels_type;

/* Type to hold dcs_prdi_00  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_00[30];
} nvi_dcs_prdi_00_type;

/* Type to hold dcs_prdi_01  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_01[30];
} nvi_dcs_prdi_01_type;

/* Type to hold dcs_prdi_02  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_02[30];
} nvi_dcs_prdi_02_type;

/* Type to hold dcs_prdi_03  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_03[30];
} nvi_dcs_prdi_03_type;

/* Type to hold dcs_prdi_04  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_04[30];
} nvi_dcs_prdi_04_type;

/* Type to hold dcs_prdi_05  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_05[30];
} nvi_dcs_prdi_05_type;

/* Type to hold dcs_prdi_06  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_06[30];
} nvi_dcs_prdi_06_type;

/* Type to hold dcs_prdi_08  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_08[30];
} nvi_dcs_prdi_08_type;

/* Type to hold dcs_prdi_09  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_09[30];
} nvi_dcs_prdi_09_type;

/* Type to hold dcs_prdi_10  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_10[30];
} nvi_dcs_prdi_10_type;

/* Type to hold dcs_prui_00  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_00[30];
} nvi_dcs_prui_00_type;

/* Type to hold dcs_prui_01  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_01[30];
} nvi_dcs_prui_01_type;

/* Type to hold dcs_prui_02  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_02[30];
} nvi_dcs_prui_02_type;

/* Type to hold dcs_prui_03  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_03[30];
} nvi_dcs_prui_03_type;

/* Type to hold dcs_prui_04  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_04[30];
} nvi_dcs_prui_04_type;

/* Type to hold dcs_prui_05  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_05[30];
} nvi_dcs_prui_05_type;

/* Type to hold dcs_prui_06  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_06[30];
} nvi_dcs_prui_06_type;

/* Type to hold dcs_prui_07  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_07[30];
} nvi_dcs_prui_07_type;

/* Type to hold dcs_prui_08  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_08[30];
} nvi_dcs_prui_08_type;

/* Type to hold dcs_prui_09  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_09[30];
} nvi_dcs_prui_09_type;

/* Type to hold dcs_prui_10  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_10[30];
} nvi_dcs_prui_10_type;

/* Type to hold dcs_prui_11  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_11[30];
} nvi_dcs_prui_11_type;

/* Type to hold dcs_prui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prui_12[30];
} nvi_dcs_prui_12_type;

/* Type to hold dcs_rx_gain_range_1_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_rx_gain_range_1_freq_comp[NV_DCS_CAL_ARFCN_SIZ];
} nvi_dcs_rx_gain_range_1_freq_comp_type;

/* Type to hold dcs_rx_gain_range_2_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            dcs_rx_gain_range_2_temp_comp[3];
} nvi_dcs_rx_gain_range_2_temp_comp_type;

/* Type to hold dcs_rx_gain_range_3_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_rx_gain_range_3_freq_comp[NV_DCS_CAL_ARFCN_SIZ];
} nvi_dcs_rx_gain_range_3_freq_comp_type;

/* Type to hold dcs_rx_gain_range_3_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            dcs_rx_gain_range_3_temp_comp[3];
} nvi_dcs_rx_gain_range_3_temp_comp_type;

/* Type to hold dcs_rx_gain_range_4_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_rx_gain_range_4_freq_comp[NV_DCS_CAL_ARFCN_SIZ];
} nvi_dcs_rx_gain_range_4_freq_comp_type;

/* Type to hold dcs_rx_gain_range_5_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_rx_gain_range_5_freq_comp[NV_DCS_CAL_ARFCN_SIZ];
} nvi_dcs_rx_gain_range_5_freq_comp_type;

/* Type to hold dcs_rx_gain_range_5_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            dcs_rx_gain_range_5_temp_comp[3];
} nvi_dcs_rx_gain_range_5_temp_comp_type;

/* Type to hold dcs_tx_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             dcs_tx_freq_comp[16];
} nvi_dcs_tx_freq_comp_type;

/* Type to hold dcs_vh_th_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_th_brdi_13[30];
} nvi_dcs_vh_th_brdi_13_type;

/* Type to hold dcs_vh_th_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_th_brdi_14[30];
} nvi_dcs_vh_th_brdi_14_type;

/* Type to hold dcs_vh_th_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_th_brdi_15[30];
} nvi_dcs_vh_th_brdi_15_type;

/* Type to hold dcs_vh_th_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_th_brui_13[30];
} nvi_dcs_vh_th_brui_13_type;

/* Type to hold dcs_vh_th_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_th_brui_14[30];
} nvi_dcs_vh_th_brui_14_type;

/* Type to hold dcs_vh_th_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_th_brui_15[30];
} nvi_dcs_vh_th_brui_15_type;

/* Type to hold dcs_vh_th_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_th_prdi_13[30];
} nvi_dcs_vh_th_prdi_13_type;

/* Type to hold dcs_vh_th_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_th_prdi_15[30];
} nvi_dcs_vh_th_prdi_15_type;

/* Type to hold dcs_vh_th_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_th_prui_14[30];
} nvi_dcs_vh_th_prui_14_type;

/* Type to hold dcs_vh_th_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_th_prui_15[30];
} nvi_dcs_vh_th_prui_15_type;

/* Type to hold dcs_vh_tl_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_tl_brdi_13[30];
} nvi_dcs_vh_tl_brdi_13_type;

/* Type to hold dcs_vh_tl_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_tl_brdi_14[30];
} nvi_dcs_vh_tl_brdi_14_type;

/* Type to hold dcs_vh_tl_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_tl_brdi_15[30];
} nvi_dcs_vh_tl_brdi_15_type;

/* Type to hold dcs_vh_tl_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_tl_brui_13[30];
} nvi_dcs_vh_tl_brui_13_type;

/* Type to hold dcs_vh_tl_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_tl_brui_14[30];
} nvi_dcs_vh_tl_brui_14_type;

/* Type to hold dcs_vh_tl_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_tl_brui_15[30];
} nvi_dcs_vh_tl_brui_15_type;

/* Type to hold dcs_vh_tl_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_tl_prdi_14[30];
} nvi_dcs_vh_tl_prdi_14_type;

/* Type to hold dcs_vh_tl_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_tl_prui_13[30];
} nvi_dcs_vh_tl_prui_13_type;

/* Type to hold dcs_vh_tl_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_tl_prui_15[30];
} nvi_dcs_vh_tl_prui_15_type;

/* Type to hold dcs_vh_tm_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_tm_brdi_13[30];
} nvi_dcs_vh_tm_brdi_13_type;

/* Type to hold dcs_vh_tm_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_tm_brdi_15[30];
} nvi_dcs_vh_tm_brdi_15_type;

/* Type to hold dcs_vh_tm_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_tm_brui_14[30];
} nvi_dcs_vh_tm_brui_14_type;

/* Type to hold dcs_vh_tm_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_tm_brui_15[30];
} nvi_dcs_vh_tm_brui_15_type;

/* Type to hold dcs_vh_tm_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_tm_prdi_13[30];
} nvi_dcs_vh_tm_prdi_13_type;

/* Type to hold dcs_vh_tm_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_tm_prdi_15[30];
} nvi_dcs_vh_tm_prdi_15_type;

/* Type to hold dcs_vh_tm_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_tm_prui_15[30];
} nvi_dcs_vh_tm_prui_15_type;

/* Type to hold dcs_vl_th_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_th_brui_13[30];
} nvi_dcs_vl_th_brui_13_type;

/* Type to hold dcs_vl_th_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_th_brui_14[30];
} nvi_dcs_vl_th_brui_14_type;

/* Type to hold dcs_vl_th_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_th_brui_15[30];
} nvi_dcs_vl_th_brui_15_type;

/* Type to hold dcs_vl_th_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_th_prdi_13[30];
} nvi_dcs_vl_th_prdi_13_type;

/* Type to hold dcs_vl_th_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_th_prdi_15[30];
} nvi_dcs_vl_th_prdi_15_type;

/* Type to hold dcs_vl_th_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_th_prui_14[30];
} nvi_dcs_vl_th_prui_14_type;

/* Type to hold dcs_vl_th_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_th_prui_15[30];
} nvi_dcs_vl_th_prui_15_type;

/* Type to hold dcs_vl_tl_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_tl_brdi_13[30];
} nvi_dcs_vl_tl_brdi_13_type;

/* Type to hold dcs_vl_tl_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_tl_brdi_14[30];
} nvi_dcs_vl_tl_brdi_14_type;

/* Type to hold dcs_vl_tl_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_tl_brdi_15[30];
} nvi_dcs_vl_tl_brdi_15_type;

/* Type to hold dcs_vl_tl_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_tl_brui_13[30];
} nvi_dcs_vl_tl_brui_13_type;

/* Type to hold dcs_vl_tl_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_tl_brui_14[30];
} nvi_dcs_vl_tl_brui_14_type;

/* Type to hold dcs_vl_tl_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_tl_brui_15[30];
} nvi_dcs_vl_tl_brui_15_type;

/* Type to hold dcs_vl_tl_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_tl_prdi_13[30];
} nvi_dcs_vl_tl_prdi_13_type;

/* Type to hold dcs_vl_tl_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_tl_prdi_14[30];
} nvi_dcs_vl_tl_prdi_14_type;

/* Type to hold dcs_vl_tl_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_tl_prdi_15[30];
} nvi_dcs_vl_tl_prdi_15_type;

/* Type to hold dcs_vl_tl_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_tl_prui_13[30];
} nvi_dcs_vl_tl_prui_13_type;

/* Type to hold dcs_vl_tl_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_tl_prui_14[30];
} nvi_dcs_vl_tl_prui_14_type;

/* Type to hold dcs_vl_tl_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_tl_prui_15[30];
} nvi_dcs_vl_tl_prui_15_type;

/* Type to hold dcs_vl_tm_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_tm_brdi_13[30];
} nvi_dcs_vl_tm_brdi_13_type;

/* Type to hold dcs_vl_tm_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_tm_brdi_14[30];
} nvi_dcs_vl_tm_brdi_14_type;

/* Type to hold dcs_vl_tm_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_tm_brdi_15[30];
} nvi_dcs_vl_tm_brdi_15_type;

/* Type to hold dcs_vl_tm_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_tm_brui_13[30];
} nvi_dcs_vl_tm_brui_13_type;

/* Type to hold dcs_vl_tm_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_tm_brui_14[30];
} nvi_dcs_vl_tm_brui_14_type;

/* Type to hold dcs_vl_tm_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_tm_brui_15[30];
} nvi_dcs_vl_tm_brui_15_type;

/* Type to hold dcs_vl_tm_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_tm_prdi_14[30];
} nvi_dcs_vl_tm_prdi_14_type;

/* Type to hold dcs_vl_tm_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_tm_prdi_15[30];
} nvi_dcs_vl_tm_prdi_15_type;

/* Type to hold dcs_vl_tm_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_tm_prui_15[30];
} nvi_dcs_vl_tm_prui_15_type;

/* Type to hold dcs_vm_th_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_th_brdi_13[30];
} nvi_dcs_vm_th_brdi_13_type;

/* Type to hold dcs_vm_th_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_th_brdi_14[30];
} nvi_dcs_vm_th_brdi_14_type;

/* Type to hold dcs_vm_th_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_th_brdi_15[30];
} nvi_dcs_vm_th_brdi_15_type;

/* Type to hold dcs_vm_th_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_th_brui_13[30];
} nvi_dcs_vm_th_brui_13_type;

/* Type to hold dcs_vm_th_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_th_brui_14[30];
} nvi_dcs_vm_th_brui_14_type;

/* Type to hold dcs_vm_th_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_th_brui_15[30];
} nvi_dcs_vm_th_brui_15_type;

/* Type to hold dcs_vm_th_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_th_prdi_14[30];
} nvi_dcs_vm_th_prdi_14_type;

/* Type to hold dcs_vm_th_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_th_prui_13[30];
} nvi_dcs_vm_th_prui_13_type;

/* Type to hold dcs_vm_tl_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_tl_brdi_14[30];
} nvi_dcs_vm_tl_brdi_14_type;

/* Type to hold dcs_vm_tl_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_tl_brdi_15[30];
} nvi_dcs_vm_tl_brdi_15_type;

/* Type to hold dcs_vm_tl_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_tl_brui_13[30];
} nvi_dcs_vm_tl_brui_13_type;

/* Type to hold dcs_vm_tl_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_tl_brui_14[30];
} nvi_dcs_vm_tl_brui_14_type;

/* Type to hold dcs_vm_tl_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_tl_brui_15[30];
} nvi_dcs_vm_tl_brui_15_type;

/* Type to hold dcs_vm_tl_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_tl_prdi_13[30];
} nvi_dcs_vm_tl_prdi_13_type;

/* Type to hold dcs_vm_tl_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_tl_prdi_14[30];
} nvi_dcs_vm_tl_prdi_14_type;

/* Type to hold dcs_vm_tl_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_tl_prdi_15[30];
} nvi_dcs_vm_tl_prdi_15_type;

/* Type to hold dcs_vm_tl_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_tl_prui_14[30];
} nvi_dcs_vm_tl_prui_14_type;

/* Type to hold dcs_vm_tl_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_tl_prui_15[30];
} nvi_dcs_vm_tl_prui_15_type;

/* Type to hold dcs_vm_tm_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_tm_brdi_13[30];
} nvi_dcs_vm_tm_brdi_13_type;

/* Type to hold dcs_vm_tm_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_tm_brdi_14[30];
} nvi_dcs_vm_tm_brdi_14_type;

/* Type to hold dcs_vm_tm_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_tm_brdi_15[30];
} nvi_dcs_vm_tm_brdi_15_type;

/* Type to hold dcs_vm_tm_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_tm_brui_13[30];
} nvi_dcs_vm_tm_brui_13_type;

/* Type to hold dcs_vm_tm_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_tm_brui_14[30];
} nvi_dcs_vm_tm_brui_14_type;

/* Type to hold dcs_vm_tm_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_tm_brui_15[30];
} nvi_dcs_vm_tm_brui_15_type;

/* Type to hold dcs_vm_tm_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_tm_prdi_13[30];
} nvi_dcs_vm_tm_prdi_13_type;

/* Type to hold dcs_vm_tm_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_tm_prdi_14[30];
} nvi_dcs_vm_tm_prdi_14_type;

/* Type to hold dcs_vm_tm_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_tm_prui_14[30];
} nvi_dcs_vm_tm_prui_14_type;


typedef PACKED struct PACKED_POST{ 
  /* type of the apps DCVS algo. implemented */
  uint8                                            type;
  /* the profiling timer period */
  uint32                                           timer_period;
  /* lower votes in decision history */
  uint8                                            lower_n;
  /* raise votes in decision history */
  uint8                                            raise_n;
  /* high threshhold for lowering the performance level */
  uint32                                           high_watermark;
  /* low threshhold for lowing the performance level */
  uint32                                           low_watermark;
} nvi_dcvsapps_type;


typedef PACKED struct PACKED_POST{ 
  /* Number of valid service options in the list */
  uint16                                           allow_num_srv_opt;
  /* Service option pages to ignore while in DDTM */
  uint16                                           allow_srv_opt_list[62];
} nvi_ddtm_allow_so_list_s_type;


typedef PACKED struct PACKED_POST{ 
  
  word                                             ddtm_pref;
  
  word                                             ddtm_act;
  /* Number of valid service options in the list */
  uint16                                           num_srv_opt;
  /* Service option pages to ignore while in DDTM */
  uint16                                           srv_opt_list[60];
} nvi_ddtm_settings_s_type;

/* Type to hold device_serial_no  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            device_serial_no[16];
} nvi_device_serial_no_type;

/* Type to hold df  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             df[20];
} nvi_df_type;


typedef PACKED struct PACKED_POST{ 
  /* Directory Number */
  byte                                             dir_number[NV_DIR_NUMB_SIZ];
} nvi_dir_number_type;


typedef PACKED struct PACKED_POST{ 
  /* BASE_LAT_REGsp */
  dword                                            base_lat_reg;
  /* BASE_LONG_REGsp */
  dword                                            base_long_reg;
  /* BASE_DIST_REGsp */
  word                                             reg_dist_reg;
} nvi_dist_reg_type;

/* Type to hold domain_name  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             domain_name[NV_DOMAIN_NAME_SIZE];
} nvi_domain_name_type;


typedef PACKED struct PACKED_POST{ 
  /* CSCA <sca> value */
  uint8                                            sca[NV_CSCA_SCA_STR_MAX_LEN];
  /* CSCA <tosca> value */
  uint8                                            tosca[NV_CSCA_TOSCA_STR_MAX_LEN];
} nvi_ds_at_csas_csca_register;


typedef PACKED struct PACKED_POST{ 
  /* CSCB <mode> value */
  uint8                                            mode;
  /* CSCB <mids> value */
  uint8                                            mids[NV_CSCB_MIDS_STR_MAX_LEN];
  /* CSCB <dcss> value */
  uint8                                            dcss[NV_CSCB_DCSS_STR_MAX_LEN];
} nvi_ds_at_csas_cscb_settings;


typedef PACKED struct PACKED_POST{ 
  /* CSMP <fo> value */
  uint8                                            fo[NV_CSMP_FO_STR_MAX_LEN];
  /* CMSP <vp> value */
  uint8                                            vp[NV_CSMP_VP_STR__MAX_LEN];
  /* CSMP <pid> value */
  uint8                                            pid;
  /* CSMP <dcs> value */
  uint8                                            dcs;
} nvi_ds_at_csas_csmp_settings;


typedef PACKED struct PACKED_POST{ 
  /* DS AT S Registers */
  uint8                                            s0_reg_val;
  /* S7 Register */
  uint8                                            s7_reg_val;
  /* S10 Register */
  uint8                                            s10_reg_val;
} nvi_ds_at_s_registers_type;


typedef PACKED struct PACKED_POST{ 
  /* DS AT V.250 Registers */
  uint8                                            e_reg_val;
  /* Q Register */
  uint8                                            q_reg_val;
  /* V Register */
  uint8                                            v_reg_val;
  /* X Register */
  uint8                                            x_reg_val;
  /* &C Register */
  uint8                                            amp_c_reg_val;
  /* &D Register */
  uint8                                            amp_d_reg_val;
  /* &S Register */
  uint8                                            amp_s_reg_val;
  /* +IFC Value */
  uint8                                            ifc_reg_val[2];
  /* \V Register */
  uint8                                            slash_v_reg_val;
} nvi_ds_at_v250_registers_type;


typedef PACKED struct PACKED_POST{ 
  
  byte                                             mn_auth[3];
} nvi_ds_mip_dmu_mn_auth_type;


typedef PACKED struct PACKED_POST{ 
  
  byte                                             pkoid;
} nvi_ds_mip_dmu_pkoid_type;

/* Type to hold ds_mip_enable_prof  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             ds_mip_enable_prof[NV_DS_MIP_MAX_NUM_PROF];
} nvi_ds_mip_enable_prof_type;


typedef PACKED struct PACKED_POST{ 
  /* Length of User NAI field */
  byte                                             nai_length;
  /* Network Access Identifier */
  byte                                             nai[NV_MAX_NAI_LENGTH];
  /* SPI set 1 bit */
  boolean                                          mn_ha_spi_set;
  /* Security Parameter Index for MN-HA authentication */
  dword                                            mn_ha_spi;
  /* SPI set 1 bit */
  boolean                                          mn_aaa_spi_set;
  /* Security Parameter Index for MN-AAA authentication */
  dword                                            mn_aaa_spi;
  /* Reverse tunneling preference */
  boolean                                          rev_tun_pref;
  /* IP address of mobile set to 0 for dynamic home address */
  dword                                            home_addr;
  /* Primary Home Agent IP address */
  dword                                            primary_ha_addr;
  /* Secondary Home Agent IP address */
  dword                                            secondary_ha_addr;
} nvi_ds_mip_gen_user_prof_type;


typedef PACKED struct PACKED_POST{ 
  /* time difference */
  uint32                                           time_delta;
} nvi_ds_mip_mn_ha_time_delta_type;


typedef PACKED struct PACKED_POST{ 
  /* length of the NAI in number of bytes */
  uint8                                            nai_length;
  /* nai bytes */
  uint8                                            nai[NV_MAX_NAI_LENGTH];
} nvi_ds_mip_rm_nai_type;


typedef PACKED struct PACKED_POST{ 
  /* Length of MN-HA shared secret */
  byte                                             mn_ha_shared_secret_length;
  /* MN-HA shared secret */
  byte                                             mn_ha_shared_secret[NV_MAX_MN_HA_SHARED_SECRET_LEN];
  /* Length of MN-AAA shared secret */
  byte                                             mn_aaa_shared_secret_length;
  /* MN_AAA shared secret */
  byte                                             mn_aaa_shared_secret[NV_MAX_MN_AAA_SHARED_SECRET_LEN];
} nvi_ds_mip_ss_user_prof_type;

/* Type to hold ds_phone_rdf_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            ds_phone_rdf_url[NV_UI_IOTA_MAX_URL_SIZE];
} nvi_ds_phone_rdf_url_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            app_priority;
  
  uint8                                            data_rate_mode;
  
  uint8                                            data_bearer;
  
  uint8                                            auth_algorithm;
  
  uint32                                           app_type;
} nvi_ds_sip_profile_type;


typedef PACKED struct PACKED_POST{ 
  
  word                                             dtaco_control;
} nvi_dtaco_control_type;

/* Type to hold dvbh_cell_id_range  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold dvbh_cell_id_range  */
  nv_dvbh_cell_id_range                            dvbh_cell_id_range[NV_DVBH_MAX_CELL_ID_RANGES];
} nvi_dvbh_cell_id_range_type;

/* Type to hold dvbh_l_freq_band_range  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold dvbh_l_freq_band_range  */
  nv_dvbh_freq_band_range                          dvbh_l_freq_band_range[NV_DVBH_MAX_FREQ_RANGES_IN_BAND];
} nvi_dvbh_l_freq_band_range_type;

/* Type to hold dvbh_platform_nw_id_list  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold dvbh_platform_nw_id_list  */
  nv_dvbh_platform_nw_id_list                      dvbh_platform_nw_id_list[NV_DVBH_MAX_PLATFORMS];
} nvi_dvbh_platform_nw_id_list_type;

/* Type to hold dvbh_uhf_band_freq_range_and_offset_1  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold dvbh_uhf_band_freq_range_and_offset_1  */
  nv_dvbh_uhf_band_freq_and_offset_range           dvbh_uhf_band_freq_range_and_offset_1[NV_DVBH_MAX_FREQ_RANGES_AND_OFFSET_IN_BAND];
} nvi_dvbh_uhf_band_freq_range_and_offset_1_type;

/* Type to hold dvbh_uhf_band_freq_range_and_offset_2  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold dvbh_uhf_band_freq_range_and_offset_2  */
  nv_dvbh_uhf_band_freq_and_offset_range           dvbh_uhf_band_freq_range_and_offset_2[NV_DVBH_MAX_FREQ_RANGES_AND_OFFSET_IN_BAND];
} nvi_dvbh_uhf_band_freq_range_and_offset_2_type;

/* Type to hold dvbh_uhf_freq_band_range  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold dvbh_uhf_freq_band_range  */
  nv_dvbh_freq_band_range                          dvbh_uhf_freq_band_range[NV_DVBH_MAX_FREQ_RANGES_IN_BAND];
} nvi_dvbh_uhf_freq_band_range_type;

/* Type to hold dvbh_vhf_freq_band_range  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold dvbh_vhf_freq_band_range  */
  nv_dvbh_freq_band_range                          dvbh_vhf_freq_band_range[NV_DVBH_MAX_FREQ_RANGES_IN_BAND];
} nvi_dvbh_vhf_freq_band_range_type;


typedef PACKED struct PACKED_POST{ 
  /* Length of the EAP Shared Secret */
  uint8                                            eap_shared_secret_len;
  /* EAP Shared Secret */
  uint8                                            eap_shared_secret[NV_PPP_EAP_MAX_SHARED_SECRET_LENGTH];
} nvi_eap_shared_secret_type;

/* Type to hold edge_1800_pmeas_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1800_pmeas_g0_f1[32];
} nvi_edge_1800_pmeas_g0_f1_type;

/* Type to hold edge_1800_pmeas_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1800_pmeas_g0_f2[32];
} nvi_edge_1800_pmeas_g0_f2_type;

/* Type to hold edge_1800_pmeas_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1800_pmeas_g1_f1[32];
} nvi_edge_1800_pmeas_g1_f1_type;

/* Type to hold edge_1800_pmeas_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1800_pmeas_g2_f1[32];
} nvi_edge_1800_pmeas_g2_f1_type;

/* Type to hold edge_1800_pmeas_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1800_pmeas_g2_f2[32];
} nvi_edge_1800_pmeas_g2_f2_type;

/* Type to hold edge_1800_pmeas_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1800_pmeas_g3_f1[32];
} nvi_edge_1800_pmeas_g3_f1_type;

/* Type to hold edge_1800_pmeas_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1800_pmeas_g3_f2[32];
} nvi_edge_1800_pmeas_g3_f2_type;

/* Type to hold edge_1800_pmeas_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1800_pmeas_g3_f3[32];
} nvi_edge_1800_pmeas_g3_f3_type;

/* Type to hold edge_1800_rgi_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1800_rgi_g0_f1[32];
} nvi_edge_1800_rgi_g0_f1_type;

/* Type to hold edge_1800_rgi_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1800_rgi_g1_f1[32];
} nvi_edge_1800_rgi_g1_f1_type;

/* Type to hold edge_1800_rgi_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1800_rgi_g2_f1[32];
} nvi_edge_1800_rgi_g2_f1_type;

/* Type to hold edge_1800_rgi_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1800_rgi_g2_f2[32];
} nvi_edge_1800_rgi_g2_f2_type;

/* Type to hold edge_1800_rgi_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1800_rgi_g3_f1[32];
} nvi_edge_1800_rgi_g3_f1_type;

/* Type to hold edge_1800_rgi_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1800_rgi_g3_f3[32];
} nvi_edge_1800_rgi_g3_f3_type;

/* Type to hold edge_1900_pmeas_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1900_pmeas_g0_f1[32];
} nvi_edge_1900_pmeas_g0_f1_type;

/* Type to hold edge_1900_pmeas_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1900_pmeas_g0_f2[32];
} nvi_edge_1900_pmeas_g0_f2_type;

/* Type to hold edge_1900_pmeas_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1900_pmeas_g0_f3[32];
} nvi_edge_1900_pmeas_g0_f3_type;

/* Type to hold edge_1900_pmeas_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1900_pmeas_g1_f1[32];
} nvi_edge_1900_pmeas_g1_f1_type;

/* Type to hold edge_1900_pmeas_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1900_pmeas_g1_f2[32];
} nvi_edge_1900_pmeas_g1_f2_type;

/* Type to hold edge_1900_pmeas_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1900_pmeas_g1_f3[32];
} nvi_edge_1900_pmeas_g1_f3_type;

/* Type to hold edge_1900_pmeas_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1900_pmeas_g2_f3[32];
} nvi_edge_1900_pmeas_g2_f3_type;

/* Type to hold edge_1900_pmeas_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1900_pmeas_g3_f1[32];
} nvi_edge_1900_pmeas_g3_f1_type;

/* Type to hold edge_1900_pmeas_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1900_pmeas_g3_f2[32];
} nvi_edge_1900_pmeas_g3_f2_type;

/* Type to hold edge_1900_rgi_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1900_rgi_g0_f1[32];
} nvi_edge_1900_rgi_g0_f1_type;

/* Type to hold edge_1900_rgi_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1900_rgi_g0_f3[32];
} nvi_edge_1900_rgi_g0_f3_type;

/* Type to hold edge_1900_rgi_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1900_rgi_g1_f2[32];
} nvi_edge_1900_rgi_g1_f2_type;

/* Type to hold edge_1900_rgi_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1900_rgi_g1_f3[32];
} nvi_edge_1900_rgi_g1_f3_type;

/* Type to hold edge_1900_rgi_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1900_rgi_g2_f1[32];
} nvi_edge_1900_rgi_g2_f1_type;

/* Type to hold edge_1900_rgi_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1900_rgi_g2_f2[32];
} nvi_edge_1900_rgi_g2_f2_type;

/* Type to hold edge_1900_rgi_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1900_rgi_g2_f3[32];
} nvi_edge_1900_rgi_g2_f3_type;

/* Type to hold edge_1900_rgi_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1900_rgi_g3_f1[32];
} nvi_edge_1900_rgi_g3_f1_type;

/* Type to hold edge_1900_rgi_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1900_rgi_g3_f2[32];
} nvi_edge_1900_rgi_g3_f2_type;

/* Type to hold edge_1900_rgi_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1900_rgi_g3_f3[32];
} nvi_edge_1900_rgi_g3_f3_type;

/* Type to hold edge_850_pmeas_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_850_pmeas_g0_f1[32];
} nvi_edge_850_pmeas_g0_f1_type;

/* Type to hold edge_850_pmeas_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_850_pmeas_g0_f2[32];
} nvi_edge_850_pmeas_g0_f2_type;

/* Type to hold edge_850_pmeas_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_850_pmeas_g0_f3[32];
} nvi_edge_850_pmeas_g0_f3_type;

/* Type to hold edge_850_pmeas_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_850_pmeas_g1_f1[32];
} nvi_edge_850_pmeas_g1_f1_type;

/* Type to hold edge_850_pmeas_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_850_pmeas_g1_f2[32];
} nvi_edge_850_pmeas_g1_f2_type;

/* Type to hold edge_850_pmeas_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_850_pmeas_g1_f3[32];
} nvi_edge_850_pmeas_g1_f3_type;

/* Type to hold edge_850_pmeas_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_850_pmeas_g2_f1[32];
} nvi_edge_850_pmeas_g2_f1_type;

/* Type to hold edge_850_pmeas_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_850_pmeas_g2_f2[32];
} nvi_edge_850_pmeas_g2_f2_type;

/* Type to hold edge_850_pmeas_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_850_pmeas_g2_f3[32];
} nvi_edge_850_pmeas_g2_f3_type;

/* Type to hold edge_850_pmeas_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_850_pmeas_g3_f1[32];
} nvi_edge_850_pmeas_g3_f1_type;

/* Type to hold edge_850_pmeas_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_850_pmeas_g3_f2[32];
} nvi_edge_850_pmeas_g3_f2_type;

/* Type to hold edge_850_pmeas_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_850_pmeas_g3_f3[32];
} nvi_edge_850_pmeas_g3_f3_type;

/* Type to hold edge_850_rgi_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_850_rgi_g0_f1[32];
} nvi_edge_850_rgi_g0_f1_type;

/* Type to hold edge_850_rgi_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_850_rgi_g0_f3[32];
} nvi_edge_850_rgi_g0_f3_type;

/* Type to hold edge_850_rgi_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_850_rgi_g1_f1[32];
} nvi_edge_850_rgi_g1_f1_type;

/* Type to hold edge_850_rgi_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_850_rgi_g1_f2[32];
} nvi_edge_850_rgi_g1_f2_type;

/* Type to hold edge_850_rgi_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_850_rgi_g1_f3[32];
} nvi_edge_850_rgi_g1_f3_type;

/* Type to hold edge_850_rgi_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_850_rgi_g2_f1[32];
} nvi_edge_850_rgi_g2_f1_type;

/* Type to hold edge_850_rgi_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_850_rgi_g2_f3[32];
} nvi_edge_850_rgi_g2_f3_type;

/* Type to hold edge_850_rgi_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_850_rgi_g3_f1[32];
} nvi_edge_850_rgi_g3_f1_type;

/* Type to hold edge_850_rgi_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_850_rgi_g3_f3[32];
} nvi_edge_850_rgi_g3_f3_type;

/* Type to hold edge_900_pmeas_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_900_pmeas_g0_f3[32];
} nvi_edge_900_pmeas_g0_f3_type;

/* Type to hold edge_900_pmeas_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_900_pmeas_g1_f1[32];
} nvi_edge_900_pmeas_g1_f1_type;

/* Type to hold edge_900_pmeas_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_900_pmeas_g1_f2[32];
} nvi_edge_900_pmeas_g1_f2_type;

/* Type to hold edge_900_pmeas_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_900_pmeas_g2_f1[32];
} nvi_edge_900_pmeas_g2_f1_type;

/* Type to hold edge_900_pmeas_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_900_pmeas_g2_f3[32];
} nvi_edge_900_pmeas_g2_f3_type;

/* Type to hold edge_900_pmeas_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_900_pmeas_g3_f1[32];
} nvi_edge_900_pmeas_g3_f1_type;

/* Type to hold edge_900_pmeas_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_900_pmeas_g3_f2[32];
} nvi_edge_900_pmeas_g3_f2_type;

/* Type to hold edge_900_pmeas_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_900_pmeas_g3_f3[32];
} nvi_edge_900_pmeas_g3_f3_type;

/* Type to hold edge_900_rgi_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_900_rgi_g0_f2[32];
} nvi_edge_900_rgi_g0_f2_type;

/* Type to hold edge_900_rgi_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_900_rgi_g0_f3[32];
} nvi_edge_900_rgi_g0_f3_type;

/* Type to hold edge_900_rgi_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_900_rgi_g1_f1[32];
} nvi_edge_900_rgi_g1_f1_type;

/* Type to hold edge_900_rgi_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_900_rgi_g1_f2[32];
} nvi_edge_900_rgi_g1_f2_type;

/* Type to hold edge_900_rgi_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_900_rgi_g1_f3[32];
} nvi_edge_900_rgi_g1_f3_type;

/* Type to hold edge_900_rgi_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_900_rgi_g2_f1[32];
} nvi_edge_900_rgi_g2_f1_type;

/* Type to hold edge_900_rgi_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_900_rgi_g2_f2[32];
} nvi_edge_900_rgi_g2_f2_type;

/* Type to hold edge_900_rgi_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_900_rgi_g2_f3[32];
} nvi_edge_900_rgi_g2_f3_type;

/* Type to hold edge_900_rgi_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_900_rgi_g3_f1[32];
} nvi_edge_900_rgi_g3_f1_type;


typedef PACKED struct PACKED_POST{ 
  /* MCC part of the IMSI */
  uint8                                            ehrpd_mcc[MAX_MCC_DIGITS];
  /* Number of mcc digits */
  uint8                                            num_of_mcc_digits;
  /* MNC part of IMSI */
  uint8                                            ehrpd_mnc[MAX_MNC_DIGITS];
  /* Number of MNC digits */
  uint8                                            num_of_mnc_digits;
  /* MSIN part of the IMSI */
  uint8                                            ehrpd_msin[MAX_MSIN_DIGITS];
  /* Number of MSIN digits */
  uint8                                            num_of_msin_digits;
} nvi_ehrpd_imsi_type;


typedef PACKED struct PACKED_POST{ 
  /* Operator Variant Algorithm Configuration Field */
  uint8                                            ehrpd_milenage_op[NV_EHRPD_MILENAGE_MAX_OP_LENGTH];
  /* OP length */
  uint8                                            ehrpd_milenage_op_length;
} nvi_ehrpd_milenage_op_type;


typedef PACKED struct PACKED_POST{ 
  /* Enabled flag */
  byte                                             enabled;
} nvi_enabled_type;

/* Type to hold enhanced_hplmn_srch_tbl  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            enhanced_hplmn_srch_tbl[100];
} nvi_enhanced_hplmn_srch_tbl_type;


typedef PACKED struct PACKED_POST{ 
  /* PLMN ID of the registered PLMN that sent the equi. PLMN list */
  nv_plmn_id_type                                  rplmn;
  /* Number of PLMNs in the list */
  uint8                                            length;
  /* Array of equivalent PLMNs */
  nv_plmn_id_type                                  plmn[NV_EQUIVALENT_PLMN_LIST_MAX_SIZE];
} nvi_equivalent_plmn_list_type;


typedef PACKED struct PACKED_POST{ 
  
  word                                             option;
} nvi_err_fatal_options_type;


typedef PACKED struct PACKED_POST{ 
  /* Number of occurrences (0=full, FF=empty) */
  byte                                             err_count;
  /* File name string */
  byte                                             file_name[NV_ERR_FILE_NAME_LEN];
  /* Line number in file */
  word                                             line_num;
  /* TRUE if fatal error */
  boolean                                          fatal;
} nvi_err_log_type;


typedef PACKED struct PACKED_POST{ 
  
  uint32                                           esn_me;
} nvi_esn_me_type;

/* Type to hold ext_op_list_entry_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ext_op_list_entry_name[NV_EXT_OP_NAME_SIZ];
} nvi_ext_op_list_entry_name_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            mcc[3];
  
  uint8                                            num_mnc_digits;
  
  uint8                                            mnc[3];
} nvi_ext_op_list_entry_plmn_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            plmn_identity[NV_EXTENDED_EQUIVALENT_PLMN_LIST_MAX_SIZE][NV_PLMN_ID_SIZE];
} nvi_extended_equivalent_plmn_list_type;

/* Type to hold fact_info  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             fact_info[NV_FACTORY_INFO_SIZ];
} nvi_fact_info_type;

/* Type to hold factory_data_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            factory_data_3[128];
} nvi_factory_data_3_type;


typedef PACKED struct PACKED_POST{ 
  /* FIRSTCHPp channel */
  word                                             channel;
} nvi_firstchp_type;

/* Type to hold fm_agc_adj_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             fm_agc_adj_vs_freq[NV_ADJ_VS_FREQ_SIZ];
} nvi_fm_agc_adj_vs_freq_type;


typedef PACKED struct PACKED_POST{ 
  /* HDET ADC value */
  byte                                             value[NV_HDET_ADC_TABLE_SIZ];
} nvi_fm_hdet_adc_range_type;


typedef PACKED struct PACKED_POST{ 
  /* power level 0 (max) */
  byte                                             level_0;
  /* power level 1 */
  byte                                             level_1;
  /* power level 2 */
  byte                                             level_2;
  /* power level 3 */
  byte                                             level_3;
  /* power level 4 */
  byte                                             level_4;
  /* power level 5 */
  byte                                             level_5;
  /* power level 6 */
  byte                                             level_6;
  /* power level 7 */
  byte                                             level_7;
} nvi_fm_tx_pwr_type;

/* Type to hold fm_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int2                                             fm_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_fm_vga_gain_offset_vs_temp_type;


typedef PACKED struct PACKED_POST{ 
  /* item */
  byte                                             item[NV_FR_TEMP_OFFSET_TABLE_SIZ];
} nvi_fr_temp_offset_type;


typedef PACKED struct PACKED_POST{ 
  /* fsc2 */
  dword                                            fsc2;
} nvi_fsc2_type;


typedef PACKED struct PACKED_POST{ 
  /* Field Service Code */
  byte                                             fsc[NV_FSC_SIZ];
} nvi_fsc_type;


typedef PACKED struct PACKED_POST{ 
  
  int8                                             max_gainrange_4;
  
  int8                                             min_gainrange_5;
} nvi_gainrange5_switchpoint_type;


typedef PACKED struct PACKED_POST{ 
  
  int8                                             max_gainrange_1;
  
  int8                                             min_gainrange_2;
  
  int8                                             max_gainrange_2;
  
  int8                                             min_gainrange_3;
  
  int8                                             max_gainrange_3;
  
  int8                                             min_gainrange_4;
} nvi_gainrange_switchpoint_type;

/* Type to hold gnss_internal_confidence_non_stationary  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gnss_internal_confidence_non_stationary[10];
} nvi_gnss_internal_confidence_non_stationary_type;

/* Type to hold gnss_internal_confidence_stationary  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gnss_internal_confidence_stationary[10];
} nvi_gnss_internal_confidence_stationary_type;

/* Type to hold gnss_medium_preference_list  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gnss_medium_preference_list[5];
} nvi_gnss_medium_preference_list_type;

/* Type to hold gobi_boot_uqcn_filename  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gobi_boot_uqcn_filename[64];
} nvi_gobi_boot_uqcn_filename_type;


typedef PACKED struct PACKED_POST{ 
  /* Build ID */
  uint8                                            build_id[32];
  /* Gobi Boot Attribute */
  uint8                                            unique_id[16];
  /* Gobi Boot UQCN Filename */
  uint16                                           status;
  /* Gobi QDL Index */
  uint16                                           failure_count;
  /* QDL Index */
  uint8                                            rfu[12];
} nvi_gobi_image_table_type;

/* Type to hold gps1_xtra_primary_server_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gps1_xtra_primary_server_url[128];
} nvi_gps1_xtra_primary_server_url_type;

/* Type to hold gps1_xtra_primary_sntp_server_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gps1_xtra_primary_sntp_server_url[128];
} nvi_gps1_xtra_primary_sntp_server_url_type;

/* Type to hold gps1_xtra_secondary_server_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gps1_xtra_secondary_server_url[128];
} nvi_gps1_xtra_secondary_server_url_type;

/* Type to hold gps1_xtra_secondary_sntp_server_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gps1_xtra_secondary_sntp_server_url[128];
} nvi_gps1_xtra_secondary_sntp_server_url_type;

/* Type to hold gps1_xtra_tertiary_server_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gps1_xtra_tertiary_server_url[128];
} nvi_gps1_xtra_tertiary_server_url_type;

/* Type to hold gps_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gps_drx_mode_sel[3];
} nvi_gps_drx_mode_sel_type;

/* Type to hold gsm1900_c1_tx_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm1900_c1_tx_freq_comp[8];
} nvi_gsm1900_c1_tx_freq_comp_type;

/* Type to hold gsm_1800_kv_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1800_kv_vs_temp[NV_KV_VS_TEMP_MAX_SIZ];
} nvi_gsm_1800_kv_vs_temp_type;

/* Type to hold gsm_1800_linear_pa_r1_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1800_linear_pa_r1_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_1800_linear_pa_r1_temp_comp_type;

/* Type to hold gsm_1800_linear_pa_r2_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1800_linear_pa_r2_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_1800_linear_pa_r2_temp_comp_type;

/* Type to hold gsm_1800_linear_pa_r3_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1800_linear_pa_r3_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_1800_linear_pa_r3_temp_comp_type;

/* Type to hold gsm_1800_padac_dc_offset_tbl  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_1800_padac_dc_offset_tbl[16];
} nvi_gsm_1800_padac_dc_offset_tbl_type;

/* Type to hold gsm_1800_pmeas_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_pmeas_g1_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1800_pmeas_g1_f1_type;

/* Type to hold gsm_1800_rgi_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1800_rgi_g0_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1800_rgi_g0_f3_type;

/* Type to hold gsm_1800_rgi_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1800_rgi_g1_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1800_rgi_g1_f1_type;

/* Type to hold gsm_1800_rgi_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1800_rgi_g1_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1800_rgi_g1_f2_type;

/* Type to hold gsm_1800_rgi_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1800_rgi_g2_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1800_rgi_g2_f3_type;

/* Type to hold gsm_1800_rgi_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1800_rgi_g3_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1800_rgi_g3_f1_type;

/* Type to hold gsm_1800_rgi_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1800_rgi_g3_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1800_rgi_g3_f2_type;

/* Type to hold gsm_1800_rgi_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1800_rgi_g3_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1800_rgi_g3_f3_type;

/* Type to hold gsm_1800_smps_pdm_tbl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_smps_pdm_tbl[16];
} nvi_gsm_1800_smps_pdm_tbl_type;

/* Type to hold gsm_1900_amam_arfcn  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_arfcn[2];
} nvi_gsm_1900_amam_arfcn_type;

/* Type to hold gsm_1900_amam_master_tbl_seg1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg1_f1[64];
} nvi_gsm_1900_amam_master_tbl_seg1_f1_type;

/* Type to hold gsm_1900_amam_master_tbl_seg1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg1_f2[64];
} nvi_gsm_1900_amam_master_tbl_seg1_f2_type;

/* Type to hold gsm_1900_amam_master_tbl_seg1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg1_f3[64];
} nvi_gsm_1900_amam_master_tbl_seg1_f3_type;

/* Type to hold gsm_1900_amam_master_tbl_seg2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg2_f1[64];
} nvi_gsm_1900_amam_master_tbl_seg2_f1_type;

/* Type to hold gsm_1900_amam_master_tbl_seg2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg2_f2[64];
} nvi_gsm_1900_amam_master_tbl_seg2_f2_type;

/* Type to hold gsm_1900_amam_master_tbl_seg3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg3_f2[64];
} nvi_gsm_1900_amam_master_tbl_seg3_f2_type;

/* Type to hold gsm_1900_amam_master_tbl_seg3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg3_f3[64];
} nvi_gsm_1900_amam_master_tbl_seg3_f3_type;

/* Type to hold gsm_1900_amam_master_tbl_seg4_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg4_f1[64];
} nvi_gsm_1900_amam_master_tbl_seg4_f1_type;

/* Type to hold gsm_1900_amam_master_tbl_seg4_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg4_f2[64];
} nvi_gsm_1900_amam_master_tbl_seg4_f2_type;

/* Type to hold gsm_1900_amam_master_tbl_seg5_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg5_f1[64];
} nvi_gsm_1900_amam_master_tbl_seg5_f1_type;

/* Type to hold gsm_1900_amam_master_tbl_seg5_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg5_f3[64];
} nvi_gsm_1900_amam_master_tbl_seg5_f3_type;

/* Type to hold gsm_1900_amam_master_tbl_seg6_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg6_f1[64];
} nvi_gsm_1900_amam_master_tbl_seg6_f1_type;

/* Type to hold gsm_1900_amam_master_tbl_seg6_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg6_f2[64];
} nvi_gsm_1900_amam_master_tbl_seg6_f2_type;

/* Type to hold gsm_1900_amam_master_tbl_seg7_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg7_f3[64];
} nvi_gsm_1900_amam_master_tbl_seg7_f3_type;

/* Type to hold gsm_1900_amam_master_tbl_seg8_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg8_f1[64];
} nvi_gsm_1900_amam_master_tbl_seg8_f1_type;

/* Type to hold gsm_1900_amam_master_tbl_seg8_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg8_f3[64];
} nvi_gsm_1900_amam_master_tbl_seg8_f3_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg1_f1[32];
} nvi_gsm_1900_ampm_master_tbl_seg1_f1_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg1_f2[32];
} nvi_gsm_1900_ampm_master_tbl_seg1_f2_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg1_f3[32];
} nvi_gsm_1900_ampm_master_tbl_seg1_f3_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg2_f1[32];
} nvi_gsm_1900_ampm_master_tbl_seg2_f1_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg2_f2[32];
} nvi_gsm_1900_ampm_master_tbl_seg2_f2_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg2_f3[32];
} nvi_gsm_1900_ampm_master_tbl_seg2_f3_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg3_f1[32];
} nvi_gsm_1900_ampm_master_tbl_seg3_f1_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg3_f2[32];
} nvi_gsm_1900_ampm_master_tbl_seg3_f2_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg3_f3[32];
} nvi_gsm_1900_ampm_master_tbl_seg3_f3_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg4_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg4_f1[32];
} nvi_gsm_1900_ampm_master_tbl_seg4_f1_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg4_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg4_f2[32];
} nvi_gsm_1900_ampm_master_tbl_seg4_f2_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg4_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg4_f3[32];
} nvi_gsm_1900_ampm_master_tbl_seg4_f3_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg5_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg5_f1[32];
} nvi_gsm_1900_ampm_master_tbl_seg5_f1_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg5_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg5_f2[32];
} nvi_gsm_1900_ampm_master_tbl_seg5_f2_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg6_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg6_f1[32];
} nvi_gsm_1900_ampm_master_tbl_seg6_f1_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg6_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg6_f2[32];
} nvi_gsm_1900_ampm_master_tbl_seg6_f2_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg7_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg7_f1[32];
} nvi_gsm_1900_ampm_master_tbl_seg7_f1_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg8_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg8_f1[32];
} nvi_gsm_1900_ampm_master_tbl_seg8_f1_type;

/* Type to hold gsm_1900_c0_tx_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_1900_c0_tx_freq_comp[8];
} nvi_gsm_1900_c0_tx_freq_comp_type;

/* Type to hold gsm_1900_cal_arfcn  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_cal_arfcn[NV_GSM_1900_CAL_ARFCN_SIZ];
} nvi_gsm_1900_cal_arfcn_type;

/* Type to hold gsm_1900_kv_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_kv_vs_temp[NV_KV_VS_TEMP_MAX_SIZ];
} nvi_gsm_1900_kv_vs_temp_type;

/* Type to hold gsm_1900_linear_pa_r0_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_linear_pa_r0_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_1900_linear_pa_r0_temp_comp_type;

/* Type to hold gsm_1900_linear_pa_r1_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_linear_pa_r1_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_1900_linear_pa_r1_temp_comp_type;

/* Type to hold gsm_1900_linear_pa_r2_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_linear_pa_r2_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_1900_linear_pa_r2_temp_comp_type;

/* Type to hold gsm_1900_linear_pa_r3_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_linear_pa_r3_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_1900_linear_pa_r3_temp_comp_type;

/* Type to hold gsm_1900_pa_temp_comp_index_15  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_1900_pa_temp_comp_index_15[16];
} nvi_gsm_1900_pa_temp_comp_index_15_type;

/* Type to hold gsm_1900_pa_temp_comp_max_pwr  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_pa_temp_comp_max_pwr[16];
} nvi_gsm_1900_pa_temp_comp_max_pwr_type;

/* Type to hold gsm_1900_padac_dc_offset_tbl  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_1900_padac_dc_offset_tbl[16];
} nvi_gsm_1900_padac_dc_offset_tbl_type;

/* Type to hold gsm_1900_pmeas_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_pmeas_g1_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1900_pmeas_g1_f2_type;

/* Type to hold gsm_1900_pmeas_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_pmeas_g1_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1900_pmeas_g1_f3_type;

/* Type to hold gsm_1900_pmeas_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_pmeas_g2_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1900_pmeas_g2_f2_type;

/* Type to hold gsm_1900_pmeas_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_pmeas_g2_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1900_pmeas_g2_f3_type;

/* Type to hold gsm_1900_pmeas_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_pmeas_g3_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1900_pmeas_g3_f1_type;

/* Type to hold gsm_1900_pmeas_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_pmeas_g3_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1900_pmeas_g3_f2_type;

/* Type to hold gsm_1900_power_levels  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_power_levels[16];
} nvi_gsm_1900_power_levels_type;

/* Type to hold gsm_1900_prdi_00  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_00[30];
} nvi_gsm_1900_prdi_00_type;

/* Type to hold gsm_1900_prdi_01  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_01[30];
} nvi_gsm_1900_prdi_01_type;

/* Type to hold gsm_1900_prdi_02  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_02[30];
} nvi_gsm_1900_prdi_02_type;

/* Type to hold gsm_1900_prdi_07  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_07[30];
} nvi_gsm_1900_prdi_07_type;

/* Type to hold gsm_1900_prdi_08  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_08[30];
} nvi_gsm_1900_prdi_08_type;

/* Type to hold gsm_1900_prdi_09  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_09[30];
} nvi_gsm_1900_prdi_09_type;

/* Type to hold gsm_1900_prdi_10  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_10[30];
} nvi_gsm_1900_prdi_10_type;

/* Type to hold gsm_1900_prdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_12[30];
} nvi_gsm_1900_prdi_12_type;

/* Type to hold gsm_1900_prui_00  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_00[30];
} nvi_gsm_1900_prui_00_type;

/* Type to hold gsm_1900_prui_02  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_02[30];
} nvi_gsm_1900_prui_02_type;

/* Type to hold gsm_1900_prui_03  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_03[30];
} nvi_gsm_1900_prui_03_type;

/* Type to hold gsm_1900_prui_04  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_04[30];
} nvi_gsm_1900_prui_04_type;

/* Type to hold gsm_1900_prui_07  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_07[30];
} nvi_gsm_1900_prui_07_type;

/* Type to hold gsm_1900_prui_08  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_08[30];
} nvi_gsm_1900_prui_08_type;

/* Type to hold gsm_1900_prui_10  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_10[30];
} nvi_gsm_1900_prui_10_type;

/* Type to hold gsm_1900_prui_11  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_11[30];
} nvi_gsm_1900_prui_11_type;

/* Type to hold gsm_1900_rgi_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_rgi_g0_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1900_rgi_g0_f3_type;

/* Type to hold gsm_1900_rgi_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_rgi_g1_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1900_rgi_g1_f1_type;

/* Type to hold gsm_1900_rgi_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_rgi_g1_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1900_rgi_g1_f2_type;

/* Type to hold gsm_1900_rgi_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_rgi_g3_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1900_rgi_g3_f1_type;

/* Type to hold gsm_1900_rgi_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_rgi_g3_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1900_rgi_g3_f2_type;

/* Type to hold gsm_1900_rgi_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_rgi_g3_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1900_rgi_g3_f3_type;

/* Type to hold gsm_1900_rx_gain_range_1_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_rx_gain_range_1_freq_comp[NV_GSM_1900_CAL_ARFCN_SIZ];
} nvi_gsm_1900_rx_gain_range_1_freq_comp_type;

/* Type to hold gsm_1900_rx_gain_range_2_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_rx_gain_range_2_freq_comp[NV_GSM_1900_CAL_ARFCN_SIZ];
} nvi_gsm_1900_rx_gain_range_2_freq_comp_type;

/* Type to hold gsm_1900_rx_gain_range_2_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_rx_gain_range_2_temp_comp[3];
} nvi_gsm_1900_rx_gain_range_2_temp_comp_type;

/* Type to hold gsm_1900_rx_gain_range_3_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_rx_gain_range_3_temp_comp[3];
} nvi_gsm_1900_rx_gain_range_3_temp_comp_type;

/* Type to hold gsm_1900_rx_gain_range_4_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_rx_gain_range_4_freq_comp[NV_GSM_1900_CAL_ARFCN_SIZ];
} nvi_gsm_1900_rx_gain_range_4_freq_comp_type;

/* Type to hold gsm_1900_rx_gain_range_4_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_rx_gain_range_4_temp_comp[3];
} nvi_gsm_1900_rx_gain_range_4_temp_comp_type;

/* Type to hold gsm_1900_rx_gain_range_5_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_rx_gain_range_5_freq_comp[NV_GSM_1900_CAL_ARFCN_SIZ];
} nvi_gsm_1900_rx_gain_range_5_freq_comp_type;

/* Type to hold gsm_1900_smps_pdm_tbl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_smps_pdm_tbl[16];
} nvi_gsm_1900_smps_pdm_tbl_type;

/* Type to hold gsm_1900_tx_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_1900_tx_freq_comp[16];
} nvi_gsm_1900_tx_freq_comp_type;

/* Type to hold gsm_1900_vh_th_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_th_brdi_13[30];
} nvi_gsm_1900_vh_th_brdi_13_type;

/* Type to hold gsm_1900_vh_th_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_th_brdi_14[30];
} nvi_gsm_1900_vh_th_brdi_14_type;

/* Type to hold gsm_1900_vh_th_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_th_brui_13[30];
} nvi_gsm_1900_vh_th_brui_13_type;

/* Type to hold gsm_1900_vh_th_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_th_brui_14[30];
} nvi_gsm_1900_vh_th_brui_14_type;

/* Type to hold gsm_1900_vh_th_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_th_brui_15[30];
} nvi_gsm_1900_vh_th_brui_15_type;

/* Type to hold gsm_1900_vh_th_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_th_prdi_13[30];
} nvi_gsm_1900_vh_th_prdi_13_type;

/* Type to hold gsm_1900_vh_th_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_th_prdi_14[30];
} nvi_gsm_1900_vh_th_prdi_14_type;

/* Type to hold gsm_1900_vh_th_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_th_prdi_15[30];
} nvi_gsm_1900_vh_th_prdi_15_type;

/* Type to hold gsm_1900_vh_th_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_th_prui_14[30];
} nvi_gsm_1900_vh_th_prui_14_type;

/* Type to hold gsm_1900_vh_tl_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_tl_brdi_13[30];
} nvi_gsm_1900_vh_tl_brdi_13_type;

/* Type to hold gsm_1900_vh_tl_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_tl_brdi_14[30];
} nvi_gsm_1900_vh_tl_brdi_14_type;

/* Type to hold gsm_1900_vh_tl_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_tl_brdi_15[30];
} nvi_gsm_1900_vh_tl_brdi_15_type;

/* Type to hold gsm_1900_vh_tl_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_tl_brui_13[30];
} nvi_gsm_1900_vh_tl_brui_13_type;

/* Type to hold gsm_1900_vh_tl_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_tl_brui_14[30];
} nvi_gsm_1900_vh_tl_brui_14_type;

/* Type to hold gsm_1900_vh_tl_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_tl_brui_15[30];
} nvi_gsm_1900_vh_tl_brui_15_type;

/* Type to hold gsm_1900_vh_tl_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_tl_prdi_14[30];
} nvi_gsm_1900_vh_tl_prdi_14_type;

/* Type to hold gsm_1900_vh_tl_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_tl_prui_13[30];
} nvi_gsm_1900_vh_tl_prui_13_type;

/* Type to hold gsm_1900_vh_tl_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_tl_prui_15[30];
} nvi_gsm_1900_vh_tl_prui_15_type;

/* Type to hold gsm_1900_vh_tm_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_tm_brdi_13[30];
} nvi_gsm_1900_vh_tm_brdi_13_type;

/* Type to hold gsm_1900_vh_tm_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_tm_brdi_14[30];
} nvi_gsm_1900_vh_tm_brdi_14_type;

/* Type to hold gsm_1900_vh_tm_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_tm_brdi_15[30];
} nvi_gsm_1900_vh_tm_brdi_15_type;

/* Type to hold gsm_1900_vh_tm_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_tm_brui_13[30];
} nvi_gsm_1900_vh_tm_brui_13_type;

/* Type to hold gsm_1900_vh_tm_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_tm_brui_14[30];
} nvi_gsm_1900_vh_tm_brui_14_type;

/* Type to hold gsm_1900_vh_tm_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_tm_brui_15[30];
} nvi_gsm_1900_vh_tm_brui_15_type;

/* Type to hold gsm_1900_vh_tm_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_tm_prdi_14[30];
} nvi_gsm_1900_vh_tm_prdi_14_type;

/* Type to hold gsm_1900_vl_th_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_th_brdi_13[30];
} nvi_gsm_1900_vl_th_brdi_13_type;

/* Type to hold gsm_1900_vl_th_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_th_brdi_14[30];
} nvi_gsm_1900_vl_th_brdi_14_type;

/* Type to hold gsm_1900_vl_th_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_th_brdi_15[30];
} nvi_gsm_1900_vl_th_brdi_15_type;

/* Type to hold gsm_1900_vl_th_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_th_brui_13[30];
} nvi_gsm_1900_vl_th_brui_13_type;

/* Type to hold gsm_1900_vl_th_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_th_brui_15[30];
} nvi_gsm_1900_vl_th_brui_15_type;

/* Type to hold gsm_1900_vl_th_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_th_prdi_15[30];
} nvi_gsm_1900_vl_th_prdi_15_type;

/* Type to hold gsm_1900_vl_tl_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_tl_brdi_13[30];
} nvi_gsm_1900_vl_tl_brdi_13_type;

/* Type to hold gsm_1900_vl_tl_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_tl_brdi_14[30];
} nvi_gsm_1900_vl_tl_brdi_14_type;

/* Type to hold gsm_1900_vl_tl_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_tl_brdi_15[30];
} nvi_gsm_1900_vl_tl_brdi_15_type;

/* Type to hold gsm_1900_vl_tl_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_tl_brui_13[30];
} nvi_gsm_1900_vl_tl_brui_13_type;

/* Type to hold gsm_1900_vl_tl_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_tl_brui_14[30];
} nvi_gsm_1900_vl_tl_brui_14_type;

/* Type to hold gsm_1900_vl_tl_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_tl_brui_15[30];
} nvi_gsm_1900_vl_tl_brui_15_type;

/* Type to hold gsm_1900_vl_tl_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_tl_prdi_13[30];
} nvi_gsm_1900_vl_tl_prdi_13_type;

/* Type to hold gsm_1900_vl_tl_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_tl_prdi_14[30];
} nvi_gsm_1900_vl_tl_prdi_14_type;

/* Type to hold gsm_1900_vl_tl_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_tl_prdi_15[30];
} nvi_gsm_1900_vl_tl_prdi_15_type;

/* Type to hold gsm_1900_vl_tl_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_tl_prui_13[30];
} nvi_gsm_1900_vl_tl_prui_13_type;

/* Type to hold gsm_1900_vl_tl_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_tl_prui_14[30];
} nvi_gsm_1900_vl_tl_prui_14_type;

/* Type to hold gsm_1900_vl_tm_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_tm_brdi_13[30];
} nvi_gsm_1900_vl_tm_brdi_13_type;

/* Type to hold gsm_1900_vl_tm_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_tm_brdi_14[30];
} nvi_gsm_1900_vl_tm_brdi_14_type;

/* Type to hold gsm_1900_vl_tm_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_tm_brdi_15[30];
} nvi_gsm_1900_vl_tm_brdi_15_type;

/* Type to hold gsm_1900_vl_tm_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_tm_brui_13[30];
} nvi_gsm_1900_vl_tm_brui_13_type;

/* Type to hold gsm_1900_vl_tm_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_tm_brui_14[30];
} nvi_gsm_1900_vl_tm_brui_14_type;

/* Type to hold gsm_1900_vl_tm_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_tm_brui_15[30];
} nvi_gsm_1900_vl_tm_brui_15_type;

/* Type to hold gsm_1900_vl_tm_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_tm_prdi_14[30];
} nvi_gsm_1900_vl_tm_prdi_14_type;

/* Type to hold gsm_1900_vl_tm_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_tm_prui_13[30];
} nvi_gsm_1900_vl_tm_prui_13_type;

/* Type to hold gsm_1900_vl_tm_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_tm_prui_15[30];
} nvi_gsm_1900_vl_tm_prui_15_type;

/* Type to hold gsm_1900_vm_th_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_th_brdi_13[30];
} nvi_gsm_1900_vm_th_brdi_13_type;

/* Type to hold gsm_1900_vm_th_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_th_brdi_14[30];
} nvi_gsm_1900_vm_th_brdi_14_type;

/* Type to hold gsm_1900_vm_th_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_th_brdi_15[30];
} nvi_gsm_1900_vm_th_brdi_15_type;

/* Type to hold gsm_1900_vm_th_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_th_brui_13[30];
} nvi_gsm_1900_vm_th_brui_13_type;

/* Type to hold gsm_1900_vm_th_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_th_brui_14[30];
} nvi_gsm_1900_vm_th_brui_14_type;

/* Type to hold gsm_1900_vm_th_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_th_prdi_13[30];
} nvi_gsm_1900_vm_th_prdi_13_type;

/* Type to hold gsm_1900_vm_th_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_th_prdi_14[30];
} nvi_gsm_1900_vm_th_prdi_14_type;

/* Type to hold gsm_1900_vm_th_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_th_prdi_15[30];
} nvi_gsm_1900_vm_th_prdi_15_type;

/* Type to hold gsm_1900_vm_tl_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_tl_brdi_13[30];
} nvi_gsm_1900_vm_tl_brdi_13_type;

/* Type to hold gsm_1900_vm_tl_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_tl_brdi_15[30];
} nvi_gsm_1900_vm_tl_brdi_15_type;

/* Type to hold gsm_1900_vm_tl_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_tl_brui_14[30];
} nvi_gsm_1900_vm_tl_brui_14_type;

/* Type to hold gsm_1900_vm_tl_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_tl_brui_15[30];
} nvi_gsm_1900_vm_tl_brui_15_type;

/* Type to hold gsm_1900_vm_tl_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_tl_prdi_14[30];
} nvi_gsm_1900_vm_tl_prdi_14_type;

/* Type to hold gsm_1900_vm_tl_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_tl_prui_13[30];
} nvi_gsm_1900_vm_tl_prui_13_type;

/* Type to hold gsm_1900_vm_tl_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_tl_prui_14[30];
} nvi_gsm_1900_vm_tl_prui_14_type;

/* Type to hold gsm_1900_vm_tm_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_tm_brdi_13[30];
} nvi_gsm_1900_vm_tm_brdi_13_type;

/* Type to hold gsm_1900_vm_tm_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_tm_brdi_14[30];
} nvi_gsm_1900_vm_tm_brdi_14_type;

/* Type to hold gsm_1900_vm_tm_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_tm_brui_13[30];
} nvi_gsm_1900_vm_tm_brui_13_type;

/* Type to hold gsm_1900_vm_tm_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_tm_brui_14[30];
} nvi_gsm_1900_vm_tm_brui_14_type;

/* Type to hold gsm_1900_vm_tm_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_tm_prdi_13[30];
} nvi_gsm_1900_vm_tm_prdi_13_type;

/* Type to hold gsm_1900_vm_tm_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_tm_prdi_14[30];
} nvi_gsm_1900_vm_tm_prdi_14_type;

/* Type to hold gsm_850_amam_arfcn  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_arfcn[2];
} nvi_gsm_850_amam_arfcn_type;

/* Type to hold gsm_850_amam_master_tbl_seg1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg1_f1[64];
} nvi_gsm_850_amam_master_tbl_seg1_f1_type;

/* Type to hold gsm_850_amam_master_tbl_seg1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg1_f2[64];
} nvi_gsm_850_amam_master_tbl_seg1_f2_type;

/* Type to hold gsm_850_amam_master_tbl_seg2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg2_f1[64];
} nvi_gsm_850_amam_master_tbl_seg2_f1_type;

/* Type to hold gsm_850_amam_master_tbl_seg2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg2_f2[64];
} nvi_gsm_850_amam_master_tbl_seg2_f2_type;

/* Type to hold gsm_850_amam_master_tbl_seg2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg2_f3[64];
} nvi_gsm_850_amam_master_tbl_seg2_f3_type;

/* Type to hold gsm_850_amam_master_tbl_seg3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg3_f2[64];
} nvi_gsm_850_amam_master_tbl_seg3_f2_type;

/* Type to hold gsm_850_amam_master_tbl_seg3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg3_f3[64];
} nvi_gsm_850_amam_master_tbl_seg3_f3_type;

/* Type to hold gsm_850_amam_master_tbl_seg4_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg4_f1[64];
} nvi_gsm_850_amam_master_tbl_seg4_f1_type;

/* Type to hold gsm_850_amam_master_tbl_seg4_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg4_f2[64];
} nvi_gsm_850_amam_master_tbl_seg4_f2_type;

/* Type to hold gsm_850_amam_master_tbl_seg4_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg4_f3[64];
} nvi_gsm_850_amam_master_tbl_seg4_f3_type;

/* Type to hold gsm_850_amam_master_tbl_seg5_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg5_f1[64];
} nvi_gsm_850_amam_master_tbl_seg5_f1_type;

/* Type to hold gsm_850_amam_master_tbl_seg5_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg5_f2[64];
} nvi_gsm_850_amam_master_tbl_seg5_f2_type;

/* Type to hold gsm_850_amam_master_tbl_seg5_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg5_f3[64];
} nvi_gsm_850_amam_master_tbl_seg5_f3_type;

/* Type to hold gsm_850_amam_master_tbl_seg6_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg6_f3[64];
} nvi_gsm_850_amam_master_tbl_seg6_f3_type;

/* Type to hold gsm_850_amam_master_tbl_seg7_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg7_f1[64];
} nvi_gsm_850_amam_master_tbl_seg7_f1_type;

/* Type to hold gsm_850_amam_master_tbl_seg7_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg7_f2[64];
} nvi_gsm_850_amam_master_tbl_seg7_f2_type;

/* Type to hold gsm_850_amam_master_tbl_seg7_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg7_f3[64];
} nvi_gsm_850_amam_master_tbl_seg7_f3_type;

/* Type to hold gsm_850_amam_master_tbl_seg8_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg8_f1[64];
} nvi_gsm_850_amam_master_tbl_seg8_f1_type;

/* Type to hold gsm_850_amam_master_tbl_seg8_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg8_f2[64];
} nvi_gsm_850_amam_master_tbl_seg8_f2_type;

/* Type to hold gsm_850_amam_master_tbl_seg8_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg8_f3[64];
} nvi_gsm_850_amam_master_tbl_seg8_f3_type;

/* Type to hold gsm_850_ampm_master_tbl_seg1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg1_f2[32];
} nvi_gsm_850_ampm_master_tbl_seg1_f2_type;

/* Type to hold gsm_850_ampm_master_tbl_seg1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg1_f3[32];
} nvi_gsm_850_ampm_master_tbl_seg1_f3_type;

/* Type to hold gsm_850_ampm_master_tbl_seg2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg2_f2[32];
} nvi_gsm_850_ampm_master_tbl_seg2_f2_type;

/* Type to hold gsm_850_ampm_master_tbl_seg3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg3_f2[32];
} nvi_gsm_850_ampm_master_tbl_seg3_f2_type;

/* Type to hold gsm_850_ampm_master_tbl_seg3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg3_f3[32];
} nvi_gsm_850_ampm_master_tbl_seg3_f3_type;

/* Type to hold gsm_850_ampm_master_tbl_seg4_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg4_f2[32];
} nvi_gsm_850_ampm_master_tbl_seg4_f2_type;

/* Type to hold gsm_850_ampm_master_tbl_seg4_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg4_f3[32];
} nvi_gsm_850_ampm_master_tbl_seg4_f3_type;

/* Type to hold gsm_850_ampm_master_tbl_seg5_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg5_f1[32];
} nvi_gsm_850_ampm_master_tbl_seg5_f1_type;

/* Type to hold gsm_850_ampm_master_tbl_seg5_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg5_f2[32];
} nvi_gsm_850_ampm_master_tbl_seg5_f2_type;

/* Type to hold gsm_850_ampm_master_tbl_seg5_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg5_f3[32];
} nvi_gsm_850_ampm_master_tbl_seg5_f3_type;

/* Type to hold gsm_850_ampm_master_tbl_seg6_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg6_f2[32];
} nvi_gsm_850_ampm_master_tbl_seg6_f2_type;

/* Type to hold gsm_850_ampm_master_tbl_seg6_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg6_f3[32];
} nvi_gsm_850_ampm_master_tbl_seg6_f3_type;

/* Type to hold gsm_850_ampm_master_tbl_seg7_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg7_f2[32];
} nvi_gsm_850_ampm_master_tbl_seg7_f2_type;

/* Type to hold gsm_850_ampm_master_tbl_seg8_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg8_f3[32];
} nvi_gsm_850_ampm_master_tbl_seg8_f3_type;

/* Type to hold gsm_850_cal_arfcn  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_cal_arfcn[NV_GSM_850_CAL_ARFCN_SIZ];
} nvi_gsm_850_cal_arfcn_type;

/* Type to hold gsm_850_linear_pa_r0_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_linear_pa_r0_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_850_linear_pa_r0_temp_comp_type;

/* Type to hold gsm_850_linear_pa_r1_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_linear_pa_r1_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_850_linear_pa_r1_temp_comp_type;

/* Type to hold gsm_850_linear_pa_r3_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_linear_pa_r3_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_850_linear_pa_r3_temp_comp_type;

/* Type to hold gsm_850_pa_gain_slope  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             gsm_850_pa_gain_slope[NV_NUM_GSM_PA_PROFILES];
} nvi_gsm_850_pa_gain_slope_type;

/* Type to hold gsm_850_pa_temp_comp_index_14  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_850_pa_temp_comp_index_14[16];
} nvi_gsm_850_pa_temp_comp_index_14_type;

/* Type to hold gsm_850_pa_temp_comp_max_pwr  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_pa_temp_comp_max_pwr[16];
} nvi_gsm_850_pa_temp_comp_max_pwr_type;

/* Type to hold gsm_850_padac_dc_offset_tbl  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_850_padac_dc_offset_tbl[15];
} nvi_gsm_850_padac_dc_offset_tbl_type;

/* Type to hold gsm_850_path_delay_comp_freq_tbl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_path_delay_comp_freq_tbl[8];
} nvi_gsm_850_path_delay_comp_freq_tbl_type;

/* Type to hold gsm_850_path_delay_hot_temp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_path_delay_hot_temp_vs_freq[8];
} nvi_gsm_850_path_delay_hot_temp_vs_freq_type;

/* Type to hold gsm_850_path_delay_room_temp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_path_delay_room_temp_vs_freq[8];
} nvi_gsm_850_path_delay_room_temp_vs_freq_type;

/* Type to hold gsm_850_pmeas_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_pmeas_g1_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_850_pmeas_g1_f1_type;

/* Type to hold gsm_850_pmeas_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_pmeas_g3_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_850_pmeas_g3_f1_type;

/* Type to hold gsm_850_power_levels  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_power_levels[15];
} nvi_gsm_850_power_levels_type;

/* Type to hold gsm_850_rgi_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_850_rgi_g0_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_850_rgi_g0_f1_type;

/* Type to hold gsm_850_rgi_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_850_rgi_g0_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_850_rgi_g0_f2_type;

/* Type to hold gsm_850_rgi_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_850_rgi_g0_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_850_rgi_g0_f3_type;

/* Type to hold gsm_850_rgi_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_850_rgi_g1_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_850_rgi_g1_f1_type;

/* Type to hold gsm_850_rgi_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_850_rgi_g1_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_850_rgi_g1_f2_type;

/* Type to hold gsm_850_rgi_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_850_rgi_g1_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_850_rgi_g1_f3_type;

/* Type to hold gsm_850_rgi_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_850_rgi_g2_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_850_rgi_g2_f1_type;

/* Type to hold gsm_850_rgi_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_850_rgi_g2_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_850_rgi_g2_f2_type;

/* Type to hold gsm_850_rgi_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_850_rgi_g3_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_850_rgi_g3_f1_type;

/* Type to hold gsm_850_rx_gain_range_1_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_rx_gain_range_1_freq_comp[NV_GSM_850_CAL_ARFCN_SIZ];
} nvi_gsm_850_rx_gain_range_1_freq_comp_type;

/* Type to hold gsm_850_rx_gain_range_2_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_rx_gain_range_2_freq_comp[NV_GSM_850_CAL_ARFCN_SIZ];
} nvi_gsm_850_rx_gain_range_2_freq_comp_type;

/* Type to hold gsm_850_rx_gain_range_2_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_rx_gain_range_2_temp_comp[3];
} nvi_gsm_850_rx_gain_range_2_temp_comp_type;

/* Type to hold gsm_850_rx_gain_range_3_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_rx_gain_range_3_freq_comp[NV_GSM_850_CAL_ARFCN_SIZ];
} nvi_gsm_850_rx_gain_range_3_freq_comp_type;

/* Type to hold gsm_850_rx_gain_range_3_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_rx_gain_range_3_temp_comp[3];
} nvi_gsm_850_rx_gain_range_3_temp_comp_type;

/* Type to hold gsm_850_rx_gain_range_4_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_rx_gain_range_4_freq_comp[NV_GSM_850_CAL_ARFCN_SIZ];
} nvi_gsm_850_rx_gain_range_4_freq_comp_type;

/* Type to hold gsm_850_rx_gain_range_4_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_rx_gain_range_4_temp_comp[3];
} nvi_gsm_850_rx_gain_range_4_temp_comp_type;

/* Type to hold gsm_850_rx_gain_range_5_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_rx_gain_range_5_freq_comp[NV_GSM_850_CAL_ARFCN_SIZ];
} nvi_gsm_850_rx_gain_range_5_freq_comp_type;

/* Type to hold gsm_850_rx_gain_range_5_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_rx_gain_range_5_temp_comp[3];
} nvi_gsm_850_rx_gain_range_5_temp_comp_type;

/* Type to hold gsm_850_smps_pdm_tbl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_smps_pdm_tbl[15];
} nvi_gsm_850_smps_pdm_tbl_type;

/* Type to hold gsm_850_tx_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_850_tx_freq_comp[8];
} nvi_gsm_850_tx_freq_comp_type;

/* Type to hold gsm_900_linear_pa_r0_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_900_linear_pa_r0_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_900_linear_pa_r0_temp_comp_type;

/* Type to hold gsm_900_linear_pa_r1_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_900_linear_pa_r1_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_900_linear_pa_r1_temp_comp_type;

/* Type to hold gsm_900_linear_pa_r2_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_900_linear_pa_r2_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_900_linear_pa_r2_temp_comp_type;

/* Type to hold gsm_900_linear_pa_r3_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_900_linear_pa_r3_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_900_linear_pa_r3_temp_comp_type;

/* Type to hold gsm_900_linear_pa_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_900_linear_pa_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_900_linear_pa_temp_comp_type;

/* Type to hold gsm_900_padac_dc_offset_tbl  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_900_padac_dc_offset_tbl[15];
} nvi_gsm_900_padac_dc_offset_tbl_type;

/* Type to hold gsm_900_pmeas_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_pmeas_g0_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_900_pmeas_g0_f3_type;

/* Type to hold gsm_900_pmeas_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_pmeas_g2_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_900_pmeas_g2_f2_type;

/* Type to hold gsm_900_pmeas_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_pmeas_g3_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_900_pmeas_g3_f1_type;

/* Type to hold gsm_900_rgi_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_900_rgi_g0_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_900_rgi_g0_f2_type;

/* Type to hold gsm_900_rgi_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_900_rgi_g0_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_900_rgi_g0_f3_type;

/* Type to hold gsm_900_rgi_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_900_rgi_g1_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_900_rgi_g1_f1_type;

/* Type to hold gsm_900_rgi_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_900_rgi_g1_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_900_rgi_g1_f2_type;

/* Type to hold gsm_900_rgi_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_900_rgi_g3_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_900_rgi_g3_f3_type;

/* Type to hold gsm_900_smps_pdm_tbl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_smps_pdm_tbl[15];
} nvi_gsm_900_smps_pdm_tbl_type;

/* Type to hold gsm_amam_arfcn  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_arfcn[2];
} nvi_gsm_amam_arfcn_type;

/* Type to hold gsm_amam_master_tbl_seg1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg1_f2[64];
} nvi_gsm_amam_master_tbl_seg1_f2_type;

/* Type to hold gsm_amam_master_tbl_seg2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg2_f1[64];
} nvi_gsm_amam_master_tbl_seg2_f1_type;

/* Type to hold gsm_amam_master_tbl_seg2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg2_f2[64];
} nvi_gsm_amam_master_tbl_seg2_f2_type;

/* Type to hold gsm_amam_master_tbl_seg2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg2_f3[64];
} nvi_gsm_amam_master_tbl_seg2_f3_type;

/* Type to hold gsm_amam_master_tbl_seg3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg3_f1[64];
} nvi_gsm_amam_master_tbl_seg3_f1_type;

/* Type to hold gsm_amam_master_tbl_seg3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg3_f3[64];
} nvi_gsm_amam_master_tbl_seg3_f3_type;

/* Type to hold gsm_amam_master_tbl_seg4_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg4_f2[64];
} nvi_gsm_amam_master_tbl_seg4_f2_type;

/* Type to hold gsm_amam_master_tbl_seg5_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg5_f1[64];
} nvi_gsm_amam_master_tbl_seg5_f1_type;

/* Type to hold gsm_amam_master_tbl_seg5_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg5_f2[64];
} nvi_gsm_amam_master_tbl_seg5_f2_type;

/* Type to hold gsm_amam_master_tbl_seg5_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg5_f3[64];
} nvi_gsm_amam_master_tbl_seg5_f3_type;

/* Type to hold gsm_amam_master_tbl_seg6_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg6_f1[64];
} nvi_gsm_amam_master_tbl_seg6_f1_type;

/* Type to hold gsm_amam_master_tbl_seg6_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg6_f2[64];
} nvi_gsm_amam_master_tbl_seg6_f2_type;

/* Type to hold gsm_amam_master_tbl_seg6_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg6_f3[64];
} nvi_gsm_amam_master_tbl_seg6_f3_type;

/* Type to hold gsm_amam_master_tbl_seg7_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg7_f2[64];
} nvi_gsm_amam_master_tbl_seg7_f2_type;

/* Type to hold gsm_amam_master_tbl_seg7_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg7_f3[64];
} nvi_gsm_amam_master_tbl_seg7_f3_type;

/* Type to hold gsm_amam_master_tbl_seg8_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg8_f1[64];
} nvi_gsm_amam_master_tbl_seg8_f1_type;

/* Type to hold gsm_amam_master_tbl_seg8_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg8_f2[64];
} nvi_gsm_amam_master_tbl_seg8_f2_type;

/* Type to hold gsm_ampm_master_tbl_seg1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg1_f2[32];
} nvi_gsm_ampm_master_tbl_seg1_f2_type;

/* Type to hold gsm_ampm_master_tbl_seg1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg1_f3[32];
} nvi_gsm_ampm_master_tbl_seg1_f3_type;

/* Type to hold gsm_ampm_master_tbl_seg2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg2_f1[32];
} nvi_gsm_ampm_master_tbl_seg2_f1_type;

/* Type to hold gsm_ampm_master_tbl_seg2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg2_f3[32];
} nvi_gsm_ampm_master_tbl_seg2_f3_type;

/* Type to hold gsm_ampm_master_tbl_seg3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg3_f1[32];
} nvi_gsm_ampm_master_tbl_seg3_f1_type;

/* Type to hold gsm_ampm_master_tbl_seg3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg3_f3[32];
} nvi_gsm_ampm_master_tbl_seg3_f3_type;

/* Type to hold gsm_ampm_master_tbl_seg4_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg4_f3[32];
} nvi_gsm_ampm_master_tbl_seg4_f3_type;

/* Type to hold gsm_ampm_master_tbl_seg5_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg5_f3[32];
} nvi_gsm_ampm_master_tbl_seg5_f3_type;

/* Type to hold gsm_ampm_master_tbl_seg6_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg6_f2[32];
} nvi_gsm_ampm_master_tbl_seg6_f2_type;

/* Type to hold gsm_ampm_master_tbl_seg6_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg6_f3[32];
} nvi_gsm_ampm_master_tbl_seg6_f3_type;

/* Type to hold gsm_ampm_master_tbl_seg7_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg7_f1[32];
} nvi_gsm_ampm_master_tbl_seg7_f1_type;

/* Type to hold gsm_ampm_master_tbl_seg7_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg7_f3[32];
} nvi_gsm_ampm_master_tbl_seg7_f3_type;

/* Type to hold gsm_ampm_master_tbl_seg8_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg8_f1[32];
} nvi_gsm_ampm_master_tbl_seg8_f1_type;

/* Type to hold gsm_ampm_master_tbl_seg8_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg8_f2[32];
} nvi_gsm_ampm_master_tbl_seg8_f2_type;

/* Type to hold gsm_ampm_master_tbl_seg8_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg8_f3[32];
} nvi_gsm_ampm_master_tbl_seg8_f3_type;

/* Type to hold gsm_c0_tx_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_c0_tx_freq_comp[8];
} nvi_gsm_c0_tx_freq_comp_type;

/* Type to hold gsm_c1_tx_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_c1_tx_freq_comp[8];
} nvi_gsm_c1_tx_freq_comp_type;

/* Type to hold gsm_cal_arfcn  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_cal_arfcn[NV_GSM_CAL_ARFCN_SIZ];
} nvi_gsm_cal_arfcn_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           channel[3];
  
  uint8                                            idac[3];
  
  uint8                                            qdac[3];
  
  uint8                                            gm;
} nvi_gsm_im2_type;

/* Type to hold gsm_kcgprs  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             gsm_kcgprs[9];
} nvi_gsm_kcgprs_type;

/* Type to hold gsm_locigprs  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             gsm_locigprs[14];
} nvi_gsm_locigprs_type;

/* Type to hold gsm_pa_gain_slope  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             gsm_pa_gain_slope[NV_NUM_GSM_PA_PROFILES];
} nvi_gsm_pa_gain_slope_type;

/* Type to hold gsm_pa_temp_comp_max_pwr  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_pa_temp_comp_max_pwr[16];
} nvi_gsm_pa_temp_comp_max_pwr_type;

/* Type to hold gsm_path_delay_cold_temp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_path_delay_cold_temp_vs_freq[8];
} nvi_gsm_path_delay_cold_temp_vs_freq_type;

/* Type to hold gsm_path_delay_room_temp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_path_delay_room_temp_vs_freq[8];
} nvi_gsm_path_delay_room_temp_vs_freq_type;

/* Type to hold gsm_power_levels  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_power_levels[15];
} nvi_gsm_power_levels_type;

/* Type to hold gsm_prdi_00  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prdi_00[30];
} nvi_gsm_prdi_00_type;

/* Type to hold gsm_prdi_01  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prdi_01[30];
} nvi_gsm_prdi_01_type;

/* Type to hold gsm_prdi_02  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prdi_02[30];
} nvi_gsm_prdi_02_type;

/* Type to hold gsm_prdi_03  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prdi_03[30];
} nvi_gsm_prdi_03_type;

/* Type to hold gsm_prdi_04  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prdi_04[30];
} nvi_gsm_prdi_04_type;

/* Type to hold gsm_prdi_05  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prdi_05[30];
} nvi_gsm_prdi_05_type;

/* Type to hold gsm_prdi_06  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prdi_06[30];
} nvi_gsm_prdi_06_type;

/* Type to hold gsm_prdi_07  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prdi_07[30];
} nvi_gsm_prdi_07_type;

/* Type to hold gsm_prdi_08  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prdi_08[30];
} nvi_gsm_prdi_08_type;

/* Type to hold gsm_prdi_09  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prdi_09[30];
} nvi_gsm_prdi_09_type;

/* Type to hold gsm_prdi_10  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prdi_10[30];
} nvi_gsm_prdi_10_type;

/* Type to hold gsm_prdi_11  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prdi_11[30];
} nvi_gsm_prdi_11_type;

/* Type to hold gsm_prui_00  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prui_00[30];
} nvi_gsm_prui_00_type;

/* Type to hold gsm_prui_01  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prui_01[30];
} nvi_gsm_prui_01_type;

/* Type to hold gsm_prui_02  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prui_02[30];
} nvi_gsm_prui_02_type;

/* Type to hold gsm_prui_03  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prui_03[30];
} nvi_gsm_prui_03_type;

/* Type to hold gsm_prui_04  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prui_04[30];
} nvi_gsm_prui_04_type;

/* Type to hold gsm_prui_05  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prui_05[30];
} nvi_gsm_prui_05_type;

/* Type to hold gsm_prui_06  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prui_06[30];
} nvi_gsm_prui_06_type;

/* Type to hold gsm_prui_07  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prui_07[30];
} nvi_gsm_prui_07_type;

/* Type to hold gsm_prui_08  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prui_08[30];
} nvi_gsm_prui_08_type;

/* Type to hold gsm_prui_09  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prui_09[30];
} nvi_gsm_prui_09_type;

/* Type to hold gsm_prui_10  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prui_10[30];
} nvi_gsm_prui_10_type;

/* Type to hold gsm_rx_gain_range_1_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_rx_gain_range_1_freq_comp[NV_GSM_CAL_ARFCN_SIZ];
} nvi_gsm_rx_gain_range_1_freq_comp_type;

/* Type to hold gsm_rx_gain_range_2_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_rx_gain_range_2_freq_comp[NV_GSM_CAL_ARFCN_SIZ];
} nvi_gsm_rx_gain_range_2_freq_comp_type;

/* Type to hold gsm_rx_gain_range_2_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_rx_gain_range_2_temp_comp[3];
} nvi_gsm_rx_gain_range_2_temp_comp_type;

/* Type to hold gsm_rx_gain_range_3_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_rx_gain_range_3_freq_comp[NV_GSM_CAL_ARFCN_SIZ];
} nvi_gsm_rx_gain_range_3_freq_comp_type;

/* Type to hold gsm_rx_gain_range_3_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_rx_gain_range_3_temp_comp[3];
} nvi_gsm_rx_gain_range_3_temp_comp_type;

/* Type to hold gsm_rx_gain_range_4_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_rx_gain_range_4_freq_comp[NV_GSM_CAL_ARFCN_SIZ];
} nvi_gsm_rx_gain_range_4_freq_comp_type;

/* Type to hold gsm_rx_gain_range_4_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_rx_gain_range_4_temp_comp[3];
} nvi_gsm_rx_gain_range_4_temp_comp_type;

/* Type to hold gsm_rx_gain_range_5_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_rx_gain_range_5_freq_comp[NV_GSM_CAL_ARFCN_SIZ];
} nvi_gsm_rx_gain_range_5_freq_comp_type;

/* Type to hold gsm_rx_gain_range_5_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_rx_gain_range_5_temp_comp[3];
} nvi_gsm_rx_gain_range_5_temp_comp_type;

/* Type to hold gsm_tx_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_tx_freq_comp[8];
} nvi_gsm_tx_freq_comp_type;

/* Type to hold gsm_vh_th_brdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_th_brdi_12[30];
} nvi_gsm_vh_th_brdi_12_type;

/* Type to hold gsm_vh_th_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_th_brdi_13[30];
} nvi_gsm_vh_th_brdi_13_type;

/* Type to hold gsm_vh_th_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_th_brdi_14[30];
} nvi_gsm_vh_th_brdi_14_type;

/* Type to hold gsm_vh_th_brui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_th_brui_12[30];
} nvi_gsm_vh_th_brui_12_type;

/* Type to hold gsm_vh_th_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_th_brui_13[30];
} nvi_gsm_vh_th_brui_13_type;

/* Type to hold gsm_vh_th_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_th_brui_14[30];
} nvi_gsm_vh_th_brui_14_type;

/* Type to hold gsm_vh_th_prdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_th_prdi_12[30];
} nvi_gsm_vh_th_prdi_12_type;

/* Type to hold gsm_vh_th_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_th_prdi_13[30];
} nvi_gsm_vh_th_prdi_13_type;

/* Type to hold gsm_vh_th_prui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_th_prui_12[30];
} nvi_gsm_vh_th_prui_12_type;

/* Type to hold gsm_vh_th_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_th_prui_13[30];
} nvi_gsm_vh_th_prui_13_type;

/* Type to hold gsm_vh_tl_brdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_tl_brdi_12[30];
} nvi_gsm_vh_tl_brdi_12_type;

/* Type to hold gsm_vh_tl_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_tl_brdi_13[30];
} nvi_gsm_vh_tl_brdi_13_type;

/* Type to hold gsm_vh_tl_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_tl_brdi_14[30];
} nvi_gsm_vh_tl_brdi_14_type;

/* Type to hold gsm_vh_tl_brui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_tl_brui_12[30];
} nvi_gsm_vh_tl_brui_12_type;

/* Type to hold gsm_vh_tl_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_tl_brui_13[30];
} nvi_gsm_vh_tl_brui_13_type;

/* Type to hold gsm_vh_tl_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_tl_brui_14[30];
} nvi_gsm_vh_tl_brui_14_type;

/* Type to hold gsm_vh_tl_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_tl_prdi_13[30];
} nvi_gsm_vh_tl_prdi_13_type;

/* Type to hold gsm_vh_tl_prui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_tl_prui_12[30];
} nvi_gsm_vh_tl_prui_12_type;

/* Type to hold gsm_vh_tl_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_tl_prui_14[30];
} nvi_gsm_vh_tl_prui_14_type;

/* Type to hold gsm_vh_tm_brdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_tm_brdi_12[30];
} nvi_gsm_vh_tm_brdi_12_type;

/* Type to hold gsm_vh_tm_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_tm_brdi_13[30];
} nvi_gsm_vh_tm_brdi_13_type;

/* Type to hold gsm_vh_tm_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_tm_brdi_14[30];
} nvi_gsm_vh_tm_brdi_14_type;

/* Type to hold gsm_vh_tm_brui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_tm_brui_12[30];
} nvi_gsm_vh_tm_brui_12_type;

/* Type to hold gsm_vh_tm_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_tm_brui_13[30];
} nvi_gsm_vh_tm_brui_13_type;

/* Type to hold gsm_vh_tm_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vh_tm_brui_14[30];
} nvi_gsm_vh_tm_brui_14_type;

/* Type to hold gsm_vh_tm_prdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_tm_prdi_12[30];
} nvi_gsm_vh_tm_prdi_12_type;

/* Type to hold gsm_vl_th_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_th_brdi_13[30];
} nvi_gsm_vl_th_brdi_13_type;

/* Type to hold gsm_vl_th_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_th_brdi_14[30];
} nvi_gsm_vl_th_brdi_14_type;

/* Type to hold gsm_vl_th_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_th_brui_13[30];
} nvi_gsm_vl_th_brui_13_type;

/* Type to hold gsm_vl_th_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_th_brui_14[30];
} nvi_gsm_vl_th_brui_14_type;

/* Type to hold gsm_vl_th_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_th_prdi_14[30];
} nvi_gsm_vl_th_prdi_14_type;

/* Type to hold gsm_vl_tl_brdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_tl_brdi_12[30];
} nvi_gsm_vl_tl_brdi_12_type;

/* Type to hold gsm_vl_tl_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_tl_brdi_13[30];
} nvi_gsm_vl_tl_brdi_13_type;

/* Type to hold gsm_vl_tl_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_tl_brdi_14[30];
} nvi_gsm_vl_tl_brdi_14_type;

/* Type to hold gsm_vl_tl_brui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_tl_brui_12[30];
} nvi_gsm_vl_tl_brui_12_type;

/* Type to hold gsm_vl_tl_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_tl_brui_13[30];
} nvi_gsm_vl_tl_brui_13_type;

/* Type to hold gsm_vl_tl_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_tl_brui_14[30];
} nvi_gsm_vl_tl_brui_14_type;

/* Type to hold gsm_vl_tl_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_tl_prdi_13[30];
} nvi_gsm_vl_tl_prdi_13_type;

/* Type to hold gsm_vl_tl_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_tl_prdi_14[30];
} nvi_gsm_vl_tl_prdi_14_type;

/* Type to hold gsm_vl_tl_prui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_tl_prui_12[30];
} nvi_gsm_vl_tl_prui_12_type;

/* Type to hold gsm_vl_tl_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_tl_prui_14[30];
} nvi_gsm_vl_tl_prui_14_type;

/* Type to hold gsm_vl_tm_brdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_tm_brdi_12[30];
} nvi_gsm_vl_tm_brdi_12_type;

/* Type to hold gsm_vl_tm_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_tm_brdi_14[30];
} nvi_gsm_vl_tm_brdi_14_type;

/* Type to hold gsm_vl_tm_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_tm_brui_14[30];
} nvi_gsm_vl_tm_brui_14_type;

/* Type to hold gsm_vl_tm_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_tm_prdi_13[30];
} nvi_gsm_vl_tm_prdi_13_type;

/* Type to hold gsm_vl_tm_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_tm_prui_14[30];
} nvi_gsm_vl_tm_prui_14_type;

/* Type to hold gsm_vm_th_brdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_th_brdi_12[30];
} nvi_gsm_vm_th_brdi_12_type;

/* Type to hold gsm_vm_th_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_th_brdi_13[30];
} nvi_gsm_vm_th_brdi_13_type;

/* Type to hold gsm_vm_th_brui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_th_brui_12[30];
} nvi_gsm_vm_th_brui_12_type;

/* Type to hold gsm_vm_th_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_th_brui_13[30];
} nvi_gsm_vm_th_brui_13_type;

/* Type to hold gsm_vm_th_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_th_prdi_14[30];
} nvi_gsm_vm_th_prdi_14_type;

/* Type to hold gsm_vm_th_prui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_th_prui_12[30];
} nvi_gsm_vm_th_prui_12_type;

/* Type to hold gsm_vm_th_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_th_prui_14[30];
} nvi_gsm_vm_th_prui_14_type;

/* Type to hold gsm_vm_tl_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_tl_brdi_14[30];
} nvi_gsm_vm_tl_brdi_14_type;

/* Type to hold gsm_vm_tl_brui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_tl_brui_12[30];
} nvi_gsm_vm_tl_brui_12_type;

/* Type to hold gsm_vm_tl_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_tl_brui_13[30];
} nvi_gsm_vm_tl_brui_13_type;

/* Type to hold gsm_vm_tl_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_tl_brui_14[30];
} nvi_gsm_vm_tl_brui_14_type;

/* Type to hold gsm_vm_tl_prdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_tl_prdi_12[30];
} nvi_gsm_vm_tl_prdi_12_type;

/* Type to hold gsm_vm_tl_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_tl_prdi_13[30];
} nvi_gsm_vm_tl_prdi_13_type;

/* Type to hold gsm_vm_tl_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_tl_prdi_14[30];
} nvi_gsm_vm_tl_prdi_14_type;

/* Type to hold gsm_vm_tl_prui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_tl_prui_12[30];
} nvi_gsm_vm_tl_prui_12_type;

/* Type to hold gsm_vm_tl_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_tl_prui_13[30];
} nvi_gsm_vm_tl_prui_13_type;

/* Type to hold gsm_vm_tl_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_tl_prui_14[30];
} nvi_gsm_vm_tl_prui_14_type;

/* Type to hold gsm_vm_tm_brdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_tm_brdi_12[30];
} nvi_gsm_vm_tm_brdi_12_type;

/* Type to hold gsm_vm_tm_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_tm_brdi_13[30];
} nvi_gsm_vm_tm_brdi_13_type;

/* Type to hold gsm_vm_tm_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_tm_brdi_14[30];
} nvi_gsm_vm_tm_brdi_14_type;

/* Type to hold gsm_vm_tm_brui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_tm_brui_12[30];
} nvi_gsm_vm_tm_brui_12_type;

/* Type to hold gsm_vm_tm_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_tm_brui_13[30];
} nvi_gsm_vm_tm_brui_13_type;

/* Type to hold gsm_vm_tm_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_tm_brui_14[30];
} nvi_gsm_vm_tm_brui_14_type;

/* Type to hold gsm_vm_tm_prdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_tm_prdi_12[30];
} nvi_gsm_vm_tm_prdi_12_type;

/* Type to hold gsm_vm_tm_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_tm_prdi_13[30];
} nvi_gsm_vm_tm_prdi_13_type;

/* Type to hold gsm_vm_tm_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_tm_prdi_14[30];
} nvi_gsm_vm_tm_prdi_14_type;

/* Type to hold gsm_vm_tm_prui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_tm_prui_12[30];
} nvi_gsm_vm_tm_prui_12_type;

/* Type to hold gsm_vm_tm_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_tm_prui_14[30];
} nvi_gsm_vm_tm_prui_14_type;

/* Type to hold gsmumts_imsi  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             gsmumts_imsi[8];
} nvi_gsmumts_imsi_type;


typedef PACKED struct PACKED_POST{ 
  /* length of NAI */
  byte                                             nai_len;
  /* the NAI */
  byte                                             nai[NV_MAX_AN_AUTH_NAI_LENGTH];
} nvi_hdr_an_auth_nai_type;


typedef PACKED struct PACKED_POST{ 
  /* length of password */
  byte                                             passwd_len;
  /* the password */
  byte                                             passwd[NV_MAX_AN_AUTH_PASSWD_LONG_LENGTH];
} nvi_hdr_an_auth_passwd_long_type;


typedef PACKED struct PACKED_POST{ 
  /* length of password */
  byte                                             password_len;
  /* the password */
  byte                                             password[NV_MAX_AN_AUTH_PASSWORD_LENGTH];
} nvi_hdr_an_auth_password_type;


typedef PACKED struct PACKED_POST{ 
  /* length of user id */
  byte                                             user_id_len;
  /* the user id */
  byte                                             user_id[NV_MAX_AN_AUTH_USER_ID_LONG_LENGTH];
} nvi_hdr_an_auth_user_id_long_type;


typedef PACKED struct PACKED_POST{ 
  /* length of NAI */
  byte                                             user_id_len;
  /* the NAI */
  byte                                             user_id[NV_MAX_AN_PPP_USER_ID_LENGTH];
} nvi_hdr_an_ppp_nai_type;


typedef PACKED struct PACKED_POST{ 
  /* length of password */
  byte                                             password_len;
  /* the password */
  byte                                             password[NV_MAX_AN_PPP_PASSWORD_LENGTH];
} nvi_hdr_an_ppp_password_type;


typedef PACKED struct PACKED_POST{ 
  
  nv_hdr_band_channel_type                         hdr_band_channel[NV_IS683A_MAX_HDR_BAND_CHAN];
} nvi_hdr_is683a_scan_list_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           pilot_inc;
  
  uint8                                            pilot_add;
  
  uint8                                            pilot_drop;
  
  int8                                             pilot_compare;
  
  uint8                                            pilot_drop_timer;
  /* HAI x6 Only */
  boolean                                          dynamic_threshold;
  /* HAI x6 Only */
  uint8                                            soft_slope;
  /* HAI x6 Only */
  int8                                             add_intercept;
  /* HAI x6 Only */
  int8                                             drop_intercept;
  
  uint8                                            aset_win_size;
  
  uint8                                            nset_win_size;
  
  uint8                                            rset_win_size;
  
  uint8                                            nset_max_age;
} nvi_hdr_srch_params_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            capsule_length_max;
  
  uint8                                            power_step;
  
  uint8                                            probe_sequence_max;
  
  uint8                                            probe_backoff;
  
  uint8                                            probe_sequence_backoff;
} nvi_hdramac_initial_config_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            data_offset_nom;
  
  uint8                                            data_offset_9k6;
} nvi_hdramac_power_params_type;


typedef PACKED struct PACKED_POST{ 
  
  uint32                                           session_seed;
  
  uint32                                           transmit_ati;
  
  uint32                                           receive_mati;
  
  uint32                                           receive_rati;
  
  uint32                                           receive_current_uati;
  
  uint32                                           receive_new_uati;
  
  boolean                                          new_uati_valid;
  
  uint8                                            uati[NV_UATI_LENGTH];
  
  uint8                                            uati_color_code;
  
  uint8                                            uati_subnet_mask;
} nvi_hdramp_address_data_type;


typedef PACKED struct PACKED_POST{ 
  
  int32                                            latitude;
  
  int32                                            longitude;
} nvi_hdramp_location_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ac_auth_key_len;
} nvi_hdrauth_config_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            drc_lock_length;
  
  uint8                                            drc_lock_period;
} nvi_hdrfmac_drc_lock_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            softer_handoff_delay;
  
  uint8                                            soft_handoff_delay;
} nvi_hdrfmac_handoff_delays_type;


typedef PACKED struct PACKED_POST{ 
  
  boolean                                          enabled;
  
  uint8                                            slot_cycle1;
  
  uint8                                            slot_cycle2;
  
  uint8                                            slot_cycle3;
  
  uint8                                            wake_count1;
  
  uint8                                            wake_count2;
} nvi_hdridle_desired_slotted_mode_config;


typedef PACKED struct PACKED_POST{ 
  /* Configuration attributes for Enhanced Idle State Protocol */
  uint8                                            small_slot_cycle_allowed;
  /* PreferredControlChannelCycleEnabled */
  uint8                                            pccc_enabled;
  /* PreferredControlChannelCycle */
  uint16                                           pccc;
  /* SlotCycle1 */
  uint8                                            slot_cycle1;
  /* Configuration attributes for Enhanced Idle State Protocol */
  uint8                                            slot_cycle2;
  /* PreferredControlChannelCycle */
  uint8                                            slot_cycle3;
  /* PreferredControlChannelCycleEnabled */
  uint8                                            wake_count1;
  /* PreferredControlChannelCycleEnabled */
  uint8                                            wake_count2;
  /* AccessHashingClassMask */
  uint16                                           access_hashing_class_mask;
} nvi_hdridle_enhanced_config_type;


typedef PACKED struct PACKED_POST{ 
  /* SlotCycle1 */
  uint64                                           slot_cycle1_timeout;
  /* System time to switch from slot_cycle2 to slot_cycle3 */
  uint64                                           slot_cycle2_timeout;
} nvi_hdridle_slot_cycle_timeouts_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           key_len;
  
  boolean                                          keys_are_valid;
  /* w */
  uint8                                            rpc_auth_key[NV_RPC_AUTH_KEY_MAX_LEN];
} nvi_hdrkep_config_type;


typedef PACKED struct PACKED_POST{ 
  /* The debug mask used for the HDR searcher */
  uint64                                           hdrsrch_dbg_msk;
  /* The debug mask used for HDR MAC */
  uint64                                           hdrmac_dbg_msk;
} nvi_hdrl1_dbg_msk_type;


typedef PACKED struct PACKED_POST{ 
  
  nv_hdrrmac_rate_params2_type                     rate_parameters[2];
  
  nv_hdrrmac_power_params2_type                    power_parameters;
} nvi_hdrrmac_config_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            data_offset_nom;
  
  uint8                                            data_offset_9k6;
  
  uint8                                            data_offset_19k2;
  
  uint8                                            data_offset_38k4;
  
  uint8                                            data_offset_76k8;
  
  uint8                                            data_offset_153k6;
  
  uint8                                            rpc_step;
} nvi_hdrrmac_power_params_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            transition_009k6_019k2;
  
  uint8                                            transition_019k2_038k4;
  
  uint8                                            transition_038k4_076k8;
  
  uint8                                            transition_076k8_153k6;
  
  uint8                                            transition_019k2_009k6;
  
  uint8                                            transition_038k4_019k2;
  
  uint8                                            transition_076k8_038k4;
  
  uint8                                            transition_153k6_076k8;
} nvi_hdrrmac_rate_params_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           pilot_inc;
  
  uint8                                            aset_win_size;
  
  uint8                                            nset_win_size;
  
  uint8                                            rset_win_size;
} nvi_hdrrup_srch_params_type;


typedef PACKED struct PACKED_POST{ 
  /* 0 - use custom config below, 1 - propose/accept all supported subtypes. */
  boolean                                          custom_config_is_active;
  /* HDR Protocol Subtypes Enable Bitmask */
  uint32                                           prot_subtype_mask;
  /* HDR Broadcast Subtypes Enable Bitmask */
  uint32                                           bcmcs_subtype_mask;
  /* Stream Applications Subtypes Enable Bitmask */
  uint32                                           app_subtype_mask;
} nvi_hdrscp_custom_config_type;

/* Type to hold hdrscp_protocol_subtype  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           hdrscp_protocol_subtype[NV_HDRSCP_PRTL_SUBTYPE_SIZ];
} nvi_hdrscp_protocol_subtype_type;

/* Type to hold hdrstream_curr_stream_cfg  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           hdrstream_curr_stream_cfg[NV_HDR_CURR_STREAM_CFG_SIZ];
} nvi_hdrstream_curr_stream_cfg_type;


typedef PACKED struct PACKED_POST{ 
  /* SID+NID pair */
  nv_sid_nid_pair_type                             pair[NV_MAX_HOME_SID_NID];
} nvi_home_sid_nid_type;


typedef PACKED struct PACKED_POST{ 
  /* IP Address and Port of HTTP Proxy Server */
  word                                             flags;
  /* port */
  uint16                                           port;
  
  nv_http_proxy_server_addr                        addr;
} nvi_http_proxy_server_addr_type;


typedef PACKED struct PACKED_POST{ 
  /* resolution */
  uint8                                            res;
  /* fs_i */
  uint8                                            fs_i;
  /* fs_q */
  uint8                                            fs_q;
  /* ms_i */
  uint8                                            ms_i;
  /* ms_q */
  uint8                                            ms_q;
  /* ss_i */
  uint8                                            ss_i;
  /* ss_q */
  uint8                                            ss_q;
} nvi_im2_cal_type;

/* Type to hold im_optional_header  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           im_optional_header[NV_IM_OPTIONAL_HEADER_SIZ];
} nvi_im_optional_header_type;

/* Type to hold im_password  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           im_password[NV_IM_MAX_PASSWORD_SIZ];
} nvi_im_password_type;

/* Type to hold im_primary_ip_addr  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           im_primary_ip_addr[NV_IM_IP_ADDR_SIZ];
} nvi_im_primary_ip_addr_type;

/* Type to hold im_server_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           im_server_name[MV_IM_SERVER_NAME_SIZ];
} nvi_im_server_name_type;

/* Type to hold im_start_string  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           im_start_string[NV_IM_MAX_START_STR_SIZ];
} nvi_im_start_string_type;

/* Type to hold im_supported_bearers  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           im_supported_bearers[NV_MAX_SUPPORTED_BEARERS];
} nvi_im_supported_bearers_type;

/* Type to hold im_supported_cir_methods  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           im_supported_cir_methods[NV_MAX_CIR_METHODS];
} nvi_im_supported_cir_methods_type;

/* Type to hold im_userid  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           im_userid[NV_IM_MAX_USERID_SIZE];
} nvi_im_userid_type;


typedef PACKED struct PACKED_POST{ 
  /* imsi_11_12 */
  byte                                             imsi_11_12;
} nvi_imsi_11_12_type;


typedef PACKED struct PACKED_POST{ 
  /* Length of the IMSI for this NAM */
  byte                                             num;
} nvi_imsi_addr_num_type;


typedef PACKED struct PACKED_POST{ 
  /* imsi_mcc */
  word                                             imsi_mcc;
} nvi_imsi_mcc_type;

/* Type to hold input_language_options  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold input_language_options  */
  nv_input_language_options_type                   input_language_options[NV_LANGUAGE_COUNT];
} nvi_input_language_options_type;


typedef PACKED struct PACKED_POST{ 
  /* 3G Message Integrity Key */
  uint8                                            key[NV_3G_KEY_SIZE];
} nvi_int_key_type;


typedef PACKED struct PACKED_POST{ 
  
  int16                                            init_sol_delay;
  
  int16                                            sol_interval;
  
  int16                                            resol_interval;
  
  int16                                            max_sol_attempts;
  
  int16                                            max_resol_attempts;
  
  int16                                            pre_ra_exp_resol_time;
} nvi_ip6_sm_config_type;


typedef PACKED struct PACKED_POST{ 
  
  uint64                                           prefix;
  
  uint64                                           iid;
} nvi_ipv6_address_type;


typedef PACKED struct PACKED_POST{ 
  /* IPv6 Privacy Extensions Configuration */
  uint32                                           ipv6_priv_preferred_lifetime;
  /* IPv6 Privacy Extensions Valid Lifetime */
  uint32                                           ipv6_priv_valid_lifetime;
} nvi_ipv6_priv_addr_config;

/* Type to hold irda_pnp_device_category  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            irda_pnp_device_category[NV_IRDA_PNP_DEVICE_CATEGORY_SIZ];
} nvi_irda_pnp_device_category_type;

/* Type to hold irda_pnp_device_id  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            irda_pnp_device_id[NV_IRDA_PNP_DEVICE_ID_SIZ];
} nvi_irda_pnp_device_id_type;

/* Type to hold irda_pnp_manufacturer  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            irda_pnp_manufacturer[NV_IRDA_PNP_MANUFACTURER_SIZ];
} nvi_irda_pnp_manufacturer_type;


typedef PACKED struct PACKED_POST{ 
  /* The length of Operator ID. */
  uint8                                            length;
  /* Operator ID String */
  uint8                                            value[NV_IWLAN_MAX_OPERATOR_ID];
} nvi_iwlan_operator_id_type;


typedef PACKED struct PACKED_POST{ 
  /* The FQDN of the PDIF */
  uint8                                            length;
  /* The FQDN String */
  uint8                                            value[NV_IWLAN_MAX_DOMAIN_NAME_SIZE];
} nvi_iwlan_pdif_fqdn_type;


typedef PACKED struct PACKED_POST{ 
  /* Carrier provided realm string that is used to create NAI. */
  uint8                                            length;
  /* Realm String */
  uint8                                            value[NV_IWLAN_MAX_REALM_LENGTH];
} nvi_iwlan_realm_type;


typedef PACKED struct PACKED_POST{ 
  
  uint32                                           ruim_id;
  
  uint16                                           imsi_mcc1;
  
  uint16                                           imsi_mcc2;
  
  uint8                                            sp_id;
  
  uint8                                            ug_id;
  
  boolean                                          indicator[NUM_OF_LOCKS];
} nvi_jcdma_uim_lock_data;


typedef PACKED struct PACKED_POST{ 
  /* K Key - 128 bits */
  uint8                                            key[NV_3G_KEY_SIZE];
} nvi_k_key_type;


typedef PACKED struct PACKED_POST{ 
  /* Last 3G Key ID */
  uint8                                            key_id;
} nvi_key_id_type;


typedef PACKED struct PACKED_POST{ 
  /* low chan */
  uint16                                           kv_cal_low_chan;
  /* high chan */
  uint16                                           kv_cal_high_chan;
} nvi_kv_cal_chan_type;

/* Type to hold lc_servicename  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lc_servicename[NV_LC_SERVICENAME_SIZ];
} nvi_lc_servicename_type;


typedef PACKED struct PACKED_POST{ 
  /* Set when lock order received and until unlocked */
  boolean                                          lock_order;
  /* Lock reason received in the order */
  byte                                             lock_reason;
} nvi_lckrsn_type;


typedef PACKED struct PACKED_POST{ 
  /* FS Code */
  uint16                                           fs;
  /* MS Code */
  uint16                                           ms;
} nvi_lo_cal_type;

/* Type to hold lock_code_ext_digits  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lock_code_ext_digits[8];
} nvi_lock_code_ext_digits_type;


typedef PACKED struct PACKED_POST{ 
  /* Information about lock code and unblock code */
  uint8                                            numLockRetries;
  
  nv_unblock_code_type                             nv_unblock_code;
} nvi_lock_code_ext_type;


typedef PACKED struct PACKED_POST{ 
  /* Lock code array */
  byte                                             digits[NV_LOCK_CODE_SIZE];
} nvi_lock_code_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           rise_delay;
  
  uint16                                           fall_delay;
} nvi_lte_agc_pa_on_rise_fall_delay_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           rise_delay;
  
  uint16                                           fall_delay;
} nvi_lte_agc_tx_on_rise_fall_delay_type;

/* Type to hold lte_b13_antsel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b13_antsel[4];
} nvi_lte_b13_antsel_type;

/* Type to hold lte_b13_c1_antsel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b13_c1_antsel[4];
} nvi_lte_b13_c1_antsel_type;

/* Type to hold lte_b13_c1_im_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b13_c1_im_level[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b13_c1_im_level_type;

/* Type to hold lte_b13_c1_lna_phase_ctrl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_c1_lna_phase_ctrl[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b13_c1_lna_phase_ctrl_type;

/* Type to hold lte_b13_c1_lna_range_rise_fall  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b13_c1_lna_range_rise_fall  */
  nv_lte_c1_lna_range_rise_fall_type               lte_b13_c1_lna_range_rise_fall[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b13_c1_lna_range_rise_fall_type;

/* Type to hold lte_b13_c1_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_c1_rx_cal_chan[LTE_RX_CAL_CHAN_SIZE];
} nvi_lte_b13_c1_rx_cal_chan_type;

/* Type to hold lte_b13_c1_rx_gain  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_c1_rx_gain[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b13_c1_rx_gain_type;

/* Type to hold lte_b13_c1_rx_gain_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b13_c1_rx_gain_vs_freq[LTE_USABLE_GAIN_STATES][LTE_RX_FREQ_COMP_SIZ];
} nvi_lte_b13_c1_rx_gain_vs_freq_type;

/* Type to hold lte_b13_c1_rx_gain_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b13_c1_rx_gain_vs_temp[LTE_LNA_RISE_FALL_SIZ][RX_TEMP_BIN_SIZ];
} nvi_lte_b13_c1_rx_gain_vs_temp_type;

/* Type to hold lte_b13_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b13_drx_mode_sel[3];
} nvi_lte_b13_drx_mode_sel_type;

/* Type to hold lte_b13_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_exp_hdet_vs_agc[LTE_HDET_VS_AGC_SIZ];
} nvi_lte_b13_exp_hdet_vs_agc_type;

/* Type to hold lte_b13_exp_lpm_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_exp_lpm_hdet_vs_agc[LTE_HDET_VS_AGC_SIZ];
} nvi_lte_b13_exp_lpm_hdet_vs_agc_type;

/* Type to hold lte_b13_im_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b13_im_level[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b13_im_level_type;

/* Type to hold lte_b13_lna_phase_ctrl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_lna_phase_ctrl[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b13_lna_phase_ctrl_type;

/* Type to hold lte_b13_lna_range_rise_fall  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b13_lna_range_rise_fall  */
  nv_lte_lna_range_rise_fall_type                  lte_b13_lna_range_rise_fall[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b13_lna_range_rise_fall_type;

/* Type to hold lte_b13_mpr_based_pa_switchpoints_shift  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_mpr_based_pa_switchpoints_shift[LTE_MPR_SIZ];
} nvi_lte_b13_mpr_based_pa_switchpoints_shift_type;

/* Type to hold lte_b13_pa_compensate_up_down  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b13_pa_compensate_up_down  */
  nv_lte_pa_compensate_up_down_type                lte_b13_pa_compensate_up_down[TX_PA_STATE_SIZ];
} nvi_lte_b13_pa_compensate_up_down_type;

/* Type to hold lte_b13_pa_range_map  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b13_pa_range_map[TX_PA_STATE_SIZ];
} nvi_lte_b13_pa_range_map_type;

/* Type to hold lte_b13_pa_rise_fall_threshold  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b13_pa_rise_fall_threshold  */
  nv_lte_pa_rise_fall_threshold_type               lte_b13_pa_rise_fall_threshold[TX_PA_STATE_SIZ];
} nvi_lte_b13_pa_rise_fall_threshold_type;

/* Type to hold lte_b13_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_rx_cal_chan[LTE_RX_CAL_CHAN_SIZE];
} nvi_lte_b13_rx_cal_chan_type;

/* Type to hold lte_b13_rx_gain  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_rx_gain[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b13_rx_gain_type;

/* Type to hold lte_b13_rx_gain_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b13_rx_gain_vs_temp[LTE_LNA_RISE_FALL_SIZ][RX_TEMP_BIN_SIZ];
} nvi_lte_b13_rx_gain_vs_temp_type;

/* Type to hold lte_b13_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_tx_cal_chan[LTE_TX_CAL_CHAN_SIZ];
} nvi_lte_b13_tx_cal_chan_type;

/* Type to hold lte_b13_tx_comp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b13_tx_comp_vs_freq[TX_PA_STATE_SIZ][LTE_TX_FREQ_COMP_SIZ];
} nvi_lte_b13_tx_comp_vs_freq_type;

/* Type to hold lte_b13_tx_gain_index_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_tx_gain_index_0[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b13_tx_gain_index_0_type;

/* Type to hold lte_b13_tx_gain_index_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_tx_gain_index_3[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b13_tx_gain_index_3_type;

/* Type to hold lte_b13_tx_limit_vs_freq_lpm  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b13_tx_limit_vs_freq_lpm[LTE_TX_FREQ_COMP_SIZ];
} nvi_lte_b13_tx_limit_vs_freq_lpm_type;

/* Type to hold lte_b13_tx_limit_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b13_tx_limit_vs_freq[LTE_TX_FREQ_COMP_SIZ];
} nvi_lte_b13_tx_limit_vs_freq_type;

/* Type to hold lte_b13_tx_limit_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b13_tx_limit_vs_temp[LTE_TX_TEMP_COMP_SIZ];
} nvi_lte_b13_tx_limit_vs_temp_type;

/* Type to hold lte_b13_tx_lin_master_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_tx_lin_master_1[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b13_tx_lin_master_1_type;

/* Type to hold lte_b13_tx_lin_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b13_tx_lin_vs_temp[TX_PA_STATE_SIZ][LTE_TX_TEMP_COMP_SIZ];
} nvi_lte_b13_tx_lin_vs_temp_type;

/* Type to hold lte_b13_tx_rot_angle_pa_state  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_tx_rot_angle_pa_state[TX_ROT_ANGLE_SIZE];
} nvi_lte_b13_tx_rot_angle_pa_state_type;

/* Type to hold lte_b17_antsel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b17_antsel[4];
} nvi_lte_b17_antsel_type;

/* Type to hold lte_b17_c1_antsel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b17_c1_antsel[4];
} nvi_lte_b17_c1_antsel_type;

/* Type to hold lte_b17_c1_im_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b17_c1_im_level[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b17_c1_im_level_type;

/* Type to hold lte_b17_c1_lna_phase_ctrl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_c1_lna_phase_ctrl[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b17_c1_lna_phase_ctrl_type;

/* Type to hold lte_b17_c1_lna_range_rise_fall  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b17_c1_lna_range_rise_fall  */
  nv_lte_lna_range_rise_fall_type                  lte_b17_c1_lna_range_rise_fall[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b17_c1_lna_range_rise_fall_type;

/* Type to hold lte_b17_c1_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_c1_rx_cal_chan[LTE_RX_CAL_CHAN_SIZE];
} nvi_lte_b17_c1_rx_cal_chan_type;

/* Type to hold lte_b17_c1_rx_gain  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_c1_rx_gain[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b17_c1_rx_gain_type;

/* Type to hold lte_b17_c1_rx_gain_vs_freq_i  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b17_c1_rx_gain_vs_freq_i[LTE_USABLE_GAIN_STATES][LTE_RX_FREQ_COMP_SIZ];
} nvi_lte_b17_c1_rx_gain_vs_freq_i_type;

/* Type to hold lte_b17_c1_rx_gain_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b17_c1_rx_gain_vs_freq[TX_PA_STATE_SIZ][LTE_USABLE_GAIN_STATES];
} nvi_lte_b17_c1_rx_gain_vs_freq_type;

/* Type to hold lte_b17_c1_rx_gain_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b17_c1_rx_gain_vs_temp[LTE_LNA_RISE_FALL_SIZ][RX_TEMP_BIN_SIZ];
} nvi_lte_b17_c1_rx_gain_vs_temp_type;

/* Type to hold lte_b17_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b17_drx_mode_sel[3];
} nvi_lte_b17_drx_mode_sel_type;

/* Type to hold lte_b17_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_exp_hdet_vs_agc[LTE_HDET_VS_AGC_SIZ];
} nvi_lte_b17_exp_hdet_vs_agc_type;

/* Type to hold lte_b17_lna_phase_ctrl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_lna_phase_ctrl[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b17_lna_phase_ctrl_type;

/* Type to hold lte_b17_lna_range_rise_fall  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b17_lna_range_rise_fall  */
  nv_lte_lna_range_rise_fall_type                  lte_b17_lna_range_rise_fall[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b17_lna_range_rise_fall_type;

/* Type to hold lte_b17_mpr_based_pa_switchpoints_shift  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_mpr_based_pa_switchpoints_shift[LTE_MPR_SIZ];
} nvi_lte_b17_mpr_based_pa_switchpoints_shift_type;

/* Type to hold lte_b17_pa_range_map  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b17_pa_range_map[4];
} nvi_lte_b17_pa_range_map_type;

/* Type to hold lte_b17_pa_rise_fall_threshold  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b17_pa_rise_fall_threshold  */
  nv_lte_pa_rise_fall_threshold_type               lte_b17_pa_rise_fall_threshold[TX_PA_STATE_SIZ];
} nvi_lte_b17_pa_rise_fall_threshold_type;

/* Type to hold lte_b17_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_rx_cal_chan[LTE_RX_CAL_CHAN_SIZE];
} nvi_lte_b17_rx_cal_chan_type;

/* Type to hold lte_b17_rx_gain  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b17_rx_gain[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b17_rx_gain_type;

/* Type to hold lte_b17_rx_gain_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b17_rx_gain_vs_freq[LTE_USABLE_GAIN_STATES][LTE_RX_FREQ_COMP_SIZ];
} nvi_lte_b17_rx_gain_vs_freq_type;

/* Type to hold lte_b17_rx_gain_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b17_rx_gain_vs_temp[LTE_LNA_RISE_FALL_SIZ][RX_TEMP_BIN_SIZ];
} nvi_lte_b17_rx_gain_vs_temp_type;

/* Type to hold lte_b17_tx_agc_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b17_tx_agc_offset[LTE_MPR_SIZ];
} nvi_lte_b17_tx_agc_offset_type;

/* Type to hold lte_b17_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_tx_cal_chan[LTE_TX_CAL_CHAN_SIZ];
} nvi_lte_b17_tx_cal_chan_type;

/* Type to hold lte_b17_tx_comp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b17_tx_comp_vs_freq[TX_PA_STATE_SIZ][LTE_TX_FREQ_COMP_SIZ];
} nvi_lte_b17_tx_comp_vs_freq_type;

/* Type to hold lte_b17_tx_gain_index_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_tx_gain_index_1[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b17_tx_gain_index_1_type;

/* Type to hold lte_b17_tx_gain_index_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_tx_gain_index_2[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b17_tx_gain_index_2_type;

/* Type to hold lte_b17_tx_gain_index_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_tx_gain_index_3[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b17_tx_gain_index_3_type;

/* Type to hold lte_b17_tx_limit_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b17_tx_limit_vs_freq[LTE_TX_FREQ_COMP_SIZ];
} nvi_lte_b17_tx_limit_vs_freq_type;

/* Type to hold lte_b17_tx_limit_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b17_tx_limit_vs_temp[LTE_TX_TEMP_COMP_SIZ];
} nvi_lte_b17_tx_limit_vs_temp_type;

/* Type to hold lte_b17_tx_lin_master_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_tx_lin_master_0[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b17_tx_lin_master_0_type;

/* Type to hold lte_b17_tx_lin_master_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_tx_lin_master_1[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b17_tx_lin_master_1_type;

/* Type to hold lte_b17_tx_lin_master_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_tx_lin_master_3[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b17_tx_lin_master_3_type;

/* Type to hold lte_b17_tx_lin_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b17_tx_lin_vs_temp[TX_PA_STATE_SIZ][LTE_TX_TEMP_COMP_SIZ];
} nvi_lte_b17_tx_lin_vs_temp_type;

/* Type to hold lte_b17_tx_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_tx_mpr_backoff[LTE_MPR_SIZ];
} nvi_lte_b17_tx_mpr_backoff_type;

/* Type to hold lte_b17_tx_rot_angle_pa_state  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_tx_rot_angle_pa_state[TX_PA_STATE_SIZ];
} nvi_lte_b17_tx_rot_angle_pa_state_type;

/* Type to hold lte_b1_antsel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b1_antsel[4];
} nvi_lte_b1_antsel_type;

/* Type to hold lte_b1_c1_antsel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b1_c1_antsel[4];
} nvi_lte_b1_c1_antsel_type;

/* Type to hold lte_b1_c1_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_c1_rx_cal_chan[LTE_RX_CAL_CHAN_SIZE];
} nvi_lte_b1_c1_rx_cal_chan_type;

/* Type to hold lte_b1_c1_rx_gain_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b1_c1_rx_gain_vs_temp[LTE_LNA_RISE_FALL_SIZ][RX_TEMP_BIN_SIZ];
} nvi_lte_b1_c1_rx_gain_vs_temp_type;

/* Type to hold lte_b1_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b1_drx_mode_sel[3];
} nvi_lte_b1_drx_mode_sel_type;

/* Type to hold lte_b1_exp_lpm_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_exp_lpm_hdet_vs_agc[LTE_HDET_VS_AGC_SIZ];
} nvi_lte_b1_exp_lpm_hdet_vs_agc_type;

/* Type to hold lte_b1_im_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b1_im_level[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b1_im_level_type;

/* Type to hold lte_b1_pa_compensate_up_down  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b1_pa_compensate_up_down  */
  nv_lte_pa_compensate_up_down_type                lte_b1_pa_compensate_up_down[TX_PA_STATE_SIZ];
} nvi_lte_b1_pa_compensate_up_down_type;

/* Type to hold lte_b1_pa_range_map  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b1_pa_range_map[4];
} nvi_lte_b1_pa_range_map_type;

/* Type to hold lte_b1_pa_rise_fall_threshold  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b1_pa_rise_fall_threshold  */
  nv_lte_pa_rise_fall_threshold_type               lte_b1_pa_rise_fall_threshold[TX_PA_STATE_SIZ];
} nvi_lte_b1_pa_rise_fall_threshold_type;

/* Type to hold lte_b1_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_rx_cal_chan[LTE_RX_CAL_CHAN_SIZE];
} nvi_lte_b1_rx_cal_chan_type;

/* Type to hold lte_b1_rx_gain_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b1_rx_gain_vs_freq[LTE_USABLE_GAIN_STATES][LTE_RX_FREQ_COMP_SIZ];
} nvi_lte_b1_rx_gain_vs_freq_type;

/* Type to hold lte_b1_rx_gain_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b1_rx_gain_vs_temp[LTE_LNA_RISE_FALL_SIZ][RX_TEMP_BIN_SIZ];
} nvi_lte_b1_rx_gain_vs_temp_type;

/* Type to hold lte_b1_tx_agc_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b1_tx_agc_offset[LTE_MPR_SIZ];
} nvi_lte_b1_tx_agc_offset_type;

/* Type to hold lte_b1_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_tx_cal_chan[LTE_TX_CAL_CHAN_SIZ];
} nvi_lte_b1_tx_cal_chan_type;

/* Type to hold lte_b1_tx_comp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b1_tx_comp_vs_freq[TX_PA_STATE_SIZ][LTE_TX_FREQ_COMP_SIZ];
} nvi_lte_b1_tx_comp_vs_freq_type;

/* Type to hold lte_b1_tx_digital_gain_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b1_tx_digital_gain_comp[LTE_MPR_SIZ];
} nvi_lte_b1_tx_digital_gain_comp_type;

/* Type to hold lte_b1_tx_gain_index_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_tx_gain_index_3[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b1_tx_gain_index_3_type;

/* Type to hold lte_b1_tx_limit_vs_freq_lpm  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b1_tx_limit_vs_freq_lpm[LTE_TX_FREQ_COMP_SIZ];
} nvi_lte_b1_tx_limit_vs_freq_lpm_type;

/* Type to hold lte_b1_tx_limit_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b1_tx_limit_vs_temp[LTE_TX_TEMP_COMP_SIZ];
} nvi_lte_b1_tx_limit_vs_temp_type;

/* Type to hold lte_b1_tx_lin_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b1_tx_lin_vs_temp[TX_PA_STATE_SIZ][LTE_TX_TEMP_COMP_SIZ];
} nvi_lte_b1_tx_lin_vs_temp_type;

/* Type to hold lte_b1_tx_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_tx_mpr_backoff[LTE_MPR_SIZ];
} nvi_lte_b1_tx_mpr_backoff_type;

/* Type to hold lte_b40_c1_antsel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b40_c1_antsel[4];
} nvi_lte_b40_c1_antsel_type;

/* Type to hold lte_b40_c1_im_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b40_c1_im_level[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b40_c1_im_level_type;

/* Type to hold lte_b40_c1_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_c1_rx_cal_chan[LTE_RX_CAL_CHAN_SIZE];
} nvi_lte_b40_c1_rx_cal_chan_type;

/* Type to hold lte_b40_c1_rx_gain  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_c1_rx_gain[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b40_c1_rx_gain_type;

/* Type to hold lte_b40_c1_rx_gain_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b40_c1_rx_gain_vs_temp[LTE_LNA_RISE_FALL_SIZ][RX_TEMP_BIN_SIZ];
} nvi_lte_b40_c1_rx_gain_vs_temp_type;

/* Type to hold lte_b40_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b40_drx_mode_sel[3];
} nvi_lte_b40_drx_mode_sel_type;

/* Type to hold lte_b40_lna_phase_ctrl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_lna_phase_ctrl[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b40_lna_phase_ctrl_type;

/* Type to hold lte_b40_lna_range_rise_fall  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b40_lna_range_rise_fall  */
  nv_lte_lna_range_rise_fall_type                  lte_b40_lna_range_rise_fall[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b40_lna_range_rise_fall_type;

/* Type to hold lte_b40_mpr_based_pa_switchpoints_shift  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_mpr_based_pa_switchpoints_shift[LTE_MPR_SIZ];
} nvi_lte_b40_mpr_based_pa_switchpoints_shift_type;

/* Type to hold lte_b40_pa_compensate_up_down  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b40_pa_compensate_up_down  */
  nv_lte_pa_compensate_up_down_type                lte_b40_pa_compensate_up_down[TX_PA_STATE_SIZ];
} nvi_lte_b40_pa_compensate_up_down_type;

/* Type to hold lte_b40_pa_range_map  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b40_pa_range_map[4];
} nvi_lte_b40_pa_range_map_type;

/* Type to hold lte_b40_pa_rise_fall_threshold  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b40_pa_rise_fall_threshold  */
  nv_lte_pa_rise_fall_threshold_type               lte_b40_pa_rise_fall_threshold[TX_PA_STATE_SIZ];
} nvi_lte_b40_pa_rise_fall_threshold_type;

/* Type to hold lte_b40_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_rx_cal_chan[LTE_RX_CAL_CHAN_SIZE];
} nvi_lte_b40_rx_cal_chan_type;

/* Type to hold lte_b40_rx_gain  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_rx_gain[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b40_rx_gain_type;

/* Type to hold lte_b40_rx_gain_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b40_rx_gain_vs_temp[LTE_LNA_RISE_FALL_SIZ][RX_TEMP_BIN_SIZ];
} nvi_lte_b40_rx_gain_vs_temp_type;

/* Type to hold lte_b40_tx_agc_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b40_tx_agc_offset[LTE_MPR_SIZ];
} nvi_lte_b40_tx_agc_offset_type;

/* Type to hold lte_b40_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_tx_cal_chan[LTE_TX_CAL_CHAN_SIZ];
} nvi_lte_b40_tx_cal_chan_type;

/* Type to hold lte_b40_tx_gain_index_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_tx_gain_index_1[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b40_tx_gain_index_1_type;

/* Type to hold lte_b40_tx_limit_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b40_tx_limit_vs_freq[LTE_TX_FREQ_COMP_SIZ];
} nvi_lte_b40_tx_limit_vs_freq_type;

/* Type to hold lte_b40_tx_limit_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b40_tx_limit_vs_temp[LTE_TX_TEMP_COMP_SIZ];
} nvi_lte_b40_tx_limit_vs_temp_type;

/* Type to hold lte_b40_tx_lin_master_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_tx_lin_master_1[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b40_tx_lin_master_1_type;

/* Type to hold lte_b40_tx_lin_master_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_tx_lin_master_2[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b40_tx_lin_master_2_type;

/* Type to hold lte_b40_tx_lin_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b40_tx_lin_vs_temp[TX_PA_STATE_SIZ][LTE_TX_TEMP_COMP_SIZ];
} nvi_lte_b40_tx_lin_vs_temp_type;

/* Type to hold lte_b40_tx_rot_angle_pa_state  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_tx_rot_angle_pa_state[TX_PA_STATE_SIZ];
} nvi_lte_b40_tx_rot_angle_pa_state_type;

/* Type to hold lte_b7_c1_antsel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b7_c1_antsel[4];
} nvi_lte_b7_c1_antsel_type;

/* Type to hold lte_b7_c1_lna_phase_ctrl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_c1_lna_phase_ctrl[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b7_c1_lna_phase_ctrl_type;

/* Type to hold lte_b7_c1_lna_range_rise_fall  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b7_c1_lna_range_rise_fall  */
  nv_lte_lna_range_rise_fall_type                  lte_b7_c1_lna_range_rise_fall[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b7_c1_lna_range_rise_fall_type;

/* Type to hold lte_b7_c1_rx_gain  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_c1_rx_gain[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b7_c1_rx_gain_type;

/* Type to hold lte_b7_c1_rx_gain_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b7_c1_rx_gain_vs_freq[LTE_USABLE_GAIN_STATES][LTE_RX_FREQ_COMP_SIZ];
} nvi_lte_b7_c1_rx_gain_vs_freq_type;

/* Type to hold lte_b7_c1_rx_gain_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b7_c1_rx_gain_vs_temp[LTE_LNA_RISE_FALL_SIZ][RX_TEMP_BIN_SIZ];
} nvi_lte_b7_c1_rx_gain_vs_temp_type;

/* Type to hold lte_b7_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b7_drx_mode_sel[3];
} nvi_lte_b7_drx_mode_sel_type;

/* Type to hold lte_b7_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_exp_hdet_vs_agc[LTE_HDET_VS_AGC_SIZ];
} nvi_lte_b7_exp_hdet_vs_agc_type;

/* Type to hold lte_b7_im_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b7_im_level[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b7_im_level_type;

/* Type to hold lte_b7_lna_phase_ctrl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_lna_phase_ctrl[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b7_lna_phase_ctrl_type;

/* Type to hold lte_b7_lna_range_rise_fall  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b7_lna_range_rise_fall  */
  nv_lte_lna_range_rise_fall_type                  lte_b7_lna_range_rise_fall[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b7_lna_range_rise_fall_type;

/* Type to hold lte_b7_mpr_based_pa_switchpoints_shift  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_mpr_based_pa_switchpoints_shift[LTE_MPR_SIZ];
} nvi_lte_b7_mpr_based_pa_switchpoints_shift_type;

/* Type to hold lte_b7_pa_compensate_up_down  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b7_pa_compensate_up_down  */
  nv_lte_pa_compensate_up_down_type                lte_b7_pa_compensate_up_down[TX_PA_STATE_SIZ];
} nvi_lte_b7_pa_compensate_up_down_type;

/* Type to hold lte_b7_pa_range_map  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b7_pa_range_map[TX_PA_STATE_SIZ];
} nvi_lte_b7_pa_range_map_type;

/* Type to hold lte_b7_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_rx_cal_chan[LTE_RX_CAL_CHAN_SIZE];
} nvi_lte_b7_rx_cal_chan_type;

/* Type to hold lte_b7_rx_gain  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_rx_gain[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b7_rx_gain_type;

/* Type to hold lte_b7_rx_gain_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b7_rx_gain_vs_freq[LTE_USABLE_GAIN_STATES][LTE_RX_FREQ_COMP_SIZ];
} nvi_lte_b7_rx_gain_vs_freq_type;

/* Type to hold lte_b7_rx_gain_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b7_rx_gain_vs_temp[LTE_LNA_RISE_FALL_SIZ][RX_TEMP_BIN_SIZ];
} nvi_lte_b7_rx_gain_vs_temp_type;

/* Type to hold lte_b7_tx_agc_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b7_tx_agc_offset[LTE_MPR_SIZ];
} nvi_lte_b7_tx_agc_offset_type;

/* Type to hold lte_b7_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_tx_cal_chan[LTE_TX_CAL_CHAN_SIZ];
} nvi_lte_b7_tx_cal_chan_type;

/* Type to hold lte_b7_tx_comp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b7_tx_comp_vs_freq[TX_PA_STATE_SIZ][LTE_TX_FREQ_COMP_SIZ];
} nvi_lte_b7_tx_comp_vs_freq_type;

/* Type to hold lte_b7_tx_gain_index_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_tx_gain_index_1[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b7_tx_gain_index_1_type;

/* Type to hold lte_b7_tx_gain_index_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_tx_gain_index_3[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b7_tx_gain_index_3_type;

/* Type to hold lte_b7_tx_limit_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b7_tx_limit_vs_freq[LTE_TX_FREQ_COMP_SIZ];
} nvi_lte_b7_tx_limit_vs_freq_type;

/* Type to hold lte_b7_tx_limit_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b7_tx_limit_vs_temp[LTE_TX_TEMP_COMP_SIZ];
} nvi_lte_b7_tx_limit_vs_temp_type;

/* Type to hold lte_b7_tx_lin_master_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_tx_lin_master_0[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b7_tx_lin_master_0_type;

/* Type to hold lte_b7_tx_lin_master_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_tx_lin_master_1[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b7_tx_lin_master_1_type;

/* Type to hold lte_b7_tx_lin_master_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_tx_lin_master_2[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b7_tx_lin_master_2_type;

/* Type to hold lte_b7_tx_lin_master_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_tx_lin_master_3[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b7_tx_lin_master_3_type;

/* Type to hold lte_b7_tx_lin_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b7_tx_lin_vs_temp[TX_PA_STATE_SIZ][LTE_TX_TEMP_COMP_SIZ];
} nvi_lte_b7_tx_lin_vs_temp_type;

/* Type to hold lte_b7_tx_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_tx_mpr_backoff[LTE_MPR_SIZ];
} nvi_lte_b7_tx_mpr_backoff_type;


typedef PACKED struct PACKED_POST{ 
  
  uint64                                           lte_bc_config;
  
  uint64                                           lte_bc_config_ext;
} nvi_lte_bc_config_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            i_level;
  
  uint8                                            q_level;
  
  uint8                                            transconductance;
} nvi_lte_c1_im2_values_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           nonbypass_timer;
  
  uint16                                           bypass_timer;
} nvi_lte_c1_nonbypass_bypass_timer_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           offset;
  
  uint16                                           span;
} nvi_lte_hdet_off_span_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            i_level;
  
  uint8                                            q_level;
  
  uint8                                            transconductance;
} nvi_lte_im2_values_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           nonbypass_timer;
  
  uint16                                           bypass_timer;
} nvi_lte_nonbypass_bypass_timer_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           up_time;
  
  uint16                                           down_time;
} nvi_lte_pa_gain_up_down_time_type;


typedef PACKED struct PACKED_POST{ 
  
  int16                                            A_COEFF;
  
  int16                                            B_COEFF;
} nvi_lte_rxf_mismatch_comp_type;


typedef PACKED struct PACKED_POST{ 
  
  int16                                            I_OFFSET;
  
  int16                                            Q_OFFSET;
} nvi_lte_tx_carrier_feedthrough_comp_type;


typedef PACKED struct PACKED_POST{ 
  
  int16                                            IQ_SCALE_ALPHA;
  
  int16                                            IQ_SCALE_BETA;
} nvi_lte_tx_mismatch_comp_type;


typedef PACKED struct PACKED_POST{ 
  /* Set when maintenance order received */
  boolean                                          maint_order;
  /* Maintenance reason received in the order */
  byte                                             maint_reason;
} nvi_maintrsn_type;

/* Type to hold mbp_rf_dvbh_gs3_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_dvbh_gs3_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_dvbh_gs3_cal_type;

/* Type to hold mbp_rf_dvbh_gs5_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_dvbh_gs5_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_dvbh_gs5_cal_type;

/* Type to hold mbp_rf_dvbh_gs6_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_dvbh_gs6_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_dvbh_gs6_cal_type;

/* Type to hold mbp_rf_isdbt_gs0_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_isdbt_gs0_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_isdbt_gs0_cal_type;

/* Type to hold mbp_rf_isdbt_gs1_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_isdbt_gs1_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_isdbt_gs1_cal_type;

/* Type to hold mbp_rf_isdbt_gs2_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_isdbt_gs2_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_isdbt_gs2_cal_type;

/* Type to hold mbp_rf_isdbt_gs4_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_isdbt_gs4_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_isdbt_gs4_cal_type;

/* Type to hold mbp_rf_isdbt_gs5_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_isdbt_gs5_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_isdbt_gs5_cal_type;

/* Type to hold mbp_rf_mflo_gs2_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_mflo_gs2_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_mflo_gs2_cal_type;

/* Type to hold mbp_rf_mflo_gs3_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_mflo_gs3_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_mflo_gs3_cal_type;

/* Type to hold mbp_rf_mflo_gs4_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_mflo_gs4_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_mflo_gs4_cal_type;

/* Type to hold mf_700_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           mf_700_rx_cal_chan[16];
} nvi_mf_700_rx_cal_chan_type;


typedef PACKED struct PACKED_POST{ 
  
  uint32                                           rc_rise_edge;
  
  uint32                                           rc_false_rise;
  
  uint32                                           rc_fall;
  
  uint32                                           rc_after_fall;
  
  uint32                                           hc_false_rise;
  
  uint32                                           hc_flat;
  
  uint32                                           hc_fall;
  
  uint32                                           ic_flat;
  
  uint32                                           ic_after_fall;
  
  uint32                                           sw_corr;
  
  uint32                                           spare_1;
  
  uint32                                           spare_2;
} nvi_mf_afc_acquisition_params_type;

/* Type to hold mf_chan_support_l_band  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           mf_chan_support_l_band[32];
} nvi_mf_chan_support_l_band_type;


typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dmtt_1;
  
  uint32                                           dmtt_2;
  
  uint32                                           dmtt_3;
  
  uint32                                           dmtt_4;
  
  uint32                                           dmtt_5;
} nvi_mf_dmtt_params;

/* Type to hold mf_pref_rf_chan_list  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold mf_pref_rf_chan_list  */
  nv_mf_pre_rf_chan_list                           mf_pref_rf_chan_list[16];
} nvi_mf_pref_rf_chan_list_type;


typedef PACKED struct PACKED_POST{ 
  /* RF to use when MFN is disabled */
  uint32                                           rf_freq;
  /* Bandwidth to use when MFN is disabled */
  uint8                                            bandwidth;
  /* band class to use when MFN is disabled */
  uint8                                            band;
} nvi_mf_rf_override_desc;

/* Type to hold mf_rssi_cal_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_freq_4[32];
} nvi_mf_rssi_cal_vs_freq_4_type;

/* Type to hold mf_rssi_cal_vs_freq_6  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_freq_6[32];
} nvi_mf_rssi_cal_vs_freq_6_type;

/* Type to hold mf_rssi_cal_vs_l_band_freq_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_l_band_freq_0[32];
} nvi_mf_rssi_cal_vs_l_band_freq_0_type;

/* Type to hold mf_rssi_cal_vs_l_band_freq_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_l_band_freq_1[32];
} nvi_mf_rssi_cal_vs_l_band_freq_1_type;

/* Type to hold mf_rssi_cal_vs_l_band_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_l_band_freq_2[32];
} nvi_mf_rssi_cal_vs_l_band_freq_2_type;

/* Type to hold mf_rssi_cal_vs_l_band_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_l_band_freq_3[32];
} nvi_mf_rssi_cal_vs_l_band_freq_3_type;

/* Type to hold mf_rssi_cal_vs_l_band_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_l_band_freq_4[32];
} nvi_mf_rssi_cal_vs_l_band_freq_4_type;

/* Type to hold mf_rssi_cal_vs_l_band_freq_6  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_l_band_freq_6[32];
} nvi_mf_rssi_cal_vs_l_band_freq_6_type;

/* Type to hold mf_rssi_cal_vs_vhf_freq_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_vhf_freq_0[32];
} nvi_mf_rssi_cal_vs_vhf_freq_0_type;

/* Type to hold mf_rssi_cal_vs_vhf_freq_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_vhf_freq_1[32];
} nvi_mf_rssi_cal_vs_vhf_freq_1_type;

/* Type to hold mf_rssi_cal_vs_vhf_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_vhf_freq_2[32];
} nvi_mf_rssi_cal_vs_vhf_freq_2_type;

/* Type to hold mf_rssi_cal_vs_vhf_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_vhf_freq_3[32];
} nvi_mf_rssi_cal_vs_vhf_freq_3_type;

/* Type to hold mf_rssi_cal_vs_vhf_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_vhf_freq_4[32];
} nvi_mf_rssi_cal_vs_vhf_freq_4_type;

/* Type to hold mf_rssi_cal_vs_vhf_freq_6  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_vhf_freq_6[32];
} nvi_mf_rssi_cal_vs_vhf_freq_6_type;


typedef PACKED struct PACKED_POST{ 
  /* MIN1 */
  dword                                            min1[NV_MAX_MINS];
} nvi_min1_type;


typedef PACKED struct PACKED_POST{ 
  /* MIN2 */
  word                                             min2[NV_MAX_MINS];
} nvi_min2_type;


typedef PACKED struct PACKED_POST{ 
  /* Checksum */
  word                                             chksum[NV_MAX_MINS];
} nvi_min_chksum_type;


typedef PACKED struct PACKED_POST{ 
  /* minimum */
  byte                                             min;
  /* maximum */
  byte                                             max;
} nvi_minmax_type;

/* Type to hold mipv6_hoa_prefix_len  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            mipv6_hoa_prefix_len[NV_MAX_MIPV6_PROFILES];
} nvi_mipv6_hoa_prefix_len_type;


typedef PACKED struct PACKED_POST{ 
  /* Retransmission limit for IKEv2 negotiation */
  uint32                                           ikev2_max_retransmissions;
  /* IPSec configuration parameters for MIPv6 */
  uint32                                           ikev2_retransmission_interval;
  /* Mask of encryption algos proposed in IKEv2 negotiation */
  uint32                                           ipsec_enc_algo_proposal_mask;
  /* Mask of pseudo-random function algos proposed during IKEv2 negotiation */
  uint32                                           ike_sa_prf_algo_proposal_mask;
  /* Mask of auth algos proposed in IKEv2 negotiation */
  uint32                                           ipsec_auth_algo_proposal_mask;
  /* Traffic (bytes) after which re-keying starts for the child SA */
  uint32                                           soft_child_sa_lifetime_bytes;
  /* Traffic (bytes) after which child SA expires unless re-keying is done */
  uint32                                           hard_child_sa_lifetime_bytes;
  /* Mask indicating Diffie-Hellman groups for IKEv2  */
  uint32                                           ikev2_dh_mode_mask;
  /* Time (sec) after which re-keying is initiated for IKE SA  */
  uint32                                           soft_ike_rekey_time;
  /* Time (sec) after which IKE SA expires unless re-keying is done. */
  uint32                                           hard_ike_rekey_time;
  /* Time (sec) after which re-keying starts for the child SA */
  uint32                                           soft_child_sa_lifetime_sec;
  /* ime (sec) after which child SA expires unless re-keying is done  */
  uint32                                           hard_child_sa_lifetime_sec;
  /* Boolean value indicating if NAT should be proposed during IKEv2 */
  boolean                                          nat_supported;
  /* Time (sec) between sending NAT keepalive packets */
  uint32                                           nat_keepalive_interval;
} nvi_mipv6_ipsec_config_type;

/* Type to hold mipv6_mn_aaa_shared_secret  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold mipv6_mn_aaa_shared_secret  */
  nv_mipv6_mn_aaa_shared_secret_type               mipv6_mn_aaa_shared_secret[NV_MAX_MIPV6_PROFILES];
} nvi_mipv6_mn_aaa_shared_secret_type;


typedef PACKED struct PACKED_POST{ 
  /* Maximum number of attempts for sending binding registrations. */
  uint16                                           max_binding_update_attempts;
  /* Maximum number of attempts for sending binding deregistrations. */
  uint16                                           max_binding_dereg_attempts;
  /* Timeout (ms) to retry registration with an HA without previous binding  */
  uint32                                           initial_bindack_timeout_first_reg;
  /* Initial timeout (ms) for any subsequent registration attempts */
  uint32                                           initial_bindack_timeout;
} nvi_mipv6_registration_config_type;

/* Type to hold mipv6_sec_ha  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold mipv6_sec_ha  */
  nv_mipv6_ipv6_addr_type                          mipv6_sec_ha[NV_MAX_MIPV6_PROFILES];
} nvi_mipv6_sec_ha_type;

/* Type to hold mipv6_secondary_dns  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold mipv6_secondary_dns  */
  nv_mipv6_ipv6_addr_type                          mipv6_secondary_dns[NV_MAX_MIPV6_PROFILES];
} nvi_mipv6_secondary_dns_type;

/* Type to hold mm_ringer_file  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             mm_ringer_file[40];
} nvi_mm_ringer_file_type;


typedef PACKED struct PACKED_POST{ 
  /* Registration enabled */
  boolean                                          enabled[NV_MAX_MINS];
} nvi_mob_term_type;


typedef PACKED struct PACKED_POST{ 
  
  nv_mru3_table_entry_type                         entry[NV_MRU_TABLE_SIZE];
} nvi_mru3_table_type;

/* Type to hold ms_sms_opco_types_supported  */
typedef PACKED struct PACKED_POST{ 
  
  boolean                                          ms_sms_opco_types_supported[8];
} nvi_ms_sms_opco_types_supported_type;

/* Type to hold ms_sms_smsc_address10  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ms_sms_smsc_address10[NV_SMS_SMSC_ADDRESS_SIZ];
} nvi_ms_sms_smsc_address10_type;

/* Type to hold ms_sms_smsc_address1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ms_sms_smsc_address1[NV_SMS_SMSC_ADDRESS_SIZ];
} nvi_ms_sms_smsc_address1_type;

/* Type to hold ms_sms_smsc_address4  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ms_sms_smsc_address4[NV_SMS_SMSC_ADDRESS_SIZ];
} nvi_ms_sms_smsc_address4_type;

/* Type to hold ms_sms_smsc_address5  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ms_sms_smsc_address5[NV_SMS_SMSC_ADDRESS_SIZ];
} nvi_ms_sms_smsc_address5_type;

/* Type to hold ms_sms_smsc_address6  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ms_sms_smsc_address6[NV_SMS_SMSC_ADDRESS_SIZ];
} nvi_ms_sms_smsc_address6_type;

/* Type to hold ms_sms_smsc_address7  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ms_sms_smsc_address7[NV_SMS_SMSC_ADDRESS_SIZ];
} nvi_ms_sms_smsc_address7_type;

/* Type to hold ms_sms_smsc_address8  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ms_sms_smsc_address8[NV_SMS_SMSC_ADDRESS_SIZ];
} nvi_ms_sms_smsc_address8_type;

/* Type to hold ms_sms_smsc_address9  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ms_sms_smsc_address9[NV_SMS_SMSC_ADDRESS_SIZ];
} nvi_ms_sms_smsc_address9_type;


typedef PACKED struct PACKED_POST{ 
  /* PDP Profile Number */
  uint8                                            profile_no;
  /* MT PDP Timeout before disconnecting */
  int32                                            timeout;
  /* APN name */
  uint8                                            APN[122];
} nvi_mtpdp_app_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            otksl_flag;
} nvi_multi_otksl_flag_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           max_nd_solicits;
  
  uint16                                           max_nd_retransmits;
  
  uint16                                           max_nd_reachable_time;
  
  uint16                                           max_nd_delay_first_probe_time;
  
  uint16                                           max_nd_retransmit_interval;
} nvi_nd_config_items;


typedef PACKED struct PACKED_POST{ 
  /* network selection mode preference */
  word                                             net_sel_mode;
} nvi_net_sel_mode_pref_type;


typedef PACKED struct PACKED_POST{ 
  /* PLMN Name from NITZ */
  uint8                                            plmn_name[NV_MAX_NW_NAME_CHARS];
} nvi_nitz_plmn_type;


typedef PACKED struct PACKED_POST{ 
  /* NMEA Port Type */
  uint32                                           nmea_port_type;
  /* NMEA Reporting Type */
  uint32                                           nmea_reporting_type;
} nvi_nmea_config_info_type;

/* Type to hold oem_item_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           oem_item_2[31];
} nvi_oem_item_2_type;

/* Type to hold oem_item_8  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           oem_item_8[31];
} nvi_oem_item_8_type;

/* Type to hold pa_backoff_volts  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            pa_backoff_volts[NV_NUM_PA_BCKOFF_CAL_VOLT];
} nvi_pa_backoff_volts_type;


typedef PACKED struct PACKED_POST{ 
  /* Offset */
  int2                                             offset;
  /* Temperature adjustement array */
  int1                                             temp_adj[NV_TEMP_TABLE_SIZ];
  /* Frequency adjustement array */
  int1                                             freq_adj[NV_FREQ_TABLE_SIZ];
} nvi_pa_offset_type;

/* Type to hold pa_range_offsets  */
typedef PACKED struct PACKED_POST{ 
  
  int2                                             pa_range_offsets[NV_NUM_PA_RANGES];
} nvi_pa_range_offsets_type;


typedef PACKED struct PACKED_POST{ 
  /* Length of Password */
  byte                                             password_len;
  /* The Password */
  byte                                             password[NV_MAX_PAP_PASSWORD_LENGTH];
} nvi_pap_password_type;


typedef PACKED struct PACKED_POST{ 
  /* Length of user_id */
  byte                                             user_id_len;
  /* The user_id */
  byte                                             user_id[NV_MAX_PAP_USER_ID_LENGTH];
} nvi_pap_user_id_type;

/* Type to hold pcs_cdma_lna_12_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_cdma_lna_12_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_pcs_cdma_lna_12_offset_vs_freq_type;

/* Type to hold pcs_cdma_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_cdma_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_pcs_cdma_lna_offset_vs_freq_type;

/* Type to hold pcs_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             pcs_exp_hdet_vs_agc[NV_PCS_EXP_HDET_VS_AGC_SIZ];
} nvi_pcs_exp_hdet_vs_agc_type;

/* Type to hold pcs_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_pcs_lna_4_offset_vs_freq_type;

/* Type to hold pcs_olta_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_olta_backoff[4];
} nvi_pcs_olta_backoff_type;

/* Type to hold pcs_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             pcs_p1_rise_fall_off[8];
} nvi_pcs_p1_rise_fall_off_type;

/* Type to hold pcs_pa_range_offsets  */
typedef PACKED struct PACKED_POST{ 
  
  int2                                             pcs_pa_range_offsets[NV_NUM_PA_RANGES];
} nvi_pcs_pa_range_offsets_type;

/* Type to hold pcs_pa_range_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_pa_range_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_pcs_pa_range_vs_temp_type;

/* Type to hold pcs_pdm1_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_pdm1_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_pcs_pdm1_vs_freq_type;

/* Type to hold pcs_pdm2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_pdm2_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_pcs_pdm2_vs_freq_type;

/* Type to hold pcs_rx_lin_slp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             pcs_rx_lin_slp[NV_PCS_RX_LIN_SIZ];
} nvi_pcs_rx_lin_slp_type;

/* Type to hold pcs_rx_lin_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_rx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_pcs_rx_lin_vs_temp_type;

/* Type to hold pcs_tx_comp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_tx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_pcs_tx_comp_vs_freq_type;

/* Type to hold pcs_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_pcs_tx_lim_vs_freq_type;

/* Type to hold pcs_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             pcs_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_pcs_tx_lim_vs_temp_type;

/* Type to hold pcs_tx_lin_master_slp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             pcs_tx_lin_master_slp[NV_PCS_TX_LIN_MASTER_SIZ];
} nvi_pcs_tx_lin_master_slp_type;

/* Type to hold pcs_tx_lin_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             pcs_tx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_pcs_tx_lin_vs_temp_type;

/* Type to hold pcs_tx_slp_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_tx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_pcs_tx_slp_vs_temp_type;

/* Type to hold pcs_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int2                                             pcs_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_pcs_vga_gain_offset_vs_temp_type;

/* Type to hold phone_boot_naiurl  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            phone_boot_naiurl[NV_UI_IOTA_MAX_URL_SIZE];
} nvi_phone_boot_naiurl_type;

/* Type to hold phone_boot_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            phone_boot_url[NV_UI_IOTA_MAX_URL_SIZE];
} nvi_phone_boot_url_type;

/* Type to hold poc_billing_service  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           poc_billing_service[NV_POC_BILLING_SERVICE_SIZ];
} nvi_poc_billing_service_type;

/* Type to hold poc_glm_password  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           poc_glm_password[NV_POC_GLM_PASSWORD_SIZ];
} nvi_poc_glm_password_type;

/* Type to hold poc_nai  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           poc_nai[NV_POC_NAI_SIZ];
} nvi_poc_nai_type;

/* Type to hold poc_server_ip1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           poc_server_ip1[NV_POC_SERVER_IP_SIZ];
} nvi_poc_server_ip1_type;

/* Type to hold poc_server_ip2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           poc_server_ip2[NV_POC_SERVER_IP_SIZ];
} nvi_poc_server_ip2_type;

/* Type to hold poc_wtuser_password  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           poc_wtuser_password[NV_POC_PASSWORD_SIZ];
} nvi_poc_wtuser_password_type;


typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lcp_term_timeout;
  
  uint16                                           lcp_ack_timeout;
  
  uint8                                            lcp_req_try;
  
  uint8                                            lcp_nak_try;
  
  uint8                                            lcp_term_try;
  
  uint8                                            auth_retry;
  
  uint16                                           auth_timeout;
  
  uint16                                           ipcp_term_timeout;
  
  uint16                                           ipcp_ack_timeout;
  
  uint8                                            ipcp_req_try;
  
  uint8                                            ipcp_nak_try;
  
  uint8                                            ipcp_term_try;
  
  uint8                                            ipcp_compression_enable;
  
  uint16                                           ipv6cp_term_timeout;
  
  uint16                                           ipv6cp_ack_timeout;
  
  uint8                                            ipv6cp_req_try;
  
  uint8                                            ipv6cp_nak_try;
  
  uint8                                            ipv6cp_term_try;
  
  uint8                                            ipv6cp_compression_enable;
} nvi_ppp_configure_data_type;


typedef PACKED struct PACKED_POST{ 
  /* User ID for EAP as auth Protocol for PPP */
  uint8                                            ppp_eap_user_id_len;
  /* EAP User ID for EAP as auth Protocol during PPP */
  uint8                                            ppp_eap_user_id[NV_PPP_EAP_MAX_USER_ID_LEN];
} nvi_ppp_eap_user_id_type;


typedef PACKED struct PACKED_POST{ 
  /* Length of user id */
  byte                                             user_id_len;
  /* The user id */
  byte                                             user_id[NV_MAX_PPP_USER_ID_LENGTH];
} nvi_ppp_user_id_type;


typedef PACKED struct PACKED_POST{ 
  /* Preferred mode per enum above */
  word                                             mode;
} nvi_pref_mode_type;


typedef PACKED struct PACKED_POST{ 
  /* Preferred system per above enum */
  word                                             sys;
} nvi_pref_serv_type;


typedef PACKED struct PACKED_POST{ 
  /* evrc_capability_enabled */
  boolean                                          evrc_capability_enabled;
  /* home_page_voice_so */
  word                                             home_page_voice_so;
  /* home_orig_voice_so */
  word                                             home_orig_voice_so;
  /* roam_orig_voice_so */
  word                                             roam_orig_voice_so;
} nvi_pref_voice_so_type;

/* Type to hold presupl_wap_gateway_address  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            presupl_wap_gateway_address[NV_PRESUPL_WAP_GW_ADDR_SIZE];
} nvi_presupl_wap_gateway_address_type;


typedef PACKED struct PACKED_POST{ 
  /* PR Info */
  uint16                                           pr_info;
  /* RCV */
  uint8                                            rcv;
  /* RCH */
  uint8                                            rch;
  /* CC */
  uint8                                            cc;
} nvi_process_cal_type;


typedef PACKED struct PACKED_POST{ 
  /* NV item for AMSS RESTART */
  uint8                                            enable;
  /* timer for resetting the amss restart counts  */
  uint32                                           timer_period;
  /* maximum number of modem restart requests  */
  uint32                                           modem_restart_count;
  /* maximum number of apps restart requests */
  uint32                                           apps_restart_count;
} nvi_process_restart_switch_type;

/* Type to hold pwr_backoff_vs_volt_med  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            pwr_backoff_vs_volt_med[NV_TX_BACKOFF_TABLE_SIZE];
} nvi_pwr_backoff_vs_volt_med_type;

/* Type to hold rf_antsel_gsm_1800_rx  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_gsm_1800_rx[4];
} nvi_rf_antsel_gsm_1800_rx_type;

/* Type to hold rf_antsel_gsm_1800_tx  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_gsm_1800_tx[4];
} nvi_rf_antsel_gsm_1800_tx_type;

/* Type to hold rf_antsel_gsm_1900_rx  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_gsm_1900_rx[4];
} nvi_rf_antsel_gsm_1900_rx_type;

/* Type to hold rf_antsel_gsm_1900_tx  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_gsm_1900_tx[4];
} nvi_rf_antsel_gsm_1900_tx_type;

/* Type to hold rf_antsel_gsm_850_rx  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_gsm_850_rx[4];
} nvi_rf_antsel_gsm_850_rx_type;

/* Type to hold rf_antsel_gsm_850_tx  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_gsm_850_tx[4];
} nvi_rf_antsel_gsm_850_tx_type;

/* Type to hold rf_antsel_gsm_900_rx  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_gsm_900_rx[4];
} nvi_rf_antsel_gsm_900_rx_type;

/* Type to hold rf_antsel_gsm_900_tx  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_gsm_900_tx[4];
} nvi_rf_antsel_gsm_900_tx_type;

/* Type to hold rf_antsel_gsm_default  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_gsm_default[4];
} nvi_rf_antsel_gsm_default_type;

/* Type to hold rf_antsel_umts_1800  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_umts_1800[4];
} nvi_rf_antsel_umts_1800_type;

/* Type to hold rf_antsel_umts_1900  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_umts_1900[4];
} nvi_rf_antsel_umts_1900_type;

/* Type to hold rf_antsel_umts_800  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_umts_800[4];
} nvi_rf_antsel_umts_800_type;

/* Type to hold rf_cal_ver  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             rf_cal_ver[NV_SIZE_OF_VERSION];
} nvi_rf_cal_ver_type;

/* Type to hold rf_config_ver  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             rf_config_ver[NV_SIZE_OF_VERSION];
} nvi_rf_config_ver_type;


typedef PACKED struct PACKED_POST{ 
  
  int8                                             rf_rx_agc_lpm_rise[NV_RF_SWITCHPOINT_COUNT];
  
  int8                                             rf_rx_agc_lpm_fall[NV_RF_SWITCHPOINT_COUNT];
} nvi_rf_rx_agc_lpm_switchpoints;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            i;
  
  uint8                                            q;
  
  uint8                                            transconductor;
} nvi_rf_rx_im2_cal;

/* Type to hold rfr_vco_coarse_tuning_1800  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rfr_vco_coarse_tuning_1800[12];
} nvi_rfr_vco_coarse_tuning_1800_type;

/* Type to hold rfr_vco_coarse_tuning_1900  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rfr_vco_coarse_tuning_1900[12];
} nvi_rfr_vco_coarse_tuning_1900_type;

/* Type to hold rfr_vco_coarse_tuning_800  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rfr_vco_coarse_tuning_800[8];
} nvi_rfr_vco_coarse_tuning_800_type;

/* Type to hold rfr_vco_coarse_tuning_900  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rfr_vco_coarse_tuning_900[8];
} nvi_rfr_vco_coarse_tuning_900_type;


typedef PACKED struct PACKED_POST{ 
  /* When true, rmnet device will automatically make a call when connected/enabled */
  boolean                                          enable;
} nvi_rmnet_autoconnect_type;


typedef PACKED struct PACKED_POST{ 
  /* The roaming message text */
  byte                                             text[NV_ROAM_MSG_MAX_SIZE];
} nvi_roam_msg_type;


typedef PACKED struct PACKED_POST{ 
  /* roam */
  word                                             roam;
} nvi_roam_pref_type;


typedef PACKED struct PACKED_POST{ 
  /* prl_version */
  word                                             prl_version;
  /* size */
  dword                                            size;
  /* valid bit */
  boolean                                          valid;
  /* roaming list */
  byte                                             roaming_list[NV_SIZE_OF_ROAMING_LIST_IN_UNION_TYPE];
} nvi_roaming_list_union_type;

/* Type to hold rot_freq_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            rot_freq_vs_temp[64];
} nvi_rot_freq_vs_temp_type;


typedef PACKED struct PACKED_POST{ 
  
  byte                                             act[2];
} nvi_rplmnact_type;

/* Type to hold rr_acq_db_chunk_00  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold rr_acq_db_chunk_00  */
  nv_rr_acq_db_chunk_00_type                       rr_acq_db_chunk_00[NV_RR_ACQ_DB_MAX_ENTRIES_PER_CHUNK];
} nvi_rr_acq_db_chunk_00_type;

/* Type to hold rr_acq_db_chunk_01  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold rr_acq_db_chunk_01  */
  nv_rr_acq_db_chunk_01_type                       rr_acq_db_chunk_01[NV_RR_ACQ_DB_MAX_ENTRIES_PER_CHUNK];
} nvi_rr_acq_db_chunk_01_type;

/* Type to hold rr_acq_db_chunk_02  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold rr_acq_db_chunk_02  */
  nv_rr_acq_db_chunk_02_type                       rr_acq_db_chunk_02[NV_RR_ACQ_DB_MAX_ENTRIES_PER_CHUNK];
} nvi_rr_acq_db_chunk_02_type;

/* Type to hold rr_acq_db_chunk_04  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold rr_acq_db_chunk_04  */
  nv_rr_acq_db_chunk_04_type                       rr_acq_db_chunk_04[NV_RR_ACQ_DB_MAX_ENTRIES_PER_CHUNK];
} nvi_rr_acq_db_chunk_04_type;

/* Type to hold rr_acq_db_chunk_05  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold rr_acq_db_chunk_05  */
  nv_rr_acq_db_chunk_05_type                       rr_acq_db_chunk_05[NV_RR_ACQ_DB_MAX_ENTRIES_PER_CHUNK];
} nvi_rr_acq_db_chunk_05_type;

/* Type to hold rr_acq_db_chunk_06  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold rr_acq_db_chunk_06  */
  nv_rr_acq_db_chunk_06_type                       rr_acq_db_chunk_06[NV_RR_ACQ_DB_MAX_ENTRIES_PER_CHUNK];
} nvi_rr_acq_db_chunk_06_type;

/* Type to hold rr_acq_db_chunk_07  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold rr_acq_db_chunk_07  */
  nv_rr_acq_db_chunk_07_type                       rr_acq_db_chunk_07[NV_RR_ACQ_DB_MAX_ENTRIES_PER_CHUNK];
} nvi_rr_acq_db_chunk_07_type;


typedef PACKED struct PACKED_POST{ 
  
  byte                                             no_of_entries;
  
  NV_ARFCN_T                                       last_best_cells[NV_MAX_NUMBER_OF_BEST_CELLS];
} nvi_rr_stored_last_best_arfcns_band_type;


typedef PACKED struct PACKED_POST{ 
  
  int16                                            Aval[4];
  
  int16                                            Bval[4];
} nvi_rtr6250_rsb_type;


typedef PACKED struct PACKED_POST{ 
  
  word                                             flags;
  
  uint16                                           port;
  
  nv_rtsp_proxy_server_addr                        addr;
} nvi_rtsp_proxy_server_addr_type;


typedef PACKED struct PACKED_POST{ 
  
  byte                                             digits[NV_RUIM_CHV_SIZE];
} nvi_ruim_chv_type;


typedef PACKED struct PACKED_POST{ 
  
  word                                             msg_id;
  
  word                                             wap_msg_id;
  
  boolean                                          mem_avail;
} nvi_ruim_sms_status_type;


typedef PACKED struct PACKED_POST{ 
  /* hold the run timer */
  dword                                            time;
} nvi_run_time_type;


typedef PACKED struct PACKED_POST{ 
  /* latitude:  LSB 2 degrees */
  int8                                             latitude;
  /* longitude: LSB 2 degrees */
  int8                                             longitude;
} nvi_sbas_area_node_type;


typedef PACKED struct PACKED_POST{ 
  /* Various configurable SD values. */
  uint16                                           version;
  /* Total number of valid entries in the items array */
  uint16                                           count;
  /* Configurable SD values */
  uint32                                           items[NV_SD_ITEMS_MAX];
} nvi_sd_cfg_items_s_type;


typedef PACKED struct PACKED_POST{ 
  /* Security code array */
  byte                                             digits[NV_SEC_CODE_SIZE];
} nvi_sec_code_type;

/* Type to hold sec_csprng_init_seed  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            sec_csprng_init_seed[NV_SEC_CSPRNG_INIT_SEED_LEN];
} nvi_sec_csprng_init_seed_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            device_key_len;
  
  uint8                                            device_key_data[NV_SEC_DEVICE_KEY_MAX_LEN];
} nvi_sec_device_key_type;


typedef PACKED struct PACKED_POST{ 
  /* Secure Time Local Time Offset */
  int64                                            local_offset;
  /* Secure Time User Time Offset */
  int64                                            user_offset;
} nvi_sectime_offsets_type;


typedef PACKED struct PACKED_POST{ 
  /* SID */
  word                                             sid[NV_MAX_SID_ACQ];
} nvi_sid_acq_type;


typedef PACKED struct PACKED_POST{ 
  /* SID */
  word                                             sid[NV_MAX_SID_LOCK];
} nvi_sid_lock_type;


typedef PACKED struct PACKED_POST{ 
  /* sid */
  word                                             sid;
  /* nid */
  word                                             nid;
  /* block_or_sys */
  word                                             block_or_sys;
  /* band_class */
  byte                                             band_class;
} nvi_sid_nid_list_type;


typedef PACKED struct PACKED_POST{ 
  /* SID+NID Pair */
  nv_sid_nid_pair_type                             pair[NV_MAX_SID_NID_LOCK];
} nvi_sid_nid_lock_type;


typedef PACKED struct PACKED_POST{ 
  /* SID+NID Pair */
  nv_sid_nid_pair_type                             pair[NV_MAX_MINS][NV_MAX_SID_NID];
} nvi_sid_nid_type;


typedef PACKED struct PACKED_POST{ 
  /* SID */
  word                                             sid;
} nvi_sid_type;


typedef PACKED struct PACKED_POST{ 
  
  byte                                             label_encoding;
  
  byte                                             bc_alert;
  
  byte                                             max_messages;
} nvi_sms_bc_service_table_options_type;


typedef PACKED struct PACKED_POST{ 
  /* for delete operation */
  boolean                                          active_service;
  /* type of service */
  word                                             service;
  /* type of language */
  byte                                             language;
  /* for */
  boolean                                          selected;
  /* priority of the service */
  byte                                             priority;
  /* a UI text label for each service/language pair */
  byte                                             label[NV_SMS_BC_SRV_LABEL_SIZE];
} nvi_sms_bc_service_table_type;

/* Type to hold sms_bearer_prefs  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold sms_bearer_prefs  */
  nv_sms_bearer_prefs                              sms_bearer_prefs[NV_SMS_BEARER_PREFS_MAX];
} nvi_sms_bearer_prefs_type;


typedef PACKED struct PACKED_POST{ 
  
  boolean                                          reading_advised;
  
  boolean                                          reading_optional;
} nvi_sms_bmc_reading_pref_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            len;
  
  uint8                                            data[NV_SMS_CD_PARMS_SIZE];
} nvi_sms_cd_parms_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            mem_store;
  
  uint8                                            index;
} nvi_sms_default_template_type;


typedef PACKED struct PACKED_POST{ 
  /* Whether the entry is valid */
  boolean                                          active_service;
  /* Service ID range start */
  word                                             service_from;
  /* Service ID range end */
  word                                             service_to;
  /* Selected/Deselected the service */
  boolean                                          selected;
  /* Service ID textual information */
  byte                                             label[NV_SMS_BC_SRV_LABEL_SIZE];
  /* Label encoding */
  byte                                             label_encoding;
  /* Alert type */
  byte                                             bc_alert;
  /* Maximum number of messages can be stored for this service ID or range */
  byte                                             max_messages;
} nvi_sms_gw_cb_service_table_type;


typedef PACKED struct PACKED_POST{ 
  /* Size of the GSM/WCDMA SMS parameters */
  uint8                                            len;
  /* The GSM/WCDMA SMS parameters */
  uint8                                            data[NV_SMS_GW_PARAMS_SIZE];
} nvi_sms_gw_parms_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            pp_routes[NV_SMS_MAX_ROUTES];
  
  uint8                                            pp_mem_stores[NV_SMS_MAX_ROUTES];
  
  uint8                                            bc_routes[NV_SMS_MAX_ROUTES];
  
  uint8                                            bc_mem_stores[NV_SMS_MAX_ROUTES];
  
  boolean                                          transfer_status_report;
} nvi_sms_routing_type;


typedef PACKED struct PACKED_POST{ 
  /* number of digits in the phone number */
  uint8                                            num_digits;
  /* the value of all digits in the phone number */
  uint8                                            digits[NV_MAX_DIAL_DIGITS];
} nvi_sms_vm_number_type;

/* Type to hold sos_number  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            sos_number[SOS_NUMBER_SIZ];
} nvi_sos_number_type;


typedef PACKED struct PACKED_POST{ 
  /* Last accepted SQN */
  uint8                                            sqn[NV_SEQ_SQN_ARR_SIZE];
} nvi_sqn_arr_type;


typedef PACKED struct PACKED_POST{ 
  /* service domain preference */
  word                                             srv_domain;
} nvi_srv_domain_pref_type;


typedef PACKED struct PACKED_POST{ 
  /* SSD array */
  qword                                            ssd;
} nvi_ssd_type;


typedef PACKED struct PACKED_POST{ 
  /* Crypto Sync (MSB24 | 0) */
  uint32                                           sseq;
} nvi_sseq_type;


typedef PACKED struct PACKED_POST{ 
  /* Index array */
  byte                                             index[NV_MAX_STACK_DIALS];
  /* TRUE if a secret number */
  boolean                                          secret[NV_MAX_STACK_DIALS];
} nvi_stack_idx_type;

/* Type to hold sw_version_info  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            sw_version_info[NV_MAX_SW_VERSION_INFO_SIZ];
} nvi_sw_version_info_type;

/* Type to hold sys_custom_ini_file_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            sys_custom_ini_file_name[33];
} nvi_sys_custom_ini_file_name_type;

/* Type to hold sys_default_efs_file_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            sys_default_efs_file_name[NV_CUSTOMIZATION_VERSIONING_SIZ];
} nvi_sys_default_efs_file_name_type;

/* Type to hold sys_default_nv_ini_file_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            sys_default_nv_ini_file_name[NV_CUSTOMIZATION_VERSIONING_SIZ];
} nvi_sys_default_nv_ini_file_name_type;

/* Type to hold sys_efs_file_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            sys_efs_file_name[NV_CUSTOMIZATION_VERSIONING_SIZ];
} nvi_sys_efs_file_name_type;


typedef PACKED struct PACKED_POST{ 
  /* Preferred system per above enum */
  word                                             sys;
} nvi_sys_pref_type;

/* Type to hold sys_script_file_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            sys_script_file_name[NV_CUSTOMIZATION_VERSIONING_SIZ];
} nvi_sys_script_file_name_type;

/* Type to hold sys_struct_fct_file_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            sys_struct_fct_file_name[33];
} nvi_sys_struct_fct_file_name_type;

/* Type to hold sys_sw_ver  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             sys_sw_ver[NV_SIZE_OF_VERSION];
} nvi_sys_sw_ver_type;

/* Type to hold sys_variant_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            sys_variant_name[NV_CUSTOMIZATION_VERSIONING_SIZ];
} nvi_sys_variant_name_type;

/* Type to hold test_code_ver  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             test_code_ver[NV_SIZE_OF_VERSION];
} nvi_test_code_ver_type;

/* Type to hold therm_bins_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           therm_bins_2[NV_TEMP_TABLE_SIZ];
} nvi_therm_bins_2_type;

/* Type to hold therm_bins  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           therm_bins[NV_TEMP_TABLE_SIZ];
} nvi_therm_bins_type;

/* Type to hold therm_comp_thresholds  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            therm_comp_thresholds[2];
} nvi_therm_comp_thresholds_type;


typedef PACKED struct PACKED_POST{ 
  /* enhanced NV thermistor item */
  uint32                                           min;
  /* maximum them item */
  uint32                                           max;
} nvi_therm_type;


typedef PACKED struct PACKED_POST{ 
  /* Sensor ID where max temperature was read */
  uint8                                            sensor_id;
  /* Max recorded temp in C */
  uint8                                            temp;
} nvi_thermal_monitor_max_temp_type;


typedef PACKED struct PACKED_POST{ 
  /* The TMSI code */
  dword                                            code;
} nvi_tmsi_code_type;


typedef PACKED struct PACKED_POST{ 
  /* The TMSI expiration timer */
  dword                                            time;
} nvi_tmsi_exp_time_type;


typedef PACKED struct PACKED_POST{ 
  /* The TMSI zone */
  qword                                            zone;
} nvi_tmsi_zone_type;

/* Type to hold trk_lo_adj_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           trk_lo_adj_vs_temp[64];
} nvi_trk_lo_adj_vs_temp_type;


typedef PACKED struct PACKED_POST{ 
  /* Limit RF assignments for simulating reduced h/w capability. */
  word                                             rf_config;
  /* Bit field for disallowing certain mode combinations */
  uint32                                           mask;
} nvi_trm_config_type;


typedef PACKED struct PACKED_POST{ 
  
  word                                             value[NV_TX_BURST_RAMP_SIZ];
} nvi_tx_burst_ramp_index_type;


typedef PACKED struct PACKED_POST{ 
  
  int8                                             nv_cdma_tx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
  
  int8                                             nv_cdma_tx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
  
  int8                                             nv_cdma_tx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_tx_comp_type;


typedef PACKED struct PACKED_POST{ 
  
  int8                                             nv_tx_pwr_comp_lin_vs_temp[NV_TEMP_TABLE_SIZ];
  
  int8                                             nv_tx_pwr_comp_slp_vs_temp[NV_TEMP_TABLE_SIZ];
  
  int8                                             nv_tx_pwr_comp_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_tx_pwr_temp_freq_based_comp_type;


typedef PACKED struct PACKED_POST{ 
  /* A correction value */
  uint8                                            Aval;
  /* B correction value */
  uint8                                            Bval;
} nvi_tx_rsb_corr_type;


typedef PACKED struct PACKED_POST{ 
  /* The data */
  byte                                             data[NV_UBROWSER_ELEMENT_SIZE];
} nvi_ubrowser_type;


typedef PACKED struct PACKED_POST{ 
  /* International Mobile Equipment Identity */
  byte                                             ue_imei[NV_UE_IMEI_SIZE];
} nvi_ue_imei_type;


typedef PACKED struct PACKED_POST{ 
  /* ICCID Value */
  uint8                                            iccid_data[NV_ICCID_MAX_SIZE];
  /* Terminal Profile Length */
  uint16                                           terminal_profile_len;
} nvi_uim_iccid_tpl_type;

/* Type to hold undp_hsu_mfgstr  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            undp_hsu_mfgstr[127];
} nvi_undp_hsu_mfgstr_type;

/* Type to hold undp_hsu_prodstr  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            undp_hsu_prodstr[127];
} nvi_undp_hsu_prodstr_type;


typedef PACKED struct PACKED_POST{ 
  /* UNDP VID-PID configuration */
  uint16                                           VID;
  /* Product ID */
  uint16                                           PID;
  /* Composition */
  uint16                                           composition;
} nvi_undp_hsu_vid_pid_type;


typedef PACKED struct PACKED_POST{ 
  /* UNDP Notebook OEM Test */
  boolean                                          call_accept_tis;
  /* undp_test_b1 */
  uint8                                            undp_test_b1;
  /* undp_test_b2 */
  uint8                                            undp_test_b2;
  /* undp_test_uw1 */
  uint16                                           undp_test_uw1;
  /* undp_test_uw2 */
  uint16                                           undp_test_uw2;
  /* undp_test_ul1 */
  uint32                                           undp_test_ul1;
  /* undp_test_ul2 */
  uint32                                           undp_test_ul2;
} nvi_undp_noem_test_type;


typedef PACKED struct PACKED_POST{ 
  /* undp_notebook_info */
  uint32                                           undp_notebook_id;
  /* undp_notebook_model_num */
  uint32                                           undp_notebook_model_num;
} nvi_undp_notebook_info_type;


typedef PACKED struct PACKED_POST{ 
  /* Set the drive strength of GPIOs that control the UIMs. */
  uint8                                            uim1_clk_drvstr;
  /* The drive strength of the UIM1 reset signal GPIO. */
  uint8                                            uim1_rst_drvstr;
  /* The drive strength of the UIM1 data signal GPIO. */
  uint8                                            uim1_data_drvstr;
  /* The drive strength of the UIM2 clock signal GPIO. */
  uint8                                            uim2_clk_drvstr;
  /* The drive strength of the UIM2 reset signal GPIO. */
  uint8                                            uim2_rst_drvstr;
  /* The drive strength of the UIM2 data signal GPIO. */
  uint8                                            uim2_data_drvstr;
} nvi_undp_uim_dvrstr_type;


typedef PACKED struct PACKED_POST{ 
  /* Access key */
  byte                                             key[NV_UP_MAX_KEY_SIZE];
} nvi_up_key_type;


typedef PACKED struct PACKED_POST{ 
  /* Number of valid ip addresses */
  word                                             numAddr;
  /* IP address */
  nv_ip_address_type                               addr[NV_IP_ADDRESS_TABLE_SIZE];
  /* Length of key field */
  byte                                             key_length;
  /* Obsolete key is stored in NV_UP_KEY_I */
  byte                                             obsolete[NV_UP_MAX_KEY_SIZE];
} nvi_up_link_info_type;

/* Type to hold uploadmedia_album_addr  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           uploadmedia_album_addr[NV_UPLOADMEDIA_ALBUM_ADDR_SIZ];
} nvi_uploadmedia_album_addr_type;

/* Type to hold uploadmedia_postcard_addr  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           uploadmedia_postcard_addr[NV_UPLOADMEDIA_POSTCARD_ADDR_SIZ];
} nvi_uploadmedia_postcard_addr_type;


typedef PACKED struct PACKED_POST{ 
  /* Roam Indicator value */
  byte                                             roam_ind;
  /* Control type */
  byte                                             control;
  /* The text entry */
  byte                                             text[NV_USER_ZONE_ENTRY_LENGTH];
} nvi_user_zone_type;


typedef PACKED struct PACKED_POST{ 
  /* Stores user selected sid to mcc mapping */
  uint8                                            tbl_len;
  /* sid to mmc mapping */
  uint32                                           sid_to_mcc_list[NV_SID_TO_MCC_TBL_LEN];
} nvi_usr_sid_to_mcc_assoc_type;

/* Type to hold vbatt_comp_thresholds  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            vbatt_comp_thresholds[2];
} nvi_vbatt_comp_thresholds_type;


typedef PACKED struct PACKED_POST{ 
  /* IS-835D parameters related to version capability indication and MPIT */
  uint16                                           num_vci_retries;
  /* VCI Timeout */
  int32                                            vci_timeout;
  /* VCI enable or disable (1 = enable, 0 = disable) */
  boolean                                          vci_enable;
  /* MPIT enable or disable (1 = enable, 0 = disable) */
  boolean                                          mpit_enable;
} nvi_vci_parameters_type;

/* Type to hold vco_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            vco_temp[64];
} nvi_vco_temp_type;

/* Type to hold video_default_name_prefix  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           video_default_name_prefix[NV_VIDEO_NAME_PREFIX_SIZ];
} nvi_video_default_name_prefix_type;

/* Type to hold voice_mail_line1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           voice_mail_line1[NV_VOICE_MAIL_LINE_SIZ];
} nvi_voice_mail_line1_type;

/* Type to hold wcdma_1500_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1500_drx_mode_sel[3];
} nvi_wcdma_1500_drx_mode_sel_type;

/* Type to hold wcdma_1500_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_exp_hdet_vs_agc_v2[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_1500_exp_hdet_vs_agc_v2_type;

/* Type to hold wcdma_1500_hs_switchpoints_shift  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_hs_switchpoints_shift[2];
} nvi_wcdma_1500_hs_switchpoints_shift_type;

/* Type to hold wcdma_1500_iaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_iaccum[6];
} nvi_wcdma_1500_iaccum_type;

/* Type to hold wcdma_1500_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_lna_phase_ctl[6];
} nvi_wcdma_1500_lna_phase_ctl_type;

/* Type to hold wcdma_1500_max_pwr_backoff_volt1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_max_pwr_backoff_volt1[4];
} nvi_wcdma_1500_max_pwr_backoff_volt1_type;

/* Type to hold wcdma_1500_max_pwr_backoff_volt2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_max_pwr_backoff_volt2[4];
} nvi_wcdma_1500_max_pwr_backoff_volt2_type;

/* Type to hold wcdma_1500_max_pwr_backoff_volt3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_max_pwr_backoff_volt3[4];
} nvi_wcdma_1500_max_pwr_backoff_volt3_type;

/* Type to hold wcdma_1500_pa_comp_down_r2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_pa_comp_down_r2_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1500_pa_comp_down_r2_vs_freq_type;

/* Type to hold wcdma_1500_pa_comp_down_r3_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_pa_comp_down_r3_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1500_pa_comp_down_r3_vs_freq_type;

/* Type to hold wcdma_1500_pa_comp_down_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_pa_comp_down_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1500_pa_comp_down_vs_freq_type;

/* Type to hold wcdma_1500_pa_comp_up_r2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_pa_comp_up_r2_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1500_pa_comp_up_r2_vs_freq_type;

/* Type to hold wcdma_1500_pa_comp_up_r3_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_pa_comp_up_r3_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1500_pa_comp_up_r3_vs_freq_type;

/* Type to hold wcdma_1500_pa_comp_up_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_pa_comp_up_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1500_pa_comp_up_vs_freq_type;

/* Type to hold wcdma_1500_pa_compensate_dn_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_pa_compensate_dn_with_dvs[10];
} nvi_wcdma_1500_pa_compensate_dn_with_dvs_type;

/* Type to hold wcdma_1500_rel6_tx_agc_offset  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1500_rel6_tx_agc_offset[7];
} nvi_wcdma_1500_rel6_tx_agc_offset_type;

/* Type to hold wcdma_1500_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_tx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1500_tx_cal_chan_type;

/* Type to hold wcdma_1500_tx_comp_vs_freq_0_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_comp_vs_freq_0_secondary[16];
} nvi_wcdma_1500_tx_comp_vs_freq_0_secondary_type;

/* Type to hold wcdma_1500_tx_comp_vs_freq_1_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_comp_vs_freq_1_secondary[16];
} nvi_wcdma_1500_tx_comp_vs_freq_1_secondary_type;

/* Type to hold wcdma_1500_tx_comp_vs_freq_2_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_comp_vs_freq_2_secondary[16];
} nvi_wcdma_1500_tx_comp_vs_freq_2_secondary_type;

/* Type to hold wcdma_1500_tx_comp_vs_freq_3_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_comp_vs_freq_3_secondary[16];
} nvi_wcdma_1500_tx_comp_vs_freq_3_secondary_type;

/* Type to hold wcdma_1500_tx_comp_vs_freq_sec_pdm_list  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_comp_vs_freq_sec_pdm_list[4];
} nvi_wcdma_1500_tx_comp_vs_freq_sec_pdm_list_type;

/* Type to hold wcdma_1500_tx_lin_master_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_lin_master_0_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_1500_tx_lin_master_0_enh_type;

/* Type to hold wcdma_1500_tx_lin_master_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_lin_master_3_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_1500_tx_lin_master_3_enh_type;

/* Type to hold wcdma_1500_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_1500_tx_pdm_lin_0_type;

/* Type to hold wcdma_1500_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_1500_tx_pdm_lin_1_type;

/* Type to hold wcdma_1500_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_1500_tx_pdm_lin_2_type;

/* Type to hold wcdma_1500_tx_pdm_lin_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_pdm_lin_3_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_1500_tx_pdm_lin_3_enh_type;

/* Type to hold wcdma_1500_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_1500_tx_pdm_lin_3_type;

/* Type to hold wcdma_1500_utran_tx_lim_vs_temp_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_utran_tx_lim_vs_temp_offset[8];
} nvi_wcdma_1500_utran_tx_lim_vs_temp_offset_type;

/* Type to hold wcdma_1800_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_exp_hdet_vs_agc_v2[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_1800_exp_hdet_vs_agc_v2_type;

/* Type to hold wcdma_1800_hs_switchpoints_shift  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_hs_switchpoints_shift[2];
} nvi_wcdma_1800_hs_switchpoints_shift_type;

/* Type to hold wcdma_1800_iaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_iaccum[6];
} nvi_wcdma_1800_iaccum_type;

/* Type to hold wcdma_1800_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1800_lna_offset_vs_freq_2_type;

/* Type to hold wcdma_1800_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1800_lna_offset_vs_freq_4_type;

/* Type to hold wcdma_1800_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1800_lna_offset_vs_freq_type;

/* Type to hold wcdma_1800_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_lna_phase_ctl[6];
} nvi_wcdma_1800_lna_phase_ctl_type;

/* Type to hold wcdma_1800_max_pwr_backoff_volt3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_max_pwr_backoff_volt3[4];
} nvi_wcdma_1800_max_pwr_backoff_volt3_type;

/* Type to hold wcdma_1800_pa_comp_down_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_pa_comp_down_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1800_pa_comp_down_vs_freq_type;

/* Type to hold wcdma_1800_pa_comp_up_r2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_pa_comp_up_r2_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1800_pa_comp_up_r2_vs_freq_type;

/* Type to hold wcdma_1800_pa_comp_up_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_pa_comp_up_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1800_pa_comp_up_vs_freq_type;

/* Type to hold wcdma_1800_pa_compensate_dn_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_pa_compensate_dn_with_dvs[10];
} nvi_wcdma_1800_pa_compensate_dn_with_dvs_type;

/* Type to hold wcdma_1800_pa_range_map  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_pa_range_map[4];
} nvi_wcdma_1800_pa_range_map_type;

/* Type to hold wcdma_1800_rel6_tx_agc_offset  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1800_rel6_tx_agc_offset[7];
} nvi_wcdma_1800_rel6_tx_agc_offset_type;

/* Type to hold wcdma_1800_rel6_tx_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1800_rel6_tx_mpr_backoff[7];
} nvi_wcdma_1800_rel6_tx_mpr_backoff_type;

/* Type to hold wcdma_1800_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_rx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1800_rx_cal_chan_type;

/* Type to hold wcdma_1800_tx_comp_vs_freq_0_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_comp_vs_freq_0_secondary[16];
} nvi_wcdma_1800_tx_comp_vs_freq_0_secondary_type;

/* Type to hold wcdma_1800_tx_comp_vs_freq_1_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_comp_vs_freq_1_secondary[16];
} nvi_wcdma_1800_tx_comp_vs_freq_1_secondary_type;

/* Type to hold wcdma_1800_tx_comp_vs_freq_2_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_comp_vs_freq_2_secondary[16];
} nvi_wcdma_1800_tx_comp_vs_freq_2_secondary_type;

/* Type to hold wcdma_1800_tx_comp_vs_freq_3_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_comp_vs_freq_3_secondary[16];
} nvi_wcdma_1800_tx_comp_vs_freq_3_secondary_type;

/* Type to hold wcdma_1800_tx_comp_vs_freq_sec_pdm_list  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_comp_vs_freq_sec_pdm_list[4];
} nvi_wcdma_1800_tx_comp_vs_freq_sec_pdm_list_type;

/* Type to hold wcdma_1800_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1800_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1800_tx_lim_vs_temp_type;

/* Type to hold wcdma_1800_tx_lin_master_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_lin_master_0_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_1800_tx_lin_master_0_enh_type;

/* Type to hold wcdma_1800_tx_lin_master_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_lin_master_3_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_1800_tx_lin_master_3_enh_type;

/* Type to hold wcdma_1800_tx_lin_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_lin_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1800_tx_lin_vs_temp_0_type;

/* Type to hold wcdma_1800_tx_lin_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_lin_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1800_tx_lin_vs_temp_1_type;

/* Type to hold wcdma_1800_tx_lin_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_lin_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1800_tx_lin_vs_temp_3_type;

/* Type to hold wcdma_1800_tx_pdm_lin_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_pdm_lin_0_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_1800_tx_pdm_lin_0_enh_type;

/* Type to hold wcdma_1800_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_1800_tx_pdm_lin_2_type;

/* Type to hold wcdma_1800_tx_pdm_lin_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_pdm_lin_3_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_1800_tx_pdm_lin_3_enh_type;

/* Type to hold wcdma_1800_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_1800_tx_pdm_lin_3_type;

/* Type to hold wcdma_1800_tx_slp_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_slp_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1800_tx_slp_vs_temp_0_type;

/* Type to hold wcdma_1800_tx_slp_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_slp_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1800_tx_slp_vs_temp_1_type;

/* Type to hold wcdma_1800_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1800_vga_gain_offset_vs_freq_type;

/* Type to hold wcdma_1800_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1800_vga_gain_offset_vs_temp_type;

/* Type to hold wcdma_1900_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1900_drx_mode_sel[3];
} nvi_wcdma_1900_drx_mode_sel_type;

/* Type to hold wcdma_1900_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1900_exp_hdet_vs_agc[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_1900_exp_hdet_vs_agc_type;

/* Type to hold wcdma_1900_hs_switchpoints_shift  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_hs_switchpoints_shift[2];
} nvi_wcdma_1900_hs_switchpoints_shift_type;

/* Type to hold wcdma_1900_iaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_iaccum[6];
} nvi_wcdma_1900_iaccum_type;

/* Type to hold wcdma_1900_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1900_lna_offset_vs_freq_2_type;

/* Type to hold wcdma_1900_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1900_lna_offset_vs_freq_3_type;

/* Type to hold wcdma_1900_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1900_lna_offset_vs_freq_4_type;

/* Type to hold wcdma_1900_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1900_lna_offset_vs_freq_type;

/* Type to hold wcdma_1900_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_lna_phase_ctl[6];
} nvi_wcdma_1900_lna_phase_ctl_type;

/* Type to hold wcdma_1900_max_pwr_backoff_volt1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_max_pwr_backoff_volt1[4];
} nvi_wcdma_1900_max_pwr_backoff_volt1_type;

/* Type to hold wcdma_1900_pa_comp_down_r3_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_pa_comp_down_r3_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1900_pa_comp_down_r3_vs_freq_type;

/* Type to hold wcdma_1900_pa_comp_down_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_pa_comp_down_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1900_pa_comp_down_vs_freq_type;

/* Type to hold wcdma_1900_pa_comp_up_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_pa_comp_up_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1900_pa_comp_up_vs_freq_type;

/* Type to hold wcdma_1900_pa_compensate_dn_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_pa_compensate_dn_with_dvs[10];
} nvi_wcdma_1900_pa_compensate_dn_with_dvs_type;

/* Type to hold wcdma_1900_pa_compensate_up_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_pa_compensate_up_with_dvs[10];
} nvi_wcdma_1900_pa_compensate_up_with_dvs_type;

/* Type to hold wcdma_1900_qaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_qaccum[6];
} nvi_wcdma_1900_qaccum_type;

/* Type to hold wcdma_1900_rel6_tx_agc_offset  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1900_rel6_tx_agc_offset[7];
} nvi_wcdma_1900_rel6_tx_agc_offset_type;

/* Type to hold wcdma_1900_rel6_tx_beta_scaling_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_rel6_tx_beta_scaling_comp[7];
} nvi_wcdma_1900_rel6_tx_beta_scaling_comp_type;

/* Type to hold wcdma_1900_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_rx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1900_rx_cal_chan_type;

/* Type to hold wcdma_1900_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_tx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1900_tx_cal_chan_type;

/* Type to hold wcdma_1900_tx_comp_vs_freq_0_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_comp_vs_freq_0_secondary[16];
} nvi_wcdma_1900_tx_comp_vs_freq_0_secondary_type;

/* Type to hold wcdma_1900_tx_comp_vs_freq_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_comp_vs_freq_0[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1900_tx_comp_vs_freq_0_type;

/* Type to hold wcdma_1900_tx_comp_vs_freq_1_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_comp_vs_freq_1_secondary[16];
} nvi_wcdma_1900_tx_comp_vs_freq_1_secondary_type;

/* Type to hold wcdma_1900_tx_comp_vs_freq_2_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_comp_vs_freq_2_secondary[16];
} nvi_wcdma_1900_tx_comp_vs_freq_2_secondary_type;

/* Type to hold wcdma_1900_tx_comp_vs_freq_3_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_comp_vs_freq_3_secondary[16];
} nvi_wcdma_1900_tx_comp_vs_freq_3_secondary_type;

/* Type to hold wcdma_1900_tx_comp_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_comp_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1900_tx_comp_vs_freq_3_type;

/* Type to hold wcdma_1900_tx_comp_vs_freq_sec_pdm_list  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_comp_vs_freq_sec_pdm_list[4];
} nvi_wcdma_1900_tx_comp_vs_freq_sec_pdm_list_type;

/* Type to hold wcdma_1900_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1900_tx_lim_vs_freq_type;

/* Type to hold wcdma_1900_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1900_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1900_tx_lim_vs_temp_type;

/* Type to hold wcdma_1900_tx_lin_master_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_lin_master_0_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_1900_tx_lin_master_0_enh_type;

/* Type to hold wcdma_1900_tx_lin_master_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_lin_master_0[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_1900_tx_lin_master_0_type;

/* Type to hold wcdma_1900_tx_lin_master_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_lin_master_1[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_1900_tx_lin_master_1_type;

/* Type to hold wcdma_1900_tx_lin_master_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_lin_master_3_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_1900_tx_lin_master_3_enh_type;

/* Type to hold wcdma_1900_tx_lin_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_lin_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1900_tx_lin_vs_temp_0_type;

/* Type to hold wcdma_1900_tx_lin_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_lin_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1900_tx_lin_vs_temp_1_type;

/* Type to hold wcdma_1900_tx_pdm_lin_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_pdm_lin_0_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_1900_tx_pdm_lin_0_enh_type;

/* Type to hold wcdma_1900_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_1900_tx_pdm_lin_0_type;

/* Type to hold wcdma_1900_tx_pdm_lin_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_pdm_lin_3_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_1900_tx_pdm_lin_3_enh_type;

/* Type to hold wcdma_1900_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_1900_tx_pdm_lin_3_type;

/* Type to hold wcdma_1900_tx_slp_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_slp_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1900_tx_slp_vs_temp_0_type;

/* Type to hold wcdma_1900_tx_slp_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_slp_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1900_tx_slp_vs_temp_1_type;

/* Type to hold wcdma_1900_tx_slp_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_slp_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1900_tx_slp_vs_temp_2_type;

/* Type to hold wcdma_1900_tx_slp_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_slp_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1900_tx_slp_vs_temp_3_type;

/* Type to hold wcdma_1900_utran_tx_lim_vs_temp_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_utran_tx_lim_vs_temp_offset[8];
} nvi_wcdma_1900_utran_tx_lim_vs_temp_offset_type;

/* Type to hold wcdma_1900_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1900_vga_gain_offset_vs_freq_type;

/* Type to hold wcdma_2100_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_2100_exp_hdet_vs_agc_v2[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_2100_exp_hdet_vs_agc_v2_type;

/* Type to hold wcdma_2100_rxf_ici_cal_data_car0  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           wcdma_2100_rxf_ici_cal_data_car0[17];
} nvi_wcdma_2100_rxf_ici_cal_data_car0_type;

/* Type to hold wcdma_2100_rxf_ici_cal_data_car1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           wcdma_2100_rxf_ici_cal_data_car1[17];
} nvi_wcdma_2100_rxf_ici_cal_data_car1_type;

/* Type to hold wcdma_2100_tx_lin_master_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_2100_tx_lin_master_0_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_2100_tx_lin_master_0_enh_type;

/* Type to hold wcdma_2100_tx_lin_master_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_2100_tx_lin_master_3_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_2100_tx_lin_master_3_enh_type;

/* Type to hold wcdma_2100_tx_pdm_lin_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_2100_tx_pdm_lin_0_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_2100_tx_pdm_lin_0_enh_type;

/* Type to hold wcdma_2100_tx_pdm_lin_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_2100_tx_pdm_lin_3_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_2100_tx_pdm_lin_3_enh_type;

/* Type to hold wcdma_800_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_800_exp_hdet_vs_agc[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_800_exp_hdet_vs_agc_type;

/* Type to hold wcdma_800_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_exp_hdet_vs_agc_v2[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_800_exp_hdet_vs_agc_v2_type;

/* Type to hold wcdma_800_hs_switchpoints_shift  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_hs_switchpoints_shift[2];
} nvi_wcdma_800_hs_switchpoints_shift_type;

/* Type to hold wcdma_800_iaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_iaccum[6];
} nvi_wcdma_800_iaccum_type;

/* Type to hold wcdma_800_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_800_lna_offset_vs_freq_3_type;

/* Type to hold wcdma_800_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_lna_phase_ctl[6];
} nvi_wcdma_800_lna_phase_ctl_type;

/* Type to hold wcdma_800_max_pwr_backoff_volt1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_max_pwr_backoff_volt1[4];
} nvi_wcdma_800_max_pwr_backoff_volt1_type;

/* Type to hold wcdma_800_max_pwr_backoff_volt2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_max_pwr_backoff_volt2[4];
} nvi_wcdma_800_max_pwr_backoff_volt2_type;

/* Type to hold wcdma_800_max_pwr_backoff_volt3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_max_pwr_backoff_volt3[4];
} nvi_wcdma_800_max_pwr_backoff_volt3_type;

/* Type to hold wcdma_800_max_pwr_backoff_voltages  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_800_max_pwr_backoff_voltages[3];
} nvi_wcdma_800_max_pwr_backoff_voltages_type;

/* Type to hold wcdma_800_pa_comp_down_r2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_pa_comp_down_r2_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_800_pa_comp_down_r2_vs_freq_type;

/* Type to hold wcdma_800_pa_comp_down_r3_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_pa_comp_down_r3_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_800_pa_comp_down_r3_vs_freq_type;

/* Type to hold wcdma_800_pa_comp_down_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_pa_comp_down_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_800_pa_comp_down_vs_freq_type;

/* Type to hold wcdma_800_pa_comp_up_r2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_pa_comp_up_r2_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_800_pa_comp_up_r2_vs_freq_type;

/* Type to hold wcdma_800_pa_comp_up_r3_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_pa_comp_up_r3_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_800_pa_comp_up_r3_vs_freq_type;

/* Type to hold wcdma_800_pa_comp_up_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_pa_comp_up_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_800_pa_comp_up_vs_freq_type;

/* Type to hold wcdma_800_pa_compensate_dn_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_pa_compensate_dn_with_dvs[10];
} nvi_wcdma_800_pa_compensate_dn_with_dvs_type;

/* Type to hold wcdma_800_pa_compensate_up_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_pa_compensate_up_with_dvs[10];
} nvi_wcdma_800_pa_compensate_up_with_dvs_type;

/* Type to hold wcdma_800_qaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_qaccum[6];
} nvi_wcdma_800_qaccum_type;

/* Type to hold wcdma_800_rel6_tx_agc_offset  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_800_rel6_tx_agc_offset[7];
} nvi_wcdma_800_rel6_tx_agc_offset_type;

/* Type to hold wcdma_800_rel6_tx_beta_scaling_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_rel6_tx_beta_scaling_comp[7];
} nvi_wcdma_800_rel6_tx_beta_scaling_comp_type;

/* Type to hold wcdma_800_rel6_tx_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_800_rel6_tx_mpr_backoff[7];
} nvi_wcdma_800_rel6_tx_mpr_backoff_type;

/* Type to hold wcdma_800_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_rx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_800_rx_cal_chan_type;

/* Type to hold wcdma_800_rxf_ici_cal_data_car0  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           wcdma_800_rxf_ici_cal_data_car0[17];
} nvi_wcdma_800_rxf_ici_cal_data_car0_type;

/* Type to hold wcdma_800_rxf_ici_cal_data_car1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           wcdma_800_rxf_ici_cal_data_car1[17];
} nvi_wcdma_800_rxf_ici_cal_data_car1_type;

/* Type to hold wcdma_800_tx_comp_vs_freq_0_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_comp_vs_freq_0_secondary[16];
} nvi_wcdma_800_tx_comp_vs_freq_0_secondary_type;

/* Type to hold wcdma_800_tx_comp_vs_freq_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_comp_vs_freq_0[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_800_tx_comp_vs_freq_0_type;

/* Type to hold wcdma_800_tx_comp_vs_freq_1_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_comp_vs_freq_1_secondary[16];
} nvi_wcdma_800_tx_comp_vs_freq_1_secondary_type;

/* Type to hold wcdma_800_tx_comp_vs_freq_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_comp_vs_freq_1[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_800_tx_comp_vs_freq_1_type;

/* Type to hold wcdma_800_tx_comp_vs_freq_2_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_comp_vs_freq_2_secondary[16];
} nvi_wcdma_800_tx_comp_vs_freq_2_secondary_type;

/* Type to hold wcdma_800_tx_comp_vs_freq_3_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_comp_vs_freq_3_secondary[16];
} nvi_wcdma_800_tx_comp_vs_freq_3_secondary_type;

/* Type to hold wcdma_800_tx_comp_vs_freq_sec_pdm_list  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_comp_vs_freq_sec_pdm_list[4];
} nvi_wcdma_800_tx_comp_vs_freq_sec_pdm_list_type;

/* Type to hold wcdma_800_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_800_tx_lim_vs_freq_type;

/* Type to hold wcdma_800_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_800_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_800_tx_lim_vs_temp_type;

/* Type to hold wcdma_800_tx_lin_master_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_lin_master_0_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_800_tx_lin_master_0_enh_type;

/* Type to hold wcdma_800_tx_lin_master_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_lin_master_0[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_800_tx_lin_master_0_type;

/* Type to hold wcdma_800_tx_lin_master_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_lin_master_1[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_800_tx_lin_master_1_type;

/* Type to hold wcdma_800_tx_lin_master_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_lin_master_3_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_800_tx_lin_master_3_enh_type;

/* Type to hold wcdma_800_tx_lin_master_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_lin_master_3[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_800_tx_lin_master_3_type;

/* Type to hold wcdma_800_tx_lin_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_lin_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_800_tx_lin_vs_temp_0_type;

/* Type to hold wcdma_800_tx_lin_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_lin_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_800_tx_lin_vs_temp_1_type;

/* Type to hold wcdma_800_tx_pdm_lin_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_pdm_lin_0_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_800_tx_pdm_lin_0_enh_type;

/* Type to hold wcdma_800_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_800_tx_pdm_lin_1_type;

/* Type to hold wcdma_800_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_800_tx_pdm_lin_2_type;

/* Type to hold wcdma_800_tx_pdm_lin_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_pdm_lin_3_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_800_tx_pdm_lin_3_enh_type;

/* Type to hold wcdma_800_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_800_tx_pdm_lin_3_type;

/* Type to hold wcdma_800_tx_slp_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_slp_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_800_tx_slp_vs_temp_0_type;

/* Type to hold wcdma_800_tx_slp_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_slp_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_800_tx_slp_vs_temp_1_type;

/* Type to hold wcdma_800_utran_tx_lim_vs_temp_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_utran_tx_lim_vs_temp_offset[8];
} nvi_wcdma_800_utran_tx_lim_vs_temp_offset_type;

/* Type to hold wcdma_800_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_800_vga_gain_offset_vs_freq_type;

/* Type to hold wcdma_800_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_800_vga_gain_offset_vs_temp_type;

/* Type to hold wcdma_900_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_900_drx_mode_sel[3];
} nvi_wcdma_900_drx_mode_sel_type;

/* Type to hold wcdma_900_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_900_exp_hdet_vs_agc[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_900_exp_hdet_vs_agc_type;

/* Type to hold wcdma_900_iaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_iaccum[6];
} nvi_wcdma_900_iaccum_type;

/* Type to hold wcdma_900_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_900_lna_offset_vs_freq_3_type;

/* Type to hold wcdma_900_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_900_lna_offset_vs_freq_4_type;

/* Type to hold wcdma_900_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_900_lna_offset_vs_freq_type;

/* Type to hold wcdma_900_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_lna_phase_ctl[6];
} nvi_wcdma_900_lna_phase_ctl_type;

/* Type to hold wcdma_900_pa_comp_up_r2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_pa_comp_up_r2_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_900_pa_comp_up_r2_vs_freq_type;

/* Type to hold wcdma_900_pa_comp_up_r3_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_pa_comp_up_r3_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_900_pa_comp_up_r3_vs_freq_type;

/* Type to hold wcdma_900_pa_comp_up_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_pa_comp_up_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_900_pa_comp_up_vs_freq_type;

/* Type to hold wcdma_900_pa_compensate_dn_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_pa_compensate_dn_with_dvs[10];
} nvi_wcdma_900_pa_compensate_dn_with_dvs_type;

/* Type to hold wcdma_900_pa_compensate_up_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_pa_compensate_up_with_dvs[10];
} nvi_wcdma_900_pa_compensate_up_with_dvs_type;

/* Type to hold wcdma_900_qaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_qaccum[6];
} nvi_wcdma_900_qaccum_type;

/* Type to hold wcdma_900_rel6_tx_agc_offset  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_900_rel6_tx_agc_offset[7];
} nvi_wcdma_900_rel6_tx_agc_offset_type;

/* Type to hold wcdma_900_rel6_tx_beta_scaling_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_rel6_tx_beta_scaling_comp[7];
} nvi_wcdma_900_rel6_tx_beta_scaling_comp_type;

/* Type to hold wcdma_900_rel6_tx_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_900_rel6_tx_mpr_backoff[7];
} nvi_wcdma_900_rel6_tx_mpr_backoff_type;

/* Type to hold wcdma_900_tx_comp_vs_freq_0_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_comp_vs_freq_0_secondary[16];
} nvi_wcdma_900_tx_comp_vs_freq_0_secondary_type;

/* Type to hold wcdma_900_tx_comp_vs_freq_1_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_comp_vs_freq_1_secondary[16];
} nvi_wcdma_900_tx_comp_vs_freq_1_secondary_type;

/* Type to hold wcdma_900_tx_comp_vs_freq_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_comp_vs_freq_1[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_900_tx_comp_vs_freq_1_type;

/* Type to hold wcdma_900_tx_comp_vs_freq_2_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_comp_vs_freq_2_secondary[16];
} nvi_wcdma_900_tx_comp_vs_freq_2_secondary_type;

/* Type to hold wcdma_900_tx_comp_vs_freq_3_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_comp_vs_freq_3_secondary[16];
} nvi_wcdma_900_tx_comp_vs_freq_3_secondary_type;

/* Type to hold wcdma_900_tx_comp_vs_freq_sec_pdm_list  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_comp_vs_freq_sec_pdm_list[4];
} nvi_wcdma_900_tx_comp_vs_freq_sec_pdm_list_type;

/* Type to hold wcdma_900_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_900_tx_lim_vs_freq_type;

/* Type to hold wcdma_900_tx_lin_master_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_lin_master_0_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_900_tx_lin_master_0_enh_type;

/* Type to hold wcdma_900_tx_lin_master_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_lin_master_1[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_900_tx_lin_master_1_type;

/* Type to hold wcdma_900_tx_lin_master_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_lin_master_3_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_900_tx_lin_master_3_enh_type;

/* Type to hold wcdma_900_tx_lin_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_lin_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_900_tx_lin_vs_temp_0_type;

/* Type to hold wcdma_900_tx_lin_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_900_tx_lin_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_900_tx_lin_vs_temp_2_type;

/* Type to hold wcdma_900_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_900_tx_pdm_lin_1_type;

/* Type to hold wcdma_900_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_900_tx_pdm_lin_2_type;

/* Type to hold wcdma_900_tx_pdm_lin_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_pdm_lin_3_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_900_tx_pdm_lin_3_enh_type;

/* Type to hold wcdma_900_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_900_tx_pdm_lin_3_type;

/* Type to hold wcdma_900_tx_slp_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_slp_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_900_tx_slp_vs_temp_1_type;

/* Type to hold wcdma_900_utran_tx_lim_vs_temp_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_utran_tx_lim_vs_temp_offset[8];
} nvi_wcdma_900_utran_tx_lim_vs_temp_offset_type;

/* Type to hold wcdma_bc4_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_bc4_drx_mode_sel[3];
} nvi_wcdma_bc4_drx_mode_sel_type;

/* Type to hold wcdma_bc4_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_exp_hdet_vs_agc_v2[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_bc4_exp_hdet_vs_agc_v2_type;

/* Type to hold wcdma_bc4_iaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_iaccum[6];
} nvi_wcdma_bc4_iaccum_type;

/* Type to hold wcdma_bc4_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_bc4_lna_offset_vs_freq_2_type;

/* Type to hold wcdma_bc4_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_bc4_lna_offset_vs_freq_3_type;

/* Type to hold wcdma_bc4_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_bc4_lna_offset_vs_freq_4_type;

/* Type to hold wcdma_bc4_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_lna_phase_ctl[6];
} nvi_wcdma_bc4_lna_phase_ctl_type;

/* Type to hold wcdma_bc4_pa_range_map  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_pa_range_map[4];
} nvi_wcdma_bc4_pa_range_map_type;

/* Type to hold wcdma_bc4_rel6_tx_agc_offset  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_bc4_rel6_tx_agc_offset[7];
} nvi_wcdma_bc4_rel6_tx_agc_offset_type;

/* Type to hold wcdma_bc4_rel6_tx_beta_scaling_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_rel6_tx_beta_scaling_comp[7];
} nvi_wcdma_bc4_rel6_tx_beta_scaling_comp_type;

/* Type to hold wcdma_bc4_rel6_tx_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_bc4_rel6_tx_mpr_backoff[7];
} nvi_wcdma_bc4_rel6_tx_mpr_backoff_type;

/* Type to hold wcdma_bc4_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_bc4_tx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_bc4_tx_cal_chan_type;

/* Type to hold wcdma_bc4_tx_comp_vs_freq_0_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_comp_vs_freq_0_secondary[16];
} nvi_wcdma_bc4_tx_comp_vs_freq_0_secondary_type;

/* Type to hold wcdma_bc4_tx_comp_vs_freq_1_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_comp_vs_freq_1_secondary[16];
} nvi_wcdma_bc4_tx_comp_vs_freq_1_secondary_type;

/* Type to hold wcdma_bc4_tx_comp_vs_freq_2_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_comp_vs_freq_2_secondary[16];
} nvi_wcdma_bc4_tx_comp_vs_freq_2_secondary_type;

/* Type to hold wcdma_bc4_tx_comp_vs_freq_3_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_comp_vs_freq_3_secondary[16];
} nvi_wcdma_bc4_tx_comp_vs_freq_3_secondary_type;

/* Type to hold wcdma_bc4_tx_comp_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_comp_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_bc4_tx_comp_vs_freq_3_type;

/* Type to hold wcdma_bc4_tx_comp_vs_freq_sec_pdm_list  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_comp_vs_freq_sec_pdm_list[4];
} nvi_wcdma_bc4_tx_comp_vs_freq_sec_pdm_list_type;

/* Type to hold wcdma_bc4_tx_lin_master_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_lin_master_1[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_bc4_tx_lin_master_1_type;

/* Type to hold wcdma_bc4_tx_lin_master_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_lin_master_3_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_bc4_tx_lin_master_3_enh_type;

/* Type to hold wcdma_bc4_tx_lin_master_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_lin_master_3[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_bc4_tx_lin_master_3_type;

/* Type to hold wcdma_bc4_tx_lin_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_lin_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_bc4_tx_lin_vs_temp_0_type;

/* Type to hold wcdma_bc4_tx_pdm_lin_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_pdm_lin_0_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_bc4_tx_pdm_lin_0_enh_type;

/* Type to hold wcdma_bc4_tx_pdm_lin_3_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_pdm_lin_3_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_bc4_tx_pdm_lin_3_enh_type;

/* Type to hold wcdma_bc4_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_bc4_tx_pdm_lin_3_type;

/* Type to hold wcdma_bc4_tx_slp_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_slp_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_bc4_tx_slp_vs_temp_0_type;

/* Type to hold wcdma_bc4_utran_tx_lim_vs_temp_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_bc4_utran_tx_lim_vs_temp_offset[8];
} nvi_wcdma_bc4_utran_tx_lim_vs_temp_offset_type;

/* Type to hold wcdma_bc4_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_bc4_vga_gain_offset_vs_freq_type;

/* Type to hold wcdma_bc4_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_bc4_vga_gain_offset_vs_temp_type;

/* Type to hold wcdma_c0_tx_comp_vs_freq_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_c0_tx_comp_vs_freq_0[16];
} nvi_wcdma_c0_tx_comp_vs_freq_0_type;

/* Type to hold wcdma_c0_tx_comp_vs_freq_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_c0_tx_comp_vs_freq_1[16];
} nvi_wcdma_c0_tx_comp_vs_freq_1_type;

/* Type to hold wcdma_c1_tx_comp_vs_freq_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_c1_tx_comp_vs_freq_0[16];
} nvi_wcdma_c1_tx_comp_vs_freq_0_type;

/* Type to hold wcdma_c1_tx_comp_vs_freq_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_c1_tx_comp_vs_freq_1[16];
} nvi_wcdma_c1_tx_comp_vs_freq_1_type;

/* Type to hold wcdma_dc1_rxf_ici_cal_data_car0  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           wcdma_dc1_rxf_ici_cal_data_car0[17];
} nvi_wcdma_dc1_rxf_ici_cal_data_car0_type;

/* Type to hold wcdma_dc1_rxf_ici_cal_data_car1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           wcdma_dc1_rxf_ici_cal_data_car1[17];
} nvi_wcdma_dc1_rxf_ici_cal_data_car1_type;

/* Type to hold wcdma_dc2_rxf_ici_cal_data_car0  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           wcdma_dc2_rxf_ici_cal_data_car0[17];
} nvi_wcdma_dc2_rxf_ici_cal_data_car0_type;

/* Type to hold wcdma_dc2_rxf_ici_cal_data_car1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           wcdma_dc2_rxf_ici_cal_data_car1[17];
} nvi_wcdma_dc2_rxf_ici_cal_data_car1_type;

/* Type to hold wcdma_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_exp_hdet_vs_agc[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_exp_hdet_vs_agc_type;

/* Type to hold wcdma_iaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_iaccum[6];
} nvi_wcdma_iaccum_type;

/* Type to hold wcdma_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_lna_offset_vs_freq_4_type;

/* Type to hold wcdma_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_lna_offset_vs_freq_type;

/* Type to hold wcdma_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_lna_phase_ctl[6];
} nvi_wcdma_lna_phase_ctl_type;

/* Type to hold wcdma_max_pwr_backoff_volt1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_max_pwr_backoff_volt1[4];
} nvi_wcdma_max_pwr_backoff_volt1_type;

/* Type to hold wcdma_max_pwr_backoff_volt2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_max_pwr_backoff_volt2[4];
} nvi_wcdma_max_pwr_backoff_volt2_type;

/* Type to hold wcdma_max_pwr_backoff_volt3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_max_pwr_backoff_volt3[4];
} nvi_wcdma_max_pwr_backoff_volt3_type;

/* Type to hold wcdma_max_pwr_backoff_voltages  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_max_pwr_backoff_voltages[3];
} nvi_wcdma_max_pwr_backoff_voltages_type;

/* Type to hold wcdma_pa_comp_down_r3_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_pa_comp_down_r3_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_pa_comp_down_r3_vs_freq_type;

/* Type to hold wcdma_pa_comp_down_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_pa_comp_down_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_pa_comp_down_vs_freq_type;

/* Type to hold wcdma_pa_comp_up_r3_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_pa_comp_up_r3_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_pa_comp_up_r3_vs_freq_type;

/* Type to hold wcdma_pa_comp_up_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_pa_comp_up_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_pa_comp_up_vs_freq_type;

/* Type to hold wcdma_pa_compensate_dn_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_pa_compensate_dn_with_dvs[10];
} nvi_wcdma_pa_compensate_dn_with_dvs_type;

/* Type to hold wcdma_pa_compensate_up_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_pa_compensate_up_with_dvs[10];
} nvi_wcdma_pa_compensate_up_with_dvs_type;

/* Type to hold wcdma_pa_range_map  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_pa_range_map[4];
} nvi_wcdma_pa_range_map_type;

/* Type to hold wcdma_qaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_qaccum[6];
} nvi_wcdma_qaccum_type;

/* Type to hold wcdma_rel6_tx_agc_offset  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_rel6_tx_agc_offset[7];
} nvi_wcdma_rel6_tx_agc_offset_type;

/* Type to hold wcdma_rel6_tx_beta_scaling_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_rel6_tx_beta_scaling_comp[7];
} nvi_wcdma_rel6_tx_beta_scaling_comp_type;

/* Type to hold wcdma_rel6_tx_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_rel6_tx_mpr_backoff[7];
} nvi_wcdma_rel6_tx_mpr_backoff_type;

/* Type to hold wcdma_rel7_pa_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_rel7_pa_mpr_backoff[6];
} nvi_wcdma_rel7_pa_mpr_backoff_type;

/* Type to hold wcdma_rx_comp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_rx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_rx_comp_vs_freq_type;

/* Type to hold wcdma_rx_lin  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_rx_lin[NV_WCDMA_RX_LIN_SIZ];
} nvi_wcdma_rx_lin_type;

/* Type to hold wcdma_rx_lin_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_rx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_rx_lin_vs_temp_type;

/* Type to hold wcdma_rx_slp_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_rx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_rx_slp_vs_temp_type;

/* Type to hold wcdma_therm  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_therm[2];
} nvi_wcdma_therm_type;

/* Type to hold wcdma_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_tx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_tx_cal_chan_type;

/* Type to hold wcdma_tx_comp_vs_freq_0_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_comp_vs_freq_0_secondary[16];
} nvi_wcdma_tx_comp_vs_freq_0_secondary_type;

/* Type to hold wcdma_tx_comp_vs_freq_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_comp_vs_freq_0[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_tx_comp_vs_freq_0_type;

/* Type to hold wcdma_tx_comp_vs_freq_1_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_comp_vs_freq_1_secondary[16];
} nvi_wcdma_tx_comp_vs_freq_1_secondary_type;

/* Type to hold wcdma_tx_comp_vs_freq_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_comp_vs_freq_1[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_tx_comp_vs_freq_1_type;

/* Type to hold wcdma_tx_comp_vs_freq_2_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_comp_vs_freq_2_secondary[16];
} nvi_wcdma_tx_comp_vs_freq_2_secondary_type;

/* Type to hold wcdma_tx_comp_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_comp_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_tx_comp_vs_freq_2_type;

/* Type to hold wcdma_tx_comp_vs_freq_3_secondary  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_comp_vs_freq_3_secondary[16];
} nvi_wcdma_tx_comp_vs_freq_3_secondary_type;

/* Type to hold wcdma_tx_comp_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_comp_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_tx_comp_vs_freq_3_type;

/* Type to hold wcdma_tx_comp_vs_freq_sec_pdm_list  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_tx_comp_vs_freq_sec_pdm_list[4];
} nvi_wcdma_tx_comp_vs_freq_sec_pdm_list_type;

/* Type to hold wcdma_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_tx_lim_vs_freq_type;

/* Type to hold wcdma_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_tx_lim_vs_temp_type;

/* Type to hold wcdma_tx_lim_vs_volt_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_lim_vs_volt_offset[3];
} nvi_wcdma_tx_lim_vs_volt_offset_type;

/* Type to hold wcdma_tx_lin_master_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_tx_lin_master_1[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_tx_lin_master_1_type;

/* Type to hold wcdma_tx_lin_master_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_tx_lin_master_2[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_tx_lin_master_2_type;

/* Type to hold wcdma_tx_lin_master_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_tx_lin_master_3[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_tx_lin_master_3_type;

/* Type to hold wcdma_tx_lin_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_lin_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_tx_lin_vs_temp_0_type;

/* Type to hold wcdma_tx_lin_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_lin_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_tx_lin_vs_temp_1_type;

/* Type to hold wcdma_tx_lin_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_lin_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_tx_lin_vs_temp_2_type;

/* Type to hold wcdma_tx_lin_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_lin_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_tx_lin_vs_temp_3_type;

/* Type to hold wcdma_tx_slp_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_slp_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_tx_slp_vs_temp_0_type;

/* Type to hold wcdma_tx_slp_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_slp_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_tx_slp_vs_temp_1_type;

/* Type to hold wcdma_tx_slp_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_slp_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_tx_slp_vs_temp_3_type;

/* Type to hold wcdma_utran_tx_lim_vs_temp_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_utran_tx_lim_vs_temp_offset[8];
} nvi_wcdma_utran_tx_lim_vs_temp_offset_type;

/* Type to hold wcdma_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_vga_gain_offset_vs_freq_type;

/* Type to hold wcdma_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_vga_gain_offset_vs_temp_type;


typedef PACKED struct PACKED_POST{ 
  /* Warranty date code */
  byte                                             wdc[NV_WDC_LTRS];
  /* in case the wdc def. changes */
  byte                                             extra[3];
} nvi_wdc_type;


typedef PACKED struct PACKED_POST{ 
  /* IOTA: Proxy server flags */
  int16                                            wFlags;
  /* IOTA Proxy server IP */
  uint32                                           dwIP[NV_MAX_WEB_SVRS];
  /* IOTA proxy port */
  uint16                                           wPort[NV_MAX_WEB_SVRS];
  /* IOTA proxy DNS */
  uint32                                           dwDNS[NV_MAX_WEB_SVRS];
  /* IOTA proxy Linger Timer */
  uint32                                           dwLinger;
} nvi_web_info_type;


typedef PACKED struct PACKED_POST{ 
  /* WLAN BSS type preference */
  uint32                                           bss_type_pref;
} nvi_wlan_bss_type_pref;

/* Type to hold wlan_mac_address  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wlan_mac_address[6];
} nvi_wlan_mac_address_type;

/* Type to hold wlan_uuid  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wlan_uuid[16];
} nvi_wlan_uuid_type;


typedef PACKED struct PACKED_POST{ 
  /* Structure to describe the coefficients of the C1 to C2/C3 conversions  */
  int32                                            c3;
  /* units of 2**-28 ppm/C**2 */
  int32                                            c2;
  /* units of 2**-24 ppm/C */
  int32                                            c1;
  /* indicator of the quality of the coefficients */
  int32                                            c0;
  /*  units of 2**-12 ppm */
  int32                                            t0;
  /*  units of 2**-32 ppm/C**3 */
  int32                                            t0p;
  /* PMIC compensation factor */
  int32                                            p;
  /* quality indicator of the coefficients */
  word                                             ft_qual_ind;
  /* PMIC compensation factor */
  uint8                                            xo_trim;
} nvi_xo_cal_fac_data_type;


typedef PACKED struct PACKED_POST{ 
  /*  units of 2**-32 ppm/C**3 */
  int32                                            c3;
  /* units of 2**-28 ppm/C**2 */
  int32                                            c2;
  /* units of 2**-24 ppm/C */
  int32                                            c1;
  /*  units of 2**-12 ppm */
  int32                                            c0;
  /*  units of 2**-12 ppm */
  int32                                            t0;
  /*  units of 2**-32 ppm/C**3 */
  int32                                            t0p;
  /* PMIC compensation factor */
  int32                                            p;
  /* timestamp of last update */
  int64                                            timestamp;
  /* quality indicator of the coefficients */
  word                                             ft_qual_ind;
  /* PMIC compensation factor */
  uint8                                            xo_trim;
  /* quality indicator of the coefficients */
  uint16                                           ft_sample_cnt;
  
  word                                             state;
} nvi_xo_cal_field_data_type;


typedef PACKED struct PACKED_POST{ 
  
  int32                                            c1toc2_0;
  
  int32                                            c1toc2_1;
  
  int32                                            c1toc3_0;
  
  int32                                            c1toc3_1;
} nvi_xo_cal_ft_conv_type;


typedef PACKED struct PACKED_POST{ 
  /* Current XO Trim value */
  uint8                                            current;
  /* XO Trim value that the VCO_TEMP table is based off of */
  uint8                                            table;
} nvi_xo_trim_vals_type;


typedef PACKED struct PACKED_POST{ 
  /* GSM_850 systematic gain correction applied to AMAM table */
  int16                                            gain_percent;
  /* GSM_850 systematic dc correction applied to AMAM table */
  int16                                            dc_percent;
} nvi_amam_sys_gain_dc_corr;

/* Type to hold bc3_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc3_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_bc3_tx_pdm_lin_1_type;

/* Type to hold bc7_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc7_exp_hdet_vs_agc_v2[16];
} nvi_bc7_exp_hdet_vs_agc_v2_type;

/* Type to hold bcx_block_vco_tune_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_vco_tune_2[NV_VCO_CAL_LENGTH];
} nvi_bcx_block_vco_tune_2_type;

/* Type to hold bcx_hdr_reva_tx_predistort  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bcx_hdr_reva_tx_predistort[16];
} nvi_bcx_hdr_reva_tx_predistort_type;

/* Type to hold c1_bcx_block_1_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bcx_block_1_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bcx_block_1_lna_1_offset_vs_freq_type;


typedef PACKED struct PACKED_POST{ 
  /* When the metric reading falls above upper the MS uses any RX chain */
  int16                                            upper_thresh;
  /* When the metric reading falls below lower the MS uses the best RX chain */
  int16                                            lower_thresh;
} nvi_cdma_rx_chain_sel_thresh_type;

/* Type to hold dcs_prdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_12[30];
} nvi_dcs_prdi_12_type;

/* Type to hold display_language_options  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           display_language_options[NV_LANGUAGE_COUNT];
} nvi_display_language_options_type;


typedef PACKED struct PACKED_POST{ 
  /* Enables/disables dynamic clock frequency scaling */
  boolean                                          dyn_clock_on;
  /* Enables/disables dynamic voltage scaling */
  boolean                                          dyn_voltage_on;
} nvi_dyn_clock_voltage_type;

/* Type to hold gsm_1900_prdi_03  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_03[30];
} nvi_gsm_1900_prdi_03_type;

/* Type to hold gsm_1900_vh_th_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_th_prui_15[30];
} nvi_gsm_1900_vh_th_prui_15_type;

/* Type to hold gsm_1900_vm_tm_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_tm_brdi_15[30];
} nvi_gsm_1900_vm_tm_brdi_15_type;

/* Type to hold gsm_1900_vm_tm_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_tm_brui_15[30];
} nvi_gsm_1900_vm_tm_brui_15_type;

/* Type to hold gsm_vl_tl_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_tl_prui_13[30];
} nvi_gsm_vl_tl_prui_13_type;

/* Type to hold gsm_vl_tm_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_tm_brdi_13[30];
} nvi_gsm_vl_tm_brdi_13_type;

/* Type to hold mbp_rf_dvbh_gs1_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_dvbh_gs1_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_dvbh_gs1_cal_type;


typedef PACKED struct PACKED_POST{ 
  /* Length of Password */
  byte                                             password_len;
  /* The Password */
  byte                                             password[NV_MAX_PPP_PASSWORD_LENGTH];
} nvi_ppp_password_type;

/* Type to hold pwr_backoff_vs_volt_low  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            pwr_backoff_vs_volt_low[NV_TX_BACKOFF_TABLE_SIZE];
} nvi_pwr_backoff_vs_volt_low_type;

/* Type to hold wcdma_900_tx_pdm_lin_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_pdm_lin_0_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_900_tx_pdm_lin_0_enh_type;

/* Type to hold wcdma_vbatt  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_vbatt[2];
} nvi_wcdma_vbatt_type;


typedef PACKED struct PACKED_POST{ 
  /* NAM */
  int8                                             nam;
  /* WLAN Network Selection Mode preference */
  uint16                                           net_sel_mode;
} nvi_wlan_net_sel_mode_pref_type;

/* Type to hold non_compliance_comment  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            non_compliance_comment[64];
} nvi_non_compliance_comment_type;

/* Type to hold dcs_vm_tl_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_tl_prui_13[30];
} nvi_dcs_vm_tl_prui_13_type;

/* Type to hold gsm_amam_master_tbl_seg1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg1_f3[64];
} nvi_gsm_amam_master_tbl_seg1_f3_type;

/* Type to hold aagps_xtra_primary_sntp_server_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            aagps_xtra_primary_sntp_server_url[128];
} nvi_aagps_xtra_primary_sntp_server_url_type;

/* Type to hold bc0_pa_smps_pdm_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc0_pa_smps_pdm_level[4][NV_FREQ_TABLE_SIZ];
} nvi_bc0_pa_smps_pdm_level_type;

/* Type to hold bc10_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc10_p2_rise_fall_off[8];
} nvi_bc10_p2_rise_fall_off_type;

/* Type to hold bc10_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc10_p3_rise_fall_off[8];
} nvi_bc10_p3_rise_fall_off_type;

/* Type to hold bc10_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc10_tx_lim_vs_temp[8];
} nvi_bc10_tx_lim_vs_temp_type;

/* Type to hold bc11_tx_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc11_tx_lin_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc11_tx_lin_2_type;

/* Type to hold bc11_tx_pdm_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc11_tx_pdm_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc11_tx_pdm_1_type;

/* Type to hold bc14_ant_quality  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc14_ant_quality[NV_MAX_ANT_NO_SIZ][NV_FREQ_TABLE_SIZ];
} nvi_bc14_ant_quality_type;

/* Type to hold bc14_vco_tune_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc14_vco_tune_2[NV_VCO_CAL_LENGTH];
} nvi_bc14_vco_tune_2_type;

/* Type to hold bc15_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc15_tx_lim_vs_temp[8];
} nvi_bc15_tx_lim_vs_temp_type;

/* Type to hold bc15_tx_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc15_tx_lin_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc15_tx_lin_2_type;

/* Type to hold bc4_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc4_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_bc4_tx_pdm_lin_0_type;

/* Type to hold bc5_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc5_exp_hdet_vs_agc[16];
} nvi_bc5_exp_hdet_vs_agc_type;

/* Type to hold bcx_block_1_vco_tune_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_1_vco_tune_2[NV_VCO_CAL_LENGTH];
} nvi_bcx_block_1_vco_tune_2_type;

/* Type to hold bcx_block_tx_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_tx_lin_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_tx_lin_1_type;

/* Type to hold bcx_block_tx_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_tx_lin_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_tx_lin_3_type;

/* Type to hold bcx_block_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bcx_block_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_bcx_block_tx_pdm_lin_1_type;


typedef PACKED struct PACKED_POST{ 
  
  byte                                             bd_addr[NV_BD_ADDR_SIZE];
} nvi_bd_addr_type;

/* Type to hold browser_jump_embdlnk3_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           browser_jump_embdlnk3_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
} nvi_browser_jump_embdlnk3_name_type;

/* Type to hold bus_prof_smi_mode  */
typedef PACKED struct PACKED_POST{ 
  
  boolean                                          bus_prof_smi_mode[NV_MAX_BUS_PROF_MONITORS];
} nvi_bus_prof_smi_mode_type;

/* Type to hold c0_bc11_intelliceiver_cal  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc11_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
} nvi_c0_bc11_intelliceiver_cal_type;

/* Type to hold c0_bc14_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c0_bc14_rx_cal_chan[16];
} nvi_c0_bc14_rx_cal_chan_type;

/* Type to hold c0_bc15_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc15_lna_2_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc15_lna_2_offset_vs_freq_type;

/* Type to hold c0_bc15_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc15_lna_4_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc15_lna_4_offset_vs_freq_type;

/* Type to hold c0_bc3_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc3_lna_4_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc3_lna_4_offset_vs_freq_type;

/* Type to hold c0_bc3_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bc3_rx_cal_chan[16];
} nvi_c0_bc3_rx_cal_chan_type;

/* Type to hold c0_bc5_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc5_lna_2_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc5_lna_2_offset_vs_freq_type;

/* Type to hold c0_bc6_p1_rise_fall_offset  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             c0_bc6_p1_rise_fall_offset[8];
} nvi_c0_bc6_p1_rise_fall_offset_type;

/* Type to hold c0_bcx_block_1_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bcx_block_1_lna_3_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bcx_block_1_lna_3_offset_vs_freq_type;

/* Type to hold c0_bcx_block_1_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bcx_block_1_lna_4_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bcx_block_1_lna_4_offset_vs_freq_type;

/* Type to hold c0_bcx_block_1_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bcx_block_1_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c0_bcx_block_1_rx_cal_chan_lru_type;

/* Type to hold c1_bc0_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc0_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc0_rx_cal_chan_lru_type;

/* Type to hold c1_bc14_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc14_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc14_lna_3_offset_vs_freq_type;

/* Type to hold c1_bc14_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc14_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc14_lna_4_offset_vs_freq_type;

/* Type to hold c1_bc6_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc6_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc6_lna_2_offset_vs_freq_type;

/* Type to hold c1_bcx_block_1_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bcx_block_1_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bcx_block_1_lna_2_offset_vs_freq_type;

/* Type to hold c1_cdma_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_cdma_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_cdma_lna_2_offset_vs_freq_type;

/* Type to hold c1_pcs_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_pcs_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_pcs_lna_3_offset_vs_freq_type;

/* Type to hold c1_wcdma_800_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_800_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_800_lna_offset_vs_freq_2_type;

/* Type to hold c1_wcdma_800_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_800_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_800_lna_offset_vs_freq_4_type;

/* Type to hold c1_wcdma_800_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_800_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_800_vga_gain_offset_vs_freq_type;

/* Type to hold c1_wcdma_900_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_900_lna_phase_ctl[6];
} nvi_c1_wcdma_900_lna_phase_ctl_type;

/* Type to hold c1_wcdma_bc4_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_bc4_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_bc4_lna_offset_vs_freq_2_type;


typedef PACKED struct PACKED_POST{ 
  /* A value for both gain ranges */
  int16                                            Aval[2];
  /* B value for both gain ranges */
  int16                                            Bval[2];
} nvi_calpath_rsb_type;

/* Type to hold cgps_default_region_size  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           cgps_default_region_size[5];
} nvi_cgps_default_region_size_type;


typedef PACKED struct PACKED_POST{ 
  /* Configure Wiper Server settings */
  uint32                                           server_ip_address;
  /* Port number of server */
  uint32                                           server_ip_port_num;
} nvi_cgps_qwip_server_params_type;


typedef PACKED struct PACKED_POST{ 
  /* Configure Wiper tile params */
  uint8                                            tile_size_mb;
  /* Number of tiles */
  uint8                                            num_geo_tiles;
} nvi_cgps_qwip_tile_params_type;

/* Type to hold dcs_amam_master_tbl_seg1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg1_f3[64];
} nvi_dcs_amam_master_tbl_seg1_f3_type;

/* Type to hold dcs_amam_master_tbl_seg2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg2_f3[64];
} nvi_dcs_amam_master_tbl_seg2_f3_type;

/* Type to hold dcs_ampm_master_tbl_seg8_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg8_f2[32];
} nvi_dcs_ampm_master_tbl_seg8_f2_type;

/* Type to hold dcs_pa_temp_comp_index_15  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            dcs_pa_temp_comp_index_15[16];
} nvi_dcs_pa_temp_comp_index_15_type;

/* Type to hold dcs_prdi_07  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_07[30];
} nvi_dcs_prdi_07_type;

/* Type to hold dcs_vh_tl_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_tl_prdi_15[30];
} nvi_dcs_vh_tl_prdi_15_type;

/* Type to hold dcs_vh_tm_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_tm_prui_13[30];
} nvi_dcs_vh_tm_prui_13_type;

/* Type to hold dcs_vh_tm_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_tm_prui_14[30];
} nvi_dcs_vh_tm_prui_14_type;

/* Type to hold dcs_vl_th_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_th_prui_13[30];
} nvi_dcs_vl_th_prui_13_type;

/* Type to hold dcs_vl_tm_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_tm_prui_13[30];
} nvi_dcs_vl_tm_prui_13_type;

/* Type to hold dcs_vm_th_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_th_prdi_15[30];
} nvi_dcs_vm_th_prdi_15_type;

/* Type to hold dcs_vm_th_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_th_prui_15[30];
} nvi_dcs_vm_th_prui_15_type;

/* Type to hold dcs_vm_tl_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vm_tl_brdi_13[30];
} nvi_dcs_vm_tl_brdi_13_type;

/* Type to hold dcs_vm_tm_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_tm_prdi_15[30];
} nvi_dcs_vm_tm_prdi_15_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            ss_length;
  
  uint8                                            ss[32];
} nvi_ds_sip_ppp_ss_info_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            nai_length;
  
  uint8                                            nai[126];
} nvi_ds_sip_profile_nai_info_type;

/* Type to hold ecc_list  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             ecc_list[NV_MAX_NUM_OF_ECC_NUMBER][NV_ECC_NUMBER_SIZE];
} nvi_ecc_list_type;

/* Type to hold edge_1800_pmeas_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1800_pmeas_g1_f2[32];
} nvi_edge_1800_pmeas_g1_f2_type;

/* Type to hold edge_1800_pmeas_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1800_pmeas_g2_f3[32];
} nvi_edge_1800_pmeas_g2_f3_type;

/* Type to hold edge_1800_rgi_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1800_rgi_g0_f3[32];
} nvi_edge_1800_rgi_g0_f3_type;

/* Type to hold edge_1800_rgi_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1800_rgi_g1_f2[32];
} nvi_edge_1800_rgi_g1_f2_type;

/* Type to hold edge_1900_pmeas_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1900_pmeas_g2_f1[32];
} nvi_edge_1900_pmeas_g2_f1_type;

/* Type to hold edge_1900_pmeas_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1900_pmeas_g2_f2[32];
} nvi_edge_1900_pmeas_g2_f2_type;

/* Type to hold edge_1900_rgi_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1900_rgi_g0_f2[32];
} nvi_edge_1900_rgi_g0_f2_type;

/* Type to hold edge_900_pmeas_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_900_pmeas_g0_f1[32];
} nvi_edge_900_pmeas_g0_f1_type;

/* Type to hold edge_900_pmeas_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_900_pmeas_g0_f2[32];
} nvi_edge_900_pmeas_g0_f2_type;

/* Type to hold edge_900_rgi_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_900_rgi_g0_f1[32];
} nvi_edge_900_rgi_g0_f1_type;

/* Type to hold edge_900_rgi_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_900_rgi_g3_f2[32];
} nvi_edge_900_rgi_g3_f2_type;

/* Type to hold edge_900_rgi_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_900_rgi_g3_f3[32];
} nvi_edge_900_rgi_g3_f3_type;

/* Type to hold factory_data_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            factory_data_1[128];
} nvi_factory_data_1_type;

/* Type to hold gsm_1800_pmeas_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_pmeas_g0_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1800_pmeas_g0_f1_type;

/* Type to hold gsm_1800_pmeas_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_pmeas_g0_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1800_pmeas_g0_f2_type;

/* Type to hold gsm_1800_pmeas_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_pmeas_g0_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1800_pmeas_g0_f3_type;

/* Type to hold gsm_1800_pmeas_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_pmeas_g1_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1800_pmeas_g1_f2_type;

/* Type to hold gsm_1800_pmeas_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_pmeas_g2_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1800_pmeas_g2_f2_type;

/* Type to hold gsm_1800_pmeas_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_pmeas_g3_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1800_pmeas_g3_f1_type;

/* Type to hold gsm_1800_pmeas_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_pmeas_g3_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1800_pmeas_g3_f2_type;

/* Type to hold gsm_1800_rgi_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1800_rgi_g0_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1800_rgi_g0_f2_type;

/* Type to hold gsm_1800_rgi_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1800_rgi_g1_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1800_rgi_g1_f3_type;

/* Type to hold gsm_1800_rgi_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1800_rgi_g2_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1800_rgi_g2_f2_type;

/* Type to hold gsm_1900_amam_master_tbl_seg4_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg4_f3[64];
} nvi_gsm_1900_amam_master_tbl_seg4_f3_type;

/* Type to hold gsm_1900_amam_master_tbl_seg5_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg5_f2[64];
} nvi_gsm_1900_amam_master_tbl_seg5_f2_type;

/* Type to hold gsm_1900_amam_master_tbl_seg6_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg6_f3[64];
} nvi_gsm_1900_amam_master_tbl_seg6_f3_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg5_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg5_f3[32];
} nvi_gsm_1900_ampm_master_tbl_seg5_f3_type;

/* Type to hold gsm_1900_carrier_suppression  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_carrier_suppression[2];
} nvi_gsm_1900_carrier_suppression_type;

/* Type to hold gsm_1900_linear_pa_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_linear_pa_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_1900_linear_pa_temp_comp_type;

/* Type to hold gsm_1900_pmeas_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_pmeas_g0_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1900_pmeas_g0_f1_type;

/* Type to hold gsm_1900_pmeas_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_pmeas_g0_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1900_pmeas_g0_f2_type;

/* Type to hold gsm_1900_pmeas_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_pmeas_g0_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1900_pmeas_g0_f3_type;

/* Type to hold gsm_1900_rgi_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_rgi_g2_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1900_rgi_g2_f1_type;

/* Type to hold gsm_1900_rgi_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_rgi_g2_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1900_rgi_g2_f2_type;

/* Type to hold gsm_1900_vh_th_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_th_prui_13[30];
} nvi_gsm_1900_vh_th_prui_13_type;

/* Type to hold gsm_1900_vh_tl_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_tl_prdi_13[30];
} nvi_gsm_1900_vh_tl_prdi_13_type;

/* Type to hold gsm_1900_vh_tl_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_tl_prdi_15[30];
} nvi_gsm_1900_vh_tl_prdi_15_type;

/* Type to hold gsm_1900_vh_tl_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_tl_prui_14[30];
} nvi_gsm_1900_vh_tl_prui_14_type;

/* Type to hold gsm_1900_vh_tm_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_tm_prdi_13[30];
} nvi_gsm_1900_vh_tm_prdi_13_type;

/* Type to hold gsm_1900_vh_tm_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_tm_prdi_15[30];
} nvi_gsm_1900_vh_tm_prdi_15_type;

/* Type to hold gsm_1900_vh_tm_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_tm_prui_13[30];
} nvi_gsm_1900_vh_tm_prui_13_type;

/* Type to hold gsm_1900_vh_tm_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_tm_prui_14[30];
} nvi_gsm_1900_vh_tm_prui_14_type;

/* Type to hold gsm_1900_vh_tm_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vh_tm_prui_15[30];
} nvi_gsm_1900_vh_tm_prui_15_type;

/* Type to hold gsm_1900_vl_th_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_th_prdi_13[30];
} nvi_gsm_1900_vl_th_prdi_13_type;

/* Type to hold gsm_1900_vl_th_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_th_prui_13[30];
} nvi_gsm_1900_vl_th_prui_13_type;

/* Type to hold gsm_1900_vl_th_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_th_prui_15[30];
} nvi_gsm_1900_vl_th_prui_15_type;

/* Type to hold gsm_1900_vl_tl_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_tl_prui_15[30];
} nvi_gsm_1900_vl_tl_prui_15_type;

/* Type to hold gsm_1900_vl_tm_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_tm_prdi_13[30];
} nvi_gsm_1900_vl_tm_prdi_13_type;

/* Type to hold gsm_1900_vl_tm_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_tm_prdi_15[30];
} nvi_gsm_1900_vl_tm_prdi_15_type;

/* Type to hold gsm_1900_vm_tl_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_tl_prdi_15[30];
} nvi_gsm_1900_vm_tl_prdi_15_type;

/* Type to hold gsm_850_ampm_master_tbl_seg3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg3_f1[32];
} nvi_gsm_850_ampm_master_tbl_seg3_f1_type;

/* Type to hold gsm_850_ampm_master_tbl_seg7_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg7_f3[32];
} nvi_gsm_850_ampm_master_tbl_seg7_f3_type;

/* Type to hold gsm_850_kv_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_kv_vs_temp[NV_KV_VS_TEMP_MAX_SIZ];
} nvi_gsm_850_kv_vs_temp_type;

/* Type to hold gsm_850_linear_pa_r2_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_linear_pa_r2_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_850_linear_pa_r2_temp_comp_type;

/* Type to hold gsm_850_linear_pa_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_linear_pa_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_850_linear_pa_temp_comp_type;

/* Type to hold gsm_850_path_delay_cold_temp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_path_delay_cold_temp_vs_freq[8];
} nvi_gsm_850_path_delay_cold_temp_vs_freq_type;

/* Type to hold gsm_850_pmeas_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_pmeas_g1_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_850_pmeas_g1_f3_type;

/* Type to hold gsm_850_pmeas_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_pmeas_g2_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_850_pmeas_g2_f3_type;

/* Type to hold gsm_850_pmeas_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_pmeas_g3_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_850_pmeas_g3_f2_type;

/* Type to hold gsm_850_rgi_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_850_rgi_g2_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_850_rgi_g2_f3_type;

/* Type to hold gsm_850_rx_gain_range_1_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_rx_gain_range_1_temp_comp[3];
} nvi_gsm_850_rx_gain_range_1_temp_comp_type;

/* Type to hold gsm_900_kv_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_900_kv_vs_temp[NV_KV_VS_TEMP_MAX_SIZ];
} nvi_gsm_900_kv_vs_temp_type;

/* Type to hold gsm_900_pmeas_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_pmeas_g1_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_900_pmeas_g1_f2_type;

/* Type to hold gsm_900_pmeas_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_pmeas_g2_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_900_pmeas_g2_f1_type;

/* Type to hold gsm_900_pmeas_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_pmeas_g2_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_900_pmeas_g2_f3_type;

/* Type to hold gsm_900_rgi_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_900_rgi_g2_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_900_rgi_g2_f2_type;

/* Type to hold gsm_900_rgi_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_900_rgi_g2_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_900_rgi_g2_f3_type;

/* Type to hold gsm_amam_master_tbl_seg1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg1_f1[64];
} nvi_gsm_amam_master_tbl_seg1_f1_type;

/* Type to hold gsm_pa_transition_table  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_pa_transition_table[48];
} nvi_gsm_pa_transition_table_type;

/* Type to hold gsm_prui_11  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_prui_11[30];
} nvi_gsm_prui_11_type;

/* Type to hold gsm_rssi_temp_values  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             gsm_rssi_temp_values[4];
} nvi_gsm_rssi_temp_values_type;

/* Type to hold gsm_vh_th_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_th_prdi_14[30];
} nvi_gsm_vh_th_prdi_14_type;

/* Type to hold gsm_vh_tm_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_tm_prdi_13[30];
} nvi_gsm_vh_tm_prdi_13_type;

/* Type to hold gsm_vh_tm_prui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_tm_prui_12[30];
} nvi_gsm_vh_tm_prui_12_type;

/* Type to hold gsm_vh_tm_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_tm_prui_13[30];
} nvi_gsm_vh_tm_prui_13_type;

/* Type to hold gsm_vh_tm_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_tm_prui_14[30];
} nvi_gsm_vh_tm_prui_14_type;

/* Type to hold gsm_vl_th_prdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_th_prdi_12[30];
} nvi_gsm_vl_th_prdi_12_type;

/* Type to hold gsm_vl_th_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_th_prdi_13[30];
} nvi_gsm_vl_th_prdi_13_type;

/* Type to hold gsm_vl_th_prui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_th_prui_12[30];
} nvi_gsm_vl_th_prui_12_type;

/* Type to hold gsm_vl_tl_prdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_tl_prdi_12[30];
} nvi_gsm_vl_tl_prdi_12_type;

/* Type to hold gsm_vl_tm_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_tm_prui_13[30];
} nvi_gsm_vl_tm_prui_13_type;

/* Type to hold gsm_vm_th_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_th_brui_14[30];
} nvi_gsm_vm_th_brui_14_type;

/* Type to hold gsm_vm_th_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_th_prui_13[30];
} nvi_gsm_vm_th_prui_13_type;

/* Type to hold gsm_vm_tl_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_tl_brdi_13[30];
} nvi_gsm_vm_tl_brdi_13_type;


typedef PACKED struct PACKED_POST{ 
  
  nv_hdrkep_config_params_type                     kep_config[NV_HDRSCMDB_MAX_PERSONALITIES];
  /* SHA-1 Hash of SCM DB */
  uint8                                            hash[NV_SECAPI_HSH_SHA_DIGEST_SIZE];
} nvi_hdrscmdb_secure_config_type;

/* Type to hold hsupa_irq_flow_ctrl_2ms_pdu_size_336  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           hsupa_irq_flow_ctrl_2ms_pdu_size_336[20];
} nvi_hsupa_irq_flow_ctrl_2ms_pdu_size_336_type;

/* Type to hold hsupa_irq_flow_ctrl_2ms_pdu_size_656  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           hsupa_irq_flow_ctrl_2ms_pdu_size_656[20];
} nvi_hsupa_irq_flow_ctrl_2ms_pdu_size_656_type;


typedef PACKED struct PACKED_POST{ 
  /* Contains RC tune values for IntelliCeiver */
  uint16                                           r_code;
  /* Contains C tune value for IntelliCeiver */
  uint16                                           c_code;
} nvi_intelliceiver_rc_tune_cal_type;

/* Type to hold lc_udppushservername  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lc_udppushservername[NV_LC_UDPPUSHSERVERNAME_SIZ];
} nvi_lc_udppushservername_type;

/* Type to hold lte_b13_tx_gain_index_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_tx_gain_index_1[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b13_tx_gain_index_1_type;

/* Type to hold lte_b13_tx_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_tx_mpr_backoff[LTE_MPR_SIZ];
} nvi_lte_b13_tx_mpr_backoff_type;

/* Type to hold lte_b1_c1_im_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b1_c1_im_level[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b1_c1_im_level_type;

/* Type to hold lte_b1_c1_lna_phase_ctrl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_c1_lna_phase_ctrl[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b1_c1_lna_phase_ctrl_type;

/* Type to hold lte_b1_c1_lna_range_rise_fall  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b1_c1_lna_range_rise_fall  */
  nv_lte_c1_lna_range_rise_fall_type               lte_b1_c1_lna_range_rise_fall[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b1_c1_lna_range_rise_fall_type;

/* Type to hold lte_b1_rx_gain  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_rx_gain[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b1_rx_gain_type;

/* Type to hold lte_b1_tx_gain_index_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_tx_gain_index_1[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b1_tx_gain_index_1_type;

/* Type to hold lte_b1_tx_lin_master_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_tx_lin_master_2[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b1_tx_lin_master_2_type;

/* Type to hold lte_b1_tx_lin_master_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_tx_lin_master_3[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b1_tx_lin_master_3_type;

/* Type to hold lte_b40_c1_lna_phase_ctrl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_c1_lna_phase_ctrl[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b40_c1_lna_phase_ctrl_type;

/* Type to hold lte_b40_tx_lin_master_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_tx_lin_master_3[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b40_tx_lin_master_3_type;

/* Type to hold lte_b7_c1_im_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b7_c1_im_level[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b7_c1_im_level_type;

/* Type to hold lte_b7_c1_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_c1_rx_cal_chan[LTE_RX_CAL_CHAN_SIZE];
} nvi_lte_b7_c1_rx_cal_chan_type;

/* Type to hold lte_b7_pa_rise_fall_threshold  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b7_pa_rise_fall_threshold  */
  nv_lte_pa_rise_fall_threshold_type               lte_b7_pa_rise_fall_threshold[TX_PA_STATE_SIZ];
} nvi_lte_b7_pa_rise_fall_threshold_type;

/* Type to hold lte_b7_tx_rot_angle_pa_state  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_tx_rot_angle_pa_state[TX_ROT_ANGLE_SIZE];
} nvi_lte_b7_tx_rot_angle_pa_state_type;

/* Type to hold mbp_rf_dvbh_gs0_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_dvbh_gs0_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_dvbh_gs0_cal_type;

/* Type to hold mbp_rf_dvbh_gs2_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_dvbh_gs2_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_dvbh_gs2_cal_type;

/* Type to hold mbp_rf_isdbt_gs3_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_isdbt_gs3_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_isdbt_gs3_cal_type;

/* Type to hold mf_band_class_sp_info  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            mf_band_class_sp_info[3];
} nvi_mf_band_class_sp_info_type;

/* Type to hold mf_rssi_cal_vs_freq_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_freq_1[32];
} nvi_mf_rssi_cal_vs_freq_1_type;

/* Type to hold mf_rssi_cal_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_freq_2[32];
} nvi_mf_rssi_cal_vs_freq_2_type;

/* Type to hold mf_rssi_cal_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_freq_3[32];
} nvi_mf_rssi_cal_vs_freq_3_type;

/* Type to hold mf_rssi_cal_vs_vhf_freq_5  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_vhf_freq_5[32];
} nvi_mf_rssi_cal_vs_vhf_freq_5_type;

/* Type to hold mipv6_auth_proto_config  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold mipv6_auth_proto_config  */
  nv_mipv6_auth_proto_config_type                  mipv6_auth_proto_config[NV_MAX_MIPV6_PROFILES];
} nvi_mipv6_auth_proto_config_type;

/* Type to hold mipv6_eap_aka_credential  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold mipv6_eap_aka_credential  */
  nv_mipv6_eap_aka_credential_type                 mipv6_eap_aka_credential[NV_MAX_MIPV6_PROFILES];
} nvi_mipv6_eap_aka_credential_type;

/* Type to hold mipv6_gen_user_profile  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold mipv6_gen_user_profile  */
  nv_mipv6_gen_user_profile_type                   mipv6_gen_user_profile[NV_MAX_MIPV6_PROFILES];
} nvi_mipv6_gen_user_profile_type;

/* Type to hold mipv6_ha  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold mipv6_ha  */
  nv_mipv6_ipv6_addr_type                          mipv6_ha[NV_MAX_MIPV6_PROFILES];
} nvi_mipv6_ha_type;

/* Type to hold mipv6_hoa  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold mipv6_hoa  */
  nv_mipv6_ipv6_addr_type                          mipv6_hoa[NV_MAX_MIPV6_PROFILES];
} nvi_mipv6_hoa_type;

/* Type to hold mipv6_mn_ha_shared_secret  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold mipv6_mn_ha_shared_secret  */
  nv_mipv6_mn_ha_shared_secret_type                mipv6_mn_ha_shared_secret[NV_MAX_MIPV6_PROFILES];
} nvi_mipv6_mn_ha_shared_secret_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            nai_length;
  
  uint8                                            nai[NV_MAX_MIPV6_NAI_LENGTH];
} nvi_mipv6_nai_type;

/* Type to hold mipv6_primary_dns  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold mipv6_primary_dns  */
  nv_mipv6_ipv6_addr_type                          mipv6_primary_dns[NV_MAX_MIPV6_PROFILES];
} nvi_mipv6_primary_dns_type;


typedef PACKED struct PACKED_POST{ 
  /* Number of digits */
  byte                                             n_digits;
  /* The digits */
  byte                                             digitn[NV_DIR_NUMB_PCS_SIZ];
} nvi_mob_dir_data_type;

/* Type to hold pcs_rx_slp_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_rx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_pcs_rx_slp_vs_temp_type;

/* Type to hold pcs_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_pcs_vga_gain_offset_vs_freq_type;


typedef PACKED struct PACKED_POST{ 
  
  byte                                             ipcp;
  
  byte                                             ipv6cp;
} nvi_ppp_ncp_remote_initiate_type;


typedef PACKED struct PACKED_POST{ 
  /* Time to wait after sending a VSNCP Term Request */
  uint32                                           vsncp_term_timeout;
  /* Time to wait for a VSNCP Ack */
  uint32                                           vsncp_ack_timeout;
  /* Number of tries to send out a VSNCP Config Request */
  uint16                                           vsncp_req_try;
  /* Number of tries to send out a VSNCP Termination Request */
  uint16                                           vsncp_term_try;
} nvi_ppp_vsncp_config_data_type;


typedef PACKED struct PACKED_POST{ 
  
  byte                                             ipv6_iid_enum_type;
  
  uint64                                           iid_val;
} nvi_ps_ipv6_iid_type;

/* Type to hold roam_ind_custom_home  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            roam_ind_custom_home[32];
} nvi_roam_ind_custom_home_type;


typedef PACKED struct PACKED_POST{ 
  /* Index */
  byte                                             index;
  /* value */
  word                                             value[NV_MAX_STA_VALUES];
} nvi_sta_values_type;


typedef PACKED struct PACKED_POST{ 
  /* Thermal and current monitor configuration algorithm version */
  uint16                                           version;
  /* External temperature sensors are present  */
  boolean                                          extern_temp_sensors_present;
  /* Current sensor is present */
  boolean                                          current_sensor_present;
  /* Device thermal sensitivity factor */
  uint8                                            dev_therm_sensitivity_factor;
  /* Device current sensitivity factor */
  uint8                                            dev_current_sensitvity_factor;
} nvi_thermal_current_monitor_config_type;


typedef PACKED struct PACKED_POST{ 
  /* Temperature threshold in C where mitigation is required */
  uint8                                            thresh1[NV_TEMP_THRESH_CNT];
  /* Temperature threshold in C where emergency measures are required */
  uint8                                            thresh2[NV_TEMP_THRESH_CNT];
  /* Temperature delta from threshold to exit mitigation and emergency state */
  uint8                                            hysteresis;
} nvi_thermal_monitor_thresholds_type;


typedef PACKED struct PACKED_POST{ 
  /* Last active IP address */
  byte                                             curr_gateway;
  /* Last alert state */
  byte                                             alert_state;
  /* Disconnect time-out value */
  byte                                             disconnect_timer;
  /* permanent storage */
  byte                                             perm_storage[NV_UP_MAX_PERM_STORE_SIZE];
} nvi_up_parms_type;

/* Type to hold voice_mail_line2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           voice_mail_line2[NV_VOICE_MAIL_LINE_SIZ];
} nvi_voice_mail_line2_type;

/* Type to hold wcdma_1500_rel6_tx_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1500_rel6_tx_mpr_backoff[7];
} nvi_wcdma_1500_rel6_tx_mpr_backoff_type;

/* Type to hold wcdma_1500_tx_comp_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_comp_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1500_tx_comp_vs_freq_3_type;

/* Type to hold wcdma_1500_tx_lin_master_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_lin_master_1[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_1500_tx_lin_master_1_type;

/* Type to hold wcdma_1800_max_pwr_backoff_volt1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_max_pwr_backoff_volt1[4];
} nvi_wcdma_1800_max_pwr_backoff_volt1_type;

/* Type to hold wcdma_1800_max_pwr_backoff_volt2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_max_pwr_backoff_volt2[4];
} nvi_wcdma_1800_max_pwr_backoff_volt2_type;

/* Type to hold wcdma_1800_pa_comp_down_r3_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_pa_comp_down_r3_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1800_pa_comp_down_r3_vs_freq_type;

/* Type to hold wcdma_1800_pa_compensate_up_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_pa_compensate_up_with_dvs[10];
} nvi_wcdma_1800_pa_compensate_up_with_dvs_type;

/* Type to hold wcdma_1800_qaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_qaccum[6];
} nvi_wcdma_1800_qaccum_type;

/* Type to hold wcdma_1800_tx_comp_vs_freq_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_comp_vs_freq_0[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1800_tx_comp_vs_freq_0_type;

/* Type to hold wcdma_1800_tx_lin_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_lin_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1800_tx_lin_vs_temp_2_type;

/* Type to hold wcdma_1900_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_exp_hdet_vs_agc_v2[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_1900_exp_hdet_vs_agc_v2_type;

/* Type to hold wcdma_1900_max_pwr_backoff_voltages  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1900_max_pwr_backoff_voltages[3];
} nvi_wcdma_1900_max_pwr_backoff_voltages_type;

/* Type to hold wcdma_1900_rel6_tx_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1900_rel6_tx_mpr_backoff[7];
} nvi_wcdma_1900_rel6_tx_mpr_backoff_type;

/* Type to hold wcdma_1900_tx_comp_vs_freq_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_comp_vs_freq_1[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1900_tx_comp_vs_freq_1_type;

/* Type to hold wcdma_1900_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_1900_tx_pdm_lin_1_type;

/* Type to hold wcdma_1900_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_1900_tx_pdm_lin_2_type;

/* Type to hold wcdma_800_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_800_drx_mode_sel[3];
} nvi_wcdma_800_drx_mode_sel_type;

/* Type to hold wcdma_800_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_800_tx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_800_tx_cal_chan_type;

/* Type to hold wcdma_900_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_exp_hdet_vs_agc_v2[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_900_exp_hdet_vs_agc_v2_type;

/* Type to hold wcdma_900_pa_comp_down_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_pa_comp_down_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_900_pa_comp_down_vs_freq_type;

/* Type to hold wcdma_900_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_900_tx_pdm_lin_0_type;

/* Type to hold wcdma_bc4_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_bc4_exp_hdet_vs_agc[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_bc4_exp_hdet_vs_agc_type;

/* Type to hold wcdma_bc4_pa_compensate_up_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_bc4_pa_compensate_up_with_dvs[10];
} nvi_wcdma_bc4_pa_compensate_up_with_dvs_type;

/* Type to hold wcdma_bc4_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_bc4_rx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_bc4_rx_cal_chan_type;

/* Type to hold wcdma_bc4_tx_comp_vs_freq_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_comp_vs_freq_0[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_bc4_tx_comp_vs_freq_0_type;

/* Type to hold wcdma_bc4_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_bc4_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_bc4_tx_lim_vs_freq_type;

/* Type to hold wcdma_bc4_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_bc4_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_bc4_tx_lim_vs_temp_type;

/* Type to hold wcdma_bc4_tx_lin_master_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_lin_master_0_enh[NV_TX_LIN_MASTER_ENH_SIZE];
} nvi_wcdma_bc4_tx_lin_master_0_enh_type;

/* Type to hold wcdma_bc4_tx_lin_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_lin_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_bc4_tx_lin_vs_temp_3_type;

/* Type to hold wcdma_bc4_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_bc4_tx_pdm_lin_2_type;

/* Type to hold wcdma_bc4_tx_slp_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_slp_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_bc4_tx_slp_vs_temp_1_type;

/* Type to hold wcdma_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_lna_offset_vs_freq_2_type;

/* Type to hold wcdma_pa_comp_down_r2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_pa_comp_down_r2_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_pa_comp_down_r2_vs_freq_type;

/* Type to hold wcdma_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_rx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_rx_cal_chan_type;

/* Type to hold wcdma_tx_lin_master_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_tx_lin_master_0[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_tx_lin_master_0_type;

/* Type to hold wcdma_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_tx_pdm_lin_0_type;

/* Type to hold wcdma_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_tx_pdm_lin_1_type;

/* Type to hold wcdma_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_tx_pdm_lin_2_type;

/* Type to hold wcdma_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_tx_pdm_lin_3_type;


typedef PACKED struct PACKED_POST{ 
  /* WLAN Atheros clk freq, power save mode parameters */
  word                                             atheros_clk_freq_index;
  /* Time the module remains awake between last tx/rx and sleep in milliseconds */
  uint16                                           idle_period;
  /* No. of ps poll msgs to send before awake notification to AP */
  uint16                                           ps_poll_number;
  /* Policy to ignore/stick/normal DTIM processing */
  word                                             dtim_policy;
} nvi_wlan_atheros_specific_cfg;


typedef PACKED struct PACKED_POST{ 
  /* Wake on Wireless - WAN Config */
  boolean                                          bEnabled[NV_WWWAN_MAX_CFG];
  /* Mask */
  uint32                                           dwMask[NV_WWWAN_MAX_CFG];
} nvi_wwwan_config_type;


typedef PACKED struct PACKED_POST{ 
  /* REG_ZONEsp */
  word                                             reg_zone;
  /* SIDsp */
  word                                             sid;
  /* NIDsp */
  word                                             nid;
  /* block_or_sys */
  word                                             block_or_sys;
  /* band_class */
  byte                                             band_class;
} nvi_zone_list_type;


typedef PACKED struct PACKED_POST{ 
  /* GW application configuration for CSIM feature */
  int32                                            data_len;
  /* GW application configuration for CSIM feature */
  uint8                                            data_ptr[32];
} nvi_csim_static_gw_app;


typedef PACKED struct PACKED_POST{ 
  /* Additional delay to receive ATR over and above 40000 clk cycles */
  uint16                                           additional_delay_for_atr;
  /* Number of times an external uim command shall be re-tried over and above the default 2 */
  uint8                                            ext_cmd_additional_re_try_cnt;
  /* Number of parity errors that would be tolerated over and above 20 */
  uint8                                            additional_parity_err_cnt;
  /* Number of rx_break errors that would be tolerated over and above 10 */
  uint8                                            additional_rx_break_err_cnt;
  /* Additional delay when direction of transmission changes from card to ME above 150 micro seconds */
  uint8                                            additional_delay_when_dir_change;
  /* Boolean to indicate whether or not a poll time out would be recovered if in a call */
  boolean                                          uim_recover_poll_t_out_while_in_call;
  /* Whether or not CPHS is read after internal reset if UICC */
  boolean                                          read_usim_cphs;
  /* Whether or not UST is read after internal reset if UICC */
  boolean                                          read_usim_ust;
  /* Whether or not EST is read after internal reset if UICC */
  boolean                                          read_usim_est;
  /* Whether or not NETPAR is read after internal reset if UICC */
  boolean                                          read_usim_netpar;
  /* Whether or not RPLMNACT is read after internal reset if UICC */
  boolean                                          read_usim_rplmnact;
  /* Whether or not USIM_AD is read after internal reset if UICC */
  boolean                                          read_usim_ad;
  /* Whether or not IMSI is read after internal reset if UICC */
  boolean                                          read_usim_imsi;
  /* Whether or not USIM_ACC is read after internal reset if UICC */
  boolean                                          read_usim_acc;
  /* Whether or not USIM_HPLMN is read after internal reset if UICC */
  boolean                                          read_usim_hplmn;
  /* Whether or not HPLMNWACT is read after internal reset if UICC */
  boolean                                          read_usim_hplmnwact;
  /* Whether or not PLMNWACT is read after internal reset if UICC */
  boolean                                          read_usim_plmnwact;
  /* Whether or not OPLMNWACT is read after internal reset if UICC */
  boolean                                          read_usim_oplmnwact;
  /* Whether or not LOCI is read after internal reset if UICC */
  boolean                                          read_usim_loci;
  /* Whether or not PSLOCI is read after internal reset if UICC */
  boolean                                          read_usim_psloci;
  /* Whether or not KEYS is read after internal reset if UICC */
  boolean                                          read_usim_keys;
  /* Whether or not KEYSPS is read after internal reset if UICC */
  boolean                                          read_usim_keysps;
  /* Whether or not FPLMN is read after internal reset if UICC */
  boolean                                          read_usim_fplmn;
  /* Whether or not START_HFN is read after internal reset if UICC */
  boolean                                          read_usim_start_hfn;
  /* Whether or not THRESHOLD is read after internal reset if UICC */
  boolean                                          read_usim_threshold;
  /* Whether or not CBMID is read after internal reset if UICC */
  boolean                                          read_usim_cbmid;
  /* Whether or not KC is read after internal reset if UICC */
  boolean                                          read_usim_kc;
  /* Whether or not KCGPRS is read after internal reset if UICC */
  boolean                                          read_usim_kcgprs;
  /* Whether or not ACM is read after internal reset if UICC */
  boolean                                          read_usim_acm;
  /* Whether or not ACM_MAX is read after internal reset if UICC */
  boolean                                          read_usim_acm_max;
  /* Whether or not EHPLMN is read after internal reset if UICC */
  boolean                                          read_usim_ehplmn;
  /* Whether or not CPHS is read after internal reset if GSM */
  boolean                                          read_gsm_cphs;
  /* Whether or not SST is read after internal reset if GSM */
  boolean                                          read_gsm_sst;
  /* Whether or not HPLMN is read after internal reset if GSM */
  boolean                                          read_gsm_hplmn;
  /* Whether or not AD is read after internal reset if GSM */
  boolean                                          read_gsm_ad;
  /* Whether or not IMSI is read after internal reset if GSM */
  boolean                                          read_gsm_imsi;
  /* Whether or not ACC is read after internal reset if GSM */
  boolean                                          read_gsm_acc;
  /* Whether or not LOCI is read after internal reset if GSM */
  boolean                                          read_gsm_loci;
  /* Whether or not KC is read after internal reset if GSM */
  boolean                                          read_gsm_kc;
  /* Whether or not FPLMN is read after internal reset if GSM */
  boolean                                          read_gsm_fplmn;
  /* Whether or not PLMN is read after internal reset if GSM */
  boolean                                          read_gsm_plmn;
  /* Whether or not HPLMNACT is read after internal reset if GSM */
  boolean                                          read_gsm_hplmnact;
  /* Whether or not PLMNWACT is read after internal reset if GSM */
  boolean                                          read_gsm_plmnwact;
  /* Whether or not OPLMNWACT is read after internal reset if GSM */
  boolean                                          read_gsm_oplmnwact;
  /* Whether or not LOCIGPRS is read after internal reset if GSM */
  boolean                                          read_gsm_locigprs;
  /* Whether or not KCGPRS is read after internal reset if GSM */
  boolean                                          read_gsm_kcgprs;
  /* Whether or not CBMID is read after internal reset if GSM */
  boolean                                          read_gsm_cbmid;
  /* Whether or not ACM is read after internal reset if GSM */
  boolean                                          read_gsm_acm;
  /* Whether or not ACM_MAX is read after internal reset if GSM */
  boolean                                          read_gsm_acm_max;
  /* This would shrink as we keep adding more params */
  uint8                                            future_use[32];
} nvi_uim_config_params_type;

/* Type to hold bc5_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc5_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_bc5_tx_pdm_lin_3_type;


typedef PACKED struct PACKED_POST{ 
  /* Alert name */
  byte                                             alert_name[NV_UP_ALERT_NAME_SIZE];
  /* Alert status */
  byte                                             alert_status;
  /* Alert Id */
  word                                             alert_id;
} nvi_up_alert_record_type;

/* Type to hold bc4_hdr_reva_tx_predistort  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc4_hdr_reva_tx_predistort[16];
} nvi_bc4_hdr_reva_tx_predistort_type;

/* Type to hold bcx_block_1_tx_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_1_tx_lin_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_1_tx_lin_3_type;

/* Type to hold c0_bc11_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc11_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c0_bc11_rx_cal_chan_lru_type;

/* Type to hold c1_bcx_block_1_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bcx_block_1_vga_gain_offset_vs_freq[16];
} nvi_c1_bcx_block_1_vga_gain_offset_vs_freq_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            i_dc;
  
  uint8                                            q_dc;
} nvi_dc_cal_type;

/* Type to hold edge_1800_pmeas_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1800_pmeas_g0_f3[32];
} nvi_edge_1800_pmeas_g0_f3_type;

/* Type to hold gsm_1900_pmeas_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_pmeas_g3_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1900_pmeas_g3_f3_type;

/* Type to hold gsm_850_pmeas_g1_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_pmeas_g1_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_850_pmeas_g1_f2_type;

/* Type to hold gsm_900_pmeas_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_pmeas_g1_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_900_pmeas_g1_f3_type;

/* Type to hold lte_b1_tx_lin_master_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_tx_lin_master_1[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b1_tx_lin_master_1_type;

/* Type to hold mbp_rf_isdbt_cal_freq  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           mbp_rf_isdbt_cal_freq[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_isdbt_cal_freq_type;

/* Type to hold wcdma_bc4_tx_comp_vs_freq_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_comp_vs_freq_1[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_bc4_tx_comp_vs_freq_1_type;

/* Type to hold wcdma_bc4_tx_comp_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_comp_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_bc4_tx_comp_vs_freq_2_type;

/* Type to hold im_digest_schemas  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           im_digest_schemas[NV_IM_MAX_SCHEMA_COUNT][NV_IM_MAX_SCHEMA_NAME_LEN];
} nvi_im_digest_schemas_type;

/* Type to hold lte_b1_tx_lin_master_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_tx_lin_master_0[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b1_tx_lin_master_0_type;

/* Type to hold mbp_rf_isdbt_gs6_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_isdbt_gs6_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_isdbt_gs6_cal_type;

/* Type to hold dcs_vm_tm_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_tm_prui_15[30];
} nvi_dcs_vm_tm_prui_15_type;

/* Type to hold wcdma_1800_tx_comp_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_comp_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1800_tx_comp_vs_freq_3_type;

/* Type to hold bc14_tx_pdm_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc14_tx_pdm_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc14_tx_pdm_3_type;

/* Type to hold gsm_vh_tl_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_tl_prdi_14[30];
} nvi_gsm_vh_tl_prdi_14_type;

/* Type to hold rfr_vco_coarse_tune_2_1900  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rfr_vco_coarse_tune_2_1900[12];
} nvi_rfr_vco_coarse_tune_2_1900_type;

/* Type to hold lte_b1_tx_gain_index_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_tx_gain_index_0[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b1_tx_gain_index_0_type;

/* Type to hold bc15_tx_pdm_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc15_tx_pdm_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc15_tx_pdm_2_type;

/* Type to hold c1_wcdma_800_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_800_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_800_lna_offset_vs_freq_type;

/* Type to hold gsm_1800_rgi_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1800_rgi_g2_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1800_rgi_g2_f1_type;

/* Type to hold c1_bc3_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc3_vga_gain_offset_vs_freq[16];
} nvi_c1_bc3_vga_gain_offset_vs_freq_type;

/* Type to hold gsm_vl_tm_prui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_tm_prui_12[30];
} nvi_gsm_vl_tm_prui_12_type;

/* Type to hold lte_b13_tx_lin_master_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_tx_lin_master_0[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b13_tx_lin_master_0_type;

/* Type to hold lte_b40_tx_comp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b40_tx_comp_vs_freq[TX_PA_STATE_SIZ][LTE_TX_FREQ_COMP_SIZ];
} nvi_lte_b40_tx_comp_vs_freq_type;

/* Type to hold wcdma_1500_tx_slp_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_slp_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1500_tx_slp_vs_temp_0_type;

/* Type to hold wcdma_1900_tx_lin_master_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_lin_master_3[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_1900_tx_lin_master_3_type;

/* Internal NV byte type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  byte                                             value;
} nvi_byte_type;

/* Internal NV uint8 type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  uint8                                            value;
} nvi_uint8_type;

/* Internal NV int1 type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  int1                                             value;
} nvi_int1_type;

/* Internal NV int8 type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  int8                                             value;
} nvi_int8_type;

/* Internal NV int2 type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  int2                                             value;
} nvi_int2_type;

/* Internal NV int4 type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  int4                                             value;
} nvi_int4_type;

/* Internal NV int16 type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  int16                                            value;
} nvi_int16_type;

/* Internal NV int32 type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  int32                                            value;
} nvi_int32_type;

/* Internal NV boolean type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  boolean                                          value;
} nvi_boolean_type;

/* Internal NV word type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  word                                             value;
} nvi_word_type;

/* Internal NV uint16 type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  uint16                                           value;
} nvi_uint16_type;

/* Internal NV dword type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  dword                                            value;
} nvi_dword_type;

/* Internal NV uint32 type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  uint32                                           value;
} nvi_uint32_type;

/* Internal NV uint64 type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  uint64                                           value;
} nvi_uint64_type;

/* Internal NV qword type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  qword                                            value;
} nvi_qword_type;

/* Internal NV enum type */
typedef PACKED struct PACKED_POST{ 
  /* value */
  word                                             value;
} nvi_enum_type;

/* Speed dial numbers */
/* 
 * Dialed digits are stored internally packed as two digits per byte,
 * hence the size computation below.
 */
typedef PACKED struct PACKED_POST{ 
  /* flag bits */
  byte                                             status;
  /* value */
  byte                                             num_digits;
  /* value */
  byte                                             digits[NVI_MAX_DIAL_DIGITS_STORAGE];
  /* value */
  byte                                             letters[NV_MAX_LTRS];
} nvi_dial_type;

/* Stack dial numbers. */
/* 
 * Dialed digits are stored internally packed as two digits per byte,
 *  hence the size computation below
 */
typedef PACKED struct PACKED_POST{ 
  /* flag bits */
  byte                                             status;
  /*  years to seconds */
  dword                                            time_stamp;
  /* Number of speed dial digits */
  byte                                             num_digits;
  /* Spped dial digits */
  byte                                             digits[NVI_MAX_DIAL_DIGITS];
  /* Names associated with numbers */
  byte                                             letters[NV_MAX_LTRS];
  /* duration of call */
  dword                                            duration;
} nvi_stdial_type;

/* Special structure for rental timer item */
typedef PACKED struct PACKED_POST{ 
  /* number of tickes */
  dword                                            ticks;
} nvi_rental_timer_type;

/* Special type for rental counter item (double-buffered) */
typedef PACKED struct PACKED_POST{ 
  /* count value */
  dword                                            cnt;
} nvi_rental_cnt_type;

/* Internal SMS type */
typedef PACKED struct PACKED_POST{ 
  /* sms entry [0..500] */
  word                                             address;
  /* status mask */
  byte                                             status;
  /* data length */
  byte                                             user_data_length;
  /* Call stack length */
  byte                                             call_back_length;
  /* Mask */
  qword                                            param_mask;
  /* bytes in 'data', [8..325] */
  word                                             length;
} nvi_sms_type;

/* Internal roaming list type */
typedef PACKED struct PACKED_POST{ 
  /* Roaming list version */
  word                                             prl_version;
  /* Size of roaming list */
  dword                                            size;
  /* Is this roaming list valid? */
  boolean                                          valid;
  /* Actual roaming list */
  byte                                             roaming_list[NV_ROAMING_LIST_MAX_SIZE];
} nvi_roaming_list_type;

/* UP cache type */
typedef PACKED struct PACKED_POST{ 
  /* The UP cache */
  byte                                             cache[NV_UP_MAX_CACHE_SIZE];
} nvi_up_cache_type;

/* PN Id type */
typedef PACKED struct PACKED_POST{ 
  /* PN Id */
  byte                                             data[NV_PN_ID_TABLE_SIZE];
} nvi_pn_id_type;

/* NVI Type to hold lock order and reason code */
typedef PACKED struct PACKED_POST{ 
  /* Set when lock order received and until unlocked */
  byte                                             lock_order;
  /* Lock reason received in the order */
  byte                                             lock_reason;
} nvi_lckrsn_p_type;

/* Internal type to hold names */
typedef PACKED struct PACKED_POST{ 
  /* Has this item ever been initialized? */
  boolean                                          active;
  /* Text */
  byte                                             value[NV_MAX_LTRS];
} nvi_name_type;

/* Internal type to hold power table */
typedef PACKED struct PACKED_POST{ 
  /* Power table values */
  byte                                             value[NV_PWR_TABLE_SIZ];
} nvi_pwr_table_type;

/* Internal type to hold frequency table */
typedef PACKED struct PACKED_POST{ 
  /* Frequency table values */
  byte                                             value[NV_FREQ_TABLE_SIZ];
} nvi_freq_table_type;

/* Internal type to hold voltage table */
typedef PACKED struct PACKED_POST{ 
  /* Voltage table values */
  byte                                             value[NV_VOLT_TABLE_SIZ];
} nvi_volt_table_type;

/* Internal type to hold frequency table */
typedef PACKED struct PACKED_POST{ 
  /* Frequency table values */
  int1                                             value[NV_FREQ_TABLE_SIZ];
} nvi_freq_int1_table_type;

/* Internal type to hold temperature table */
typedef PACKED struct PACKED_POST{ 
  /* Temperature table values */
  int1                                             value[NV_TEMP_TABLE_SIZ];
} nvi_temp_int1_table_type;

/* Internal type to hold temperature table */
typedef PACKED struct PACKED_POST{ 
  /* Temperature table values */
  int2                                             value[NV_TEMP_TABLE_SIZ];
} nvi_temp_int2_table_type;

/* Internal type to hold temperature table */
typedef PACKED struct PACKED_POST{ 
  /* Temperature table values */
  byte                                             value[NV_TEMP_TABLE_SIZ];
} nvi_temp_table_type;

/* Internal SI data type */
typedef PACKED struct PACKED_POST{ 
  /* System Integration Data */
  byte                                             data[NV_SI_TEST_DATA_SIZE];
} nvi_si_test_data_type;

/* Fixed Location Table */
/* 
 * Fixed read/write items are in the tail end of the KLT
 */
typedef PACKED struct PACKED_POST{ 
  /* ESN */
  dword                                            esn;
  /* ESN checksum */
  dword                                            esn_chksum;
  /* NV major version number */
  byte                                             verno_maj;
  /* NV minor version number */
  byte                                             verno_min;
  /* Max size of dynamic pool */
  word                                             dynamic_pool_capacity;
  /* Table of pointers to structures */
  word                                             tps;
  /* ESN is valid flag */
  dword                                            esn_valid;
  /* magic number for a valid KLT */
  dword                                            klt_magic;
} nvi_klt_type;

/* NV Extended Version Designator */
typedef PACKED struct PACKED_POST{ 
  /* Number of bytes to follow (128 max) */
  byte                                             length;
  /* Reserved for auto-generated version numbers (zero otherwise) */
  byte                                             auto_verno[NV_AUTO_VERNO_LENGTH];
  /* Version Designator general revision number */
  word                                             general_rev;
} nvi_verno_ext_type;

/* Internal Tx linearizer structure */
typedef PACKED struct PACKED_POST{ 
  /* Offset */
  int2                                             offset;
  /* Slope */
  byte                                             slope[NV_CDMA_TX_LIN_MASTER_SIZ];
} nvi_tx_linearizer_type;

/* GSM/WCDMA SMS type */
typedef PACKED struct PACKED_POST{ 
  /* GW sms entry [0..23] */
  word                                             address;
  /* length of 'data' */
  word                                             length;
} nvi_sms_gw_type;

/* GSM/DCS PA temperature comp for power indexes type */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             value[16];
} nvi_pa_temp_comp_index_type;

/* Coefficients for Freq comp */
typedef PACKED struct PACKED_POST{ 
  
  word                                             value[16];
} nvi_cal_chan_type;


typedef PACKED struct PACKED_POST{ 
  
  nv_pkt_dial_string_type                          pkt_dial_strings[NV_PKT_DIAL_STRING_LIST_SIZE];
} nvi_pkt_dial_string_type;

/* dB backoff for low and medium voltage */
typedef PACKED struct PACKED_POST{ 
  
  nv_pwr_bckoff_vs_volt_type                       value[NV_TX_BACKOFF_TABLE_SIZE];
} nvi_pwr_bckoff_vs_volt_type;


typedef PACKED struct PACKED_POST{ 
  
  nv_plmn_id_type                                  plmn_id;
  
  byte                                             rat;
  
  byte                                             service_type;
} nvi_plmn_id_info_type;

/* Internal type to hold frequency table with word type */
typedef PACKED struct PACKED_POST{ 
  /* Frequency table values */
  word                                             value[NV_FREQ_TABLE_SIZ];
} nvi_freq_word_table_type;


typedef PACKED struct PACKED_POST{ 
  /* fsc2_chksum */
  dword                                            fsc2_chksum;
} nvi_fsc2_chksum_type;


typedef PACKED struct PACKED_POST{ 
  
  byte                                             event_config;
  
  byte                                             msg_level;
  
  byte                                             logmask[NV_DIAG_RESTART_CONFIG_LOGMASK_SIZE];
  
  byte                                             reserved[4];
} nvi_diag_restart_config_type;

/* Type to hold bc11_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc11_p1_rise_fall_off[8];
} nvi_bc11_p1_rise_fall_off_type;

/* Type to hold gsm_dcs_carrier_suppression  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_dcs_carrier_suppression[2];
} nvi_gsm_dcs_carrier_suppression_type;

/* Type to hold gsm_1900_vl_th_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_th_prui_14[30];
} nvi_gsm_1900_vl_th_prui_14_type;

/* Type to hold bc5_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc5_exp_hdet_vs_agc_v2[16];
} nvi_bc5_exp_hdet_vs_agc_v2_type;

/* Type to hold c1_bc10_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_bc10_rx_cal_chan[16];
} nvi_c1_bc10_rx_cal_chan_type;

/* Type to hold c1_pcs_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_pcs_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_pcs_lna_2_offset_vs_freq_type;

/* Type to hold dcs_vh_th_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_th_prdi_14[30];
} nvi_dcs_vh_th_prdi_14_type;

/* Type to hold edge_1900_pmeas_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1900_pmeas_g3_f3[32];
} nvi_edge_1900_pmeas_g3_f3_type;

/* Type to hold gsm_900_pmeas_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_pmeas_g3_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_900_pmeas_g3_f3_type;

/* Type to hold gsm_path_delay_comp_freq_tbl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_path_delay_comp_freq_tbl[8];
} nvi_gsm_path_delay_comp_freq_tbl_type;

/* Type to hold gsm_vh_tm_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_tm_prdi_14[30];
} nvi_gsm_vh_tm_prdi_14_type;


typedef PACKED struct PACKED_POST{ 
  /* Low throughput threshold to stop ARDA */
  uint32                                           m1;
  /* Duration of Low Throughput threshold to stop arda */
  uint32                                           n1;
  /* High throughtput threshold to start arda */
  uint32                                           m2;
  /* Duration of high throughput threshold to start arda */
  uint32                                           n2;
} nvi_hdrmrlparda_param_type;

/* Type to hold lte_b40_c1_lna_range_rise_fall  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b40_c1_lna_range_rise_fall  */
  nv_lte_c1_lna_range_rise_fall_type               lte_b40_c1_lna_range_rise_fall[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b40_c1_lna_range_rise_fall_type;

/* Type to hold wcdma_1800_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_1800_tx_pdm_lin_0_type;

/* Type to hold wcdma_1800_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_1800_tx_pdm_lin_1_type;

/* Type to hold wcdma_800_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_800_lna_offset_vs_freq_2_type;

/* Type to hold c1_bc5_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc5_vga_gain_offset_vs_freq[16];
} nvi_c1_bc5_vga_gain_offset_vs_freq_type;

/* Type to hold c1_bcx_block_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bcx_block_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bcx_block_lna_4_offset_vs_freq_type;

/* Type to hold wcdma_1500_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1500_lna_offset_vs_freq_3_type;

/* Type to hold c1_wcdma_1900_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1900_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1900_lna_offset_vs_freq_3_type;

/* Type to hold dcs_ampm_master_tbl_seg7_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg7_f2[32];
} nvi_dcs_ampm_master_tbl_seg7_f2_type;

/* Type to hold gsm_vl_th_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_th_prui_13[30];
} nvi_gsm_vl_th_prui_13_type;

/* Type to hold gsm_1900_vm_tm_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_tm_prui_15[30];
} nvi_gsm_1900_vm_tm_prui_15_type;

/* Type to hold gsm_vm_th_prdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_th_prdi_12[30];
} nvi_gsm_vm_th_prdi_12_type;

/* Type to hold lte_b1_lna_range_rise_fall  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b1_lna_range_rise_fall  */
  nv_lte_lna_range_rise_fall_type                  lte_b1_lna_range_rise_fall[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b1_lna_range_rise_fall_type;

/* Type to hold gsm_1900_vl_th_brui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vl_th_brui_14[30];
} nvi_gsm_1900_vl_th_brui_14_type;

/* Type to hold dcs_vh_tm_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_tm_prdi_14[30];
} nvi_dcs_vh_tm_prdi_14_type;

/* Type to hold wcdma_bc4_tx_lin_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_lin_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_bc4_tx_lin_vs_temp_1_type;


typedef PACKED struct PACKED_POST{ 
  /* Amp or Volt threshold in mA or mV where mitigation is required */
  uint16                                           thresh1;
  /* Amp or Volt threshold in mA or mV where emergency measures are required */
  uint16                                           thresh2;
  /* Delta from threshold to exit mitigation and emergency state */
  uint16                                           hysteresis;
} nvi_current_monitor_thresholds_type;

/* Type to hold gsm_vl_th_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_th_prui_14[30];
} nvi_gsm_vl_th_prui_14_type;

/* Type to hold edge_900_pmeas_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_900_pmeas_g1_f3[32];
} nvi_edge_900_pmeas_g1_f3_type;

/* Type to hold gsm_1900_vm_tl_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_tl_brdi_14[30];
} nvi_gsm_1900_vm_tl_brdi_14_type;

/* Type to hold c1_bcx_block_1_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_bcx_block_1_rx_cal_chan[16];
} nvi_c1_bcx_block_1_rx_cal_chan_type;

/* Type to hold gsm_1900_prdi_11  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_11[30];
} nvi_gsm_1900_prdi_11_type;

/* Type to hold bcx_block_1_tx_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_1_tx_lin_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_1_tx_lin_1_type;

/* Type to hold c1_rf_antsel_umts_2100  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_rf_antsel_umts_2100[4];
} nvi_c1_rf_antsel_umts_2100_type;

/* Type to hold mbp_rf_mflo_gs1_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_mflo_gs1_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_mflo_gs1_cal_type;

/* Type to hold bc10_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc10_vco_coarse_tune_table[NV_VCO_CAL_LENGTH];
} nvi_bc10_vco_coarse_tune_table_type;

/* Type to hold gsm_ampm_master_tbl_seg5_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg5_f2[32];
} nvi_gsm_ampm_master_tbl_seg5_f2_type;


typedef PACKED struct PACKED_POST{ 
  /* UNDP aka Gobi feature configurations */
  uint32                                           hsu_flags;
  /* Registration status, bit 0 is local registration ind */
  uint32                                           reg_status;
  
  uint32                                           undp_feat_future_use[30];
} nvi_undp_feat_configs_type;

/* Type to hold gsm_1900_vh_th_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vh_th_brdi_15[30];
} nvi_gsm_1900_vh_th_brdi_15_type;

/* Type to hold bc4_tx_pdm_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc4_tx_pdm_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc4_tx_pdm_2_type;

/* Type to hold c1_wcdma_1500_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1500_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1500_lna_offset_vs_freq_2_type;

/* Type to hold wcdma_900_max_pwr_backoff_volt3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_max_pwr_backoff_volt3[4];
} nvi_wcdma_900_max_pwr_backoff_volt3_type;

/* Type to hold lte_b40_tx_mpr_backoff  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_tx_mpr_backoff[LTE_MPR_SIZ];
} nvi_lte_b40_tx_mpr_backoff_type;


typedef PACKED struct PACKED_POST{ 
  /* SlotCycle1. No greater than 0x1c. */
  uint8                                            slot_cycle1;
  /* SlotCycle2. Greater than or equal to SlotCycle1, but no greater than 0x1c. */
  uint8                                            slot_cycle2;
  /* Preferred SlottedMode attribute values */
  uint8                                            slot_cycle3;
  /* SlotCycle1. No greater than 0x1c. */
  uint8                                            wake_count1;
  /* SlotCycle2. Greater than or equal to SlotCycle1, but no greater than 0x1c. */
  uint8                                            wake_count2;
} nvi_hdridle_pref_slotted_mode_config_type;

/* Type to hold bc11_tx_pdm_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc11_tx_pdm_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc11_tx_pdm_0_type;

/* Type to hold gsm_1800_rgi_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1800_rgi_g0_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1800_rgi_g0_f1_type;

/* Type to hold bc11_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc11_tx_lim_vs_temp[8];
} nvi_bc11_tx_lim_vs_temp_type;

/* Type to hold lte_b13_tx_lin_master_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_tx_lin_master_3[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b13_tx_lin_master_3_type;

/* Type to hold lte_b7_tx_digital_gain_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b7_tx_digital_gain_comp[LTE_MPR_SIZ];
} nvi_lte_b7_tx_digital_gain_comp_type;

/* Type to hold c1_bc15_rx_cal_chan_lru  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c1_bc15_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc15_rx_cal_chan_lru_type;

/* Type to hold wcdma_900_tx_comp_vs_freq_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_comp_vs_freq_0[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_900_tx_comp_vs_freq_0_type;

/* Type to hold wcdma_800_tx_slp_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_slp_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_800_tx_slp_vs_temp_2_type;

/* Type to hold pcs_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_pcs_lna_3_offset_vs_freq_type;

/* Type to hold gsm_1800_linear_pa_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1800_linear_pa_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_1800_linear_pa_temp_comp_type;

/* Type to hold lte_b1_tx_rot_angle_pa_state  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_tx_rot_angle_pa_state[TX_ROT_ANGLE_SIZE];
} nvi_lte_b1_tx_rot_angle_pa_state_type;

/* Type to hold wcdma_1800_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_tx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1800_tx_cal_chan_type;

/* Type to hold lc_trusteddomain  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lc_trusteddomain[NV_TRUSTEDDOMAIN_SIZ];
} nvi_lc_trusteddomain_type;

/* Type to hold mf_rssi_cal_vs_freq_5  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_freq_5[32];
} nvi_mf_rssi_cal_vs_freq_5_type;

/* Type to hold lte_b13_tx_agc_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b13_tx_agc_offset[LTE_MPR_SIZ];
} nvi_lte_b13_tx_agc_offset_type;

/* Type to hold wcdma_900_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_900_vga_gain_offset_vs_freq_type;

/* Type to hold bc11_tx_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc11_tx_lin_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc11_tx_lin_0_type;

/* Type to hold bc4_tx_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc4_tx_lin_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc4_tx_lin_2_type;

/* Type to hold wcdma_1800_tx_lin_master_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_lin_master_1[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_1800_tx_lin_master_1_type;

/* Type to hold wcdma_800_tx_comp_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_comp_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_800_tx_comp_vs_freq_3_type;

/* Type to hold gsm_ampm_master_tbl_seg7_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg7_f2[32];
} nvi_gsm_ampm_master_tbl_seg7_f2_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg7_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg7_f2[32];
} nvi_gsm_1900_ampm_master_tbl_seg7_f2_type;

/* Type to hold rfr_vco_coarse_tuning_bc4  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rfr_vco_coarse_tuning_bc4[8];
} nvi_rfr_vco_coarse_tuning_bc4_type;

/* Type to hold wcdma_800_tx_comp_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_comp_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_800_tx_comp_vs_freq_2_type;

/* Type to hold bc5_tx_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc5_tx_lin_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc5_tx_lin_0_type;

/* Type to hold bc5_tx_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc5_tx_lin_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc5_tx_lin_1_type;

/* Type to hold bc5_tx_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc5_tx_lin_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc5_tx_lin_2_type;

/* Type to hold bc5_tx_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc5_tx_lin_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc5_tx_lin_3_type;

/* Type to hold bc6_tx_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc6_tx_lin_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc6_tx_lin_0_type;

/* Type to hold gsm_carrier_suppression  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_carrier_suppression[2];
} nvi_gsm_carrier_suppression_type;

/* Type to hold wap_push_autoload  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wap_push_autoload[WAP_PUSH_AUTOLOAD_SIZ];
} nvi_wap_push_autoload_type;

/* Type to hold wap_trusted_domain  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wap_trusted_domain[WAP_MAX_URL_SIZ];
} nvi_wap_trusted_domain_type;

/* Type to hold wcdma_1500_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1500_lna_offset_vs_freq_2_type;

/* Type to hold wcdma_1500_tx_lin_master_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_lin_master_2[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_1500_tx_lin_master_2_type;

/* Type to hold wcdma_1800_tx_lin_master_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_lin_master_2[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_1800_tx_lin_master_2_type;

/* Type to hold wcdma_1900_tx_lin_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_lin_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1900_tx_lin_vs_temp_2_type;

/* Type to hold wcdma_800_tx_lin_master_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_lin_master_2[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_800_tx_lin_master_2_type;

/* Type to hold wcdma_1500_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1500_vga_gain_offset_vs_temp_type;

/* Type to hold lte_b13_tx_gain_index_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_tx_gain_index_2[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b13_tx_gain_index_2_type;

/* Type to hold bc6_tx_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc6_tx_lin_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc6_tx_lin_1_type;

/* Type to hold gsm_850_carrier_suppression  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_850_carrier_suppression[2];
} nvi_gsm_850_carrier_suppression_type;

/* Type to hold im_server_address  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            im_server_address[NV_MAX_URL_SIZ];
} nvi_im_server_address_type;

/* Type to hold wcdma_1800_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1800_exp_hdet_vs_agc[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_1800_exp_hdet_vs_agc_type;

/* Type to hold mf_700_agc_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_700_agc_vs_freq[64];
} nvi_mf_700_agc_vs_freq_type;

/* Type to hold wcdma_1800_tx_lin_master_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_lin_master_0[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_1800_tx_lin_master_0_type;

/* Type to hold wcdma_800_tx_lin_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_lin_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_800_tx_lin_vs_temp_2_type;

/* Type to hold bc0_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc0_p2_rise_fall_off[8];
} nvi_bc0_p2_rise_fall_off_type;

/* Type to hold wcdma_1500_pa_range_map  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_pa_range_map[4];
} nvi_wcdma_1500_pa_range_map_type;

/* Type to hold c0_bc3_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc3_lna_1_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc3_lna_1_offset_vs_freq_type;

/* Type to hold c1_bc11_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc11_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc11_lna_4_offset_vs_freq_type;

/* Type to hold oem_item_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           oem_item_1[31];
} nvi_oem_item_1_type;

/* Type to hold gsm_1900_prui_01  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_01[30];
} nvi_gsm_1900_prui_01_type;

/* Type to hold dcs_ampm_master_tbl_seg5_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg5_f3[32];
} nvi_dcs_ampm_master_tbl_seg5_f3_type;

/* Type to hold rf_antsel_umts_900  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_umts_900[4];
} nvi_rf_antsel_umts_900_type;

/* Type to hold gsm_vh_tl_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_tl_prui_13[30];
} nvi_gsm_vh_tl_prui_13_type;

/* Type to hold bc3_tx_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc3_tx_lin_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc3_tx_lin_1_type;

/* Type to hold c1_wcdma_800_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_800_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_c1_wcdma_800_vga_gain_offset_vs_temp_type;

/* Type to hold wcdma_1500_tx_lin_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_lin_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1500_tx_lin_vs_temp_1_type;

/* Type to hold gsm_1900_vm_th_brui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_th_brui_15[30];
} nvi_gsm_1900_vm_th_brui_15_type;

/* Type to hold gsm_1900_rgi_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_rgi_g0_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1900_rgi_g0_f2_type;


typedef PACKED struct PACKED_POST{ 
  /* Basic loop measurement timer in ms */
  uint32                                           basic_loop;
  /* Mitigation loop measurement timer in ms */
  uint32                                           mitigation_loop;
  /* Mitigation state timer for adjusting max TX power in ms */
  uint32                                           t_down;
  /* Miscellaneous loop timer in ms */
  uint32                                           misc_timer;
  /* Multiples of mitigation loop to hold off on further changes to max PA TX power */
  uint8                                            pa_change_holdoff;
} nvi_thermal_monitor_timers_type;

/* Type to hold bc6_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc6_exp_hdet_vs_agc[NV_EXP_HDET_VS_AGC_SIZ];
} nvi_bc6_exp_hdet_vs_agc_type;

/* Type to hold bc14_tx_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc14_tx_lin_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc14_tx_lin_0_type;

/* Type to hold bc1_tx_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc1_tx_lin_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc1_tx_lin_2_type;

/* Type to hold gsm_vl_th_brui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_th_brui_12[30];
} nvi_gsm_vl_th_brui_12_type;

/* Type to hold bc4_tx_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc4_tx_lin_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc4_tx_lin_0_type;

/* Type to hold wcdma_1500_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1500_tx_lim_vs_freq_type;

/* Type to hold gsm_1900_prui_06  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_06[30];
} nvi_gsm_1900_prui_06_type;

/* Type to hold gsm_1900_rgi_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_rgi_g0_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1900_rgi_g0_f1_type;

/* Type to hold wcdma_1500_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1500_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1500_tx_lim_vs_temp_type;

/* Type to hold gsm_850_pmeas_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_pmeas_g0_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_850_pmeas_g0_f2_type;

/* Type to hold dcs_vh_tm_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_tm_brui_13[30];
} nvi_dcs_vh_tm_brui_13_type;

/* Type to hold gsm_vh_tl_prdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_tl_prdi_12[30];
} nvi_gsm_vh_tl_prdi_12_type;

/* Type to hold dcs_vh_th_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_th_prui_13[30];
} nvi_dcs_vh_th_prui_13_type;

/* Type to hold wcdma_1500_qaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_qaccum[6];
} nvi_wcdma_1500_qaccum_type;

/* Type to hold gsm_1900_vm_tl_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_tl_prdi_13[30];
} nvi_gsm_1900_vm_tl_prdi_13_type;

/* Type to hold dcs_prdi_11  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_prdi_11[30];
} nvi_dcs_prdi_11_type;

/* Type to hold gsm_900_rgi_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_900_rgi_g3_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_900_rgi_g3_f2_type;

/* Type to hold wcdma_1500_tx_comp_vs_freq_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_comp_vs_freq_1[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1500_tx_comp_vs_freq_1_type;

/* Type to hold wcdma_1500_tx_lin_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_lin_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1500_tx_lin_vs_temp_0_type;

/* Type to hold gsm_850_rgi_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_850_rgi_g3_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_850_rgi_g3_f3_type;

/* Type to hold bc1_tx_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc1_tx_lin_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc1_tx_lin_3_type;

/* Type to hold gsm_ampm_master_tbl_seg3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg3_f2[32];
} nvi_gsm_ampm_master_tbl_seg3_f2_type;

/* Type to hold gsm_vl_th_brdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_th_brdi_12[30];
} nvi_gsm_vl_th_brdi_12_type;


typedef PACKED struct PACKED_POST{ 
  /* TMSI zone length */
  byte                                             length;
} nvi_tmsi_zone_length_type;

/* Type to hold ms_sms_header_template_file  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ms_sms_header_template_file[NV_SMS_HEADER_TEMPLATE_FILE_SIZ];
} nvi_ms_sms_header_template_file_type;

/* Type to hold lte_b1_tx_gain_index_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_tx_gain_index_2[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b1_tx_gain_index_2_type;

/* Type to hold lte_b13_tx_lin_master_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b13_tx_lin_master_2[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b13_tx_lin_master_2_type;

/* Type to hold mf_proxy  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            mf_proxy[MF_PROXY_MAX_LEN];
} nvi_mf_proxy_type;

/* Type to hold bc10_hdr_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc10_hdr_p3_rise_fall_off[16];
} nvi_bc10_hdr_p3_rise_fall_off_type;

/* Type to hold bc11_ant_quality  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc11_ant_quality[NV_MAX_ANT_NO_SIZ][NV_FREQ_TABLE_SIZ];
} nvi_bc11_ant_quality_type;

/* Type to hold wcdma_1800_tx_slp_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_slp_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1800_tx_slp_vs_temp_2_type;

/* Type to hold wcdma_bc4_max_pwr_backoff_volt2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_bc4_max_pwr_backoff_volt2[4];
} nvi_wcdma_bc4_max_pwr_backoff_volt2_type;


typedef PACKED struct PACKED_POST{ 
  /* undp_hsu_vid_pid 2  */
  boolean                                          valid_flag;
  /* undp_hsu_vid_pid 2  */
  uint16                                           undp_vid[4];
  /* undp_pid */
  uint16                                           undp_pid[8];
} nvi_undp_hsu_vid_pid2_type;

/* Type to hold wcdma_bc4_tx_lin_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_bc4_tx_lin_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_bc4_tx_lin_vs_temp_2_type;

/* Type to hold bc14_tx_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc14_tx_lin_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc14_tx_lin_3_type;

/* Type to hold bc3_tx_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc3_tx_lin_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc3_tx_lin_0_type;

/* Type to hold edge_1800_pmeas_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_1800_pmeas_g1_f3[32];
} nvi_edge_1800_pmeas_g1_f3_type;

/* Type to hold gsm_1800_pmeas_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_pmeas_g3_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1800_pmeas_g3_f3_type;

/* Type to hold gsm_900_rgi_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_900_rgi_g1_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_900_rgi_g1_f3_type;

/* Type to hold gsm_vh_th_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vh_th_prui_14[30];
} nvi_gsm_vh_th_prui_14_type;

/* Type to hold wcdma_1900_pa_comp_up_r2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_pa_comp_up_r2_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1900_pa_comp_up_r2_vs_freq_type;

/* Type to hold bc3_ant_quality  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc3_ant_quality[NV_MAX_ANT_NO_SIZ][NV_FREQ_TABLE_SIZ];
} nvi_bc3_ant_quality_type;


typedef PACKED struct PACKED_POST{ 
  
  uint64                                           lte_bc_config_div;
  
  uint64                                           lte_bc_config_div_ext;
} nvi_lte_bc_config_div_type;

/* Type to hold bc0_ant_quality  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc0_ant_quality[NV_MAX_NO_OF_ANT_V][NV_FREQ_TABLE_SIZ];
} nvi_bc0_ant_quality_type;

/* Type to hold lte_b17_tx_lin_master_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_tx_lin_master_2[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b17_tx_lin_master_2_type;

/* Type to hold wcdma_900_pa_comp_down_r3_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_pa_comp_down_r3_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_900_pa_comp_down_r3_vs_freq_type;

/* Type to hold bc15_tx_pdm_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc15_tx_pdm_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc15_tx_pdm_3_type;

/* Type to hold lte_b1_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_exp_hdet_vs_agc[LTE_HDET_VS_AGC_SIZ];
} nvi_lte_b1_exp_hdet_vs_agc_type;

/* Type to hold gsm_vm_tl_brdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_tl_brdi_12[30];
} nvi_gsm_vm_tl_brdi_12_type;

/* Type to hold wcdma_bc4_tx_slp_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_tx_slp_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_bc4_tx_slp_vs_temp_3_type;

/* Type to hold hdrsrch_dbg_msk  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            hdrsrch_dbg_msk[64];
} nvi_hdrsrch_dbg_msk_type;

/* Type to hold bc6_tx_pdm_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc6_tx_pdm_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc6_tx_pdm_2_type;

/* Type to hold irda_pnp_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            irda_pnp_name[NV_IRDA_PNP_NAME_SIZ];
} nvi_irda_pnp_name_type;

/* Type to hold wcdma_1800_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1800_lna_offset_vs_freq_3_type;

/* Type to hold gsm_vl_tm_brui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_tm_brui_12[30];
} nvi_gsm_vl_tm_brui_12_type;

/* Type to hold bc14_tx_pdm_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc14_tx_pdm_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc14_tx_pdm_0_type;

/* Type to hold c1_wcdma_bc4_lna_phase_ctl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_bc4_lna_phase_ctl[6];
} nvi_c1_wcdma_bc4_lna_phase_ctl_type;

/* Type to hold bc1_ant_quality  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc1_ant_quality[NV_MAX_ANT_NO_SIZ][NV_FREQ_TABLE_SIZ];
} nvi_bc1_ant_quality_type;

/* Type to hold wcdma_900_pa_range_map  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_pa_range_map[4];
} nvi_wcdma_900_pa_range_map_type;

/* Type to hold dcs_rx_gain_range_1_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            dcs_rx_gain_range_1_temp_comp[3];
} nvi_dcs_rx_gain_range_1_temp_comp_type;

/* Type to hold wcdma_1500_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_rx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1500_rx_cal_chan_type;

/* Type to hold bc6_pa_smps_pdm_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc6_pa_smps_pdm_level[4][NV_FREQ_TABLE_SIZ];
} nvi_bc6_pa_smps_pdm_level_type;

/* Type to hold lte_b1_c1_rx_gain_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b1_c1_rx_gain_vs_freq[LTE_USABLE_GAIN_STATES][LTE_RX_FREQ_COMP_SIZ];
} nvi_lte_b1_c1_rx_gain_vs_freq_type;

/* Type to hold gnss_pp_reserved  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gnss_pp_reserved[5];
} nvi_gnss_pp_reserved_type;

/* Type to hold dcs_vh_tl_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_tl_prdi_13[30];
} nvi_dcs_vh_tl_prdi_13_type;

/* Type to hold factory_data_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            factory_data_2[128];
} nvi_factory_data_2_type;

/* Type to hold wcdma_bc4_tx_lin_master_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_lin_master_0[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_bc4_tx_lin_master_0_type;

/* Type to hold c1_bc10_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_bc10_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc10_lna_2_offset_vs_freq_type;

/* Type to hold dcs_vl_th_brdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_th_brdi_13[30];
} nvi_dcs_vl_th_brdi_13_type;

/* Type to hold wcdma_900_pa_comp_down_r2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_pa_comp_down_r2_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_900_pa_comp_down_r2_vs_freq_type;

/* Type to hold gsm_1900_rx_gain_range_1_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_rx_gain_range_1_temp_comp[3];
} nvi_gsm_1900_rx_gain_range_1_temp_comp_type;

/* Type to hold wcdma_bc4_max_pwr_backoff_volt1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_bc4_max_pwr_backoff_volt1[4];
} nvi_wcdma_bc4_max_pwr_backoff_volt1_type;

/* Type to hold factory_data_4  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            factory_data_4[128];
} nvi_factory_data_4_type;

/* Type to hold gsm_850_pmeas_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_pmeas_g2_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_850_pmeas_g2_f2_type;

/* Type to hold gsm_rx_gain_range_1_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_rx_gain_range_1_temp_comp[3];
} nvi_gsm_rx_gain_range_1_temp_comp_type;

/* Type to hold dcs_vl_th_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_th_brdi_14[30];
} nvi_dcs_vl_th_brdi_14_type;

/* Type to hold gsm_vl_tm_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vl_tm_brui_13[30];
} nvi_gsm_vl_tm_brui_13_type;

/* Type to hold oem_item_5  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           oem_item_5[31];
} nvi_oem_item_5_type;

/* Type to hold bc14_hdr_reva_tx_predistort  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc14_hdr_reva_tx_predistort[16];
} nvi_bc14_hdr_reva_tx_predistort_type;

/* Type to hold bcx_block_1_tx_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_1_tx_lin_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_1_tx_lin_2_type;

/* Type to hold lte_b40_tx_lin_master_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_tx_lin_master_0[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b40_tx_lin_master_0_type;

/* Type to hold browser_jump_embdlnk6_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           browser_jump_embdlnk6_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
} nvi_browser_jump_embdlnk6_name_type;

/* Type to hold gsm_1900_vm_th_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_th_prui_13[30];
} nvi_gsm_1900_vm_th_prui_13_type;

/* Type to hold oem_item_4  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           oem_item_4[31];
} nvi_oem_item_4_type;

/* Type to hold gsm_1900_pmeas_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_pmeas_g2_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1900_pmeas_g2_f1_type;

/* Type to hold gsm_1900_vm_tm_prdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_tm_prdi_15[30];
} nvi_gsm_1900_vm_tm_prdi_15_type;

/* Type to hold gsm_850_pmeas_g3_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_pmeas_g3_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_850_pmeas_g3_f3_type;

/* Type to hold mbp_rf_dvbh_gs4_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_dvbh_gs4_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_dvbh_gs4_cal_type;

/* Type to hold edge_850_rgi_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_850_rgi_g0_f2[32];
} nvi_edge_850_rgi_g0_f2_type;


typedef PACKED struct PACKED_POST{ 
  /* IP address and port of HTTP alternate proxy server */
  word                                             flags;
  /* port */
  uint16                                           port;
  
  nv_http_proxy_server_alt_addr                    addr;
} nvi_http_proxy_server_addr_alt_type;

/* Type to hold bc0_tx_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc0_tx_lin_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc0_tx_lin_0_type;

/* Type to hold dcs_vh_tl_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vh_tl_prui_14[30];
} nvi_dcs_vh_tl_prui_14_type;

/* Type to hold gsm_1900_prui_05  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_05[30];
} nvi_gsm_1900_prui_05_type;

/* Type to hold gsm_1900_vl_tm_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_tm_prui_14[30];
} nvi_gsm_1900_vl_tm_prui_14_type;

/* Type to hold wcdma_tx_lim_vs_temp_voice_call_active  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_tx_lim_vs_temp_voice_call_active[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_tx_lim_vs_temp_voice_call_active_type;

/* Type to hold wcdma_bc4_max_pwr_backoff_voltages  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_bc4_max_pwr_backoff_voltages[3];
} nvi_wcdma_bc4_max_pwr_backoff_voltages_type;

/* Type to hold lte_b13_tx_digital_gain_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b13_tx_digital_gain_comp[LTE_MPR_SIZ];
} nvi_lte_b13_tx_digital_gain_comp_type;

/* Type to hold gsm_1900_vl_th_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vl_th_prdi_14[30];
} nvi_gsm_1900_vl_th_prdi_14_type;

/* Type to hold edge_850_rgi_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_850_rgi_g3_f2[32];
} nvi_edge_850_rgi_g3_f2_type;

/* Type to hold gsm_1800_pmeas_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_pmeas_g2_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1800_pmeas_g2_f3_type;

/* Type to hold bc8_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc8_exp_hdet_vs_agc_v2[16];
} nvi_bc8_exp_hdet_vs_agc_v2_type;

/* Type to hold bcx_block_1_tx_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_1_tx_lin_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_1_tx_lin_0_type;

/* Type to hold edge_1800_rgi_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1800_rgi_g2_f3[32];
} nvi_edge_1800_rgi_g2_f3_type;

/* Type to hold oem_item_7  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           oem_item_7[31];
} nvi_oem_item_7_type;

/* Type to hold oem_item_6  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           oem_item_6[31];
} nvi_oem_item_6_type;

/* Type to hold dcs_vh_tm_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vh_tm_brdi_14[30];
} nvi_dcs_vh_tm_brdi_14_type;

/* Type to hold lte_b40_tx_gain_index_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_tx_gain_index_3[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b40_tx_gain_index_3_type;

/* Type to hold bc10_tx_pdm_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc10_tx_pdm_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc10_tx_pdm_2_type;

/* Type to hold bcx_block_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bcx_block_vco_coarse_tune_table[NV_VCO_CAL_LENGTH];
} nvi_bcx_block_vco_coarse_tune_table_type;

/* Type to hold dcs_rx_gain_range_2_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_rx_gain_range_2_freq_comp[NV_DCS_CAL_ARFCN_SIZ];
} nvi_dcs_rx_gain_range_2_freq_comp_type;

/* Type to hold pcs_pdm1_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_pdm1_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_pcs_pdm1_vs_temp_type;

/* Type to hold pcs_pdm2_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_pdm2_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_pcs_pdm2_vs_temp_type;

/* Type to hold c1_cdma_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int2                                             c1_cdma_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_c1_cdma_vga_gain_offset_vs_temp_type;

/* Type to hold wcdma_800_pa_range_map  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_pa_range_map[4];
} nvi_wcdma_800_pa_range_map_type;

/* Type to hold wcdma_900_hs_switchpoints_shift  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_hs_switchpoints_shift[2];
} nvi_wcdma_900_hs_switchpoints_shift_type;

/* Type to hold wcdma_900_tx_lin_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_lin_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_900_tx_lin_vs_temp_1_type;

/* Type to hold wcdma_900_tx_comp_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_comp_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_900_tx_comp_vs_freq_3_type;

/* Type to hold bc6_tx_pdm_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc6_tx_pdm_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc6_tx_pdm_1_type;

/* Type to hold bc15_tx_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc15_tx_lin_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc15_tx_lin_0_type;

/* Type to hold edge_1800_rgi_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1800_rgi_g0_f2[32];
} nvi_edge_1800_rgi_g0_f2_type;

/* Type to hold dcs_vl_th_brdi_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_vl_th_brdi_15[30];
} nvi_dcs_vl_th_brdi_15_type;

/* Type to hold gsm_1900_amam_master_tbl_seg8_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg8_f2[64];
} nvi_gsm_1900_amam_master_tbl_seg8_f2_type;

/* Type to hold gsm_ampm_master_tbl_seg1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg1_f1[32];
} nvi_gsm_ampm_master_tbl_seg1_f1_type;

/* Type to hold gsm_ampm_master_tbl_seg4_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg4_f1[32];
} nvi_gsm_ampm_master_tbl_seg4_f1_type;

/* Type to hold gsm_ampm_master_tbl_seg5_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg5_f1[32];
} nvi_gsm_ampm_master_tbl_seg5_f1_type;

/* Type to hold wcdma_900_tx_lin_master_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_lin_master_3[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_900_tx_lin_master_3_type;

/* Type to hold gsm_900_pmeas_g0_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_pmeas_g0_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_900_pmeas_g0_f2_type;

/* Type to hold c1_bc3_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc3_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc3_lna_4_offset_vs_freq_type;

/* Type to hold dcs_ampm_master_tbl_seg2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg2_f2[32];
} nvi_dcs_ampm_master_tbl_seg2_f2_type;

/* Type to hold gsm_1900_pa_gain_slope  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             gsm_1900_pa_gain_slope[NV_NUM_DCS_PA_PROFILES];
} nvi_gsm_1900_pa_gain_slope_type;

/* Type to hold lte_b7_tx_gain_index_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_tx_gain_index_0[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b7_tx_gain_index_0_type;

/* Type to hold gsm_850_amam_master_tbl_seg1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg1_f3[64];
} nvi_gsm_850_amam_master_tbl_seg1_f3_type;

/* Type to hold ms_sms_smsc_address2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ms_sms_smsc_address2[NV_SMS_SMSC_ADDRESS_SIZ];
} nvi_ms_sms_smsc_address2_type;

/* Type to hold bc10_tx_pdm_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc10_tx_pdm_lin_2[NV_TX_PDM_LIN_TYPE];
} nvi_bc10_tx_pdm_lin_2_type;

/* Type to hold c0_bc10_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c0_bc10_tx_cal_chan[16];
} nvi_c0_bc10_tx_cal_chan_type;

/* Type to hold wcdma_1900_tx_lin_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_lin_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1900_tx_lin_vs_temp_3_type;

/* Type to hold wcdma_900_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_rx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_900_rx_cal_chan_type;

/* Type to hold wcdma_900_tx_comp_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_comp_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_900_tx_comp_vs_freq_2_type;

/* Type to hold wcdma_1800_tx_slp_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_slp_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1800_tx_slp_vs_temp_3_type;

/* Type to hold wcdma_bc4_tx_pdm_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_pdm_lin_1[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_bc4_tx_pdm_lin_1_type;

/* Type to hold wcdma_1900_pa_range_map  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_pa_range_map[4];
} nvi_wcdma_1900_pa_range_map_type;

/* Type to hold wcdma_800_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_800_lna_offset_vs_freq_4_type;

/* Type to hold c1_bc11_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc11_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc11_lna_1_offset_vs_freq_type;

/* Type to hold c0_bc4_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bc4_rx_cal_chan[16];
} nvi_c0_bc4_rx_cal_chan_type;

/* Type to hold gsm_amam_master_tbl_seg8_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg8_f3[64];
} nvi_gsm_amam_master_tbl_seg8_f3_type;

/* Type to hold lte_b40_tx_gain_index_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_tx_gain_index_2[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b40_tx_gain_index_2_type;

/* Type to hold gsm_ampm_master_tbl_seg2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg2_f2[32];
} nvi_gsm_ampm_master_tbl_seg2_f2_type;

/* Type to hold bcx_block_1_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_1_tx_lim_vs_temp[8];
} nvi_bcx_block_1_tx_lim_vs_temp_type;

/* Type to hold lte_b40_im_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b40_im_level[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b40_im_level_type;

/* Type to hold wcdma_bc4_hs_switchpoints_shift  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_hs_switchpoints_shift[2];
} nvi_wcdma_bc4_hs_switchpoints_shift_type;

/* Type to hold bc0_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc0_tx_lim_vs_temp[8];
} nvi_bc0_tx_lim_vs_temp_type;

/* Type to hold c0_bc5_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc5_lna_3_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc5_lna_3_offset_vs_freq_type;

/* Type to hold bc14_tx_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc14_tx_lin_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc14_tx_lin_1_type;

/* Type to hold gsm_path_delay_hot_temp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_path_delay_hot_temp_vs_freq[8];
} nvi_gsm_path_delay_hot_temp_vs_freq_type;

/* Type to hold bc2_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc2_exp_hdet_vs_agc_v2[16];
} nvi_bc2_exp_hdet_vs_agc_v2_type;

/* Type to hold gsm_1900_vm_th_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_th_prui_15[30];
} nvi_gsm_1900_vm_th_prui_15_type;

/* Type to hold gsm_vm_th_brdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_vm_th_brdi_14[30];
} nvi_gsm_vm_th_brdi_14_type;

/* Type to hold wcdma_800_tx_lin_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_lin_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_800_tx_lin_vs_temp_3_type;

/* Type to hold edge_850_rgi_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_850_rgi_g2_f2[32];
} nvi_edge_850_rgi_g2_f2_type;

/* Type to hold user_greeting  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           user_greeting[NV_USER_GREETING_SIZ];
} nvi_user_greeting_type;


typedef PACKED struct PACKED_POST{ 
  /* Enable or Disable this Monitor */
  boolean                                          enable;
  /* Settings for CMD1_MATCH */
  uint16                                           cmd1_match;
  /* Settings for CMD1_MSK */
  uint16                                           cmd1_msk;
  /* Settings for CMD2_MATCH */
  uint16                                           cmd2_match;
  /* Settings for CMD2_MSK */
  uint16                                           cmd2_msk;
  /* Set address to match */
  uint32                                           address;
  /* Set address mask to match */
  uint32                                           address_mask;
} nvi_bus_prof_advanced_settings_t;

/* Type to hold bc14_tx_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc14_tx_lin_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc14_tx_lin_2_type;

/* Type to hold gsm_1900_amam_master_tbl_seg2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg2_f3[64];
} nvi_gsm_1900_amam_master_tbl_seg2_f3_type;

/* Type to hold lte_b40_antsel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b40_antsel[4];
} nvi_lte_b40_antsel_type;

/* Type to hold wcdma_1900_tx_lin_master_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1900_tx_lin_master_2[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_1900_tx_lin_master_2_type;

/* Type to hold gsm_900_pmeas_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_pmeas_g3_f2[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_900_pmeas_g3_f2_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg7_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg7_f3[32];
} nvi_gsm_1900_ampm_master_tbl_seg7_f3_type;

/* Type to hold gsm_amam_master_tbl_seg4_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg4_f3[64];
} nvi_gsm_amam_master_tbl_seg4_f3_type;

/* Type to hold wcdma_lna_offset_vs_freq_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_lna_offset_vs_freq_3_type;

/* Type to hold gsm_900_rgi_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_900_rgi_g2_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_900_rgi_g2_f1_type;

/* Type to hold pcs_rx_comp_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             pcs_rx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_pcs_rx_comp_vs_freq_type;

/* Type to hold wcdma_1500_tx_lin_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_lin_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1500_tx_lin_vs_temp_2_type;

/* Type to hold gsm_vl_tm_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_tm_prdi_14[30];
} nvi_gsm_vl_tm_prdi_14_type;

/* Type to hold bc3_tx_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc3_tx_lin_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc3_tx_lin_3_type;

/* Type to hold wcdma_800_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_800_lna_offset_vs_freq_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg8_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg8_f2[32];
} nvi_gsm_1900_ampm_master_tbl_seg8_f2_type;

/* Type to hold oem_item_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           oem_item_3[31];
} nvi_oem_item_3_type;

/* Type to hold wcdma_1800_tx_lin_master_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_tx_lin_master_3[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_1800_tx_lin_master_3_type;

/* Type to hold bc6_tx_pdm_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc6_tx_pdm_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc6_tx_pdm_3_type;

/* Type to hold lte_b1_lna_phase_ctrl  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_lna_phase_ctrl[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b1_lna_phase_ctrl_type;

/* Type to hold bc15_pa_smps_pdm_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc15_pa_smps_pdm_level[4][NV_FREQ_TABLE_SIZ];
} nvi_bc15_pa_smps_pdm_level_type;

/* Type to hold bc11_tx_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc11_tx_lin_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc11_tx_lin_1_type;

/* Type to hold gsm_900_rgi_g3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_900_rgi_g3_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_900_rgi_g3_f1_type;

/* Type to hold bc5_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             bc5_tx_lim_vs_freq[16];
} nvi_bc5_tx_lim_vs_freq_type;

/* Type to hold bc14_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc14_p1_rise_fall_off[8];
} nvi_bc14_p1_rise_fall_off_type;

/* Type to hold bc4_pa_smps_pdm_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc4_pa_smps_pdm_level[4][NV_FREQ_TABLE_SIZ];
} nvi_bc4_pa_smps_pdm_level_type;

/* Type to hold wcdma_bc4_max_pwr_backoff_volt3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_bc4_max_pwr_backoff_volt3[4];
} nvi_wcdma_bc4_max_pwr_backoff_volt3_type;

/* Type to hold bc11_tx_pdm_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc11_tx_pdm_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc11_tx_pdm_2_type;

/* Type to hold bc4_tx_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc4_tx_lin_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc4_tx_lin_3_type;

/* Type to hold gsm_1900_vm_tm_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_tm_prui_14[30];
} nvi_gsm_1900_vm_tm_prui_14_type;

/* Type to hold wcdma_pa_comp_up_r2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_pa_comp_up_r2_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_pa_comp_up_r2_vs_freq_type;

/* Type to hold bcx_block_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bcx_block_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_bcx_block_tx_pdm_lin_3_type;

/* Type to hold c1_wcdma_1500_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1500_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1500_vga_gain_offset_vs_freq_type;

/* Type to hold wcdma_bc4_qaccum  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_qaccum[6];
} nvi_wcdma_bc4_qaccum_type;

/* Type to hold wcdma_900_max_pwr_backoff_voltages  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_900_max_pwr_backoff_voltages[3];
} nvi_wcdma_900_max_pwr_backoff_voltages_type;

/* Type to hold gsm_1900_vm_tm_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_tm_prui_13[30];
} nvi_gsm_1900_vm_tm_prui_13_type;

/* Type to hold wcdma_900_lna_offset_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_900_lna_offset_vs_freq_2_type;

/* Type to hold rf_antsel_umts_bc4  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_umts_bc4[4];
} nvi_rf_antsel_umts_bc4_type;

/* Type to hold mbp_rf_mflo_cal_freq  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           mbp_rf_mflo_cal_freq[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_mflo_cal_freq_type;

/* Type to hold mbp_rf_mflo_gs0_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_mflo_gs0_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_mflo_gs0_cal_type;

/* Type to hold wcdma_900_tx_slp_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_900_tx_slp_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_900_tx_slp_vs_temp_2_type;

/* Type to hold bc14_pa_smps_pdm_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc14_pa_smps_pdm_level[4][NV_FREQ_TABLE_SIZ];
} nvi_bc14_pa_smps_pdm_level_type;

/* Type to hold c0_bcx_block_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bcx_block_lna_4_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bcx_block_lna_4_offset_vs_freq_type;

/* Type to hold wcdma_bc4_pa_compensate_dn_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_bc4_pa_compensate_dn_with_dvs[10];
} nvi_wcdma_bc4_pa_compensate_dn_with_dvs_type;

/* Type to hold dcs_vm_tm_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_tm_prui_13[30];
} nvi_dcs_vm_tm_prui_13_type;

/* Type to hold c1_bc5_lna_1_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_bc5_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_bc5_lna_1_offset_vs_freq_type;

/* Type to hold gsm_1800_linear_pa_r0_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1800_linear_pa_r0_temp_comp[NV_LINEAR_PA_TEMP_COMP_SIZE];
} nvi_gsm_1800_linear_pa_r0_temp_comp_type;

/* Type to hold dcs_vl_tm_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_tm_prdi_13[30];
} nvi_dcs_vl_tm_prdi_13_type;

/* Type to hold wcdma_c0_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_c0_tx_lim_vs_freq[16];
} nvi_wcdma_c0_tx_lim_vs_freq_type;

/* Type to hold wcdma_1500_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1500_lna_offset_vs_freq_4_type;


typedef PACKED struct PACKED_POST{ 
  /* WLAN Scan Preference */
  uint32                                           scan_mode;
} nvi_wlan_scan_pref_type;

/* Type to hold wcdma_bc4_tx_slp_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_bc4_tx_slp_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_bc4_tx_slp_vs_temp_2_type;

/* Type to hold dcs_vm_th_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_th_prui_14[30];
} nvi_dcs_vm_th_prui_14_type;

/* Type to hold c1_wcdma_1900_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_wcdma_1900_rx_cal_chan[16];
} nvi_c1_wcdma_1900_rx_cal_chan_type;

/* Type to hold bc15_tx_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc15_tx_lin_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc15_tx_lin_3_type;

/* Type to hold wcdma_1900_tx_comp_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_tx_comp_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1900_tx_comp_vs_freq_2_type;

/* Type to hold gsm_1900_vm_th_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_th_prui_14[30];
} nvi_gsm_1900_vm_th_prui_14_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            pilot_add;
  
  uint8                                            pilot_drop;
  
  uint8                                            pilot_compare;
  
  uint8                                            pilot_drop_timer;
  
  boolean                                          dynamic_thresholds;
  
  uint8                                            soft_slope;
  /* HAI x6 Only */
  int8                                             add_intercept;
  /* HAI x6 Only */
  int8                                             drop_intercept;
  
  uint8                                            nset_max_age;
} nvi_hdr_chan_mgmt_params_type;


typedef PACKED struct PACKED_POST{ 
  /* AFC Loop Parameters */
  uint16                                           loop_gain_numer;
  /* Denominator of loop gain */
  uint16                                           loop_gain_denom;
  /* Maximum frequency adjustment in fast acquisition */
  uint16                                           fast_adjust_limit;
  /* Maximum frequency adjustment in slow acquisition */
  uint16                                           slow_adjust_limit;
} nvi_mf_afc_loop_params_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            digits[NV_SEC_CODE_SIZE];
} nvi_multi_sec_code_type;

/* Type to hold wcdma_1800_rel6_tx_beta_scaling_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1800_rel6_tx_beta_scaling_comp[7];
} nvi_wcdma_1800_rel6_tx_beta_scaling_comp_type;

/* Type to hold bc6_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc6_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_bc6_tx_pdm_lin_0_type;

/* Type to hold mf_chan_support_vhf  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           mf_chan_support_vhf[32];
} nvi_mf_chan_support_vhf_type;

/* Type to hold dcs_vl_th_prdi_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_th_prdi_14[30];
} nvi_dcs_vl_th_prdi_14_type;

/* Type to hold bc10_tx_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc10_tx_lin_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc10_tx_lin_3_type;

/* Type to hold wcdma_1500_tx_slp_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_slp_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1500_tx_slp_vs_temp_2_type;

/* Type to hold wcdma_1500_tx_slp_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_slp_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1500_tx_slp_vs_temp_3_type;

/* Type to hold c0_bc5_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc5_vga_gain_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc5_vga_gain_offset_vs_freq_type;

/* Type to hold gsm_850_ampm_master_tbl_seg2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg2_f3[32];
} nvi_gsm_850_ampm_master_tbl_seg2_f3_type;

/* Type to hold lc_suburl_key_label  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lc_suburl_key_label[NV_LC_SUBURL_KEY_LABEL_SIZ];
} nvi_lc_suburl_key_label_type;

/* Type to hold wcdma_900_tx_lin_master_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_lin_master_2[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_900_tx_lin_master_2_type;

/* Type to hold wcdma_1800_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1800_tx_lim_vs_freq_type;

/* Type to hold lte_b40_tx_gain_index_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_tx_gain_index_0[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b40_tx_gain_index_0_type;

/* Type to hold gsm_enable_tx_freq_comp_vs_pcl  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_enable_tx_freq_comp_vs_pcl[15];
} nvi_gsm_enable_tx_freq_comp_vs_pcl_type;

/* Type to hold gsm_ampm_master_tbl_seg4_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg4_f2[32];
} nvi_gsm_ampm_master_tbl_seg4_f2_type;

/* Type to hold gsm_1900_prui_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_12[30];
} nvi_gsm_1900_prui_12_type;

/* Type to hold rf_cal_dat_file  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             rf_cal_dat_file[NV_QC_SERIAL_NUM_LEN];
} nvi_rf_cal_dat_file_type;

/* Type to hold vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             vco_coarse_tune_table[NV_VCO_COARSE_TUNE_TABLE_SIZ];
} nvi_vco_coarse_tune_table_type;

/* Type to hold wcdma_1800_pa_comp_down_r2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_pa_comp_down_r2_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1800_pa_comp_down_r2_vs_freq_type;

/* Type to hold wcdma_1800_pa_comp_up_r3_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_pa_comp_up_r3_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1800_pa_comp_up_r3_vs_freq_type;

/* Type to hold gsm_1900_amam_master_tbl_seg7_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg7_f2[64];
} nvi_gsm_1900_amam_master_tbl_seg7_f2_type;

/* Type to hold bc6_tx_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc6_tx_lin_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc6_tx_lin_2_type;

/* Type to hold c0_bc15_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc15_vga_gain_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc15_vga_gain_offset_vs_freq_type;

/* Type to hold wcdma_1500_tx_lin_master_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_lin_master_3[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_1500_tx_lin_master_3_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            session_type;
} nvi_active_subs_info_s_type;

/* Type to hold bcx_block_tx_pdm_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_tx_pdm_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_tx_pdm_0_type;

/* Type to hold bc1_tx_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc1_tx_lin_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc1_tx_lin_0_type;

/* Type to hold wcdma_1800_tx_comp_vs_freq_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_comp_vs_freq_1[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1800_tx_comp_vs_freq_1_type;

/* Type to hold bc0_tx_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc0_tx_lin_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc0_tx_lin_3_type;

/* Type to hold c1_bc1_rx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bc1_rx_cal_chan[16];
} nvi_c1_bc1_rx_cal_chan_type;

/* Type to hold bcx_block_1_hdr_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_1_hdr_p1_rise_fall_off[16];
} nvi_bcx_block_1_hdr_p1_rise_fall_off_type;

/* Type to hold edge_900_pmeas_g2_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           edge_900_pmeas_g2_f2[32];
} nvi_edge_900_pmeas_g2_f2_type;

/* Type to hold gsm_vm_th_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_th_prdi_13[30];
} nvi_gsm_vm_th_prdi_13_type;

/* Type to hold wcdma_1500_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1500_exp_hdet_vs_agc[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
} nvi_wcdma_1500_exp_hdet_vs_agc_type;

/* Type to hold wcdma_1500_tx_slp_vs_temp_1  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_slp_vs_temp_1[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1500_tx_slp_vs_temp_1_type;

/* Type to hold gsm_1900_prdi_04  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_04[30];
} nvi_gsm_1900_prdi_04_type;

/* Type to hold wcdma_1500_pa_compensate_up_with_dvs  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1500_pa_compensate_up_with_dvs[10];
} nvi_wcdma_1500_pa_compensate_up_with_dvs_type;

/* Type to hold bc10_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc10_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_bc10_tx_pdm_lin_3_type;

/* Type to hold gsm_1900_rgi_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_rgi_g1_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1900_rgi_g1_f3_type;


typedef PACKED struct PACKED_POST{ 
  /* prl */
  uint32                                           prl;
} nvi_prl_pref_type;

/* Type to hold gsm_850_ampm_master_tbl_seg4_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg4_f1[32];
} nvi_gsm_850_ampm_master_tbl_seg4_f1_type;

/* Type to hold gsm_1800_pmeas_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_pmeas_g1_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1800_pmeas_g1_f3_type;

/* Type to hold c0_bcx_block_1_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bcx_block_1_lna_2_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bcx_block_1_lna_2_offset_vs_freq_type;

/* Type to hold bc15_tx_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc15_tx_lin_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc15_tx_lin_1_type;

/* Type to hold lte_b17_pa_compensate_up_down  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold lte_b17_pa_compensate_up_down  */
  nv_lte_pa_compensate_up_down_type                lte_b17_pa_compensate_up_down[TX_PA_STATE_SIZ];
} nvi_lte_b17_pa_compensate_up_down_type;

/* Type to hold gsm_850_ampm_master_tbl_seg8_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg8_f2[32];
} nvi_gsm_850_ampm_master_tbl_seg8_f2_type;

/* Type to hold wcdma_900_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_900_vga_gain_offset_vs_temp_type;

/* Type to hold aagps_xtra_primary_server_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            aagps_xtra_primary_server_url[128];
} nvi_aagps_xtra_primary_server_url_type;

/* Type to hold dfm_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             dfm_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_dfm_lna_offset_vs_freq_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg8_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg8_f3[32];
} nvi_gsm_1900_ampm_master_tbl_seg8_f3_type;

/* Type to hold irda_device_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            irda_device_name[NV_IRDA_DEVICE_NAME_SIZ];
} nvi_irda_device_name_type;

/* Type to hold bc10_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             bc10_tx_lim_vs_freq[16];
} nvi_bc10_tx_lim_vs_freq_type;

/* Type to hold dcs_ampm_master_tbl_seg1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg1_f1[32];
} nvi_dcs_ampm_master_tbl_seg1_f1_type;

/* Type to hold dcs_ampm_master_tbl_seg4_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg4_f1[32];
} nvi_dcs_ampm_master_tbl_seg4_f1_type;

/* Type to hold dcs_ampm_master_tbl_seg5_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg5_f1[32];
} nvi_dcs_ampm_master_tbl_seg5_f1_type;

/* Type to hold dcs_ampm_master_tbl_seg6_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg6_f1[32];
} nvi_dcs_ampm_master_tbl_seg6_f1_type;

/* Type to hold dcs_ampm_master_tbl_seg7_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg7_f1[32];
} nvi_dcs_ampm_master_tbl_seg7_f1_type;

/* Type to hold dcs_ampm_master_tbl_seg8_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg8_f1[32];
} nvi_dcs_ampm_master_tbl_seg8_f1_type;

/* Type to hold gsm_850_ampm_master_tbl_seg1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg1_f1[32];
} nvi_gsm_850_ampm_master_tbl_seg1_f1_type;

/* Type to hold gsm_850_ampm_master_tbl_seg2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg2_f1[32];
} nvi_gsm_850_ampm_master_tbl_seg2_f1_type;

/* Type to hold c1_pcs_lna_4_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c1_pcs_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_c1_pcs_lna_4_offset_vs_freq_type;

/* Type to hold wcdma_2100_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_2100_drx_mode_sel[3];
} nvi_wcdma_2100_drx_mode_sel_type;

/* Type to hold c0_bc11_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c0_bc11_tx_cal_chan[16];
} nvi_c0_bc11_tx_cal_chan_type;

/* Type to hold c0_bc14_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c0_bc14_tx_cal_chan[16];
} nvi_c0_bc14_tx_cal_chan_type;

/* Type to hold gsm_amam_master_tbl_seg4_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg4_f1[64];
} nvi_gsm_amam_master_tbl_seg4_f1_type;

/* Type to hold bcx_block_hdr_p3_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_hdr_p3_rise_fall_off[16];
} nvi_bcx_block_hdr_p3_rise_fall_off_type;


typedef PACKED struct PACKED_POST{ 
  /* Length of NAI in no. of bytes */
  uint8                                            nai_length;
  /* bytes ( characters) of NAI */
  uint8                                            nai[NV_MAX_NAI_LENGTH];
} nvi_ds_sip_rm_nai_type;

/* Type to hold bcx_block_1_exp_hdet_vs_agc_v2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bcx_block_1_exp_hdet_vs_agc_v2[16];
} nvi_bcx_block_1_exp_hdet_vs_agc_v2_type;

/* Type to hold c1_wcdma_900_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_900_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_c1_wcdma_900_vga_gain_offset_vs_temp_type;

/* Type to hold dcs_ampm_master_tbl_seg6_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg6_f2[32];
} nvi_dcs_ampm_master_tbl_seg6_f2_type;

/* Type to hold rf_antsel_umts_2100  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rf_antsel_umts_2100[4];
} nvi_rf_antsel_umts_2100_type;

/* Type to hold bc6_tx_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc6_tx_lin_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc6_tx_lin_3_type;

/* Type to hold c1_wcdma_1900_lna_offset_vs_freq_4  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c1_wcdma_1900_lna_offset_vs_freq_4[NV_FREQ_TABLE_SIZ];
} nvi_c1_wcdma_1900_lna_offset_vs_freq_4_type;

/* Type to hold gsm_vl_tm_prdi_12  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vl_tm_prdi_12[30];
} nvi_gsm_vl_tm_prdi_12_type;

/* Type to hold gsm_1900_pmeas_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_pmeas_g1_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1900_pmeas_g1_f1_type;

/* Type to hold gsm_1900_enable_tx_freq_comp_vs_pcl  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_enable_tx_freq_comp_vs_pcl[16];
} nvi_gsm_1900_enable_tx_freq_comp_vs_pcl_type;

/* Type to hold wcdma_800_tx_slp_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_800_tx_slp_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_800_tx_slp_vs_temp_3_type;

/* Type to hold wcdma_900_tx_lin_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_lin_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_900_tx_lin_vs_temp_3_type;

/* Type to hold gsm_900_pmeas_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_pmeas_g1_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_900_pmeas_g1_f1_type;

/* Type to hold gsm_900_rgi_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_900_rgi_g0_f1[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_900_rgi_g0_f1_type;

/* Type to hold mf_rssi_cal_vs_l_band_freq_5  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_l_band_freq_5[32];
} nvi_mf_rssi_cal_vs_l_band_freq_5_type;

/* Type to hold gsm_850_rgi_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_850_rgi_g3_f2[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_850_rgi_g3_f2_type;

/* Type to hold c0_bc10_intelliceiver_cal  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            c0_bc10_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
} nvi_c0_bc10_intelliceiver_cal_type;

/* Type to hold dcs_ampm_master_tbl_seg3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           dcs_ampm_master_tbl_seg3_f1[32];
} nvi_dcs_ampm_master_tbl_seg3_f1_type;

/* Type to hold gsm_1800_pmeas_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1800_pmeas_g2_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_1800_pmeas_g2_f1_type;

/* Type to hold edge_1800_rgi_g1_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1800_rgi_g1_f3[32];
} nvi_edge_1800_rgi_g1_f3_type;

/* Type to hold bcx_block_1_tx_pdm_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bcx_block_1_tx_pdm_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bcx_block_1_tx_pdm_1_type;

/* Type to hold wcdma_1500_tx_lin_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_lin_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1500_tx_lin_vs_temp_3_type;

/* Type to hold wcdma_1800_max_pwr_backoff_voltages  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1800_max_pwr_backoff_voltages[3];
} nvi_wcdma_1800_max_pwr_backoff_voltages_type;

/* Type to hold gsm_1900_prui_09  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prui_09[30];
} nvi_gsm_1900_prui_09_type;

/* Type to hold bc3_pa_smps_pdm_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc3_pa_smps_pdm_level[4][NV_FREQ_TABLE_SIZ];
} nvi_bc3_pa_smps_pdm_level_type;

/* Type to hold gsm_850_pmeas_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_pmeas_g0_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_850_pmeas_g0_f1_type;

/* Type to hold cgps_1x_mpc_server_addr_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            cgps_1x_mpc_server_addr_url[128];
} nvi_cgps_1x_mpc_server_addr_url_type;

/* Type to hold wcdma_1900_max_pwr_backoff_volt2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_max_pwr_backoff_volt2[4];
} nvi_wcdma_1900_max_pwr_backoff_volt2_type;


typedef PACKED struct PACKED_POST{ 
  /* Time */
  dword                                            time;
} nvi_call_time_type;

/* Type to hold wcdma_1500_max_pwr_backoff_voltages  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1500_max_pwr_backoff_voltages[3];
} nvi_wcdma_1500_max_pwr_backoff_voltages_type;

/* Type to hold gsm_amam_master_tbl_seg7_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg7_f1[64];
} nvi_gsm_amam_master_tbl_seg7_f1_type;

/* Type to hold fm_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             fm_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_fm_vga_gain_offset_vs_freq_type;

/* Type to hold gsm_1900_ampm_master_tbl_seg6_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_1900_ampm_master_tbl_seg6_f3[32];
} nvi_gsm_1900_ampm_master_tbl_seg6_f3_type;

/* Type to hold wcdma_1800_drx_mode_sel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_1800_drx_mode_sel[3];
} nvi_wcdma_1800_drx_mode_sel_type;


typedef PACKED struct PACKED_POST{ 
  /* Number of QMI port configurations */
  uint8                                            num_ports;
  
  nv_qmi_port_config_type                          port_list[NV_QMI_PORT_LIST_MAX_SIZE];
} nvi_qmi_port_list_type;

/* Type to hold bc3_vco_tune_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc3_vco_tune_2[NV_VCO_CAL_LENGTH];
} nvi_bc3_vco_tune_2_type;

/* Type to hold dcs_rx_gain_range_4_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            dcs_rx_gain_range_4_temp_comp[3];
} nvi_dcs_rx_gain_range_4_temp_comp_type;


typedef PACKED struct PACKED_POST{ 
  /* Number of digits */
  byte                                             num_digits;
  /* The digit array */
  byte                                             digits[NV_MAX_PKT_ORIG_DIGITS];
} nvi_data_pkt_orig_str_type;

/* Type to hold bcx_block_1_p1_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_1_p1_rise_fall_off[8];
} nvi_bcx_block_1_p1_rise_fall_off_type;

/* Type to hold im_smsc_address  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           im_smsc_address[IM_MAX_SMSC_ADDR_SIZ];
} nvi_im_smsc_address_type;

/* Type to hold ms_sms_signature_template_file  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ms_sms_signature_template_file[NV_SMS_SIGNATURE_TEMPLATE_FILE_SIZ];
} nvi_ms_sms_signature_template_file_type;

/* Type to hold gsm_1900_prdi_06  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_06[30];
} nvi_gsm_1900_prdi_06_type;

/* Type to hold bc1_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc1_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_bc1_tx_pdm_lin_0_type;

/* Type to hold wcdma_1800_tx_comp_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1800_tx_comp_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1800_tx_comp_vs_freq_2_type;

/* Type to hold wcdma_900_tx_slp_vs_temp_3  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_slp_vs_temp_3[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_900_tx_slp_vs_temp_3_type;


typedef PACKED struct PACKED_POST{ 
  /* Polar ramp up */
  uint16                                           ramp_up[NV_TX_BURST_RAMP_SIZ];
  /* Polar ramp down */
  uint16                                           ramp_down[NV_TX_BURST_RAMP_SIZ];
} nvi_gsm_polar_ramp_profile_type;

/* Type to hold bcx_block_1_vco_coarse_tune_table  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bcx_block_1_vco_coarse_tune_table[NV_VCO_CAL_LENGTH];
} nvi_bcx_block_1_vco_coarse_tune_table_type;

/* Type to hold c1_bc1_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bc1_tx_cal_chan[16];
} nvi_c1_bc1_tx_cal_chan_type;

/* Type to hold cdma_lna_3_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             cdma_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_cdma_lna_3_offset_vs_freq_type;

/* Type to hold gps1_xtra_tertiary_sntp_server_url  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gps1_xtra_tertiary_sntp_server_url[128];
} nvi_gps1_xtra_tertiary_sntp_server_url_type;

/* Type to hold im_cir_port  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           im_cir_port[NV_MAX_CIR_PORT_SIZ];
} nvi_im_cir_port_type;


typedef PACKED struct PACKED_POST{ 
  
  uint32                                           ruim_id;
} nvi_jcdma_ruimid;

/* Type to hold lte_b17_im_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b17_im_level[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b17_im_level_type;

/* Type to hold wcdma_1500_tx_pdm_lin_0_enh  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_pdm_lin_0_enh[NV_TX_PDM_LIN_ENH_SIZE];
} nvi_wcdma_1500_tx_pdm_lin_0_enh_type;

/* Type to hold lte_b7_antsel  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            lte_b7_antsel[4];
} nvi_lte_b7_antsel_type;

/* Type to hold wcdma_1900_pa_comp_down_r2_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_pa_comp_down_r2_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1900_pa_comp_down_r2_vs_freq_type;

/* Type to hold c1_bc14_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c1_bc14_tx_cal_chan[16];
} nvi_c1_bc14_tx_cal_chan_type;


typedef PACKED struct PACKED_POST{ 
  /* length of password */
  uint8                                            password_len;
  /* the password */
  uint8                                            password[NV_MAX_GPSONE_PASSWORD_LENGTH];
} nvi_gpsone_password_type;

/* Type to hold wcdma_900_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            wcdma_900_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_900_tx_lim_vs_temp_type;

/* Type to hold wcdma_900_tx_lin_master_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_900_tx_lin_master_0[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_900_tx_lin_master_0_type;

/* Type to hold gsm_1900_vm_tl_brui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_vm_tl_brui_13[30];
} nvi_gsm_1900_vm_tl_brui_13_type;

/* Type to hold gsm_850_ampm_master_tbl_seg6_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg6_f1[32];
} nvi_gsm_850_ampm_master_tbl_seg6_f1_type;

/* Type to hold gsm_850_ampm_master_tbl_seg7_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg7_f1[32];
} nvi_gsm_850_ampm_master_tbl_seg7_f1_type;

/* Type to hold gsm_850_ampm_master_tbl_seg8_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_850_ampm_master_tbl_seg8_f1[32];
} nvi_gsm_850_ampm_master_tbl_seg8_f1_type;

/* Type to hold wcdma_1800_utran_tx_lim_vs_temp_offset  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1800_utran_tx_lim_vs_temp_offset[8];
} nvi_wcdma_1800_utran_tx_lim_vs_temp_offset_type;

/* Type to hold wcdma_1500_tx_lin_master_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_tx_lin_master_0[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_1500_tx_lin_master_0_type;

/* Type to hold bc5_tx_pdm_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc5_tx_pdm_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc5_tx_pdm_3_type;

/* Type to hold c0_bc3_lna_2_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             c0_bc3_lna_2_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc3_lna_2_offset_vs_freq_type;

/* Type to hold wcdma_bc4_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_bc4_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_bc4_lna_offset_vs_freq_type;

/* Type to hold bc1_tx_pdm_3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc1_tx_pdm_3[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc1_tx_pdm_3_type;

/* Type to hold bc4_tx_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc4_tx_lin_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc4_tx_lin_1_type;

/* Type to hold mf_chan_support  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           mf_chan_support[32];
} nvi_mf_chan_support_type;

/* Type to hold gsm_1900_prdi_05  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_prdi_05[30];
} nvi_gsm_1900_prdi_05_type;

/* Type to hold gsm_1900_rgi_g2_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_rgi_g2_f3[GSM_RGI_NV_ITEM_SIZE];
} nvi_gsm_1900_rgi_g2_f3_type;


typedef PACKED struct PACKED_POST{ 
  /* HSUSB PHY configuration parameters */
  uint8                                            pre_emphasis_enable;
  /* Pre-emphasis value */
  uint8                                            pre_emphasis_value;
  /* Amplitude adjustment enable */
  uint8                                            amplitude_adjustment_enable;
  /* Amplitude adjustment value */
  uint8                                            amplitude_adjustment_value;
} nvi_hs_usb_phy_config_type;

/* Type to hold wcdma_1500_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1500_vga_gain_offset_vs_freq_type;

/* Type to hold lte_b40_exp_hdet_vs_agc  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b40_exp_hdet_vs_agc[LTE_HDET_VS_AGC_SIZ];
} nvi_lte_b40_exp_hdet_vs_agc_type;

/* Type to hold wcdma_bc4_tx_lin_master_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_lin_master_2[NV_WCDMA_TX_LIN_MASTER_SIZ];
} nvi_wcdma_bc4_tx_lin_master_2_type;

/* Type to hold edge_1800_rgi_g3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1800_rgi_g3_f2[32];
} nvi_edge_1800_rgi_g3_f2_type;

/* Type to hold lte_b40_c1_rx_gain_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b40_c1_rx_gain_vs_freq[LTE_USABLE_GAIN_STATES][LTE_RX_FREQ_COMP_SIZ];
} nvi_lte_b40_c1_rx_gain_vs_freq_type;


typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dedicated_voice_subs;
  
  uint8                                            dedicated_data_subs;
  
  uint8                                            active_subs;
  
  uint8                                            priority_subs;
  
  uint8                                            dual_standby_pref;
} nvi_dual_standby_cfg_type;

/* Type to hold lte_b1_tx_limit_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b1_tx_limit_vs_freq[LTE_TX_FREQ_COMP_SIZ];
} nvi_lte_b1_tx_limit_vs_freq_type;

/* Type to hold bc15_tx_pdm_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc15_tx_pdm_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc15_tx_pdm_1_type;

/* Type to hold gsm_vm_tm_prui_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_vm_tm_prui_13[30];
} nvi_gsm_vm_tm_prui_13_type;

/* Type to hold dcs_c0_tx_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             dcs_c0_tx_freq_comp[8];
} nvi_dcs_c0_tx_freq_comp_type;

/* Type to hold gsm_ampm_master_tbl_seg6_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           gsm_ampm_master_tbl_seg6_f1[32];
} nvi_gsm_ampm_master_tbl_seg6_f1_type;

/* Type to hold wcdma_bc4_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_bc4_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_bc4_tx_pdm_lin_0_type;

/* Type to hold wcdma_900_max_pwr_backoff_volt2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_max_pwr_backoff_volt2[4];
} nvi_wcdma_900_max_pwr_backoff_volt2_type;

/* Type to hold wcdma_2100_hs_switchpoints_shift  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_2100_hs_switchpoints_shift[2];
} nvi_wcdma_2100_hs_switchpoints_shift_type;

/* Type to hold wcdma_1900_max_pwr_backoff_volt3  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_max_pwr_backoff_volt3[4];
} nvi_wcdma_1900_max_pwr_backoff_volt3_type;

/* Type to hold bc1_pa_smps_pdm_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc1_pa_smps_pdm_level[4][NV_FREQ_TABLE_SIZ];
} nvi_bc1_pa_smps_pdm_level_type;

/* Type to hold wcdma_900_tx_slp_vs_temp_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_900_tx_slp_vs_temp_0[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_900_tx_slp_vs_temp_0_type;

/* Type to hold bc10_tx_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc10_tx_lin_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc10_tx_lin_2_type;

/* Type to hold wcdma_900_max_pwr_backoff_volt1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_max_pwr_backoff_volt1[4];
} nvi_wcdma_900_max_pwr_backoff_volt1_type;

/* Type to hold wcdma_tx_slp_vs_temp_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_tx_slp_vs_temp_2[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_tx_slp_vs_temp_2_type;

/* Type to hold bc5_pa_smps_pdm_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc5_pa_smps_pdm_level[4][NV_FREQ_TABLE_SIZ];
} nvi_bc5_pa_smps_pdm_level_type;

/* Type to hold bc0_hdr_p2_rise_fall_off  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            bc0_hdr_p2_rise_fall_off[16];
} nvi_bc0_hdr_p2_rise_fall_off_type;

/* Type to hold gsm_900_pmeas_g0_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_900_pmeas_g0_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_900_pmeas_g0_f1_type;

/* Type to hold lte_b17_tx_digital_gain_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b17_tx_digital_gain_comp[LTE_MPR_SIZ];
} nvi_lte_b17_tx_digital_gain_comp_type;

/* Type to hold sys_nv_ini_file_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            sys_nv_ini_file_name[NV_CUSTOMIZATION_VERSIONING_SIZ];
} nvi_sys_nv_ini_file_name_type;

/* Type to hold wcdma_1900_pa_comp_up_r3_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_1900_pa_comp_up_r3_vs_freq[NV_PA_COMPENSATE_VS_FREQ_TYPE];
} nvi_wcdma_1900_pa_comp_up_r3_vs_freq_type;

/* Type to hold lte_b1_c1_rx_gain  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_c1_rx_gain[LTE_LNA_RISE_FALL_SIZ];
} nvi_lte_b1_c1_rx_gain_type;

/* Type to hold bc5_tx_pdm_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc5_tx_pdm_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc5_tx_pdm_2_type;

/* Type to hold aagps_default_url  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             aagps_default_url[128];
} nvi_aagps_default_url_type;

/* Type to hold bc0_tx_lim_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int1                                             bc0_tx_lim_vs_freq[16];
} nvi_bc0_tx_lim_vs_freq_type;

/* Type to hold c0_bc14_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bc14_vga_gain_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bc14_vga_gain_offset_vs_freq_type;


typedef PACKED struct PACKED_POST{ 
  /* count */
  dword                                            cnt;
} nvi_call_cnt_type;

/* Type to hold gsm_1900_rx_gain_range_3_freq_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_rx_gain_range_3_freq_comp[NV_GSM_1900_CAL_ARFCN_SIZ];
} nvi_gsm_1900_rx_gain_range_3_freq_comp_type;

/* Type to hold lte_b17_tx_gain_index_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b17_tx_gain_index_0[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b17_tx_gain_index_0_type;

/* Type to hold lte_b1_mpr_based_pa_switchpoints_shift  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b1_mpr_based_pa_switchpoints_shift[LTE_MPR_SIZ];
} nvi_lte_b1_mpr_based_pa_switchpoints_shift_type;

/* Type to hold lte_b40_rx_gain_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b40_rx_gain_vs_freq[LTE_USABLE_GAIN_STATES][LTE_RX_FREQ_COMP_SIZ];
} nvi_lte_b40_rx_gain_vs_freq_type;

/* Type to hold mbp_rf_mflo_gs5_cal  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mbp_rf_mflo_gs5_cal[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_mflo_gs5_cal_type;

/* Type to hold wcdma_1900_vga_gain_offset_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1900_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
} nvi_wcdma_1900_vga_gain_offset_vs_temp_type;

/* Type to hold wcdma_1500_tx_comp_vs_freq_0  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_comp_vs_freq_0[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1500_tx_comp_vs_freq_0_type;

/* Type to hold mf_rf_path_config  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           mf_rf_path_config[16];
} nvi_mf_rf_path_config_type;

/* Type to hold bc10_tx_lin_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc10_tx_lin_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc10_tx_lin_1_type;

/* Type to hold c0_bcx_block_1_vga_gain_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             c0_bcx_block_1_vga_gain_offset_vs_freq[NV_OFFSET_CALIBRATION_LENGTH];
} nvi_c0_bcx_block_1_vga_gain_offset_vs_freq_type;

/* Type to hold wcdma_1500_rel6_tx_beta_scaling_comp  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_1500_rel6_tx_beta_scaling_comp[7];
} nvi_wcdma_1500_rel6_tx_beta_scaling_comp_type;

/* Type to hold mbp_rf_dvbh_cal_freq  */
typedef PACKED struct PACKED_POST{ 
  
  uint32                                           mbp_rf_dvbh_cal_freq[NV_MBP_RF_NUM_CAL_FREQS];
} nvi_mbp_rf_dvbh_cal_freq_type;

/* Type to hold wcdma_1500_tx_comp_vs_freq_2  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_tx_comp_vs_freq_2[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1500_tx_comp_vs_freq_2_type;

/* Type to hold browser_jump_embdlnk7_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           browser_jump_embdlnk7_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
} nvi_browser_jump_embdlnk7_name_type;

/* Type to hold c0_bcx_block_1_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           c0_bcx_block_1_tx_cal_chan[16];
} nvi_c0_bcx_block_1_tx_cal_chan_type;

/* Type to hold lte_b40_tx_digital_gain_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            lte_b40_tx_digital_gain_comp[LTE_MPR_SIZ];
} nvi_lte_b40_tx_digital_gain_comp_type;

/* Type to hold gsm_1900_rx_gain_range_5_temp_comp  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_1900_rx_gain_range_5_temp_comp[3];
} nvi_gsm_1900_rx_gain_range_5_temp_comp_type;

/* Type to hold rr_acq_db_chunk_03  */
typedef PACKED struct PACKED_POST{ 
  /* Type to hold rr_acq_db_chunk_03  */
  nv_rr_acq_db_chunk_03_type                       rr_acq_db_chunk_03[NV_RR_ACQ_DB_MAX_ENTRIES_PER_CHUNK];
} nvi_rr_acq_db_chunk_03_type;

/* Type to hold bc3_tx_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc3_tx_lin_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc3_tx_lin_2_type;

/* Type to hold bc4_tx_lim_vs_temp  */
typedef PACKED struct PACKED_POST{ 
  
  byte                                             bc4_tx_lim_vs_temp[8];
} nvi_bc4_tx_lim_vs_temp_type;

/* Type to hold gsm_850_pmeas_g0_f3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_pmeas_g0_f3[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_850_pmeas_g0_f3_type;

/* Type to hold gsm_pa_temp_comp_index_14  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            gsm_pa_temp_comp_index_14[16];
} nvi_gsm_pa_temp_comp_index_14_type;

/* Type to hold lte_b13_rx_gain_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             lte_b13_rx_gain_vs_freq[LTE_USABLE_GAIN_STATES][LTE_RX_FREQ_COMP_SIZ];
} nvi_lte_b13_rx_gain_vs_freq_type;

/* Type to hold gsm_1900_vm_tl_prui_15  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            gsm_1900_vm_tl_prui_15[30];
} nvi_gsm_1900_vm_tl_prui_15_type;


typedef PACKED struct PACKED_POST{ 
  /* table entry */
  nv_mru2_table_entry_type                         entry[NV_MRU2_TABLE_SIZE];
} nvi_mru2_table_type;

/* Type to hold bc5_tx_pdm_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc5_tx_pdm_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc5_tx_pdm_0_type;

/* Type to hold mf_rssi_cal_vs_freq_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            mf_rssi_cal_vs_freq_0[32];
} nvi_mf_rssi_cal_vs_freq_0_type;

/* Type to hold bc0_tx_lin_2  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc0_tx_lin_2[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc0_tx_lin_2_type;

/* Type to hold wcdma_900_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            wcdma_900_tx_cal_chan[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_900_tx_cal_chan_type;


typedef PACKED struct PACKED_POST{ 
  /* Enable or Disable this Monitor */
  boolean                                          enable;
  /* Set to match Read/Write/Both */
  uint8                                            read_write;
  /* Set to match Lock/Unlock/Both */
  uint8                                            lock_unlock;
  /* Set burst size to match or all sizes */
  uint8                                            burst_size;
  /* Set slave type to match or all types */
  uint8                                            slave;
  /* Set AID (master) to match */
  uint8                                            aid;
  /* Set DMOV channel ID to match */
  uint8                                            cid;
  /* Set address to match */
  uint32                                           address;
  /* Set address mask to match */
  uint32                                           address_mask;
} nvi_bus_prof_simple_settings_t;

/* Type to hold wcdma_800_tx_pdm_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           wcdma_800_tx_pdm_lin_0[NV_TX_PDM_LIN_TYPE];
} nvi_wcdma_800_tx_pdm_lin_0_type;

/* Type to hold bc11_tx_pdm_lin_3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           bc11_tx_pdm_lin_3[NV_TX_PDM_LIN_TYPE];
} nvi_bc11_tx_pdm_lin_3_type;

/* Type to hold dcs_amam_master_tbl_seg8_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           dcs_amam_master_tbl_seg8_f1[64];
} nvi_dcs_amam_master_tbl_seg8_f1_type;

/* Type to hold gsm_1900_amam_master_tbl_seg3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg3_f1[64];
} nvi_gsm_1900_amam_master_tbl_seg3_f1_type;

/* Type to hold gsm_1900_amam_master_tbl_seg7_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_1900_amam_master_tbl_seg7_f1[64];
} nvi_gsm_1900_amam_master_tbl_seg7_f1_type;

/* Type to hold gsm_850_amam_master_tbl_seg3_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg3_f1[64];
} nvi_gsm_850_amam_master_tbl_seg3_f1_type;

/* Type to hold gsm_850_amam_master_tbl_seg6_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg6_f1[64];
} nvi_gsm_850_amam_master_tbl_seg6_f1_type;

/* Type to hold gsm_amam_master_tbl_seg3_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_amam_master_tbl_seg3_f2[64];
} nvi_gsm_amam_master_tbl_seg3_f2_type;

/* Type to hold ms_sms_smsc_address3  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           ms_sms_smsc_address3[NV_SMS_SMSC_ADDRESS_SIZ];
} nvi_ms_sms_smsc_address3_type;

/* Type to hold rc_process_errors  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            rc_process_errors[16];
} nvi_rc_process_errors_type;

/* Type to hold lte_b7_tx_gain_index_2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           lte_b7_tx_gain_index_2[LTE_TX_LIN_MASTER_SIZ];
} nvi_lte_b7_tx_gain_index_2_type;

/* Type to hold dcs_vm_th_prdi_13  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vm_th_prdi_13[30];
} nvi_dcs_vm_th_prdi_13_type;

/* Type to hold c1_bc3_tx_cal_chan  */
typedef PACKED struct PACKED_POST{ 
  
  word                                             c1_bc3_tx_cal_chan[16];
} nvi_c1_bc3_tx_cal_chan_type;

/* Type to hold edge_1900_rgi_g1_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            edge_1900_rgi_g1_f1[32];
} nvi_edge_1900_rgi_g1_f1_type;

/* Type to hold gsm_850_amam_master_tbl_seg6_f2  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_amam_master_tbl_seg6_f2[64];
} nvi_gsm_850_amam_master_tbl_seg6_f2_type;

/* Type to hold gsm_850_pmeas_g2_f1  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           gsm_850_pmeas_g2_f1[GSM_PMEAS_NV_ITEM_SIZE];
} nvi_gsm_850_pmeas_g2_f1_type;


typedef PACKED struct PACKED_POST{ 
  /* WLAN Technology Preference */
  uint32                                           tech_pref;
} nvi_wlan_tech_pref_type;

/* Type to hold wcdma_1500_lna_offset_vs_freq  */
typedef PACKED struct PACKED_POST{ 
  
  int8                                             wcdma_1500_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
} nvi_wcdma_1500_lna_offset_vs_freq_type;

/* Type to hold bc10_tx_lin_0  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc10_tx_lin_0[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc10_tx_lin_0_type;

/* Type to hold bc10_pa_smps_pdm_level  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc10_pa_smps_pdm_level[4][NV_FREQ_TABLE_SIZ];
} nvi_bc10_pa_smps_pdm_level_type;

/* Type to hold dcs_vl_tm_prui_14  */
typedef PACKED struct PACKED_POST{ 
  
  uint8                                            dcs_vl_tm_prui_14[30];
} nvi_dcs_vl_tm_prui_14_type;

/* Type to hold browser_jump_embdlnk2_name  */
typedef PACKED struct PACKED_POST{ 
  
  uint16                                           browser_jump_embdlnk2_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
} nvi_browser_jump_embdlnk2_name_type;

/* Type to hold bc0_tx_pdm_1  */
typedef PACKED struct PACKED_POST{ 
  
  int16                                            bc0_tx_pdm_1[NV_CDMA_TX_PDM_LIN_TYPE];
} nvi_bc0_tx_pdm_1_type;



/*=========================================================================*/
/* Enumerators of items to access.                                         */
/*=========================================================================*/

/* Additional NV items added by customers should start with ID:50000 onwards*/
/* to avoid duplicate identification numbers.                               */

typedef PACKED enum {

  NVI_NV_VERNO_EXT_I                             =          0,
  NVI_DIAL_I                                     =          1,
  NVI_STACK_I                                    =          2,
  NVI_ESN_I                                      =          3,
  NVI_ESN_VALID_I                                =          4,
  NVI_ESN_CHKSUM_I                               =          5,
  NVI_VERNO_MAJ_I                                =          6,
  NVI_VERNO_MIN_I                                =          7,
  NVI_ROAMING_LIST_I                             =          8,
  NVI_UP_CACHE_I                                 =          9,
  NVI_PN_ID_I                                    =         10,
  NVI_SMS_I                                      =         11,
  NVI_NAM_CHKSUM_I                               =         12,
  NVI_NAME_NAM_I                                 =         13,
  NVI_FM_AGC_SET_VS_PWR_I                        =         14,
  NVI_FM_AGC_SET_VS_FREQ_I                       =         15,
  NVI_FM_AGC_SET_VS_TEMP_I                       =         16,
  NVI_FM_EXP_HDET_VS_PWR_I                       =         17,
  NVI_FM_ERR_SLP_VS_PWR_I                        =         18,
  NVI_CDMA_RX_COMP_VS_FREQ_I                     =         19,
  NVI_CDMA_TX_COMP_VS_FREQ_I                     =         20,
  NVI_CDMA_TX_LIN_VS_TEMP_I                      =         21,
  NVI_CDMA_TX_LIN_VS_VOLT_I                      =         22,
  NVI_CDMA_TX_LIM_VS_TEMP_I                      =         23,
  NVI_CDMA_TX_LIM_VS_VOLT_I                      =         24,
  NVI_CDMA_TX_LIM_VS_FREQ_I                      =         25,
  NVI_CDMA_RX_LIN_VS_TEMP_I                      =         26,
  NVI_CDMA_RX_SLP_VS_TEMP_I                      =         27,
  NVI_CDMA_TX_SLP_VS_TEMP_I                      =         28,
  NVI_PA_RANGE_VS_TEMP_I                         =         29,
  NVI_FM_EXP_HDET_VS_TEMP_I                      =         30,
  NVI_PDM2_VS_TEMP_I                             =         31,
  NVI_BANNER_I                                   =         32,
  NVI_SI_TEST_DATA_1_I                           =         33,
  NVI_SI_TEST_DATA_2_I                           =         34,
  NVI_RENTAL_CNT_I                               =         35,
  NVI_CDMA_TX_LIN_MASTER_I                       =         36,
  NVI_A_KEY_I                                    =         37,
  NVI_A_KEY_CHKSUM_I                             =         38,
  NVI_SSD_A_I                                    =         39,
  NVI_SSD_B_I                                    =         40,
  NVI_PAP_USER_ID_I                              =         41,
  NVI_PAP_PASSWORD_I                             =         42,
  NVI_PPP_PASSWORD_I                             =         43,
  NVI_PPP_USER_ID_I                              =         44,
  NVI_SEC_DEVICE_KEY_I                           =         45,
  NVI_SCM_I                                      =         46,
  NVI_MOB_CAI_REV_I                              =         47,
  NVI_MOB_FIRM_REV_I                             =         48,
  NVI_MOB_MODEL_I                                =         49,
  NVI_CONFIG_CHKSUM_I                            =         50,
  NVI_RUN_TIMER_I                                =         51,
  NVI_MAINTRSN_I                                 =         52,
  NVI_LCKRSN_P_I                                 =         53,
  NVI_SEC_CODE_I                                 =         54,
  NVI_ERR_LOG_I                                  =         55,
  NVI_SPARE_1_I                                  =         56,
  NVI_SPARE_2_I                                  =         57,
  NVI_FACT_INFO_I                                =         58,
  NVI_FSC_I                                      =         59,
  NVI_LIFE_TIMER_G_I                             =         60,
  NVI_CALL_TIMER_G_I                             =         61,
  NVI_FSC2_I                                     =         62,
  NVI_FSC2_CHKSUM_I                              =         63,
  NVI_WDC_I                                      =         64,
  NVI_HW_CONFIG_I                                =         65,
  NVI_OTKSL_I                                    =         66,
  NVI_UP_KEY_I                                   =         67,
  NVI_GPS1_GPS_RF_LOSS_I                         =         68,
  NVI_GPS1_LOCK_I                                =         69,
  NVI_SUBPCG_PA_WARMUP_DELAY_I                   =         70,
  NVI_DATA_TRTL_ENABLED_I                        =         71,
  NVI_AMPS_BACKSTOP_ENABLED_I                    =         72,
  NVI_FTM_MODE_I                                 =         73,
  NVI_DS_DEFAULT_BAUDRATE_I                      =         74,
  NVI_DIAG_DEFAULT_BAUDRATE_I                    =         75,
  NVI_LO_BIAS_UPDATE_CNT_I                       =         76,
  NVI_USB_PRODUCT_ID_OFFSET_I                    =         77,
  NVI_AVCD_CALL_DURATION_I                       =         78,
  NVI_AVCD_TIME_BETWEEN_CALLS_I                  =         79,
  NVI_AVCD_NUMBER_OF_CALLS_I                     =         80,
  NVI_AVCD_SO_I                                  =         81,
  NVI_GMM_PTMSI_SIG_TOBE_DELETED_I               =         82,
  NVI_DIAG_DEBUG_CONTROL_I                       =         83,
  NVI_DIAG_DEBUG_DETAIL_I                        =         84,
  NVI_QVP_APP_DEFAULT_CAPABILITY_TYPE_I          =         85,
  NVI_VRHFK_ENABLED_I                            =         86,
  NVI_VRHFK_VOICE_ANSWER_I                       =         87,
  NVI_ANALOG_PREF_SERV_I                         =         88,
  NVI_ANALOG_SID_LOCK_I                          =         89,
  NVI_ANALOG_SID_ACQ_I                           =         90,
  NVI_ANALOG_FIRSTCHP_I                          =         91,
  NVI_ANALOG_HOME_SID_I                          =         92,
  NVI_ANALOG_REG_I                               =         93,
  NVI_NXTREG_I                                   =         94,
  NVI_LSTSID_I                                   =         95,
  NVI_LOCAID_I                                   =         96,
  NVI_PUREG_I                                    =         97,
  NVI_CDMA_PREF_SERV_I                           =         98,
  NVI_CDMA_SID_LOCK_I                            =         99,
  NVI_CDMA_SID_ACQ_I                             =        100,
  NVI_PCDMACH_I                                  =        101,
  NVI_SCDMACH_I                                  =        102,
  NVI_MOB_TERM_HOME_I                            =        103,
  NVI_MOB_TERM_FOR_SID_I                         =        104,
  NVI_MOB_TERM_FOR_NID_I                         =        105,
  NVI_ACCOLC_I                                   =        106,
  NVI_ZONE_LIST_I                                =        107,
  NVI_SID_NID_LIST_I                             =        108,
  NVI_DIST_REG_I                                 =        109,
  NVI_LAST_CDMACH_I                              =        110,
  NVI_CALL_TIMER_I                               =        111,
  NVI_AIR_TIMER_I                                =        112,
  NVI_ROAM_TIMER_I                               =        113,
  NVI_LIFE_TIMER_I                               =        114,
  NVI_CDMA_PN_MASK_I                             =        115,
  NVI_IMSI_MCC_I                                 =        116,
  NVI_IMSI_11_12_I                               =        117,
  NVI_DIR_NUMBER_I                               =        118,
  NVI_IMSI_ADDR_NUM_I                            =        119,
  NVI_ASSIGNING_TMSI_ZONE_LENGTH_I               =        120,
  NVI_ASSIGNING_TMSI_ZONE_I                      =        121,
  NVI_TMSI_CODE_I                                =        122,
  NVI_TMSI_EXP_TIMER_I                           =        123,
  NVI_MOB_DIR_NUMBER_I                           =        124,
  NVI_SID_NID_LOCK_I                             =        125,
  NVI_HOME_SID_NID_I                             =        126,
  NVI_OTAPA_ENABLED_I                            =        127,
  NVI_NAM_LOCK_I                                 =        128,
  NVI_IMSI_T_S1_I                                =        129,
  NVI_IMSI_T_S2_I                                =        130,
  NVI_IMSI_T_MCC_I                               =        131,
  NVI_IMSI_T_11_12_I                             =        132,
  NVI_IMSI_T_ADDR_NUM_I                          =        133,
  NVI_PREF_VOICE_SO_I                            =        134,
  NVI_SPC_CHANGE_ENABLED_I                       =        135,
  NVI_USER_ZONE_ENABLED_I                        =        136,
  NVI_USER_ZONE_I                                =        137,
  NVI_PUZL_ENABLED_I                             =        138,
  NVI_CDMA_POWERUP_REG_PERFORMED_I               =        139,
  NVI_JCDMA_M511_MODE_I                          =        140,
  NVI_JCDMA_M512_MODE_I                          =        141,
  NVI_JCDMA_M513_MODE_I                          =        142,
  NVI_JTACS_PCDMACH_I                            =        143,
  NVI_JTACS_SCDMACH_I                            =        144,
  NVI_MRU3_TABLE_I                               =        145,
  NVI_MRU2_TABLE_I                               =        146,
  NVI_PRL_ENABLED_I                              =        147,
  NVI_ROAMING_LIST_683_I                         =        148,
  NVI_BAND_PREF_I                                =        149,
  NVI_ROAM_PREF_I                                =        150,
  NVI_BAND_PREF_16_31_I                          =        151,
  NVI_SLOT_CYCLE_INDEX_I                         =        152,
  NVI_PREF_MODE_I                                =        153,
  NVI_COUNT_I                                    =        154,
  NVI_MIN1_I                                     =        155,
  NVI_MIN2_I                                     =        156,
  NVI_SID_NID_I                                  =        157,
  NVI_MIN_CHKSUM_I                               =        158,
  NVI_CURR_NAM_I                                 =        159,
  NVI_AUTO_NAM_I                                 =        160,
  NVI_SEND_TIMEOUT_I                             =        161,
  NVI_SYSTEM_PREF_I                              =        162,
  NVI_NEG_SLOT_CYCLE_INDEX_I                     =        163,
  NVI_SSPR_P_REV_I                               =        164,
  NVI_PS_DATA_ORIG_PREF_I                        =        165,
  NVI_BROWSER_TYPE_I                             =        166,
  NVI_UBROWSER_I                                 =        167,
  NVI_UP_BROWSER_WARN_I                          =        168,
  NVI_DM_IO_MODE_I                               =        169,
  NVI_DM_ADDR_I                                  =        170,
  NVI_SIO_PWRDWN_I                               =        171,
  NVI_DS_DEFAULT_BAUD_I                          =        172,
  NVI_DIAG_DEFAULT_BAUD_I                        =        173,
  NVI_SIO_DEV_MAP_MENU_ITEM_I                    =        174,
  NVI_DIAG_PORT_SELECT_I                         =        175,
  NVI_DIAG_RESTART_CONFIG_I                      =        176,
  NVI_UP_LINK_INFO_I                             =        177,
  NVI_UP_PARMS_I                                 =        178,
  NVI_UP_ALERT_RECORD_I                          =        179,
  NVI_UP_IDLE_TIMER_I                            =        180,
  NVI_DATA_SRVC_ENABLED_I                        =        181,
  NVI_DATA_IO_MODE_I                             =        182,
  NVI_IDLE_DATA_TIMEOUT_I                        =        183,
  NVI_DATA_QNC_ENABLED_I                         =        184,
  NVI_DATA_SO_SET_I                              =        185,
  NVI_DATA_MDR_MODE_I                            =        186,
  NVI_DATA_PKT_ORIG_STR_I                        =        187,
  NVI_DATA_AUTO_PACKET_DETECTION_I               =        188,
  NVI_DATA_DEFAULT_PROFILE_I                     =        189,
  NVI_PRIMARY_DNS_I                              =        190,
  NVI_SECONDARY_DNS_I                            =        191,
  NVI_DATA_SCRM_ENABLED_I                        =        192,
  NVI_DS_QCMIP_I                                 =        193,
  NVI_DS_MIP_RETRIES_I                           =        194,
  NVI_DS_MIP_RETRY_INT_I                         =        195,
  NVI_DS_MIP_PRE_RE_RRQ_TIME_I                   =        196,
  NVI_DS_MIP_NUM_PROF_I                          =        197,
  NVI_DS_MIP_ACTIVE_PROF_I                       =        198,
  NVI_DS_MIP_GEN_USER_PROF_I                     =        199,
  NVI_DS_MIP_SS_USER_PROF_I                      =        200,
  NVI_DS_MIP_MN_HA_TIME_DELTA_I                  =        201,
  NVI_DS_MIP_QC_DRS_OPT_I                        =        202,
  NVI_DS_MIP_2002BIS_MN_HA_AUTH_I                =        203,
  NVI_DOMAIN_NAME_I                              =        204,
  NVI_DS_MIP_RRQ_IF_TFRK_I                       =        205,
  NVI_DS_MIP_ENABLE_PROF_I                       =        206,
  NVI_PPP_AUTHENTICATION_I                       =        207,
  NVI_APN_NAME_I                                 =        208,
  NVI_DS_MIP_DMU_PKOID_I                         =        209,
  NVI_LAST_TX_DATA_COUNT_I                       =        210,
  NVI_LAST_RX_DATA_COUNT_I                       =        211,
  NVI_TOTAL_TX_DATA_COUNT_I                      =        212,
  NVI_TOTAL_RX_DATA_COUNT_I                      =        213,
  NVI_DS_MIP_DMU_MN_AUTH_I                       =        214,
  NVI_WCDMACS_SYNC_TEST_APP_ENABLED_I            =        215,
  NVI_RTSP_PROXY_SERVER_ADDR_I                   =        216,
  NVI_HYSTERISIS_ACTIVATION_TIMER_I              =        217,
  NVI_HYSTERISIS_TIMER_I                         =        218,
  NVI_PKT_DIAL_STRINGS_I                         =        219,
  NVI_DATA_INCOMING_CSD_CALL_IS_INTERNAL_I       =        220,
  NVI_BTFD_OLPC_FLOOR_DB_I                       =        221,
  NVI_NON_BTFD_OLPC_FLOOR_DB_I                   =        222,
  NVI_RTSP_PROXY_SERVER_ADDR_ALTERNATE_I         =        223,
  NVI_LONG_PDPACT_TOLERANCE_FOR_TE_I             =        224,
  NVI_DS_MIP_QC_HANDDOWN_TO_1X_OPT_I             =        225,
  NVI_PPP_CONFIG_DATA_I                          =        226,
  NVI_SELECT_TECH_FOR_CARD_I                     =        227,
  NVI_PPP_NCP_REMOTE_INITIATE_I                  =        228,
  NVI_DS_UCSD_RLP_VERSION_GSM_I                  =        229,
  NVI_DS_UCSD_RLP_VERSION_WCDMA_I                =        230,
  NVI_DS_ATCOP_RLP_VERSION_DEFAULT_I             =        231,
  NVI_DS_UCSD_RECOVERY_MODE_SREJ_I               =        232,
  NVI_TCP_KEEPALIVE_IDLE_TIME_I                  =        233,
  NVI_DATA_FORCE_CDMA_PKT_STR_I                  =        234,
  NVI_PS_IPV6_IID_I                              =        235,
  NVI_IPV6_ENABLED_I                             =        236,
  NVI_IPV6_SM_CONFIG_I                           =        237,
  NVI_IPV6_PRIMARY_DNS_I                         =        238,
  NVI_IPV6_SECONDARY_DNS_I                       =        239,
  NVI_AUTH_REQUIRE_PASSWORD_ENCRYPTION_I         =        240,
  NVI_PDSN_AS_PROXY_IPV6_DNS_SERVER_I            =        241,
  NVI_HDR_CON_SUSPEND_I                          =        242,
  NVI_HDR_PRE_CC_CYC_ENABLED_I                   =        243,
  NVI_HDR_PRE_CC_CYC_I                           =        244,
  NVI_HDR_SRCH_PARAMS_I                          =        245,
  NVI_HDRSMP_KEEP_ALIVE_START_I                  =        246,
  NVI_HDRSMP_KEEP_ALIVE_SENT_I                   =        247,
  NVI_HDRSMP_KEEP_ALIVE_REQ_INT_I                =        248,
  NVI_HDRAMP_ADDRESS_DATA_I                      =        249,
  NVI_HDRSCP_SESSION_STATUS_I                    =        250,
  NVI_HDRSCP_TOKEN_I                             =        251,
  NVI_HDRSCP_PROTOCOL_SUBTYPE_I                  =        252,
  NVI_HDRAMP_DUAL_EXPIRE_TIME_I                  =        253,
  NVI_HDRSTREAM_CURR_STREAM_CFG_I                =        254,
  NVI_HDR_SET_MNGMT_SAME_CHAN_I                  =        255,
  NVI_HDR_SET_MNGMT_DIFF_CHAN_I                  =        256,
  NVI_HDRLUP_UNSOLICITED_ENABLED_I               =        257,
  NVI_HDRAMAC_INITIAL_CONFIG_I                   =        258,
  NVI_HDRAMAC_POWER_PARAMS_I                     =        259,
  NVI_HDRFMAC_DRC_GATING_I                       =        260,
  NVI_HDRFMAC_HANDOFF_DELAYS_I                   =        261,
  NVI_HDRRMAC_POWER_PARAMS_I                     =        262,
  NVI_HDRRMAC_RATE_PARAMS_I                      =        263,
  NVI_HDRSLP_RESET_SEQNO_I                       =        264,
  NVI_HDRFMAC_DRC_LOCK_I                         =        265,
  NVI_HYBRID_PREF_I                              =        266,
  NVI_HDR_AN_AUTH_NAI_I                          =        267,
  NVI_HDR_AN_AUTH_PASSWORD_I                     =        268,
  NVI_HDRKEP_CONFIG_I                            =        269,
  NVI_HDRAUTH_CONFIG_I                           =        270,
  NVI_COLLOC_DISALLOWED_TIME_I                   =        271,
  NVI_HOLD_HDR_TIME_I                            =        272,
  NVI_HDRSCP_AN_AUTH_STATUS_I                    =        273,
  NVI_HDRSMPKA_START_TIME_I                      =        274,
  NVI_HDRSMPKA_SENT_TIME_I                       =        275,
  NVI_HDR_RX_DIVERSITY_CTRL_I                    =        276,
  NVI_HDRRUP_SRCH_PARAMS_I                       =        277,
  NVI_HDR_DO_NOT_DISTURB_I                       =        278,
  NVI_HDRRUP_OVERRIDE_ALLOWED_I                  =        279,
  NVI_HDR_AN_PPP_USER_ID_I                       =        280,
  NVI_HDR_AN_PPP_PASSWORD_I                      =        281,
  NVI_HDR_AN_AUTH_PASSWD_LONG_I                  =        282,
  NVI_HDR_AN_AUTH_USER_ID_LONG_I                 =        283,
  NVI_HDRAMP_HARDWARE_ID_I                       =        284,
  NVI_SN_PPP_STATUS_I                            =        285,
  NVI_VBATT_I                                    =        286,
  NVI_VBATT_PA_I                                 =        287,
  NVI_VBATT_AUX_I                                =        288,
  NVI_LCD_I                                      =        289,
  NVI_FM_TX_PWR_I                                =        290,
  NVI_FR_TEMP_OFFSET_I                           =        291,
  NVI_FM_RSSI_I                                  =        292,
  NVI_MAX_TX_ADJ_I                               =        293,
  NVI_FM_FREQ_SENSE_GAIN_I                       =        294,
  NVI_CDMA_RX_LIN_OFF_0_I                        =        295,
  NVI_CDMA_RX_LIN_SLP_I                          =        296,
  NVI_CDMA_TX_LIN_MASTER_OFF_0_I                 =        297,
  NVI_CDMA_TX_LIN_MASTER_SLP_I                   =        298,
  NVI_CDMA_EXP_HDET_VS_AGC_I                     =        299,
  NVI_CDMA_ERR_SLP_VS_HDET_I                     =        300,
  NVI_THERM_I                                    =        301,
  NVI_HDET_OFF_I                                 =        302,
  NVI_HDET_SPN_I                                 =        303,
  NVI_FM_AGC_ADJ_VS_FREQ_I                       =        304,
  NVI_RF_CONFIG_I                                =        305,
  NVI_R1_RISE_I                                  =        306,
  NVI_R1_FALL_I                                  =        307,
  NVI_R2_RISE_I                                  =        308,
  NVI_R2_FALL_I                                  =        309,
  NVI_R3_RISE_I                                  =        310,
  NVI_R3_FALL_I                                  =        311,
  NVI_PA_RANGE_STEP_CAL_I                        =        312,
  NVI_LNA_RANGE_POL_I                            =        313,
  NVI_LNA_RANGE_RISE_I                           =        314,
  NVI_LNA_RANGE_FALL_I                           =        315,
  NVI_LNA_RANGE_OFFSET_I                         =        316,
  NVI_FM_LNA_CTL_I                               =        317,
  NVI_FM_AGC_I                                   =        318,
  NVI_CDMA_ADJ_FACTOR_I                          =        319,
  NVI_N1M_I                                      =        320,
  NVI_PDM2_I                                     =        321,
  NVI_RX_AGC_MINMAX_I                            =        322,
  NVI_PDM1_I                                     =        323,
  NVI_POL_REV_TIMEOUT_I                          =        324,
  NVI_FM_HDET_ADC_RANGE_I                        =        325,
  NVI_CDMA_HDET_ADC_RANGE_I                      =        326,
  NVI_STA_TBYE_I                                 =        327,
  NVI_STA_MIN_THR_I                              =        328,
  NVI_STA_MIN_RX_I                               =        329,
  NVI_STA_MIN_ECIO_I                             =        330,
  NVI_STA_PRI_I                                  =        331,
  NVI_PCS_RX_LIN_OFF_0_I                         =        332,
  NVI_PCS_RX_LIN_SLP_I                           =        333,
  NVI_PCS_RX_COMP_VS_FREQ_I                      =        334,
  NVI_PCS_TX_COMP_VS_FREQ_I                      =        335,
  NVI_PCS_TX_LIN_MASTER_OFF_0_I                  =        336,
  NVI_PCS_TX_LIN_MASTER_SLP_I                    =        337,
  NVI_PCS_TX_LIN_VS_TEMP_I                       =        338,
  NVI_PCS_TX_LIM_VS_TEMP_I                       =        339,
  NVI_PCS_TX_LIM_VS_FREQ_I                       =        340,
  NVI_PCS_EXP_HDET_VS_AGC_I                      =        341,
  NVI_PCS_HDET_OFF_I                             =        342,
  NVI_PCS_HDET_SPN_I                             =        343,
  NVI_PCS_R1_RISE_I                              =        344,
  NVI_PCS_R1_FALL_I                              =        345,
  NVI_PCS_R2_RISE_I                              =        346,
  NVI_PCS_R2_FALL_I                              =        347,
  NVI_PCS_R3_RISE_I                              =        348,
  NVI_PCS_R3_FALL_I                              =        349,
  NVI_PCS_PA_RANGE_STEP_CAL_I                    =        350,
  NVI_PCS_PDM1_VS_FREQ_I                         =        351,
  NVI_PCS_PDM2_VS_FREQ_I                         =        352,
  NVI_PCS_LNA_RANGE_POL_I                        =        353,
  NVI_PCS_LNA_RANGE_RISE_I                       =        354,
  NVI_PCS_LNA_RANGE_FALL_I                       =        355,
  NVI_PCS_LNA_RANGE_OFFSET_I                     =        356,
  NVI_PCS_RX_LIN_VS_TEMP_I                       =        357,
  NVI_PCS_ADJ_FACTOR_I                           =        358,
  NVI_PCS_PA_RANGE_VS_TEMP_I                     =        359,
  NVI_PCS_PDM1_VS_TEMP_I                         =        360,
  NVI_PCS_PDM2_VS_TEMP_I                         =        361,
  NVI_PCS_RX_SLP_VS_TEMP_I                       =        362,
  NVI_PCS_TX_SLP_VS_TEMP_I                       =        363,
  NVI_PCS_RX_AGC_MINMAX_I                        =        364,
  NVI_PA_OFFSETS_I                               =        365,
  NVI_CDMA_TX_LIN_MASTER0_I                      =        366,
  NVI_CDMA_TX_LIN_MASTER1_I                      =        367,
  NVI_CDMA_TX_LIN_MASTER2_I                      =        368,
  NVI_CDMA_TX_LIN_MASTER3_I                      =        369,
  NVI_LNA_RANGE_2_RISE_I                         =        370,
  NVI_LNA_RANGE_2_FALL_I                         =        371,
  NVI_LNA_RANGE_12_OFFSET_I                      =        372,
  NVI_NONBYPASS_TIMER_I                          =        373,
  NVI_BYPASS_TIMER_I                             =        374,
  NVI_IM_LEVEL1_I                                =        375,
  NVI_IM_LEVEL2_I                                =        376,
  NVI_CDMA_LNA_OFFSET_VS_FREQ_I                  =        377,
  NVI_CDMA_LNA_12_OFFSET_VS_FREQ_I               =        378,
  NVI_AGC_PHASE_OFFSET_I                         =        379,
  NVI_RX_AGC_MIN_11_I                            =        380,
  NVI_PCS_LNA_RANGE_2_RISE_I                     =        381,
  NVI_PCS_LNA_RANGE_2_FALL_I                     =        382,
  NVI_PCS_LNA_RANGE_12_OFFSET_I                  =        383,
  NVI_PCS_NONBYPASS_TIMER_I                      =        384,
  NVI_PCS_BYPASS_TIMER_I                         =        385,
  NVI_PCS_IM_LEVEL1_I                            =        386,
  NVI_PCS_IM_LEVEL2_I                            =        387,
  NVI_PCS_CDMA_LNA_OFFSET_VS_FREQ_I              =        388,
  NVI_PCS_CDMA_LNA_12_OFFSET_VS_FREQ_I           =        389,
  NVI_PCS_AGC_PHASE_OFFSET_I                     =        390,
  NVI_PCS_RX_AGC_MIN_11_I                        =        391,
  NVI_PREF_FOR_RC_I                              =        392,
  NVI_PA_RANGE_OFFSETS_I                         =        393,
  NVI_TX_COMP0_I                                 =        394,
  NVI_TX_COMP1_I                                 =        395,
  NVI_TX_COMP2_I                                 =        396,
  NVI_TX_COMP3_I                                 =        397,
  NVI_PCS_TX_LIN_MASTER0_I                       =        398,
  NVI_PCS_TX_LIN_MASTER1_I                       =        399,
  NVI_PCS_TX_LIN_MASTER2_I                       =        400,
  NVI_PCS_TX_LIN_MASTER3_I                       =        401,
  NVI_PCS_PA_RANGE_OFFSETS_I                     =        402,
  NVI_PCS_TX_COMP0_I                             =        403,
  NVI_PCS_TX_COMP1_I                             =        404,
  NVI_PCS_TX_COMP2_I                             =        405,
  NVI_PCS_TX_COMP3_I                             =        406,
  NVI_PWR_BACKOFF_VS_VOLT_MED_I                  =        407,
  NVI_PWR_BACKOFF_VS_VOLT_LOW_I                  =        408,
  NVI_PA_BACKOFF_VOLTS_I                         =        409,
  NVI_VBATT_MIN_MAX_I                            =        410,
  NVI_ANT2_CDMA_RX_LIN_OFF_0_I                   =        411,
  NVI_ANT2_CDMA_RX_LIN_SLP_I                     =        412,
  NVI_ANT2_CDMA_RX_COMP_VS_FREQ_I                =        413,
  NVI_ANT2_CDMA_RX_LIN_VS_TEMP_I                 =        414,
  NVI_ANT2_CDMA_RX_SLP_VS_TEMP_I                 =        415,
  NVI_ANT2_LNA_RANGE_OFFSET_I                    =        416,
  NVI_ANT2_LNA_RANGE_12_OFFSET_I                 =        417,
  NVI_ANT2_CDMA_LNA_OFFSET_VS_FREQ_I             =        418,
  NVI_ANT2_CDMA_LNA_12_OFFSET_VS_FREQ_I          =        419,
  NVI_ANT2_PCS_RX_LIN_OFF_0_I                    =        420,
  NVI_ANT2_PCS_RX_LIN_SLP_I                      =        421,
  NVI_ANT2_PCS_RX_COMP_VS_FREQ_I                 =        422,
  NVI_ANT2_PCS_RX_LIN_VS_TEMP_I                  =        423,
  NVI_ANT2_PCS_RX_SLP_VS_TEMP_I                  =        424,
  NVI_ANT2_PCS_LNA_RANGE_OFFSET_I                =        425,
  NVI_ANT2_PCS_LNA_RANGE_12_OFFSET_I             =        426,
  NVI_ANT2_PCS_CDMA_LNA_OFFSET_VS_FREQ_I         =        427,
  NVI_ANT2_PCS_CDMA_LNA_12_OFFSET_VS_FREQ_I      =        428,
  NVI_TEST_CODE_VER_I                            =        429,
  NVI_SYS_SW_VER_I                               =        430,
  NVI_RF_CAL_VER_I                               =        431,
  NVI_RF_CONFIG_VER_I                            =        432,
  NVI_RF_CAL_DATE_I                              =        433,
  NVI_RF_NV_LOADED_DATE_I                        =        434,
  NVI_RF_CAL_DAT_FILE_I                          =        435,
  NVI_VCO_COARSE_TUNE_TABLE_I                    =        436,
  NVI_RF_TEST_ITEM_1_I                           =        437,
  NVI_RF_TEST_ITEM_2_I                           =        438,
  NVI_CDMA_TX_CAL_CHAN_I                         =        439,
  NVI_CDMA_RX_CAL_CHAN_I                         =        440,
  NVI_PCS_RX_CAL_CHAN_I                          =        441,
  NVI_PCS_TX_CAL_CHAN_I                          =        442,
  NVI_TCP_GRACEFUL_DORMANT_CLOSE_I               =        443,
  NVI_INTERFREQ_ENABLED_I                        =        444,
  NVI_EPLMN_ENABLED_I                            =        445,
  NVI_DTMF_I                                     =        446,
  NVI_ELAPSED_TIME_I                             =        447,
  NVI_SMS_UTC_I                                  =        448,
  NVI_SMS_AUTO_DELETE_I                          =        449,
  NVI_SMS_REMINDER_TONE_I                        =        450,
  NVI_SMS_BC_SERVICE_TABLE_SIZE_I                =        451,
  NVI_SMS_BC_SERVICE_TABLE_I                     =        452,
  NVI_SMS_BC_CONFIG_I                            =        453,
  NVI_SMS_BC_USER_PREF_I                         =        454,
  NVI_SMS_VM_NUMBER_I                            =        455,
  NVI_SMS_GW_PARMS_I                             =        456,
  NVI_SMS_GW_I                                   =        457,
  NVI_SMS_CFG_ROUTING_I                          =        458,
  NVI_SMS_CD_PARMS_I                             =        459,
  NVI_SMS_BC_SERVICE_TABLE_OPTIONS_I             =        460,
  NVI_SMS_GW_BEARER_PREF_I                       =        461,
  NVI_SMS_GW_DEFAULT_TEMPLATE_I                  =        462,
  NVI_SMS_CD_DEFAULT_TEMPLATE_I                  =        463,
  NVI_SMS_GW_CB_SERVICE_TABLE_I                  =        464,
  NVI_SMS_GW_CB_SERVICE_TABLE_SIZE_I             =        465,
  NVI_SMS_GW_CB_CONFIG_I                         =        466,
  NVI_SMS_GW_CB_USER_PREF_I                      =        467,
  NVI_STACK_IDX_I                                =        468,
  NVI_EAR_LEVEL_I                                =        469,
  NVI_SPEAKER_LEVEL_I                            =        470,
  NVI_RINGER_LEVEL_I                             =        471,
  NVI_BEEP_LEVEL_I                               =        472,
  NVI_CALL_BEEP_I                                =        473,
  NVI_CONT_KEY_DTMF_I                            =        474,
  NVI_CONT_STR_DTMF_I                            =        475,
  NVI_SVC_AREA_ALERT_I                           =        476,
  NVI_CALL_FADE_ALERT_I                          =        477,
  NVI_AUTO_POWER_I                               =        478,
  NVI_AUTO_ANSWER_I                              =        479,
  NVI_AUTO_REDIAL_I                              =        480,
  NVI_AUTO_HYPHEN_I                              =        481,
  NVI_BACK_LIGHT_I                               =        482,
  NVI_AUTO_MUTE_I                                =        483,
  NVI_LOCK_I                                     =        484,
  NVI_LOCK_CODE_I                                =        485,
  NVI_AUTO_LOCK_I                                =        486,
  NVI_CALL_RSTRC_I                               =        487,
  NVI_HORN_ALERT_I                               =        488,
  NVI_INIT_MUTE_I                                =        489,
  NVI_ONETOUCH_DIAL_I                            =        490,
  NVI_ALERTS_LVL_I                               =        491,
  NVI_ALERTS_LVL_SHADOW_I                        =        492,
  NVI_RINGER_LVL_SHADOW_I                        =        493,
  NVI_BEEP_LVL_SHADOW_I                          =        494,
  NVI_EAR_LVL_SHADOW_I                           =        495,
  NVI_TIME_SHOW_I                                =        496,
  NVI_AIR_CNT_I                                  =        497,
  NVI_ROAM_CNT_I                                 =        498,
  NVI_LIFE_CNT_I                                 =        499,
  NVI_SEND_PIN_I                                 =        500,
  NVI_VOICE_PRIV_I                               =        501,
  NVI_PWR_DWN_CNT_I                              =        502,
  NVI_REDIAL_I                                   =        503,
  NVI_TIMED_PREF_MODE_I                          =        504,
  NVI_RINGER_TYPE_I                              =        505,
  NVI_ANY_KEY_ANSWER_I                           =        506,
  NVI_BACK_LIGHT_HFK_I                           =        507,
  NVI_KEY_SOUND_I                                =        508,
  NVI_SORTING_METHOD_I                           =        509,
  NVI_LANGUAGE_SELECTION_I                       =        510,
  NVI_MENU_FORMAT_I                              =        511,
  NVI_RINGER_SPKR_LVL_I                          =        512,
  NVI_BEEP_SPKR_LVL_I                            =        513,
  NVI_VIBRATOR_I                                 =        514,
  NVI_FLIP_ANSWERS_I                             =        515,
  NVI_VOICE_PRIV_ALERT_I                         =        516,
  NVI_DTACO_CONTROL_I                            =        517,
  NVI_DTACO_INTERDIGIT_TIMEOUT_I                 =        518,
  NVI_FULL_SYSTEM_PREF_I                         =        519,
  NVI_ROAM_RINGER_I                              =        520,
  NVI_SRDA_ENABLED_I                             =        521,
  NVI_OUTPUT_UI_KEYS_I                           =        522,
  NVI_AUTO_VOLUME_ENABLED_I                      =        523,
  NVI_ROAM_MSG_I                                 =        524,
  NVI_OTKSL_FLAG_I                               =        525,
  NVI_BTF_ADJUST_I                               =        526,
  NVI_FULL_PREF_MODE_I                           =        527,
  NVI_TIME_FMT_SELECTION_I                       =        528,
  NVI_RUIM_CHV_1_I                               =        529,
  NVI_RUIM_CHV_2_I                               =        530,
  NVI_GPS1_CAPABILITIES_I                        =        531,
  NVI_GPS1_PDE_ADDRESS_I                         =        532,
  NVI_GPS1_ALLOWED_I                             =        533,
  NVI_GPS1_PDE_TRANSPORT_I                       =        534,
  NVI_GPS1_MOBILE_CALC_I                         =        535,
  NVI_GPS1_PDE_PORT_I                            =        536,
  NVI_GPS1_LO_CAL_I                              =        537,
  NVI_GPS1_ANT_OFF_DB_I                          =        538,
  NVI_GPS1_PCS_RF_DELAY_I                        =        539,
  NVI_TTY_I                                      =        540,
  NVI_MM_SDAC_LVL_I                              =        541,
  NVI_BEEP_SDAC_LVL_I                            =        542,
  NVI_SDAC_LVL_I                                 =        543,
  NVI_MM_LVL_I                                   =        544,
  NVI_MM_LVL_SHADOW_I                            =        545,
  NVI_MM_SPEAKER_LVL_I                           =        546,
  NVI_MM_PLAY_MODE_I                             =        547,
  NVI_MM_REPEAT_MODE_I                           =        548,
  NVI_MM_RINGER_FILE_I                           =        549,
  NVI_MM_STORAGE_DEVICE_I                        =        550,
  NVI_RUIM_SMS_STATUS_I                          =        551,
  NVI_GPS1_GPS_RF_DELAY_I                        =        552,
  NVI_GPS1_CDMA_RF_DELAY_I                       =        553,
  NVI_PCS_ENC_BTF_I                              =        554,
  NVI_CDMA_ENC_BTF_I                             =        555,
  NVI_BD_ADDR_I                                  =        556,
  NVI_SP_ECC_ENABLED_I                           =        557,
  NVI_ECC_LIST_I                                 =        558,
  NVI_BT_LPOS_LAT_I                              =        559,
  NVI_BT_LPOS_LONG_I                             =        560,
  NVI_PREF_PLMN_I                                =        561,
  NVI_SYS_STRUCT_FCT_FILE_NAME_I                 =        562,
  NVI_SYS_STRUCT_FCT_FILE_XSUM_I                 =        563,
  NVI_SYS_CUSTOM_INI_FILE_NAME_I                 =        564,
  NVI_SYS_CUSTOM_INI_FILE_XSUM_I                 =        565,
  NVI_SYS_STD_MAP_FILE_VER_I                     =        566,
  NVI_SYS_STD_MAP_FILE_XSUM_I                    =        567,
  NVI_SYS_SPC_DELTA_FILE_VER_I                   =        568,
  NVI_SYS_SPC_DELTA_FILE_XSUM_I                  =        569,
  NVI_IMSI_INDEX_I                               =        570,
  NVI_GPS1_PRIVACY_I                             =        571,
  NVI_GPS1_NET_ACCESS_I                          =        572,
  NVI_GPS1_CELLBASED_SMS_I                       =        573,
  NVI_GPS1_TELESERVICE_ID_I                      =        574,
  NVI_GPS1_NET_DBM_SIZE_I                        =        575,
  NVI_ACQ_ORDER_PREF_I                           =        576,
  NVI_NET_SEL_MODE_PREF_I                        =        577,
  NVI_SERVICE_DOMAIN_PREF_I                      =        578,
  NVI_EQUIVALENT_PLMN_LIST_I                     =        579,
  NVI_RTRE_CONFIG_I                              =        580,
  NVI_UIM_FIRST_INST_CLASS_I                     =        581,
  NVI_ERR_FATAL_OPTIONS_I                        =        582,
  NVI_UIM_PREF_PROTOCOL_I                        =        583,
  NVI_NON_COMPLIANCE_COMMENT_I                   =        584,
  NVI_DF_I                                       =        585,
  NVI_UIM_CDMA_PREF_SLOT_I                       =        586,
  NVI_UIM_GSM_PREF_SLOT_I                        =        587,
  NVI_CDMA_RX_DIVERSITY_CTRL_I                   =        588,
  NVI_MDSP_MEM_DUMP_ENABLED_I                    =        589,
  NVI_RPLMNACT_I                                 =        590,
  NVI_UE_RAT_CAPABILITY_I                        =        591,
  NVI_GSM_UE_OP_CLASS_I                          =        592,
  NVI_UMTS_UE_OP_CLASS_I                         =        593,
  NVI_MSRAC_SMS_VALUE_I                          =        594,
  NVI_MSRAC_SM_VALUE_I                           =        595,
  NVI_GSM_A5_ALGORITHMS_SUPPORTED_I              =        596,
  NVI_UE_IMEI_I                                  =        597,
  NVI_ACQ_DB_I                                   =        598,
  NVI_ACQ_LIST_1_I                               =        599,
  NVI_ACQ_LIST_2_I                               =        600,
  NVI_ACQ_LIST_3_I                               =        601,
  NVI_ACQ_LIST_4_I                               =        602,
  NVI_RRC_INTEGRITY_ENABLED_I                    =        603,
  NVI_RRC_CIPHERING_ENABLED_I                    =        604,
  NVI_RRC_FAKE_SECURITY_ENABLED_I                =        605,
  NVI_GSM_CAL_ARFCN_I                            =        606,
  NVI_DCS_CAL_ARFCN_I                            =        607,
  NVI_GSM_RX_GAIN_RANGE_1_FREQ_COMP_I            =        608,
  NVI_GSM_RX_GAIN_RANGE_2_FREQ_COMP_I            =        609,
  NVI_GSM_RX_GAIN_RANGE_3_FREQ_COMP_I            =        610,
  NVI_GSM_RX_GAIN_RANGE_4_FREQ_COMP_I            =        611,
  NVI_DCS_RX_GAIN_RANGE_1_FREQ_COMP_I            =        612,
  NVI_DCS_RX_GAIN_RANGE_2_FREQ_COMP_I            =        613,
  NVI_DCS_RX_GAIN_RANGE_3_FREQ_COMP_I            =        614,
  NVI_DCS_RX_GAIN_RANGE_4_FREQ_COMP_I            =        615,
  NVI_GSM_TRK_LO_ADJ_PDM_INIT_VAL_I              =        616,
  NVI_GSM_TRK_LO_ADJ_PDM_GAIN_SLOPE_I            =        617,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_00_I            =        618,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_01_I            =        619,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_02_I            =        620,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_03_I            =        621,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_04_I            =        622,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_05_I            =        623,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_06_I            =        624,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_07_I            =        625,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_08_I            =        626,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_09_I            =        627,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_10_I            =        628,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_11_I            =        629,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_12_I            =        630,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_13_I            =        631,
  NVI_GSM_TX_BURST_RAMP_UP_INDEX_14_I            =        632,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_00_I          =        633,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_01_I          =        634,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_02_I          =        635,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_03_I          =        636,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_04_I          =        637,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_05_I          =        638,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_06_I          =        639,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_07_I          =        640,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_08_I          =        641,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_09_I          =        642,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_10_I          =        643,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_11_I          =        644,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_12_I          =        645,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_13_I          =        646,
  NVI_GSM_TX_BURST_RAMP_DOWN_INDEX_14_I          =        647,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_00_I            =        648,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_01_I            =        649,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_02_I            =        650,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_03_I            =        651,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_04_I            =        652,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_05_I            =        653,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_06_I            =        654,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_07_I            =        655,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_08_I            =        656,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_09_I            =        657,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_10_I            =        658,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_11_I            =        659,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_12_I            =        660,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_13_I            =        661,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_14_I            =        662,
  NVI_DCS_TX_BURST_RAMP_UP_INDEX_15_I            =        663,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_00_I          =        664,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_01_I          =        665,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_02_I          =        666,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_03_I          =        667,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_04_I          =        668,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_05_I          =        669,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_06_I          =        670,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_07_I          =        671,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_08_I          =        672,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_09_I          =        673,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_10_I          =        674,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_11_I          =        675,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_12_I          =        676,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_13_I          =        677,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_14_I          =        678,
  NVI_DCS_TX_BURST_RAMP_DOWN_INDEX_15_I          =        679,
  NVI_GSM_PA_GAIN_SLOPE_I                        =        680,
  NVI_DCS_PA_GAIN_SLOPE_I                        =        681,
  NVI_GSM_TX_FREQ_COMP_I                         =        682,
  NVI_DCS_TX_FREQ_COMP_I                         =        683,
  NVI_GSM_VBATT_HI_PA_COMP_I                     =        684,
  NVI_GSM_VBATT_LO_PA_COMP_I                     =        685,
  NVI_DCS_VBATT_HI_PA_COMP_I                     =        686,
  NVI_DCS_VBATT_LO_PA_COMP_I                     =        687,
  NVI_VBATT_3200_MV_ADC_I                        =        688,
  NVI_VBATT_3700_MV_ADC_I                        =        689,
  NVI_VBATT_4200_MV_ADC_I                        =        690,
  NVI_GSM_PRECHARGE_I                            =        691,
  NVI_DCS_PRECHARGE_I                            =        692,
  NVI_GSM_PRECHARGE_DUR_I                        =        693,
  NVI_DCS_PRECHARGE_DUR_I                        =        694,
  NVI_GSM_PA_START_TIME_OFFSET_I                 =        695,
  NVI_GSM_PA_STOP_TIME_OFFSET_I                  =        696,
  NVI_DCS_PA_START_TIME_OFFSET_I                 =        697,
  NVI_DCS_PA_STOP_TIME_OFFSET_I                  =        698,
  NVI_GSM_LOCIGPRS_I                             =        699,
  NVI_GSM_KCGPRS_I                               =        700,
  NVI_MULTISLOT_CLASS_I                          =        701,
  NVI_NON_DRX_TIMER_I                            =        702,
  NVI_SPLIT_PAGING_CYCLE_I                       =        703,
  NVI_GSM_GAINRANGE_SWITCHPOINTS_I               =        704,
  NVI_DCS_GAINRANGE_SWITCHPOINTS_I               =        705,
  NVI_GSMUMTS_IMSI_I                             =        706,
  NVI_GPRS_ANITE_GCF_I                           =        707,
  NVI_FORCE_UE_SGSNR_R99_I                       =        708,
  NVI_FORCE_UE_MSCR_R99_I                        =        709,
  NVI_GSM_PA_TEMP_COMP_INDEX_14_I                =        710,
  NVI_DCS_PA_TEMP_COMP_INDEX_15_I                =        711,
  NVI_GSM_PA_TEMP_COMP_INDEX_00_I                =        712,
  NVI_GSM_PA_TEMP_COMP_INDEX_01_I                =        713,
  NVI_GSM_PA_TEMP_COMP_INDEX_02_I                =        714,
  NVI_GSM_PA_TEMP_COMP_INDEX_03_I                =        715,
  NVI_GSM_PA_TEMP_COMP_INDEX_04_I                =        716,
  NVI_GSM_PA_TEMP_COMP_INDEX_05_I                =        717,
  NVI_GSM_PA_TEMP_COMP_INDEX_06_I                =        718,
  NVI_GSM_PA_TEMP_COMP_INDEX_07_I                =        719,
  NVI_GSM_PA_TEMP_COMP_INDEX_08_I                =        720,
  NVI_GSM_PA_TEMP_COMP_INDEX_09_I                =        721,
  NVI_GSM_PA_TEMP_COMP_INDEX_10_I                =        722,
  NVI_GSM_PA_TEMP_COMP_INDEX_11_I                =        723,
  NVI_GSM_PA_TEMP_COMP_INDEX_12_I                =        724,
  NVI_GSM_PA_TEMP_COMP_INDEX_13_I                =        725,
  NVI_DCS_PA_TEMP_COMP_INDEX_00_I                =        726,
  NVI_DCS_PA_TEMP_COMP_INDEX_01_I                =        727,
  NVI_DCS_PA_TEMP_COMP_INDEX_02_I                =        728,
  NVI_DCS_PA_TEMP_COMP_INDEX_03_I                =        729,
  NVI_DCS_PA_TEMP_COMP_INDEX_04_I                =        730,
  NVI_DCS_PA_TEMP_COMP_INDEX_05_I                =        731,
  NVI_DCS_PA_TEMP_COMP_INDEX_06_I                =        732,
  NVI_DCS_PA_TEMP_COMP_INDEX_07_I                =        733,
  NVI_DCS_PA_TEMP_COMP_INDEX_08_I                =        734,
  NVI_DCS_PA_TEMP_COMP_INDEX_09_I                =        735,
  NVI_DCS_PA_TEMP_COMP_INDEX_10_I                =        736,
  NVI_DCS_PA_TEMP_COMP_INDEX_11_I                =        737,
  NVI_DCS_PA_TEMP_COMP_INDEX_12_I                =        738,
  NVI_DCS_PA_TEMP_COMP_INDEX_13_I                =        739,
  NVI_DCS_PA_TEMP_COMP_INDEX_14_I                =        740,
  NVI_GSM_AMR_CALL_CONFIG_I                      =        741,
  NVI_GSM_PA_TEMP_COMP_INT8_INDEX_14_I           =        742,
  NVI_DCS_PA_TEMP_COMP_INT8_INDEX_15_I           =        743,
  NVI_AMR_I                                      =        744,
  NVI_RR_STORED_LAST_BEST_ARFCNS_BAND_I          =        745,
  NVI_IM_LEVEL3_I                                =        746,
  NVI_IM_LEVEL4_I                                =        747,
  NVI_AGC_VALUE_3_MIN_I                          =        748,
  NVI_AGC_VALUE_4_MIN_I                          =        749,
  NVI_LNA_BYPASS_TIMER_0_I                       =        750,
  NVI_LNA_BYPASS_TIMER_1_I                       =        751,
  NVI_LNA_BYPASS_TIMER_2_I                       =        752,
  NVI_LNA_BYPASS_TIMER_3_I                       =        753,
  NVI_LNA_NON_BYPASS_TIMER_0_I                   =        754,
  NVI_LNA_NON_BYPASS_TIMER_1_I                   =        755,
  NVI_LNA_NON_BYPASS_TIMER_2_I                   =        756,
  NVI_LNA_NON_BYPASS_TIMER_3_I                   =        757,
  NVI_TX_GAIN_ATTEN_LIMIT_I                      =        758,
  NVI_CDMA_LNA_3_FALL_I                          =        759,
  NVI_CDMA_LNA_3_OFFSET_I                        =        760,
  NVI_CDMA_LNA_3_RISE_I                          =        761,
  NVI_CDMA_LNA_3_OFFSET_VS_FREQ_I                =        762,
  NVI_PCS_LNA_3_FALL_I                           =        763,
  NVI_PCS_LNA_3_OFFSET_I                         =        764,
  NVI_PCS_LNA_3_RISE_I                           =        765,
  NVI_PCS_LNA_3_OFFSET_VS_FREQ_I                 =        766,
  NVI_CDMA_LNA_4_FALL_I                          =        767,
  NVI_CDMA_LNA_4_OFFSET_I                        =        768,
  NVI_CDMA_LNA_4_RISE_I                          =        769,
  NVI_CDMA_LNA_4_OFFSET_VS_FREQ_I                =        770,
  NVI_PCS_LNA_4_FALL_I                           =        771,
  NVI_PCS_LNA_4_OFFSET_I                         =        772,
  NVI_PCS_LNA_4_RISE_I                           =        773,
  NVI_PCS_LNA_4_OFFSET_VS_FREQ_I                 =        774,
  NVI_DFM_LNA_FALL_I                             =        775,
  NVI_DFM_LNA_OFFSET_I                           =        776,
  NVI_DFM_LNA_RISE_I                             =        777,
  NVI_DFM_LNA_OFFSET_VS_FREQ_I                   =        778,
  NVI_DFM_LNA_BYPASS_TIMER_I                     =        779,
  NVI_DFM_LNA_NONBYPASS_TIMER_I                  =        780,
  NVI_DFM_AGC_ACC_MIN_1_I                        =        781,
  NVI_DFM_AGC_IM_GAIN_I                          =        782,
  NVI_DFM_AGC_DC_GAIN_I                          =        783,
  NVI_DFM_IM_LEVEL1_I                            =        784,
  NVI_GPS_FG_TRK_OFFSET_SCALER_I                 =        785,
  NVI_DIGITAL_FG_TRK_OFFSET_SCALER_I             =        786,
  NVI_FM_FG_TRK_OFFSET_SCALER_I                  =        787,
  NVI_DFM_LNA_S0_PHASE_OFFSET_I                  =        788,
  NVI_DFM_LNA_S1_PHASE_OFFSET_I                  =        789,
  NVI_CDMA_RXF_CG_IOFFSET_I                      =        790,
  NVI_PCS_RXF_CG_IOFFSET_I                       =        791,
  NVI_FM_RXF_CG_IOFFSET_I                        =        792,
  NVI_GPS_RXF_CG_IOFFSET_I                       =        793,
  NVI_CDMA_RXF_CG_QOFFSET_I                      =        794,
  NVI_PCS_RXF_CG_QOFFSET_I                       =        795,
  NVI_FM_RXF_CG_QOFFSET_I                        =        796,
  NVI_GPS_RXF_CG_QOFFSET_I                       =        797,
  NVI_CDMA_RXF_FG_IOFFSET_I                      =        798,
  NVI_PCS_RXF_FG_IOFFSET_I                       =        799,
  NVI_FM_RXF_FG_IOFFSET_I                        =        800,
  NVI_GPS_RXF_FG_IOFFSET_I                       =        801,
  NVI_CDMA_RXF_FG_QOFFSET_I                      =        802,
  NVI_PCS_RXF_FG_QOFFSET_I                       =        803,
  NVI_FM_RXF_FG_QOFFSET_I                        =        804,
  NVI_GPS_RXF_FG_QOFFSET_I                       =        805,
  NVI_CDMA_DACC_EST_IOFFSET_I                    =        806,
  NVI_PCS_DACC_EST_IOFFSET_I                     =        807,
  NVI_FM_DACC_EST_IOFFSET_I                      =        808,
  NVI_GPS_DACC_EST_IOFFSET_I                     =        809,
  NVI_CDMA_DACC_EST_QOFFSET_I                    =        810,
  NVI_PCS_DACC_EST_QOFFSET_I                     =        811,
  NVI_FM_DACC_EST_QOFFSET_I                      =        812,
  NVI_GPS_DACC_EST_QOFFSET_I                     =        813,
  NVI_CDMA_DACC_IACCUM0_I                        =        814,
  NVI_PCS_DACC_IACCUM0_I                         =        815,
  NVI_FM_DACC_IACCUM0_I                          =        816,
  NVI_GPS_DACC_IACCUM0_I                         =        817,
  NVI_CDMA_DACC_IACCUM1_I                        =        818,
  NVI_PCS_DACC_IACCUM1_I                         =        819,
  NVI_FM_DACC_IACCUM1_I                          =        820,
  NVI_GPS_DACC_IACCUM1_I                         =        821,
  NVI_CDMA_DACC_IACCUM2_I                        =        822,
  NVI_PCS_DACC_IACCUM2_I                         =        823,
  NVI_FM_DACC_IACCUM2_I                          =        824,
  NVI_GPS_DACC_IACCUM2_I                         =        825,
  NVI_CDMA_DACC_IACCUM3_I                        =        826,
  NVI_PCS_DACC_IACCUM3_I                         =        827,
  NVI_FM_DACC_IACCUM3_I                          =        828,
  NVI_GPS_DACC_IACCUM3_I                         =        829,
  NVI_CDMA_DACC_IACCUM4_I                        =        830,
  NVI_PCS_DACC_IACCUM4_I                         =        831,
  NVI_FM_DACC_IACCUM4_I                          =        832,
  NVI_GPS_DACC_IACCUM4_I                         =        833,
  NVI_CDMA_DACC_QACCUM0_I                        =        834,
  NVI_PCS_DACC_QACCUM0_I                         =        835,
  NVI_FM_DACC_QACCUM0_I                          =        836,
  NVI_GPS_DACC_QACCUM0_I                         =        837,
  NVI_CDMA_DACC_QACCUM1_I                        =        838,
  NVI_PCS_DACC_QACCUM1_I                         =        839,
  NVI_FM_DACC_QACCUM1_I                          =        840,
  NVI_GPS_DACC_QACCUM1_I                         =        841,
  NVI_CDMA_DACC_QACCUM2_I                        =        842,
  NVI_PCS_DACC_QACCUM2_I                         =        843,
  NVI_FM_DACC_QACCUM2_I                          =        844,
  NVI_GPS_DACC_QACCUM2_I                         =        845,
  NVI_CDMA_DACC_QACCUM3_I                        =        846,
  NVI_PCS_DACC_QACCUM3_I                         =        847,
  NVI_FM_DACC_QACCUM3_I                          =        848,
  NVI_GPS_DACC_QACCUM3_I                         =        849,
  NVI_CDMA_DACC_QACCUM4_I                        =        850,
  NVI_PCS_DACC_QACCUM4_I                         =        851,
  NVI_FM_DACC_QACCUM4_I                          =        852,
  NVI_GPS_DACC_QACCUM4_I                         =        853,
  NVI_CDMA_DACC_GAIN_MULT_I                      =        854,
  NVI_PCS_DACC_GAIN_MULT_I                       =        855,
  NVI_FM_DACC_GAIN_MULT_I                        =        856,
  NVI_GPS_DACC_GAIN_MULT_I                       =        857,
  NVI_CDMA_IM2_I_VALUE_I                         =        858,
  NVI_PCS_IM2_I_VALUE_I                          =        859,
  NVI_CDMA_IM2_Q_VALUE_I                         =        860,
  NVI_PCS_IM2_Q_VALUE_I                          =        861,
  NVI_RTC_TIME_ADJUST_I                          =        862,
  NVI_FM_VGA_GAIN_OFFSET_I                       =        863,
  NVI_CDMA_VGA_GAIN_OFFSET_I                     =        864,
  NVI_PCS_VGA_GAIN_OFFSET_I                      =        865,
  NVI_FM_VGA_GAIN_OFFSET_VS_FREQ_I               =        866,
  NVI_CDMA_VGA_GAIN_OFFSET_VS_FREQ_I             =        867,
  NVI_PCS_VGA_GAIN_OFFSET_VS_FREQ_I              =        868,
  NVI_FM_VGA_GAIN_OFFSET_VS_TEMP_I               =        869,
  NVI_CDMA_VGA_GAIN_OFFSET_VS_TEMP_I             =        870,
  NVI_PCS_VGA_GAIN_OFFSET_VS_TEMP_I              =        871,
  NVI_FM_MIS_COMP_A_OFFSET_I                     =        872,
  NVI_DIGITAL_MIS_COMP_A_OFFSET_I                =        873,
  NVI_GPS_MIS_COMP_A_OFFSET_I                    =        874,
  NVI_FM_MIS_COMP_B_OFFSET_I                     =        875,
  NVI_DIGITAL_MIS_COMP_B_OFFSET_I                =        876,
  NVI_GPS_MIS_COMP_B_OFFSET_I                    =        877,
  NVI_PCS_IM_LEVEL3_I                            =        878,
  NVI_PCS_IM_LEVEL4_I                            =        879,
  NVI_PCS_AGC_VALUE_3_MIN_I                      =        880,
  NVI_PCS_AGC_VALUE_4_MIN_I                      =        881,
  NVI_DIGITAL_PLL_LOCK_TIMER_I                   =        882,
  NVI_CDMA_TX_GAIN_ATTEN_LIMIT_I                 =        883,
  NVI_PCS_TX_GAIN_ATTEN_LIMIT_I                  =        884,
  NVI_AMPS_TX_GAIN_ATTEN_LIMIT_I                 =        885,
  NVI_GPS_TX_GAIN_ATTEN_LIMIT_I                  =        886,
  NVI_CDMA_IM2_TRANSCONDUCTOR_VALUE_I            =        887,
  NVI_PCS_IM2_TRANSCONDUCTOR_VALUE_I             =        888,
  NVI_FM_PA_MAC_HIGH_I                           =        889,
  NVI_CDMA_DYNAMIC_RANGE_I                       =        890,
  NVI_CDMA_MIN_RX_RSSI_I                         =        891,
  NVI_TX_WARMUP_I                                =        892,
  NVI_CDMA_P1_RISE_FALL_OFF_I                    =        893,
  NVI_PCS_P1_RISE_FALL_OFF_I                     =        894,
  NVI_PCS_LNA_BYPASS_TIMER_0_I                   =        895,
  NVI_GPS_DOPP_SDEV_I                            =        896,
  NVI_GPS_RF_CONFIG_I                            =        897,
  NVI_AAGPS_MAX_OSC_UNC_I                        =        898,
  NVI_AAGPS_MAX_OSC_UNC_RATE_I                   =        899,
  NVI_AAGPS_PROCESSING_LOSSES_I                  =        900,
  NVI_AAGPS_MAX_PLATFORM_VELOCITY_I              =        901,
  NVI_AAGPS_MAX_PLATFORM_ACCL_I                  =        902,
  NVI_AAGPS_DEFAULT_QOS_TIME_I                   =        903,
  NVI_AAGPS_RAPID_FIX_REPORT_MAX_LATENCY_I       =        904,
  NVI_AAGPS_POSITIONING_MODES_SUPPORTED_I        =        905,
  NVI_AAGPS_DEFAULT_REF_TIME_UNC_I               =        906,
  NVI_AAGPS_DEFAULT_REF_POSITION_UNC_I           =        907,
  NVI_AAGPS_APP_TRACKING_GPSIDLE_THSLD_I         =        908,
  NVI_AAGPS_GPS_LOCK_CONTROL_I                   =        909,
  NVI_AAGPS_DEFAULT_URL_I                        =        910,
  NVI_AAGPS_DEFAULT_IP_ADDRESS_I                 =        911,
  NVI_APPX5_PREF_I                               =        912,
  NVI_AAGPS_TRANSPORT_TYPE_I                     =        913,
  NVI_AAGPS_2G_MO_LRSUPPORT_I                    =        914,
  NVI_AAGPS_EMERGENCY_SERVICES_SPPRT_I           =        915,
  NVI_AAGPS_PROTOCOL_SELECT_I                    =        916,
  NVI_AAGPS_APP_TRKG_PERIODIC_REQ_DLY_MARGIN_I   =        917,
  NVI_AAGPS_DEFAULT_QOS_UNC_I                    =        918,
  NVI_AAGPS_APP_TRACKING_GPSON_THSLD_I           =        919,
  NVI_AAGPS_MT_LRSUPPORT_I                       =        920,
  NVI_WCDMA_RX_LIN_I                             =        921,
  NVI_WCDMA_RX_COMP_VS_FREQ_I                    =        922,
  NVI_WCDMA_RX_LIN_VS_TEMP_I                     =        923,
  NVI_WCDMA_RX_SLP_VS_TEMP_I                     =        924,
  NVI_WCDMA_LNA_RANGE_POL_I                      =        925,
  NVI_WCDMA_LNA_RANGE_RISE_I                     =        926,
  NVI_WCDMA_LNA_RANGE_FALL_I                     =        927,
  NVI_WCDMA_IM_LEVEL_I                           =        928,
  NVI_WCDMA_NONBYPASS_TIMER_I                    =        929,
  NVI_WCDMA_BYPASS_TIMER_I                       =        930,
  NVI_WCDMA_LNA_RANGE_OFFSET_I                   =        931,
  NVI_WCDMA_LNA_OFFSET_VS_FREQ_I                 =        932,
  NVI_WCDMA_RX_AGC_MIN_I                         =        933,
  NVI_WCDMA_RX_AGC_MAX_I                         =        934,
  NVI_WCDMA_AGC_PHASE_OFFSET_I                   =        935,
  NVI_WCDMA_TX_LIN_MASTER_0_I                    =        936,
  NVI_WCDMA_TX_LIN_MASTER_1_I                    =        937,
  NVI_WCDMA_TX_COMP_VS_FREQ_0_I                  =        938,
  NVI_WCDMA_TX_COMP_VS_FREQ_1_I                  =        939,
  NVI_WCDMA_TX_LIN_VS_TEMP_0_I                   =        940,
  NVI_WCDMA_TX_LIN_VS_TEMP_1_I                   =        941,
  NVI_WCDMA_TX_SLP_VS_TEMP_0_I                   =        942,
  NVI_WCDMA_TX_SLP_VS_TEMP_1_I                   =        943,
  NVI_WCDMA_R1_RISE_I                            =        944,
  NVI_WCDMA_R1_FALL_I                            =        945,
  NVI_WCDMA_TX_LIM_VS_TEMP_I                     =        946,
  NVI_WCDMA_TX_LIM_VS_FREQ_I                     =        947,
  NVI_WCDMA_ADJ_FACTOR_I                         =        948,
  NVI_WCDMA_EXP_HDET_VS_AGC_I                    =        949,
  NVI_WCDMA_HDET_OFF_I                           =        950,
  NVI_WCDMA_HDET_SPN_I                           =        951,
  NVI_WCDMA_ENC_BTF_I                            =        952,
  NVI_WCDMA_VGA_GAIN_OFFSET_I                    =        953,
  NVI_WCDMA_VGA_GAIN_OFFSET_VS_FREQ_I            =        954,
  NVI_WCDMA_VGA_GAIN_OFFSET_VS_TEMP_I            =        955,
  NVI_WCDMA_LNA_RANGE_RISE_2_I                   =        956,
  NVI_WCDMA_LNA_RANGE_RISE_3_I                   =        957,
  NVI_WCDMA_LNA_RANGE_FALL_2_I                   =        958,
  NVI_WCDMA_LNA_RANGE_FALL_3_I                   =        959,
  NVI_WCDMA_IM_LEVEL_2_I                         =        960,
  NVI_WCDMA_IM_LEVEL_3_I                         =        961,
  NVI_WCDMA_LNA_RANGE_OFFSET_2_I                 =        962,
  NVI_WCDMA_LNA_RANGE_OFFSET_3_I                 =        963,
  NVI_WCDMA_LNA_OFFSET_VS_FREQ_2_I               =        964,
  NVI_WCDMA_LNA_OFFSET_VS_FREQ_3_I               =        965,
  NVI_WCDMA_IM2_I_VALUE_I                        =        966,
  NVI_WCDMA_IM2_Q_VALUE_I                        =        967,
  NVI_WCDMA_IM2_TRANSCONDUCTOR_VALUE_I           =        968,
  NVI_WCDMA_RX_AGC_MIN_2_I                       =        969,
  NVI_WCDMA_RX_AGC_MIN_3_I                       =        970,
  NVI_WCDMA_VBATT_I                              =        971,
  NVI_WCDMA_THERM_I                              =        972,
  NVI_WCDMA_MAX_TX_POWER_I                       =        973,
  NVI_WCDMA_OUT_OF_SERVICE_THRESH_I              =        974,
  NVI_TRK_LO_ADJ_VS_TEMP_I                       =        975,
  NVI_ROT_FREQ_VS_TEMP_I                         =        976,
  NVI_WCDMA_AGC_PA_ON_RISE_DELAY_I               =        977,
  NVI_WCDMA_AGC_PA_ON_FALL_DELAY_I               =        978,
  NVI_WCDMA_AGC_TX_ON_RISE_DELAY_I               =        979,
  NVI_WCDMA_AGC_TX_ON_FALL_DELAY_I               =        980,
  NVI_WCDMA_AGC_UPDATE_TX_AGC_TIME_I             =        981,
  NVI_TRK_LO_ADJ_DEFAULT_I                       =        982,
  NVI_TRK_LO_ADJ_SLOPE_DEFAULT_I                 =        983,
  NVI_WCDMA_PA_GAIN_UP_TIME_I                    =        984,
  NVI_WCDMA_PA_GAIN_DOWN_TIME_I                  =        985,
  NVI_RFR_BB_FILTER_I                            =        986,
  NVI_RFR_IQ_LINE_RESISTOR_I                     =        987,
  NVI_RFR_VCO_COARSE_TUNING_1900_I               =        988,
  NVI_WCDMA_TX_ROT_ANGLE_PA_STATE_00_I           =        989,
  NVI_WCDMA_TX_ROT_ANGLE_PA_STATE_01_I           =        990,
  NVI_WCDMA_TX_ROT_ANGLE_PA_STATE_10_I           =        991,
  NVI_WCDMA_TX_ROT_ANGLE_PA_STATE_11_I           =        992,
  NVI_WCDMA_SPIKE_MITIGATION_ENABLED_I           =        993,
  NVI_PA_COMPENSATE_UP_I                         =        994,
  NVI_PA_COMPENSATE_DOWN_I                       =        995,
  NVI_C1_CDMA_LNA_OFFSET_I                       =        996,
  NVI_C1_CDMA_LNA_OFFSET_VS_FREQ_I               =        997,
  NVI_C1_PCS_LNA_OFFSET_I                        =        998,
  NVI_C1_PCS_LNA_OFFSET_VS_FREQ_I                =        999,
  NVI_C1_CDMA_LNA_2_OFFSET_I                     =       1000,
  NVI_C1_CDMA_LNA_2_OFFSET_VS_FREQ_I             =       1001,
  NVI_C1_PCS_LNA_2_OFFSET_I                      =       1002,
  NVI_C1_PCS_LNA_2_OFFSET_VS_FREQ_I              =       1003,
  NVI_C1_CDMA_LNA_3_OFFSET_I                     =       1004,
  NVI_C1_CDMA_LNA_3_OFFSET_VS_FREQ_I             =       1005,
  NVI_C1_PCS_LNA_3_OFFSET_I                      =       1006,
  NVI_C1_PCS_LNA_3_OFFSET_VS_FREQ_I              =       1007,
  NVI_C1_CDMA_LNA_4_OFFSET_I                     =       1008,
  NVI_C1_CDMA_LNA_4_OFFSET_VS_FREQ_I             =       1009,
  NVI_C1_PCS_LNA_4_OFFSET_I                      =       1010,
  NVI_C1_PCS_LNA_4_OFFSET_VS_FREQ_I              =       1011,
  NVI_C1_CDMA_P1_RISE_FALL_OFFSET_I              =       1012,
  NVI_C1_PCS_P1_RISE_FALL_OFFSET_I               =       1013,
  NVI_C1_RX_AGC_VALUE_1_MINMAX_I                 =       1014,
  NVI_C1_RX_AGC_VALUE_2_MINMAX_I                 =       1015,
  NVI_C1_RX_AGC_VALUE_3_MINMAX_I                 =       1016,
  NVI_C1_RX_AGC_VALUE_4_MINMAX_I                 =       1017,
  NVI_C0_RX_AGC_VREF_VAL_I                       =       1018,
  NVI_C1_RX_AGC_VREF_VAL_I                       =       1019,
  NVI_C0_GRP_DELAY_ADJ_I                         =       1020,
  NVI_C1_GRP_DELAY_ADJ_I                         =       1021,
  NVI_C1_CDMA_VGA_GAIN_OFFSET_I                  =       1022,
  NVI_C1_CDMA_VGA_GAIN_OFFSET_VS_FREQ_I          =       1023,
  NVI_C1_CDMA_VGA_GAIN_OFFSET_VS_TEMP_I          =       1024,
  NVI_C1_PCS_VGA_GAIN_OFFSET_I                   =       1025,
  NVI_C1_PCS_VGA_GAIN_OFFSET_VS_FREQ_I           =       1026,
  NVI_C1_PCS_VGA_GAIN_OFFSET_VS_TEMP_I           =       1027,
  NVI_C1_DIGITAL_MIS_COMP_A_OFFSET_I             =       1028,
  NVI_C1_GPS_MIS_COMP_A_OFFSET_I                 =       1029,
  NVI_C1_DIGITAL_MIS_COMP_B_OFFSET_I             =       1030,
  NVI_C1_GPS_MIS_COMP_B_OFFSET_I                 =       1031,
  NVI_C1_CDMA_DACC_IACCUM0_I                     =       1032,
  NVI_C1_PCS_DACC_IACCUM0_I                      =       1033,
  NVI_C1_GPS_DACC_IACCUM0_I                      =       1034,
  NVI_C1_CDMA_DACC_IACCUM1_I                     =       1035,
  NVI_C1_PCS_DACC_IACCUM1_I                      =       1036,
  NVI_C1_GPS_DACC_IACCUM1_I                      =       1037,
  NVI_C1_CDMA_DACC_IACCUM2_I                     =       1038,
  NVI_C1_PCS_DACC_IACCUM2_I                      =       1039,
  NVI_C1_GPS_DACC_IACCUM2_I                      =       1040,
  NVI_C1_CDMA_DACC_IACCUM3_I                     =       1041,
  NVI_C1_PCS_DACC_IACCUM3_I                      =       1042,
  NVI_C1_GPS_DACC_IACCUM3_I                      =       1043,
  NVI_C1_CDMA_DACC_IACCUM4_I                     =       1044,
  NVI_C1_PCS_DACC_IACCUM4_I                      =       1045,
  NVI_C1_GPS_DACC_IACCUM4_I                      =       1046,
  NVI_C1_CDMA_DACC_QACCUM0_I                     =       1047,
  NVI_C1_PCS_DACC_QACCUM0_I                      =       1048,
  NVI_C1_GPS_DACC_QACCUM0_I                      =       1049,
  NVI_C1_CDMA_DACC_QACCUM1_I                     =       1050,
  NVI_C1_PCS_DACC_QACCUM1_I                      =       1051,
  NVI_C1_GPS_DACC_QACCUM1_I                      =       1052,
  NVI_C1_CDMA_DACC_QACCUM2_I                     =       1053,
  NVI_C1_PCS_DACC_QACCUM2_I                      =       1054,
  NVI_C1_GPS_DACC_QACCUM2_I                      =       1055,
  NVI_C1_CDMA_DACC_QACCUM3_I                     =       1056,
  NVI_C1_PCS_DACC_QACCUM3_I                      =       1057,
  NVI_C1_GPS_DACC_QACCUM3_I                      =       1058,
  NVI_C1_CDMA_DACC_QACCUM4_I                     =       1059,
  NVI_C1_PCS_DACC_QACCUM4_I                      =       1060,
  NVI_C1_GPS_DACC_QACCUM4_I                      =       1061,
  NVI_C1_CDMA_IM2_Q_VALUE_I                      =       1062,
  NVI_C1_PCS_IM2_Q_VALUE_I                       =       1063,
  NVI_C1_CDMA_IM2_I_VALUE_I                      =       1064,
  NVI_C1_PCS_IM2_I_VALUE_I                       =       1065,
  NVI_C1_CDMA_IM2_TRANSCONDUCTOR_VALUE_I         =       1066,
  NVI_C1_PCS_IM2_TRANSCONDUCTOR_VALUE_I          =       1067,
  NVI_C1_VCO_COARSE_TUNE_TABLE_I                 =       1068,
  NVI_C1_CDMA_LNA_1_RISE_I                       =       1069,
  NVI_C1_CDMA_LNA_2_RISE_I                       =       1070,
  NVI_C1_CDMA_LNA_3_RISE_I                       =       1071,
  NVI_C1_CDMA_LNA_4_RISE_I                       =       1072,
  NVI_C1_PCS_LNA_1_RISE_I                        =       1073,
  NVI_C1_PCS_LNA_2_RISE_I                        =       1074,
  NVI_C1_PCS_LNA_3_RISE_I                        =       1075,
  NVI_C1_PCS_LNA_4_RISE_I                        =       1076,
  NVI_C1_CDMA_LNA_1_FALL_I                       =       1077,
  NVI_C1_CDMA_LNA_2_FALL_I                       =       1078,
  NVI_C1_CDMA_LNA_3_FALL_I                       =       1079,
  NVI_C1_CDMA_LNA_4_FALL_I                       =       1080,
  NVI_C1_PCS_LNA_1_FALL_I                        =       1081,
  NVI_C1_PCS_LNA_2_FALL_I                        =       1082,
  NVI_C1_PCS_LNA_3_FALL_I                        =       1083,
  NVI_C1_PCS_LNA_4_FALL_I                        =       1084,
  NVI_C1_CDMA_IM_LEVEL1_I                        =       1085,
  NVI_C1_CDMA_IM_LEVEL2_I                        =       1086,
  NVI_C1_CDMA_IM_LEVEL3_I                        =       1087,
  NVI_C1_CDMA_IM_LEVEL4_I                        =       1088,
  NVI_C1_PCS_IM_LEVEL1_I                         =       1089,
  NVI_C1_PCS_IM_LEVEL2_I                         =       1090,
  NVI_C1_PCS_IM_LEVEL3_I                         =       1091,
  NVI_C1_PCS_IM_LEVEL4_I                         =       1092,
  NVI_CELL_1X_OLTA_BACKOFF_I                     =       1093,
  NVI_CELL_HDR_OLTA_BACKOFF_I                    =       1094,
  NVI_PCS_OLTA_BACKOFF_I                         =       1095,
  NVI_BC6_TX_LIM_VS_TEMP_I                       =       1096,
  NVI_C0_BC6_RX_CAL_CHAN_I                       =       1097,
  NVI_BC6_TX_LIN_MASTER0_I                       =       1098,
  NVI_BC6_TX_LIN_MASTER1_I                       =       1099,
  NVI_BC6_TX_COMP0_I                             =       1100,
  NVI_BC6_TX_COMP1_I                             =       1101,
  NVI_BC6_TX_LIM_VS_FREQ_I                       =       1102,
  NVI_BC6_EXP_HDET_VS_AGC_I                      =       1103,
  NVI_BC6_HDET_OFF_I                             =       1104,
  NVI_BC6_HDET_SPN_I                             =       1105,
  NVI_BC6_PA_R1_RISE_I                           =       1106,
  NVI_BC6_PA_R1_FALL_I                           =       1107,
  NVI_BC6_LNA_RANGE_POL_I                        =       1108,
  NVI_BC6_LNA_1_RISE_I                           =       1109,
  NVI_BC6_LNA_1_FALL_I                           =       1110,
  NVI_C0_BC6_LNA_RANGE_OFFSET_I                  =       1111,
  NVI_C1_BC6_LNA_RANGE_OFFSET_I                  =       1112,
  NVI_BC6_LNA_2_RISE_I                           =       1113,
  NVI_BC6_LNA_2_FALL_I                           =       1114,
  NVI_BC6_LNA_RANGE_12_OFFSET_I                  =       1115,
  NVI_C0_BC6_IM_LEVEL1_I                         =       1116,
  NVI_C0_BC6_IM_LEVEL2_I                         =       1117,
  NVI_C0_BC6_IM_LEVEL3_I                         =       1118,
  NVI_C0_BC6_IM_LEVEL4_I                         =       1119,
  NVI_C0_BC6_LNA_1_OFFSET_VS_FREQ_I              =       1120,
  NVI_C1_BC6_LNA_1_OFFSET_VS_FREQ_I              =       1121,
  NVI_BC6_AGC_PHASE_OFFSET_I                     =       1122,
  NVI_BC6_ADJ_FACTOR_I                           =       1123,
  NVI_BC6_RX_AGC_MINMAX_I                        =       1124,
  NVI_BC6_RX_AGC_MIN_11_I                        =       1125,
  NVI_BC6_ENC_BTF_I                              =       1126,
  NVI_BC6_TX_GAIN_ATTEN_LIMIT_I                  =       1127,
  NVI_BC6_LNA_3_FALL_I                           =       1128,
  NVI_BC6_LNA_3_RISE_I                           =       1129,
  NVI_BC6_LNA_3_OFFSET_I                         =       1130,
  NVI_C0_BC6_LNA_3_OFFSET_VS_FREQ_I              =       1131,
  NVI_C1_BC6_LNA_3_OFFSET_VS_FREQ_I              =       1132,
  NVI_BC6_LNA_4_FALL_I                           =       1133,
  NVI_BC6_LNA_4_RISE_I                           =       1134,
  NVI_C0_BC6_LNA_4_OFFSET_I                      =       1135,
  NVI_C1_BC6_LNA_4_OFFSET_I                      =       1136,
  NVI_C0_BC6_IM2_I_VALUE_I                       =       1137,
  NVI_C1_BC6_IM2_I_VALUE_I                       =       1138,
  NVI_C0_BC6_IM2_Q_VALUE_I                       =       1139,
  NVI_C1_BC6_IM2_Q_VALUE_I                       =       1140,
  NVI_C0_BC6_VGA_GAIN_OFFSET_I                   =       1141,
  NVI_C1_BC6_VGA_GAIN_OFFSET_I                   =       1142,
  NVI_C0_BC6_VGA_GAIN_OFFSET_VS_FREQ_I           =       1143,
  NVI_C1_BC6_VGA_GAIN_OFFSET_VS_FREQ_I           =       1144,
  NVI_C0_BC6_VGA_GAIN_OFFSET_VS_TEMP_I           =       1145,
  NVI_C1_BC6_VGA_GAIN_OFFSET_VS_TEMP_I           =       1146,
  NVI_BC6_P1_RISE_FALL_OFF_I                     =       1147,
  NVI_C0_BC6_LNA_4_OFFSET_VS_FREQ_I              =       1148,
  NVI_C1_BC6_LNA_4_OFFSET_VS_FREQ_I              =       1149,
  NVI_C0_BC6_P1_RISE_FALL_OFFSET_I               =       1150,
  NVI_C1_BC6_P1_RISE_FALL_OFFSET_I               =       1151,
  NVI_C0_BC6_DIGITAL_MIS_COMP_A_OFFSET_I         =       1152,
  NVI_C1_BC6_DIGITAL_MIS_COMP_A_OFFSET_I         =       1153,
  NVI_C0_BC6_DIGITAL_MIS_COMP_B_OFFSET_I         =       1154,
  NVI_C1_BC6_DIGITAL_MIS_COMP_B_OFFSET_I         =       1155,
  NVI_C0_BC6_IM2_TRANSCONDUCTOR_VALUE_I          =       1156,
  NVI_C1_BC6_IM2_TRANSCONDUCTOR_VALUE_I          =       1157,
  NVI_BC6_VCO_COARSE_TUNE_TABLE_I                =       1158,
  NVI_C0_BC6_TX_CAL_CHAN_I                       =       1159,
  NVI_BC6_GPS1_RF_DELAY_I                        =       1160,
  NVI_BC6_TX_LIN_MASTER2_I                       =       1161,
  NVI_BC6_TX_LIN_MASTER3_I                       =       1162,
  NVI_BC6_TX_COMP2_I                             =       1163,
  NVI_BC6_TX_COMP3_I                             =       1164,
  NVI_BC6_PA_R2_RISE_I                           =       1165,
  NVI_BC6_PA_R2_FALL_I                           =       1166,
  NVI_BC6_PA_R3_RISE_I                           =       1167,
  NVI_BC6_PA_R3_FALL_I                           =       1168,
  NVI_C0_BC6_LNA_2_OFFSET_VS_FREQ_I              =       1169,
  NVI_C0_BC6_LNA_1_OFFSET_I                      =       1170,
  NVI_C0_BC6_LNA_2_OFFSET_I                      =       1171,
  NVI_C0_BC6_LNA_3_OFFSET_I                      =       1172,
  NVI_C0_BC6_LNA_1_RISE_I                        =       1173,
  NVI_C0_BC6_LNA_1_FALL_I                        =       1174,
  NVI_C0_BC6_LNA_2_RISE_I                        =       1175,
  NVI_C0_BC6_LNA_2_FALL_I                        =       1176,
  NVI_C0_BC6_LNA_3_RISE_I                        =       1177,
  NVI_C0_BC6_LNA_3_FALL_I                        =       1178,
  NVI_C0_BC6_LNA_4_RISE_I                        =       1179,
  NVI_C0_BC6_LNA_4_FALL_I                        =       1180,
  NVI_C1_BC6_TX_CAL_CHAN_I                       =       1181,
  NVI_C1_BC6_RX_CAL_CHAN_I                       =       1182,
  NVI_C1_BC6_LNA_2_OFFSET_VS_FREQ_I              =       1183,
  NVI_C1_BC6_LNA_1_OFFSET_I                      =       1184,
  NVI_C1_BC6_LNA_2_OFFSET_I                      =       1185,
  NVI_C1_BC6_LNA_3_OFFSET_I                      =       1186,
  NVI_C1_BC6_LNA_1_RISE_I                        =       1187,
  NVI_C1_BC6_LNA_1_FALL_I                        =       1188,
  NVI_C1_BC6_LNA_2_RISE_I                        =       1189,
  NVI_C1_BC6_LNA_2_FALL_I                        =       1190,
  NVI_C1_BC6_LNA_3_RISE_I                        =       1191,
  NVI_C1_BC6_LNA_3_FALL_I                        =       1192,
  NVI_C1_BC6_LNA_4_RISE_I                        =       1193,
  NVI_C1_BC6_LNA_4_FALL_I                        =       1194,
  NVI_C1_BC6_IM_LEVEL1_I                         =       1195,
  NVI_C1_BC6_IM_LEVEL2_I                         =       1196,
  NVI_C1_BC6_IM_LEVEL3_I                         =       1197,
  NVI_C1_BC6_IM_LEVEL4_I                         =       1198,
  NVI_BC5_GPS1_RF_DELAY_I                        =       1199,
  NVI_BC11_GPS1_RF_DELAY_I                       =       1200,
  NVI_BCX_BLOCK_GPS1_RF_DELAY_I                  =       1201,
  NVI_BC5_TX_LIM_VS_TEMP_I                       =       1202,
  NVI_BC11_TX_LIM_VS_TEMP_I                      =       1203,
  NVI_BCX_BLOCK_TX_LIM_VS_TEMP_I                 =       1204,
  NVI_BC5_TX_LIN_MASTER0_I                       =       1205,
  NVI_BC11_TX_LIN_MASTER0_I                      =       1206,
  NVI_BCX_BLOCK_TX_LIN_MASTER0_I                 =       1207,
  NVI_BC5_TX_LIN_MASTER1_I                       =       1208,
  NVI_BC11_TX_LIN_MASTER1_I                      =       1209,
  NVI_BCX_BLOCK_TX_LIN_MASTER1_I                 =       1210,
  NVI_BC5_TX_LIN_MASTER2_I                       =       1211,
  NVI_BC11_TX_LIN_MASTER2_I                      =       1212,
  NVI_BCX_BLOCK_TX_LIN_MASTER2_I                 =       1213,
  NVI_BC5_TX_LIN_MASTER3_I                       =       1214,
  NVI_BC11_TX_LIN_MASTER3_I                      =       1215,
  NVI_BCX_BLOCK_TX_LIN_MASTER3_I                 =       1216,
  NVI_BC5_TX_COMP0_I                             =       1217,
  NVI_BC11_TX_COMP0_I                            =       1218,
  NVI_BCX_BLOCK_TX_COMP0_I                       =       1219,
  NVI_BC5_TX_COMP1_I                             =       1220,
  NVI_BC11_TX_COMP1_I                            =       1221,
  NVI_BCX_BLOCK_TX_COMP1_I                       =       1222,
  NVI_BC5_TX_COMP2_I                             =       1223,
  NVI_BC11_TX_COMP2_I                            =       1224,
  NVI_BCX_BLOCK_TX_COMP2_I                       =       1225,
  NVI_BC5_TX_COMP3_I                             =       1226,
  NVI_BC11_TX_COMP3_I                            =       1227,
  NVI_BCX_BLOCK_TX_COMP3_I                       =       1228,
  NVI_BC5_TX_LIM_VS_FREQ_I                       =       1229,
  NVI_BC11_TX_LIM_VS_FREQ_I                      =       1230,
  NVI_BCX_BLOCK_TX_LIM_VS_FREQ_I                 =       1231,
  NVI_BC5_PA_R1_RISE_I                           =       1232,
  NVI_BC11_PA_R1_RISE_I                          =       1233,
  NVI_BCX_BLOCK_PA_R1_RISE_I                     =       1234,
  NVI_BC5_PA_R1_FALL_I                           =       1235,
  NVI_BC11_PA_R1_FALL_I                          =       1236,
  NVI_BCX_BLOCK_PA_R1_FALL_I                     =       1237,
  NVI_BC5_PA_R2_RISE_I                           =       1238,
  NVI_BC11_PA_R2_RISE_I                          =       1239,
  NVI_BCX_BLOCK_PA_R2_RISE_I                     =       1240,
  NVI_BC5_PA_R2_FALL_I                           =       1241,
  NVI_BC11_PA_R2_FALL_I                          =       1242,
  NVI_BCX_BLOCK_PA_R2_FALL_I                     =       1243,
  NVI_BC5_PA_R3_RISE_I                           =       1244,
  NVI_BC11_PA_R3_RISE_I                          =       1245,
  NVI_BCX_BLOCK_PA_R3_RISE_I                     =       1246,
  NVI_BC5_PA_R3_FALL_I                           =       1247,
  NVI_BC11_PA_R3_FALL_I                          =       1248,
  NVI_BCX_BLOCK_PA_R3_FALL_I                     =       1249,
  NVI_BC5_HDET_OFF_I                             =       1250,
  NVI_BC11_HDET_OFF_I                            =       1251,
  NVI_BCX_BLOCK_HDET_OFF_I                       =       1252,
  NVI_BC5_HDET_SPN_I                             =       1253,
  NVI_BC11_HDET_SPN_I                            =       1254,
  NVI_BCX_BLOCK_HDET_SPN_I                       =       1255,
  NVI_BC5_EXP_HDET_VS_AGC_I                      =       1256,
  NVI_BC11_EXP_HDET_VS_AGC_I                     =       1257,
  NVI_BCX_BLOCK_EXP_HDET_VS_AGC_I                =       1258,
  NVI_BC5_ENC_BTF_I                              =       1259,
  NVI_BC11_ENC_BTF_I                             =       1260,
  NVI_BCX_BLOCK_ENC_BTF_I                        =       1261,
  NVI_BC5_VCO_COARSE_TUNE_TABLE_I                =       1262,
  NVI_BC11_VCO_COARSE_TUNE_TABLE_I               =       1263,
  NVI_BCX_BLOCK_VCO_COARSE_TUNE_TABLE_I          =       1264,
  NVI_BC5_P1_RISE_FALL_OFF_I                     =       1265,
  NVI_BC11_P1_RISE_FALL_OFF_I                    =       1266,
  NVI_BCX_BLOCK_P1_RISE_FALL_OFF_I               =       1267,
  NVI_C0_BC5_TX_CAL_CHAN_I                       =       1268,
  NVI_C0_BC11_TX_CAL_CHAN_I                      =       1269,
  NVI_C0_BCX_BLOCK_TX_CAL_CHAN_I                 =       1270,
  NVI_C0_BC5_RX_CAL_CHAN_I                       =       1271,
  NVI_C0_BC11_RX_CAL_CHAN_I                      =       1272,
  NVI_C0_BCX_BLOCK_RX_CAL_CHAN_I                 =       1273,
  NVI_C0_BC5_LNA_1_OFFSET_VS_FREQ_I              =       1274,
  NVI_C0_BC11_LNA_1_OFFSET_VS_FREQ_I             =       1275,
  NVI_C0_BCX_BLOCK_LNA_1_OFFSET_VS_FREQ_I        =       1276,
  NVI_C0_BC5_LNA_2_OFFSET_VS_FREQ_I              =       1277,
  NVI_C0_BC11_LNA_2_OFFSET_VS_FREQ_I             =       1278,
  NVI_C0_BCX_BLOCK_LNA_2_OFFSET_VS_FREQ_I        =       1279,
  NVI_C0_BC5_LNA_3_OFFSET_VS_FREQ_I              =       1280,
  NVI_C0_BC11_LNA_3_OFFSET_VS_FREQ_I             =       1281,
  NVI_C0_BCX_BLOCK_LNA_3_OFFSET_VS_FREQ_I        =       1282,
  NVI_C0_BC5_LNA_4_OFFSET_VS_FREQ_I              =       1283,
  NVI_C0_BC11_LNA_4_OFFSET_VS_FREQ_I             =       1284,
  NVI_C0_BCX_BLOCK_LNA_4_OFFSET_VS_FREQ_I        =       1285,
  NVI_C0_BC5_LNA_1_OFFSET_I                      =       1286,
  NVI_C0_BC11_LNA_1_OFFSET_I                     =       1287,
  NVI_C0_BCX_BLOCK_LNA_1_OFFSET_I                =       1288,
  NVI_C0_BC5_LNA_2_OFFSET_I                      =       1289,
  NVI_C0_BC11_LNA_2_OFFSET_I                     =       1290,
  NVI_C0_BCX_BLOCK_LNA_2_OFFSET_I                =       1291,
  NVI_C0_BC5_LNA_3_OFFSET_I                      =       1292,
  NVI_C0_BC11_LNA_3_OFFSET_I                     =       1293,
  NVI_C0_BCX_BLOCK_LNA_3_OFFSET_I                =       1294,
  NVI_C0_BC5_LNA_4_OFFSET_I                      =       1295,
  NVI_C0_BC11_LNA_4_OFFSET_I                     =       1296,
  NVI_C0_BCX_BLOCK_LNA_4_OFFSET_I                =       1297,
  NVI_C0_BC5_IM2_I_VALUE_I                       =       1298,
  NVI_C0_BC11_IM2_I_VALUE_I                      =       1299,
  NVI_C0_BCX_BLOCK_IM2_I_VALUE_I                 =       1300,
  NVI_C0_BC5_IM2_Q_VALUE_I                       =       1301,
  NVI_C0_BC11_IM2_Q_VALUE_I                      =       1302,
  NVI_C0_BCX_BLOCK_IM2_Q_VALUE_I                 =       1303,
  NVI_C0_BC5_VGA_GAIN_OFFSET_I                   =       1304,
  NVI_C0_BC11_VGA_GAIN_OFFSET_I                  =       1305,
  NVI_C0_BCX_BLOCK_VGA_GAIN_OFFSET_I             =       1306,
  NVI_C0_BC5_VGA_GAIN_OFFSET_VS_FREQ_I           =       1307,
  NVI_C0_BC11_VGA_GAIN_OFFSET_VS_FREQ_I          =       1308,
  NVI_C0_BCX_BLOCK_VGA_GAIN_OFFSET_VS_FREQ_I     =       1309,
  NVI_C0_BC5_IM2_TRANSCONDUCTOR_VALUE_I          =       1310,
  NVI_C0_BC11_IM2_TRANSCONDUCTOR_VALUE_I         =       1311,
  NVI_C0_BCX_BLOCK_IM2_TRANSCONDUCTOR_VALUE_I    =       1312,
  NVI_C0_BC5_LNA_1_RISE_I                        =       1313,
  NVI_C0_BC11_LNA_1_RISE_I                       =       1314,
  NVI_C0_BCX_BLOCK_LNA_1_RISE_I                  =       1315,
  NVI_C0_BC5_LNA_1_FALL_I                        =       1316,
  NVI_C0_BC11_LNA_1_FALL_I                       =       1317,
  NVI_C0_BCX_BLOCK_LNA_1_FALL_I                  =       1318,
  NVI_C0_BC5_LNA_2_RISE_I                        =       1319,
  NVI_C0_BC11_LNA_2_RISE_I                       =       1320,
  NVI_C0_BCX_BLOCK_LNA_2_RISE_I                  =       1321,
  NVI_C0_BC5_LNA_2_FALL_I                        =       1322,
  NVI_C0_BC11_LNA_2_FALL_I                       =       1323,
  NVI_C0_BCX_BLOCK_LNA_2_FALL_I                  =       1324,
  NVI_C0_BC5_LNA_3_RISE_I                        =       1325,
  NVI_C0_BC11_LNA_3_RISE_I                       =       1326,
  NVI_C0_BCX_BLOCK_LNA_3_RISE_I                  =       1327,
  NVI_C0_BC5_LNA_3_FALL_I                        =       1328,
  NVI_C0_BC11_LNA_3_FALL_I                       =       1329,
  NVI_C0_BCX_BLOCK_LNA_3_FALL_I                  =       1330,
  NVI_C0_BC5_LNA_4_RISE_I                        =       1331,
  NVI_C0_BC11_LNA_4_RISE_I                       =       1332,
  NVI_C0_BCX_BLOCK_LNA_4_RISE_I                  =       1333,
  NVI_C0_BC5_LNA_4_FALL_I                        =       1334,
  NVI_C0_BC11_LNA_4_FALL_I                       =       1335,
  NVI_C0_BCX_BLOCK_LNA_4_FALL_I                  =       1336,
  NVI_C0_BC5_IM_LEVEL1_I                         =       1337,
  NVI_C0_BC11_IM_LEVEL1_I                        =       1338,
  NVI_C0_BCX_BLOCK_IM_LEVEL1_I                   =       1339,
  NVI_C0_BC5_IM_LEVEL2_I                         =       1340,
  NVI_C0_BC11_IM_LEVEL2_I                        =       1341,
  NVI_C0_BCX_BLOCK_IM_LEVEL2_I                   =       1342,
  NVI_C0_BC5_IM_LEVEL3_I                         =       1343,
  NVI_C0_BC11_IM_LEVEL3_I                        =       1344,
  NVI_C0_BCX_BLOCK_IM_LEVEL3_I                   =       1345,
  NVI_C0_BC5_IM_LEVEL4_I                         =       1346,
  NVI_C0_BC11_IM_LEVEL4_I                        =       1347,
  NVI_C0_BCX_BLOCK_IM_LEVEL4_I                   =       1348,
  NVI_C1_BC5_TX_CAL_CHAN_I                       =       1349,
  NVI_C1_BC11_TX_CAL_CHAN_I                      =       1350,
  NVI_C1_BCX_BLOCK_TX_CAL_CHAN_I                 =       1351,
  NVI_C1_BC5_RX_CAL_CHAN_I                       =       1352,
  NVI_C1_BC11_RX_CAL_CHAN_I                      =       1353,
  NVI_C1_BCX_BLOCK_RX_CAL_CHAN_I                 =       1354,
  NVI_C1_BC5_LNA_1_OFFSET_VS_FREQ_I              =       1355,
  NVI_C1_BC11_LNA_1_OFFSET_VS_FREQ_I             =       1356,
  NVI_C1_BCX_BLOCK_LNA_1_OFFSET_VS_FREQ_I        =       1357,
  NVI_C1_BC5_LNA_2_OFFSET_VS_FREQ_I              =       1358,
  NVI_C1_BC11_LNA_2_OFFSET_VS_FREQ_I             =       1359,
  NVI_C1_BCX_BLOCK_LNA_2_OFFSET_VS_FREQ_I        =       1360,
  NVI_C1_BC5_LNA_3_OFFSET_VS_FREQ_I              =       1361,
  NVI_C1_BC11_LNA_3_OFFSET_VS_FREQ_I             =       1362,
  NVI_C1_BCX_BLOCK_LNA_3_OFFSET_VS_FREQ_I        =       1363,
  NVI_C1_BC5_LNA_4_OFFSET_VS_FREQ_I              =       1364,
  NVI_C1_BC11_LNA_4_OFFSET_VS_FREQ_I             =       1365,
  NVI_C1_BCX_BLOCK_LNA_4_OFFSET_VS_FREQ_I        =       1366,
  NVI_C1_BC5_LNA_1_OFFSET_I                      =       1367,
  NVI_C1_BC11_LNA_1_OFFSET_I                     =       1368,
  NVI_C1_BCX_BLOCK_LNA_1_OFFSET_I                =       1369,
  NVI_C1_BC5_LNA_2_OFFSET_I                      =       1370,
  NVI_C1_BC11_LNA_2_OFFSET_I                     =       1371,
  NVI_C1_BCX_BLOCK_LNA_2_OFFSET_I                =       1372,
  NVI_C1_BC5_LNA_3_OFFSET_I                      =       1373,
  NVI_C1_BC11_LNA_3_OFFSET_I                     =       1374,
  NVI_C1_BCX_BLOCK_LNA_3_OFFSET_I                =       1375,
  NVI_C1_BC5_LNA_4_OFFSET_I                      =       1376,
  NVI_C1_BC11_LNA_4_OFFSET_I                     =       1377,
  NVI_C1_BCX_BLOCK_LNA_4_OFFSET_I                =       1378,
  NVI_C1_BC5_IM2_I_VALUE_I                       =       1379,
  NVI_C1_BC11_IM2_I_VALUE_I                      =       1380,
  NVI_C1_BCX_BLOCK_IM2_I_VALUE_I                 =       1381,
  NVI_C1_BC5_IM2_Q_VALUE_I                       =       1382,
  NVI_C1_BC11_IM2_Q_VALUE_I                      =       1383,
  NVI_C1_BCX_BLOCK_IM2_Q_VALUE_I                 =       1384,
  NVI_C1_BC5_VGA_GAIN_OFFSET_I                   =       1385,
  NVI_C1_BC11_VGA_GAIN_OFFSET_I                  =       1386,
  NVI_C1_BCX_BLOCK_VGA_GAIN_OFFSET_I             =       1387,
  NVI_C1_BC5_VGA_GAIN_OFFSET_VS_FREQ_I           =       1388,
  NVI_C1_BC11_VGA_GAIN_OFFSET_VS_FREQ_I          =       1389,
  NVI_C1_BCX_BLOCK_VGA_GAIN_OFFSET_VS_FREQ_I     =       1390,
  NVI_C1_BC5_IM2_TRANSCONDUCTOR_VALUE_I          =       1391,
  NVI_C1_BC11_IM2_TRANSCONDUCTOR_VALUE_I         =       1392,
  NVI_C1_BCX_BLOCK_IM2_TRANSCONDUCTOR_VALUE_I    =       1393,
  NVI_C1_BC5_LNA_1_RISE_I                        =       1394,
  NVI_C1_BC11_LNA_1_RISE_I                       =       1395,
  NVI_C1_BCX_BLOCK_LNA_1_RISE_I                  =       1396,
  NVI_C1_BC5_LNA_1_FALL_I                        =       1397,
  NVI_C1_BC11_LNA_1_FALL_I                       =       1398,
  NVI_C1_BCX_BLOCK_LNA_1_FALL_I                  =       1399,
  NVI_C1_BC5_LNA_2_RISE_I                        =       1400,
  NVI_C1_BC11_LNA_2_RISE_I                       =       1401,
  NVI_C1_BCX_BLOCK_LNA_2_RISE_I                  =       1402,
  NVI_C1_BC5_LNA_2_FALL_I                        =       1403,
  NVI_C1_BC11_LNA_2_FALL_I                       =       1404,
  NVI_C1_BCX_BLOCK_LNA_2_FALL_I                  =       1405,
  NVI_C1_BC5_LNA_3_RISE_I                        =       1406,
  NVI_C1_BC11_LNA_3_RISE_I                       =       1407,
  NVI_C1_BCX_BLOCK_LNA_3_RISE_I                  =       1408,
  NVI_C1_BC5_LNA_3_FALL_I                        =       1409,
  NVI_C1_BC11_LNA_3_FALL_I                       =       1410,
  NVI_C1_BCX_BLOCK_LNA_3_FALL_I                  =       1411,
  NVI_C1_BC5_LNA_4_RISE_I                        =       1412,
  NVI_C1_BC11_LNA_4_RISE_I                       =       1413,
  NVI_C1_BCX_BLOCK_LNA_4_RISE_I                  =       1414,
  NVI_C1_BC5_LNA_4_FALL_I                        =       1415,
  NVI_C1_BC11_LNA_4_FALL_I                       =       1416,
  NVI_C1_BCX_BLOCK_LNA_4_FALL_I                  =       1417,
  NVI_C1_BC5_IM_LEVEL1_I                         =       1418,
  NVI_C1_BC11_IM_LEVEL1_I                        =       1419,
  NVI_C1_BCX_BLOCK_IM_LEVEL1_I                   =       1420,
  NVI_C1_BC5_IM_LEVEL2_I                         =       1421,
  NVI_C1_BC11_IM_LEVEL2_I                        =       1422,
  NVI_C1_BCX_BLOCK_IM_LEVEL2_I                   =       1423,
  NVI_C1_BC5_IM_LEVEL3_I                         =       1424,
  NVI_C1_BC11_IM_LEVEL3_I                        =       1425,
  NVI_C1_BCX_BLOCK_IM_LEVEL3_I                   =       1426,
  NVI_C1_BC5_IM_LEVEL4_I                         =       1427,
  NVI_C1_BC11_IM_LEVEL4_I                        =       1428,
  NVI_C1_BCX_BLOCK_IM_LEVEL4_I                   =       1429,
  NVI_BC4_GPS1_RF_DELAY_I                        =       1430,
  NVI_BC4_TX_LIM_VS_TEMP_I                       =       1431,
  NVI_BC4_TX_LIN_MASTER0_I                       =       1432,
  NVI_BC4_TX_LIN_MASTER1_I                       =       1433,
  NVI_BC4_TX_LIN_MASTER2_I                       =       1434,
  NVI_LCD_ID_I                                   =       1435,
  NVI_BC4_TX_LIN_MASTER3_I                       =       1436,
  NVI_BC4_TX_COMP0_I                             =       1437,
  NVI_BC4_TX_COMP1_I                             =       1438,
  NVI_BC4_TX_COMP2_I                             =       1439,
  NVI_BC4_TX_COMP3_I                             =       1440,
  NVI_BC4_TX_LIM_VS_FREQ_I                       =       1441,
  NVI_BC4_PA_R1_RISE_I                           =       1442,
  NVI_BC4_PA_R1_FALL_I                           =       1443,
  NVI_BC4_PA_R2_RISE_I                           =       1444,
  NVI_BC4_PA_R2_FALL_I                           =       1445,
  NVI_BC4_PA_R3_RISE_I                           =       1446,
  NVI_BC4_PA_R3_FALL_I                           =       1447,
  NVI_BC4_HDET_OFF_I                             =       1448,
  NVI_BC4_HDET_SPN_I                             =       1449,
  NVI_BC4_EXP_HDET_VS_AGC_I                      =       1450,
  NVI_BC4_ENC_BTF_I                              =       1451,
  NVI_BC4_VCO_COARSE_TUNE_TABLE_I                =       1452,
  NVI_BC4_P1_RISE_FALL_OFF_I                     =       1453,
  NVI_C0_BC4_TX_CAL_CHAN_I                       =       1454,
  NVI_C0_BC4_RX_CAL_CHAN_I                       =       1455,
  NVI_C0_BC4_LNA_1_OFFSET_VS_FREQ_I              =       1456,
  NVI_C0_BC4_LNA_2_OFFSET_VS_FREQ_I              =       1457,
  NVI_C0_BC4_LNA_3_OFFSET_VS_FREQ_I              =       1458,
  NVI_C0_BC4_LNA_4_OFFSET_VS_FREQ_I              =       1459,
  NVI_C0_BC4_LNA_1_OFFSET_I                      =       1460,
  NVI_C0_BC4_LNA_2_OFFSET_I                      =       1461,
  NVI_C0_BC4_LNA_3_OFFSET_I                      =       1462,
  NVI_C0_BC4_LNA_4_OFFSET_I                      =       1463,
  NVI_C0_BC4_IM2_I_VALUE_I                       =       1464,
  NVI_C0_BC4_IM2_Q_VALUE_I                       =       1465,
  NVI_C0_BC4_VGA_GAIN_OFFSET_I                   =       1466,
  NVI_C0_BC4_VGA_GAIN_OFFSET_VS_FREQ_I           =       1467,
  NVI_C0_BC4_IM2_TRANSCONDUCTOR_VALUE_I          =       1468,
  NVI_C0_BC4_LNA_1_RISE_I                        =       1469,
  NVI_C0_BC4_LNA_1_FALL_I                        =       1470,
  NVI_C0_BC4_LNA_2_RISE_I                        =       1471,
  NVI_C0_BC4_LNA_2_FALL_I                        =       1472,
  NVI_C0_BC4_LNA_3_RISE_I                        =       1473,
  NVI_C0_BC4_LNA_3_FALL_I                        =       1474,
  NVI_C0_BC4_LNA_4_RISE_I                        =       1475,
  NVI_C0_BC4_LNA_4_FALL_I                        =       1476,
  NVI_C0_BC4_IM_LEVEL1_I                         =       1477,
  NVI_C0_BC4_IM_LEVEL2_I                         =       1478,
  NVI_C0_BC4_IM_LEVEL3_I                         =       1479,
  NVI_C0_BC4_IM_LEVEL4_I                         =       1480,
  NVI_C1_BC4_TX_CAL_CHAN_I                       =       1481,
  NVI_C1_BC4_RX_CAL_CHAN_I                       =       1482,
  NVI_C1_BC4_LNA_1_OFFSET_VS_FREQ_I              =       1483,
  NVI_C1_BC4_LNA_2_OFFSET_VS_FREQ_I              =       1484,
  NVI_C1_BC4_LNA_3_OFFSET_VS_FREQ_I              =       1485,
  NVI_C1_BC4_LNA_4_OFFSET_VS_FREQ_I              =       1486,
  NVI_C1_BC4_LNA_1_OFFSET_I                      =       1487,
  NVI_C1_BC4_LNA_2_OFFSET_I                      =       1488,
  NVI_C1_BC4_LNA_3_OFFSET_I                      =       1489,
  NVI_C1_BC4_LNA_4_OFFSET_I                      =       1490,
  NVI_C1_BC4_IM2_I_VALUE_I                       =       1491,
  NVI_C1_BC4_IM2_Q_VALUE_I                       =       1492,
  NVI_C1_BC4_VGA_GAIN_OFFSET_I                   =       1493,
  NVI_C1_BC4_VGA_GAIN_OFFSET_VS_FREQ_I           =       1494,
  NVI_C1_BC4_IM2_TRANSCONDUCTOR_VALUE_I          =       1495,
  NVI_C1_BC4_LNA_1_RISE_I                        =       1496,
  NVI_C1_BC4_LNA_1_FALL_I                        =       1497,
  NVI_C1_BC4_LNA_2_RISE_I                        =       1498,
  NVI_C1_BC4_LNA_2_FALL_I                        =       1499,
  NVI_C1_BC4_LNA_3_RISE_I                        =       1500,
  NVI_C1_BC4_LNA_3_FALL_I                        =       1501,
  NVI_C1_BC4_LNA_4_RISE_I                        =       1502,
  NVI_C1_BC4_LNA_4_FALL_I                        =       1503,
  NVI_C1_BC4_IM_LEVEL1_I                         =       1504,
  NVI_C1_BC4_IM_LEVEL2_I                         =       1505,
  NVI_C1_BC4_IM_LEVEL3_I                         =       1506,
  NVI_C1_BC4_IM_LEVEL4_I                         =       1507,
  NVI_BC3_GPS1_RF_DELAY_I                        =       1508,
  NVI_BC3_TX_LIM_VS_TEMP_I                       =       1509,
  NVI_BC3_TX_LIN_MASTER0_I                       =       1510,
  NVI_BC3_TX_LIN_MASTER1_I                       =       1511,
  NVI_BC3_TX_LIN_MASTER2_I                       =       1512,
  NVI_BC3_TX_LIN_MASTER3_I                       =       1513,
  NVI_BC3_TX_COMP0_I                             =       1514,
  NVI_BC3_TX_COMP1_I                             =       1515,
  NVI_BC3_TX_COMP2_I                             =       1516,
  NVI_BC3_TX_COMP3_I                             =       1517,
  NVI_BC3_TX_LIM_VS_FREQ_I                       =       1518,
  NVI_BC3_PA_R1_RISE_I                           =       1519,
  NVI_BC3_PA_R1_FALL_I                           =       1520,
  NVI_BC3_PA_R2_RISE_I                           =       1521,
  NVI_BC3_PA_R2_FALL_I                           =       1522,
  NVI_BC3_PA_R3_RISE_I                           =       1523,
  NVI_BC3_PA_R3_FALL_I                           =       1524,
  NVI_BC3_HDET_OFF_I                             =       1525,
  NVI_BC3_HDET_SPN_I                             =       1526,
  NVI_BC3_EXP_HDET_VS_AGC_I                      =       1527,
  NVI_BC3_ENC_BTF_I                              =       1528,
  NVI_BC3_VCO_COARSE_TUNE_TABLE_I                =       1529,
  NVI_BC3_P1_RISE_FALL_OFF_I                     =       1530,
  NVI_C0_BC3_TX_CAL_CHAN_I                       =       1531,
  NVI_C0_BC3_RX_CAL_CHAN_I                       =       1532,
  NVI_C0_BC3_LNA_1_OFFSET_VS_FREQ_I              =       1533,
  NVI_C0_BC3_LNA_2_OFFSET_VS_FREQ_I              =       1534,
  NVI_C0_BC3_LNA_3_OFFSET_VS_FREQ_I              =       1535,
  NVI_C0_BC3_LNA_4_OFFSET_VS_FREQ_I              =       1536,
  NVI_C0_BC3_LNA_1_OFFSET_I                      =       1537,
  NVI_C0_BC3_LNA_2_OFFSET_I                      =       1538,
  NVI_C0_BC3_LNA_3_OFFSET_I                      =       1539,
  NVI_C0_BC3_LNA_4_OFFSET_I                      =       1540,
  NVI_C0_BC3_IM2_I_VALUE_I                       =       1541,
  NVI_C0_BC3_IM2_Q_VALUE_I                       =       1542,
  NVI_C0_BC3_VGA_GAIN_OFFSET_I                   =       1543,
  NVI_C0_BC3_VGA_GAIN_OFFSET_VS_FREQ_I           =       1544,
  NVI_C0_BC3_IM2_TRANSCONDUCTOR_VALUE_I          =       1545,
  NVI_C0_BC3_LNA_1_RISE_I                        =       1546,
  NVI_C0_BC3_LNA_1_FALL_I                        =       1547,
  NVI_C0_BC3_LNA_2_RISE_I                        =       1548,
  NVI_C0_BC3_LNA_2_FALL_I                        =       1549,
  NVI_C0_BC3_LNA_3_RISE_I                        =       1550,
  NVI_C0_BC3_LNA_3_FALL_I                        =       1551,
  NVI_C0_BC3_LNA_4_RISE_I                        =       1552,
  NVI_C0_BC3_LNA_4_FALL_I                        =       1553,
  NVI_C0_BC3_IM_LEVEL1_I                         =       1554,
  NVI_C0_BC3_IM_LEVEL2_I                         =       1555,
  NVI_C0_BC3_IM_LEVEL3_I                         =       1556,
  NVI_C0_BC3_IM_LEVEL4_I                         =       1557,
  NVI_C1_BC3_TX_CAL_CHAN_I                       =       1558,
  NVI_C1_BC3_RX_CAL_CHAN_I                       =       1559,
  NVI_C1_BC3_LNA_1_OFFSET_VS_FREQ_I              =       1560,
  NVI_C1_BC3_LNA_2_OFFSET_VS_FREQ_I              =       1561,
  NVI_C1_BC3_LNA_3_OFFSET_VS_FREQ_I              =       1562,
  NVI_C1_BC3_LNA_4_OFFSET_VS_FREQ_I              =       1563,
  NVI_C1_BC3_LNA_1_OFFSET_I                      =       1564,
  NVI_C1_BC3_LNA_2_OFFSET_I                      =       1565,
  NVI_C1_BC3_LNA_3_OFFSET_I                      =       1566,
  NVI_C1_BC3_LNA_4_OFFSET_I                      =       1567,
  NVI_C1_BC3_IM2_I_VALUE_I                       =       1568,
  NVI_C1_BC3_IM2_Q_VALUE_I                       =       1569,
  NVI_C1_BC3_VGA_GAIN_OFFSET_I                   =       1570,
  NVI_C1_BC3_VGA_GAIN_OFFSET_VS_FREQ_I           =       1571,
  NVI_C1_BC3_IM2_TRANSCONDUCTOR_VALUE_I          =       1572,
  NVI_C1_BC3_LNA_1_RISE_I                        =       1573,
  NVI_C1_BC3_LNA_1_FALL_I                        =       1574,
  NVI_C1_BC3_LNA_2_RISE_I                        =       1575,
  NVI_C1_BC3_LNA_2_FALL_I                        =       1576,
  NVI_C1_BC3_LNA_3_RISE_I                        =       1577,
  NVI_C1_BC3_LNA_3_FALL_I                        =       1578,
  NVI_C1_BC3_LNA_4_RISE_I                        =       1579,
  NVI_C1_BC3_LNA_4_FALL_I                        =       1580,
  NVI_C1_BC3_IM_LEVEL1_I                         =       1581,
  NVI_C1_BC3_IM_LEVEL2_I                         =       1582,
  NVI_C1_BC3_IM_LEVEL3_I                         =       1583,
  NVI_C1_BC3_IM_LEVEL4_I                         =       1584,
  NVI_BC1_GPS1_RF_DELAY_I                        =       1585,
  NVI_BC1_TX_LIM_VS_TEMP_I                       =       1586,
  NVI_BC1_TX_LIN_MASTER0_I                       =       1587,
  NVI_BC1_TX_LIN_MASTER1_I                       =       1588,
  NVI_BC1_TX_LIN_MASTER2_I                       =       1589,
  NVI_BC1_TX_LIN_MASTER3_I                       =       1590,
  NVI_BC1_TX_COMP0_I                             =       1591,
  NVI_BC1_TX_COMP1_I                             =       1592,
  NVI_BC1_TX_COMP2_I                             =       1593,
  NVI_BC1_TX_COMP3_I                             =       1594,
  NVI_BC1_TX_LIM_VS_FREQ_I                       =       1595,
  NVI_BC1_PA_R1_RISE_I                           =       1596,
  NVI_BC1_PA_R1_FALL_I                           =       1597,
  NVI_BC1_PA_R2_RISE_I                           =       1598,
  NVI_BC1_PA_R2_FALL_I                           =       1599,
  NVI_BC1_PA_R3_RISE_I                           =       1600,
  NVI_BC1_PA_R3_FALL_I                           =       1601,
  NVI_BC1_HDET_OFF_I                             =       1602,
  NVI_BC1_HDET_SPN_I                             =       1603,
  NVI_BC1_EXP_HDET_VS_AGC_I                      =       1604,
  NVI_BC1_ENC_BTF_I                              =       1605,
  NVI_BC1_VCO_COARSE_TUNE_TABLE_I                =       1606,
  NVI_BC1_P1_RISE_FALL_OFF_I                     =       1607,
  NVI_C0_BC1_TX_CAL_CHAN_I                       =       1608,
  NVI_C0_BC1_RX_CAL_CHAN_I                       =       1609,
  NVI_C0_BC1_LNA_1_OFFSET_VS_FREQ_I              =       1610,
  NVI_C0_BC1_LNA_2_OFFSET_VS_FREQ_I              =       1611,
  NVI_C0_BC1_LNA_3_OFFSET_VS_FREQ_I              =       1612,
  NVI_C0_BC1_LNA_4_OFFSET_VS_FREQ_I              =       1613,
  NVI_C0_BC1_LNA_1_OFFSET_I                      =       1614,
  NVI_C0_BC1_LNA_2_OFFSET_I                      =       1615,
  NVI_C0_BC1_LNA_3_OFFSET_I                      =       1616,
  NVI_C0_BC1_LNA_4_OFFSET_I                      =       1617,
  NVI_C0_BC1_IM2_I_VALUE_I                       =       1618,
  NVI_C0_BC1_IM2_Q_VALUE_I                       =       1619,
  NVI_C0_BC1_VGA_GAIN_OFFSET_I                   =       1620,
  NVI_C0_BC1_VGA_GAIN_OFFSET_VS_FREQ_I           =       1621,
  NVI_C0_BC1_IM2_TRANSCONDUCTOR_VALUE_I          =       1622,
  NVI_C0_BC1_LNA_1_RISE_I                        =       1623,
  NVI_C0_BC1_LNA_1_FALL_I                        =       1624,
  NVI_C0_BC1_LNA_2_RISE_I                        =       1625,
  NVI_C0_BC1_LNA_2_FALL_I                        =       1626,
  NVI_C0_BC1_LNA_3_RISE_I                        =       1627,
  NVI_C0_BC1_LNA_3_FALL_I                        =       1628,
  NVI_C0_BC1_LNA_4_RISE_I                        =       1629,
  NVI_C0_BC1_LNA_4_FALL_I                        =       1630,
  NVI_C0_BC1_IM_LEVEL1_I                         =       1631,
  NVI_C0_BC1_IM_LEVEL2_I                         =       1632,
  NVI_C0_BC1_IM_LEVEL3_I                         =       1633,
  NVI_C0_BC1_IM_LEVEL4_I                         =       1634,
  NVI_C1_BC1_TX_CAL_CHAN_I                       =       1635,
  NVI_C1_BC1_RX_CAL_CHAN_I                       =       1636,
  NVI_C1_BC1_LNA_1_OFFSET_VS_FREQ_I              =       1637,
  NVI_C1_BC1_LNA_2_OFFSET_VS_FREQ_I              =       1638,
  NVI_C1_BC1_LNA_3_OFFSET_VS_FREQ_I              =       1639,
  NVI_C1_BC1_LNA_4_OFFSET_VS_FREQ_I              =       1640,
  NVI_C1_BC1_LNA_1_OFFSET_I                      =       1641,
  NVI_C1_BC1_LNA_2_OFFSET_I                      =       1642,
  NVI_C1_BC1_LNA_3_OFFSET_I                      =       1643,
  NVI_C1_BC1_LNA_4_OFFSET_I                      =       1644,
  NVI_C1_BC1_IM2_I_VALUE_I                       =       1645,
  NVI_C1_BC1_IM2_Q_VALUE_I                       =       1646,
  NVI_C1_BC1_VGA_GAIN_OFFSET_I                   =       1647,
  NVI_C1_BC1_VGA_GAIN_OFFSET_VS_FREQ_I           =       1648,
  NVI_C1_BC1_IM2_TRANSCONDUCTOR_VALUE_I          =       1649,
  NVI_C1_BC1_LNA_1_RISE_I                        =       1650,
  NVI_C1_BC1_LNA_1_FALL_I                        =       1651,
  NVI_C1_BC1_LNA_2_RISE_I                        =       1652,
  NVI_C1_BC1_LNA_2_FALL_I                        =       1653,
  NVI_C1_BC1_LNA_3_RISE_I                        =       1654,
  NVI_C1_BC1_LNA_3_FALL_I                        =       1655,
  NVI_C1_BC1_LNA_4_RISE_I                        =       1656,
  NVI_C1_BC1_LNA_4_FALL_I                        =       1657,
  NVI_C1_BC1_IM_LEVEL1_I                         =       1658,
  NVI_C1_BC1_IM_LEVEL2_I                         =       1659,
  NVI_C1_BC1_IM_LEVEL3_I                         =       1660,
  NVI_C1_BC1_IM_LEVEL4_I                         =       1661,
  NVI_BC0_GPS1_RF_DELAY_I                        =       1662,
  NVI_BC0_TX_LIM_VS_TEMP_I                       =       1663,
  NVI_BC0_TX_LIN_MASTER0_I                       =       1664,
  NVI_BC0_TX_LIN_MASTER1_I                       =       1665,
  NVI_BC0_TX_LIN_MASTER2_I                       =       1666,
  NVI_BC0_TX_LIN_MASTER3_I                       =       1667,
  NVI_BC0_TX_COMP0_I                             =       1668,
  NVI_BC0_TX_COMP1_I                             =       1669,
  NVI_BC0_TX_COMP2_I                             =       1670,
  NVI_BC0_TX_COMP3_I                             =       1671,
  NVI_BC0_TX_LIM_VS_FREQ_I                       =       1672,
  NVI_BC0_PA_R1_RISE_I                           =       1673,
  NVI_BC0_PA_R1_FALL_I                           =       1674,
  NVI_BC0_PA_R2_RISE_I                           =       1675,
  NVI_BC0_PA_R2_FALL_I                           =       1676,
  NVI_BC0_PA_R3_RISE_I                           =       1677,
  NVI_BC0_PA_R3_FALL_I                           =       1678,
  NVI_BC0_HDET_OFF_I                             =       1679,
  NVI_BC0_HDET_SPN_I                             =       1680,
  NVI_BC0_EXP_HDET_VS_AGC_I                      =       1681,
  NVI_BC0_ENC_BTF_I                              =       1682,
  NVI_BC0_VCO_COARSE_TUNE_TABLE_I                =       1683,
  NVI_BC0_P1_RISE_FALL_OFF_I                     =       1684,
  NVI_C0_BC0_TX_CAL_CHAN_I                       =       1685,
  NVI_C0_BC0_RX_CAL_CHAN_I                       =       1686,
  NVI_C0_BC0_LNA_1_OFFSET_VS_FREQ_I              =       1687,
  NVI_C0_BC0_LNA_2_OFFSET_VS_FREQ_I              =       1688,
  NVI_C0_BC0_LNA_3_OFFSET_VS_FREQ_I              =       1689,
  NVI_C0_BC0_LNA_4_OFFSET_VS_FREQ_I              =       1690,
  NVI_C0_BC0_LNA_1_OFFSET_I                      =       1691,
  NVI_C0_BC0_LNA_2_OFFSET_I                      =       1692,
  NVI_C0_BC0_LNA_3_OFFSET_I                      =       1693,
  NVI_C0_BC0_LNA_4_OFFSET_I                      =       1694,
  NVI_C0_BC0_IM2_I_VALUE_I                       =       1695,
  NVI_C0_BC0_IM2_Q_VALUE_I                       =       1696,
  NVI_C0_BC0_VGA_GAIN_OFFSET_I                   =       1697,
  NVI_C0_BC0_VGA_GAIN_OFFSET_VS_FREQ_I           =       1698,
  NVI_C0_BC0_IM2_TRANSCONDUCTOR_VALUE_I          =       1699,
  NVI_C0_BC0_LNA_1_RISE_I                        =       1700,
  NVI_C0_BC0_LNA_1_FALL_I                        =       1701,
  NVI_C0_BC0_LNA_2_RISE_I                        =       1702,
  NVI_C0_BC0_LNA_2_FALL_I                        =       1703,
  NVI_C0_BC0_LNA_3_RISE_I                        =       1704,
  NVI_C0_BC0_LNA_3_FALL_I                        =       1705,
  NVI_C0_BC0_LNA_4_RISE_I                        =       1706,
  NVI_C0_BC0_LNA_4_FALL_I                        =       1707,
  NVI_C0_BC0_IM_LEVEL1_I                         =       1708,
  NVI_C0_BC0_IM_LEVEL2_I                         =       1709,
  NVI_C0_BC0_IM_LEVEL3_I                         =       1710,
  NVI_C0_BC0_IM_LEVEL4_I                         =       1711,
  NVI_C1_BC0_TX_CAL_CHAN_I                       =       1712,
  NVI_C1_BC0_RX_CAL_CHAN_I                       =       1713,
  NVI_C1_BC0_LNA_1_OFFSET_VS_FREQ_I              =       1714,
  NVI_C1_BC0_LNA_2_OFFSET_VS_FREQ_I              =       1715,
  NVI_C1_BC0_LNA_3_OFFSET_VS_FREQ_I              =       1716,
  NVI_C1_BC0_LNA_4_OFFSET_VS_FREQ_I              =       1717,
  NVI_C1_BC0_LNA_1_OFFSET_I                      =       1718,
  NVI_C1_BC0_LNA_2_OFFSET_I                      =       1719,
  NVI_C1_BC0_LNA_3_OFFSET_I                      =       1720,
  NVI_C1_BC0_LNA_4_OFFSET_I                      =       1721,
  NVI_C1_BC0_IM2_I_VALUE_I                       =       1722,
  NVI_C1_BC0_IM2_Q_VALUE_I                       =       1723,
  NVI_C1_BC0_VGA_GAIN_OFFSET_I                   =       1724,
  NVI_C1_BC0_VGA_GAIN_OFFSET_VS_FREQ_I           =       1725,
  NVI_C1_BC0_IM2_TRANSCONDUCTOR_VALUE_I          =       1726,
  NVI_C1_BC0_LNA_1_RISE_I                        =       1727,
  NVI_C1_BC0_LNA_1_FALL_I                        =       1728,
  NVI_C1_BC0_LNA_2_RISE_I                        =       1729,
  NVI_C1_BC0_LNA_2_FALL_I                        =       1730,
  NVI_C1_BC0_LNA_3_RISE_I                        =       1731,
  NVI_C1_BC0_LNA_3_FALL_I                        =       1732,
  NVI_C1_BC0_LNA_4_RISE_I                        =       1733,
  NVI_C1_BC0_LNA_4_FALL_I                        =       1734,
  NVI_C1_BC0_IM_LEVEL1_I                         =       1735,
  NVI_C1_BC0_IM_LEVEL2_I                         =       1736,
  NVI_C1_BC0_IM_LEVEL3_I                         =       1737,
  NVI_C1_BC0_IM_LEVEL4_I                         =       1738,
  NVI_RF_TUNE_RESERVED_I                         =       1739,
  NVI_PA_R_MAP_I                                 =       1740,
  NVI_RF_BC_CONFIG_I                             =       1741,
  NVI_RF_HW_CONFIG_I                             =       1742,
  NVI_BC0_HDR_IM_FALL_I                          =       1743,
  NVI_BC0_HDR_IM_RISE_I                          =       1744,
  NVI_VCO_TEMP_I                                 =       1745,
  NVI_VCO_DEFAULT_I                              =       1746,
  NVI_VCO_SLOPE_I                                =       1747,
  NVI_VCO_SLOPE_RANGE_I                          =       1748,
  NVI_RGS_TIME_I                                 =       1749,
  NVI_RGS_TYPE_I                                 =       1750,
  NVI_RGS_TEMP_I                                 =       1751,
  NVI_RGS_ROT_I                                  =       1752,
  NVI_RGS_VCO_I                                  =       1753,
  NVI_BC0_HDR_IM_LEVEL_I                         =       1754,
  NVI_C1_BC0_VCO_COARSE_TUNE_TABLE_I             =       1755,
  NVI_C1_BC1_VCO_COARSE_TUNE_TABLE_I             =       1756,
  NVI_C1_BC3_VCO_COARSE_TUNE_TABLE_I             =       1757,
  NVI_C1_BC4_VCO_COARSE_TUNE_TABLE_I             =       1758,
  NVI_C1_BC5_VCO_COARSE_TUNE_TABLE_I             =       1759,
  NVI_C1_BC11_VCO_COARSE_TUNE_TABLE_I            =       1760,
  NVI_C1_BC6_VCO_COARSE_TUNE_TABLE_I             =       1761,
  NVI_C1_RFR_BB_FILTER_I                         =       1762,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_15_I           =       1763,
  NVI_GSM_1900_CAL_ARFCN_I                       =       1764,
  NVI_GSM_1900_RX_GAIN_RANGE_1_FREQ_COMP_I       =       1765,
  NVI_GSM_1900_RX_GAIN_RANGE_2_FREQ_COMP_I       =       1766,
  NVI_GSM_1900_RX_GAIN_RANGE_3_FREQ_COMP_I       =       1767,
  NVI_GSM_1900_RX_GAIN_RANGE_4_FREQ_COMP_I       =       1768,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_00_I       =       1769,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_01_I       =       1770,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_02_I       =       1771,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_03_I       =       1772,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_04_I       =       1773,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_05_I       =       1774,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_06_I       =       1775,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_07_I       =       1776,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_08_I       =       1777,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_09_I       =       1778,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_10_I       =       1779,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_11_I       =       1780,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_12_I       =       1781,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_13_I       =       1782,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_14_I       =       1783,
  NVI_GSM_1900_TX_BURST_RAMP_UP_INDEX_15_I       =       1784,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_00_I     =       1785,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_01_I     =       1786,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_02_I     =       1787,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_03_I     =       1788,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_04_I     =       1789,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_05_I     =       1790,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_06_I     =       1791,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_07_I     =       1792,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_08_I     =       1793,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_09_I     =       1794,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_10_I     =       1795,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_11_I     =       1796,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_12_I     =       1797,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_13_I     =       1798,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_14_I     =       1799,
  NVI_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_15_I     =       1800,
  NVI_GSM_1900_PA_GAIN_SLOPE_I                   =       1801,
  NVI_GSM_1900_TX_FREQ_COMP_I                    =       1802,
  NVI_GSM_1900_VBATT_HI_PA_COMP_I                =       1803,
  NVI_GSM_1900_VBATT_LO_PA_COMP_I                =       1804,
  NVI_GSM_1900_PA_START_TIME_OFFSET_I            =       1805,
  NVI_GSM_1900_PA_STOP_TIME_OFFSET_I             =       1806,
  NVI_GSM_1900_GAINRANGE_SWITCHPOINTS_I          =       1807,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_00_I           =       1808,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_01_I           =       1809,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_02_I           =       1810,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_03_I           =       1811,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_04_I           =       1812,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_05_I           =       1813,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_06_I           =       1814,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_07_I           =       1815,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_08_I           =       1816,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_09_I           =       1817,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_10_I           =       1818,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_11_I           =       1819,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_12_I           =       1820,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_13_I           =       1821,
  NVI_GSM_1900_PA_TEMP_COMP_INDEX_14_I           =       1822,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_14_I            =       1823,
  NVI_GSM_850_CAL_ARFCN_I                        =       1824,
  NVI_GSM_850_RX_GAIN_RANGE_1_FREQ_COMP_I        =       1825,
  NVI_GSM_850_RX_GAIN_RANGE_2_FREQ_COMP_I        =       1826,
  NVI_GSM_850_RX_GAIN_RANGE_3_FREQ_COMP_I        =       1827,
  NVI_GSM_850_RX_GAIN_RANGE_4_FREQ_COMP_I        =       1828,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_00_I        =       1829,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_01_I        =       1830,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_02_I        =       1831,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_03_I        =       1832,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_04_I        =       1833,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_05_I        =       1834,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_06_I        =       1835,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_07_I        =       1836,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_08_I        =       1837,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_09_I        =       1838,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_10_I        =       1839,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_11_I        =       1840,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_12_I        =       1841,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_13_I        =       1842,
  NVI_GSM_850_TX_BURST_RAMP_UP_INDEX_14_I        =       1843,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_00_I      =       1844,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_01_I      =       1845,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_02_I      =       1846,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_03_I      =       1847,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_04_I      =       1848,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_05_I      =       1849,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_06_I      =       1850,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_07_I      =       1851,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_08_I      =       1852,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_09_I      =       1853,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_10_I      =       1854,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_11_I      =       1855,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_12_I      =       1856,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_13_I      =       1857,
  NVI_GSM_850_TX_BURST_RAMP_DOWN_INDEX_14_I      =       1858,
  NVI_GSM_850_PA_GAIN_SLOPE_I                    =       1859,
  NVI_GSM_850_TX_FREQ_COMP_I                     =       1860,
  NVI_GSM_850_VBATT_HI_PA_COMP_I                 =       1861,
  NVI_GSM_850_VBATT_LO_PA_COMP_I                 =       1862,
  NVI_GSM_850_PA_START_TIME_OFFSET_I             =       1863,
  NVI_GSM_850_PA_STOP_TIME_OFFSET_I              =       1864,
  NVI_GSM_850_GAINRANGE_SWITCHPOINTS_I           =       1865,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_00_I            =       1866,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_01_I            =       1867,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_02_I            =       1868,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_03_I            =       1869,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_04_I            =       1870,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_05_I            =       1871,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_06_I            =       1872,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_07_I            =       1873,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_08_I            =       1874,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_09_I            =       1875,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_10_I            =       1876,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_11_I            =       1877,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_12_I            =       1878,
  NVI_GSM_850_PA_TEMP_COMP_INDEX_13_I            =       1879,
  NVI_WCDMA_1900_VGA_GAIN_OFFSET_I               =       1880,
  NVI_WCDMA_1900_VGA_GAIN_OFFSET_VS_FREQ_I       =       1881,
  NVI_WCDMA_1900_VGA_GAIN_OFFSET_VS_TEMP_I       =       1882,
  NVI_WCDMA_1900_LNA_RANGE_RISE_2_I              =       1883,
  NVI_WCDMA_1900_LNA_RANGE_RISE_3_I              =       1884,
  NVI_WCDMA_1900_LNA_RANGE_FALL_2_I              =       1885,
  NVI_WCDMA_1900_LNA_RANGE_FALL_3_I              =       1886,
  NVI_WCDMA_1900_IM_LEVEL_2_I                    =       1887,
  NVI_WCDMA_1900_IM_LEVEL_3_I                    =       1888,
  NVI_WCDMA_1900_LNA_RANGE_OFFSET_2_I            =       1889,
  NVI_WCDMA_1900_LNA_RANGE_OFFSET_3_I            =       1890,
  NVI_WCDMA_1900_LNA_OFFSET_VS_FREQ_2_I          =       1891,
  NVI_WCDMA_1900_LNA_OFFSET_VS_FREQ_3_I          =       1892,
  NVI_WCDMA_1900_IM2_I_VALUE_I                   =       1893,
  NVI_WCDMA_1900_IM2_Q_VALUE_I                   =       1894,
  NVI_WCDMA_1900_IM2_TRANSCONDUCTOR_VALUE_I      =       1895,
  NVI_WCDMA_1900_RX_AGC_MIN_2_I                  =       1896,
  NVI_WCDMA_1900_RX_AGC_MIN_3_I                  =       1897,
  NVI_WCDMA_1900_MAX_TX_POWER_I                  =       1898,
  NVI_WCDMA_1900_OUT_OF_SERVICE_THRESH_I         =       1899,
  NVI_WCDMA_1900_LNA_RANGE_RISE_I                =       1900,
  NVI_WCDMA_1900_LNA_RANGE_FALL_I                =       1901,
  NVI_WCDMA_1900_IM_LEVEL_I                      =       1902,
  NVI_WCDMA_1900_NONBYPASS_TIMER_I               =       1903,
  NVI_WCDMA_1900_BYPASS_TIMER_I                  =       1904,
  NVI_WCDMA_1900_LNA_RANGE_OFFSET_I              =       1905,
  NVI_WCDMA_1900_LNA_OFFSET_VS_FREQ_I            =       1906,
  NVI_WCDMA_1900_RX_AGC_MIN_I                    =       1907,
  NVI_WCDMA_1900_RX_AGC_MAX_I                    =       1908,
  NVI_WCDMA_1900_AGC_PHASE_OFFSET_I              =       1909,
  NVI_WCDMA_1900_TX_LIN_MASTER_0_I               =       1910,
  NVI_WCDMA_1900_TX_LIN_MASTER_1_I               =       1911,
  NVI_WCDMA_1900_TX_COMP_VS_FREQ_0_I             =       1912,
  NVI_WCDMA_1900_TX_COMP_VS_FREQ_1_I             =       1913,
  NVI_WCDMA_1900_TX_LIN_VS_TEMP_0_I              =       1914,
  NVI_WCDMA_1900_TX_LIN_VS_TEMP_1_I              =       1915,
  NVI_WCDMA_1900_TX_SLP_VS_TEMP_0_I              =       1916,
  NVI_WCDMA_1900_TX_SLP_VS_TEMP_1_I              =       1917,
  NVI_WCDMA_1900_R1_RISE_I                       =       1918,
  NVI_WCDMA_1900_R1_FALL_I                       =       1919,
  NVI_WCDMA_1900_TX_LIM_VS_TEMP_I                =       1920,
  NVI_WCDMA_1900_TX_LIM_VS_FREQ_I                =       1921,
  NVI_WCDMA_1900_ADJ_FACTOR_I                    =       1922,
  NVI_WCDMA_1900_EXP_HDET_VS_AGC_I               =       1923,
  NVI_WCDMA_1900_HDET_OFF_I                      =       1924,
  NVI_WCDMA_1900_HDET_SPN_I                      =       1925,
  NVI_WCDMA_1900_ENC_BTF_I                       =       1926,
  NVI_WCDMA_1900_AGC_PA_ON_RISE_DELAY_I          =       1927,
  NVI_WCDMA_1900_AGC_PA_ON_FALL_DELAY_I          =       1928,
  NVI_WCDMA_1900_AGC_TX_ON_RISE_DELAY_I          =       1929,
  NVI_WCDMA_1900_AGC_TX_ON_FALL_DELAY_I          =       1930,
  NVI_WCDMA_1900_AGC_UPDATE_TX_AGC_TIME_I        =       1931,
  NVI_WCDMA_800_VGA_GAIN_OFFSET_I                =       1932,
  NVI_WCDMA_800_VGA_GAIN_OFFSET_VS_FREQ_I        =       1933,
  NVI_WCDMA_800_VGA_GAIN_OFFSET_VS_TEMP_I        =       1934,
  NVI_WCDMA_800_LNA_RANGE_RISE_2_I               =       1935,
  NVI_WCDMA_800_LNA_RANGE_RISE_3_I               =       1936,
  NVI_WCDMA_800_LNA_RANGE_FALL_2_I               =       1937,
  NVI_WCDMA_800_LNA_RANGE_FALL_3_I               =       1938,
  NVI_WCDMA_800_IM_LEVEL_2_I                     =       1939,
  NVI_WCDMA_800_IM_LEVEL_3_I                     =       1940,
  NVI_WCDMA_800_LNA_RANGE_OFFSET_2_I             =       1941,
  NVI_WCDMA_800_LNA_RANGE_OFFSET_3_I             =       1942,
  NVI_WCDMA_800_LNA_OFFSET_VS_FREQ_2_I           =       1943,
  NVI_WCDMA_800_LNA_OFFSET_VS_FREQ_3_I           =       1944,
  NVI_WCDMA_800_IM2_I_VALUE_I                    =       1945,
  NVI_WCDMA_800_IM2_Q_VALUE_I                    =       1946,
  NVI_WCDMA_800_IM2_TRANSCONDUCTOR_VALUE_I       =       1947,
  NVI_WCDMA_800_RX_AGC_MIN_2_I                   =       1948,
  NVI_WCDMA_800_RX_AGC_MIN_3_I                   =       1949,
  NVI_WCDMA_800_MAX_TX_POWER_I                   =       1950,
  NVI_WCDMA_800_OUT_OF_SERVICE_THRESH_I          =       1951,
  NVI_WCDMA_800_LNA_RANGE_RISE_I                 =       1952,
  NVI_WCDMA_800_LNA_RANGE_FALL_I                 =       1953,
  NVI_WCDMA_800_IM_LEVEL_I                       =       1954,
  NVI_WCDMA_800_NONBYPASS_TIMER_I                =       1955,
  NVI_WCDMA_800_BYPASS_TIMER_I                   =       1956,
  NVI_WCDMA_800_LNA_RANGE_OFFSET_I               =       1957,
  NVI_WCDMA_800_LNA_OFFSET_VS_FREQ_I             =       1958,
  NVI_WCDMA_800_RX_AGC_MIN_I                     =       1959,
  NVI_WCDMA_800_RX_AGC_MAX_I                     =       1960,
  NVI_WCDMA_800_AGC_PHASE_OFFSET_I               =       1961,
  NVI_WCDMA_800_TX_LIN_MASTER_0_I                =       1962,
  NVI_WCDMA_800_TX_LIN_MASTER_1_I                =       1963,
  NVI_WCDMA_800_TX_COMP_VS_FREQ_0_I              =       1964,
  NVI_WCDMA_800_TX_COMP_VS_FREQ_1_I              =       1965,
  NVI_WCDMA_800_TX_LIN_VS_TEMP_0_I               =       1966,
  NVI_WCDMA_800_TX_LIN_VS_TEMP_1_I               =       1967,
  NVI_WCDMA_800_TX_SLP_VS_TEMP_0_I               =       1968,
  NVI_WCDMA_800_TX_SLP_VS_TEMP_1_I               =       1969,
  NVI_WCDMA_800_R1_RISE_I                        =       1970,
  NVI_WCDMA_800_R1_FALL_I                        =       1971,
  NVI_WCDMA_800_TX_LIM_VS_TEMP_I                 =       1972,
  NVI_WCDMA_800_TX_LIM_VS_FREQ_I                 =       1973,
  NVI_WCDMA_800_ADJ_FACTOR_I                     =       1974,
  NVI_WCDMA_800_EXP_HDET_VS_AGC_I                =       1975,
  NVI_WCDMA_800_HDET_OFF_I                       =       1976,
  NVI_WCDMA_800_HDET_SPN_I                       =       1977,
  NVI_WCDMA_800_ENC_BTF_I                        =       1978,
  NVI_WCDMA_800_AGC_PA_ON_RISE_DELAY_I           =       1979,
  NVI_WCDMA_800_AGC_PA_ON_FALL_DELAY_I           =       1980,
  NVI_WCDMA_800_AGC_TX_ON_RISE_DELAY_I           =       1981,
  NVI_WCDMA_800_AGC_TX_ON_FALL_DELAY_I           =       1982,
  NVI_WCDMA_800_AGC_UPDATE_TX_AGC_TIME_I         =       1983,
  NVI_GSM_TX_BURST_OFFSET_ADJ_I                  =       1984,
  NVI_WCDMA_PRACH_R1_RISE_OFFSET_I               =       1985,
  NVI_WCDMA_PRACH_R1_FALL_OFFSET_I               =       1986,
  NVI_WCDMA_1900_PRACH_R1_RISE_OFFSET_I          =       1987,
  NVI_WCDMA_1900_PRACH_R1_FALL_OFFSET_I          =       1988,
  NVI_WCDMA_800_PRACH_R1_RISE_OFFSET_I           =       1989,
  NVI_WCDMA_800_PRACH_R1_FALL_OFFSET_I           =       1990,
  NVI_IPV6_FAILOVER_CONFIG_I                     =       1991,
  NVI_UIM_USE_CAVE_FOR_AN_AUTH_I                 =       1992,
  NVI_MEID_I                                     =       1993,
  NVI_GPS1_CALL_RELATED_I                        =       1994,
  NVI_RF_ANTSEL_GSM_DEFAULT_I                    =       1995,
  NVI_RF_ANTSEL_GSM_850_TX_I                     =       1996,
  NVI_RF_ANTSEL_GSM_850_RX_I                     =       1997,
  NVI_RF_ANTSEL_GSM_900_TX_I                     =       1998,
  NVI_RF_ANTSEL_GSM_900_RX_I                     =       1999,
  NVI_RF_ANTSEL_GSM_1800_TX_I                    =       2000,
  NVI_RF_ANTSEL_GSM_1800_RX_I                    =       2001,
  NVI_RF_ANTSEL_GSM_1900_TX_I                    =       2002,
  NVI_RF_ANTSEL_GSM_1900_RX_I                    =       2003,
  NVI_RF_ANTSEL_UMTS_800_I                       =       2004,
  NVI_RF_ANTSEL_UMTS_1900_I                      =       2005,
  NVI_RF_ANTSEL_UMTS_2100_I                      =       2006,
  NVI_TCP_SACK_TIMESTAMP_ENABLED_I               =       2007,
  NVI_PRL_PREF_I                                 =       2008,
  NVI_AAGPS_DEFAULT_IP_PORT_I                    =       2009,
  NVI_AAGPS_3G_MO_LRSUPPORT_I                    =       2010,
  NVI_AAGPS_DEVELOPMENT_TEST_CONTROL_I           =       2011,
  NVI_DIAG_DEBUG_MAX_FILES_I                     =       2012,
  NVI_WCDMA_800_PA_COMPENSATE_UP_I               =       2013,
  NVI_WCDMA_800_PA_COMPENSATE_DOWN_I             =       2014,
  NVI_WCDMA_1900_PA_COMPENSATE_UP_I              =       2015,
  NVI_WCDMA_1900_PA_COMPENSATE_DOWN_I            =       2016,
  NVI_WCDMA_800_PA_GAIN_UP_TIME_I                =       2017,
  NVI_WCDMA_800_PA_GAIN_DOWN_TIME_I              =       2018,
  NVI_WCDMA_1900_PA_GAIN_UP_TIME_I               =       2019,
  NVI_WCDMA_1900_PA_GAIN_DOWN_TIME_I             =       2020,
  NVI_WCDMA_TX_CAL_CHAN_I                        =       2021,
  NVI_WCDMA_RX_CAL_CHAN_I                        =       2022,
  NVI_WCDMA_1900_TX_CAL_CHAN_I                   =       2023,
  NVI_WCDMA_1900_RX_CAL_CHAN_I                   =       2024,
  NVI_WCDMA_800_TX_CAL_CHAN_I                    =       2025,
  NVI_WCDMA_800_RX_CAL_CHAN_I                    =       2026,
  NVI_BREW_CARRIER_ID_I                          =       2027,
  NVI_BREW_PLATFORM_ID_I                         =       2028,
  NVI_BREW_BKEY_I                                =       2029,
  NVI_BREW_SERVER_I                              =       2030,
  NVI_BREW_DOWNLOAD_FLAGS_I                      =       2031,
  NVI_BREW_AUTH_POLICY_I                         =       2032,
  NVI_MEID_CD_I                                  =       2033,
  NVI_BREW_PRIVACY_POLICY_I                      =       2034,
  NVI_GPS1_VX_LCS_AGENT_I                        =       2035,
  NVI_BREW_SUBSCRIBER_ID_I                       =       2036,
  NVI_GPS1_VX_APP_TRUSTED_SETTINGS_I             =       2037,
  NVI_WCDMA_RX_DELAY_I                           =       2038,
  NVI_GPS1_VX_NI_TELESERVICE_ID_I                =       2039,
  NVI_WCDMA_800_RX_DELAY_I                       =       2040,
  NVI_GPS1_VX_LCS_AGENT_PREV6_ONLY_I             =       2041,
  NVI_WCDMA_1900_RX_DELAY_I                      =       2042,
  NVI_GPS1_VX_MO_MAX_DURATION_I                  =       2043,
  NVI_AAGPS_DEVELOPMENT_TEST_CONTROL2_I          =       2044,
  NVI_GPS1_OOS_OPERATION_PREF_I                  =       2045,
  NVI_AAGPS_DEVELOPMENT_TEST_CONTROL3_I          =       2046,
  NVI_GPS1_VX_GPS_DURING_VOICE_CALL_I            =       2047,
  NVI_AAGPS_DEVELOPMENT_TEST_CONTROL4_I          =       2048,
  NVI_WLAN_TECH_PREF_I                           =       2049,
  NVI_AAGPS_DEVELOPMENT_TEST_CONTROL5_I          =       2050,
  NVI_DS_UCSD_RLP_ADM_IDLE_I                     =       2051,
  NVI_PPP_CCP_REJECT_I                           =       2052,
  NVI_WLAN_SCAN_PREF_I                           =       2053,
  NVI_HDRBCMCS_OVHD_PERIOD_I                     =       2054,
  NVI_HDRBCMCS_PAGE_REG_PERIOD_I                 =       2055,
  NVI_HDRBCMCS_DYN_REG_PERIOD_I                  =       2056,
  NVI_HDRBCMCS_MONITOR_PERIOD_I                  =       2057,
  NVI_HDRBCMCS_NUM_PERIODS_I                     =       2058,
  NVI_WCDMA_TX_LIN_MASTER_2_I                    =       2059,
  NVI_WCDMA_TX_LIN_MASTER_3_I                    =       2060,
  NVI_WCDMA_TX_COMP_VS_FREQ_2_I                  =       2061,
  NVI_WCDMA_TX_COMP_VS_FREQ_3_I                  =       2062,
  NVI_WCDMA_TX_LIN_VS_TEMP_2_I                   =       2063,
  NVI_WCDMA_TX_LIN_VS_TEMP_3_I                   =       2064,
  NVI_WCDMA_TX_SLP_VS_TEMP_2_I                   =       2065,
  NVI_WCDMA_TX_SLP_VS_TEMP_3_I                   =       2066,
  NVI_WCDMA_R2_RISE_I                            =       2067,
  NVI_WCDMA_R2_FALL_I                            =       2068,
  NVI_WCDMA_R3_RISE_I                            =       2069,
  NVI_WCDMA_R3_FALL_I                            =       2070,
  NVI_PA_COMPENSATE_UP_R2_I                      =       2071,
  NVI_PA_COMPENSATE_DOWN_R2_I                    =       2072,
  NVI_PA_COMPENSATE_UP_R3_I                      =       2073,
  NVI_PA_COMPENSATE_DOWN_R3_I                    =       2074,
  NVI_WCDMA_PRACH_R2_RISE_OFFSET_I               =       2075,
  NVI_WCDMA_PRACH_R2_FALL_OFFSET_I               =       2076,
  NVI_WCDMA_PRACH_R3_RISE_OFFSET_I               =       2077,
  NVI_WCDMA_PRACH_R3_FALL_OFFSET_I               =       2078,
  NVI_WCDMA_PA_RANGE_MAP_I                       =       2079,
  NVI_WCDMA_1900_TX_LIN_MASTER_2_I               =       2080,
  NVI_WCDMA_1900_TX_LIN_MASTER_3_I               =       2081,
  NVI_WCDMA_1900_TX_COMP_VS_FREQ_2_I             =       2082,
  NVI_WCDMA_1900_TX_COMP_VS_FREQ_3_I             =       2083,
  NVI_WCDMA_1900_TX_LIN_VS_TEMP_2_I              =       2084,
  NVI_WCDMA_1900_TX_LIN_VS_TEMP_3_I              =       2085,
  NVI_WCDMA_1900_TX_SLP_VS_TEMP_2_I              =       2086,
  NVI_WCDMA_1900_TX_SLP_VS_TEMP_3_I              =       2087,
  NVI_WCDMA_1900_R2_RISE_I                       =       2088,
  NVI_WCDMA_1900_R2_FALL_I                       =       2089,
  NVI_WCDMA_1900_R3_RISE_I                       =       2090,
  NVI_WCDMA_1900_R3_FALL_I                       =       2091,
  NVI_WCDMA_1900_PA_COMPENSATE_UP_R2_I           =       2092,
  NVI_WCDMA_1900_PA_COMPENSATE_DOWN_R2_I         =       2093,
  NVI_WCDMA_1900_PA_COMPENSATE_UP_R3_I           =       2094,
  NVI_WCDMA_1900_PA_COMPENSATE_DOWN_R3_I         =       2095,
  NVI_WCDMA_1900_TX_ROT_ANGLE_PA_STATE_00_I      =       2096,
  NVI_WCDMA_1900_TX_ROT_ANGLE_PA_STATE_01_I      =       2097,
  NVI_WCDMA_1900_TX_ROT_ANGLE_PA_STATE_10_I      =       2098,
  NVI_WCDMA_1900_TX_ROT_ANGLE_PA_STATE_11_I      =       2099,
  NVI_WCDMA_1900_PRACH_R2_RISE_OFFSET_I          =       2100,
  NVI_WCDMA_1900_PRACH_R2_FALL_OFFSET_I          =       2101,
  NVI_WCDMA_1900_PRACH_R3_RISE_OFFSET_I          =       2102,
  NVI_WCDMA_1900_PRACH_R3_FALL_OFFSET_I          =       2103,
  NVI_WCDMA_1900_PA_RANGE_MAP_I                  =       2104,
  NVI_WCDMA_800_TX_LIN_MASTER_2_I                =       2105,
  NVI_WCDMA_800_TX_LIN_MASTER_3_I                =       2106,
  NVI_WCDMA_800_TX_COMP_VS_FREQ_2_I              =       2107,
  NVI_WCDMA_800_TX_COMP_VS_FREQ_3_I              =       2108,
  NVI_WCDMA_800_TX_LIN_VS_TEMP_2_I               =       2109,
  NVI_WCDMA_800_TX_LIN_VS_TEMP_3_I               =       2110,
  NVI_WCDMA_800_TX_SLP_VS_TEMP_2_I               =       2111,
  NVI_WCDMA_800_TX_SLP_VS_TEMP_3_I               =       2112,
  NVI_WCDMA_800_R2_RISE_I                        =       2113,
  NVI_WCDMA_800_R2_FALL_I                        =       2114,
  NVI_WCDMA_800_R3_RISE_I                        =       2115,
  NVI_WCDMA_800_R3_FALL_I                        =       2116,
  NVI_WCDMA_800_PA_COMPENSATE_UP_R2_I            =       2117,
  NVI_WCDMA_800_PA_COMPENSATE_DOWN_R2_I          =       2118,
  NVI_WCDMA_800_PA_COMPENSATE_UP_R3_I            =       2119,
  NVI_WCDMA_800_PA_COMPENSATE_DOWN_R3_I          =       2120,
  NVI_WCDMA_800_TX_ROT_ANGLE_PA_STATE_00_I       =       2121,
  NVI_WCDMA_800_TX_ROT_ANGLE_PA_STATE_01_I       =       2122,
  NVI_WCDMA_800_TX_ROT_ANGLE_PA_STATE_10_I       =       2123,
  NVI_WCDMA_800_TX_ROT_ANGLE_PA_STATE_11_I       =       2124,
  NVI_WCDMA_800_PRACH_R2_RISE_OFFSET_I           =       2125,
  NVI_WCDMA_800_PRACH_R2_FALL_OFFSET_I           =       2126,
  NVI_WCDMA_800_PRACH_R3_RISE_OFFSET_I           =       2127,
  NVI_WCDMA_800_PRACH_R3_FALL_OFFSET_I           =       2128,
  NVI_WCDMA_800_PA_RANGE_MAP_I                   =       2129,
  NVI_BC0_VCO_COARSE_TUNE_2_I                    =       2130,
  NVI_BC1_VCO_COARSE_TUNE_2_I                    =       2131,
  NVI_BC3_VCO_COARSE_TUNE_2_I                    =       2132,
  NVI_BC4_VCO_COARSE_TUNE_2_I                    =       2133,
  NVI_BC5_VCO_COARSE_TUNE_2_I                    =       2134,
  NVI_BC6_VCO_COARSE_TUNE_2_I                    =       2135,
  NVI_WLAN_NET_SEL_MODE_PREF_I                   =       2136,
  NVI_EDGE_FEATURE_SUPPORT_I                     =       2137,
  NVI_EDGE_MULTISLOT_CLASS_I                     =       2138,
  NVI_EDGE_8PSK_POWER_CLASS_I                    =       2139,
  NVI_EDGE_8PSK_POWER_CAPABILITY_I               =       2140,
  NVI_GERAN_FEATURE_PACK_1_I                     =       2141,
  NVI_GSM_AMAM_MAX_PWR_I                         =       2142,
  NVI_GSM_AMAM_MIN_PWR_I                         =       2143,
  NVI_DCS_AMAM_MAX_PWR_I                         =       2144,
  NVI_DCS_AMAM_MIN_PWR_I                         =       2145,
  NVI_GSM_850_AMAM_MAX_PWR_I                     =       2146,
  NVI_GSM_850_AMAM_MIN_PWR_I                     =       2147,
  NVI_GSM_1900_AMAM_MAX_PWR_I                    =       2148,
  NVI_GSM_1900_AMAM_MIN_PWR_I                    =       2149,
  NVI_GSM_AMAM_MASTER_TBL_SEG1_F1_I              =       2150,
  NVI_GSM_AMAM_MASTER_TBL_SEG2_F1_I              =       2151,
  NVI_GSM_AMAM_MASTER_TBL_SEG3_F1_I              =       2152,
  NVI_GSM_AMAM_MASTER_TBL_SEG4_F1_I              =       2153,
  NVI_GSM_AMAM_MASTER_TBL_SEG5_F1_I              =       2154,
  NVI_GSM_AMAM_MASTER_TBL_SEG6_F1_I              =       2155,
  NVI_GSM_AMAM_MASTER_TBL_SEG7_F1_I              =       2156,
  NVI_GSM_AMAM_MASTER_TBL_SEG8_F1_I              =       2157,
  NVI_DCS_AMAM_MASTER_TBL_SEG1_F1_I              =       2158,
  NVI_DCS_AMAM_MASTER_TBL_SEG2_F1_I              =       2159,
  NVI_DCS_AMAM_MASTER_TBL_SEG3_F1_I              =       2160,
  NVI_DCS_AMAM_MASTER_TBL_SEG4_F1_I              =       2161,
  NVI_DCS_AMAM_MASTER_TBL_SEG5_F1_I              =       2162,
  NVI_DCS_AMAM_MASTER_TBL_SEG6_F1_I              =       2163,
  NVI_DCS_AMAM_MASTER_TBL_SEG7_F1_I              =       2164,
  NVI_DCS_AMAM_MASTER_TBL_SEG8_F1_I              =       2165,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG1_F1_I          =       2166,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG2_F1_I          =       2167,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG3_F1_I          =       2168,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG4_F1_I          =       2169,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG5_F1_I          =       2170,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG6_F1_I          =       2171,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG7_F1_I          =       2172,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG8_F1_I          =       2173,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG1_F1_I         =       2174,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG2_F1_I         =       2175,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG3_F1_I         =       2176,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG4_F1_I         =       2177,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG5_F1_I         =       2178,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG6_F1_I         =       2179,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG7_F1_I         =       2180,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG8_F1_I         =       2181,
  NVI_GSM_AMAM_MASTER_TBL_SEG1_F2_I              =       2182,
  NVI_GSM_AMAM_MASTER_TBL_SEG2_F2_I              =       2183,
  NVI_GSM_AMAM_MASTER_TBL_SEG3_F2_I              =       2184,
  NVI_GSM_AMAM_MASTER_TBL_SEG4_F2_I              =       2185,
  NVI_GSM_AMAM_MASTER_TBL_SEG5_F2_I              =       2186,
  NVI_GSM_AMAM_MASTER_TBL_SEG6_F2_I              =       2187,
  NVI_GSM_AMAM_MASTER_TBL_SEG7_F2_I              =       2188,
  NVI_GSM_AMAM_MASTER_TBL_SEG8_F2_I              =       2189,
  NVI_DCS_AMAM_MASTER_TBL_SEG1_F2_I              =       2190,
  NVI_DCS_AMAM_MASTER_TBL_SEG2_F2_I              =       2191,
  NVI_DCS_AMAM_MASTER_TBL_SEG3_F2_I              =       2192,
  NVI_DCS_AMAM_MASTER_TBL_SEG4_F2_I              =       2193,
  NVI_DCS_AMAM_MASTER_TBL_SEG5_F2_I              =       2194,
  NVI_DCS_AMAM_MASTER_TBL_SEG6_F2_I              =       2195,
  NVI_DCS_AMAM_MASTER_TBL_SEG7_F2_I              =       2196,
  NVI_DCS_AMAM_MASTER_TBL_SEG8_F2_I              =       2197,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG1_F2_I          =       2198,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG2_F2_I          =       2199,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG3_F2_I          =       2200,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG4_F2_I          =       2201,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG5_F2_I          =       2202,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG6_F2_I          =       2203,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG7_F2_I          =       2204,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG8_F2_I          =       2205,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG1_F2_I         =       2206,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG2_F2_I         =       2207,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG3_F2_I         =       2208,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG4_F2_I         =       2209,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG5_F2_I         =       2210,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG6_F2_I         =       2211,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG7_F2_I         =       2212,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG8_F2_I         =       2213,
  NVI_GSM_AMPM_MASTER_TBL_SEG1_F1_I              =       2214,
  NVI_GSM_AMPM_MASTER_TBL_SEG2_F1_I              =       2215,
  NVI_GSM_AMPM_MASTER_TBL_SEG3_F1_I              =       2216,
  NVI_GSM_AMPM_MASTER_TBL_SEG4_F1_I              =       2217,
  NVI_GSM_AMPM_MASTER_TBL_SEG5_F1_I              =       2218,
  NVI_GSM_AMPM_MASTER_TBL_SEG6_F1_I              =       2219,
  NVI_GSM_AMPM_MASTER_TBL_SEG7_F1_I              =       2220,
  NVI_GSM_AMPM_MASTER_TBL_SEG8_F1_I              =       2221,
  NVI_DCS_AMPM_MASTER_TBL_SEG1_F1_I              =       2222,
  NVI_DCS_AMPM_MASTER_TBL_SEG2_F1_I              =       2223,
  NVI_DCS_AMPM_MASTER_TBL_SEG3_F1_I              =       2224,
  NVI_DCS_AMPM_MASTER_TBL_SEG4_F1_I              =       2225,
  NVI_DCS_AMPM_MASTER_TBL_SEG5_F1_I              =       2226,
  NVI_DCS_AMPM_MASTER_TBL_SEG6_F1_I              =       2227,
  NVI_DCS_AMPM_MASTER_TBL_SEG7_F1_I              =       2228,
  NVI_DCS_AMPM_MASTER_TBL_SEG8_F1_I              =       2229,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG1_F1_I          =       2230,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG2_F1_I          =       2231,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG3_F1_I          =       2232,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG4_F1_I          =       2233,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG5_F1_I          =       2234,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG6_F1_I          =       2235,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG7_F1_I          =       2236,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG8_F1_I          =       2237,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG1_F1_I         =       2238,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG2_F1_I         =       2239,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG3_F1_I         =       2240,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG4_F1_I         =       2241,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG5_F1_I         =       2242,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG6_F1_I         =       2243,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG7_F1_I         =       2244,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG8_F1_I         =       2245,
  NVI_GSM_AMPM_MASTER_TBL_SEG1_F2_I              =       2246,
  NVI_GSM_AMPM_MASTER_TBL_SEG2_F2_I              =       2247,
  NVI_GSM_AMPM_MASTER_TBL_SEG3_F2_I              =       2248,
  NVI_GSM_AMPM_MASTER_TBL_SEG4_F2_I              =       2249,
  NVI_GSM_AMPM_MASTER_TBL_SEG5_F2_I              =       2250,
  NVI_GSM_AMPM_MASTER_TBL_SEG6_F2_I              =       2251,
  NVI_GSM_AMPM_MASTER_TBL_SEG7_F2_I              =       2252,
  NVI_GSM_AMPM_MASTER_TBL_SEG8_F2_I              =       2253,
  NVI_DCS_AMPM_MASTER_TBL_SEG1_F2_I              =       2254,
  NVI_DCS_AMPM_MASTER_TBL_SEG2_F2_I              =       2255,
  NVI_DCS_AMPM_MASTER_TBL_SEG3_F2_I              =       2256,
  NVI_DCS_AMPM_MASTER_TBL_SEG4_F2_I              =       2257,
  NVI_DCS_AMPM_MASTER_TBL_SEG5_F2_I              =       2258,
  NVI_DCS_AMPM_MASTER_TBL_SEG6_F2_I              =       2259,
  NVI_DCS_AMPM_MASTER_TBL_SEG7_F2_I              =       2260,
  NVI_DCS_AMPM_MASTER_TBL_SEG8_F2_I              =       2261,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG1_F2_I          =       2262,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG2_F2_I          =       2263,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG3_F2_I          =       2264,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG4_F2_I          =       2265,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG5_F2_I          =       2266,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG6_F2_I          =       2267,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG7_F2_I          =       2268,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG8_F2_I          =       2269,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG1_F2_I         =       2270,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG2_F2_I         =       2271,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG3_F2_I         =       2272,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG4_F2_I         =       2273,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG5_F2_I         =       2274,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG6_F2_I         =       2275,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG7_F2_I         =       2276,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG8_F2_I         =       2277,
  NVI_GSM_CALPATH_RSB_A_G1_I                     =       2278,
  NVI_GSM_CALPATH_RSB_B_G1_I                     =       2279,
  NVI_GSM_850_CALPATH_RSB_A_G1_I                 =       2280,
  NVI_GSM_850_CALPATH_RSB_B_G1_I                 =       2281,
  NVI_DCS_CALPATH_RSB_A_G1_I                     =       2282,
  NVI_DCS_CALPATH_RSB_B_G1_I                     =       2283,
  NVI_GSM_1900_CALPATH_RSB_A_G1_I                =       2284,
  NVI_GSM_1900_CALPATH_RSB_B_G1_I                =       2285,
  NVI_GSM_CALPATH_RSB_A_G2_I                     =       2286,
  NVI_GSM_CALPATH_RSB_B_G2_I                     =       2287,
  NVI_GSM_850_CALPATH_RSB_A_G2_I                 =       2288,
  NVI_GSM_850_CALPATH_RSB_B_G2_I                 =       2289,
  NVI_DCS_CALPATH_RSB_A_G2_I                     =       2290,
  NVI_DCS_CALPATH_RSB_B_G2_I                     =       2291,
  NVI_GSM_1900_CALPATH_RSB_A_G2_I                =       2292,
  NVI_GSM_1900_CALPATH_RSB_B_G2_I                =       2293,
  NVI_GSM_AMAM_GAIN_LOW_TEMP_I                   =       2294,
  NVI_GSM_AMAM_DC_LOW_TEMP_I                     =       2295,
  NVI_GSM_AMAM_GAIN_HIGH_TEMP_I                  =       2296,
  NVI_GSM_AMAM_DC_HIGH_TEMP_I                    =       2297,
  NVI_GSM_AMAM_GAIN_NOM_TEMP_I                   =       2298,
  NVI_GSM_AMAM_DC_NOM_TEMP_I                     =       2299,
  NVI_GSM_850_AMAM_GAIN_LOW_TEMP_I               =       2300,
  NVI_GSM_850_AMAM_DC_LOW_TEMP_I                 =       2301,
  NVI_GSM_850_AMAM_GAIN_HIGH_TEMP_I              =       2302,
  NVI_GSM_850_AMAM_DC_HIGH_TEMP_I                =       2303,
  NVI_GSM_850_AMAM_GAIN_NOM_TEMP_I               =       2304,
  NVI_GSM_850_AMAM_DC_NOM_TEMP_I                 =       2305,
  NVI_DCS_AMAM_GAIN_LOW_TEMP_I                   =       2306,
  NVI_DCS_AMAM_DC_LOW_TEMP_I                     =       2307,
  NVI_DCS_AMAM_GAIN_HIGH_TEMP_I                  =       2308,
  NVI_DCS_AMAM_DC_HIGH_TEMP_I                    =       2309,
  NVI_DCS_AMAM_GAIN_NOM_TEMP_I                   =       2310,
  NVI_DCS_AMAM_DC_NOM_TEMP_I                     =       2311,
  NVI_GSM_1900_AMAM_GAIN_LOW_TEMP_I              =       2312,
  NVI_GSM_1900_AMAM_DC_LOW_TEMP_I                =       2313,
  NVI_GSM_1900_AMAM_GAIN_HIGH_TEMP_I             =       2314,
  NVI_GSM_1900_AMAM_DC_HIGH_TEMP_I               =       2315,
  NVI_GSM_1900_AMAM_GAIN_NOM_TEMP_I              =       2316,
  NVI_GSM_1900_AMAM_DC_NOM_TEMP_I                =       2317,
  NVI_GSM_AMAM_ARFCN_I                           =       2318,
  NVI_DCS_AMAM_ARFCN_I                           =       2319,
  NVI_GSM_850_AMAM_ARFCN_I                       =       2320,
  NVI_GSM_1900_AMAM_ARFCN_I                      =       2321,
  NVI_ABNORMAL_EXIT_COUNT_I                      =       2322,
  NVI_WCDMA_PA_RANGE_FOR_DVS_I                   =       2323,
  NVI_WCDMA_PA_COMPENSATE_UP_WITH_DVS_I          =       2324,
  NVI_WCDMA_PA_COMPENSATE_DN_WITH_DVS_I          =       2325,
  NVI_WCDMA_1900_PA_RANGE_FOR_DVS_I              =       2326,
  NVI_WCDMA_1900_PA_COMPENSATE_UP_WITH_DVS_I     =       2327,
  NVI_WCDMA_1900_PA_COMPENSATE_DN_WITH_DVS_I     =       2328,
  NVI_WCDMA_800_PA_RANGE_FOR_DVS_I               =       2329,
  NVI_WCDMA_800_PA_COMPENSATE_UP_WITH_DVS_I      =       2330,
  NVI_WCDMA_800_PA_COMPENSATE_DN_WITH_DVS_I      =       2331,
  NVI_WCDMA_MAX_PWR_BACKOFF_VOLTAGES_I           =       2332,
  NVI_WCDMA_MAX_PWR_BACKOFF_VOLT1_I              =       2333,
  NVI_WCDMA_MAX_PWR_BACKOFF_VOLT2_I              =       2334,
  NVI_WCDMA_MAX_PWR_BACKOFF_VOLT3_I              =       2335,
  NVI_WCDMA_1900_MAX_PWR_BACKOFF_VOLTAGES_I      =       2336,
  NVI_WCDMA_1900_MAX_PWR_BACKOFF_VOLT1_I         =       2337,
  NVI_WCDMA_1900_MAX_PWR_BACKOFF_VOLT2_I         =       2338,
  NVI_WCDMA_1900_MAX_PWR_BACKOFF_VOLT3_I         =       2339,
  NVI_WCDMA_800_MAX_PWR_BACKOFF_VOLTAGES_I       =       2340,
  NVI_WCDMA_800_MAX_PWR_BACKOFF_VOLT1_I          =       2341,
  NVI_WCDMA_800_MAX_PWR_BACKOFF_VOLT2_I          =       2342,
  NVI_WCDMA_800_MAX_PWR_BACKOFF_VOLT3_I          =       2343,
  NVI_WCDMA_HS_R1_RISE_I                         =       2344,
  NVI_WCDMA_HS_R1_FALL_I                         =       2345,
  NVI_WCDMA_HS_R2_RISE_I                         =       2346,
  NVI_WCDMA_HS_R2_FALL_I                         =       2347,
  NVI_WCDMA_HS_R3_RISE_I                         =       2348,
  NVI_WCDMA_HS_R3_FALL_I                         =       2349,
  NVI_WCDMA_1900_HS_R1_RISE_I                    =       2350,
  NVI_WCDMA_1900_HS_R1_FALL_I                    =       2351,
  NVI_WCDMA_1900_HS_R2_RISE_I                    =       2352,
  NVI_WCDMA_1900_HS_R2_FALL_I                    =       2353,
  NVI_WCDMA_1900_HS_R3_RISE_I                    =       2354,
  NVI_WCDMA_1900_HS_R3_FALL_I                    =       2355,
  NVI_WCDMA_800_HS_R1_RISE_I                     =       2356,
  NVI_WCDMA_800_HS_R1_FALL_I                     =       2357,
  NVI_WCDMA_800_HS_R2_RISE_I                     =       2358,
  NVI_WCDMA_800_HS_R2_FALL_I                     =       2359,
  NVI_WCDMA_800_HS_R3_RISE_I                     =       2360,
  NVI_WCDMA_800_HS_R3_FALL_I                     =       2361,
  NVI_GSM_AUTOCAL_PWR_DAC_F1_I                   =       2362,
  NVI_GSM_AMAM_DYNAMIC_RANGE_I                   =       2363,
  NVI_DCS_AUTOCAL_PWR_DAC_F1_I                   =       2364,
  NVI_DCS_AMAM_DYNAMIC_RANGE_I                   =       2365,
  NVI_GSM_850_AUTOCAL_PWR_DAC_F1_I               =       2366,
  NVI_GSM_850_AMAM_DYNAMIC_RANGE_I               =       2367,
  NVI_GSM_1900_AUTOCAL_PWR_DAC_F1_I              =       2368,
  NVI_GSM_1900_AMAM_DYNAMIC_RANGE_I              =       2369,
  NVI_GSM_CALPATH_RSB_I                          =       2370,
  NVI_DCS_CALPATH_RSB_I                          =       2371,
  NVI_GSM_850_CALPATH_RSB_I                      =       2372,
  NVI_GSM_1900_CALPATH_RSB_I                     =       2373,
  NVI_GSM_AMAM_SYS_GAIN_DC_CORR_I                =       2374,
  NVI_GSM_850_AMAM_SYS_GAIN_DC_CORR_I            =       2375,
  NVI_DCS_AMAM_SYS_GAIN_DC_CORR_I                =       2376,
  NVI_GSM_1900_AMAM_SYS_GAIN_DC_CORR_I           =       2377,
  NVI_GSM_AMAM_ARFCN_F1_I                        =       2378,
  NVI_DCS_AMAM_ARFCN_F1_I                        =       2379,
  NVI_GSM_850_AMAM_ARFCN_F1_I                    =       2380,
  NVI_GSM_1900_AMAM_ARFCN_F1_I                   =       2381,
  NVI_GSM_AMAM_ARFCN_F2_I                        =       2382,
  NVI_DCS_AMAM_ARFCN_F2_I                        =       2383,
  NVI_GSM_850_AMAM_ARFCN_F2_I                    =       2384,
  NVI_GSM_1900_AMAM_ARFCN_F2_I                   =       2385,
  NVI_GSM_AUTOCAL_PWR_DAC_F2_I                   =       2386,
  NVI_DCS_AUTOCAL_PWR_DAC_F2_I                   =       2387,
  NVI_GSM_850_AUTOCAL_PWR_DAC_F2_I               =       2388,
  NVI_GSM_1900_AUTOCAL_PWR_DAC_F2_I              =       2389,
  NVI_GSM_POLAR_PATH_DELAY_I                     =       2390,
  NVI_DCS_POLAR_PATH_DELAY_I                     =       2391,
  NVI_GSM_850_POLAR_PATH_DELAY_I                 =       2392,
  NVI_GSM_1900_POLAR_PATH_DELAY_I                =       2393,
  NVI_GSM_OPLL_BW_VAL_I                          =       2394,
  NVI_DCS_OPLL_BW_VAL_I                          =       2395,
  NVI_GSM_850_OPLL_BW_VAL_I                      =       2396,
  NVI_GSM_1900_OPLL_BW_VAL_I                     =       2397,
  NVI_GSM_BASEBAND_BW_VAL_I                      =       2398,
  NVI_DCS_BASEBAND_BW_VAL_I                      =       2399,
  NVI_GSM_850_BASEBAND_BW_VAL_I                  =       2400,
  NVI_GSM_1900_BASEBAND_BW_VAL_I                 =       2401,
  NVI_USB_CURRENT_DEVICE_I                       =       2402,
  NVI_GPS1_MIN_NUM_SVS_I                         =       2403,
  NVI_AAGPS_DEFAULT_ALLOW_RRC_I                  =       2404,
  NVI_AAGPS_DEFAULT_MTLR_GUARD_TIMER_I           =       2405,
  NVI_AAGPS_DEFAULT_SMLC_COMM_TIMEOUT_I          =       2406,
  NVI_AAGPS_DEFAULT_PRESUPL_UE_TIMER1_VALUE_I    =       2407,
  NVI_AAGPS_DEFAULT_PRESUPL_UE_TIMER2_VALUE_I    =       2408,
  NVI_AAGPS_DEFAULT_PRESUPL_UE_TIMER3_VALUE_I    =       2409,
  NVI_ACTIVE_EPZID_TYPE_I                        =       2410,
  NVI_C0_BC0_RX_CAL_CHAN_LRU_I                   =       2411,
  NVI_C1_BC0_RX_CAL_CHAN_LRU_I                   =       2412,
  NVI_C0_BC1_RX_CAL_CHAN_LRU_I                   =       2413,
  NVI_C1_BC1_RX_CAL_CHAN_LRU_I                   =       2414,
  NVI_C0_BC3_RX_CAL_CHAN_LRU_I                   =       2415,
  NVI_C1_BC3_RX_CAL_CHAN_LRU_I                   =       2416,
  NVI_C0_BC4_RX_CAL_CHAN_LRU_I                   =       2417,
  NVI_C1_BC4_RX_CAL_CHAN_LRU_I                   =       2418,
  NVI_C0_BC5_RX_CAL_CHAN_LRU_I                   =       2419,
  NVI_C1_BC5_RX_CAL_CHAN_LRU_I                   =       2420,
  NVI_C0_BC6_RX_CAL_CHAN_LRU_I                   =       2421,
  NVI_C1_BC6_RX_CAL_CHAN_LRU_I                   =       2422,
  NVI_CCM_VERSION_INFO_I                         =       2423,
  NVI_TURNOFF_COUNTER_I                          =       2424,
  NVI_POWERDOWN_STATUS_I                         =       2425,
  NVI_PHONE_POWER_ON_STATUS_I                    =       2426,
  NVI_FIRST_POWER_ON_TIME_I                      =       2427,
  NVI_SW_VERSION_INFO_I                          =       2428,
  NVI_SET_DATE_FORMAT_I                          =       2429,
  NVI_SET_TIME_FORMAT_I                          =       2430,
  NVI_SET_SHOW_TIME_I                            =       2431,
  NVI_SET_AUTO_TIME_I                            =       2432,
  NVI_SET_BUDDHIST_YEAR_I                        =       2433,
  NVI_BC0_HDR_P1_RISE_FALL_OFF_I                 =       2434,
  NVI_BC1_HDR_P1_RISE_FALL_OFF_I                 =       2435,
  NVI_BC3_HDR_P1_RISE_FALL_OFF_I                 =       2436,
  NVI_BC4_HDR_P1_RISE_FALL_OFF_I                 =       2437,
  NVI_BC5_HDR_P1_RISE_FALL_OFF_I                 =       2438,
  NVI_BC6_HDR_P1_RISE_FALL_OFF_I                 =       2439,
  NVI_DS_INCOMING_DATA_RLP_TIMEOUT_I             =       2440,
  NVI_DS_DEFAULT_INACTIVITY_RESTORE_TIMEOUT_I    =       2441,
  NVI_CHG_USB_NVDISABLE_VAL_I                    =       2442,
  NVI_CONSORTIUM_CONFIG_I                        =       2443,
  NVI_DS_MIP_RM_NAI_I                            =       2444,
  NVI_SMS_BMC_READING_PREF_I                     =       2445,
  NVI_VOC_HS_MIC_GAIN_ADJUST_I                   =       2446,
  NVI_AUTO_POWER_OFF_I                           =       2447,
  NVI_FAST_SEARCH_I                              =       2448,
  NVI_UPLOADMEDIA_ALBUM_MENU_ENABLED_I           =       2449,
  NVI_UPLOADMEDIA_ALBUM_ADDR_I                   =       2450,
  NVI_UPLOADMEDIA_POSTCARD_MENU_ENABLED_I        =       2451,
  NVI_UPLOADMEDIA_POSTCARD_SEPARATOR_I           =       2452,
  NVI_UPLOADMEDIA_POSTCARD_ADDR_I                =       2453,
  NVI_UPLOADMEDIA_POSTCARD_MAX_CHARACTERS_I      =       2454,
  NVI_UPLOADMEDIA_POSTCARD_MAX_RECIPIENTS_I      =       2455,
  NVI_UPLOADMEDIA_POSTCARD_AUTO_SAVE_I           =       2456,
  NVI_EMAIL_ACTIVE_PROFILE_I                     =       2457,
  NVI_BT_ACTIVE_I                                =       2458,
  NVI_BT_VISIBLE_I                               =       2459,
  NVI_BT_SAP_ENABLE_I                            =       2460,
  NVI_WCLOCK_AUTO_NITZ_ZONE_DST_I                =       2461,
  NVI_TIMEZONE_I                                 =       2462,
  NVI_HDRSCP_BCMCS_ENABLE_I                      =       2463,
  NVI_WCDMA_1800_VGA_GAIN_OFFSET_I               =       2464,
  NVI_WCDMA_1800_VGA_GAIN_OFFSET_VS_FREQ_I       =       2465,
  NVI_WCDMA_1800_VGA_GAIN_OFFSET_VS_TEMP_I       =       2466,
  NVI_WCDMA_1800_LNA_RANGE_RISE_2_I              =       2467,
  NVI_WCDMA_1800_LNA_RANGE_RISE_3_I              =       2468,
  NVI_WCDMA_1800_LNA_RANGE_FALL_2_I              =       2469,
  NVI_WCDMA_1800_LNA_RANGE_FALL_3_I              =       2470,
  NVI_WCDMA_1800_IM_LEVEL_2_I                    =       2471,
  NVI_WCDMA_1800_IM_LEVEL_3_I                    =       2472,
  NVI_WCDMA_1800_LNA_RANGE_OFFSET_2_I            =       2473,
  NVI_WCDMA_1800_LNA_RANGE_OFFSET_3_I            =       2474,
  NVI_WCDMA_1800_LNA_OFFSET_VS_FREQ_2_I          =       2475,
  NVI_WCDMA_1800_LNA_OFFSET_VS_FREQ_3_I          =       2476,
  NVI_WCDMA_1800_IM2_I_VALUE_I                   =       2477,
  NVI_WCDMA_1800_IM2_Q_VALUE_I                   =       2478,
  NVI_WCDMA_1800_IM2_TRANSCONDUCTOR_VALUE_I      =       2479,
  NVI_WCDMA_1800_RX_AGC_MIN_2_I                  =       2480,
  NVI_WCDMA_1800_RX_AGC_MIN_3_I                  =       2481,
  NVI_WCDMA_1800_LNA_RANGE_RISE_I                =       2482,
  NVI_WCDMA_1800_LNA_RANGE_FALL_I                =       2483,
  NVI_WCDMA_1800_IM_LEVEL_I                      =       2484,
  NVI_WCDMA_1800_NONBYPASS_TIMER_I               =       2485,
  NVI_WCDMA_1800_BYPASS_TIMER_I                  =       2486,
  NVI_WCDMA_1800_LNA_RANGE_OFFSET_I              =       2487,
  NVI_WCDMA_1800_LNA_OFFSET_VS_FREQ_I            =       2488,
  NVI_WCDMA_1800_RX_AGC_MIN_I                    =       2489,
  NVI_WCDMA_1800_RX_AGC_MAX_I                    =       2490,
  NVI_WCDMA_1800_AGC_PHASE_OFFSET_I              =       2491,
  NVI_WCDMA_1800_TX_LIN_MASTER_0_I               =       2492,
  NVI_WCDMA_1800_TX_LIN_MASTER_1_I               =       2493,
  NVI_WCDMA_1800_TX_LIN_MASTER_2_I               =       2494,
  NVI_WCDMA_1800_TX_LIN_MASTER_3_I               =       2495,
  NVI_WCDMA_1800_TX_COMP_VS_FREQ_0_I             =       2496,
  NVI_WCDMA_1800_TX_COMP_VS_FREQ_1_I             =       2497,
  NVI_WCDMA_1800_TX_COMP_VS_FREQ_2_I             =       2498,
  NVI_WCDMA_1800_TX_COMP_VS_FREQ_3_I             =       2499,
  NVI_WCDMA_1800_TX_LIN_VS_TEMP_0_I              =       2500,
  NVI_WCDMA_1800_TX_LIN_VS_TEMP_1_I              =       2501,
  NVI_WCDMA_1800_TX_LIN_VS_TEMP_2_I              =       2502,
  NVI_WCDMA_1800_TX_LIN_VS_TEMP_3_I              =       2503,
  NVI_WCDMA_1800_TX_SLP_VS_TEMP_0_I              =       2504,
  NVI_WCDMA_1800_TX_SLP_VS_TEMP_1_I              =       2505,
  NVI_WCDMA_1800_TX_SLP_VS_TEMP_2_I              =       2506,
  NVI_WCDMA_1800_TX_SLP_VS_TEMP_3_I              =       2507,
  NVI_WCDMA_1800_R1_RISE_I                       =       2508,
  NVI_WCDMA_1800_R1_FALL_I                       =       2509,
  NVI_WCDMA_1800_TX_LIM_VS_TEMP_I                =       2510,
  NVI_WCDMA_1800_TX_LIM_VS_FREQ_I                =       2511,
  NVI_WCDMA_1800_ADJ_FACTOR_I                    =       2512,
  NVI_WCDMA_1800_EXP_HDET_VS_AGC_I               =       2513,
  NVI_WCDMA_1800_HDET_OFF_I                      =       2514,
  NVI_WCDMA_1800_HDET_SPN_I                      =       2515,
  NVI_WCDMA_1800_MAX_TX_POWER_I                  =       2516,
  NVI_WCDMA_1800_OUT_OF_SERVICE_THRESH_I         =       2517,
  NVI_WCDMA_1800_ENC_BTF_I                       =       2518,
  NVI_WCDMA_1800_RX_DELAY_I                      =       2519,
  NVI_WCDMA_1800_AGC_PA_ON_RISE_DELAY_I          =       2520,
  NVI_WCDMA_1800_AGC_PA_ON_FALL_DELAY_I          =       2521,
  NVI_WCDMA_1800_AGC_TX_ON_RISE_DELAY_I          =       2522,
  NVI_WCDMA_1800_AGC_TX_ON_FALL_DELAY_I          =       2523,
  NVI_WCDMA_1800_AGC_UPDATE_TX_AGC_TIME_I        =       2524,
  NVI_WCDMA_1800_PA_GAIN_UP_TIME_I               =       2525,
  NVI_WCDMA_1800_PA_GAIN_DOWN_TIME_I             =       2526,
  NVI_WCDMA_1800_TX_ROT_ANGLE_PA_STATE_00_I      =       2527,
  NVI_WCDMA_1800_TX_ROT_ANGLE_PA_STATE_01_I      =       2528,
  NVI_WCDMA_1800_TX_ROT_ANGLE_PA_STATE_10_I      =       2529,
  NVI_WCDMA_1800_TX_ROT_ANGLE_PA_STATE_11_I      =       2530,
  NVI_RFR_VCO_COARSE_TUNING_1800_I               =       2531,
  NVI_WCDMA_1800_PA_COMPENSATE_UP_I              =       2532,
  NVI_WCDMA_1800_PA_COMPENSATE_DOWN_I            =       2533,
  NVI_WCDMA_1800_PRACH_R1_RISE_OFFSET_I          =       2534,
  NVI_WCDMA_1800_PRACH_R1_FALL_OFFSET_I          =       2535,
  NVI_WCDMA_1800_TX_CAL_CHAN_I                   =       2536,
  NVI_WCDMA_1800_RX_CAL_CHAN_I                   =       2537,
  NVI_WCDMA_1800_R2_RISE_I                       =       2538,
  NVI_WCDMA_1800_R2_FALL_I                       =       2539,
  NVI_WCDMA_1800_R3_RISE_I                       =       2540,
  NVI_WCDMA_1800_R3_FALL_I                       =       2541,
  NVI_WCDMA_1800_PA_COMPENSATE_UP_R2_I           =       2542,
  NVI_WCDMA_1800_PA_COMPENSATE_DOWN_R2_I         =       2543,
  NVI_WCDMA_1800_PA_COMPENSATE_UP_R3_I           =       2544,
  NVI_WCDMA_1800_PA_COMPENSATE_DOWN_R3_I         =       2545,
  NVI_WCDMA_1800_PRACH_R2_RISE_OFFSET_I          =       2546,
  NVI_WCDMA_1800_PRACH_R2_FALL_OFFSET_I          =       2547,
  NVI_WCDMA_1800_PRACH_R3_RISE_OFFSET_I          =       2548,
  NVI_WCDMA_1800_PRACH_R3_FALL_OFFSET_I          =       2549,
  NVI_WCDMA_1800_PA_RANGE_MAP_I                  =       2550,
  NVI_WCDMA_1800_PA_RANGE_FOR_DVS_I              =       2551,
  NVI_WCDMA_1800_PA_COMPENSATE_UP_WITH_DVS_I     =       2552,
  NVI_WCDMA_1800_PA_COMPENSATE_DN_WITH_DVS_I     =       2553,
  NVI_WCDMA_1800_MAX_PWR_BACKOFF_VOLTAGES_I      =       2554,
  NVI_WCDMA_1800_MAX_PWR_BACKOFF_VOLT1_I         =       2555,
  NVI_WCDMA_1800_MAX_PWR_BACKOFF_VOLT2_I         =       2556,
  NVI_WCDMA_1800_MAX_PWR_BACKOFF_VOLT3_I         =       2557,
  NVI_WCDMA_1800_HS_R1_RISE_I                    =       2558,
  NVI_WCDMA_1800_HS_R1_FALL_I                    =       2559,
  NVI_WCDMA_1800_HS_R2_RISE_I                    =       2560,
  NVI_WCDMA_1800_HS_R2_FALL_I                    =       2561,
  NVI_WCDMA_1800_HS_R3_RISE_I                    =       2562,
  NVI_WCDMA_1800_HS_R3_FALL_I                    =       2563,
  NVI_WCDMA_1800_DCH_AGC_UPDATE_TX_AGC_TIME_I    =       2564,
  NVI_WCDMA_1800_AGC_TX_ADJ_PDM_DELAY_I          =       2565,
  NVI_WCDMA_1900_DCH_AGC_UPDATE_TX_AGC_TIME_I    =       2566,
  NVI_WCDMA_1900_AGC_TX_ADJ_PDM_DELAY_I          =       2567,
  NVI_WCDMA_800_DCH_AGC_UPDATE_TX_AGC_TIME_I     =       2568,
  NVI_WCDMA_800_AGC_TX_ADJ_PDM_DELAY_I           =       2569,
  NVI_WCDMA_DCH_AGC_UPDATE_TX_AGC_TIME_I         =       2570,
  NVI_WCDMA_AGC_TX_ADJ_PDM_DELAY_I               =       2571,
  NVI_DS_SIP_RM_NAI_I                            =       2572,
  NVI_BAND_PREF_32_63_I                          =       2573,
  NVI_MMS_MAX_MSG_SIZE1_I                        =       2574,
  NVI_MMS_MAX_MSG_SIZE2_I                        =       2575,
  NVI_MMS_MAX_MSG_SIZE3_I                        =       2576,
  NVI_MMS_MAX_SIZE_USER_SELECTABLE_I             =       2577,
  NVI_MMS_ACTIVE_MAX_MSG_SIZE_I                  =       2578,
  NVI_MMS_ACTIVE_PROFILE_I                       =       2579,
  NVI_MMS_HIDE_NUMBER_I                          =       2580,
  NVI_MMS_REQ_DELIVERY_RPT_I                     =       2581,
  NVI_MMS_REQ_READ_RPT_I                         =       2582,
  NVI_MMS_PRIORITY_I                             =       2583,
  NVI_MMS_VALIDITY_PERIOD_I                      =       2584,
  NVI_MMS_SLIDE_DURATION_I                       =       2585,
  NVI_MMS_RETRIEVAL_HOME_I                       =       2586,
  NVI_MMS_RETRIEVAL_ROAM_I                       =       2587,
  NVI_MMS_DELIVERY_TIME_I                        =       2588,
  NVI_MMS_ALLOW_ANON_MSG_I                       =       2589,
  NVI_MMS_CREATION_MODE_I                        =       2590,
  NVI_MMS_AUTOSIG_I                              =       2591,
  NVI_MMS_AUTO_SAVE_I                            =       2592,
  NVI_MMS_ALLOW_READ_RPT_I                       =       2593,
  NVI_MMS_ALLOW_DELIVERY_RPT_I                   =       2594,
  NVI_MMS_MAX_RECIPIENTS_I                       =       2595,
  NVI_MMS_MAX_STORED_MMS_I                       =       2596,
  NVI_MMS_SIGNATURE_ACTIVE_TEMPLATE_I            =       2597,
  NVI_BT_FILELOCATION_ONDEVICE_I                 =       2598,
  NVI_WCDMA_UTRAN_TX_LIM_VS_TEMP_OFFSET_I        =       2599,
  NVI_WCDMA_1800_UTRAN_TX_LIM_VS_TEMP_OFFSET_I   =       2600,
  NVI_WCDMA_800_UTRAN_TX_LIM_VS_TEMP_OFFSET_I    =       2601,
  NVI_WCDMA_1900_UTRAN_TX_LIM_VS_TEMP_OFFSET_I   =       2602,
  NVI_SENDVIA_CFG_I                              =       2603,
  NVI_PU_PROMPT_ENABLED_I                        =       2604,
  NVI_USER_GREETING_I                            =       2605,
  NVI_SCREENSAVER_STYLE_I                        =       2606,
  NVI_SCREENSAVER_TIMEOUT_I                      =       2607,
  NVI_MESSAGING_FONT_I                           =       2608,
  NVI_SYNCML_DM_ACTIVEPROFILE_I                  =       2609,
  NVI_SYNCML_DS_ACTIVEPROFILE_I                  =       2610,
  NVI_SYNCML_SYNCDIRECTION_I                     =       2611,
  NVI_SYNCML_DATATOSYNC_I                        =       2612,
  NVI_SYNCML_APPSTOSYNC_I                        =       2613,
  NVI_MS_SMS_ACTIVE_PROFILE_I                    =       2614,
  NVI_MS_SMS_TEXT_SIZE_I                         =       2615,
  NVI_MS_SMS_AUTOHEADER_I                        =       2616,
  NVI_MS_SMS_AUTOSIGNATURE_I                     =       2617,
  NVI_MS_SMS_HEADER_ACTIVE_TEMPLATE_I            =       2618,
  NVI_MS_SMS_SIGNATURE_ACTIVE_TEMPLATE_I         =       2619,
  NVI_MS_SMS_AUTOSAVE_I                          =       2620,
  NVI_MS_SMS_AUTODELETE_I                        =       2621,
  NVI_MS_SMS_ALLOW_EMOTICONS_I                   =       2622,
  NVI_MS_SMS_MAX_SEGMENTS_I                      =       2623,
  NVI_MS_SMS_MAX_RECIPIENTS_I                    =       2624,
  NVI_MS_SMS_MAX_NUMBER_OF_SMS_I                 =       2625,
  NVI_MS_SMS_MAX_TEMPLATES_I                     =       2626,
  NVI_MS_SMS_OPCO_TYPES_SUPPORTED_I              =       2627,
  NVI_MS_SMS_SMSC_ADDRESS1_I                     =       2628,
  NVI_MS_SMS_SMSC_ADDRESS2_I                     =       2629,
  NVI_MS_SMS_SMSC_ADDRESS3_I                     =       2630,
  NVI_MS_SMS_SMSC_ADDRESS4_I                     =       2631,
  NVI_MS_SMS_SMSC_ADDRESS5_I                     =       2632,
  NVI_WCDMA_MAX_TX_POWER_DCH_PC4_I               =       2633,
  NVI_POC_SHOW_PT_MENU_I                         =       2634,
  NVI_POC_SERVER_IP1_I                           =       2635,
  NVI_POC_SERVER_IP2_I                           =       2636,
  NVI_POC_SERVER_PORT_I                          =       2637,
  NVI_POC_NAI_I                                  =       2638,
  NVI_POC_BILLING_SERVICE_I                      =       2639,
  NVI_POC_GLM_PASSWORD_I                         =       2640,
  NVI_POC_RTP_PORT_I                             =       2641,
  NVI_POC_SIP_PORT_I                             =       2642,
  NVI_POC_IS_SIG_COMP_I                          =       2643,
  NVI_POC_MAX_AUTH_RETRIES_I                     =       2644,
  NVI_POC_CONNECTION_PROFILE_I                   =       2645,
  NVI_RF_ANTSEL_UMTS_1800_I                      =       2646,
  NVI_IM_SHOW_MENU_I                             =       2647,
  NVI_IM_CONNECTION_PROFILE_I                    =       2648,
  NVI_IM_PRIMARY_IP_ADDR_I                       =       2649,
  NVI_IM_PRIMARY_PORT_I                          =       2650,
  NVI_IM_ENCODING_METHOD_I                       =       2651,
  NVI_IM_SERVER_NAME_I                           =       2652,
  NVI_IM_WV_VERSION_I                            =       2653,
  NVI_BC0_PA_DVS_VOLTAGE_I                       =       2654,
  NVI_BC1_PA_DVS_VOLTAGE_I                       =       2655,
  NVI_BC3_PA_DVS_VOLTAGE_I                       =       2656,
  NVI_BC4_PA_DVS_VOLTAGE_I                       =       2657,
  NVI_BC5_PA_DVS_VOLTAGE_I                       =       2658,
  NVI_BC6_PA_DVS_VOLTAGE_I                       =       2659,
  NVI_EXT_OP_LIST_ENTRY_VALID_I                  =       2660,
  NVI_EXT_OP_LIST_ENTRY_NAME_I                   =       2661,
  NVI_EXT_OP_LIST_ENTRY_PLMN_I                   =       2662,
  NVI_BM_BAT_STATS_I                             =       2663,
  NVI_DISPLAY_LANGUAGE_OPTIONS_I                 =       2664,
  NVI_DISPLAY_LANGUAGE_I                         =       2665,
  NVI_INPUT_LANGUAGE_MODE_I                      =       2666,
  NVI_INPUT_LANGUAGE_OPTIONS_I                   =       2667,
  NVI_INPUT_LANGUAGE_I                           =       2668,
  NVI_SYS_CONVERT_SCRIPT_VER_I                   =       2669,
  NVI_SYS_PROD_SPEC_CONVERT_SCRIPT_VER_I         =       2670,
  NVI_SYS_MANUAL_CONVERT_SCRIPT_VER_I            =       2671,
  NVI_IRDA_ACTIVE_I                              =       2672,
  NVI_IRDA_FILE_LOCATION_I                       =       2673,
  NVI_GSM_POWER_LEVELS_I                         =       2674,
  NVI_DCS_POWER_LEVELS_I                         =       2675,
  NVI_GSM_850_POWER_LEVELS_I                     =       2676,
  NVI_GSM_1900_POWER_LEVELS_I                    =       2677,
  NVI_GSM_PA_EN_START_I                          =       2678,
  NVI_GSM_ANT_TIMING_REL_TO_PA_EN_START_I        =       2679,
  NVI_DCS_PA_EN_START_I                          =       2680,
  NVI_DCS_ANT_TIMING_REL_TO_PA_EN_START_I        =       2681,
  NVI_GSM_850_PA_EN_START_I                      =       2682,
  NVI_GSM_1900_PA_EN_START_I                     =       2683,
  NVI_GSM_1900_ANT_TIMING_REL_TO_PA_EN_START_I   =       2684,
  NVI_GSM_PA_EN_STOP_I                           =       2685,
  NVI_GSM_ANT_TIMING_REL_TO_PA_EN_STOP_I         =       2686,
  NVI_DCS_PA_EN_STOP_I                           =       2687,
  NVI_DCS_ANT_TIMING_REL_TO_PA_EN_STOP_I         =       2688,
  NVI_GSM_850_PA_EN_STOP_I                       =       2689,
  NVI_GSM_850_ANT_TIMING_REL_TO_PA_EN_STOP_I     =       2690,
  NVI_GSM_1900_PA_EN_STOP_I                      =       2691,
  NVI_GSM_1900_ANT_TIMING_REL_TO_PA_EN_STOP_I    =       2692,
  NVI_GSM_AMAM_MASTER_TBL_SEG1_F3_I              =       2693,
  NVI_GSM_AMAM_MASTER_TBL_SEG2_F3_I              =       2694,
  NVI_GSM_AMAM_MASTER_TBL_SEG3_F3_I              =       2695,
  NVI_GSM_AMAM_MASTER_TBL_SEG4_F3_I              =       2696,
  NVI_GSM_AMAM_MASTER_TBL_SEG5_F3_I              =       2697,
  NVI_GSM_AMAM_MASTER_TBL_SEG6_F3_I              =       2698,
  NVI_GSM_AMAM_MASTER_TBL_SEG7_F3_I              =       2699,
  NVI_GSM_AMAM_MASTER_TBL_SEG8_F3_I              =       2700,
  NVI_DCS_AMAM_MASTER_TBL_SEG1_F3_I              =       2701,
  NVI_DCS_AMAM_MASTER_TBL_SEG2_F3_I              =       2702,
  NVI_DCS_AMAM_MASTER_TBL_SEG3_F3_I              =       2703,
  NVI_DCS_AMAM_MASTER_TBL_SEG4_F3_I              =       2704,
  NVI_DCS_AMAM_MASTER_TBL_SEG5_F3_I              =       2705,
  NVI_DCS_AMAM_MASTER_TBL_SEG6_F3_I              =       2706,
  NVI_DCS_AMAM_MASTER_TBL_SEG7_F3_I              =       2707,
  NVI_DCS_AMAM_MASTER_TBL_SEG8_F3_I              =       2708,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG1_F3_I          =       2709,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG2_F3_I          =       2710,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG3_F3_I          =       2711,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG4_F3_I          =       2712,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG5_F3_I          =       2713,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG6_F3_I          =       2714,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG7_F3_I          =       2715,
  NVI_GSM_850_AMAM_MASTER_TBL_SEG8_F3_I          =       2716,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG1_F3_I         =       2717,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG2_F3_I         =       2718,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG3_F3_I         =       2719,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG4_F3_I         =       2720,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG5_F3_I         =       2721,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG6_F3_I         =       2722,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG7_F3_I         =       2723,
  NVI_GSM_1900_AMAM_MASTER_TBL_SEG8_F3_I         =       2724,
  NVI_GSM_AMPM_MASTER_TBL_SEG1_F3_I              =       2725,
  NVI_GSM_AMPM_MASTER_TBL_SEG2_F3_I              =       2726,
  NVI_GSM_AMPM_MASTER_TBL_SEG3_F3_I              =       2727,
  NVI_GSM_AMPM_MASTER_TBL_SEG4_F3_I              =       2728,
  NVI_GSM_AMPM_MASTER_TBL_SEG5_F3_I              =       2729,
  NVI_GSM_AMPM_MASTER_TBL_SEG6_F3_I              =       2730,
  NVI_GSM_AMPM_MASTER_TBL_SEG7_F3_I              =       2731,
  NVI_GSM_AMPM_MASTER_TBL_SEG8_F3_I              =       2732,
  NVI_DCS_AMPM_MASTER_TBL_SEG1_F3_I              =       2733,
  NVI_DCS_AMPM_MASTER_TBL_SEG2_F3_I              =       2734,
  NVI_DCS_AMPM_MASTER_TBL_SEG3_F3_I              =       2735,
  NVI_DCS_AMPM_MASTER_TBL_SEG4_F3_I              =       2736,
  NVI_DCS_AMPM_MASTER_TBL_SEG5_F3_I              =       2737,
  NVI_DCS_AMPM_MASTER_TBL_SEG6_F3_I              =       2738,
  NVI_DCS_AMPM_MASTER_TBL_SEG7_F3_I              =       2739,
  NVI_DCS_AMPM_MASTER_TBL_SEG8_F3_I              =       2740,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG1_F3_I          =       2741,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG2_F3_I          =       2742,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG3_F3_I          =       2743,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG4_F3_I          =       2744,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG5_F3_I          =       2745,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG6_F3_I          =       2746,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG7_F3_I          =       2747,
  NVI_GSM_850_AMPM_MASTER_TBL_SEG8_F3_I          =       2748,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG1_F3_I         =       2749,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG2_F3_I         =       2750,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG3_F3_I         =       2751,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG4_F3_I         =       2752,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG5_F3_I         =       2753,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG6_F3_I         =       2754,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG7_F3_I         =       2755,
  NVI_GSM_1900_AMPM_MASTER_TBL_SEG8_F3_I         =       2756,
  NVI_GSM_AMAM_ARFCN_F3_I                        =       2757,
  NVI_DCS_AMAM_ARFCN_F3_I                        =       2758,
  NVI_GSM_850_AMAM_ARFCN_F3_I                    =       2759,
  NVI_GSM_1900_AMAM_ARFCN_F3_I                   =       2760,
  NVI_GSM_AUTOCAL_PWR_DAC_F3_I                   =       2761,
  NVI_DCS_AUTOCAL_PWR_DAC_F3_I                   =       2762,
  NVI_GSM_850_AUTOCAL_PWR_DAC_F3_I               =       2763,
  NVI_GSM_1900_AUTOCAL_PWR_DAC_F3_I              =       2764,
  NVI_GSM_850_ANT_TIMING_REL_TO_PA_EN_START_I    =       2765,
  NVI_GSM_RTR6250_RSB_I                          =       2766,
  NVI_DCS_RTR6250_RSB_I                          =       2767,
  NVI_GSM_850_RTR6250_RSB_I                      =       2768,
  NVI_GSM_1900_RTR6250_RSB_I                     =       2769,
  NVI_DISPLAY_LANGUAGE_AUTO_I                    =       2770,
  NVI_INPUT_LANGUAGE_AUTO_I                      =       2771,
  NVI_BROWSER_DISPLAY_SPLASH_I                   =       2772,
  NVI_BROWSER_HTTP_REFERER_I                     =       2773,
  NVI_BROWSER_ACTIVE_PROFILE_I                   =       2774,
  NVI_BROWSER_DISABLE_IMAGE_I                    =       2775,
  NVI_BROWSER_DISABLE_SOUND_I                    =       2776,
  NVI_BROWSER_DISABLE_OBJECT_I                   =       2777,
  NVI_BROWSER_MAILTO_PHONENUM_I                  =       2778,
  NVI_BROWSER_MAILTO_EMAIL_I                     =       2779,
  NVI_BROWSER_COOKIE_ENABLE_I                    =       2780,
  NVI_BROWSER_SECURE_PROMPT_I                    =       2781,
  NVI_BROWSER_IDCACHE_I                          =       2782,
  NVI_BROWSER_TITLE_REGION_I                     =       2783,
  NVI_BROWSER_SHOWSESSIONINFO_I                  =       2784,
  NVI_CURRENTLY_ACTIVE_PROFILE_I                 =       2785,
  NVI_ALLOW_MP3_RINGERS_I                        =       2786,
  NVI_ALLOW_AACPLUS_RINGERS_I                    =       2787,
  NVI_ALLOW_NON_DRM_RINGERS_I                    =       2788,
  NVI_CBS_ENABLED_I                              =       2789,
  NVI_CBS_MAX_TOPIC_INDEX_I                      =       2790,
  NVI_CBS_MIN_TOPIC_INDEX_I                      =       2791,
  NVI_CBS_ALLOW_RECEIVE_I                        =       2792,
  NVI_CBS_DISPLAY_CELL_INFO_I                    =       2793,
  NVI_CBS_NUM_SELECTED_TOPICS_I                  =       2794,
  NVI_IRDA_DEVICE_NAME_I                         =       2795,
  NVI_IRDA_PNP_DEVICE_ID_I                       =       2796,
  NVI_IRDA_PNP_MANUFACTURER_I                    =       2797,
  NVI_IRDA_PNP_NAME_I                            =       2798,
  NVI_IRDA_PNP_DEVICE_CATEGORY_I                 =       2799,
  NVI_IRDA_PNP_COMPATIBILITY_COUNT_I             =       2800,
  NVI_IRDA_PNP_STATUS_I                          =       2801,
  NVI_IRDA_PNP_VERSION_I                         =       2802,
  NVI_DISPLAY_LANGUAGE_GROUP_NUM_I               =       2803,
  NVI_POC_AUTO_ANSWER_I                          =       2804,
  NVI_POC_INCOMING_CALL_TIMEOUT_I                =       2805,
  NVI_POC_AUTO_LOGIN_I                           =       2806,
  NVI_POC_WILDCARDS_I                            =       2807,
  NVI_POC_HISTORY_LENGTH_I                       =       2808,
  NVI_POC_SECONDARY_PDP_CONTEXT_I                =       2809,
  NVI_POC_EARLY_SESSION_I                        =       2810,
  NVI_POC_QOS_MODE_I                             =       2811,
  NVI_POC_MAX_CONCURRENT_USER_LIMIT1_I           =       2812,
  NVI_POC_MAX_CONCURRENT_USER_LIMIT2_I           =       2813,
  NVI_POC_MAX_CONCURRENT_USER_LIMIT3_I           =       2814,
  NVI_POC_BUFFERED_PACKETS_I                     =       2815,
  NVI_POC_SPEAKER_PHONE_I                        =       2816,
  NVI_IM_NOTIFICATION_I                          =       2817,
  NVI_IM_AUTO_LOGIN_I                            =       2818,
  NVI_IM_SUPPORTED_BEARERS_I                     =       2819,
  NVI_IM_SUPPORTED_CIR_METHODS_I                 =       2820,
  NVI_IM_MAX_SEARCH_RESULTS_I                    =       2821,
  NVI_IM_SHORT_LOGIN_SEQUENCE_I                  =       2822,
  NVI_IM_NO_CONTACTS_EXIST_I                     =       2823,
  NVI_IM_SEND_FILE_DISABLED_I                    =       2824,
  NVI_IM_VERSION_DISCOVERY_I                     =       2825,
  NVI_IM_LOGIN_TYPE_I                            =       2826,
  NVI_IM_INITIAL_DELIVERY_METHOD_I               =       2827,
  NVI_IM_ANY_CONTENT_I                           =       2828,
  NVI_IM_ACCEPTED_CHAR_SETS_I                    =       2829,
  NVI_IM_ACCEPTED_CONTENT_TYPES_I                =       2830,
  NVI_IM_ACCEPTED_TRANSFER_ENCODINGS_I           =       2831,
  NVI_IM_ACCEPTED_CONTENT_LENGTH_I               =       2832,
  NVI_IM_PARSER_SIZE_I                           =       2833,
  NVI_IM_MAX_SAVED_CONVERSATIONS_I               =       2834,
  NVI_IM_MAX_CONCURRENT_CONVERSATIONS_I          =       2835,
  NVI_IM_SUPPORTED_BEARER_COUNT_I                =       2836,
  NVI_IM_SERVER_PORT_I                           =       2837,
  NVI_IM_HIDE_SERVER_I                           =       2838,
  NVI_IM_ALLOW_CHANGE_SERVER_I                   =       2839,
  NVI_IM_INTERNET_PROFILE_I                      =       2840,
  NVI_IM_KNOCK_SERVICE_TIMEOUT_I                 =       2841,
  NVI_IM_PASSWORD_I                              =       2842,
  NVI_IM_CIR_PORT_I                              =       2843,
  NVI_IM_SCHEMA_COUNT_I                          =       2844,
  NVI_IM_CIR_METHODS_COUNT_I                     =       2845,
  NVI_IM_MULTIPLE_TRANSACTIONS_I                 =       2846,
  NVI_IM_SMSC_ADDRESS_I                          =       2847,
  NVI_IM_OPTIONAL_HEADER_I                       =       2848,
  NVI_IM_DIGEST_SCHEMAS_I                        =       2849,
  NVI_POC_LIMIT_SELECTION_I                      =       2850,
  NVI_IM_USERID_I                                =       2851,
  NVI_BC0_VCO_TUNE_2_I                           =       2852,
  NVI_BC1_VCO_TUNE_2_I                           =       2853,
  NVI_BC3_VCO_TUNE_2_I                           =       2854,
  NVI_BC4_VCO_TUNE_2_I                           =       2855,
  NVI_BC5_VCO_TUNE_2_I                           =       2856,
  NVI_BC6_VCO_TUNE_2_I                           =       2857,
  NVI_MM_ENABLE_REAL_I                           =       2858,
  NVI_DIAG_DEBUG_CALL_TRACE_I                    =       2859,
  NVI_ENABLE_FASTTRACK_I                         =       2860,
  NVI_IM_EDIT_MESSENGER_ID_PSWD_I                =       2861,
  NVI_IM_SAFETY_TIP_I                            =       2862,
  NVI_IM_START_STRING_I                          =       2863,
  NVI_IM_MAX_RECEIVED_FILE_LIMIT_I               =       2864,
  NVI_WAP_AUTO_CONNECT_I                         =       2865,
  NVI_WAP_LOCKOUT_TIME_I                         =       2866,
  NVI_DIAG_SPC_UNLOCK_TTL_I                      =       2867,
  NVI_C0_BC0_IM2_LPM_1_I                         =       2868,
  NVI_C0_BC1_IM2_LPM_1_I                         =       2869,
  NVI_C0_BC3_IM2_LPM_1_I                         =       2870,
  NVI_C0_BC4_IM2_LPM_1_I                         =       2871,
  NVI_C0_BC5_IM2_LPM_1_I                         =       2872,
  NVI_C0_BC6_IM2_LPM_1_I                         =       2873,
  NVI_C0_BC0_IM2_LPM_2_I                         =       2874,
  NVI_C0_BC1_IM2_LPM_2_I                         =       2875,
  NVI_C0_BC3_IM2_LPM_2_I                         =       2876,
  NVI_C0_BC4_IM2_LPM_2_I                         =       2877,
  NVI_C0_BC5_IM2_LPM_2_I                         =       2878,
  NVI_C0_BC6_IM2_LPM_2_I                         =       2879,
  NVI_C0_BC0_INTELLICEIVER_CAL_I                 =       2880,
  NVI_C0_BC1_INTELLICEIVER_CAL_I                 =       2881,
  NVI_C0_BC3_INTELLICEIVER_CAL_I                 =       2882,
  NVI_C0_BC4_INTELLICEIVER_CAL_I                 =       2883,
  NVI_C0_BC5_INTELLICEIVER_CAL_I                 =       2884,
  NVI_C0_BC6_INTELLICEIVER_CAL_I                 =       2885,
  NVI_C0_BC0_LNA_SWITCHPOINTS_LPM_1_I            =       2886,
  NVI_C0_BC1_LNA_SWITCHPOINTS_LPM_1_I            =       2887,
  NVI_C0_BC3_LNA_SWITCHPOINTS_LPM_1_I            =       2888,
  NVI_C0_BC4_LNA_SWITCHPOINTS_LPM_1_I            =       2889,
  NVI_C0_BC5_LNA_SWITCHPOINTS_LPM_1_I            =       2890,
  NVI_C0_BC6_LNA_SWITCHPOINTS_LPM_1_I            =       2891,
  NVI_C0_BC0_LNA_SWITCHPOINTS_LPM_2_I            =       2892,
  NVI_C0_BC1_LNA_SWITCHPOINTS_LPM_2_I            =       2893,
  NVI_C0_BC3_LNA_SWITCHPOINTS_LPM_2_I            =       2894,
  NVI_C0_BC4_LNA_SWITCHPOINTS_LPM_2_I            =       2895,
  NVI_C0_BC5_LNA_SWITCHPOINTS_LPM_2_I            =       2896,
  NVI_C0_BC6_LNA_SWITCHPOINTS_LPM_2_I            =       2897,
  NVI_RFR_VCO_COARSE_TUNING_800_I                =       2898,
  NVI_POC_NETINITDEREG_I                         =       2899,
  NVI_POC_APP_TIMEOUT_I                          =       2900,
  NVI_POC_REGISTRATION_TIMEOUT_I                 =       2901,
  NVI_POC_GLM_TIMEOUT_I                          =       2902,
  NVI_JAVA_CONNECTION_PROFILE_ID_I               =       2903,
  NVI_JAVA_INTERNET_PROFILE_ID_I                 =       2904,
  NVI_ENABLE_EXT_GPS_ANTENNA_PWR_SUPPLY_I        =       2905,
  NVI_PRESUPL_WAP_GATEWAY_ADDRESS_I              =       2906,
  NVI_PRESUPL_WAP_GATEWAY_PORT_I                 =       2907,
  NVI_GPS1_POSITION_REPORT_I                     =       2908,
  NVI_SET_VOICE_CALL_TONE_I                      =       2909,
  NVI_CONN_PROFILE_UNPW_RO_OVERRIDE_I            =       2910,
  NVI_INTERNET_PROFILE_UNPW_RO_OVERRIDE_I        =       2911,
  NVI_AAGPS_RTI_VALIDITY_DUR_I                   =       2912,
  NVI_IPV6_UMTS_FAILOVER_CONFIG_I                =       2913,
  NVI_POC_FORBID_CHANGE_USERID_I                 =       2914,
  NVI_POC_WTUSER_PASSWORD_I                      =       2915,
  NVI_CBS_MAX_MSG_PER_TOPIC_I                    =       2916,
  NVI_BROWSER_FWDURL_TO_I                        =       2917,
  NVI_BROWSER_WAP_SIM_COMBINELOCK_I              =       2918,
  NVI_BROWSER_STARTPAGE_READONLY_I               =       2919,
  NVI_CMGR_DISPLAY_RO_FOR_MISSING_DCF_I          =       2920,
  NVI_CMGR_PROMPT_FOR_RO_DELETE_I                =       2921,
  NVI_CMGR_AUTO_REDIRECT_TO_LICENSE_SERVER_I     =       2922,
  NVI_SET_DRM_CONTENT_PROMPT_I                   =       2923,
  NVI_CMGR_WD_REMAINING_HOURS_1_THRESHOLD_I      =       2924,
  NVI_CMGR_WD_REMAINING_HOURS_2_THRESHOLD_I      =       2925,
  NVI_CMGR_WD_RUN_EVERY_HOURS_I                  =       2926,
  NVI_SET_DRM_EXPIRE_WARNING_I                   =       2927,
  NVI_CMGR_MAX_PREVIEW_DATA_SIZE_I               =       2928,
  NVI_BROWSER_DISABLE_IMAGE_RO_I                 =       2929,
  NVI_BROWSER_DISABLE_SOUND_RO_I                 =       2930,
  NVI_BROWSER_TIMEOUT_I                          =       2931,
  NVI_BROWSER_TIMEOUT_RO_I                       =       2932,
  NVI_BROWSER_SECURE_PROMPT_RO_I                 =       2933,
  NVI_BROWSER_FONTSIZE_I                         =       2934,
  NVI_BROWSER_TEXTWRAP_I                         =       2935,
  NVI_BROWSER_SCROLLSTEP_I                       =       2936,
  NVI_BROWSER_EXIT_PROMPT_I                      =       2937,
  NVI_PU_FORCE_ON_I                              =       2938,
  NVI_BROWSER_JUMP_PORTAL_NAME_I                 =       2939,
  NVI_BROWSER_JUMP_EMBDLNK1_NAME_I               =       2940,
  NVI_BROWSER_JUMP_EMBDLNK2_NAME_I               =       2941,
  NVI_BROWSER_JUMP_EMBDLNK3_NAME_I               =       2942,
  NVI_BROWSER_JUMP_EMBDLNK4_NAME_I               =       2943,
  NVI_BROWSER_JUMP_EMBDLNK5_NAME_I               =       2944,
  NVI_BROWSER_JUMP_EMBDLNK6_NAME_I               =       2945,
  NVI_BROWSER_JUMP_EMBDLNK7_NAME_I               =       2946,
  NVI_BROWSER_JUMP_EMBDLNK8_NAME_I               =       2947,
  NVI_VOICE_MAIL_LINE1_I                         =       2948,
  NVI_VOICE_MAIL_USE_SIM_NUMBER_I                =       2949,
  NVI_VOICE_MAIL_NOTIFY_I                        =       2950,
  NVI_VOICE_MAIL_LINE2_I                         =       2951,
  NVI_CAMERA_APP_SAVE_LOCATION_I                 =       2952,
  NVI_VT_SHOW_MY_IMAGE_I                         =       2953,
  NVI_VT_AUTO_REDIAL_I                           =       2954,
  NVI_SET_RINGER_VOLUME_I                        =       2955,
  NVI_WCDMA_C0_TX_LIM_VS_FREQ_I                  =       2956,
  NVI_SOS_KEY_ENABLED_I                          =       2957,
  NVI_SOS_NUMBER_I                               =       2958,
  NVI_WAP_TRUSTED_DOMAIN_I                       =       2959,
  NVI_WAP_PUSH_AUTOLOAD_I                        =       2960,
  NVI_IM_SERVER_ADDRESS_I                        =       2961,
  NVI_POC_TIMEOUT_SCALE_I                        =       2962,
  NVI_MR_DEFAULTS_STORED_I                       =       2963,
  NVI_SET_PLAY_STARTUP_SOUND_I                   =       2964,
  NVI_SET_PLAY_SHUTDOWN_SOUND_I                  =       2965,
  NVI_SET_PLAY_STARTUP_ANIMATION_I               =       2966,
  NVI_SET_PLAY_SHUTDOWN_ANIMATION_I              =       2967,
  NVI_GSM_POLAR_RAMP_PROFILE_I                   =       2968,
  NVI_GPS1_MSB_BACK_OFF_FACTOR_I                 =       2969,
  NVI_GPS1_MSB_BACK_OFF_MIN_I                    =       2970,
  NVI_GPS1_MSB_BACK_OFF_MAX_I                    =       2971,
  NVI_GPS1_MSB_BACK_OFF_RESET_I                  =       2972,
  NVI_GPS1_MSB_THROTTLE_ENABLE_I                 =       2973,
  NVI_MANUAL_PLMN_SEL_I                          =       2974,
  NVI_MANUAL_PLMN_SELECTION_I                    =       2975,
  NVI_CONSORTIUM_CONFIG_NUMB_I                   =       2976,
  NVI_HDR_EQUALIZER_CTRL_I                       =       2977,
  NVI_WLAN_ENABLE_PS_MODE_I                      =       2978,
  NVI_MF_700_LNA_RISE_2_I                        =       2979,
  NVI_MF_700_LNA_RISE_3_I                        =       2980,
  NVI_MF_700_LNA_RISE_4_I                        =       2981,
  NVI_MF_700_LNA_FALL_2_I                        =       2982,
  NVI_MF_700_LNA_FALL_3_I                        =       2983,
  NVI_MF_700_LNA_FALL_4_I                        =       2984,
  NVI_MF_700_AGC_VS_FREQ_I                       =       2985,
  NVI_MF_700_RX_CAL_CHAN_I                       =       2986,
  NVI_MF_HW_CONFIG_I                             =       2987,
  NVI_MF_BAND_CONFIG_I                           =       2988,
  NVI_MF_AFC_LOOP_PARAMS_I                       =       2989,
  NVI_LAST_REGISTERED_SCI_I                      =       2990,
  NVI_MMS_MAX_CHARS_SLIDE_I                      =       2991,
  NVI_MMS_MAX_NUMBER_OF_SLIDES_I                 =       2992,
  NVI_MMS_MAX_SUBJECT_SIZE_I                     =       2993,
  NVI_QVP_APP_DEFAULT_AUDIO_CAPABILITY_TYPE_I    =       2994,
  NVI_QVP_APP_DEFAULT_VIDEO_CAPABILITY_TYPE_I    =       2995,
  NVI_HDRMRLP_NUM_BYTES_TO_LOG_I                 =       2996,
  NVI_SECTIME_TIME_OFFSETS_I                     =       2997,
  NVI_DS_UCSD_NT_CONNECT_STATE_I                 =       2998,
  NVI_PB_RECORDASOUND_I                          =       2999,
  NVI_PB_AUTO_POWER_OFF_I                        =       3000,
  NVI_BC0_HDR_G0_IM_FALL_I                       =       3001,
  NVI_BC0_HDR_G0_IM_RISE_I                       =       3002,
  NVI_BC0_HDR_G0_IM_LEVEL_I                      =       3003,
  NVI_SET_LINGER_TIME_I                          =       3004,
  NVI_PB_SIM_DEFAULTNUMBERPRIORITY_FIRST_I       =       3005,
  NVI_PB_SIM_DEFAULTNUMBERPRIORITY_SECOND_I      =       3006,
  NVI_PB_SIM_DEFAULTNUMBERPRIORITY_THIRD_I       =       3007,
  NVI_PB_DEFAULT_SORTING_I                       =       3008,
  NVI_SND_SEND_RESTRICTED_I                      =       3009,
  NVI_POC_ROAMIING_ALERT_ENABLED_I               =       3010,
  NVI_GSM_850_PRECHARGE_I                        =       3011,
  NVI_GSM_850_PRECHARGE_DUR_I                    =       3012,
  NVI_GSM_1900_PRECHARGE_I                       =       3013,
  NVI_GSM_1900_PRECHARGE_DUR_I                   =       3014,
  NVI_MS_SMS_USE_SMSC_FROM_SIM_I                 =       3015,
  NVI_BROWSER_JUMP_MENU_SETTING_ENABLED_I        =       3016,
  NVI_BROWSER_DRM_WAIT_TIME_I                    =       3017,
  NVI_LC_ENABLED_I                               =       3018,
  NVI_LC_SERVICENAME_I                           =       3019,
  NVI_LC_CONNECTIONPROFILE_I                     =       3020,
  NVI_LC_INTERNETPROFILE_I                       =       3021,
  NVI_LC_UDPPUSHSERVERNAME_I                     =       3022,
  NVI_LC_UDPPUSHSERVERPORT_I                     =       3023,
  NVI_LC_UDPPUSHRETRYTIMES_I                     =       3024,
  NVI_LC_UDPPUSHRETRYSECONDS_I                   =       3025,
  NVI_LC_MSGASSEMBLYTIMEOUT_I                    =       3026,
  NVI_LC_TICKERTIMEOUT_I                         =       3027,
  NVI_LC_TICKERSPEED_I                           =       3028,
  NVI_LC_TICKERSTARTDELAY_I                      =       3029,
  NVI_LC_MAXTICKERITEMS_I                        =       3030,
  NVI_LC_BACKLIGHTTIMEOUT_I                      =       3031,
  NVI_LC_TRUSTEDDOMAIN_I                         =       3032,
  NVI_LC_SUBURL_KEY_LABEL_I                      =       3033,
  NVI_HOMEZONE_ENABLED_I                         =       3034,
  NVI_BC0_ANT_QUALITY_I                          =       3035,
  NVI_BC1_ANT_QUALITY_I                          =       3036,
  NVI_BC3_ANT_QUALITY_I                          =       3037,
  NVI_BC4_ANT_QUALITY_I                          =       3038,
  NVI_BC5_ANT_QUALITY_I                          =       3039,
  NVI_BC6_ANT_QUALITY_I                          =       3040,
  NVI_MEDIA_PLAYER_MIN_UDP_PORT_I                =       3041,
  NVI_MEDIA_PLAYER_MAX_UDP_PORT_I                =       3042,
  NVI_MEDIA_PLAYER_CONN_PROF_I                   =       3043,
  NVI_MEDIA_PLAYER_QOS_ENABLE_I                  =       3044,
  NVI_GPS1_NUM_SEARCHER_TASKS_I                  =       3045,
  NVI_GSM_PA_TRANSITION_TABLE_I                  =       3046,
  NVI_K_KEY_I                                    =       3047,
  NVI_CIPHER_KEY_I                               =       3048,
  NVI_INT_KEY_I                                  =       3049,
  NVI_LAST_3G_KEY_ID_I                           =       3050,
  NVI_SSEQ_I                                     =       3051,
  NVI_CK_THRESHOLD_I                             =       3052,
  NVI_SEQ_ARR_1_I                                =       3053,
  NVI_SEQ_ARR_2_I                                =       3054,
  NVI_WCDMA_MIN_TX_POWER_I                       =       3055,
  NVI_CCBS_SEL_I                                 =       3056,
  NVI_HOME_SCREEN_ENABLED_I                      =       3057,
  NVI_HOME_SCREEN_LAYOUT_I                       =       3058,
  NVI_IS_THM_INITIALIZED_I                       =       3059,
  NVI_HEAPTRACKER_ENABLED_I                      =       3060,
  NVI_TRM_CONFIG_I                               =       3061,
  NVI_IRDA_INACTIVITY_TIMER_I                    =       3062,
  NVI_MMS_MAX_TEMPLATES_I                        =       3063,
  NVI_MMS_TEXT_SIZE_I                            =       3064,
  NVI_VIDEO_APP_SAVE_LOCATION_I                  =       3065,
  NVI_CAMERA_DEFAULT_NAME_PREFIX_I               =       3066,
  NVI_VIDEO_DEFAULT_NAME_PREFIX_I                =       3067,
  NVI_CAMERA_AUDIO_RECORD_I                      =       3068,
  NVI_CAMERA_PICT_RESOLUTION_FRONT_I             =       3069,
  NVI_CAMERA_PICT_RESOLUTION_BACK_I              =       3070,
  NVI_CAMERA_VIDEO_RESOLUTION_FRONT_I            =       3071,
  NVI_CAMERA_VIDEO_RESOLUTION_BACK_I             =       3072,
  NVI_HDRSCP_SUBTYPE_CUSTOM_CONFIG_I             =       3073,
  NVI_SET_LINGER_TIME_MENU_ENABLE_I              =       3074,
  NVI_JAVA_SHOW_LOGO_ON_START_I                  =       3075,
  NVI_ENS_ENABLED_I                              =       3076,
  NVI_DIAG_SPC_TIMEOUT_I                         =       3077,
  NVI_MS_SMS_HEADER_TEMPLATE_FILE_I              =       3078,
  NVI_MS_SMS_SIGNATURE_TEMPLATE_FILE_I           =       3079,
  NVI_HDRIDLE_ENHANCED_CONFIG_I                  =       3080,
  NVI_HDRIDLE_SLOT_CYCLE_TIMEOUTS_I              =       3081,
  NVI_BACK_LIGHT_INTENSITY_I                     =       3082,
  NVI_DISPLAY_DURATION_I                         =       3083,
  NVI_C0_BC0_INTELLICEIVER_DET_THRESH_I          =       3084,
  NVI_C0_BC1_INTELLICEIVER_DET_THRESH_I          =       3085,
  NVI_C0_BC3_INTELLICEIVER_DET_THRESH_I          =       3086,
  NVI_C0_BC4_INTELLICEIVER_DET_THRESH_I          =       3087,
  NVI_C0_BC5_INTELLICEIVER_DET_THRESH_I          =       3088,
  NVI_C0_BC6_INTELLICEIVER_DET_THRESH_I          =       3089,
  NVI_SET_VOICE_VOLUME_I                         =       3090,
  NVI_SET_MEDIA_VOLUME_I                         =       3091,
  NVI_HDRRMAC_CONFIG_I                           =       3092,
  NVI_GPS1_CROSS_CORR_THRESHOLD_DBHZ_I           =       3093,
  NVI_GPS1_CME_T_TRACK_THRESHOLD_I               =       3094,
  NVI_GPS1_VX_LCSAGENT_V2_HANDOFF_ENABLE_I       =       3095,
  NVI_GPS1_VX_LCSAGENT_MO_BACKOFF_DURATION_I     =       3096,
  NVI_ODM_BACKLIGHT_INTENSITY_I                  =       3097,
  NVI_ODM_POWER_SAVE_TIMEOUT_I                   =       3098,
  NVI_ODM_BACKLIGHT_TIMEOUT_I                    =       3099,
  NVI_TIMEZONE_CITY_I                            =       3100,
  NVI_SIGMAREJECT_I                              =       3101,
  NVI_VELNOISEINONESECDRIVE_I                    =       3102,
  NVI_VELNOISEINONESECPED_I                      =       3103,
  NVI_VELNOISEINONESECSTATIC_I                   =       3104,
  NVI_EXTRACLOCKBIASERROR_I                      =       3105,
  NVI_CONFIGMASK_I                               =       3106,
  NVI_MAXPROPAGATIONWONEWMEAS_I                  =       3107,
  NVI_CONFIGCONTROLFLAG_I                        =       3108,
  NVI_AAGPS_DEVELOPMENT_TEST_CONTROL6_I          =       3109,
  NVI_SET_ALARM_CLOCK_TONE_SETTING_I             =       3110,
  NVI_SYS_DEFAULT_EFS_FILE_NAME_I                =       3111,
  NVI_SYS_EFS_FILE_NAME_I                        =       3112,
  NVI_SYS_DEFAULT_NV_INI_FILE_NAME_I             =       3113,
  NVI_SYS_NV_INI_FILE_NAME_I                     =       3114,
  NVI_SYS_SCRIPT_FILE_NAME_I                     =       3115,
  NVI_GSM_GAINRANGE5_SWITCHPOINTS_I              =       3116,
  NVI_GSM_RX_GAIN_RANGE_5_FREQ_COMP_I            =       3117,
  NVI_DCS_RX_GAIN_RANGE_5_FREQ_COMP_I            =       3118,
  NVI_GSM_850_RX_GAIN_RANGE_5_FREQ_COMP_I        =       3119,
  NVI_GSM_1900_RX_GAIN_RANGE_5_FREQ_COMP_I       =       3120,
  NVI_DCS_GAINRANGE5_SWITCHPOINTS_I              =       3121,
  NVI_GSM_850_GAINRANGE5_SWITCHPOINTS_I          =       3122,
  NVI_GSM_1900_GAINRANGE5_SWITCHPOINTS_I         =       3123,
  NVI_DCS_POLAR_RAMP_PROFILE_I                   =       3124,
  NVI_GSM_1900_POLAR_RAMP_PROFILE_I              =       3125,
  NVI_GSM_850_POLAR_RAMP_PROFILE_I               =       3126,
  NVI_WCDMA_TX_LIM_VS_TEMP_VOICE_CALL_ACTIVE_I   =       3127,
  NVI_HDRBCMCS_DISABLE_ONE_TIME_REG_I            =       3128,
  NVI_HDRBCMCS_DISABLE_SUBNET_REG_I              =       3129,
  NVI_CDMA_RX_CHAIN_SEL_THRESH_I                 =       3130,
  NVI_SET_AUTO_KEYLOCK_I                         =       3131,
  NVI_SET_ANY_KEY_ANSWER_I                       =       3132,
  NVI_VP_FRAME_RATE_I                            =       3133,
  NVI_DYN_CLOCK_VOLTAGE_I                        =       3134,
  NVI_GPS1_SEEDPOS_OPTION_I                      =       3135,
  NVI_MS_SEND_ATTEMPTS_I                         =       3136,
  NVI_MS_PERIOD_BETW_SEND_ATTEMPTS_I             =       3137,
  NVI_MS_SEND_IN_BACKGROUND_I                    =       3138,
  NVI_WCDMA_DL_FREQ_I                            =       3139,
  NVI_WCDMA_DL_FREQ_ENABLED_I                    =       3140,
  NVI_MS_SMS_SMSC_ADDRESS6_I                     =       3141,
  NVI_MS_SMS_SMSC_ADDRESS7_I                     =       3142,
  NVI_MS_SMS_SMSC_ADDRESS8_I                     =       3143,
  NVI_MS_SMS_SMSC_ADDRESS9_I                     =       3144,
  NVI_MS_SMS_SMSC_ADDRESS10_I                    =       3145,
  NVI_AUTO_TIME_ENABLE_I                         =       3146,
  NVI_SMS_MO_RETRY_PERIOD_I                      =       3147,
  NVI_SMS_MO_RETRY_INTERVAL_I                    =       3148,
  NVI_RMNET_AUTOCONNECT_I                        =       3149,
  NVI_ENABLE_BT_DIAG_I                           =       3150,
  NVI_BC14_TX_LIN_MASTER0_I                      =       3151,
  NVI_BC14_TX_LIN_MASTER1_I                      =       3152,
  NVI_BC14_TX_LIN_MASTER2_I                      =       3153,
  NVI_BC14_TX_LIN_MASTER3_I                      =       3154,
  NVI_BC14_GPS1_RF_DELAY_I                       =       3155,
  NVI_BC14_TX_LIM_VS_TEMP_I                      =       3156,
  NVI_BC14_TX_COMP0_I                            =       3157,
  NVI_BC14_TX_COMP1_I                            =       3158,
  NVI_BC14_TX_COMP2_I                            =       3159,
  NVI_BC14_TX_COMP3_I                            =       3160,
  NVI_BC14_TX_LIM_VS_FREQ_I                      =       3161,
  NVI_BC14_PA_R1_RISE_I                          =       3162,
  NVI_BC14_PA_R1_FALL_I                          =       3163,
  NVI_BC14_PA_R2_RISE_I                          =       3164,
  NVI_BC14_PA_R2_FALL_I                          =       3165,
  NVI_BC14_PA_R3_RISE_I                          =       3166,
  NVI_BC14_PA_R3_FALL_I                          =       3167,
  NVI_BC14_HDET_OFF_I                            =       3168,
  NVI_BC14_HDET_SPN_I                            =       3169,
  NVI_BC14_EXP_HDET_VS_AGC_I                     =       3170,
  NVI_BC14_ENC_BTF_I                             =       3171,
  NVI_BC14_VCO_COARSE_TUNE_TABLE_I               =       3172,
  NVI_BC14_VCO_TUNE_2_I                          =       3173,
  NVI_BC14_P1_RISE_FALL_OFF_I                    =       3174,
  NVI_BC14_HDR_P1_RISE_FALL_OFF_I                =       3175,
  NVI_C0_BC14_TX_CAL_CHAN_I                      =       3176,
  NVI_C0_BC14_RX_CAL_CHAN_I                      =       3177,
  NVI_C0_BC14_RX_CAL_CHAN_LRU_I                  =       3178,
  NVI_C0_BC14_LNA_1_OFFSET_I                     =       3179,
  NVI_C0_BC14_LNA_2_OFFSET_I                     =       3180,
  NVI_C0_BC14_LNA_3_OFFSET_I                     =       3181,
  NVI_C0_BC14_LNA_4_OFFSET_I                     =       3182,
  NVI_C0_BC14_LNA_1_OFFSET_VS_FREQ_I             =       3183,
  NVI_C0_BC14_LNA_2_OFFSET_VS_FREQ_I             =       3184,
  NVI_C0_BC14_LNA_3_OFFSET_VS_FREQ_I             =       3185,
  NVI_C0_BC14_LNA_4_OFFSET_VS_FREQ_I             =       3186,
  NVI_C0_BC14_IM2_I_VALUE_I                      =       3187,
  NVI_C0_BC14_IM2_Q_VALUE_I                      =       3188,
  NVI_C0_BC14_VGA_GAIN_OFFSET_I                  =       3189,
  NVI_C0_BC14_VGA_GAIN_OFFSET_VS_FREQ_I          =       3190,
  NVI_C0_BC14_IM2_TRANSCONDUCTOR_VALUE_I         =       3191,
  NVI_C0_BC14_LNA_1_RISE_I                       =       3192,
  NVI_C0_BC14_LNA_1_FALL_I                       =       3193,
  NVI_C0_BC14_LNA_2_RISE_I                       =       3194,
  NVI_C0_BC14_LNA_2_FALL_I                       =       3195,
  NVI_C0_BC14_LNA_3_RISE_I                       =       3196,
  NVI_C0_BC14_LNA_3_FALL_I                       =       3197,
  NVI_C0_BC14_LNA_4_RISE_I                       =       3198,
  NVI_C0_BC14_LNA_4_FALL_I                       =       3199,
  NVI_C0_BC14_IM_LEVEL1_I                        =       3200,
  NVI_C0_BC14_IM_LEVEL2_I                        =       3201,
  NVI_C0_BC14_IM_LEVEL3_I                        =       3202,
  NVI_C0_BC14_IM_LEVEL4_I                        =       3203,
  NVI_C1_BC14_TX_CAL_CHAN_I                      =       3204,
  NVI_C1_BC14_RX_CAL_CHAN_I                      =       3205,
  NVI_C1_BC14_LNA_1_OFFSET_VS_FREQ_I             =       3206,
  NVI_C1_BC14_LNA_2_OFFSET_VS_FREQ_I             =       3207,
  NVI_C1_BC14_LNA_3_OFFSET_VS_FREQ_I             =       3208,
  NVI_C1_BC14_LNA_4_OFFSET_VS_FREQ_I             =       3209,
  NVI_C1_BC14_LNA_1_OFFSET_I                     =       3210,
  NVI_C1_BC14_LNA_2_OFFSET_I                     =       3211,
  NVI_C1_BC14_LNA_3_OFFSET_I                     =       3212,
  NVI_C1_BC14_LNA_4_OFFSET_I                     =       3213,
  NVI_C1_BC14_IM2_I_VALUE_I                      =       3214,
  NVI_C1_BC14_IM2_Q_VALUE_I                      =       3215,
  NVI_C1_BC14_VGA_GAIN_OFFSET_I                  =       3216,
  NVI_C1_BC14_VGA_GAIN_OFFSET_VS_FREQ_I          =       3217,
  NVI_C1_BC14_IM2_TRANSCONDUCTOR_VALUE_I         =       3218,
  NVI_C1_BC14_LNA_1_RISE_I                       =       3219,
  NVI_C1_BC14_LNA_1_FALL_I                       =       3220,
  NVI_C1_BC14_LNA_2_RISE_I                       =       3221,
  NVI_C1_BC14_LNA_2_FALL_I                       =       3222,
  NVI_C1_BC14_LNA_3_RISE_I                       =       3223,
  NVI_C1_BC14_LNA_3_FALL_I                       =       3224,
  NVI_C1_BC14_LNA_4_RISE_I                       =       3225,
  NVI_C1_BC14_LNA_4_FALL_I                       =       3226,
  NVI_C1_BC14_IM_LEVEL1_I                        =       3227,
  NVI_C1_BC14_IM_LEVEL2_I                        =       3228,
  NVI_C1_BC14_IM_LEVEL3_I                        =       3229,
  NVI_C1_BC14_IM_LEVEL4_I                        =       3230,
  NVI_C1_BC14_VCO_COARSE_TUNE_TABLE_I            =       3231,
  NVI_BC14_ANT_QUALITY_I                         =       3232,
  NVI_BC14_PA_DVS_VOLTAGE_I                      =       3233,
  NVI_C0_BC14_LNA_SWITCHPOINTS_LPM_1_I           =       3234,
  NVI_C0_BC14_LNA_SWITCHPOINTS_LPM_2_I           =       3235,
  NVI_C0_BC14_IM2_LPM_1_I                        =       3236,
  NVI_C0_BC14_IM2_LPM_2_I                        =       3237,
  NVI_C0_BC14_INTELLICEIVER_CAL_I                =       3238,
  NVI_C0_BC14_INTELLICEIVER_DET_THRESH_I         =       3239,
  NVI_C1_BC14_RX_CAL_CHAN_LRU_I                  =       3240,
  NVI_SYS_VARIANT_NAME_I                         =       3241,
  NVI_SET_SSAVER_AUTO_KEYLOCK_I                  =       3242,
  NVI_DTM_FEATURE_SUPPORT_I                      =       3243,
  NVI_DTM_MULTISLOT_CLASS_I                      =       3244,
  NVI_EDA_FEATURE_SUPPORT_I                      =       3245,
  NVI_MF_MRU_CHAN_I                              =       3246,
  NVI_SRCH_DBG_MASK_I                            =       3247,
  NVI_STRIDE_ACTIVE_I                            =       3248,
  NVI_DDTM_SETTINGS_I                            =       3249,
  NVI_SD_CFG_ITEMS_I                             =       3250,
  NVI_VOIP_QOS_EVDO_SIP_PROFILE_ID_I             =       3251,
  NVI_VOIP_QOS_EVDO_RTP_PROFILE_ID_I             =       3252,
  NVI_VOIP_QOS_EVDO_DSCP_I                       =       3253,
  NVI_VOIP_DTX_ENABLED_I                         =       3254,
  NVI_MF_AFC_INNER_LOOP_GAIN_I                   =       3255,
  NVI_MF_AFC_INIT_FREQ_OFFSET_I                  =       3256,
  NVI_MF_C0_IM2_I_VALUE_I                        =       3257,
  NVI_MF_C0_IM2_Q_VALUE_I                        =       3258,
  NVI_MF_C0_IM2_TRANSCONDUCTOR_VALUE_I           =       3259,
  NVI_MF_C1_IM2_I_VALUE_I                        =       3260,
  NVI_MF_C1_IM2_Q_VALUE_I                        =       3261,
  NVI_MF_C1_IM2_TRANSCONDUCTOR_VALUE_I           =       3262,
  NVI_MF_ACQ_PARAMETERS_I                        =       3263,
  NVI_WCDMA_RRC_VERSION_I                        =       3264,
  NVI_WCDMA_900_VGA_GAIN_OFFSET_I                =       3265,
  NVI_WCDMA_900_VGA_GAIN_OFFSET_VS_FREQ_I        =       3266,
  NVI_WCDMA_900_VGA_GAIN_OFFSET_VS_TEMP_I        =       3267,
  NVI_WCDMA_900_LNA_RANGE_RISE_2_I               =       3268,
  NVI_WCDMA_900_LNA_RANGE_RISE_3_I               =       3269,
  NVI_WCDMA_900_LNA_RANGE_FALL_2_I               =       3270,
  NVI_WCDMA_900_LNA_RANGE_FALL_3_I               =       3271,
  NVI_WCDMA_900_IM_LEVEL_2_I                     =       3272,
  NVI_WCDMA_900_IM_LEVEL_3_I                     =       3273,
  NVI_WCDMA_900_LNA_RANGE_OFFSET_2_I             =       3274,
  NVI_WCDMA_900_LNA_RANGE_OFFSET_3_I             =       3275,
  NVI_WCDMA_900_LNA_OFFSET_VS_FREQ_2_I           =       3276,
  NVI_WCDMA_900_LNA_OFFSET_VS_FREQ_3_I           =       3277,
  NVI_WCDMA_900_IM2_I_VALUE_I                    =       3278,
  NVI_WCDMA_900_IM2_Q_VALUE_I                    =       3279,
  NVI_WCDMA_900_IM2_TRANSCONDUCTOR_VALUE_I       =       3280,
  NVI_WCDMA_900_RX_AGC_MIN_2_I                   =       3281,
  NVI_WCDMA_900_RX_AGC_MIN_3_I                   =       3282,
  NVI_WCDMA_900_MAX_TX_POWER_I                   =       3283,
  NVI_WCDMA_900_OUT_OF_SERVICE_THRESH_I          =       3284,
  NVI_WCDMA_900_LNA_RANGE_RISE_I                 =       3285,
  NVI_WCDMA_900_LNA_RANGE_FALL_I                 =       3286,
  NVI_WCDMA_900_IM_LEVEL_I                       =       3287,
  NVI_WCDMA_900_NONBYPASS_TIMER_I                =       3288,
  NVI_WCDMA_900_BYPASS_TIMER_I                   =       3289,
  NVI_WCDMA_900_LNA_RANGE_OFFSET_I               =       3290,
  NVI_WCDMA_900_LNA_OFFSET_VS_FREQ_I             =       3291,
  NVI_WCDMA_900_RX_AGC_MIN_I                     =       3292,
  NVI_WCDMA_900_RX_AGC_MAX_I                     =       3293,
  NVI_WCDMA_900_AGC_PHASE_OFFSET_I               =       3294,
  NVI_WCDMA_900_TX_LIN_MASTER_0_I                =       3295,
  NVI_WCDMA_900_TX_LIN_MASTER_1_I                =       3296,
  NVI_WCDMA_900_TX_COMP_VS_FREQ_0_I              =       3297,
  NVI_WCDMA_900_TX_COMP_VS_FREQ_1_I              =       3298,
  NVI_WCDMA_900_TX_LIN_VS_TEMP_0_I               =       3299,
  NVI_WCDMA_900_TX_LIN_VS_TEMP_1_I               =       3300,
  NVI_WCDMA_900_TX_SLP_VS_TEMP_0_I               =       3301,
  NVI_WCDMA_900_TX_SLP_VS_TEMP_1_I               =       3302,
  NVI_WCDMA_900_R1_RISE_I                        =       3303,
  NVI_WCDMA_900_R1_FALL_I                        =       3304,
  NVI_WCDMA_900_TX_LIM_VS_TEMP_I                 =       3305,
  NVI_WCDMA_900_TX_LIM_VS_FREQ_I                 =       3306,
  NVI_WCDMA_900_ADJ_FACTOR_I                     =       3307,
  NVI_WCDMA_900_EXP_HDET_VS_AGC_I                =       3308,
  NVI_WCDMA_900_HDET_OFF_I                       =       3309,
  NVI_WCDMA_900_HDET_SPN_I                       =       3310,
  NVI_WCDMA_900_ENC_BTF_I                        =       3311,
  NVI_WCDMA_900_AGC_PA_ON_RISE_DELAY_I           =       3312,
  NVI_WCDMA_900_AGC_PA_ON_FALL_DELAY_I           =       3313,
  NVI_WCDMA_900_AGC_TX_ON_RISE_DELAY_I           =       3314,
  NVI_WCDMA_900_AGC_TX_ON_FALL_DELAY_I           =       3315,
  NVI_WCDMA_900_AGC_UPDATE_TX_AGC_TIME_I         =       3316,
  NVI_WCDMA_900_PRACH_R1_RISE_OFFSET_I           =       3317,
  NVI_WCDMA_900_PRACH_R1_FALL_OFFSET_I           =       3318,
  NVI_WCDMA_900_TX_CAL_CHAN_I                    =       3319,
  NVI_WCDMA_900_RX_CAL_CHAN_I                    =       3320,
  NVI_WCDMA_900_TX_LIN_MASTER_2_I                =       3321,
  NVI_WCDMA_900_TX_LIN_MASTER_3_I                =       3322,
  NVI_WCDMA_900_TX_COMP_VS_FREQ_2_I              =       3323,
  NVI_WCDMA_900_TX_COMP_VS_FREQ_3_I              =       3324,
  NVI_WCDMA_900_TX_LIN_VS_TEMP_2_I               =       3325,
  NVI_WCDMA_900_TX_LIN_VS_TEMP_3_I               =       3326,
  NVI_WCDMA_900_TX_SLP_VS_TEMP_2_I               =       3327,
  NVI_WCDMA_900_TX_SLP_VS_TEMP_3_I               =       3328,
  NVI_WCDMA_900_R2_RISE_I                        =       3329,
  NVI_WCDMA_900_R2_FALL_I                        =       3330,
  NVI_WCDMA_900_R3_RISE_I                        =       3331,
  NVI_WCDMA_900_R3_FALL_I                        =       3332,
  NVI_WCDMA_900_PA_COMPENSATE_UP_R2_I            =       3333,
  NVI_WCDMA_900_PA_COMPENSATE_DOWN_R2_I          =       3334,
  NVI_WCDMA_900_PA_COMPENSATE_UP_R3_I            =       3335,
  NVI_WCDMA_900_PA_COMPENSATE_DOWN_R3_I          =       3336,
  NVI_WCDMA_900_TX_ROT_ANGLE_PA_STATE_00_I       =       3337,
  NVI_WCDMA_900_TX_ROT_ANGLE_PA_STATE_01_I       =       3338,
  NVI_WCDMA_900_TX_ROT_ANGLE_PA_STATE_10_I       =       3339,
  NVI_WCDMA_900_TX_ROT_ANGLE_PA_STATE_11_I       =       3340,
  NVI_WCDMA_900_PRACH_R2_RISE_OFFSET_I           =       3341,
  NVI_WCDMA_900_PRACH_R2_FALL_OFFSET_I           =       3342,
  NVI_WCDMA_900_PRACH_R3_RISE_OFFSET_I           =       3343,
  NVI_WCDMA_900_PRACH_R3_FALL_OFFSET_I           =       3344,
  NVI_WCDMA_900_PA_RANGE_MAP_I                   =       3345,
  NVI_WCDMA_900_DCH_AGC_UPDATE_TX_AGC_TIME_I     =       3346,
  NVI_WCDMA_900_AGC_TX_ADJ_PDM_DELAY_I           =       3347,
  NVI_WCDMA_900_UTRAN_TX_LIM_VS_TEMP_OFFSET_I    =       3348,
  NVI_WCDMA_900_PA_GAIN_UP_TIME_I                =       3349,
  NVI_WCDMA_900_PA_GAIN_DOWN_TIME_I              =       3350,
  NVI_WCDMA_900_PA_COMPENSATE_UP_I               =       3351,
  NVI_WCDMA_900_PA_COMPENSATE_DOWN_I             =       3352,
  NVI_WCDMA_900_RX_DELAY_I                       =       3353,
  NVI_WCDMA_900_PA_RANGE_FOR_DVS_I               =       3354,
  NVI_WCDMA_900_PA_COMPENSATE_UP_WITH_DVS_I      =       3355,
  NVI_WCDMA_900_PA_COMPENSATE_DN_WITH_DVS_I      =       3356,
  NVI_WCDMA_900_MAX_PWR_BACKOFF_VOLTAGES_I       =       3357,
  NVI_WCDMA_900_MAX_PWR_BACKOFF_VOLT1_I          =       3358,
  NVI_WCDMA_900_MAX_PWR_BACKOFF_VOLT2_I          =       3359,
  NVI_WCDMA_900_MAX_PWR_BACKOFF_VOLT3_I          =       3360,
  NVI_WCDMA_900_HS_R1_RISE_I                     =       3361,
  NVI_WCDMA_900_HS_R1_FALL_I                     =       3362,
  NVI_WCDMA_900_HS_R2_RISE_I                     =       3363,
  NVI_WCDMA_900_HS_R2_FALL_I                     =       3364,
  NVI_WCDMA_900_HS_R3_RISE_I                     =       3365,
  NVI_WCDMA_900_HS_R3_FALL_I                     =       3366,
  NVI_RFR_VCO_COARSE_TUNING_900_I                =       3367,
  NVI_NITZ_NW_INFO_I                             =       3368,
  NVI_CBS_MAX_MSGS_PER_TOPIC_I                   =       3369,
  NVI_CAMERA_TYPE_I                              =       3370,
  NVI_GPS1_DYNAMIC_MODE_I                        =       3371,
  NVI_AAGPS_USE_TRANSPORT_SECURITY_I             =       3372,
  NVI_C1_WCDMA_2100_VGA_GAIN_OFFSET_I            =       3373,
  NVI_C1_WCDMA_2100_LNA_RANGE_RISE_I             =       3374,
  NVI_C1_WCDMA_2100_LNA_RANGE_FALL_I             =       3375,
  NVI_C1_WCDMA_2100_IM_LEVEL_I                   =       3376,
  NVI_C1_WCDMA_2100_NONBYPASS_TIMER_I            =       3377,
  NVI_C1_WCDMA_2100_BYPASS_TIMER_I               =       3378,
  NVI_C1_WCDMA_2100_LNA_RANGE_OFFSET_I           =       3379,
  NVI_C1_WCDMA_2100_LNA_OFFSET_VS_FREQ_I         =       3380,
  NVI_C1_WCDMA_2100_VGA_GAIN_OFFSET_VS_FREQ_I    =       3381,
  NVI_C1_WCDMA_2100_VGA_GAIN_OFFSET_VS_TEMP_I    =       3382,
  NVI_C1_WCDMA_2100_LNA_RANGE_RISE_2_I           =       3383,
  NVI_C1_WCDMA_2100_LNA_RANGE_RISE_3_I           =       3384,
  NVI_C1_WCDMA_2100_LNA_RANGE_RISE_4_I           =       3385,
  NVI_C1_WCDMA_2100_LNA_RANGE_FALL_2_I           =       3386,
  NVI_C1_WCDMA_2100_LNA_RANGE_FALL_3_I           =       3387,
  NVI_C1_WCDMA_2100_LNA_RANGE_FALL_4_I           =       3388,
  NVI_C1_WCDMA_2100_IM_LEVEL_2_I                 =       3389,
  NVI_C1_WCDMA_2100_IM_LEVEL_3_I                 =       3390,
  NVI_C1_WCDMA_2100_IM_LEVEL_4_I                 =       3391,
  NVI_C1_WCDMA_2100_LNA_RANGE_OFFSET_2_I         =       3392,
  NVI_C1_WCDMA_2100_LNA_RANGE_OFFSET_3_I         =       3393,
  NVI_C1_WCDMA_2100_LNA_RANGE_OFFSET_4_I         =       3394,
  NVI_C1_WCDMA_2100_LNA_OFFSET_VS_FREQ_2_I       =       3395,
  NVI_C1_WCDMA_2100_LNA_OFFSET_VS_FREQ_3_I       =       3396,
  NVI_C1_WCDMA_2100_LNA_OFFSET_VS_FREQ_4_I       =       3397,
  NVI_C1_WCDMA_2100_IM2_I_VALUE_I                =       3398,
  NVI_C1_WCDMA_2100_IM2_Q_VALUE_I                =       3399,
  NVI_C1_WCDMA_2100_IM2_TRANSCONDUCTOR_VALUE_I   =       3400,
  NVI_C1_WCDMA_2100_RX_CAL_CHAN_I                =       3401,
  NVI_C1_RF_ANTSEL_UMTS_2100_I                   =       3402,
  NVI_C1_WCDMA_1900_VGA_GAIN_OFFSET_I            =       3403,
  NVI_C1_WCDMA_1900_VGA_GAIN_OFFSET_VS_FREQ_I    =       3404,
  NVI_C1_WCDMA_1900_VGA_GAIN_OFFSET_VS_TEMP_I    =       3405,
  NVI_C1_WCDMA_1900_LNA_RANGE_RISE_I             =       3406,
  NVI_C1_WCDMA_1900_LNA_RANGE_RISE_2_I           =       3407,
  NVI_C1_WCDMA_1900_LNA_RANGE_RISE_3_I           =       3408,
  NVI_C1_WCDMA_1900_LNA_RANGE_RISE_4_I           =       3409,
  NVI_C1_WCDMA_1900_LNA_RANGE_FALL_I             =       3410,
  NVI_C1_WCDMA_1900_LNA_RANGE_FALL_2_I           =       3411,
  NVI_C1_WCDMA_1900_LNA_RANGE_FALL_3_I           =       3412,
  NVI_C1_WCDMA_1900_LNA_RANGE_FALL_4_I           =       3413,
  NVI_C1_WCDMA_1900_IM_LEVEL_I                   =       3414,
  NVI_C1_WCDMA_1900_IM_LEVEL_2_I                 =       3415,
  NVI_C1_WCDMA_1900_IM_LEVEL_3_I                 =       3416,
  NVI_C1_WCDMA_1900_IM_LEVEL_4_I                 =       3417,
  NVI_C1_WCDMA_1900_LNA_RANGE_OFFSET_2_I         =       3418,
  NVI_C1_WCDMA_1900_LNA_RANGE_OFFSET_3_I         =       3419,
  NVI_C1_WCDMA_1900_LNA_RANGE_OFFSET_4_I         =       3420,
  NVI_C1_WCDMA_1900_LNA_OFFSET_VS_FREQ_2_I       =       3421,
  NVI_C1_WCDMA_1900_LNA_OFFSET_VS_FREQ_3_I       =       3422,
  NVI_C1_WCDMA_1900_LNA_OFFSET_VS_FREQ_4_I       =       3423,
  NVI_C1_WCDMA_1900_IM2_I_VALUE_I                =       3424,
  NVI_C1_WCDMA_1900_IM2_Q_VALUE_I                =       3425,
  NVI_C1_WCDMA_1900_IM2_TRANSCONDUCTOR_VALUE_I   =       3426,
  NVI_C1_WCDMA_1900_NONBYPASS_TIMER_I            =       3427,
  NVI_C1_WCDMA_1900_BYPASS_TIMER_I               =       3428,
  NVI_C1_WCDMA_1900_LNA_RANGE_OFFSET_I           =       3429,
  NVI_C1_WCDMA_1900_LNA_OFFSET_VS_FREQ_I         =       3430,
  NVI_C1_WCDMA_1900_RX_CAL_CHAN_I                =       3431,
  NVI_C1_RF_ANTSEL_UMTS_1900_I                   =       3432,
  NVI_C1_WCDMA_800_VGA_GAIN_OFFSET_I             =       3433,
  NVI_C1_WCDMA_800_VGA_GAIN_OFFSET_VS_FREQ_I     =       3434,
  NVI_C1_WCDMA_800_VGA_GAIN_OFFSET_VS_TEMP_I     =       3435,
  NVI_C1_WCDMA_800_LNA_RANGE_RISE_I              =       3436,
  NVI_C1_WCDMA_800_LNA_RANGE_RISE_2_I            =       3437,
  NVI_C1_WCDMA_800_LNA_RANGE_RISE_3_I            =       3438,
  NVI_C1_WCDMA_800_LNA_RANGE_RISE_4_I            =       3439,
  NVI_C1_WCDMA_800_LNA_RANGE_FALL_I              =       3440,
  NVI_C1_WCDMA_800_LNA_RANGE_FALL_2_I            =       3441,
  NVI_C1_WCDMA_800_LNA_RANGE_FALL_3_I            =       3442,
  NVI_C1_WCDMA_800_LNA_RANGE_FALL_4_I            =       3443,
  NVI_C1_WCDMA_800_IM_LEVEL_I                    =       3444,
  NVI_C1_WCDMA_800_IM_LEVEL_2_I                  =       3445,
  NVI_C1_WCDMA_800_IM_LEVEL_3_I                  =       3446,
  NVI_C1_WCDMA_800_IM_LEVEL_4_I                  =       3447,
  NVI_C1_WCDMA_800_LNA_RANGE_OFFSET_I            =       3448,
  NVI_C1_WCDMA_800_LNA_RANGE_OFFSET_2_I          =       3449,
  NVI_C1_WCDMA_800_LNA_RANGE_OFFSET_3_I          =       3450,
  NVI_C1_WCDMA_800_LNA_RANGE_OFFSET_4_I          =       3451,
  NVI_C1_WCDMA_800_LNA_OFFSET_VS_FREQ_I          =       3452,
  NVI_C1_WCDMA_800_LNA_OFFSET_VS_FREQ_2_I        =       3453,
  NVI_C1_WCDMA_800_LNA_OFFSET_VS_FREQ_3_I        =       3454,
  NVI_C1_WCDMA_800_LNA_OFFSET_VS_FREQ_4_I        =       3455,
  NVI_C1_WCDMA_800_IM2_I_VALUE_I                 =       3456,
  NVI_C1_WCDMA_800_IM2_Q_VALUE_I                 =       3457,
  NVI_C1_WCDMA_800_IM2_TRANSCONDUCTOR_VALUE_I    =       3458,
  NVI_C1_WCDMA_800_NONBYPASS_TIMER_I             =       3459,
  NVI_C1_WCDMA_800_BYPASS_TIMER_I                =       3460,
  NVI_C1_WCDMA_800_RX_CAL_CHAN_I                 =       3461,
  NVI_C1_RF_ANTSEL_UMTS_800_I                    =       3462,
  NVI_RFR_VCO_COARSE_TUNE_2_1900_I               =       3463,
  NVI_RFR_WCDMA_C0_C1_DELAY_I                    =       3464,
  NVI_WCDMA_RX_DIVERSITY_CTRL_I                  =       3465,
  NVI_WCDMA_EQUALIZER_CTRL_I                     =       3466,
  NVI_BC11_VCO_TUNE_2_I                          =       3467,
  NVI_BC11_HDR_P1_RISE_FALL_OFF_I                =       3468,
  NVI_C0_BC11_RX_CAL_CHAN_LRU_I                  =       3469,
  NVI_C1_BC11_RX_CAL_CHAN_LRU_I                  =       3470,
  NVI_BC11_ANT_QUALITY_I                         =       3471,
  NVI_C0_BC11_IM2_LPM_1_I                        =       3472,
  NVI_C0_BC11_IM2_LPM_2_I                        =       3473,
  NVI_C0_BC11_INTELLICEIVER_CAL_I                =       3474,
  NVI_C0_BC11_LNA_SWITCHPOINTS_LPM_1_I           =       3475,
  NVI_C0_BC11_LNA_SWITCHPOINTS_LPM_2_I           =       3476,
  NVI_C0_BC11_INTELLICEIVER_DET_THRESH_I         =       3477,
  NVI_BC11_PA_DVS_VOLTAGE_I                      =       3478,
  NVI_VOIP_WLAN_PRFRD_CODEC_I                    =       3479,
  NVI_VOIP_EVDO_PRFRD_CODEC_I                    =       3480,
  NVI_WCDMA_PA_COMP_UP_VS_FREQ_I                 =       3481,
  NVI_WCDMA_PA_COMP_DOWN_VS_FREQ_I               =       3482,
  NVI_WCDMA_PA_COMP_UP_R2_VS_FREQ_I              =       3483,
  NVI_WCDMA_PA_COMP_DOWN_R2_VS_FREQ_I            =       3484,
  NVI_WCDMA_PA_COMP_UP_R3_VS_FREQ_I              =       3485,
  NVI_WCDMA_PA_COMP_DOWN_R3_VS_FREQ_I            =       3486,
  NVI_WCDMA_800_PA_COMP_UP_VS_FREQ_I             =       3487,
  NVI_WCDMA_800_PA_COMP_DOWN_VS_FREQ_I           =       3488,
  NVI_WCDMA_800_PA_COMP_UP_R2_VS_FREQ_I          =       3489,
  NVI_WCDMA_800_PA_COMP_DOWN_R2_VS_FREQ_I        =       3490,
  NVI_WCDMA_800_PA_COMP_UP_R3_VS_FREQ_I          =       3491,
  NVI_WCDMA_800_PA_COMP_DOWN_R3_VS_FREQ_I        =       3492,
  NVI_WCDMA_1900_PA_COMP_UP_VS_FREQ_I            =       3493,
  NVI_WCDMA_1900_PA_COMP_DOWN_VS_FREQ_I          =       3494,
  NVI_WCDMA_1900_PA_COMP_UP_R2_VS_FREQ_I         =       3495,
  NVI_WCDMA_1900_PA_COMP_DOWN_R2_VS_FREQ_I       =       3496,
  NVI_WCDMA_1900_PA_COMP_UP_R3_VS_FREQ_I         =       3497,
  NVI_WCDMA_1900_PA_COMP_DOWN_R3_VS_FREQ_I       =       3498,
  NVI_WCDMA_900_PA_COMP_UP_VS_FREQ_I             =       3499,
  NVI_WCDMA_900_PA_COMP_DOWN_VS_FREQ_I           =       3500,
  NVI_WCDMA_900_PA_COMP_UP_R2_VS_FREQ_I          =       3501,
  NVI_WCDMA_900_PA_COMP_DOWN_R2_VS_FREQ_I        =       3502,
  NVI_WCDMA_900_PA_COMP_UP_R3_VS_FREQ_I          =       3503,
  NVI_WCDMA_900_PA_COMP_DOWN_R3_VS_FREQ_I        =       3504,
  NVI_WCDMA_TX_PDM_LIN_0_I                       =       3505,
  NVI_WCDMA_TX_PDM_LIN_1_I                       =       3506,
  NVI_WCDMA_TX_PDM_LIN_2_I                       =       3507,
  NVI_WCDMA_TX_PDM_LIN_3_I                       =       3508,
  NVI_WCDMA_800_TX_PDM_LIN_0_I                   =       3509,
  NVI_WCDMA_800_TX_PDM_LIN_1_I                   =       3510,
  NVI_WCDMA_800_TX_PDM_LIN_2_I                   =       3511,
  NVI_WCDMA_800_TX_PDM_LIN_3_I                   =       3512,
  NVI_WCDMA_1900_TX_PDM_LIN_0_I                  =       3513,
  NVI_WCDMA_1900_TX_PDM_LIN_1_I                  =       3514,
  NVI_WCDMA_1900_TX_PDM_LIN_2_I                  =       3515,
  NVI_WCDMA_1900_TX_PDM_LIN_3_I                  =       3516,
  NVI_WCDMA_900_TX_PDM_LIN_0_I                   =       3517,
  NVI_WCDMA_900_TX_PDM_LIN_1_I                   =       3518,
  NVI_WCDMA_900_TX_PDM_LIN_2_I                   =       3519,
  NVI_WCDMA_900_TX_PDM_LIN_3_I                   =       3520,
  NVI_WCDMA_1800_PA_COMP_UP_VS_FREQ_I            =       3521,
  NVI_WCDMA_1800_PA_COMP_DOWN_VS_FREQ_I          =       3522,
  NVI_WCDMA_1800_PA_COMP_UP_R2_VS_FREQ_I         =       3523,
  NVI_WCDMA_1800_PA_COMP_DOWN_R2_VS_FREQ_I       =       3524,
  NVI_WCDMA_1800_PA_COMP_UP_R3_VS_FREQ_I         =       3525,
  NVI_WCDMA_1800_PA_COMP_DOWN_R3_VS_FREQ_I       =       3526,
  NVI_WCDMA_1800_TX_PDM_LIN_0_I                  =       3527,
  NVI_WCDMA_1800_TX_PDM_LIN_1_I                  =       3528,
  NVI_WCDMA_1800_TX_PDM_LIN_2_I                  =       3529,
  NVI_WCDMA_1800_TX_PDM_LIN_3_I                  =       3530,
  NVI_WCDMA_BC4_VGA_GAIN_OFFSET_I                =       3531,
  NVI_WCDMA_BC4_VGA_GAIN_OFFSET_VS_FREQ_I        =       3532,
  NVI_WCDMA_BC4_VGA_GAIN_OFFSET_VS_TEMP_I        =       3533,
  NVI_WCDMA_BC4_LNA_RANGE_RISE_2_I               =       3534,
  NVI_WCDMA_BC4_LNA_RANGE_RISE_3_I               =       3535,
  NVI_WCDMA_BC4_LNA_RANGE_FALL_2_I               =       3536,
  NVI_WCDMA_BC4_LNA_RANGE_FALL_3_I               =       3537,
  NVI_WCDMA_BC4_IM_LEVEL_2_I                     =       3538,
  NVI_WCDMA_BC4_IM_LEVEL_3_I                     =       3539,
  NVI_WCDMA_BC4_LNA_RANGE_OFFSET_2_I             =       3540,
  NVI_WCDMA_BC4_LNA_RANGE_OFFSET_3_I             =       3541,
  NVI_WCDMA_BC4_LNA_OFFSET_VS_FREQ_2_I           =       3542,
  NVI_WCDMA_BC4_LNA_OFFSET_VS_FREQ_3_I           =       3543,
  NVI_WCDMA_BC4_IM2_I_VALUE_I                    =       3544,
  NVI_WCDMA_BC4_IM2_Q_VALUE_I                    =       3545,
  NVI_WCDMA_BC4_IM2_TRANSCONDUCTOR_VALUE_I       =       3546,
  NVI_WCDMA_BC4_RX_AGC_MIN_2_I                   =       3547,
  NVI_WCDMA_BC4_RX_AGC_MIN_3_I                   =       3548,
  NVI_WCDMA_BC4_MAX_TX_POWER_I                   =       3549,
  NVI_WCDMA_BC4_OUT_OF_SERVICE_THRESH_I          =       3550,
  NVI_WCDMA_BC4_LNA_RANGE_RISE_I                 =       3551,
  NVI_WCDMA_BC4_LNA_RANGE_FALL_I                 =       3552,
  NVI_WCDMA_BC4_IM_LEVEL_I                       =       3553,
  NVI_WCDMA_BC4_NONBYPASS_TIMER_I                =       3554,
  NVI_WCDMA_BC4_BYPASS_TIMER_I                   =       3555,
  NVI_WCDMA_BC4_LNA_RANGE_OFFSET_I               =       3556,
  NVI_WCDMA_BC4_LNA_OFFSET_VS_FREQ_I             =       3557,
  NVI_WCDMA_BC4_RX_AGC_MIN_I                     =       3558,
  NVI_WCDMA_BC4_RX_AGC_MAX_I                     =       3559,
  NVI_WCDMA_BC4_AGC_PHASE_OFFSET_I               =       3560,
  NVI_WCDMA_BC4_TX_LIN_MASTER_0_I                =       3561,
  NVI_WCDMA_BC4_TX_LIN_MASTER_1_I                =       3562,
  NVI_WCDMA_BC4_TX_COMP_VS_FREQ_0_I              =       3563,
  NVI_WCDMA_BC4_TX_COMP_VS_FREQ_1_I              =       3564,
  NVI_WCDMA_BC4_TX_LIN_VS_TEMP_0_I               =       3565,
  NVI_WCDMA_BC4_TX_LIN_VS_TEMP_1_I               =       3566,
  NVI_WCDMA_BC4_TX_SLP_VS_TEMP_0_I               =       3567,
  NVI_WCDMA_BC4_TX_SLP_VS_TEMP_1_I               =       3568,
  NVI_WCDMA_BC4_R1_RISE_I                        =       3569,
  NVI_WCDMA_BC4_R1_FALL_I                        =       3570,
  NVI_WCDMA_BC4_TX_LIM_VS_TEMP_I                 =       3571,
  NVI_WCDMA_BC4_TX_LIM_VS_FREQ_I                 =       3572,
  NVI_WCDMA_BC4_ADJ_FACTOR_I                     =       3573,
  NVI_WCDMA_BC4_EXP_HDET_VS_AGC_I                =       3574,
  NVI_WCDMA_BC4_HDET_OFF_I                       =       3575,
  NVI_WCDMA_BC4_HDET_SPN_I                       =       3576,
  NVI_WCDMA_BC4_ENC_BTF_I                        =       3577,
  NVI_WCDMA_BC4_AGC_PA_ON_RISE_DELAY_I           =       3578,
  NVI_WCDMA_BC4_AGC_PA_ON_FALL_DELAY_I           =       3579,
  NVI_WCDMA_BC4_AGC_TX_ON_RISE_DELAY_I           =       3580,
  NVI_WCDMA_BC4_AGC_TX_ON_FALL_DELAY_I           =       3581,
  NVI_WCDMA_BC4_AGC_UPDATE_TX_AGC_TIME_I         =       3582,
  NVI_WCDMA_BC4_PRACH_R1_RISE_OFFSET_I           =       3583,
  NVI_WCDMA_BC4_PRACH_R1_FALL_OFFSET_I           =       3584,
  NVI_WCDMA_BC4_TX_CAL_CHAN_I                    =       3585,
  NVI_WCDMA_BC4_RX_CAL_CHAN_I                    =       3586,
  NVI_WCDMA_BC4_TX_LIN_MASTER_2_I                =       3587,
  NVI_WCDMA_BC4_TX_LIN_MASTER_3_I                =       3588,
  NVI_WCDMA_BC4_TX_COMP_VS_FREQ_2_I              =       3589,
  NVI_WCDMA_BC4_TX_COMP_VS_FREQ_3_I              =       3590,
  NVI_WCDMA_BC4_TX_LIN_VS_TEMP_2_I               =       3591,
  NVI_WCDMA_BC4_TX_LIN_VS_TEMP_3_I               =       3592,
  NVI_WCDMA_BC4_TX_SLP_VS_TEMP_2_I               =       3593,
  NVI_WCDMA_BC4_TX_SLP_VS_TEMP_3_I               =       3594,
  NVI_WCDMA_BC4_R2_RISE_I                        =       3595,
  NVI_WCDMA_BC4_R2_FALL_I                        =       3596,
  NVI_WCDMA_BC4_R3_RISE_I                        =       3597,
  NVI_WCDMA_BC4_R3_FALL_I                        =       3598,
  NVI_WCDMA_BC4_PA_COMPENSATE_UP_R2_I            =       3599,
  NVI_WCDMA_BC4_PA_COMPENSATE_DOWN_R2_I          =       3600,
  NVI_WCDMA_BC4_PA_COMPENSATE_UP_R3_I            =       3601,
  NVI_WCDMA_BC4_PA_COMPENSATE_DOWN_R3_I          =       3602,
  NVI_WCDMA_BC4_TX_ROT_ANGLE_PA_STATE_00_I       =       3603,
  NVI_WCDMA_BC4_TX_ROT_ANGLE_PA_STATE_01_I       =       3604,
  NVI_WCDMA_BC4_TX_ROT_ANGLE_PA_STATE_10_I       =       3605,
  NVI_WCDMA_BC4_TX_ROT_ANGLE_PA_STATE_11_I       =       3606,
  NVI_WCDMA_BC4_PRACH_R2_RISE_OFFSET_I           =       3607,
  NVI_WCDMA_BC4_PRACH_R2_FALL_OFFSET_I           =       3608,
  NVI_WCDMA_BC4_PRACH_R3_RISE_OFFSET_I           =       3609,
  NVI_WCDMA_BC4_PRACH_R3_FALL_OFFSET_I           =       3610,
  NVI_WCDMA_BC4_PA_RANGE_MAP_I                   =       3611,
  NVI_WCDMA_BC4_DCH_AGC_UPDATE_TX_AGC_TIME_I     =       3612,
  NVI_WCDMA_BC4_AGC_TX_ADJ_PDM_DELAY_I           =       3613,
  NVI_WCDMA_BC4_UTRAN_TX_LIM_VS_TEMP_OFFSET_I    =       3614,
  NVI_WCDMA_BC4_PA_GAIN_UP_TIME_I                =       3615,
  NVI_WCDMA_BC4_PA_GAIN_DOWN_TIME_I              =       3616,
  NVI_WCDMA_BC4_PA_COMPENSATE_UP_I               =       3617,
  NVI_WCDMA_BC4_PA_COMPENSATE_DOWN_I             =       3618,
  NVI_WCDMA_BC4_RX_DELAY_I                       =       3619,
  NVI_WCDMA_BC4_PA_RANGE_FOR_DVS_I               =       3620,
  NVI_WCDMA_BC4_PA_COMPENSATE_UP_WITH_DVS_I      =       3621,
  NVI_WCDMA_BC4_PA_COMPENSATE_DN_WITH_DVS_I      =       3622,
  NVI_WCDMA_BC4_MAX_PWR_BACKOFF_VOLTAGES_I       =       3623,
  NVI_WCDMA_BC4_MAX_PWR_BACKOFF_VOLT1_I          =       3624,
  NVI_WCDMA_BC4_MAX_PWR_BACKOFF_VOLT2_I          =       3625,
  NVI_WCDMA_BC4_MAX_PWR_BACKOFF_VOLT3_I          =       3626,
  NVI_WCDMA_BC4_HS_R1_RISE_I                     =       3627,
  NVI_WCDMA_BC4_HS_R1_FALL_I                     =       3628,
  NVI_WCDMA_BC4_HS_R2_RISE_I                     =       3629,
  NVI_WCDMA_BC4_HS_R2_FALL_I                     =       3630,
  NVI_WCDMA_BC4_HS_R3_RISE_I                     =       3631,
  NVI_WCDMA_BC4_HS_R3_FALL_I                     =       3632,
  NVI_RFR_VCO_COARSE_TUNING_BC4_I                =       3633,
  NVI_RF_ANTSEL_UMTS_900_I                       =       3634,
  NVI_RF_ANTSEL_UMTS_BC4_I                       =       3635,
  NVI_GPS1_NMEA_OUTPUT_I                         =       3636,
  NVI_ROAM_IND_CUSTOM_HOME_I                     =       3637,
  NVI_CDMA_SO68_ENABLED_I                        =       3638,
  NVI_RTR_BB_FILTER_I                            =       3639,
  NVI_MF_CHAN_SUPPORT_I                          =       3640,
  NVI_MF_RF_PATH_CONFIG_I                        =       3641,
  NVI_MF_RSSI_CAL_VS_FREQ_0_I                    =       3642,
  NVI_MF_RSSI_CAL_VS_FREQ_1_I                    =       3643,
  NVI_MF_RSSI_CAL_VS_FREQ_2_I                    =       3644,
  NVI_MF_RSSI_CAL_VS_FREQ_3_I                    =       3645,
  NVI_UPLOADMEDIA_POSTCARD_SERVER_READONLY_I     =       3646,
  NVI_UMTS_CALL_VT_CODEC_LIST_I                  =       3647,
  NVI_WCDMA_BC4_TX_PDM_LIN_0_I                   =       3648,
  NVI_WCDMA_BC4_TX_PDM_LIN_1_I                   =       3649,
  NVI_WCDMA_BC4_TX_PDM_LIN_2_I                   =       3650,
  NVI_WCDMA_BC4_TX_PDM_LIN_3_I                   =       3651,
  NVI_INTERRAT_NACC_SUPPORT_I                    =       3652,
  NVI_DARP_FEATURE_SUPPORT_I                     =       3653,
  NVI_HSDPA_CAT_I                                =       3654,
  NVI_SET_DISPLAY_LAYOUT_I                       =       3655,
  NVI_SET_CHINESE_ASSOCIATED_SWITCH_I            =       3656,
  NVI_SET_CHINESE_INPUT_METHODS_I                =       3657,
  NVI_WLAN_QOS_MODE_I                            =       3658,
  NVI_GAME_MODE_PERSIST_I                        =       3659,
  NVI_GAME_MODE_I                                =       3660,
  NVI_GSM_850_GMSK_MULTISLOT_2_TX_PWR_I          =       3661,
  NVI_GSM_850_GMSK_MULTISLOT_3_TX_PWR_I          =       3662,
  NVI_GSM_850_GMSK_MULTISLOT_4_TX_PWR_I          =       3663,
  NVI_GSM_850_GMSK_MULTISLOT_5_TX_PWR_I          =       3664,
  NVI_GSM_GMSK_MULTISLOT_2_TX_PWR_I              =       3665,
  NVI_GSM_GMSK_MULTISLOT_3_TX_PWR_I              =       3666,
  NVI_GSM_GMSK_MULTISLOT_4_TX_PWR_I              =       3667,
  NVI_GSM_GMSK_MULTISLOT_5_TX_PWR_I              =       3668,
  NVI_DCS_GMSK_MULTISLOT_2_TX_PWR_I              =       3669,
  NVI_DCS_GMSK_MULTISLOT_3_TX_PWR_I              =       3670,
  NVI_DCS_GMSK_MULTISLOT_4_TX_PWR_I              =       3671,
  NVI_DCS_GMSK_MULTISLOT_5_TX_PWR_I              =       3672,
  NVI_GSM_1900_GMSK_MULTISLOT_2_TX_PWR_I         =       3673,
  NVI_GSM_1900_GMSK_MULTISLOT_3_TX_PWR_I         =       3674,
  NVI_GSM_1900_GMSK_MULTISLOT_4_TX_PWR_I         =       3675,
  NVI_GSM_1900_GMSK_MULTISLOT_5_TX_PWR_I         =       3676,
  NVI_GSM_850_8PSK_MULTISLOT_2_TX_PWR_I          =       3677,
  NVI_GSM_850_8PSK_MULTISLOT_3_TX_PWR_I          =       3678,
  NVI_GSM_850_8PSK_MULTISLOT_4_TX_PWR_I          =       3679,
  NVI_GSM_850_8PSK_MULTISLOT_5_TX_PWR_I          =       3680,
  NVI_GSM_8PSK_MULTISLOT_2_TX_PWR_I              =       3681,
  NVI_GSM_8PSK_MULTISLOT_3_TX_PWR_I              =       3682,
  NVI_GSM_8PSK_MULTISLOT_4_TX_PWR_I              =       3683,
  NVI_GSM_8PSK_MULTISLOT_5_TX_PWR_I              =       3684,
  NVI_DCS_8PSK_MULTISLOT_2_TX_PWR_I              =       3685,
  NVI_DCS_8PSK_MULTISLOT_3_TX_PWR_I              =       3686,
  NVI_DCS_8PSK_MULTISLOT_4_TX_PWR_I              =       3687,
  NVI_DCS_8PSK_MULTISLOT_5_TX_PWR_I              =       3688,
  NVI_GSM_1900_8PSK_MULTISLOT_2_TX_PWR_I         =       3689,
  NVI_GSM_1900_8PSK_MULTISLOT_3_TX_PWR_I         =       3690,
  NVI_GSM_1900_8PSK_MULTISLOT_4_TX_PWR_I         =       3691,
  NVI_GSM_1900_8PSK_MULTISLOT_5_TX_PWR_I         =       3692,
  NVI_MULTISLOT_GMSK_POWER_PROFILE_I             =       3693,
  NVI_MULTISLOT_8PSK_POWER_PROFILE_I             =       3694,
  NVI_HSDPA_COMPRESSED_MODE_ENABLED_I            =       3695,
  NVI_LOCK_CODE_EXT_I                            =       3696,
  NVI_WCDMA_IACCUM_I                             =       3697,
  NVI_WCDMA_QACCUM_I                             =       3698,
  NVI_WCDMA_1900_IACCUM_I                        =       3699,
  NVI_WCDMA_1900_QACCUM_I                        =       3700,
  NVI_WCDMA_1800_IACCUM_I                        =       3701,
  NVI_WCDMA_1800_QACCUM_I                        =       3702,
  NVI_WCDMA_BC4_IACCUM_I                         =       3703,
  NVI_WCDMA_BC4_QACCUM_I                         =       3704,
  NVI_WCDMA_800_IACCUM_I                         =       3705,
  NVI_WCDMA_800_QACCUM_I                         =       3706,
  NVI_WCDMA_900_IACCUM_I                         =       3707,
  NVI_WCDMA_900_QACCUM_I                         =       3708,
  NVI_WCDMA_RRC_PDCP_DISABLED_I                  =       3709,
  NVI_GSM_IM2_850_I                              =       3710,
  NVI_GSM_IM2_900_I                              =       3711,
  NVI_GSM_IM2_1800_I                             =       3712,
  NVI_GSM_IM2_1900_I                             =       3713,
  NVI_MARKET_REGION_UI_I                         =       3714,
  NVI_GSM_TX_RSB_CORR_I                          =       3715,
  NVI_DCS_TX_RSB_CORR_I                          =       3716,
  NVI_GSM_850_TX_RSB_CORR_I                      =       3717,
  NVI_GSM_1900_TX_RSB_CORR_I                     =       3718,
  NVI_VOIP_QOS_ENABLED_I                         =       3719,
  NVI_SEC_CSPRNG_INIT_SEED_I                     =       3720,
  NVI_HDR_MIN_UATI_MODE_I                        =       3721,
  NVI_VOIP_WRITE_MEDIA_FILE_ENABLED_I            =       3722,
  NVI_VOIP_READ_MEDIA_FILE_ENABLED_I             =       3723,
  NVI_RDB_LOCK_TO_USER_I                         =       3724,
  NVI_MS_MESSAGINGDAEMON_LOG_ENABLED_I           =       3725,
  NVI_JAVA_POSITIONING_ENABLED_I                 =       3726,
  NVI_LOCK_CODE_EXT_DIGITS_I                     =       3727,
  NVI_CDMA_SO70_ENABLED_I                        =       3728,
  NVI_HDRIDLE_DESIRED_SLOTTED_MODE_CONFIG_I      =       3729,
  NVI_WCDMA_1800_DRX_MODE_SEL_I                  =       3730,
  NVI_WCDMA_1900_DRX_MODE_SEL_I                  =       3731,
  NVI_WCDMA_2100_DRX_MODE_SEL_I                  =       3732,
  NVI_WCDMA_800_DRX_MODE_SEL_I                   =       3733,
  NVI_WCDMA_900_DRX_MODE_SEL_I                   =       3734,
  NVI_WCDMA_BC4_DRX_MODE_SEL_I                   =       3735,
  NVI_GPS_DRX_MODE_SEL_I                         =       3736,
  NVI_APPS_PWRC_DISABLE_I                        =       3737,
  NVI_WLAN_OEM_INDEX_I                           =       3738,
  NVI_MS_NOTIFY_FIRST_RETRY_I                    =       3739,
  NVI_HDRSCP_FORCE_REL0_CONFIG_I                 =       3740,
  NVI_UIM_CONFIG_PARAMS_I                        =       3741,
  NVI_HDRSCMDB_SECURE_CONFIG_I                   =       3742,
  NVI_HDRAMP_LOCATION_I                          =       3743,
  NVI_CRASH_DEBUG_DISALLOWED_I                   =       3744,
  NVI_EDTM_FEATURE_SUPPORT_I                     =       3745,
  NVI_WCDMA_HSUPA_CATEGORY_I                     =       3746,
  NVI_WCDMA_OPTIONAL_FEATURE_LIST_I              =       3747,
  NVI_XO_TRIM_VALUES_I                           =       3748,
  NVI_GSM_PATH_DELAY_COMP_FREQ_TBL_I             =       3749,
  NVI_GSM_850_PATH_DELAY_COMP_FREQ_TBL_I         =       3750,
  NVI_GSM_PATH_DELAY_COLD_TEMP_VS_FREQ_I         =       3751,
  NVI_GSM_PATH_DELAY_ROOM_TEMP_VS_FREQ_I         =       3752,
  NVI_GSM_PATH_DELAY_HOT_TEMP_VS_FREQ_I          =       3753,
  NVI_GSM_850_PATH_DELAY_COLD_TEMP_VS_FREQ_I     =       3754,
  NVI_GSM_850_PATH_DELAY_ROOM_TEMP_VS_FREQ_I     =       3755,
  NVI_GSM_850_PATH_DELAY_HOT_TEMP_VS_FREQ_I      =       3756,
  NVI_THERM_VALUE_T1_I                           =       3757,
  NVI_THERM_VALUE_T2_I                           =       3758,
  NVI_THERM_VALUE_T3_I                           =       3759,
  NVI_THERM_VALUE_T4_I                           =       3760,
  NVI_THERM_TEMP_MIN_I                           =       3761,
  NVI_THERM_TEMP_MAX_I                           =       3762,
  NVI_SMS_MAX_PAYLOAD_LENGTH_I                   =       3763,
  NVI_SMS_MO_ON_ACCESS_CHANNEL_I                 =       3764,
  NVI_SMS_MO_ON_TRAFFIC_CHANNEL_I                =       3765,
  NVI_VOIP_CONFRD_URI_I                          =       3766,
  NVI_HDRL1_DBG_MSK_I                            =       3767,
  NVI_BUS_PROF_EBI1_ENABLE_I                     =       3768,
  NVI_BUS_PROF_SMI_ENABLE_I                      =       3769,
  NVI_BUS_PROF_EBI1_MODE_I                       =       3770,
  NVI_BUS_PROF_SMI_MODE_I                        =       3771,
  NVI_BUS_PROF_EBI1_TRIGGER_ID_I                 =       3772,
  NVI_BUS_PROF_SMI_TRIGGER_ID_I                  =       3773,
  NVI_BUS_PROF_EBI1_BUS_COUNT_I                  =       3774,
  NVI_BUS_PROF_SMI_BUS_COUNT_I                   =       3775,
  NVI_BUS_PROF_EBI1_SIMPLE_SETTINGS_0_I          =       3776,
  NVI_BUS_PROF_EBI1_SIMPLE_SETTINGS_1_I          =       3777,
  NVI_BUS_PROF_EBI1_SIMPLE_SETTINGS_2_I          =       3778,
  NVI_BUS_PROF_EBI1_SIMPLE_SETTINGS_3_I          =       3779,
  NVI_BUS_PROF_SMI_SIMPLE_SETTINGS_0_I           =       3780,
  NVI_BUS_PROF_SMI_SIMPLE_SETTINGS_1_I           =       3781,
  NVI_BUS_PROF_SMI_SIMPLE_SETTINGS_2_I           =       3782,
  NVI_BUS_PROF_SMI_SIMPLE_SETTINGS_3_I           =       3783,
  NVI_BUS_PROF_EBI1_ADVANCE_SETTINGS_0_I         =       3784,
  NVI_BUS_PROF_EBI1_ADVANCE_SETTINGS_1_I         =       3785,
  NVI_BUS_PROF_EBI1_ADVANCE_SETTINGS_2_I         =       3786,
  NVI_BUS_PROF_EBI1_ADVANCE_SETTINGS_3_I         =       3787,
  NVI_BUS_PROF_SMI_ADVANCE_SETTINGS_0_I          =       3788,
  NVI_BUS_PROF_SMI_ADVANCE_SETTINGS_1_I          =       3789,
  NVI_BUS_PROF_SMI_ADVANCE_SETTINGS_2_I          =       3790,
  NVI_BUS_PROF_SMI_ADVANCE_SETTINGS_3_I          =       3791,
  NVI_HDR_QOS_FLOW_PRIORITY_I                    =       3792,
  NVI_RF_PM_CONFIG_I                             =       3793,
  NVI_SMS_TL_ACK_ENABLED_I                       =       3794,
  NVI_WLAN_BSS_TYPE_PREF_I                       =       3795,
  NVI_HDRIDLE_PREF_SLOTTED_MODE_CONFIG_I         =       3796,
  NVI_CPU_BASED_FLOW_CONTROL_I                   =       3797,
  NVI_PAT_ACQ_TIMEOUT_I                          =       3798,
  NVI_PMT_ACQ_TIMEOUT_I                          =       3799,
  NVI_INT_ACQ_TIMEOUT_I                          =       3800,
  NVI_VOIP_REGISTRATION_MODE_I                   =       3801,
  NVI_GPS1_CME_MAX_THROTTLE_DURATION_I           =       3802,
  NVI_TIME_TOD_OFFSET_I                          =       3803,
  NVI_BC15_TX_LIN_MASTER0_I                      =       3804,
  NVI_BC15_TX_LIN_MASTER1_I                      =       3805,
  NVI_BC15_TX_LIN_MASTER2_I                      =       3806,
  NVI_BC15_TX_LIN_MASTER3_I                      =       3807,
  NVI_BC15_GPS1_RF_DELAY_I                       =       3808,
  NVI_BC15_TX_LIM_VS_TEMP_I                      =       3809,
  NVI_BC15_TX_COMP0_I                            =       3810,
  NVI_BC15_TX_COMP1_I                            =       3811,
  NVI_BC15_TX_COMP2_I                            =       3812,
  NVI_BC15_TX_COMP3_I                            =       3813,
  NVI_BC15_TX_LIM_VS_FREQ_I                      =       3814,
  NVI_BC15_PA_R1_RISE_I                          =       3815,
  NVI_BC15_PA_R1_FALL_I                          =       3816,
  NVI_BC15_PA_R2_RISE_I                          =       3817,
  NVI_BC15_PA_R2_FALL_I                          =       3818,
  NVI_BC15_PA_R3_RISE_I                          =       3819,
  NVI_BC15_PA_R3_FALL_I                          =       3820,
  NVI_BC15_HDET_OFF_I                            =       3821,
  NVI_BC15_HDET_SPN_I                            =       3822,
  NVI_BC15_EXP_HDET_VS_AGC_I                     =       3823,
  NVI_BC15_ENC_BTF_I                             =       3824,
  NVI_BC15_VCO_COARSE_TUNE_TABLE_I               =       3825,
  NVI_BC15_VCO_TUNE_2_I                          =       3826,
  NVI_BC15_P1_RISE_FALL_OFF_I                    =       3827,
  NVI_BC15_HDR_P1_RISE_FALL_OFF_I                =       3828,
  NVI_C0_BC15_TX_CAL_CHAN_I                      =       3829,
  NVI_C0_BC15_RX_CAL_CHAN_I                      =       3830,
  NVI_C0_BC15_RX_CAL_CHAN_LRU_I                  =       3831,
  NVI_C0_BC15_LNA_1_OFFSET_I                     =       3832,
  NVI_C0_BC15_LNA_2_OFFSET_I                     =       3833,
  NVI_C0_BC15_LNA_3_OFFSET_I                     =       3834,
  NVI_C0_BC15_LNA_4_OFFSET_I                     =       3835,
  NVI_C0_BC15_LNA_1_OFFSET_VS_FREQ_I             =       3836,
  NVI_C0_BC15_LNA_2_OFFSET_VS_FREQ_I             =       3837,
  NVI_C0_BC15_LNA_3_OFFSET_VS_FREQ_I             =       3838,
  NVI_C0_BC15_LNA_4_OFFSET_VS_FREQ_I             =       3839,
  NVI_C0_BC15_IM2_I_VALUE_I                      =       3840,
  NVI_C0_BC15_IM2_Q_VALUE_I                      =       3841,
  NVI_C0_BC15_VGA_GAIN_OFFSET_I                  =       3842,
  NVI_C0_BC15_VGA_GAIN_OFFSET_VS_FREQ_I          =       3843,
  NVI_C0_BC15_IM2_TRANSCONDUCTOR_VALUE_I         =       3844,
  NVI_C0_BC15_LNA_1_RISE_I                       =       3845,
  NVI_C0_BC15_LNA_1_FALL_I                       =       3846,
  NVI_C0_BC15_LNA_2_RISE_I                       =       3847,
  NVI_C0_BC15_LNA_2_FALL_I                       =       3848,
  NVI_C0_BC15_LNA_3_RISE_I                       =       3849,
  NVI_C0_BC15_LNA_3_FALL_I                       =       3850,
  NVI_C0_BC15_LNA_4_RISE_I                       =       3851,
  NVI_C0_BC15_LNA_4_FALL_I                       =       3852,
  NVI_C0_BC15_IM_LEVEL1_I                        =       3853,
  NVI_C0_BC15_IM_LEVEL2_I                        =       3854,
  NVI_C0_BC15_IM_LEVEL3_I                        =       3855,
  NVI_C0_BC15_IM_LEVEL4_I                        =       3856,
  NVI_C1_BC15_TX_CAL_CHAN_I                      =       3857,
  NVI_C1_BC15_RX_CAL_CHAN_I                      =       3858,
  NVI_C1_BC15_LNA_1_OFFSET_VS_FREQ_I             =       3859,
  NVI_C1_BC15_LNA_2_OFFSET_VS_FREQ_I             =       3860,
  NVI_C1_BC15_LNA_3_OFFSET_VS_FREQ_I             =       3861,
  NVI_C1_BC15_LNA_4_OFFSET_VS_FREQ_I             =       3862,
  NVI_C1_BC15_LNA_1_OFFSET_I                     =       3863,
  NVI_C1_BC15_LNA_2_OFFSET_I                     =       3864,
  NVI_C1_BC15_LNA_3_OFFSET_I                     =       3865,
  NVI_C1_BC15_LNA_4_OFFSET_I                     =       3866,
  NVI_C1_BC15_IM2_I_VALUE_I                      =       3867,
  NVI_C1_BC15_IM2_Q_VALUE_I                      =       3868,
  NVI_C1_BC15_VGA_GAIN_OFFSET_I                  =       3869,
  NVI_C1_BC15_VGA_GAIN_OFFSET_VS_FREQ_I          =       3870,
  NVI_C1_BC15_IM2_TRANSCONDUCTOR_VALUE_I         =       3871,
  NVI_C1_BC15_LNA_1_RISE_I                       =       3872,
  NVI_C1_BC15_LNA_1_FALL_I                       =       3873,
  NVI_C1_BC15_LNA_2_RISE_I                       =       3874,
  NVI_C1_BC15_LNA_2_FALL_I                       =       3875,
  NVI_C1_BC15_LNA_3_RISE_I                       =       3876,
  NVI_C1_BC15_LNA_3_FALL_I                       =       3877,
  NVI_C1_BC15_LNA_4_RISE_I                       =       3878,
  NVI_C1_BC15_LNA_4_FALL_I                       =       3879,
  NVI_C1_BC15_IM_LEVEL1_I                        =       3880,
  NVI_C1_BC15_IM_LEVEL2_I                        =       3881,
  NVI_C1_BC15_IM_LEVEL3_I                        =       3882,
  NVI_C1_BC15_IM_LEVEL4_I                        =       3883,
  NVI_C1_BC15_VCO_COARSE_TUNE_TABLE_I            =       3884,
  NVI_BC15_ANT_QUALITY_I                         =       3885,
  NVI_BC15_PA_DVS_VOLTAGE_I                      =       3886,
  NVI_C0_BC15_LNA_SWITCHPOINTS_LPM_1_I           =       3887,
  NVI_C0_BC15_LNA_SWITCHPOINTS_LPM_2_I           =       3888,
  NVI_C0_BC15_IM2_LPM_1_I                        =       3889,
  NVI_C0_BC15_IM2_LPM_2_I                        =       3890,
  NVI_C0_BC15_INTELLICEIVER_CAL_I                =       3891,
  NVI_C0_BC15_INTELLICEIVER_DET_THRESH_I         =       3892,
  NVI_C1_BC15_RX_CAL_CHAN_LRU_I                  =       3893,
  NVI_DCVS_ACPU_ENABLE_I                         =       3894,
  NVI_GPSONE_PASSWORD_I                          =       3895,
  NVI_VOIP_CALLERID_MODE_I                       =       3896,
  NVI_WLAN_MULTIDOMAIN_CAPABILITY_PREF_I         =       3897,
  NVI_UMTS_NBNS_ENABLE_I                         =       3898,
  NVI_SCUDIF_CALLSETUP_PREF_I                    =       3899,
  NVI_VOIP_REFER_SUBSCRIPTION_EXPIRES_DURATION_I =       3900,
  NVI_VOIP_NOTIFY_REFER_RESPONSE_DURATION_I      =       3901,
  NVI_SMS_SERVICE_OPTION_I                       =       3902,
  NVI_DRM_BIND_SIM_RIGHTS_I                      =       3903,
  NVI_GSM_850_PA_TEMP_COMP_MAX_PWR_I             =       3904,
  NVI_GSM_PA_TEMP_COMP_MAX_PWR_I                 =       3905,
  NVI_DCS_PA_TEMP_COMP_MAX_PWR_I                 =       3906,
  NVI_GSM_1900_PA_TEMP_COMP_MAX_PWR_I            =       3907,
  NVI_GSM_RSSI_TEMP_VALUES_I                     =       3908,
  NVI_GSM_850_RX_GAIN_RANGE_1_TEMP_COMP_I        =       3909,
  NVI_GSM_RX_GAIN_RANGE_1_TEMP_COMP_I            =       3910,
  NVI_DCS_RX_GAIN_RANGE_1_TEMP_COMP_I            =       3911,
  NVI_GSM_1900_RX_GAIN_RANGE_1_TEMP_COMP_I       =       3912,
  NVI_GSM_850_RX_GAIN_RANGE_2_TEMP_COMP_I        =       3913,
  NVI_GSM_RX_GAIN_RANGE_2_TEMP_COMP_I            =       3914,
  NVI_DCS_RX_GAIN_RANGE_2_TEMP_COMP_I            =       3915,
  NVI_GSM_1900_RX_GAIN_RANGE_2_TEMP_COMP_I       =       3916,
  NVI_GSM_850_RX_GAIN_RANGE_3_TEMP_COMP_I        =       3917,
  NVI_GSM_RX_GAIN_RANGE_3_TEMP_COMP_I            =       3918,
  NVI_DCS_RX_GAIN_RANGE_3_TEMP_COMP_I            =       3919,
  NVI_GSM_1900_RX_GAIN_RANGE_3_TEMP_COMP_I       =       3920,
  NVI_GSM_850_RX_GAIN_RANGE_4_TEMP_COMP_I        =       3921,
  NVI_GSM_RX_GAIN_RANGE_4_TEMP_COMP_I            =       3922,
  NVI_DCS_RX_GAIN_RANGE_4_TEMP_COMP_I            =       3923,
  NVI_GSM_1900_RX_GAIN_RANGE_4_TEMP_COMP_I       =       3924,
  NVI_GSM_850_RX_GAIN_RANGE_5_TEMP_COMP_I        =       3925,
  NVI_GSM_RX_GAIN_RANGE_5_TEMP_COMP_I            =       3926,
  NVI_DCS_RX_GAIN_RANGE_5_TEMP_COMP_I            =       3927,
  NVI_GSM_1900_RX_GAIN_RANGE_5_TEMP_COMP_I       =       3928,
  NVI_DCVSAPPS_NV_I                              =       3929,
  NVI_GPS1_SEC_UPDATE_RATE_I                     =       3930,
  NVI_MMGSDI_ME_CONFIG_PARAM_I                   =       3931,
  NVI_DS_MIP_DEREG_RETRIES_I                     =       3932,
  NVI_RUIM_NO_SUPPORT_I                          =       3933,
  NVI_UIM_SELECT_DEFAULT_USIM_APP_I              =       3934,
  NVI_DETECT_HW_RESET_I                          =       3935,
  NVI_WCDMA_IM_LEVEL_4_I                         =       3936,
  NVI_WCDMA_LNA_OFFSET_VS_FREQ_4_I               =       3937,
  NVI_WCDMA_LNA_RANGE_FALL_4_I                   =       3938,
  NVI_WCDMA_LNA_RANGE_OFFSET_4_I                 =       3939,
  NVI_WCDMA_LNA_RANGE_RISE_4_I                   =       3940,
  NVI_WCDMA_1900_IM_LEVEL_4_I                    =       3941,
  NVI_WCDMA_1900_LNA_OFFSET_VS_FREQ_4_I          =       3942,
  NVI_WCDMA_1900_LNA_RANGE_FALL_4_I              =       3943,
  NVI_WCDMA_1900_LNA_RANGE_OFFSET_4_I            =       3944,
  NVI_WCDMA_1900_LNA_RANGE_RISE_4_I              =       3945,
  NVI_WCDMA_800_IM_LEVEL_4_I                     =       3946,
  NVI_WCDMA_800_LNA_OFFSET_VS_FREQ_4_I           =       3947,
  NVI_WCDMA_800_LNA_RANGE_FALL_4_I               =       3948,
  NVI_WCDMA_800_LNA_RANGE_OFFSET_4_I             =       3949,
  NVI_WCDMA_800_LNA_RANGE_RISE_4_I               =       3950,
  NVI_WCDMA_1800_IM_LEVEL_4_I                    =       3951,
  NVI_WCDMA_1800_LNA_OFFSET_VS_FREQ_4_I          =       3952,
  NVI_WCDMA_1800_LNA_RANGE_FALL_4_I              =       3953,
  NVI_WCDMA_1800_LNA_RANGE_OFFSET_4_I            =       3954,
  NVI_WCDMA_1800_LNA_RANGE_RISE_4_I              =       3955,
  NVI_WCDMA_900_IM_LEVEL_4_I                     =       3956,
  NVI_WCDMA_900_LNA_OFFSET_VS_FREQ_4_I           =       3957,
  NVI_WCDMA_900_LNA_RANGE_FALL_4_I               =       3958,
  NVI_WCDMA_900_LNA_RANGE_OFFSET_4_I             =       3959,
  NVI_WCDMA_900_LNA_RANGE_RISE_4_I               =       3960,
  NVI_WCDMA_BC4_IM_LEVEL_4_I                     =       3961,
  NVI_WCDMA_BC4_LNA_OFFSET_VS_FREQ_4_I           =       3962,
  NVI_WCDMA_BC4_LNA_RANGE_FALL_4_I               =       3963,
  NVI_WCDMA_BC4_LNA_RANGE_OFFSET_4_I             =       3964,
  NVI_WCDMA_BC4_LNA_RANGE_RISE_4_I               =       3965,
  NVI_IPV6_PRIVACY_EXTENSIONS_ENABLED_I          =       3966,
  NVI_IPV6_PRIVATE_ADDRESS_CONFIG_I              =       3967,
  NVI_GPRS_GEA_ALGORITHMS_SUPPORTED_I            =       3968,
  NVI_REX_TRACE_I                                =       3969,
  NVI_C1_WCDMA_1800_VGA_GAIN_OFFSET_I            =       3970,
  NVI_C1_WCDMA_1800_VGA_GAIN_OFFSET_VS_FREQ_I    =       3971,
  NVI_C1_WCDMA_1800_VGA_GAIN_OFFSET_VS_TEMP_I    =       3972,
  NVI_C1_WCDMA_1800_LNA_RANGE_RISE_I             =       3973,
  NVI_C1_WCDMA_1800_LNA_RANGE_RISE_2_I           =       3974,
  NVI_C1_WCDMA_1800_LNA_RANGE_RISE_3_I           =       3975,
  NVI_C1_WCDMA_1800_LNA_RANGE_RISE_4_I           =       3976,
  NVI_C1_WCDMA_1800_LNA_RANGE_FALL_I             =       3977,
  NVI_C1_WCDMA_1800_LNA_RANGE_FALL_2_I           =       3978,
  NVI_C1_WCDMA_1800_LNA_RANGE_FALL_3_I           =       3979,
  NVI_C1_WCDMA_1800_LNA_RANGE_FALL_4_I           =       3980,
  NVI_C1_WCDMA_1800_IM_LEVEL_I                   =       3981,
  NVI_C1_WCDMA_1800_IM_LEVEL_2_I                 =       3982,
  NVI_C1_WCDMA_1800_IM_LEVEL_3_I                 =       3983,
  NVI_C1_WCDMA_1800_IM_LEVEL_4_I                 =       3984,
  NVI_C1_WCDMA_1800_LNA_RANGE_OFFSET_2_I         =       3985,
  NVI_C1_WCDMA_1800_LNA_RANGE_OFFSET_3_I         =       3986,
  NVI_C1_WCDMA_1800_LNA_RANGE_OFFSET_4_I         =       3987,
  NVI_C1_WCDMA_1800_LNA_OFFSET_VS_FREQ_2_I       =       3988,
  NVI_C1_WCDMA_1800_LNA_OFFSET_VS_FREQ_3_I       =       3989,
  NVI_C1_WCDMA_1800_LNA_OFFSET_VS_FREQ_4_I       =       3990,
  NVI_C1_WCDMA_1800_IM2_I_VALUE_I                =       3991,
  NVI_C1_WCDMA_1800_IM2_Q_VALUE_I                =       3992,
  NVI_C1_WCDMA_1800_IM2_TRANSCONDUCTOR_VALUE_I   =       3993,
  NVI_C1_WCDMA_1800_NONBYPASS_TIMER_I            =       3994,
  NVI_C1_WCDMA_1800_BYPASS_TIMER_I               =       3995,
  NVI_C1_WCDMA_1800_LNA_RANGE_OFFSET_I           =       3996,
  NVI_C1_WCDMA_1800_LNA_OFFSET_VS_FREQ_I         =       3997,
  NVI_C1_WCDMA_1800_RX_CAL_CHAN_I                =       3998,
  NVI_C1_WCDMA_900_VGA_GAIN_OFFSET_I             =       3999,
  NVI_C1_WCDMA_900_VGA_GAIN_OFFSET_VS_FREQ_I     =       4000,
  NVI_C1_WCDMA_900_VGA_GAIN_OFFSET_VS_TEMP_I     =       4001,
  NVI_C1_WCDMA_900_LNA_RANGE_RISE_I              =       4002,
  NVI_C1_WCDMA_900_LNA_RANGE_RISE_2_I            =       4003,
  NVI_C1_WCDMA_900_LNA_RANGE_RISE_3_I            =       4004,
  NVI_C1_WCDMA_900_LNA_RANGE_RISE_4_I            =       4005,
  NVI_C1_WCDMA_900_LNA_RANGE_FALL_I              =       4006,
  NVI_C1_WCDMA_900_LNA_RANGE_FALL_2_I            =       4007,
  NVI_C1_WCDMA_900_LNA_RANGE_FALL_3_I            =       4008,
  NVI_C1_WCDMA_900_LNA_RANGE_FALL_4_I            =       4009,
  NVI_C1_WCDMA_900_IM_LEVEL_I                    =       4010,
  NVI_C1_WCDMA_900_IM_LEVEL_2_I                  =       4011,
  NVI_C1_WCDMA_900_IM_LEVEL_3_I                  =       4012,
  NVI_C1_WCDMA_900_IM_LEVEL_4_I                  =       4013,
  NVI_C1_WCDMA_900_LNA_RANGE_OFFSET_2_I          =       4014,
  NVI_C1_WCDMA_900_LNA_RANGE_OFFSET_3_I          =       4015,
  NVI_C1_WCDMA_900_LNA_RANGE_OFFSET_4_I          =       4016,
  NVI_C1_WCDMA_900_LNA_OFFSET_VS_FREQ_2_I        =       4017,
  NVI_C1_WCDMA_900_LNA_OFFSET_VS_FREQ_3_I        =       4018,
  NVI_C1_WCDMA_900_LNA_OFFSET_VS_FREQ_4_I        =       4019,
  NVI_C1_WCDMA_900_IM2_I_VALUE_I                 =       4020,
  NVI_C1_WCDMA_900_IM2_Q_VALUE_I                 =       4021,
  NVI_C1_WCDMA_900_IM2_TRANSCONDUCTOR_VALUE_I    =       4022,
  NVI_C1_WCDMA_900_NONBYPASS_TIMER_I             =       4023,
  NVI_C1_WCDMA_900_BYPASS_TIMER_I                =       4024,
  NVI_C1_WCDMA_900_LNA_RANGE_OFFSET_I            =       4025,
  NVI_C1_WCDMA_900_LNA_OFFSET_VS_FREQ_I          =       4026,
  NVI_C1_WCDMA_900_RX_CAL_CHAN_I                 =       4027,
  NVI_C1_WCDMA_BC4_VGA_GAIN_OFFSET_I             =       4028,
  NVI_C1_WCDMA_BC4_VGA_GAIN_OFFSET_VS_FREQ_I     =       4029,
  NVI_C1_WCDMA_BC4_VGA_GAIN_OFFSET_VS_TEMP_I     =       4030,
  NVI_C1_WCDMA_BC4_LNA_RANGE_RISE_I              =       4031,
  NVI_C1_WCDMA_BC4_LNA_RANGE_RISE_2_I            =       4032,
  NVI_C1_WCDMA_BC4_LNA_RANGE_RISE_3_I            =       4033,
  NVI_C1_WCDMA_BC4_LNA_RANGE_RISE_4_I            =       4034,
  NVI_C1_WCDMA_BC4_LNA_RANGE_FALL_I              =       4035,
  NVI_C1_WCDMA_BC4_LNA_RANGE_FALL_2_I            =       4036,
  NVI_C1_WCDMA_BC4_LNA_RANGE_FALL_3_I            =       4037,
  NVI_C1_WCDMA_BC4_LNA_RANGE_FALL_4_I            =       4038,
  NVI_C1_WCDMA_BC4_IM_LEVEL_I                    =       4039,
  NVI_C1_WCDMA_BC4_IM_LEVEL_2_I                  =       4040,
  NVI_C1_WCDMA_BC4_IM_LEVEL_3_I                  =       4041,
  NVI_C1_WCDMA_BC4_IM_LEVEL_4_I                  =       4042,
  NVI_C1_WCDMA_BC4_LNA_RANGE_OFFSET_2_I          =       4043,
  NVI_C1_WCDMA_BC4_LNA_RANGE_OFFSET_3_I          =       4044,
  NVI_C1_WCDMA_BC4_LNA_RANGE_OFFSET_4_I          =       4045,
  NVI_C1_WCDMA_BC4_LNA_OFFSET_VS_FREQ_2_I        =       4046,
  NVI_C1_WCDMA_BC4_LNA_OFFSET_VS_FREQ_3_I        =       4047,
  NVI_C1_WCDMA_BC4_LNA_OFFSET_VS_FREQ_4_I        =       4048,
  NVI_C1_WCDMA_BC4_IM2_I_VALUE_I                 =       4049,
  NVI_C1_WCDMA_BC4_IM2_Q_VALUE_I                 =       4050,
  NVI_C1_WCDMA_BC4_IM2_TRANSCONDUCTOR_VALUE_I    =       4051,
  NVI_C1_WCDMA_BC4_NONBYPASS_TIMER_I             =       4052,
  NVI_C1_WCDMA_BC4_BYPASS_TIMER_I                =       4053,
  NVI_C1_WCDMA_BC4_LNA_RANGE_OFFSET_I            =       4054,
  NVI_C1_WCDMA_BC4_LNA_OFFSET_VS_FREQ_I          =       4055,
  NVI_C1_WCDMA_BC4_RX_CAL_CHAN_I                 =       4056,
  NVI_MF_PREF_RF_CHAN_LIST_I                     =       4057,
  NVI_MF_IC_UPDATE_RATE_I                        =       4058,
  NVI_NPT_COUNT_I                                =       4059,
  NVI_SMS_BEARER_PREFS_I                         =       4060,
  NVI_BT_DISABLED_I                              =       4061,
  NVI_HS_USB_CURRENT_COMPOSITION_I               =       4062,
  NVI_WLAN_ENABLE_BT_COEX_I                      =       4063,
  NVI_HDR_EMPA_SUPPORTED_I                       =       4064,
  NVI_AAGPS_XTRA_ENABLED_I                       =       4065,
  NVI_AAGPS_XTRA_DOWNLOAD_INTERVAL_I             =       4066,
  NVI_AAGPS_XTRA_NUM_DOWNLOAD_ATTEMPTS_I         =       4067,
  NVI_AAGPS_XTRA_PRIMARY_SERVER_URL_I            =       4068,
  NVI_AAGPS_XTRA_SECONDARY_SERVER_URL_I          =       4069,
  NVI_AAGPS_XTRA_TIME_BETWEEN_ATTEMPTS_I         =       4070,
  NVI_AAGPS_XTRA_TERTIARY_SERVER_URL_I           =       4071,
  NVI_AAGPS_XTRA_AUTO_DOWNLOAD_ENABLED_I         =       4072,
  NVI_AAGPS_XTRA_TIME_INFO_ENABLED_I             =       4073,
  NVI_AAGPS_XTRA_TIME_INFO_UNC_THRESH_I          =       4074,
  NVI_AAGPS_XTRA_TIME_INFO_DELAY_THRESH_I        =       4075,
  NVI_AAGPS_XTRA_PRIMARY_SNTP_SERVER_URL_I       =       4076,
  NVI_AAGPS_XTRA_SECONDARY_SNTP_SERVER_URL_I     =       4077,
  NVI_AAGPS_XTRA_TERTIARY_SNTP_SERVER_URL_I      =       4078,
  NVI_VOIP_PRECONDITION_ENABLE_I                 =       4079,
  NVI_AAGPS_IPC_DM_THREAD_MASK_I                 =       4080,
  NVI_MF_RF_OVERRIDE_DESC_I                      =       4081,
  NVI_MF_DMTT_PARAMS_I                           =       4082,
  NVI_CAMERA_DEFAULT_PREVIEW_ROTATION_I          =       4083,
  NVI_RF_BC_CONFIG_DIV_I                         =       4084,
  NVI_GPS1_XTRA_ENABLED_I                        =       4085,
  NVI_GPS1_XTRA_DOWNLOAD_INTERVAL_I              =       4086,
  NVI_GPS1_XTRA_NUM_DOWNLOAD_ATTEMPTS_I          =       4087,
  NVI_GPS1_XTRA_TIME_BETWEEN_ATTEMPTS_I          =       4088,
  NVI_GPS1_XTRA_AUTO_DOWNLOAD_ENABLED_I          =       4089,
  NVI_GPS1_XTRA_PRIMARY_SERVER_URL_I             =       4090,
  NVI_GPS1_XTRA_SECONDARY_SERVER_URL_I           =       4091,
  NVI_GPS1_XTRA_TERTIARY_SERVER_URL_I            =       4092,
  NVI_DB_LP_SEC_I                                =       4093,
  NVI_DB_LTM_OFF_I                               =       4094,
  NVI_DB_DAYLT_I                                 =       4095,
  NVI_BC0_TX_PDM_LIN_0_I                         =       4096,
  NVI_BC0_TX_PDM_LIN_1_I                         =       4097,
  NVI_BC0_TX_PDM_LIN_2_I                         =       4098,
  NVI_BC0_TX_PDM_LIN_3_I                         =       4099,
  NVI_BC1_TX_PDM_LIN_0_I                         =       4100,
  NVI_BC1_TX_PDM_LIN_1_I                         =       4101,
  NVI_BC1_TX_PDM_LIN_2_I                         =       4102,
  NVI_BC1_TX_PDM_LIN_3_I                         =       4103,
  NVI_BC3_TX_PDM_LIN_0_I                         =       4104,
  NVI_BC3_TX_PDM_LIN_1_I                         =       4105,
  NVI_BC3_TX_PDM_LIN_2_I                         =       4106,
  NVI_BC3_TX_PDM_LIN_3_I                         =       4107,
  NVI_BC4_TX_PDM_LIN_0_I                         =       4108,
  NVI_BC4_TX_PDM_LIN_1_I                         =       4109,
  NVI_BC4_TX_PDM_LIN_2_I                         =       4110,
  NVI_BC4_TX_PDM_LIN_3_I                         =       4111,
  NVI_BC5_TX_PDM_LIN_0_I                         =       4112,
  NVI_BC5_TX_PDM_LIN_1_I                         =       4113,
  NVI_BC5_TX_PDM_LIN_2_I                         =       4114,
  NVI_BC5_TX_PDM_LIN_3_I                         =       4115,
  NVI_BC6_TX_PDM_LIN_0_I                         =       4116,
  NVI_BC6_TX_PDM_LIN_1_I                         =       4117,
  NVI_BC6_TX_PDM_LIN_2_I                         =       4118,
  NVI_BC6_TX_PDM_LIN_3_I                         =       4119,
  NVI_BC11_TX_PDM_LIN_0_I                        =       4120,
  NVI_BC11_TX_PDM_LIN_1_I                        =       4121,
  NVI_BC11_TX_PDM_LIN_2_I                        =       4122,
  NVI_BC11_TX_PDM_LIN_3_I                        =       4123,
  NVI_BC14_TX_PDM_LIN_0_I                        =       4124,
  NVI_BC14_TX_PDM_LIN_1_I                        =       4125,
  NVI_BC14_TX_PDM_LIN_2_I                        =       4126,
  NVI_BC14_TX_PDM_LIN_3_I                        =       4127,
  NVI_BC15_TX_PDM_LIN_0_I                        =       4128,
  NVI_BC15_TX_PDM_LIN_1_I                        =       4129,
  NVI_BC15_TX_PDM_LIN_2_I                        =       4130,
  NVI_BC15_TX_PDM_LIN_3_I                        =       4131,
  NVI_HIT_ENABLE_I                               =       4132,
  NVI_VCI_PARAMETERS_I                           =       4133,
  NVI_DS707_GO_NULL_TIMER_1X_I                   =       4134,
  NVI_DS707_GO_NULL_TIMER_DO_I                   =       4135,
  NVI_WLAN_MAC_ADDRESS_I                         =       4136,
  NVI_CLK_REGIME_TEST_CFG_I                      =       4137,
  NVI_DVBH_PAT_ACQ_TIMEOUT_I                     =       4138,
  NVI_DVBH_PMT_ACQ_TIMEOUT_I                     =       4139,
  NVI_DVBH_INT_ACQ_TIMEOUT_I                     =       4140,
  NVI_DVBH_UHF_FREQ_BAND_RANGE_I                 =       4141,
  NVI_DVBH_VHF_FREQ_BAND_RANGE_I                 =       4142,
  NVI_DVBH_L_FREQ_BAND_RANGE_I                   =       4143,
  NVI_DVBH_UHF_BAND_BW_I                         =       4144,
  NVI_DVBH_UHF_BAND_OFFSET_I                     =       4145,
  NVI_DVBH_VHF_BAND_BW_I                         =       4146,
  NVI_DVBH_VHF_BAND_OFFSET_I                     =       4147,
  NVI_DVBH_L_BAND_BW_I                           =       4148,
  NVI_DVBH_L_BAND_OFFSET_I                       =       4149,
  NVI_DVBH_PLATFORM_NW_ID_LIST_I                 =       4150,
  NVI_HTTP_PROXY_SERVER_ADDR_I                   =       4151,
  NVI_HTTP_PROXY_SERVER_ADDR_ALTERNATE_I         =       4152,
  NVI_CGPS_1X_PDE_SERVER_ADDR_IPV4_I             =       4153,
  NVI_CGPS_1X_PDE_SERVER_ADDR_IPV6_I             =       4154,
  NVI_CGPS_1X_PDE_SERVER_ADDR_URL_I              =       4155,
  NVI_CGPS_1X_MPC_SERVER_ADDR_IPV4_I             =       4156,
  NVI_CGPS_1X_MPC_SERVER_ADDR_IPV6_I             =       4157,
  NVI_CGPS_1X_MPC_SERVER_ADDR_URL_I              =       4158,
  NVI_CGPS_UMTS_PDE_SERVER_ADDR_IPV4_I           =       4159,
  NVI_CGPS_UMTS_PDE_SERVER_ADDR_IPV6_I           =       4160,
  NVI_CGPS_UMTS_PDE_SERVER_ADDR_URL_I            =       4161,
  NVI_CGPS_1X_PDE_SERVER_PORT_I                  =       4162,
  NVI_CGPS_1X_MPC_SERVER_PORT_I                  =       4163,
  NVI_CGPS_UMTS_PDE_SERVER_PORT_I                =       4164,
  NVI_CGPS_MO_METHOD_I                           =       4165,
  NVI_CGPS_NMEA_SENTENCE_TYPE_I                  =       4166,
  NVI_CGPS_MAX_OSC_UNC_ACTIVE_SYS_I              =       4167,
  NVI_CGPS_MAX_OSC_UNC_RGS_I                     =       4168,
  NVI_CGPS_MAX_OSC_UNC_TEMP_TBL_I                =       4169,
  NVI_CGPS_MAX_OSC_UNC_RGS_OLD_I                 =       4170,
  NVI_CGPS_MAX_CARRIER_CODE_FILTER_I             =       4171,
  NVI_CGPS_MAX_INTEGRATE_MS_I                    =       4172,
  NVI_CGPS_ME_RESERVED1_I                        =       4173,
  NVI_CGPS_ME_RESERVED2_I                        =       4174,
  NVI_CGPS_ME_RESERVED3_I                        =       4175,
  NVI_CGPS_ME_RESERVED4_I                        =       4176,
  NVI_FTM_MODE_BOOT_COUNT_I                      =       4177,
  NVI_MF_RSSI_CAL_VS_FREQ_4_I                    =       4178,
  NVI_MF_RSSI_CAL_VS_FREQ_5_I                    =       4179,
  NVI_NAS_RELEASE_COMPLIANCE_I                   =       4180,
  NVI_WCDMA_BC4_HS_IM_LEVEL_4_I                  =       4181,
  NVI_WCDMA_BC4_HS_IM_LEVEL_3_I                  =       4182,
  NVI_WCDMA_BC4_HS_IM_LEVEL_2_I                  =       4183,
  NVI_WCDMA_BC4_HS_IM_LEVEL_I                    =       4184,
  NVI_WCDMA_BC4_HS_LNA_RANGE_RISE_4_I            =       4185,
  NVI_WCDMA_BC4_HS_LNA_RANGE_RISE_3_I            =       4186,
  NVI_WCDMA_BC4_HS_LNA_RANGE_RISE_2_I            =       4187,
  NVI_WCDMA_BC4_HS_LNA_RANGE_RISE_I              =       4188,
  NVI_WCDMA_BC4_HS_LNA_RANGE_FALL_2_I            =       4189,
  NVI_WCDMA_BC4_HS_LNA_RANGE_FALL_3_I            =       4190,
  NVI_WCDMA_BC4_HS_LNA_RANGE_FALL_4_I            =       4191,
  NVI_WCDMA_BC4_HS_LNA_RANGE_FALL_I              =       4192,
  NVI_WCDMA_900_HS_LNA_RANGE_RISE_2_I            =       4193,
  NVI_WCDMA_900_HS_LNA_RANGE_RISE_I              =       4194,
  NVI_WCDMA_900_HS_LNA_RANGE_RISE_3_I            =       4195,
  NVI_WCDMA_900_HS_LNA_RANGE_RISE_4_I            =       4196,
  NVI_WCDMA_900_HS_LNA_RANGE_FALL_4_I            =       4197,
  NVI_WCDMA_900_HS_LNA_RANGE_FALL_3_I            =       4198,
  NVI_WCDMA_900_HS_LNA_RANGE_FALL_2_I            =       4199,
  NVI_WCDMA_900_HS_LNA_RANGE_FALL_I              =       4200,
  NVI_WCDMA_900_HS_IM_LEVEL_2_I                  =       4201,
  NVI_WCDMA_900_HS_IM_LEVEL_3_I                  =       4202,
  NVI_WCDMA_900_HS_IM_LEVEL_I                    =       4203,
  NVI_WCDMA_900_HS_IM_LEVEL_4_I                  =       4204,
  NVI_WCDMA_1800_HS_LNA_RANGE_RISE_3_I           =       4205,
  NVI_WCDMA_1800_HS_LNA_RANGE_RISE_4_I           =       4206,
  NVI_WCDMA_1800_HS_LNA_RANGE_RISE_2_I           =       4207,
  NVI_WCDMA_1800_HS_LNA_RANGE_RISE_I             =       4208,
  NVI_WCDMA_1800_HS_LNA_RANGE_FALL_3_I           =       4209,
  NVI_WCDMA_1800_HS_LNA_RANGE_FALL_2_I           =       4210,
  NVI_WCDMA_1800_HS_LNA_RANGE_FALL_4_I           =       4211,
  NVI_WCDMA_1800_HS_LNA_RANGE_FALL_I             =       4212,
  NVI_WCDMA_1800_HS_IM_LEVEL_4_I                 =       4213,
  NVI_WCDMA_1800_HS_IM_LEVEL_3_I                 =       4214,
  NVI_WCDMA_1800_HS_IM_LEVEL_2_I                 =       4215,
  NVI_WCDMA_1800_HS_IM_LEVEL_I                   =       4216,
  NVI_WCDMA_1900_HS_LNA_RANGE_FALL_4_I           =       4217,
  NVI_WCDMA_1900_HS_LNA_RANGE_FALL_3_I           =       4218,
  NVI_WCDMA_1900_HS_LNA_RANGE_FALL_2_I           =       4219,
  NVI_WCDMA_1900_HS_LNA_RANGE_FALL_I             =       4220,
  NVI_WCDMA_1900_HS_LNA_RANGE_RISE_4_I           =       4221,
  NVI_WCDMA_1900_HS_LNA_RANGE_RISE_3_I           =       4222,
  NVI_WCDMA_1900_HS_LNA_RANGE_RISE_2_I           =       4223,
  NVI_WCDMA_1900_HS_LNA_RANGE_RISE_I             =       4224,
  NVI_WCDMA_1900_HS_IM_LEVEL_2_I                 =       4225,
  NVI_WCDMA_1900_HS_IM_LEVEL_I                   =       4226,
  NVI_WCDMA_1900_HS_IM_LEVEL_3_I                 =       4227,
  NVI_WCDMA_1900_HS_IM_LEVEL_4_I                 =       4228,
  NVI_WCDMA_800_HS_LNA_RANGE_RISE_4_I            =       4229,
  NVI_WCDMA_800_HS_LNA_RANGE_RISE_3_I            =       4230,
  NVI_WCDMA_800_HS_LNA_RANGE_RISE_2_I            =       4231,
  NVI_WCDMA_800_HS_LNA_RANGE_RISE_I              =       4232,
  NVI_WCDMA_800_HS_LNA_RANGE_FALL_2_I            =       4233,
  NVI_WCDMA_800_HS_LNA_RANGE_FALL_I              =       4234,
  NVI_WCDMA_800_HS_LNA_RANGE_FALL_3_I            =       4235,
  NVI_WCDMA_800_HS_LNA_RANGE_FALL_4_I            =       4236,
  NVI_WCDMA_800_HS_IM_LEVEL_3_I                  =       4237,
  NVI_WCDMA_800_HS_IM_LEVEL_2_I                  =       4238,
  NVI_WCDMA_800_HS_IM_LEVEL_I                    =       4239,
  NVI_WCDMA_800_HS_IM_LEVEL_4_I                  =       4240,
  NVI_WCDMA_HS_IM_LEVEL_2_I                      =       4241,
  NVI_WCDMA_HS_IM_LEVEL_3_I                      =       4242,
  NVI_WCDMA_HS_IM_LEVEL_4_I                      =       4243,
  NVI_WCDMA_HS_IM_LEVEL_I                        =       4244,
  NVI_WCDMA_HS_LNA_RANGE_FALL_4_I                =       4245,
  NVI_WCDMA_HS_LNA_RANGE_FALL_3_I                =       4246,
  NVI_WCDMA_HS_LNA_RANGE_FALL_2_I                =       4247,
  NVI_WCDMA_HS_LNA_RANGE_FALL_I                  =       4248,
  NVI_WCDMA_HS_LNA_RANGE_RISE_4_I                =       4249,
  NVI_WCDMA_HS_LNA_RANGE_RISE_3_I                =       4250,
  NVI_WCDMA_HS_LNA_RANGE_RISE_2_I                =       4251,
  NVI_WCDMA_HS_LNA_RANGE_RISE_I                  =       4252,
  NVI_BC0_TX_PDM_0_I                             =       4253,
  NVI_BC0_TX_PDM_1_I                             =       4254,
  NVI_BC0_TX_PDM_2_I                             =       4255,
  NVI_BC0_TX_PDM_3_I                             =       4256,
  NVI_BC1_TX_PDM_0_I                             =       4257,
  NVI_BC1_TX_PDM_1_I                             =       4258,
  NVI_BC1_TX_PDM_2_I                             =       4259,
  NVI_BC1_TX_PDM_3_I                             =       4260,
  NVI_BC3_TX_PDM_0_I                             =       4261,
  NVI_BC3_TX_PDM_1_I                             =       4262,
  NVI_BC3_TX_PDM_2_I                             =       4263,
  NVI_BC3_TX_PDM_3_I                             =       4264,
  NVI_BC4_TX_PDM_0_I                             =       4265,
  NVI_BC4_TX_PDM_1_I                             =       4266,
  NVI_BC4_TX_PDM_2_I                             =       4267,
  NVI_BC4_TX_PDM_3_I                             =       4268,
  NVI_BC5_TX_PDM_0_I                             =       4269,
  NVI_BC5_TX_PDM_1_I                             =       4270,
  NVI_BC5_TX_PDM_2_I                             =       4271,
  NVI_BC5_TX_PDM_3_I                             =       4272,
  NVI_BC6_TX_PDM_0_I                             =       4273,
  NVI_BC6_TX_PDM_1_I                             =       4274,
  NVI_BC6_TX_PDM_2_I                             =       4275,
  NVI_BC6_TX_PDM_3_I                             =       4276,
  NVI_BC11_TX_PDM_0_I                            =       4277,
  NVI_BC11_TX_PDM_1_I                            =       4278,
  NVI_BC11_TX_PDM_2_I                            =       4279,
  NVI_BC11_TX_PDM_3_I                            =       4280,
  NVI_BC14_TX_PDM_0_I                            =       4281,
  NVI_BC14_TX_PDM_1_I                            =       4282,
  NVI_BC14_TX_PDM_2_I                            =       4283,
  NVI_BC14_TX_PDM_3_I                            =       4284,
  NVI_BC15_TX_PDM_0_I                            =       4285,
  NVI_BC15_TX_PDM_1_I                            =       4286,
  NVI_BC15_TX_PDM_2_I                            =       4287,
  NVI_BC15_TX_PDM_3_I                            =       4288,
  NVI_BC0_TX_LIN_0_I                             =       4289,
  NVI_BC0_TX_LIN_1_I                             =       4290,
  NVI_BC0_TX_LIN_2_I                             =       4291,
  NVI_BC0_TX_LIN_3_I                             =       4292,
  NVI_BC1_TX_LIN_0_I                             =       4293,
  NVI_BC1_TX_LIN_1_I                             =       4294,
  NVI_BC1_TX_LIN_2_I                             =       4295,
  NVI_BC1_TX_LIN_3_I                             =       4296,
  NVI_BC3_TX_LIN_0_I                             =       4297,
  NVI_BC3_TX_LIN_1_I                             =       4298,
  NVI_BC3_TX_LIN_2_I                             =       4299,
  NVI_BC3_TX_LIN_3_I                             =       4300,
  NVI_BC4_TX_LIN_0_I                             =       4301,
  NVI_BC4_TX_LIN_1_I                             =       4302,
  NVI_BC4_TX_LIN_2_I                             =       4303,
  NVI_BC4_TX_LIN_3_I                             =       4304,
  NVI_BC5_TX_LIN_0_I                             =       4305,
  NVI_BC5_TX_LIN_1_I                             =       4306,
  NVI_BC5_TX_LIN_2_I                             =       4307,
  NVI_BC5_TX_LIN_3_I                             =       4308,
  NVI_BC6_TX_LIN_0_I                             =       4309,
  NVI_BC6_TX_LIN_1_I                             =       4310,
  NVI_BC6_TX_LIN_2_I                             =       4311,
  NVI_BC6_TX_LIN_3_I                             =       4312,
  NVI_BC11_TX_LIN_0_I                            =       4313,
  NVI_BC11_TX_LIN_1_I                            =       4314,
  NVI_BC11_TX_LIN_2_I                            =       4315,
  NVI_BC11_TX_LIN_3_I                            =       4316,
  NVI_BC14_TX_LIN_0_I                            =       4317,
  NVI_BC14_TX_LIN_1_I                            =       4318,
  NVI_BC14_TX_LIN_2_I                            =       4319,
  NVI_BC14_TX_LIN_3_I                            =       4320,
  NVI_BC15_TX_LIN_0_I                            =       4321,
  NVI_BC15_TX_LIN_1_I                            =       4322,
  NVI_BC15_TX_LIN_2_I                            =       4323,
  NVI_BC15_TX_LIN_3_I                            =       4324,
  NVI_HDR_RX_DIV_BC_ENABLE_MASK_I                =       4325,
  NVI_CDMA_RX_DIV_BC_ENABLE_MASK_I               =       4326,
  NVI_GSM_CARRIER_SUPPRESSION_I                  =       4327,
  NVI_GSM_850_CARRIER_SUPPRESSION_I              =       4328,
  NVI_GSM_DCS_CARRIER_SUPPRESSION_I              =       4329,
  NVI_GSM_1900_CARRIER_SUPPRESSION_I             =       4330,
  NVI_DVBH_STORE_NW_INFO_TO_EFS_I                =       4331,
  NVI_DVBH_EFS_NW_INFO_EXPIRY_TIME_I             =       4332,
  NVI_DVBH_NW_ACQ_ON_CELL_ID_MISMATCH_I          =       4333,
  NVI_DVBH_WAIT_FOR_NIT_OTHER_I                  =       4334,
  NVI_DVBH_ALL_NIT_ACQ_TIMEOUT_I                 =       4335,
  NVI_DVBH_LNKG_ACQ_TIMEOUT_I                    =       4336,
  NVI_DISPLAY_UPDATE_POWER_TEST_MODE_I           =       4337,
  NVI_BC0_PA_R_MAP_I                             =       4338,
  NVI_BC1_PA_R_MAP_I                             =       4339,
  NVI_BC3_PA_R_MAP_I                             =       4340,
  NVI_BC4_PA_R_MAP_I                             =       4341,
  NVI_BC5_PA_R_MAP_I                             =       4342,
  NVI_BC6_PA_R_MAP_I                             =       4343,
  NVI_BC11_PA_R_MAP_I                            =       4344,
  NVI_BC14_PA_R_MAP_I                            =       4345,
  NVI_BC15_PA_R_MAP_I                            =       4346,
  NVI_HDRSRCH_DBG_MSK_I                          =       4347,
  NVI_AIMS_ON_I                                  =       4348,
  NVI_MBP_RF_DVBH_CAL_FREQ_I                     =       4349,
  NVI_MBP_RF_DVBH_GS0_CAL_I                      =       4350,
  NVI_MBP_RF_DVBH_GS1_CAL_I                      =       4351,
  NVI_MBP_RF_DVBH_GS2_CAL_I                      =       4352,
  NVI_MBP_RF_DVBH_GS3_CAL_I                      =       4353,
  NVI_MBP_RF_DVBH_GS4_CAL_I                      =       4354,
  NVI_MBP_RF_DVBH_GS5_CAL_I                      =       4355,
  NVI_MBP_RF_MFLO_CAL_FREQ_I                     =       4356,
  NVI_MBP_RF_MFLO_GS0_CAL_I                      =       4357,
  NVI_MBP_RF_MFLO_GS1_CAL_I                      =       4358,
  NVI_MBP_RF_MFLO_GS2_CAL_I                      =       4359,
  NVI_MBP_RF_MFLO_GS3_CAL_I                      =       4360,
  NVI_MBP_RF_MFLO_GS4_CAL_I                      =       4361,
  NVI_MBP_RF_MFLO_GS5_CAL_I                      =       4362,
  NVI_QVP_APP_PSVT_ENABLE_FLAG_I                 =       4363,
  NVI_CGPS_DGPS_CORRECTIONS_ALLOWED_I            =       4364,
  NVI_CGPS_MAXIMUM_DGPS_INTERVAL_I               =       4365,
  NVI_CGPS_USE_FDIC_I                            =       4366,
  NVI_CGPS_ALTITUDE_HOLD_MODE_I                  =       4367,
  NVI_CGPS_PDOP_MASK_I                           =       4368,
  NVI_CGPS_2D_PDOP_MASK_I                        =       4369,
  NVI_CGPS_REFERENCE_MODE_I                      =       4370,
  NVI_CGPS_OPERATION_MODE_I                      =       4371,
  NVI_CGPS_ELEVATION_MASK_I                      =       4372,
  NVI_CGPS_MAX_ALMANAC_AGE_IN_WEEKS_I            =       4373,
  NVI_CGPS_STEERING_ON_STARTUP_I                 =       4374,
  NVI_ICMP6_ND_CONFIG_I                          =       4375,
  NVI_HS_USB_REMOTE_WAKEUP_DELAY_I               =       4376,
  NVI_DVBH_UHF_BAND_FREQ_RANGE_AND_OFFSET_1_I    =       4377,
  NVI_DVBH_UHF_BAND_FREQ_RANGE_AND_OFFSET_2_I    =       4378,
  NVI_DVBH_CELL_ID_RANGE_I                       =       4379,
  NVI_JCDMA_RUIM_ID_I                            =       4380,
  NVI_JCDMA_UIM_LOCK_I                           =       4381,
  NVI_DIAG_FTM_MODE_SWITCH_I                     =       4382,
  NVI_DHCP4_OPTIONS_MASK_I                       =       4383,
  NVI_DHCP6_OPTIONS_MASK_I                       =       4384,
  NVI_GPS1_XTRA_TIME_INFO_ENABLED_I              =       4385,
  NVI_GPS1_XTRA_TIME_INFO_UNC_THRESH_I           =       4386,
  NVI_GPS1_XTRA_TIME_INFO_DELAY_THRESH_I         =       4387,
  NVI_GPS1_XTRA_PRIMARY_SNTP_SERVER_URL_I        =       4388,
  NVI_GPS1_XTRA_SECONDARY_SNTP_SERVER_URL_I      =       4389,
  NVI_GPS1_XTRA_TERTIARY_SNTP_SERVER_URL_I       =       4390,
  NVI_MF_PROXY_I                                 =       4391,
  NVI_MF_PROXY_LEN_I                             =       4392,
  NVI_WCDMA_1900_C0_C1_DELAY_I                   =       4393,
  NVI_WCDMA_1800_C0_C1_DELAY_I                   =       4394,
  NVI_WCDMA_BC4_C0_C1_DELAY_I                    =       4395,
  NVI_WCDMA_900_C0_C1_DELAY_I                    =       4396,
  NVI_WCDMA_800_C0_C1_DELAY_I                    =       4397,
  NVI_IMS_FW_API_ENABLE_FLAG_I                   =       4398,
  NVI_WCDMA_REL6_TX_BETA_SCALING_COMP_I          =       4399,
  NVI_WCDMA_REL6_TX_AGC_OFFSET_I                 =       4400,
  NVI_WCDMA_REL6_TX_MPR_BACKOFF_I                =       4401,
  NVI_WCDMA_1900_REL6_TX_BETA_SCALING_COMP_I     =       4402,
  NVI_WCDMA_1900_REL6_TX_AGC_OFFSET_I            =       4403,
  NVI_WCDMA_1900_REL6_TX_MPR_BACKOFF_I           =       4404,
  NVI_WCDMA_800_REL6_TX_BETA_SCALING_COMP_I      =       4405,
  NVI_WCDMA_800_REL6_TX_AGC_OFFSET_I             =       4406,
  NVI_WCDMA_800_REL6_TX_MPR_BACKOFF_I            =       4407,
  NVI_WCDMA_BC4_REL6_TX_BETA_SCALING_COMP_I      =       4408,
  NVI_WCDMA_BC4_REL6_TX_AGC_OFFSET_I             =       4409,
  NVI_WCDMA_BC4_REL6_TX_MPR_BACKOFF_I            =       4410,
  NVI_XO_FIELD_CALIBRATION_I                     =       4411,
  NVI_XO_FACTORY_CALIBRATION_I                   =       4412,
  NVI_XO_CAL_CONV_I                              =       4413,
  NVI_WCDMA_LNA_PHASE_CTL_I                      =       4414,
  NVI_C1_WCDMA_LNA_PHASE_CTL_I                   =       4415,
  NVI_HOME_MCC_I                                 =       4416,
  NVI_USR_SID_TO_MCC_ASSOC_TBL_I                 =       4417,
  NVI_HS_BASED_PLUS_DIAL_SETTING_I               =       4418,
  NVI_DS_AT_V250_REGISTERS_I                     =       4419,
  NVI_DS_AT_S_REGISTERS_I                        =       4420,
  NVI_PROCESS_RESTART_SWITCH_I                   =       4421,
  NVI_HDRSCP_FORCE_AT_CONFIG_I                   =       4422,
  NVI_WCDMA_TX_COMP_VS_FREQ_0_SECONDARY_I        =       4423,
  NVI_WCDMA_TX_COMP_VS_FREQ_1_SECONDARY_I        =       4424,
  NVI_WCDMA_TX_COMP_VS_FREQ_2_SECONDARY_I        =       4425,
  NVI_WCDMA_TX_COMP_VS_FREQ_3_SECONDARY_I        =       4426,
  NVI_WCDMA_TX_COMP_VS_FREQ_SEC_PDM_LIST_I       =       4427,
  NVI_WCDMA_1900_TX_COMP_VS_FREQ_0_SECONDARY_I   =       4428,
  NVI_WCDMA_1900_TX_COMP_VS_FREQ_1_SECONDARY_I   =       4429,
  NVI_WCDMA_1900_TX_COMP_VS_FREQ_2_SECONDARY_I   =       4430,
  NVI_WCDMA_1900_TX_COMP_VS_FREQ_3_SECONDARY_I   =       4431,
  NVI_WCDMA_1900_TX_COMP_VS_FREQ_SEC_PDM_LIST_I  =       4432,
  NVI_WCDMA_800_TX_COMP_VS_FREQ_0_SECONDARY_I    =       4433,
  NVI_WCDMA_800_TX_COMP_VS_FREQ_1_SECONDARY_I    =       4434,
  NVI_WCDMA_800_TX_COMP_VS_FREQ_2_SECONDARY_I    =       4435,
  NVI_WCDMA_800_TX_COMP_VS_FREQ_3_SECONDARY_I    =       4436,
  NVI_WCDMA_800_TX_COMP_VS_FREQ_SEC_PDM_LIST_I   =       4437,
  NVI_WCDMA_1800_TX_COMP_VS_FREQ_0_SECONDARY_I   =       4438,
  NVI_WCDMA_1800_TX_COMP_VS_FREQ_1_SECONDARY_I   =       4439,
  NVI_WCDMA_1800_TX_COMP_VS_FREQ_2_SECONDARY_I   =       4440,
  NVI_WCDMA_1800_TX_COMP_VS_FREQ_3_SECONDARY_I   =       4441,
  NVI_WCDMA_1800_TX_COMP_VS_FREQ_SEC_PDM_LIST_I  =       4442,
  NVI_WCDMA_BC4_TX_COMP_VS_FREQ_0_SECONDARY_I    =       4443,
  NVI_WCDMA_BC4_TX_COMP_VS_FREQ_1_SECONDARY_I    =       4444,
  NVI_WCDMA_BC4_TX_COMP_VS_FREQ_2_SECONDARY_I    =       4445,
  NVI_WCDMA_BC4_TX_COMP_VS_FREQ_3_SECONDARY_I    =       4446,
  NVI_WCDMA_BC4_TX_COMP_VS_FREQ_SEC_PDM_LIST_I   =       4447,
  NVI_WCDMA_900_TX_COMP_VS_FREQ_0_SECONDARY_I    =       4448,
  NVI_WCDMA_900_TX_COMP_VS_FREQ_1_SECONDARY_I    =       4449,
  NVI_WCDMA_900_TX_COMP_VS_FREQ_2_SECONDARY_I    =       4450,
  NVI_WCDMA_900_TX_COMP_VS_FREQ_3_SECONDARY_I    =       4451,
  NVI_WCDMA_900_TX_COMP_VS_FREQ_SEC_PDM_LIST_I   =       4452,
  NVI_CUST_UQCN_C2K_VERSION_I                    =       4453,
  NVI_CUST_UQCN_UMTS_VERSION_I                   =       4454,
  NVI_BC0_TX_PWR_COMP0_I                         =       4455,
  NVI_BC0_TX_PWR_COMP1_I                         =       4456,
  NVI_BC0_TX_PWR_COMP2_I                         =       4457,
  NVI_BC0_TX_PWR_COMP3_I                         =       4458,
  NVI_BC1_TX_PWR_COMP0_I                         =       4459,
  NVI_BC1_TX_PWR_COMP1_I                         =       4460,
  NVI_BC1_TX_PWR_COMP2_I                         =       4461,
  NVI_BC1_TX_PWR_COMP3_I                         =       4462,
  NVI_BC3_TX_PWR_COMP0_I                         =       4463,
  NVI_BC3_TX_PWR_COMP1_I                         =       4464,
  NVI_BC3_TX_PWR_COMP2_I                         =       4465,
  NVI_BC3_TX_PWR_COMP3_I                         =       4466,
  NVI_BC5_TX_PWR_COMP0_I                         =       4467,
  NVI_BC5_TX_PWR_COMP1_I                         =       4468,
  NVI_BC5_TX_PWR_COMP2_I                         =       4469,
  NVI_BC5_TX_PWR_COMP3_I                         =       4470,
  NVI_BC6_TX_PWR_COMP0_I                         =       4471,
  NVI_BC6_TX_PWR_COMP1_I                         =       4472,
  NVI_BC6_TX_PWR_COMP2_I                         =       4473,
  NVI_BC6_TX_PWR_COMP3_I                         =       4474,
  NVI_BC11_TX_PWR_COMP0_I                        =       4475,
  NVI_BC11_TX_PWR_COMP1_I                        =       4476,
  NVI_BC11_TX_PWR_COMP2_I                        =       4477,
  NVI_BC11_TX_PWR_COMP3_I                        =       4478,
  NVI_BC14_TX_PWR_COMP0_I                        =       4479,
  NVI_BC14_TX_PWR_COMP1_I                        =       4480,
  NVI_BC14_TX_PWR_COMP2_I                        =       4481,
  NVI_BC14_TX_PWR_COMP3_I                        =       4482,
  NVI_BC15_TX_PWR_COMP0_I                        =       4483,
  NVI_BC15_TX_PWR_COMP1_I                        =       4484,
  NVI_BC15_TX_PWR_COMP2_I                        =       4485,
  NVI_BC15_TX_PWR_COMP3_I                        =       4486,
  NVI_THERM_BINS_I                               =       4487,
  NVI_BC4_TX_PWR_COMP0_I                         =       4488,
  NVI_BC4_TX_PWR_COMP1_I                         =       4489,
  NVI_BC4_TX_PWR_COMP2_I                         =       4490,
  NVI_BC4_TX_PWR_COMP3_I                         =       4491,
  NVI_CGPS_QOS_OVERRIDE_ACC_THRESHOLD_I          =       4492,
  NVI_CGPS_QOS_OVERRIDE_TIME_I                   =       4493,
  NVI_WEB_INFO_I                                 =       4494,
  NVI_SIOTA_CALL_INFO_I                          =       4495,
  NVI_PHONE_BOOT_NAIURL_I                        =       4496,
  NVI_PHONE_BOOT_URL_I                           =       4497,
  NVI_DS_PHONE_RDF_URL_I                         =       4498,
  NVI_BROWSER_DOMAIN_TRUSTED_I                   =       4499,
  NVI_IOTA_COMMIT_I                              =       4500,
  NVI_DVBH_NIT_ACTUAL_ACQ_TIMEOUT_I              =       4501,
  NVI_HS_USB_DIAG_ON_LEGACY_USB_PORT_I           =       4502,
  NVI_HW_ENTROPY_I                               =       4503,
  NVI_CGPS_MEM_CONFIG_I                          =       4504,
  NVI_CGPS_NMEA_CONFIG_INFO_I                    =       4505,
  NVI_WCDMA_800_TIMER_HYSTERISIS_I               =       4506,
  NVI_WCDMA_900_TIMER_HYSTERISIS_I               =       4507,
  NVI_WCDMA_BC4_TIMER_HYSTERISIS_I               =       4508,
  NVI_WCDMA_1800_TIMER_HYSTERISIS_I              =       4509,
  NVI_WCDMA_1900_TIMER_HYSTERISIS_I              =       4510,
  NVI_WCDMA_2100_TIMER_HYSTERISIS_I              =       4511,
  NVI_WCDMA_800_TX_LIN_MASTER_0_ENH_I            =       4512,
  NVI_WCDMA_900_TX_LIN_MASTER_0_ENH_I            =       4513,
  NVI_WCDMA_BC4_TX_LIN_MASTER_0_ENH_I            =       4514,
  NVI_WCDMA_1800_TX_LIN_MASTER_0_ENH_I           =       4515,
  NVI_WCDMA_1900_TX_LIN_MASTER_0_ENH_I           =       4516,
  NVI_WCDMA_2100_TX_LIN_MASTER_0_ENH_I           =       4517,
  NVI_WCDMA_800_TX_PDM_LIN_0_ENH_I               =       4518,
  NVI_WCDMA_900_TX_PDM_LIN_0_ENH_I               =       4519,
  NVI_WCDMA_BC4_TX_PDM_LIN_0_ENH_I               =       4520,
  NVI_WCDMA_1800_TX_PDM_LIN_0_ENH_I              =       4521,
  NVI_WCDMA_1900_TX_PDM_LIN_0_ENH_I              =       4522,
  NVI_WCDMA_2100_TX_PDM_LIN_0_ENH_I              =       4523,
  NVI_GSM_850_KV_CAL_I                           =       4524,
  NVI_GSM_900_KV_CAL_I                           =       4525,
  NVI_GSM_1800_KV_CAL_I                          =       4526,
  NVI_GSM_1900_KV_CAL_I                          =       4527,
  NVI_BC1_BALUN_CTL_I                            =       4528,
  NVI_BC2_BALUN_CTL_I                            =       4529,
  NVI_BC3_BALUN_CTL_I                            =       4530,
  NVI_BC4_BALUN_CTL_I                            =       4531,
  NVI_BC6_BALUN_CTL_I                            =       4532,
  NVI_BC8_BALUN_CTL_I                            =       4533,
  NVI_BC9_BALUN_CTL_I                            =       4534,
  NVI_UNDP_HSU_VID_PID_I                         =       4535,
  NVI_UNDP_HSU_MFGSTR_I                          =       4536,
  NVI_UNDP_HSU_PRODSTR_I                         =       4537,
  NVI_RR_ACQ_DB_CHUNK_00_I                       =       4538,
  NVI_RR_ACQ_DB_CHUNK_01_I                       =       4539,
  NVI_RR_ACQ_DB_CHUNK_02_I                       =       4540,
  NVI_RR_ACQ_DB_CHUNK_03_I                       =       4541,
  NVI_RR_ACQ_DB_CHUNK_04_I                       =       4542,
  NVI_RR_ACQ_DB_CHUNK_05_I                       =       4543,
  NVI_RR_ACQ_DB_CHUNK_06_I                       =       4544,
  NVI_RR_ACQ_DB_CHUNK_07_I                       =       4545,
  NVI_NITZ_NW_INFO_MCC_I                         =       4546,
  NVI_NITZ_NW_INFO_MNC_I                         =       4547,
  NVI_WCDMA_HSUPA_CM_CTRL_I                      =       4548,
  NVI_GSM_850_SMPS_PDM_TBL_I                     =       4549,
  NVI_GSM_900_SMPS_PDM_TBL_I                     =       4550,
  NVI_GSM_1800_SMPS_PDM_TBL_I                    =       4551,
  NVI_GSM_1900_SMPS_PDM_TBL_I                    =       4552,
  NVI_WCDMA_1900_LNA_PHASE_CTL_I                 =       4553,
  NVI_C1_WCDMA_1900_LNA_PHASE_CTL_I              =       4554,
  NVI_WCDMA_800_LNA_PHASE_CTL_I                  =       4555,
  NVI_C1_WCDMA_800_LNA_PHASE_CTL_I               =       4556,
  NVI_WCDMA_BC4_LNA_PHASE_CTL_I                  =       4557,
  NVI_C1_WCDMA_BC4_LNA_PHASE_CTL_I               =       4558,
  NVI_WCDMA_900_LNA_PHASE_CTL_I                  =       4559,
  NVI_C1_WCDMA_900_LNA_PHASE_CTL_I               =       4560,
  NVI_WCDMA_1800_LNA_PHASE_CTL_I                 =       4561,
  NVI_C1_WCDMA_1800_LNA_PHASE_CTL_I              =       4562,
  NVI_DIAG_DIAGBUF_TX_SLEEP_TIME_NV_I            =       4563,
  NVI_DIAG_DIAGBUF_TX_SLEEP_THRESHOLD_NV_I       =       4564,
  NVI_REPEATED_ACCH_I                            =       4565,
  NVI_BC0_P2_RISE_FALL_OFF_I                     =       4566,
  NVI_BC1_P2_RISE_FALL_OFF_I                     =       4567,
  NVI_BC3_P2_RISE_FALL_OFF_I                     =       4568,
  NVI_BC4_P2_RISE_FALL_OFF_I                     =       4569,
  NVI_BC5_P2_RISE_FALL_OFF_I                     =       4570,
  NVI_BC6_P2_RISE_FALL_OFF_I                     =       4571,
  NVI_BC11_P2_RISE_FALL_OFF_I                    =       4572,
  NVI_BC14_P2_RISE_FALL_OFF_I                    =       4573,
  NVI_BC15_P2_RISE_FALL_OFF_I                    =       4574,
  NVI_BCX_BLOCK_P2_RISE_FALL_OFF_I               =       4575,
  NVI_BC0_P3_RISE_FALL_OFF_I                     =       4576,
  NVI_BC1_P3_RISE_FALL_OFF_I                     =       4577,
  NVI_BC3_P3_RISE_FALL_OFF_I                     =       4578,
  NVI_BC4_P3_RISE_FALL_OFF_I                     =       4579,
  NVI_BC5_P3_RISE_FALL_OFF_I                     =       4580,
  NVI_BC6_P3_RISE_FALL_OFF_I                     =       4581,
  NVI_BC11_P3_RISE_FALL_OFF_I                    =       4582,
  NVI_BC14_P3_RISE_FALL_OFF_I                    =       4583,
  NVI_BC15_P3_RISE_FALL_OFF_I                    =       4584,
  NVI_BCX_BLOCK_P3_RISE_FALL_OFF_I               =       4585,
  NVI_BC0_HDR_P2_RISE_FALL_OFF_I                 =       4586,
  NVI_BC1_HDR_P2_RISE_FALL_OFF_I                 =       4587,
  NVI_BC3_HDR_P2_RISE_FALL_OFF_I                 =       4588,
  NVI_BC4_HDR_P2_RISE_FALL_OFF_I                 =       4589,
  NVI_BC5_HDR_P2_RISE_FALL_OFF_I                 =       4590,
  NVI_BC6_HDR_P2_RISE_FALL_OFF_I                 =       4591,
  NVI_BC11_HDR_P2_RISE_FALL_OFF_I                =       4592,
  NVI_BC14_HDR_P2_RISE_FALL_OFF_I                =       4593,
  NVI_BC15_HDR_P2_RISE_FALL_OFF_I                =       4594,
  NVI_BCX_BLOCK_HDR_P2_RISE_FALL_OFF_I           =       4595,
  NVI_BC0_HDR_P3_RISE_FALL_OFF_I                 =       4596,
  NVI_BC1_HDR_P3_RISE_FALL_OFF_I                 =       4597,
  NVI_BC3_HDR_P3_RISE_FALL_OFF_I                 =       4598,
  NVI_BC4_HDR_P3_RISE_FALL_OFF_I                 =       4599,
  NVI_BC5_HDR_P3_RISE_FALL_OFF_I                 =       4600,
  NVI_BC6_HDR_P3_RISE_FALL_OFF_I                 =       4601,
  NVI_BC11_HDR_P3_RISE_FALL_OFF_I                =       4602,
  NVI_BC14_HDR_P3_RISE_FALL_OFF_I                =       4603,
  NVI_BC15_HDR_P3_RISE_FALL_OFF_I                =       4604,
  NVI_BCX_BLOCK_HDR_P3_RISE_FALL_OFF_I           =       4605,
  NVI_BT_TX_RFCAL_I                              =       4606,
  NVI_BT_LISBON_DISABLED_I                       =       4607,
  NVI_DS_AT_CSAS_CSCA_SETTINGS_I                 =       4608,
  NVI_DS_AT_CSAS_CSMP_SETTINGS_I                 =       4609,
  NVI_DS_AT_CSAS_CSCB_SETTINGS_I                 =       4610,
  NVI_UE_IMEISV_SVN_I                            =       4611,
  NVI_GPS_ENGINE_TYPE_I                          =       4612,
  NVI_UNDP_HSU_VID_PID2_I                        =       4613,
  NVI_UNDP_NOTEBOOK_INFO_I                       =       4614,
  NVI_DVBH_DO_FREQ_SCAN_AFTER_SYS_LOST_I         =       4615,
  NVI_DVBH_BAT_ACQ_TIMEOUT_I                     =       4616,
  NVI_DVBH_USE_NW_IDS_FOR_COMPLETE_NW_ACQ_I      =       4617,
  NVI_DVBH_INACTIVITY_TIMEOUT_I                  =       4618,
  NVI_DVBH_GET_PLATFORM_LIST_FROM_FIRST_NIT_I    =       4619,
  NVI_DVBH_UPDATE_NW_INFO_FROM_TS_I              =       4620,
  NVI_BC10_TX_LIN_MASTER0_I                      =       4621,
  NVI_BC10_TX_LIN_MASTER1_I                      =       4622,
  NVI_BC10_TX_LIN_MASTER2_I                      =       4623,
  NVI_BC10_TX_LIN_MASTER3_I                      =       4624,
  NVI_BC10_GPS1_RF_DELAY_I                       =       4625,
  NVI_BC10_TX_LIM_VS_TEMP_I                      =       4626,
  NVI_BC10_TX_COMP0_I                            =       4627,
  NVI_BC10_TX_COMP1_I                            =       4628,
  NVI_BC10_TX_COMP2_I                            =       4629,
  NVI_BC10_TX_COMP3_I                            =       4630,
  NVI_BC10_TX_LIM_VS_FREQ_I                      =       4631,
  NVI_BC10_PA_R1_RISE_I                          =       4632,
  NVI_BC10_PA_R1_FALL_I                          =       4633,
  NVI_BC10_PA_R2_RISE_I                          =       4634,
  NVI_BC10_PA_R2_FALL_I                          =       4635,
  NVI_BC10_PA_R3_RISE_I                          =       4636,
  NVI_BC10_PA_R3_FALL_I                          =       4637,
  NVI_BC10_HDET_OFF_I                            =       4638,
  NVI_BC10_HDET_SPN_I                            =       4639,
  NVI_BC10_EXP_HDET_VS_AGC_I                     =       4640,
  NVI_BC10_ENC_BTF_I                             =       4641,
  NVI_BC10_VCO_COARSE_TUNE_TABLE_I               =       4642,
  NVI_BC10_VCO_TUNE_2_I                          =       4643,
  NVI_BC10_P1_RISE_FALL_OFF_I                    =       4644,
  NVI_BC10_HDR_P1_RISE_FALL_OFF_I                =       4645,
  NVI_BC10_ANT_QUALITY_I                         =       4646,
  NVI_BC10_PA_DVS_VOLTAGE_I                      =       4647,
  NVI_BC10_TX_PDM_LIN_0_I                        =       4648,
  NVI_BC10_TX_PDM_LIN_1_I                        =       4649,
  NVI_BC10_TX_PDM_LIN_2_I                        =       4650,
  NVI_BC10_TX_PDM_LIN_3_I                        =       4651,
  NVI_BC10_TX_PDM_0_I                            =       4652,
  NVI_BC10_TX_PDM_1_I                            =       4653,
  NVI_BC10_TX_PDM_2_I                            =       4654,
  NVI_BC10_TX_PDM_3_I                            =       4655,
  NVI_BC10_TX_LIN_0_I                            =       4656,
  NVI_BC10_TX_LIN_1_I                            =       4657,
  NVI_BC10_TX_LIN_2_I                            =       4658,
  NVI_BC10_TX_LIN_3_I                            =       4659,
  NVI_BC10_PA_R_MAP_I                            =       4660,
  NVI_BC10_TX_PWR_COMP0_I                        =       4661,
  NVI_BC10_TX_PWR_COMP1_I                        =       4662,
  NVI_BC10_TX_PWR_COMP2_I                        =       4663,
  NVI_BC10_TX_PWR_COMP3_I                        =       4664,
  NVI_C0_BC10_TX_CAL_CHAN_I                      =       4665,
  NVI_C0_BC10_RX_CAL_CHAN_I                      =       4666,
  NVI_C0_BC10_RX_CAL_CHAN_LRU_I                  =       4667,
  NVI_C0_BC10_LNA_1_OFFSET_I                     =       4668,
  NVI_C0_BC10_LNA_2_OFFSET_I                     =       4669,
  NVI_C0_BC10_LNA_3_OFFSET_I                     =       4670,
  NVI_C0_BC10_LNA_4_OFFSET_I                     =       4671,
  NVI_C0_BC10_LNA_1_OFFSET_VS_FREQ_I             =       4672,
  NVI_C0_BC10_LNA_2_OFFSET_VS_FREQ_I             =       4673,
  NVI_C0_BC10_LNA_3_OFFSET_VS_FREQ_I             =       4674,
  NVI_C0_BC10_LNA_4_OFFSET_VS_FREQ_I             =       4675,
  NVI_C0_BC10_IM2_I_VALUE_I                      =       4676,
  NVI_C0_BC10_IM2_Q_VALUE_I                      =       4677,
  NVI_C0_BC10_VGA_GAIN_OFFSET_I                  =       4678,
  NVI_C0_BC10_VGA_GAIN_OFFSET_VS_FREQ_I          =       4679,
  NVI_C0_BC10_IM2_TRANSCONDUCTOR_VALUE_I         =       4680,
  NVI_C0_BC10_LNA_1_RISE_I                       =       4681,
  NVI_C0_BC10_LNA_1_FALL_I                       =       4682,
  NVI_C0_BC10_LNA_2_RISE_I                       =       4683,
  NVI_C0_BC10_LNA_2_FALL_I                       =       4684,
  NVI_C0_BC10_LNA_3_RISE_I                       =       4685,
  NVI_C0_BC10_LNA_3_FALL_I                       =       4686,
  NVI_C0_BC10_LNA_4_RISE_I                       =       4687,
  NVI_C0_BC10_LNA_4_FALL_I                       =       4688,
  NVI_C0_BC10_IM_LEVEL1_I                        =       4689,
  NVI_C0_BC10_IM_LEVEL2_I                        =       4690,
  NVI_C0_BC10_IM_LEVEL3_I                        =       4691,
  NVI_C0_BC10_IM_LEVEL4_I                        =       4692,
  NVI_C0_BC10_LNA_SWITCHPOINTS_LPM_1_I           =       4693,
  NVI_C0_BC10_LNA_SWITCHPOINTS_LPM_2_I           =       4694,
  NVI_C0_BC10_IM2_LPM_1_I                        =       4695,
  NVI_C0_BC10_IM2_LPM_2_I                        =       4696,
  NVI_C0_BC10_INTELLICEIVER_CAL_I                =       4697,
  NVI_C0_BC10_INTELLICEIVER_DET_THRESH_I         =       4698,
  NVI_C1_BC10_TX_CAL_CHAN_I                      =       4699,
  NVI_C1_BC10_RX_CAL_CHAN_I                      =       4700,
  NVI_C1_BC10_RX_CAL_CHAN_LRU_I                  =       4701,
  NVI_C1_BC10_LNA_1_OFFSET_VS_FREQ_I             =       4702,
  NVI_C1_BC10_LNA_2_OFFSET_VS_FREQ_I             =       4703,
  NVI_C1_BC10_LNA_3_OFFSET_VS_FREQ_I             =       4704,
  NVI_C1_BC10_LNA_4_OFFSET_VS_FREQ_I             =       4705,
  NVI_C1_BC10_LNA_1_OFFSET_I                     =       4706,
  NVI_C1_BC10_LNA_2_OFFSET_I                     =       4707,
  NVI_C1_BC10_LNA_3_OFFSET_I                     =       4708,
  NVI_C1_BC10_LNA_4_OFFSET_I                     =       4709,
  NVI_C1_BC10_IM2_I_VALUE_I                      =       4710,
  NVI_C1_BC10_IM2_Q_VALUE_I                      =       4711,
  NVI_C1_BC10_VGA_GAIN_OFFSET_I                  =       4712,
  NVI_C1_BC10_VGA_GAIN_OFFSET_VS_FREQ_I          =       4713,
  NVI_C1_BC10_IM2_TRANSCONDUCTOR_VALUE_I         =       4714,
  NVI_C1_BC10_LNA_1_RISE_I                       =       4715,
  NVI_C1_BC10_LNA_1_FALL_I                       =       4716,
  NVI_C1_BC10_LNA_2_RISE_I                       =       4717,
  NVI_C1_BC10_LNA_2_FALL_I                       =       4718,
  NVI_C1_BC10_LNA_3_RISE_I                       =       4719,
  NVI_C1_BC10_LNA_3_FALL_I                       =       4720,
  NVI_C1_BC10_LNA_4_RISE_I                       =       4721,
  NVI_C1_BC10_LNA_4_FALL_I                       =       4722,
  NVI_C1_BC10_IM_LEVEL1_I                        =       4723,
  NVI_C1_BC10_IM_LEVEL2_I                        =       4724,
  NVI_C1_BC10_IM_LEVEL3_I                        =       4725,
  NVI_C1_BC10_IM_LEVEL4_I                        =       4726,
  NVI_C1_BC10_VCO_COARSE_TUNE_TABLE_I            =       4727,
  NVI_GSM_850_KV_CAL_CHAN_I                      =       4728,
  NVI_GSM_900_KV_CAL_CHAN_I                      =       4729,
  NVI_GSM_1800_KV_CAL_CHAN_I                     =       4730,
  NVI_GSM_1900_KV_CAL_CHAN_I                     =       4731,
  NVI_WCDMA_900_REL6_TX_BETA_SCALING_COMP_I      =       4732,
  NVI_WCDMA_900_REL6_TX_AGC_OFFSET_I             =       4733,
  NVI_WCDMA_900_REL6_TX_MPR_BACKOFF_I            =       4734,
  NVI_WCDMA_1800_REL6_TX_BETA_SCALING_COMP_I     =       4735,
  NVI_WCDMA_1800_REL6_TX_AGC_OFFSET_I            =       4736,
  NVI_WCDMA_1800_REL6_TX_MPR_BACKOFF_I           =       4737,
  NVI_DISABLE_CM_CALL_TYPE_I                     =       4738,
  NVI_MULTI_SEC_CODE_I                           =       4739,
  NVI_MULTI_OTKSL_I                              =       4740,
  NVI_MULTI_OTKSL_FLAG_I                         =       4741,
  NVI_DVBH_DO_FREQ_SCAN_AFTER_INT_ACQ_I          =       4742,
  NVI_GSM_850_PADAC_DC_OFFSET_TBL_I              =       4743,
  NVI_GSM_900_PADAC_DC_OFFSET_TBL_I              =       4744,
  NVI_GSM_1800_PADAC_DC_OFFSET_TBL_I             =       4745,
  NVI_GSM_1900_PADAC_DC_OFFSET_TBL_I             =       4746,
  NVI_CGPS_VCO_AGE_I                             =       4747,
  NVI_CGPS_OPTIMISTIC_PUNC_I                     =       4748,
  NVI_GSM_850_RGI_G0_F1_I                        =       4749,
  NVI_GSM_850_RGI_G1_F1_I                        =       4750,
  NVI_GSM_850_RGI_G2_F1_I                        =       4751,
  NVI_GSM_850_RGI_G3_F1_I                        =       4752,
  NVI_GSM_850_RGI_G0_F2_I                        =       4753,
  NVI_GSM_850_RGI_G1_F2_I                        =       4754,
  NVI_GSM_850_RGI_G2_F2_I                        =       4755,
  NVI_GSM_850_RGI_G3_F2_I                        =       4756,
  NVI_GSM_900_RGI_G0_F1_I                        =       4757,
  NVI_GSM_900_RGI_G1_F1_I                        =       4758,
  NVI_GSM_900_RGI_G2_F1_I                        =       4759,
  NVI_GSM_900_RGI_G3_F1_I                        =       4760,
  NVI_GSM_900_RGI_G0_F2_I                        =       4761,
  NVI_GSM_900_RGI_G1_F2_I                        =       4762,
  NVI_GSM_900_RGI_G2_F2_I                        =       4763,
  NVI_GSM_900_RGI_G3_F2_I                        =       4764,
  NVI_GSM_1800_RGI_G0_F1_I                       =       4765,
  NVI_GSM_1800_RGI_G1_F1_I                       =       4766,
  NVI_GSM_1800_RGI_G2_F1_I                       =       4767,
  NVI_GSM_1800_RGI_G3_F1_I                       =       4768,
  NVI_GSM_1800_RGI_G0_F2_I                       =       4769,
  NVI_GSM_1800_RGI_G1_F2_I                       =       4770,
  NVI_GSM_1800_RGI_G2_F2_I                       =       4771,
  NVI_GSM_1800_RGI_G3_F2_I                       =       4772,
  NVI_GSM_1900_RGI_G0_F1_I                       =       4773,
  NVI_GSM_1900_RGI_G1_F1_I                       =       4774,
  NVI_GSM_1900_RGI_G2_F1_I                       =       4775,
  NVI_GSM_1900_RGI_G3_F1_I                       =       4776,
  NVI_GSM_1900_RGI_G0_F2_I                       =       4777,
  NVI_GSM_1900_RGI_G1_F2_I                       =       4778,
  NVI_GSM_1900_RGI_G2_F2_I                       =       4779,
  NVI_GSM_1900_RGI_G3_F2_I                       =       4780,
  NVI_GSM_850_PMEAS_G0_F1_I                      =       4781,
  NVI_GSM_850_PMEAS_G1_F1_I                      =       4782,
  NVI_GSM_850_PMEAS_G2_F1_I                      =       4783,
  NVI_GSM_850_PMEAS_G3_F1_I                      =       4784,
  NVI_GSM_850_PMEAS_G0_F2_I                      =       4785,
  NVI_GSM_850_PMEAS_G1_F2_I                      =       4786,
  NVI_GSM_850_PMEAS_G2_F2_I                      =       4787,
  NVI_GSM_850_PMEAS_G3_F2_I                      =       4788,
  NVI_GSM_900_PMEAS_G0_F1_I                      =       4789,
  NVI_GSM_900_PMEAS_G1_F1_I                      =       4790,
  NVI_GSM_900_PMEAS_G2_F1_I                      =       4791,
  NVI_GSM_900_PMEAS_G3_F1_I                      =       4792,
  NVI_GSM_900_PMEAS_G0_F2_I                      =       4793,
  NVI_GSM_900_PMEAS_G1_F2_I                      =       4794,
  NVI_GSM_900_PMEAS_G2_F2_I                      =       4795,
  NVI_GSM_900_PMEAS_G3_F2_I                      =       4796,
  NVI_GSM_1800_PMEAS_G0_F1_I                     =       4797,
  NVI_GSM_1800_PMEAS_G1_F1_I                     =       4798,
  NVI_GSM_1800_PMEAS_G2_F1_I                     =       4799,
  NVI_GSM_1800_PMEAS_G3_F1_I                     =       4800,
  NVI_GSM_1800_PMEAS_G0_F2_I                     =       4801,
  NVI_GSM_1800_PMEAS_G1_F2_I                     =       4802,
  NVI_GSM_1800_PMEAS_G2_F2_I                     =       4803,
  NVI_GSM_1800_PMEAS_G3_F2_I                     =       4804,
  NVI_GSM_1900_PMEAS_G0_F1_I                     =       4805,
  NVI_GSM_1900_PMEAS_G1_F1_I                     =       4806,
  NVI_GSM_1900_PMEAS_G2_F1_I                     =       4807,
  NVI_GSM_1900_PMEAS_G3_F1_I                     =       4808,
  NVI_GSM_1900_PMEAS_G0_F2_I                     =       4809,
  NVI_GSM_1900_PMEAS_G1_F2_I                     =       4810,
  NVI_GSM_1900_PMEAS_G2_F2_I                     =       4811,
  NVI_GSM_1900_PMEAS_G3_F2_I                     =       4812,
  NVI_GSM_1800_PA_R1_TO_R2_I                     =       4813,
  NVI_GSM_1800_PA_R2_TO_R4_I                     =       4814,
  NVI_GSM_1900_PA_R1_TO_R2_I                     =       4815,
  NVI_GSM_1900_PA_R2_TO_R4_I                     =       4816,
  NVI_GSM_850_PA_R1_TO_R2_I                      =       4817,
  NVI_GSM_850_PA_R2_TO_R3_I                      =       4818,
  NVI_GSM_850_PA_R3_TO_R4_I                      =       4819,
  NVI_GSM_900_PA_R1_TO_R2_I                      =       4820,
  NVI_GSM_900_PA_R2_TO_R3_I                      =       4821,
  NVI_GSM_900_PA_R3_TO_R4_I                      =       4822,
  NVI_GSM_850_PA_PREDIST_SWPT1_I                 =       4823,
  NVI_GSM_850_PA_PREDIST_SWPT2_I                 =       4824,
  NVI_GSM_900_PA_PREDIST_SWPT1_I                 =       4825,
  NVI_GSM_900_PA_PREDIST_SWPT2_I                 =       4826,
  NVI_GSM_1800_PA_PREDIST_SWPT1_I                =       4827,
  NVI_GSM_1800_PA_PREDIST_SWPT2_I                =       4828,
  NVI_GSM_1900_PA_PREDIST_SWPT1_I                =       4829,
  NVI_GSM_1900_PA_PREDIST_SWPT2_I                =       4830,
  NVI_HSUPA_IRQ_FLOW_CTRL_2MS_PDU_SIZE_336_I     =       4831,
  NVI_HSUPA_IRQ_FLOW_CTRL_2MS_PDU_SIZE_656_I     =       4832,
  NVI_BC10_P2_RISE_FALL_OFF_I                    =       4833,
  NVI_BC10_P3_RISE_FALL_OFF_I                    =       4834,
  NVI_BC10_HDR_P2_RISE_FALL_OFF_I                =       4835,
  NVI_BC10_HDR_P3_RISE_FALL_OFF_I                =       4836,
  NVI_PSHO_FEATURE_SUPPORT_I                     =       4837,
  NVI_GSM_850_KV_VS_TEMP_I                       =       4838,
  NVI_GSM_900_KV_VS_TEMP_I                       =       4839,
  NVI_GSM_1800_KV_VS_TEMP_I                      =       4840,
  NVI_GSM_1900_KV_VS_TEMP_I                      =       4841,
  NVI_GSM_900_EDGE_PA_ULTRA_LO_TO_LO_I           =       4842,
  NVI_GSM_900_EDGE_PA_LO_TO_MID_I                =       4843,
  NVI_GSM_900_EDGE_PA_MID_TO_HI_I                =       4844,
  NVI_GSM_850_EDGE_PA_ULTRA_LO_TO_LO_I           =       4845,
  NVI_GSM_850_EDGE_PA_LO_TO_MID_I                =       4846,
  NVI_GSM_850_EDGE_PA_MID_TO_HI_I                =       4847,
  NVI_GSM_1800_EDGE_PA_LO_TO_MID_I               =       4848,
  NVI_GSM_1800_EDGE_PA_MID_TO_HI_I               =       4849,
  NVI_GSM_1900_EDGE_PA_LO_TO_MID_I               =       4850,
  NVI_GSM_1900_EDGE_PA_MID_TO_HI_I               =       4851,
  NVI_UNDP_NOEM_TEST_I                           =       4852,
  NVI_GSM_850_LINEAR_PA_TEMP_COMP_I              =       4853,
  NVI_GSM_900_LINEAR_PA_TEMP_COMP_I              =       4854,
  NVI_GSM_1800_LINEAR_PA_TEMP_COMP_I             =       4855,
  NVI_GSM_1900_LINEAR_PA_TEMP_COMP_I             =       4856,
  NVI_GSM_850_RGI_G0_F3_I                        =       4857,
  NVI_GSM_850_RGI_G1_F3_I                        =       4858,
  NVI_GSM_850_RGI_G2_F3_I                        =       4859,
  NVI_GSM_850_RGI_G3_F3_I                        =       4860,
  NVI_GSM_900_RGI_G0_F3_I                        =       4861,
  NVI_GSM_900_RGI_G1_F3_I                        =       4862,
  NVI_GSM_900_RGI_G2_F3_I                        =       4863,
  NVI_GSM_900_RGI_G3_F3_I                        =       4864,
  NVI_GSM_1800_RGI_G0_F3_I                       =       4865,
  NVI_GSM_1800_RGI_G1_F3_I                       =       4866,
  NVI_GSM_1800_RGI_G2_F3_I                       =       4867,
  NVI_GSM_1800_RGI_G3_F3_I                       =       4868,
  NVI_GSM_1900_RGI_G0_F3_I                       =       4869,
  NVI_GSM_1900_RGI_G1_F3_I                       =       4870,
  NVI_GSM_1900_RGI_G2_F3_I                       =       4871,
  NVI_GSM_1900_RGI_G3_F3_I                       =       4872,
  NVI_GSM_850_PMEAS_G0_F3_I                      =       4873,
  NVI_GSM_850_PMEAS_G1_F3_I                      =       4874,
  NVI_GSM_850_PMEAS_G2_F3_I                      =       4875,
  NVI_GSM_850_PMEAS_G3_F3_I                      =       4876,
  NVI_GSM_900_PMEAS_G0_F3_I                      =       4877,
  NVI_GSM_900_PMEAS_G1_F3_I                      =       4878,
  NVI_GSM_900_PMEAS_G2_F3_I                      =       4879,
  NVI_GSM_900_PMEAS_G3_F3_I                      =       4880,
  NVI_GSM_1800_PMEAS_G0_F3_I                     =       4881,
  NVI_GSM_1800_PMEAS_G1_F3_I                     =       4882,
  NVI_GSM_1800_PMEAS_G2_F3_I                     =       4883,
  NVI_GSM_1800_PMEAS_G3_F3_I                     =       4884,
  NVI_GSM_1900_PMEAS_G0_F3_I                     =       4885,
  NVI_GSM_1900_PMEAS_G1_F3_I                     =       4886,
  NVI_GSM_1900_PMEAS_G2_F3_I                     =       4887,
  NVI_GSM_1900_PMEAS_G3_F3_I                     =       4888,
  NVI_MF_IPDC_SUPERCEDES_CLIPCAST_I              =       4889,
  NVI_PROCESS_CAL_I                              =       4890,
  NVI_C0_BC0_LO_CAL_I                            =       4891,
  NVI_C0_BC1_LO_CAL_I                            =       4892,
  NVI_C0_BC2_LO_CAL_I                            =       4893,
  NVI_C0_BC3_LO_CAL_I                            =       4894,
  NVI_C0_BC4_LO_CAL_I                            =       4895,
  NVI_C0_BC5_LO_CAL_I                            =       4896,
  NVI_C0_BC6_LO_CAL_I                            =       4897,
  NVI_C0_BC7_LO_CAL_I                            =       4898,
  NVI_C0_BC8_LO_CAL_I                            =       4899,
  NVI_C0_BC9_LO_CAL_I                            =       4900,
  NVI_C0_BC10_LO_CAL_I                           =       4901,
  NVI_C0_BC11_LO_CAL_I                           =       4902,
  NVI_C0_BC12_LO_CAL_I                           =       4903,
  NVI_C0_BC13_LO_CAL_I                           =       4904,
  NVI_C0_BC14_LO_CAL_I                           =       4905,
  NVI_C0_BC15_LO_CAL_I                           =       4906,
  NVI_DC_CAL_I                                   =       4907,
  NVI_MF_BAND_CLASS_SP_INFO_I                    =       4908,
  NVI_DS_SIP_PROFILE_I                           =       4909,
  NVI_DS_SIP_ACTIVE_PROFILE_INDEX_I              =       4910,
  NVI_DS_SIP_NUM_VALID_PROFILES_I                =       4911,
  NVI_DS_SIP_NAI_INFO_I                          =       4912,
  NVI_DS_SIP_PPP_SS_INFO_I                       =       4913,
  NVI_DIAG_DIAGBUF_TX_SLEEP_THRESHOLD_EXT_I      =       4914,
  NVI_WCDMA_CLTD_FBI_BER_THRESH_I                =       4915,
  NVI_WCDMA_TEST_NV_1_I                          =       4916,
  NVI_WCDMA_2100_EXP_HDET_VS_AGC_V2_I            =       4917,
  NVI_WCDMA_1900_EXP_HDET_VS_AGC_V2_I            =       4918,
  NVI_WCDMA_800_EXP_HDET_VS_AGC_V2_I             =       4919,
  NVI_WCDMA_BC4_EXP_HDET_VS_AGC_V2_I             =       4920,
  NVI_WCDMA_1800_EXP_HDET_VS_AGC_V2_I            =       4921,
  NVI_WCDMA_900_EXP_HDET_VS_AGC_V2_I             =       4922,
  NVI_WCDMA_2100_HDET_OFF_V2_I                   =       4923,
  NVI_WCDMA_1900_HDET_OFF_V2_I                   =       4924,
  NVI_WCDMA_800_HDET_OFF_V2_I                    =       4925,
  NVI_WCDMA_BC4_HDET_OFF_V2_I                    =       4926,
  NVI_WCDMA_1800_HDET_OFF_V2_I                   =       4927,
  NVI_WCDMA_900_HDET_OFF_V2_I                    =       4928,
  NVI_WCDMA_2100_HDET_SPN_V2_I                   =       4929,
  NVI_WCDMA_1900_HDET_SPN_V2_I                   =       4930,
  NVI_WCDMA_800_HDET_SPN_V2_I                    =       4931,
  NVI_WCDMA_BC4_HDET_SPN_V2_I                    =       4932,
  NVI_WCDMA_1800_HDET_SPN_V2_I                   =       4933,
  NVI_WCDMA_900_HDET_SPN_V2_I                    =       4934,
  NVI_GSM_LINEAR_TX_GAIN_PARAM_I                 =       4935,
  NVI_EDGE_LINEAR_TX_GAIN_PARAM_I                =       4936,
  NVI_ENH_THERM_I                                =       4937,
  NVI_EDGE_850_RGI_G0_F1_I                       =       4938,
  NVI_EDGE_850_RGI_G1_F1_I                       =       4939,
  NVI_EDGE_850_RGI_G2_F1_I                       =       4940,
  NVI_EDGE_850_RGI_G3_F1_I                       =       4941,
  NVI_EDGE_850_RGI_G0_F2_I                       =       4942,
  NVI_EDGE_850_RGI_G1_F2_I                       =       4943,
  NVI_EDGE_850_RGI_G2_F2_I                       =       4944,
  NVI_EDGE_850_RGI_G3_F2_I                       =       4945,
  NVI_EDGE_850_RGI_G0_F3_I                       =       4946,
  NVI_EDGE_850_RGI_G1_F3_I                       =       4947,
  NVI_EDGE_850_RGI_G2_F3_I                       =       4948,
  NVI_EDGE_850_RGI_G3_F3_I                       =       4949,
  NVI_EDGE_900_RGI_G0_F1_I                       =       4950,
  NVI_EDGE_900_RGI_G1_F1_I                       =       4951,
  NVI_EDGE_900_RGI_G2_F1_I                       =       4952,
  NVI_EDGE_900_RGI_G3_F1_I                       =       4953,
  NVI_EDGE_900_RGI_G0_F2_I                       =       4954,
  NVI_EDGE_900_RGI_G1_F2_I                       =       4955,
  NVI_EDGE_900_RGI_G2_F2_I                       =       4956,
  NVI_EDGE_900_RGI_G3_F2_I                       =       4957,
  NVI_EDGE_900_RGI_G0_F3_I                       =       4958,
  NVI_EDGE_900_RGI_G1_F3_I                       =       4959,
  NVI_EDGE_900_RGI_G2_F3_I                       =       4960,
  NVI_EDGE_900_RGI_G3_F3_I                       =       4961,
  NVI_EDGE_1800_RGI_G0_F1_I                      =       4962,
  NVI_EDGE_1800_RGI_G1_F1_I                      =       4963,
  NVI_EDGE_1800_RGI_G2_F1_I                      =       4964,
  NVI_EDGE_1800_RGI_G3_F1_I                      =       4965,
  NVI_EDGE_1800_RGI_G0_F2_I                      =       4966,
  NVI_EDGE_1800_RGI_G1_F2_I                      =       4967,
  NVI_EDGE_1800_RGI_G2_F2_I                      =       4968,
  NVI_EDGE_1800_RGI_G3_F2_I                      =       4969,
  NVI_EDGE_1800_RGI_G0_F3_I                      =       4970,
  NVI_EDGE_1800_RGI_G1_F3_I                      =       4971,
  NVI_EDGE_1800_RGI_G2_F3_I                      =       4972,
  NVI_EDGE_1800_RGI_G3_F3_I                      =       4973,
  NVI_EDGE_1900_RGI_G0_F1_I                      =       4974,
  NVI_EDGE_1900_RGI_G1_F1_I                      =       4975,
  NVI_EDGE_1900_RGI_G2_F1_I                      =       4976,
  NVI_EDGE_1900_RGI_G3_F1_I                      =       4977,
  NVI_EDGE_1900_RGI_G0_F2_I                      =       4978,
  NVI_EDGE_1900_RGI_G1_F2_I                      =       4979,
  NVI_EDGE_1900_RGI_G2_F2_I                      =       4980,
  NVI_EDGE_1900_RGI_G3_F2_I                      =       4981,
  NVI_EDGE_1900_RGI_G0_F3_I                      =       4982,
  NVI_EDGE_1900_RGI_G1_F3_I                      =       4983,
  NVI_EDGE_1900_RGI_G2_F3_I                      =       4984,
  NVI_EDGE_1900_RGI_G3_F3_I                      =       4985,
  NVI_EDGE_850_PMEAS_G0_F1_I                     =       4986,
  NVI_EDGE_850_PMEAS_G1_F1_I                     =       4987,
  NVI_EDGE_850_PMEAS_G2_F1_I                     =       4988,
  NVI_EDGE_850_PMEAS_G3_F1_I                     =       4989,
  NVI_EDGE_850_PMEAS_G0_F2_I                     =       4990,
  NVI_EDGE_850_PMEAS_G1_F2_I                     =       4991,
  NVI_EDGE_850_PMEAS_G2_F2_I                     =       4992,
  NVI_EDGE_850_PMEAS_G3_F2_I                     =       4993,
  NVI_EDGE_850_PMEAS_G0_F3_I                     =       4994,
  NVI_EDGE_850_PMEAS_G1_F3_I                     =       4995,
  NVI_EDGE_850_PMEAS_G2_F3_I                     =       4996,
  NVI_EDGE_850_PMEAS_G3_F3_I                     =       4997,
  NVI_EDGE_900_PMEAS_G0_F1_I                     =       4998,
  NVI_EDGE_900_PMEAS_G1_F1_I                     =       4999,
  NVI_EDGE_900_PMEAS_G2_F1_I                     =       5000,
  NVI_EDGE_900_PMEAS_G3_F1_I                     =       5001,
  NVI_EDGE_900_PMEAS_G0_F2_I                     =       5002,
  NVI_EDGE_900_PMEAS_G1_F2_I                     =       5003,
  NVI_EDGE_900_PMEAS_G2_F2_I                     =       5004,
  NVI_EDGE_900_PMEAS_G3_F2_I                     =       5005,
  NVI_EDGE_900_PMEAS_G0_F3_I                     =       5006,
  NVI_EDGE_900_PMEAS_G1_F3_I                     =       5007,
  NVI_EDGE_900_PMEAS_G2_F3_I                     =       5008,
  NVI_EDGE_900_PMEAS_G3_F3_I                     =       5009,
  NVI_EDGE_1800_PMEAS_G0_F1_I                    =       5010,
  NVI_EDGE_1800_PMEAS_G1_F1_I                    =       5011,
  NVI_EDGE_1800_PMEAS_G2_F1_I                    =       5012,
  NVI_EDGE_1800_PMEAS_G3_F1_I                    =       5013,
  NVI_EDGE_1800_PMEAS_G0_F2_I                    =       5014,
  NVI_EDGE_1800_PMEAS_G1_F2_I                    =       5015,
  NVI_EDGE_1800_PMEAS_G2_F2_I                    =       5016,
  NVI_EDGE_1800_PMEAS_G3_F2_I                    =       5017,
  NVI_EDGE_1800_PMEAS_G0_F3_I                    =       5018,
  NVI_EDGE_1800_PMEAS_G1_F3_I                    =       5019,
  NVI_EDGE_1800_PMEAS_G2_F3_I                    =       5020,
  NVI_EDGE_1800_PMEAS_G3_F3_I                    =       5021,
  NVI_EDGE_1900_PMEAS_G0_F1_I                    =       5022,
  NVI_EDGE_1900_PMEAS_G1_F1_I                    =       5023,
  NVI_EDGE_1900_PMEAS_G2_F1_I                    =       5024,
  NVI_EDGE_1900_PMEAS_G3_F1_I                    =       5025,
  NVI_EDGE_1900_PMEAS_G0_F2_I                    =       5026,
  NVI_EDGE_1900_PMEAS_G1_F2_I                    =       5027,
  NVI_EDGE_1900_PMEAS_G2_F2_I                    =       5028,
  NVI_EDGE_1900_PMEAS_G3_F2_I                    =       5029,
  NVI_EDGE_1900_PMEAS_G0_F3_I                    =       5030,
  NVI_EDGE_1900_PMEAS_G1_F3_I                    =       5031,
  NVI_EDGE_1900_PMEAS_G2_F3_I                    =       5032,
  NVI_EDGE_1900_PMEAS_G3_F3_I                    =       5033,
  NVI_SUPPLY_I                                   =       5034,
  NVI_C0_BC0_IM2_CAL_I                           =       5035,
  NVI_C0_BC1_IM2_CAL_I                           =       5036,
  NVI_C0_BC2_IM2_CAL_I                           =       5037,
  NVI_C0_BC3_IM2_CAL_I                           =       5038,
  NVI_C0_BC4_IM2_CAL_I                           =       5039,
  NVI_C0_BC5_IM2_CAL_I                           =       5040,
  NVI_C0_BC6_IM2_CAL_I                           =       5041,
  NVI_C0_BC7_IM2_CAL_I                           =       5042,
  NVI_C0_BC8_IM2_CAL_I                           =       5043,
  NVI_C0_BC9_IM2_CAL_I                           =       5044,
  NVI_C0_BC10_IM2_CAL_I                          =       5045,
  NVI_C0_BC11_IM2_CAL_I                          =       5046,
  NVI_C0_BC12_IM2_CAL_I                          =       5047,
  NVI_C0_BC13_IM2_CAL_I                          =       5048,
  NVI_C0_BC14_IM2_CAL_I                          =       5049,
  NVI_C0_BC15_IM2_CAL_I                          =       5050,
  NVI_TOOLKIT_ENV_RETRY_FLAG_I                   =       5051,
  NVI_CGPS_SBAS_ENABLED_I                        =       5052,
  NVI_CGPS_SBAS_USER_PREFERENCE_I                =       5053,
  NVI_CGPS_DPO_CONTROL_I                         =       5054,
  NVI_ESN_ME_I                                   =       5055,
  NVI_MEID_ME_I                                  =       5056,
  NVI_CGPS_ON_DEMAND_ENABLED_I                   =       5057,
  NVI_HDRSCP_SELECT_BCMCS_CONFIG_I               =       5058,
  NVI_GSM_850_AMAM_LINEAR_PA_RANGEA_F1_SEG1_I    =       5059,
  NVI_GSM_850_AMAM_LINEAR_PA_RANGEA_F1_SEG2_I    =       5060,
  NVI_GSM_850_AMAM_LINEAR_PA_RANGEB_F1_SEG1_I    =       5061,
  NVI_GSM_850_AMAM_LINEAR_PA_RANGEB_F1_SEG2_I    =       5062,
  NVI_GSM_850_AMAM_LINEAR_PA_RANGEA_F2_SEG1_I    =       5063,
  NVI_GSM_850_AMAM_LINEAR_PA_RANGEA_F2_SEG2_I    =       5064,
  NVI_GSM_850_AMAM_LINEAR_PA_RANGEB_F2_SEG1_I    =       5065,
  NVI_GSM_850_AMAM_LINEAR_PA_RANGEB_F2_SEG2_I    =       5066,
  NVI_GSM_850_AMAM_LINEAR_PA_RANGEA_F3_SEG1_I    =       5067,
  NVI_GSM_850_AMAM_LINEAR_PA_RANGEA_F3_SEG2_I    =       5068,
  NVI_GSM_850_AMAM_LINEAR_PA_RANGEB_F3_SEG1_I    =       5069,
  NVI_GSM_850_AMAM_LINEAR_PA_RANGEB_F3_SEG2_I    =       5070,
  NVI_GSM_900_AMAM_LINEAR_PA_RANGEA_F1_SEG1_I    =       5071,
  NVI_GSM_900_AMAM_LINEAR_PA_RANGEA_F1_SEG2_I    =       5072,
  NVI_GSM_900_AMAM_LINEAR_PA_RANGEB_F1_SEG1_I    =       5073,
  NVI_GSM_900_AMAM_LINEAR_PA_RANGEB_F1_SEG2_I    =       5074,
  NVI_GSM_900_AMAM_LINEAR_PA_RANGEA_F2_SEG1_I    =       5075,
  NVI_GSM_900_AMAM_LINEAR_PA_RANGEA_F2_SEG2_I    =       5076,
  NVI_GSM_900_AMAM_LINEAR_PA_RANGEB_F2_SEG1_I    =       5077,
  NVI_GSM_900_AMAM_LINEAR_PA_RANGEB_F2_SEG2_I    =       5078,
  NVI_GSM_900_AMAM_LINEAR_PA_RANGEA_F3_SEG1_I    =       5079,
  NVI_GSM_900_AMAM_LINEAR_PA_RANGEA_F3_SEG2_I    =       5080,
  NVI_GSM_900_AMAM_LINEAR_PA_RANGEB_F3_SEG1_I    =       5081,
  NVI_GSM_900_AMAM_LINEAR_PA_RANGEB_F3_SEG2_I    =       5082,
  NVI_GSM_1800_AMAM_LINEAR_PA_RANGEA_F1_SEG1_I   =       5083,
  NVI_GSM_1800_AMAM_LINEAR_PA_RANGEA_F1_SEG2_I   =       5084,
  NVI_GSM_1800_AMAM_LINEAR_PA_RANGEB_F1_SEG1_I   =       5085,
  NVI_GSM_1800_AMAM_LINEAR_PA_RANGEB_F1_SEG2_I   =       5086,
  NVI_GSM_1800_AMAM_LINEAR_PA_RANGEA_F2_SEG1_I   =       5087,
  NVI_GSM_1800_AMAM_LINEAR_PA_RANGEA_F2_SEG2_I   =       5088,
  NVI_GSM_1800_AMAM_LINEAR_PA_RANGEB_F2_SEG1_I   =       5089,
  NVI_GSM_1800_AMAM_LINEAR_PA_RANGEB_F2_SEG2_I   =       5090,
  NVI_GSM_1800_AMAM_LINEAR_PA_RANGEA_F3_SEG1_I   =       5091,
  NVI_GSM_1800_AMAM_LINEAR_PA_RANGEA_F3_SEG2_I   =       5092,
  NVI_GSM_1800_AMAM_LINEAR_PA_RANGEB_F3_SEG1_I   =       5093,
  NVI_GSM_1800_AMAM_LINEAR_PA_RANGEB_F3_SEG2_I   =       5094,
  NVI_GSM_1900_AMAM_LINEAR_PA_RANGEA_F1_SEG1_I   =       5095,
  NVI_GSM_1900_AMAM_LINEAR_PA_RANGEA_F1_SEG2_I   =       5096,
  NVI_GSM_1900_AMAM_LINEAR_PA_RANGEB_F1_SEG1_I   =       5097,
  NVI_GSM_1900_AMAM_LINEAR_PA_RANGEB_F1_SEG2_I   =       5098,
  NVI_GSM_1900_AMAM_LINEAR_PA_RANGEA_F2_SEG1_I   =       5099,
  NVI_GSM_1900_AMAM_LINEAR_PA_RANGEA_F2_SEG2_I   =       5100,
  NVI_GSM_1900_AMAM_LINEAR_PA_RANGEB_F2_SEG1_I   =       5101,
  NVI_GSM_1900_AMAM_LINEAR_PA_RANGEB_F2_SEG2_I   =       5102,
  NVI_GSM_1900_AMAM_LINEAR_PA_RANGEA_F3_SEG1_I   =       5103,
  NVI_GSM_1900_AMAM_LINEAR_PA_RANGEA_F3_SEG2_I   =       5104,
  NVI_GSM_1900_AMAM_LINEAR_PA_RANGEB_F3_SEG1_I   =       5105,
  NVI_GSM_1900_AMAM_LINEAR_PA_RANGEB_F3_SEG2_I   =       5106,
  NVI_GSM_850_AMPM_LINEAR_PA_RANGEA_F1_SEG1_I    =       5107,
  NVI_GSM_850_AMPM_LINEAR_PA_RANGEA_F1_SEG2_I    =       5108,
  NVI_GSM_850_AMPM_LINEAR_PA_RANGEB_F1_SEG1_I    =       5109,
  NVI_GSM_850_AMPM_LINEAR_PA_RANGEB_F1_SEG2_I    =       5110,
  NVI_GSM_850_AMPM_LINEAR_PA_RANGEA_F2_SEG1_I    =       5111,
  NVI_GSM_850_AMPM_LINEAR_PA_RANGEA_F2_SEG2_I    =       5112,
  NVI_GSM_850_AMPM_LINEAR_PA_RANGEB_F2_SEG1_I    =       5113,
  NVI_GSM_850_AMPM_LINEAR_PA_RANGEB_F2_SEG2_I    =       5114,
  NVI_GSM_850_AMPM_LINEAR_PA_RANGEA_F3_SEG1_I    =       5115,
  NVI_GSM_850_AMPM_LINEAR_PA_RANGEA_F3_SEG2_I    =       5116,
  NVI_GSM_850_AMPM_LINEAR_PA_RANGEB_F3_SEG1_I    =       5117,
  NVI_GSM_850_AMPM_LINEAR_PA_RANGEB_F3_SEG2_I    =       5118,
  NVI_GSM_900_AMPM_LINEAR_PA_RANGEA_F1_SEG1_I    =       5119,
  NVI_GSM_900_AMPM_LINEAR_PA_RANGEA_F1_SEG2_I    =       5120,
  NVI_GSM_900_AMPM_LINEAR_PA_RANGEB_F1_SEG1_I    =       5121,
  NVI_GSM_900_AMPM_LINEAR_PA_RANGEB_F1_SEG2_I    =       5122,
  NVI_GSM_900_AMPM_LINEAR_PA_RANGEA_F2_SEG1_I    =       5123,
  NVI_GSM_900_AMPM_LINEAR_PA_RANGEA_F2_SEG2_I    =       5124,
  NVI_GSM_900_AMPM_LINEAR_PA_RANGEB_F2_SEG1_I    =       5125,
  NVI_GSM_900_AMPM_LINEAR_PA_RANGEB_F2_SEG2_I    =       5126,
  NVI_GSM_900_AMPM_LINEAR_PA_RANGEA_F3_SEG1_I    =       5127,
  NVI_GSM_900_AMPM_LINEAR_PA_RANGEA_F3_SEG2_I    =       5128,
  NVI_GSM_900_AMPM_LINEAR_PA_RANGEB_F3_SEG1_I    =       5129,
  NVI_GSM_900_AMPM_LINEAR_PA_RANGEB_F3_SEG2_I    =       5130,
  NVI_GSM_1800_AMPM_LINEAR_PA_RANGEA_F1_SEG1_I   =       5131,
  NVI_GSM_1800_AMPM_LINEAR_PA_RANGEA_F1_SEG2_I   =       5132,
  NVI_GSM_1800_AMPM_LINEAR_PA_RANGEB_F1_SEG1_I   =       5133,
  NVI_GSM_1800_AMPM_LINEAR_PA_RANGEB_F1_SEG2_I   =       5134,
  NVI_GSM_1800_AMPM_LINEAR_PA_RANGEA_F2_SEG1_I   =       5135,
  NVI_GSM_1800_AMPM_LINEAR_PA_RANGEA_F2_SEG2_I   =       5136,
  NVI_GSM_1800_AMPM_LINEAR_PA_RANGEB_F2_SEG1_I   =       5137,
  NVI_GSM_1800_AMPM_LINEAR_PA_RANGEB_F2_SEG2_I   =       5138,
  NVI_GSM_1800_AMPM_LINEAR_PA_RANGEA_F3_SEG1_I   =       5139,
  NVI_GSM_1800_AMPM_LINEAR_PA_RANGEA_F3_SEG2_I   =       5140,
  NVI_GSM_1800_AMPM_LINEAR_PA_RANGEB_F3_SEG1_I   =       5141,
  NVI_GSM_1800_AMPM_LINEAR_PA_RANGEB_F3_SEG2_I   =       5142,
  NVI_GSM_1900_AMPM_LINEAR_PA_RANGEA_F1_SEG1_I   =       5143,
  NVI_GSM_1900_AMPM_LINEAR_PA_RANGEA_F1_SEG2_I   =       5144,
  NVI_GSM_1900_AMPM_LINEAR_PA_RANGEB_F1_SEG1_I   =       5145,
  NVI_GSM_1900_AMPM_LINEAR_PA_RANGEB_F1_SEG2_I   =       5146,
  NVI_GSM_1900_AMPM_LINEAR_PA_RANGEA_F2_SEG1_I   =       5147,
  NVI_GSM_1900_AMPM_LINEAR_PA_RANGEA_F2_SEG2_I   =       5148,
  NVI_GSM_1900_AMPM_LINEAR_PA_RANGEB_F2_SEG1_I   =       5149,
  NVI_GSM_1900_AMPM_LINEAR_PA_RANGEB_F2_SEG2_I   =       5150,
  NVI_GSM_1900_AMPM_LINEAR_PA_RANGEA_F3_SEG1_I   =       5151,
  NVI_GSM_1900_AMPM_LINEAR_PA_RANGEA_F3_SEG2_I   =       5152,
  NVI_GSM_1900_AMPM_LINEAR_PA_RANGEB_F3_SEG1_I   =       5153,
  NVI_GSM_1900_AMPM_LINEAR_PA_RANGEB_F3_SEG2_I   =       5154,
  NVI_GSM_850_TX_AGC_SETTING_FOR_PRED_I          =       5155,
  NVI_GSM_900_TX_AGC_SETTING_FOR_PRED_I          =       5156,
  NVI_GSM_1800_TX_AGC_SETTING_FOR_PRED_I         =       5157,
  NVI_GSM_1900_TX_AGC_SETTING_FOR_PRED_I         =       5158,
  NVI_MIPV6_BEHAVIOR_I                           =       5159,
  NVI_MIPV6_ACTIVE_USER_I                        =       5160,
  NVI_MIPV6_GEN_USER_PROFILE_I                   =       5161,
  NVI_MIPV6_NAI_0_I                              =       5162,
  NVI_MIPV6_NAI_1_I                              =       5163,
  NVI_MIPV6_NAI_2_I                              =       5164,
  NVI_MIPV6_NAI_3_I                              =       5165,
  NVI_MIPV6_NAI_4_I                              =       5166,
  NVI_MIPV6_EAP_AKA_CREDENTIAL_I                 =       5167,
  NVI_MIPV6_HA_I                                 =       5168,
  NVI_MIPV6_HOA_I                                =       5169,
  NVI_MIPV6_PRIMARY_DNS_I                        =       5170,
  NVI_MIPV6_SECONDARY_DNS_I                      =       5171,
  NVI_MIPV6_IPSEC_CONFIG_I                       =       5172,
  NVI_MIPV6_REGISTRATION_CONFIG_I                =       5173,
  NVI_MIPV6_IPSEC_ON_PAYLOAD_I                   =       5174,
  NVI_MIPV6_REQUEST_VISITED_NETWORK_HA_I         =       5175,
  NVI_MIPV6_PROTECTION_METHOD_I                  =       5176,
  NVI_MIPV6_MN_AAA_SHARED_SECRET_I               =       5177,
  NVI_MIPV6_MN_HA_SHARED_SECRET_I                =       5178,
  NVI_MIPV6_AUTH_PROTO_CONFIG_I                  =       5179,
  NVI_BC0_EXP_HDET_VS_AGC_V2_I                   =       5180,
  NVI_BC1_EXP_HDET_VS_AGC_V2_I                   =       5181,
  NVI_BC2_EXP_HDET_VS_AGC_V2_I                   =       5182,
  NVI_BC3_EXP_HDET_VS_AGC_V2_I                   =       5183,
  NVI_BC4_EXP_HDET_VS_AGC_V2_I                   =       5184,
  NVI_BC5_EXP_HDET_VS_AGC_V2_I                   =       5185,
  NVI_BC6_EXP_HDET_VS_AGC_V2_I                   =       5186,
  NVI_BC7_EXP_HDET_VS_AGC_V2_I                   =       5187,
  NVI_BC8_EXP_HDET_VS_AGC_V2_I                   =       5188,
  NVI_BC9_EXP_HDET_VS_AGC_V2_I                   =       5189,
  NVI_BC10_EXP_HDET_VS_AGC_V2_I                  =       5190,
  NVI_BC11_EXP_HDET_VS_AGC_V2_I                  =       5191,
  NVI_BC12_EXP_HDET_VS_AGC_V2_I                  =       5192,
  NVI_BC13_EXP_HDET_VS_AGC_V2_I                  =       5193,
  NVI_BC14_EXP_HDET_VS_AGC_V2_I                  =       5194,
  NVI_BC15_EXP_HDET_VS_AGC_V2_I                  =       5195,
  NVI_BC0_HDET_OFF_V2_I                          =       5196,
  NVI_BC1_HDET_OFF_V2_I                          =       5197,
  NVI_BC2_HDET_OFF_V2_I                          =       5198,
  NVI_BC3_HDET_OFF_V2_I                          =       5199,
  NVI_BC4_HDET_OFF_V2_I                          =       5200,
  NVI_BC5_HDET_OFF_V2_I                          =       5201,
  NVI_BC6_HDET_OFF_V2_I                          =       5202,
  NVI_BC7_HDET_OFF_V2_I                          =       5203,
  NVI_BC8_HDET_OFF_V2_I                          =       5204,
  NVI_BC9_HDET_OFF_V2_I                          =       5205,
  NVI_BC10_HDET_OFF_V2_I                         =       5206,
  NVI_BC11_HDET_OFF_V2_I                         =       5207,
  NVI_BC12_HDET_OFF_V2_I                         =       5208,
  NVI_BC13_HDET_OFF_V2_I                         =       5209,
  NVI_BC14_HDET_OFF_V2_I                         =       5210,
  NVI_BC15_HDET_OFF_V2_I                         =       5211,
  NVI_BC0_HDET_SPN_V2_I                          =       5212,
  NVI_BC1_HDET_SPN_V2_I                          =       5213,
  NVI_BC2_HDET_SPN_V2_I                          =       5214,
  NVI_BC3_HDET_SPN_V2_I                          =       5215,
  NVI_BC4_HDET_SPN_V2_I                          =       5216,
  NVI_BC5_HDET_SPN_V2_I                          =       5217,
  NVI_BC6_HDET_SPN_V2_I                          =       5218,
  NVI_BC7_HDET_SPN_V2_I                          =       5219,
  NVI_BC8_HDET_SPN_V2_I                          =       5220,
  NVI_BC9_HDET_SPN_V2_I                          =       5221,
  NVI_BC10_HDET_SPN_V2_I                         =       5222,
  NVI_BC11_HDET_SPN_V2_I                         =       5223,
  NVI_BC12_HDET_SPN_V2_I                         =       5224,
  NVI_BC13_HDET_SPN_V2_I                         =       5225,
  NVI_BC14_HDET_SPN_V2_I                         =       5226,
  NVI_BC15_HDET_SPN_V2_I                         =       5227,
  NVI_TOOLKIT_CS_PS_PARALLEL_I                   =       5228,
  NVI_DVBH_MAX_TS_ACQ_ATTEMPTS_I                 =       5229,
  NVI_DVBH_MAX_SYS_ACQ_ATTEMPTS_I                =       5230,
  NVI_DSAT707_CTA_TIMER_I                        =       5231,
  NVI_DATA_AGG_TIMER_I                           =       5232,
  NVI_DHCP6_INFORM_REQ_TRIES_I                   =       5233,
  NVI_DHCP6_INFORM_REQ_INIT_RETRY_INTERVAL_I     =       5234,
  NVI_WCDMA_MIMO_CTRL_I                          =       5235,
  NVI_UBM_DVBH_L1_CFG_EBI2_WS_I                  =       5236,
  NVI_UBM_DVBH_L1_CFG_DEBUG_I                    =       5237,
  NVI_UBM_DVBH_L1_CFG_USE_ACQ_TIMEOUT_I          =       5238,
  NVI_UBM_DVBH_L1_CFG_SNOOZE_I                   =       5239,
  NVI_UBM_DVBH_L1_CFG_SLEEP_I                    =       5240,
  NVI_UBM_DVBH_L1_CFG_BW_I                       =       5241,
  NVI_UBM_DVBH_L1_CFG_T_SCAN_LOCKOUT_MS_I        =       5242,
  NVI_UBM_DVBH_L1_CFG_T_SCAN_NO_AGC_MS_I         =       5243,
  NVI_UBM_DVBH_L1_CFG_SCAN_NO_SIG_TRS_DB_Q6_I    =       5244,
  NVI_UBM_DVBH_L1_CFG_T_SCAN_AGC_MS_I            =       5245,
  NVI_UBM_DVBH_L1_CFG_T_SCAN_TPS_MS_I            =       5246,
  NVI_UBM_DVBH_L1_CFG_SCAN_ENBLD_TRS_DB_Q6_I     =       5247,
  NVI_UBM_DVBH_L1_CFG_HANDOFF_THRESH_DB_Q6_I     =       5248,
  NVI_UBM_DVBH_L1_CFG_ACQ_TIMEOUT_MS_I           =       5249,
  NVI_UBM_DVBH_L1_CFG_RECOVERY_RETRIES_I         =       5250,
  NVI_UBM_DVBH_L1_CFG_TOTAL_RECOVERY_CNT_I       =       5251,
  NVI_UBM_DVBH_L1_CFG_ACQ_BAILOUT_I              =       5252,
  NVI_UBM_DVBH_L1_CFG_PRE_JAMMER_CFG_I           =       5253,
  NVI_UBM_DVBH_L1_CFG_JAMMER_NOTCH_GAIN_I        =       5254,
  NVI_UBM_DVBH_L1_CFG_POST_JAMMER_CFG_I          =       5255,
  NVI_UBM_DVBH_L1_CFG_CPCE_ENABLED_I             =       5256,
  NVI_UBM_DVBH_L1_CFG_FAP_LAP_SENS_I             =       5257,
  NVI_UBM_DVBH_L1_CFG_MAX_CAND_PATHS_I           =       5258,
  NVI_UBM_DVBH_L1_CFG_SIG_RECOVERED_TRSH_Q7_I    =       5259,
  NVI_UBM_DVBH_L1_CFG_DISABLE_CPCE_IIR_I         =       5260,
  NVI_UBM_DVBH_L1_CFG_TT_CIR_THRESH_I            =       5261,
  NVI_UBM_DVBH_L1_CFG_FULL_SLEEP_REACQ_I         =       5262,
  NVI_UBM_DVBH_L1_CFG_JAMMER_DETECT_THRESH_I     =       5263,
  NVI_UBM_DVBH_L1_CFG_CPCE_LNA_THRESH_I          =       5264,
  NVI_UBM_DVBH_L1_CFG_CE_IRR_FILT_GAIN_I         =       5265,
  NVI_UBM_DVBH_L1_CFG_CPCE_CHECK_SYM_COUNT_I     =       5266,
  NVI_UBM_DVBH_L1_CFG_CPCE_CAND_PS_QPSK_TRS_I    =       5267,
  NVI_UBM_DVBH_L1_CFG_ADD_RAMPUP_SYMBOLS_I       =       5268,
  NVI_UBM_DVBH_L1_CFG_CPCE_CHCK_SYM_IGNRE_CNT_I  =       5269,
  NVI_UBM_DVBH_L1_CFG_RECOVERY_MIN_GOOD_RS1_I    =       5270,
  NVI_UBM_DVBH_L1_CFG_RECOVERY_MAX_DROP_COUNT_I  =       5271,
  NVI_UBM_DVBH_L1_CFG_T_RECOVERY_SCAN_MS_I       =       5272,
  NVI_UBM_DVBH_L1_CFG_CAND_PER_TRS_QPSK_Q14_I    =       5273,
  NVI_UBM_DVBH_L1_CFG_CPCE_AGC_VAR_THRESH_I      =       5274,
  NVI_UBM_DVBH_L1_CFG_CPCE_AGC_IGNORE_CNT_I      =       5275,
  NVI_UBM_DVBH_L1_CFG_CPCE_CAND_PS_16QAM_TRS_I   =       5276,
  NVI_UBM_DVBH_L1_CFG_CAND_PER_TRS_16QAM_Q14_I   =       5277,
  NVI_UBM_DVBH_L1_JAMMER_SYMBOLS_TO_IIR_I        =       5278,
  NVI_UBM_DVBH_L1_JAMMER_IIR_GAIN_I              =       5279,
  NVI_UBM_DVBH_L1_CFG_JAMMER_PEAK_ABS_TRS_I      =       5280,
  NVI_MAO_TEST_CFG_I                             =       5281,
  NVI_WWAN_ACCESS_OVER_WIFI_PREFERRED_I          =       5282,
  NVI_WIFI_LOCAL_BREAKOUT_ALLOWED_I              =       5283,
  NVI_IWLAN_OPERATOR_ID_I                        =       5284,
  NVI_IWLAN_REALM_I                              =       5285,
  NVI_IWLAN_AUTH_MODE_I                          =       5286,
  NVI_IWLAN_SOFT_IKE_REKEY_TIME_I                =       5287,
  NVI_IWLAN_HARD_IKE_REKEY_TIME_I                =       5288,
  NVI_IWLAN_CHILD_SA_SOFT_LIFETIME_SEC_I         =       5289,
  NVI_IWLAN_CHILD_SA_HARD_LIFETIME_SEC_I         =       5290,
  NVI_IWLAN_CHILD_SA_SOFT_LIFETIME_BYTES_I       =       5291,
  NVI_IWLAN_CHILD_SA_HARD_LIFETIME_BYTES_I       =       5292,
  NVI_IWLAN_NAT_KEEPALIVE_INTERVAL_I             =       5293,
  NVI_IWLAN_IKE_RETRANSMISSION_INTERVAL_I        =       5294,
  NVI_IWLAN_IKE_MAX_RETRANSMISSIONS_I            =       5295,
  NVI_IWLAN_IKEV2_IP_CONFIG_MASK_I               =       5296,
  NVI_IWLAN_DHCP_IP_CONFIG_MASK_I                =       5297,
  NVI_IWLAN_CHILD_SA_ENC_ALGO_PROPOSAL_MASK_I    =       5298,
  NVI_IWLAN_IKE_SA_ENC_ALGO_PROPOSAL_MASK_I      =       5299,
  NVI_IWLAN_IKE_SA_PRF_ALGO_PROPOSAL_MASK_I      =       5300,
  NVI_IWLAN_CHILD_SA_AUTH_ALGO_PROPOSAL_MASK_I   =       5301,
  NVI_IWLAN_IKE_SA_AUTH_ALGO_PROPOSAL_MASK_I     =       5302,
  NVI_IWLAN_IKE_DH_MODE_I                        =       5303,
  NVI_IWLAN_PDIF_ADDRESS_I                       =       5304,
  NVI_IWLAN_MULTI_AUTH_SUPPORTED_I               =       5305,
  NVI_IWLAN_PDIF_FQDN_I                          =       5306,
  NVI_CGPS_SBAS_WAAS_AREA_NODE1_I                =       5307,
  NVI_CGPS_SBAS_WAAS_AREA_NODE2_I                =       5308,
  NVI_CGPS_SBAS_WAAS_AREA_NODE3_I                =       5309,
  NVI_CGPS_SBAS_WAAS_AREA_NODE4_I                =       5310,
  NVI_CGPS_SBAS_WAAS_AREA_NODE5_I                =       5311,
  NVI_CGPS_SBAS_WAAS_AREA_NODE6_I                =       5312,
  NVI_CGPS_SBAS_EGNOS_AREA_NODE1_I               =       5313,
  NVI_CGPS_SBAS_EGNOS_AREA_NODE2_I               =       5314,
  NVI_CGPS_SBAS_EGNOS_AREA_NODE3_I               =       5315,
  NVI_CGPS_SBAS_EGNOS_AREA_NODE4_I               =       5316,
  NVI_CGPS_SBAS_EGNOS_AREA_NODE5_I               =       5317,
  NVI_CGPS_SBAS_EGNOS_AREA_NODE6_I               =       5318,
  NVI_CGPS_SBAS_MSAS_AREA_NODE1_I                =       5319,
  NVI_CGPS_SBAS_MSAS_AREA_NODE2_I                =       5320,
  NVI_CGPS_SBAS_MSAS_AREA_NODE3_I                =       5321,
  NVI_CGPS_SBAS_MSAS_AREA_NODE4_I                =       5322,
  NVI_CGPS_SBAS_MSAS_AREA_NODE5_I                =       5323,
  NVI_CGPS_SBAS_MSAS_AREA_NODE6_I                =       5324,
  NVI_CGPS_SBAS_GAGAN_AREA_NODE1_I               =       5325,
  NVI_CGPS_SBAS_GAGAN_AREA_NODE2_I               =       5326,
  NVI_CGPS_SBAS_GAGAN_AREA_NODE3_I               =       5327,
  NVI_CGPS_SBAS_GAGAN_AREA_NODE4_I               =       5328,
  NVI_CGPS_SBAS_GAGAN_AREA_NODE5_I               =       5329,
  NVI_CGPS_SBAS_GAGAN_AREA_NODE6_I               =       5330,
  NVI_IWLAN_DPD_ENABLED_I                        =       5331,
  NVI_IWLAN_DPD_TIME_SECS_I                      =       5332,
  NVI_BT_SOC_REFCLOCK_TYPE_I                     =       5333,
  NVI_BT_SOC_CLK_SHARING_TYPE_I                  =       5334,
  NVI_BT_SOC_INBAND_SLEEP_I                      =       5335,
  NVI_BT_SOC_LOGGING_ENABLED_I                   =       5336,
  NVI_BT_SOC_PM_MODE_I                           =       5337,
  NVI_TCP_DEFAULT_ROUND_TRIP_TIME_I              =       5338,
  NVI_GPS1_GPS_RFIC_IM2CAL_IM2DAC_I_CHANNEL_I    =       5339,
  NVI_GPS1_GPS_RFIC_IM2CAL_IM2DAC_Q_CHANNEL_I    =       5340,
  NVI_BC0_HDR_REVA_TX_PREDISTORT_I               =       5341,
  NVI_BC1_HDR_REVA_TX_PREDISTORT_I               =       5342,
  NVI_BC3_HDR_REVA_TX_PREDISTORT_I               =       5343,
  NVI_BC4_HDR_REVA_TX_PREDISTORT_I               =       5344,
  NVI_BC6_HDR_REVA_TX_PREDISTORT_I               =       5345,
  NVI_BC5_HDR_REVA_TX_PREDISTORT_I               =       5346,
  NVI_BC10_HDR_REVA_TX_PREDISTORT_I              =       5347,
  NVI_BC11_HDR_REVA_TX_PREDISTORT_I              =       5348,
  NVI_BC14_HDR_REVA_TX_PREDISTORT_I              =       5349,
  NVI_BC15_HDR_REVA_TX_PREDISTORT_I              =       5350,
  NVI_BCX_HDR_REVA_TX_PREDISTORT_I               =       5351,
  NVI_HDRMRLPARDA_PARAM_I                        =       5352,
  NVI_MGRF_SUPPORTED_I                           =       5353,
  NVI_WCDMA_RXF_MIS_COMP_A_COEFF_I               =       5354,
  NVI_WCDMA_RXF_MIS_COMP_B_COEFF_I               =       5355,
  NVI_C1_WCDMA_2100_RXF_MIS_COMP_A_COEFF_I       =       5356,
  NVI_C1_WCDMA_2100_RXF_MIS_COMP_B_COEFF_I       =       5357,
  NVI_WCDMA_1900_RXF_MIS_COMP_A_COEFF_I          =       5358,
  NVI_WCDMA_1900_RXF_MIS_COMP_B_COEFF_I          =       5359,
  NVI_C1_WCDMA_1900_RXF_MIS_COMP_A_COEFF_I       =       5360,
  NVI_C1_WCDMA_1900_RXF_MIS_COMP_B_COEFF_I       =       5361,
  NVI_WCDMA_BC4_RXF_MIS_COMP_A_COEFF_I           =       5362,
  NVI_WCDMA_BC4_RXF_MIS_COMP_B_COEFF_I           =       5363,
  NVI_C1_WCDMA_BC4_RXF_MIS_COMP_A_COEFF_I        =       5364,
  NVI_C1_WCDMA_BC4_RXF_MIS_COMP_B_COEFF_I        =       5365,
  NVI_WCDMA_800_RXF_MIS_COMP_A_COEFF_I           =       5366,
  NVI_WCDMA_800_RXF_MIS_COMP_B_COEFF_I           =       5367,
  NVI_C1_WCDMA_800_RXF_MIS_COMP_A_COEFF_I        =       5368,
  NVI_C1_WCDMA_800_RXF_MIS_COMP_B_COEFF_I        =       5369,
  NVI_WCDMA_RXF_ICI_I_COEF0_1_I                  =       5370,
  NVI_WCDMA_RXF_ICI_I_COEF2_3_I                  =       5371,
  NVI_WCDMA_RXF_ICI_I_COEF4_5_I                  =       5372,
  NVI_WCDMA_RXF_ICI_I_COEF6_7_I                  =       5373,
  NVI_WCDMA_RXF_ICI_I_COEF8_9_I                  =       5374,
  NVI_WCDMA_RXF_ICI_I_COEF10_11_I                =       5375,
  NVI_WCDMA_RXF_ICI_I_COEF12_13_I                =       5376,
  NVI_WCDMA_RXF_ICI_I_COEF14_15_I                =       5377,
  NVI_WCDMA_RXF_ICI_Q_COEF0_1_I                  =       5378,
  NVI_WCDMA_RXF_ICI_Q_COEF2_3_I                  =       5379,
  NVI_WCDMA_RXF_ICI_Q_COEF4_5_I                  =       5380,
  NVI_WCDMA_RXF_ICI_Q_COEF6_7_I                  =       5381,
  NVI_WCDMA_RXF_ICI_Q_COEF8_9_I                  =       5382,
  NVI_WCDMA_RXF_ICI_Q_COEF10_11_I                =       5383,
  NVI_WCDMA_RXF_ICI_Q_COEF12_13_I                =       5384,
  NVI_WCDMA_RXF_ICI_Q_COEF14_15_I                =       5385,
  NVI_C1_WCDMA_2100_RXF_ICI_I_COEF0_1_I          =       5386,
  NVI_C1_WCDMA_2100_RXF_ICI_I_COEF2_3_I          =       5387,
  NVI_C1_WCDMA_2100_RXF_ICI_I_COEF4_5_I          =       5388,
  NVI_C1_WCDMA_2100_RXF_ICI_I_COEF6_7_I          =       5389,
  NVI_C1_WCDMA_2100_RXF_ICI_I_COEF8_9_I          =       5390,
  NVI_C1_WCDMA_2100_RXF_ICI_I_COEF10_11_I        =       5391,
  NVI_C1_WCDMA_2100_RXF_ICI_I_COEF12_13_I        =       5392,
  NVI_C1_WCDMA_2100_RXF_ICI_I_COEF14_15_I        =       5393,
  NVI_C1_WCDMA_2100_RXF_ICI_Q_COEF0_1_I          =       5394,
  NVI_C1_WCDMA_2100_RXF_ICI_Q_COEF2_3_I          =       5395,
  NVI_C1_WCDMA_2100_RXF_ICI_Q_COEF4_5_I          =       5396,
  NVI_C1_WCDMA_2100_RXF_ICI_Q_COEF6_7_I          =       5397,
  NVI_C1_WCDMA_2100_RXF_ICI_Q_COEF8_9_I          =       5398,
  NVI_C1_WCDMA_2100_RXF_ICI_Q_COEF10_11_I        =       5399,
  NVI_C1_WCDMA_2100_RXF_ICI_Q_COEF12_13_I        =       5400,
  NVI_C1_WCDMA_2100_RXF_ICI_Q_COEF14_15_I        =       5401,
  NVI_WCDMA_RXF_ICI_IQ_TRUNC_I                   =       5402,
  NVI_C1_WCDMA_2100_RXF_ICI_IQ_TRUNC_I           =       5403,
  NVI_WCDMA_1900_RXF_ICI_I_COEF0_1_I             =       5404,
  NVI_WCDMA_1900_RXF_ICI_I_COEF2_3_I             =       5405,
  NVI_WCDMA_1900_RXF_ICI_I_COEF4_5_I             =       5406,
  NVI_WCDMA_1900_RXF_ICI_I_COEF6_7_I             =       5407,
  NVI_WCDMA_1900_RXF_ICI_I_COEF8_9_I             =       5408,
  NVI_WCDMA_1900_RXF_ICI_I_COEF10_11_I           =       5409,
  NVI_WCDMA_1900_RXF_ICI_I_COEF12_13_I           =       5410,
  NVI_WCDMA_1900_RXF_ICI_I_COEF14_15_I           =       5411,
  NVI_WCDMA_1900_RXF_ICI_Q_COEF0_1_I             =       5412,
  NVI_WCDMA_1900_RXF_ICI_Q_COEF2_3_I             =       5413,
  NVI_WCDMA_1900_RXF_ICI_Q_COEF4_5_I             =       5414,
  NVI_WCDMA_1900_RXF_ICI_Q_COEF6_7_I             =       5415,
  NVI_WCDMA_1900_RXF_ICI_Q_COEF8_9_I             =       5416,
  NVI_WCDMA_1900_RXF_ICI_Q_COEF10_11_I           =       5417,
  NVI_WCDMA_1900_RXF_ICI_Q_COEF12_13_I           =       5418,
  NVI_WCDMA_1900_RXF_ICI_Q_COEF14_15_I           =       5419,
  NVI_C1_WCDMA_1900_RXF_ICI_I_COEF0_1_I          =       5420,
  NVI_C1_WCDMA_1900_RXF_ICI_I_COEF2_3_I          =       5421,
  NVI_C1_WCDMA_1900_RXF_ICI_I_COEF4_5_I          =       5422,
  NVI_C1_WCDMA_1900_RXF_ICI_I_COEF6_7_I          =       5423,
  NVI_C1_WCDMA_1900_RXF_ICI_I_COEF8_9_I          =       5424,
  NVI_C1_WCDMA_1900_RXF_ICI_I_COEF10_11_I        =       5425,
  NVI_C1_WCDMA_1900_RXF_ICI_I_COEF12_13_I        =       5426,
  NVI_C1_WCDMA_1900_RXF_ICI_I_COEF14_15_I        =       5427,
  NVI_C1_WCDMA_1900_RXF_ICI_Q_COEF0_1_I          =       5428,
  NVI_C1_WCDMA_1900_RXF_ICI_Q_COEF2_3_I          =       5429,
  NVI_C1_WCDMA_1900_RXF_ICI_Q_COEF4_5_I          =       5430,
  NVI_C1_WCDMA_1900_RXF_ICI_Q_COEF6_7_I          =       5431,
  NVI_C1_WCDMA_1900_RXF_ICI_Q_COEF8_9_I          =       5432,
  NVI_C1_WCDMA_1900_RXF_ICI_Q_COEF10_11_I        =       5433,
  NVI_C1_WCDMA_1900_RXF_ICI_Q_COEF12_13_I        =       5434,
  NVI_C1_WCDMA_1900_RXF_ICI_Q_COEF14_15_I        =       5435,
  NVI_WCDMA_1900_RXF_ICI_IQ_TRUNC_I              =       5436,
  NVI_C1_WCDMA_1900_RXF_ICI_IQ_TRUNC_I           =       5437,
  NVI_WCDMA_BC4_RXF_ICI_I_COEF0_1_I              =       5438,
  NVI_WCDMA_BC4_RXF_ICI_I_COEF2_3_I              =       5439,
  NVI_WCDMA_BC4_RXF_ICI_I_COEF4_5_I              =       5440,
  NVI_WCDMA_BC4_RXF_ICI_I_COEF6_7_I              =       5441,
  NVI_WCDMA_BC4_RXF_ICI_I_COEF8_9_I              =       5442,
  NVI_WCDMA_BC4_RXF_ICI_I_COEF10_11_I            =       5443,
  NVI_WCDMA_BC4_RXF_ICI_I_COEF12_13_I            =       5444,
  NVI_WCDMA_BC4_RXF_ICI_I_COEF14_15_I            =       5445,
  NVI_WCDMA_BC4_RXF_ICI_Q_COEF0_1_I              =       5446,
  NVI_WCDMA_BC4_RXF_ICI_Q_COEF2_3_I              =       5447,
  NVI_WCDMA_BC4_RXF_ICI_Q_COEF4_5_I              =       5448,
  NVI_WCDMA_BC4_RXF_ICI_Q_COEF6_7_I              =       5449,
  NVI_WCDMA_BC4_RXF_ICI_Q_COEF8_9_I              =       5450,
  NVI_WCDMA_BC4_RXF_ICI_Q_COEF10_11_I            =       5451,
  NVI_WCDMA_BC4_RXF_ICI_Q_COEF12_13_I            =       5452,
  NVI_WCDMA_BC4_RXF_ICI_Q_COEF14_15_I            =       5453,
  NVI_C1_WCDMA_BC4_RXF_ICI_I_COEF0_1_I           =       5454,
  NVI_C1_WCDMA_BC4_RXF_ICI_I_COEF2_3_I           =       5455,
  NVI_C1_WCDMA_BC4_RXF_ICI_I_COEF4_5_I           =       5456,
  NVI_C1_WCDMA_BC4_RXF_ICI_I_COEF6_7_I           =       5457,
  NVI_C1_WCDMA_BC4_RXF_ICI_I_COEF8_9_I           =       5458,
  NVI_C1_WCDMA_BC4_RXF_ICI_I_COEF10_11_I         =       5459,
  NVI_C1_WCDMA_BC4_RXF_ICI_I_COEF12_13_I         =       5460,
  NVI_C1_WCDMA_BC4_RXF_ICI_I_COEF14_15_I         =       5461,
  NVI_C1_WCDMA_BC4_RXF_ICI_Q_COEF0_1_I           =       5462,
  NVI_C1_WCDMA_BC4_RXF_ICI_Q_COEF2_3_I           =       5463,
  NVI_C1_WCDMA_BC4_RXF_ICI_Q_COEF4_5_I           =       5464,
  NVI_C1_WCDMA_BC4_RXF_ICI_Q_COEF6_7_I           =       5465,
  NVI_C1_WCDMA_BC4_RXF_ICI_Q_COEF8_9_I           =       5466,
  NVI_C1_WCDMA_BC4_RXF_ICI_Q_COEF10_11_I         =       5467,
  NVI_C1_WCDMA_BC4_RXF_ICI_Q_COEF12_13_I         =       5468,
  NVI_C1_WCDMA_BC4_RXF_ICI_Q_COEF14_15_I         =       5469,
  NVI_WCDMA_BC4_RXF_ICI_IQ_TRUNC_I               =       5470,
  NVI_C1_WCDMA_BC4_RXF_ICI_IQ_TRUNC_I            =       5471,
  NVI_WCDMA_800_RXF_ICI_I_COEF0_1_I              =       5472,
  NVI_WCDMA_800_RXF_ICI_I_COEF2_3_I              =       5473,
  NVI_WCDMA_800_RXF_ICI_I_COEF4_5_I              =       5474,
  NVI_WCDMA_800_RXF_ICI_I_COEF6_7_I              =       5475,
  NVI_WCDMA_800_RXF_ICI_I_COEF8_9_I              =       5476,
  NVI_WCDMA_800_RXF_ICI_I_COEF10_11_I            =       5477,
  NVI_WCDMA_800_RXF_ICI_I_COEF12_13_I            =       5478,
  NVI_WCDMA_800_RXF_ICI_I_COEF14_15_I            =       5479,
  NVI_WCDMA_800_RXF_ICI_Q_COEF0_1_I              =       5480,
  NVI_WCDMA_800_RXF_ICI_Q_COEF2_3_I              =       5481,
  NVI_WCDMA_800_RXF_ICI_Q_COEF4_5_I              =       5482,
  NVI_WCDMA_800_RXF_ICI_Q_COEF6_7_I              =       5483,
  NVI_WCDMA_800_RXF_ICI_Q_COEF8_9_I              =       5484,
  NVI_WCDMA_800_RXF_ICI_Q_COEF10_11_I            =       5485,
  NVI_WCDMA_800_RXF_ICI_Q_COEF12_13_I            =       5486,
  NVI_WCDMA_800_RXF_ICI_Q_COEF14_15_I            =       5487,
  NVI_C1_WCDMA_800_RXF_ICI_I_COEF0_1_I           =       5488,
  NVI_C1_WCDMA_800_RXF_ICI_I_COEF2_3_I           =       5489,
  NVI_C1_WCDMA_800_RXF_ICI_I_COEF4_5_I           =       5490,
  NVI_C1_WCDMA_800_RXF_ICI_I_COEF6_7_I           =       5491,
  NVI_C1_WCDMA_800_RXF_ICI_I_COEF8_9_I           =       5492,
  NVI_C1_WCDMA_800_RXF_ICI_I_COEF10_11_I         =       5493,
  NVI_C1_WCDMA_800_RXF_ICI_I_COEF12_13_I         =       5494,
  NVI_C1_WCDMA_800_RXF_ICI_I_COEF14_15_I         =       5495,
  NVI_C1_WCDMA_800_RXF_ICI_Q_COEF0_1_I           =       5496,
  NVI_C1_WCDMA_800_RXF_ICI_Q_COEF2_3_I           =       5497,
  NVI_C1_WCDMA_800_RXF_ICI_Q_COEF4_5_I           =       5498,
  NVI_C1_WCDMA_800_RXF_ICI_Q_COEF6_7_I           =       5499,
  NVI_C1_WCDMA_800_RXF_ICI_Q_COEF8_9_I           =       5500,
  NVI_C1_WCDMA_800_RXF_ICI_Q_COEF10_11_I         =       5501,
  NVI_C1_WCDMA_800_RXF_ICI_Q_COEF12_13_I         =       5502,
  NVI_C1_WCDMA_800_RXF_ICI_Q_COEF14_15_I         =       5503,
  NVI_WCDMA_800_RXF_ICI_IQ_TRUNC_I               =       5504,
  NVI_C1_WCDMA_800_RXF_ICI_IQ_TRUNC_I            =       5505,
  NVI_WCDMA_2100_HS_SWITCHPOINTS_SHIFT_I         =       5506,
  NVI_WCDMA_1900_HS_SWITCHPOINTS_SHIFT_I         =       5507,
  NVI_WCDMA_1800_HS_SWITCHPOINTS_SHIFT_I         =       5508,
  NVI_WCDMA_900_HS_SWITCHPOINTS_SHIFT_I          =       5509,
  NVI_WCDMA_800_HS_SWITCHPOINTS_SHIFT_I          =       5510,
  NVI_WCDMA_BC4_HS_SWITCHPOINTS_SHIFT_I          =       5511,
  NVI_BCX_BLOCK_1_GPS1_RF_DELAY_I                =       5512,
  NVI_BCX_BLOCK_1_RF_TUNE_RESERVED_I             =       5513,
  NVI_BCX_BLOCK_1_TX_LIM_VS_TEMP_I               =       5514,
  NVI_BCX_BLOCK_1_TX_LIN_MASTER0_I               =       5515,
  NVI_BCX_BLOCK_1_TX_LIN_MASTER1_I               =       5516,
  NVI_BCX_BLOCK_1_TX_LIN_MASTER2_I               =       5517,
  NVI_BCX_BLOCK_1_TX_LIN_MASTER3_I               =       5518,
  NVI_BCX_BLOCK_1_TX_COMP0_I                     =       5519,
  NVI_BCX_BLOCK_1_TX_COMP1_I                     =       5520,
  NVI_BCX_BLOCK_1_TX_COMP2_I                     =       5521,
  NVI_BCX_BLOCK_1_TX_COMP3_I                     =       5522,
  NVI_BCX_BLOCK_1_TX_LIM_VS_FREQ_I               =       5523,
  NVI_BCX_BLOCK_1_PA_R1_RISE_I                   =       5524,
  NVI_BCX_BLOCK_1_PA_R1_FALL_I                   =       5525,
  NVI_BCX_BLOCK_1_PA_R2_RISE_I                   =       5526,
  NVI_BCX_BLOCK_1_PA_R2_FALL_I                   =       5527,
  NVI_BCX_BLOCK_1_PA_R3_RISE_I                   =       5528,
  NVI_BCX_BLOCK_1_PA_R3_FALL_I                   =       5529,
  NVI_BCX_BLOCK_1_HDET_OFF_I                     =       5530,
  NVI_BCX_BLOCK_1_HDET_SPN_I                     =       5531,
  NVI_BCX_BLOCK_1_EXP_HDET_VS_AGC_I              =       5532,
  NVI_BCX_BLOCK_1_ENC_BTF_I                      =       5533,
  NVI_BCX_BLOCK_1_VCO_COARSE_TUNE_TABLE_I        =       5534,
  NVI_BCX_BLOCK_1_P1_RISE_FALL_OFF_I             =       5535,
  NVI_C0_BCX_BLOCK_1_TX_CAL_CHAN_I               =       5536,
  NVI_C0_BCX_BLOCK_1_RX_CAL_CHAN_I               =       5537,
  NVI_C0_BCX_BLOCK_1_LNA_1_OFFSET_VS_FREQ_I      =       5538,
  NVI_C0_BCX_BLOCK_1_LNA_2_OFFSET_VS_FREQ_I      =       5539,
  NVI_C0_BCX_BLOCK_1_LNA_3_OFFSET_VS_FREQ_I      =       5540,
  NVI_C0_BCX_BLOCK_1_LNA_4_OFFSET_VS_FREQ_I      =       5541,
  NVI_C0_BCX_BLOCK_1_LNA_1_OFFSET_I              =       5542,
  NVI_C0_BCX_BLOCK_1_LNA_2_OFFSET_I              =       5543,
  NVI_C0_BCX_BLOCK_1_LNA_3_OFFSET_I              =       5544,
  NVI_C0_BCX_BLOCK_1_LNA_4_OFFSET_I              =       5545,
  NVI_C0_BCX_BLOCK_1_IM2_I_VALUE_I               =       5546,
  NVI_C0_BCX_BLOCK_1_IM2_Q_VALUE_I               =       5547,
  NVI_C0_BCX_BLOCK_1_VGA_GAIN_OFFSET_I           =       5548,
  NVI_C0_BCX_BLOCK_1_VGA_GAIN_OFFSET_VS_FREQ_I   =       5549,
  NVI_C0_BCX_BLOCK_1_IM2_TRANSCONDUCTOR_VALUE_I  =       5550,
  NVI_C0_BCX_BLOCK_1_LNA_1_RISE_I                =       5551,
  NVI_C0_BCX_BLOCK_1_LNA_1_FALL_I                =       5552,
  NVI_C0_BCX_BLOCK_1_LNA_2_RISE_I                =       5553,
  NVI_C0_BCX_BLOCK_1_LNA_2_FALL_I                =       5554,
  NVI_C0_BCX_BLOCK_1_LNA_3_RISE_I                =       5555,
  NVI_C0_BCX_BLOCK_1_LNA_3_FALL_I                =       5556,
  NVI_C0_BCX_BLOCK_1_LNA_4_RISE_I                =       5557,
  NVI_C0_BCX_BLOCK_1_LNA_4_FALL_I                =       5558,
  NVI_C0_BCX_BLOCK_1_IM_LEVEL1_I                 =       5559,
  NVI_C0_BCX_BLOCK_1_IM_LEVEL2_I                 =       5560,
  NVI_C0_BCX_BLOCK_1_IM_LEVEL3_I                 =       5561,
  NVI_C0_BCX_BLOCK_1_IM_LEVEL4_I                 =       5562,
  NVI_C1_BCX_BLOCK_1_TX_CAL_CHAN_I               =       5563,
  NVI_C1_BCX_BLOCK_1_RX_CAL_CHAN_I               =       5564,
  NVI_C1_BCX_BLOCK_1_LNA_1_OFFSET_VS_FREQ_I      =       5565,
  NVI_C1_BCX_BLOCK_1_LNA_2_OFFSET_VS_FREQ_I      =       5566,
  NVI_C1_BCX_BLOCK_1_LNA_3_OFFSET_VS_FREQ_I      =       5567,
  NVI_C1_BCX_BLOCK_1_LNA_4_OFFSET_VS_FREQ_I      =       5568,
  NVI_C1_BCX_BLOCK_1_LNA_1_OFFSET_I              =       5569,
  NVI_C1_BCX_BLOCK_1_LNA_2_OFFSET_I              =       5570,
  NVI_C1_BCX_BLOCK_1_LNA_3_OFFSET_I              =       5571,
  NVI_C1_BCX_BLOCK_1_LNA_4_OFFSET_I              =       5572,
  NVI_C1_BCX_BLOCK_1_IM2_I_VALUE_I               =       5573,
  NVI_C1_BCX_BLOCK_1_IM2_Q_VALUE_I               =       5574,
  NVI_C1_BCX_BLOCK_1_VGA_GAIN_OFFSET_I           =       5575,
  NVI_C1_BCX_BLOCK_1_VGA_GAIN_OFFSET_VS_FREQ_I   =       5576,
  NVI_C1_BCX_BLOCK_1_IM2_TRANSCONDUCTOR_VALUE_I  =       5577,
  NVI_C1_BCX_BLOCK_1_LNA_1_RISE_I                =       5578,
  NVI_C1_BCX_BLOCK_1_LNA_1_FALL_I                =       5579,
  NVI_C1_BCX_BLOCK_1_LNA_2_RISE_I                =       5580,
  NVI_C1_BCX_BLOCK_1_LNA_2_FALL_I                =       5581,
  NVI_C1_BCX_BLOCK_1_LNA_3_RISE_I                =       5582,
  NVI_C1_BCX_BLOCK_1_LNA_3_FALL_I                =       5583,
  NVI_C1_BCX_BLOCK_1_LNA_4_RISE_I                =       5584,
  NVI_C1_BCX_BLOCK_1_LNA_4_FALL_I                =       5585,
  NVI_C1_BCX_BLOCK_1_IM_LEVEL1_I                 =       5586,
  NVI_C1_BCX_BLOCK_1_IM_LEVEL2_I                 =       5587,
  NVI_C1_BCX_BLOCK_1_IM_LEVEL3_I                 =       5588,
  NVI_C1_BCX_BLOCK_1_IM_LEVEL4_I                 =       5589,
  NVI_BCX_BLOCK_1_P2_RISE_FALL_OFF_I             =       5590,
  NVI_BCX_BLOCK_1_P3_RISE_FALL_OFF_I             =       5591,
  NVI_BCX_BLOCK_1_HDR_P2_RISE_FALL_OFF_I         =       5592,
  NVI_BCX_BLOCK_1_HDR_P3_RISE_FALL_OFF_I         =       5593,
  NVI_BCX_BLOCK_VCO_COARSE_TUNE_2_I              =       5594,
  NVI_C1_BCX_BLOCK_VCO_COARSE_TUNE_TABLE_I       =       5595,
  NVI_C0_BCX_BLOCK_RX_CAL_CHAN_LRU_I             =       5596,
  NVI_C1_BCX_BLOCK_RX_CAL_CHAN_LRU_I             =       5597,
  NVI_BCX_BLOCK_HDR_P1_RISE_FALL_OFF_I           =       5598,
  NVI_BCX_BLOCK_PA_DVS_VOLTAGE_I                 =       5599,
  NVI_BCX_BLOCK_VCO_TUNE_2_I                     =       5600,
  NVI_C0_BCX_BLOCK_IM2_LPM_1_I                   =       5601,
  NVI_C0_BCX_BLOCK_IM2_LPM_2_I                   =       5602,
  NVI_C0_BCX_BLOCK_INTELLICEIVER_CAL_I           =       5603,
  NVI_C0_BCX_BLOCK_LNA_SWITCHPOINTS_LPM_1_I      =       5604,
  NVI_C0_BCX_BLOCK_LNA_SWITCHPOINTS_LPM_2_I      =       5605,
  NVI_BCX_BLOCK_ANT_QUALITY_I                    =       5606,
  NVI_C0_BCX_BLOCK_INTELLICEIVER_DET_THRESH_I    =       5607,
  NVI_BCX_BLOCK_TX_PDM_LIN_0_I                   =       5608,
  NVI_BCX_BLOCK_TX_PDM_LIN_1_I                   =       5609,
  NVI_BCX_BLOCK_TX_PDM_LIN_2_I                   =       5610,
  NVI_BCX_BLOCK_TX_PDM_LIN_3_I                   =       5611,
  NVI_BCX_BLOCK_TX_PDM_0_I                       =       5612,
  NVI_BCX_BLOCK_TX_PDM_1_I                       =       5613,
  NVI_BCX_BLOCK_TX_PDM_2_I                       =       5614,
  NVI_BCX_BLOCK_TX_PDM_3_I                       =       5615,
  NVI_BCX_BLOCK_TX_LIN_0_I                       =       5616,
  NVI_BCX_BLOCK_TX_LIN_1_I                       =       5617,
  NVI_BCX_BLOCK_TX_LIN_2_I                       =       5618,
  NVI_BCX_BLOCK_TX_LIN_3_I                       =       5619,
  NVI_BCX_BLOCK_PA_R_MAP_I                       =       5620,
  NVI_BCX_BLOCK_TX_PWR_COMP0_I                   =       5621,
  NVI_BCX_BLOCK_TX_PWR_COMP1_I                   =       5622,
  NVI_BCX_BLOCK_TX_PWR_COMP2_I                   =       5623,
  NVI_BCX_BLOCK_TX_PWR_COMP3_I                   =       5624,
  NVI_C0_BCX_BLOCK_LO_CAL_I                      =       5625,
  NVI_C0_BCX_BLOCK_IM2_CAL_I                     =       5626,
  NVI_BCX_BLOCK_EXP_HDET_VS_AGC_V2_I             =       5627,
  NVI_BCX_BLOCK_HDET_OFF_V2_I                    =       5628,
  NVI_BCX_BLOCK_HDET_SPN_V2_I                    =       5629,
  NVI_BCX_BLOCK_1_VCO_COARSE_TUNE_2_I            =       5630,
  NVI_C1_BCX_BLOCK_1_VCO_COARSE_TUNE_TABLE_I     =       5631,
  NVI_C0_BCX_BLOCK_1_RX_CAL_CHAN_LRU_I           =       5632,
  NVI_C1_BCX_BLOCK_1_RX_CAL_CHAN_LRU_I           =       5633,
  NVI_BCX_BLOCK_1_HDR_P1_RISE_FALL_OFF_I         =       5634,
  NVI_BCX_BLOCK_1_PA_DVS_VOLTAGE_I               =       5635,
  NVI_BCX_BLOCK_1_VCO_TUNE_2_I                   =       5636,
  NVI_C0_BCX_BLOCK_1_IM2_LPM_1_I                 =       5637,
  NVI_C0_BCX_BLOCK_1_IM2_LPM_2_I                 =       5638,
  NVI_C0_BCX_BLOCK_1_INTELLICEIVER_CAL_I         =       5639,
  NVI_C0_BCX_BLOCK_1_LNA_SWITCHPOINTS_LPM_1_I    =       5640,
  NVI_C0_BCX_BLOCK_1_LNA_SWITCHPOINTS_LPM_2_I    =       5641,
  NVI_BCX_BLOCK_1_ANT_QUALITY_I                  =       5642,
  NVI_C0_BCX_BLOCK_1_INTELLICEIVER_DET_THRESH_I  =       5643,
  NVI_BCX_BLOCK_1_TX_PDM_LIN_0_I                 =       5644,
  NVI_BCX_BLOCK_1_TX_PDM_LIN_1_I                 =       5645,
  NVI_BCX_BLOCK_1_TX_PDM_LIN_2_I                 =       5646,
  NVI_BCX_BLOCK_1_TX_PDM_LIN_3_I                 =       5647,
  NVI_BCX_BLOCK_1_TX_PDM_0_I                     =       5648,
  NVI_BCX_BLOCK_1_TX_PDM_1_I                     =       5649,
  NVI_BCX_BLOCK_1_TX_PDM_2_I                     =       5650,
  NVI_BCX_BLOCK_1_TX_PDM_3_I                     =       5651,
  NVI_BCX_BLOCK_1_TX_LIN_0_I                     =       5652,
  NVI_BCX_BLOCK_1_TX_LIN_1_I                     =       5653,
  NVI_BCX_BLOCK_1_TX_LIN_2_I                     =       5654,
  NVI_BCX_BLOCK_1_TX_LIN_3_I                     =       5655,
  NVI_BCX_BLOCK_1_PA_R_MAP_I                     =       5656,
  NVI_BCX_BLOCK_1_TX_PWR_COMP0_I                 =       5657,
  NVI_BCX_BLOCK_1_TX_PWR_COMP1_I                 =       5658,
  NVI_BCX_BLOCK_1_TX_PWR_COMP2_I                 =       5659,
  NVI_BCX_BLOCK_1_TX_PWR_COMP3_I                 =       5660,
  NVI_C0_BCX_BLOCK_1_LO_CAL_I                    =       5661,
  NVI_C0_BCX_BLOCK_1_IM2_CAL_I                   =       5662,
  NVI_BCX_BLOCK_1_EXP_HDET_VS_AGC_V2_I           =       5663,
  NVI_BCX_BLOCK_1_HDET_OFF_V2_I                  =       5664,
  NVI_BCX_BLOCK_1_HDET_SPN_V2_I                  =       5665,
  NVI_BCX_BLOCK_BAND_CLASS_I                     =       5666,
  NVI_BCX_BLOCK_1_BAND_CLASS_I                   =       5667,
  NVI_BCX_BLOCK_SUBCLASS_MASK_I                  =       5668,
  NVI_BCX_BLOCK_1_SUBCLASS_MASK_I                =       5669,
  NVI_UIM_PAR_ERR_WORKAROUND_I                   =       5670,
  NVI_GPS1_ER_CURVE_FIT_INTERVAL_I               =       5671,
  NVI_CGPS_ER_ENABLE_I                           =       5672,
  NVI_CGPS_ER_START_TIME_I                       =       5673,
  NVI_CGPS_ER_SLOT_INTERVAL_I                    =       5674,
  NVI_CGPS_ER_SLOT_PERIOD_I                      =       5675,
  NVI_UW_FMC_NAT_REFRESH_TIMER_I                 =       5676,
  NVI_BC0_SUBCLASS_MASK_I                        =       5677,
  NVI_BC1_SUBCLASS_MASK_I                        =       5678,
  NVI_BC2_SUBCLASS_MASK_I                        =       5679,
  NVI_BC3_SUBCLASS_MASK_I                        =       5680,
  NVI_BC4_SUBCLASS_MASK_I                        =       5681,
  NVI_BC5_SUBCLASS_MASK_I                        =       5682,
  NVI_BC6_SUBCLASS_MASK_I                        =       5683,
  NVI_BC7_SUBCLASS_MASK_I                        =       5684,
  NVI_BC8_SUBCLASS_MASK_I                        =       5685,
  NVI_BC9_SUBCLASS_MASK_I                        =       5686,
  NVI_BC10_SUBCLASS_MASK_I                       =       5687,
  NVI_BC11_SUBCLASS_MASK_I                       =       5688,
  NVI_BC12_SUBCLASS_MASK_I                       =       5689,
  NVI_BC13_SUBCLASS_MASK_I                       =       5690,
  NVI_BC14_SUBCLASS_MASK_I                       =       5691,
  NVI_BC15_SUBCLASS_MASK_I                       =       5692,
  NVI_HS_USB_USE_PMIC_OTG_COMPARATORS_I          =       5693,
  NVI_RFR_MULTI_CHIPSET_1_BB_FILTER_I            =       5694,
  NVI_C1_RFR_MULTI_CHIPSET_1_BB_FILTER_I         =       5695,
  NVI_RFR_MULTI_CHIPSET_1_IQ_LINE_RESISTOR_I     =       5696,
  NVI_HS_USB_NUMBER_OF_SDCC_LUNS_I               =       5697,
  NVI_THERMAL_MONITOR_THRESHOLDS_I               =       5698,
  NVI_THERMAL_MONITOR_TIMERS_I                   =       5699,
  NVI_DELTA_TX_POWER_I                           =       5700,
  NVI_THERMAL_CURRENT_MONITOR_CONFIG_I           =       5701,
  NVI_THERMAL_MONITOR_MAX_TEMP_I                 =       5702,
  NVI_PPP_EAP_SHARED_SECRET_I                    =       5703,
  NVI_PPP_EAP_USER_ID_I                          =       5704,
  NVI_PPP_VSNCP_CONFIG_DATA_I                    =       5705,
  NVI_EHRPD_ENABLED_I                            =       5706,
  NVI_WLAN_ATHEROS_SPECIFIC_CFG_I                =       5707,
  NVI_GAN_MODE_PREFERENCE_I                      =       5708,
  NVI_IWLAN_ENFORCE_PEER_CERT_AUTH_I             =       5709,
  NVI_LPM_PERSISTENCE_I                          =       5710,
  NVI_CSIM_SUPPORT_I                             =       5711,
  NVI_QMI_ROAM_PREF_I                            =       5712,
  NVI_UW_FMC_V4_MTU_I                            =       5713,
  NVI_AAGPS_GLOBAL_ALTITUDE_I                    =       5714,
  NVI_AAGPS_GLOBAL_ALT_UNC_I                     =       5715,
  NVI_WWWAN_CONFIG_I                             =       5716,
  NVI_HS_USB_HOST_MODE_ENABLED_I                 =       5717,
  NVI_WLAN_CPU_FLOW_CONTROL_CFG_I                =       5718,
  NVI_ADSP_DYN_CLOCK_VOLTAGE_I                   =       5719,
  NVI_MTPDP_APP_I                                =       5720,
  NVI_AAGPS_ACQUISITION_TIMER_I                  =       5721,
  NVI_CGPS_MINIMUM_GPS_WEEK_NUMBER_I             =       5722,
  NVI_CURRENT_MONITOR_THRESHOLDS_I               =       5723,
  NVI_THERMAL_CURRENT_MONITOR_CFG_MITIGATION_I   =       5724,
  NVI_CGPS_QWIP_LOC_ENGINE_CONFIG_I              =       5725,
  NVI_CGPS_QWIP_SERVER_CONFIG_I                  =       5726,
  NVI_CGPS_QWIP_TILE_CONFIG_I                    =       5727,
  NVI_CGPS_QWIP_RESERVED_1_I                     =       5728,
  NVI_CGPS_QWIP_RESERVED_2_I                     =       5729,
  NVI_CGPS_XTRA_T_CONTROL_I                      =       5730,
  NVI_GPS_DEFAULT_OPERATING_MODE_I               =       5731,
  NVI_GPS_DEFAULT_TBF_I                          =       5732,
  NVI_BC0_INTELLICEIVER_RC_TUNE_CAL_I            =       5733,
  NVI_BC1_INTELLICEIVER_RC_TUNE_CAL_I            =       5734,
  NVI_BC2_INTELLICEIVER_RC_TUNE_CAL_I            =       5735,
  NVI_BC3_INTELLICEIVER_RC_TUNE_CAL_I            =       5736,
  NVI_BC4_INTELLICEIVER_RC_TUNE_CAL_I            =       5737,
  NVI_BC5_INTELLICEIVER_RC_TUNE_CAL_I            =       5738,
  NVI_BC6_INTELLICEIVER_RC_TUNE_CAL_I            =       5739,
  NVI_BC7_INTELLICEIVER_RC_TUNE_CAL_I            =       5740,
  NVI_BC8_INTELLICEIVER_RC_TUNE_CAL_I            =       5741,
  NVI_BC9_INTELLICEIVER_RC_TUNE_CAL_I            =       5742,
  NVI_BC10_INTELLICEIVER_RC_TUNE_CAL_I           =       5743,
  NVI_BC11_INTELLICEIVER_RC_TUNE_CAL_I           =       5744,
  NVI_BC12_INTELLICEIVER_RC_TUNE_CAL_I           =       5745,
  NVI_BC13_INTELLICEIVER_RC_TUNE_CAL_I           =       5746,
  NVI_BC14_INTELLICEIVER_RC_TUNE_CAL_I           =       5747,
  NVI_BC15_INTELLICEIVER_RC_TUNE_CAL_I           =       5748,
  NVI_BCX_BLOCK_INTELLICEIVER_RC_TUNE_CAL_I      =       5749,
  NVI_BCX_BLOCK_1_INTELLICEIVER_RC_TUNE_CAL_I    =       5750,
  NVI_ADSP_PWRC_DISABLE_I                        =       5751,
  NVI_GSM_850_LINEAR_ENVDC_CAL_VAL_I             =       5752,
  NVI_GSM_900_LINEAR_ENVDC_CAL_VAL_I             =       5753,
  NVI_GSM_1800_LINEAR_ENVDC_CAL_VAL_I            =       5754,
  NVI_GSM_1900_LINEAR_ENVDC_CAL_VAL_I            =       5755,
  NVI_HS_USB_RECONNECT_ON_RESET_DURING_SUSPEND_I =       5756,
  NVI_MF_RSSI_CAL_VS_FREQ_6_I                    =       5757,
  NVI_MF_CHAN_SUPPORT_L_BAND_I                   =       5758,
  NVI_MF_RSSI_CAL_VS_L_BAND_FREQ_0_I             =       5759,
  NVI_MF_RSSI_CAL_VS_L_BAND_FREQ_1_I             =       5760,
  NVI_MF_RSSI_CAL_VS_L_BAND_FREQ_2_I             =       5761,
  NVI_MF_RSSI_CAL_VS_L_BAND_FREQ_3_I             =       5762,
  NVI_MF_RSSI_CAL_VS_L_BAND_FREQ_4_I             =       5763,
  NVI_MF_RSSI_CAL_VS_L_BAND_FREQ_5_I             =       5764,
  NVI_MF_RSSI_CAL_VS_L_BAND_FREQ_6_I             =       5765,
  NVI_MF_CHAN_SUPPORT_VHF_I                      =       5766,
  NVI_MF_RSSI_CAL_VS_VHF_FREQ_0_I                =       5767,
  NVI_MF_RSSI_CAL_VS_VHF_FREQ_1_I                =       5768,
  NVI_MF_RSSI_CAL_VS_VHF_FREQ_2_I                =       5769,
  NVI_MF_RSSI_CAL_VS_VHF_FREQ_3_I                =       5770,
  NVI_MF_RSSI_CAL_VS_VHF_FREQ_4_I                =       5771,
  NVI_MF_RSSI_CAL_VS_VHF_FREQ_5_I                =       5772,
  NVI_MF_RSSI_CAL_VS_VHF_FREQ_6_I                =       5773,
  NVI_MF_PLATFORM_CONFIG_I                       =       5774,
  NVI_MBP_RF_ISDBT_CAL_FREQ_I                    =       5775,
  NVI_MBP_RF_ISDBT_GS0_CAL_I                     =       5776,
  NVI_MBP_RF_ISDBT_GS1_CAL_I                     =       5777,
  NVI_MBP_RF_ISDBT_GS2_CAL_I                     =       5778,
  NVI_MBP_RF_ISDBT_GS3_CAL_I                     =       5779,
  NVI_MBP_RF_ISDBT_GS4_CAL_I                     =       5780,
  NVI_MBP_RF_ISDBT_GS5_CAL_I                     =       5781,
  NVI_MBP_RF_ISDBT_GS6_CAL_I                     =       5782,
  NVI_MBP_RF_DVBH_GS6_CAL_I                      =       5783,
  NVI_RTP_MANAGER_MAX_DEJITTER_DELAY_I           =       5784,
  NVI_HS_USB_DISABLE_SLEEP_VOTING_I              =       5785,
  NVI_WB_CAL_PASSED_I                            =       5786,
  NVI_ALL_OUTLIERS_I                             =       5787,
  NVI_RG_ADJ_RATIO_I                             =       5788,
  NVI_BG_ADJ_RATIO_I                             =       5789,
  NVI_RG_HIGH_TOL_I                              =       5790,
  NVI_RG_LOW_TOL_I                               =       5791,
  NVI_BG_HIGH_TOL_I                              =       5792,
  NVI_BG_LOW_TOL_I                               =       5793,
  NVI_UIM_ICCID_TPL_I                            =       5794,
  NVI_EHRPD_MILENAGE_OP_I                        =       5795,
  NVI_EHRPD_IMSI_I                               =       5796,
  NVI_CGPS_ME_SHALLOW_INTEG_STAGE1_I             =       5797,
  NVI_CGPS_ME_SHALLOW_INTEG_STAGE2_I             =       5798,
  NVI_CGPS_ME_SHALLOW_INTEG_STAGE3_I             =       5799,
  NVI_GSM_850_LINEAR_PA_R0_TEMP_COMP_I           =       5800,
  NVI_GSM_850_LINEAR_PA_R1_TEMP_COMP_I           =       5801,
  NVI_GSM_850_LINEAR_PA_R2_TEMP_COMP_I           =       5802,
  NVI_GSM_850_LINEAR_PA_R3_TEMP_COMP_I           =       5803,
  NVI_GSM_900_LINEAR_PA_R0_TEMP_COMP_I           =       5804,
  NVI_GSM_900_LINEAR_PA_R1_TEMP_COMP_I           =       5805,
  NVI_GSM_900_LINEAR_PA_R2_TEMP_COMP_I           =       5806,
  NVI_GSM_900_LINEAR_PA_R3_TEMP_COMP_I           =       5807,
  NVI_GSM_1800_LINEAR_PA_R0_TEMP_COMP_I          =       5808,
  NVI_GSM_1800_LINEAR_PA_R1_TEMP_COMP_I          =       5809,
  NVI_GSM_1800_LINEAR_PA_R2_TEMP_COMP_I          =       5810,
  NVI_GSM_1800_LINEAR_PA_R3_TEMP_COMP_I          =       5811,
  NVI_GSM_1900_LINEAR_PA_R0_TEMP_COMP_I          =       5812,
  NVI_GSM_1900_LINEAR_PA_R1_TEMP_COMP_I          =       5813,
  NVI_GSM_1900_LINEAR_PA_R2_TEMP_COMP_I          =       5814,
  NVI_GSM_1900_LINEAR_PA_R3_TEMP_COMP_I          =       5815,
  NVI_GSM_850_LINEAR_PA_R0_VBATT_LO_COMP_I       =       5816,
  NVI_GSM_850_LINEAR_PA_R0_VBATT_HI_COMP_I       =       5817,
  NVI_GSM_850_LINEAR_PA_R1_VBATT_LO_COMP_I       =       5818,
  NVI_GSM_850_LINEAR_PA_R1_VBATT_HI_COMP_I       =       5819,
  NVI_GSM_850_LINEAR_PA_R2_VBATT_LO_COMP_I       =       5820,
  NVI_GSM_850_LINEAR_PA_R2_VBATT_HI_COMP_I       =       5821,
  NVI_GSM_850_LINEAR_PA_R3_VBATT_LO_COMP_I       =       5822,
  NVI_GSM_850_LINEAR_PA_R3_VBATT_HI_COMP_I       =       5823,
  NVI_GSM_900_LINEAR_PA_R0_VBATT_LO_COMP_I       =       5824,
  NVI_GSM_900_LINEAR_PA_R0_VBATT_HI_COMP_I       =       5825,
  NVI_GSM_900_LINEAR_PA_R1_VBATT_LO_COMP_I       =       5826,
  NVI_GSM_900_LINEAR_PA_R1_VBATT_HI_COMP_I       =       5827,
  NVI_GSM_900_LINEAR_PA_R2_VBATT_LO_COMP_I       =       5828,
  NVI_GSM_900_LINEAR_PA_R2_VBATT_HI_COMP_I       =       5829,
  NVI_GSM_900_LINEAR_PA_R3_VBATT_LO_COMP_I       =       5830,
  NVI_GSM_900_LINEAR_PA_R3_VBATT_HI_COMP_I       =       5831,
  NVI_GSM_1800_LINEAR_PA_R0_VBATT_LO_COMP_I      =       5832,
  NVI_GSM_1800_LINEAR_PA_R0_VBATT_HI_COMP_I      =       5833,
  NVI_GSM_1800_LINEAR_PA_R1_VBATT_LO_COMP_I      =       5834,
  NVI_GSM_1800_LINEAR_PA_R1_VBATT_HI_COMP_I      =       5835,
  NVI_GSM_1800_LINEAR_PA_R2_VBATT_LO_COMP_I      =       5836,
  NVI_GSM_1800_LINEAR_PA_R2_VBATT_HI_COMP_I      =       5837,
  NVI_GSM_1800_LINEAR_PA_R3_VBATT_LO_COMP_I      =       5838,
  NVI_GSM_1800_LINEAR_PA_R3_VBATT_HI_COMP_I      =       5839,
  NVI_GSM_1900_LINEAR_PA_R0_VBATT_LO_COMP_I      =       5840,
  NVI_GSM_1900_LINEAR_PA_R0_VBATT_HI_COMP_I      =       5841,
  NVI_GSM_1900_LINEAR_PA_R1_VBATT_LO_COMP_I      =       5842,
  NVI_GSM_1900_LINEAR_PA_R1_VBATT_HI_COMP_I      =       5843,
  NVI_GSM_1900_LINEAR_PA_R2_VBATT_LO_COMP_I      =       5844,
  NVI_GSM_1900_LINEAR_PA_R2_VBATT_HI_COMP_I      =       5845,
  NVI_GSM_1900_LINEAR_PA_R3_VBATT_LO_COMP_I      =       5846,
  NVI_GSM_1900_LINEAR_PA_R3_VBATT_HI_COMP_I      =       5847,
  NVI_WCDMA_1800_RXF_MIS_COMP_A_COEFF_I          =       5848,
  NVI_WCDMA_1800_RXF_MIS_COMP_B_COEFF_I          =       5849,
  NVI_C1_WCDMA_1800_RXF_MIS_COMP_A_COEFF_I       =       5850,
  NVI_C1_WCDMA_1800_RXF_MIS_COMP_B_COEFF_I       =       5851,
  NVI_WCDMA_1800_RXF_ICI_I_COEF0_1_I             =       5852,
  NVI_WCDMA_1800_RXF_ICI_I_COEF2_3_I             =       5853,
  NVI_WCDMA_1800_RXF_ICI_I_COEF4_5_I             =       5854,
  NVI_WCDMA_1800_RXF_ICI_I_COEF6_7_I             =       5855,
  NVI_WCDMA_1800_RXF_ICI_I_COEF8_9_I             =       5856,
  NVI_WCDMA_1800_RXF_ICI_I_COEF10_11_I           =       5857,
  NVI_WCDMA_1800_RXF_ICI_I_COEF12_13_I           =       5858,
  NVI_WCDMA_1800_RXF_ICI_I_COEF14_15_I           =       5859,
  NVI_WCDMA_1800_RXF_ICI_Q_COEF0_1_I             =       5860,
  NVI_WCDMA_1800_RXF_ICI_Q_COEF2_3_I             =       5861,
  NVI_WCDMA_1800_RXF_ICI_Q_COEF4_5_I             =       5862,
  NVI_WCDMA_1800_RXF_ICI_Q_COEF6_7_I             =       5863,
  NVI_WCDMA_1800_RXF_ICI_Q_COEF8_9_I             =       5864,
  NVI_WCDMA_1800_RXF_ICI_Q_COEF10_11_I           =       5865,
  NVI_WCDMA_1800_RXF_ICI_Q_COEF12_13_I           =       5866,
  NVI_WCDMA_1800_RXF_ICI_Q_COEF14_15_I           =       5867,
  NVI_WCDMA_1800_RXF_ICI_IQ_TRUNC_I              =       5868,
  NVI_C1_WCDMA_1800_RXF_ICI_I_COEF0_1_I          =       5869,
  NVI_C1_WCDMA_1800_RXF_ICI_I_COEF2_3_I          =       5870,
  NVI_C1_WCDMA_1800_RXF_ICI_I_COEF4_5_I          =       5871,
  NVI_C1_WCDMA_1800_RXF_ICI_I_COEF6_7_I          =       5872,
  NVI_C1_WCDMA_1800_RXF_ICI_I_COEF8_9_I          =       5873,
  NVI_C1_WCDMA_1800_RXF_ICI_I_COEF10_11_I        =       5874,
  NVI_C1_WCDMA_1800_RXF_ICI_I_COEF12_13_I        =       5875,
  NVI_C1_WCDMA_1800_RXF_ICI_I_COEF14_15_I        =       5876,
  NVI_C1_WCDMA_1800_RXF_ICI_Q_COEF0_1_I          =       5877,
  NVI_C1_WCDMA_1800_RXF_ICI_Q_COEF2_3_I          =       5878,
  NVI_C1_WCDMA_1800_RXF_ICI_Q_COEF4_5_I          =       5879,
  NVI_C1_WCDMA_1800_RXF_ICI_Q_COEF6_7_I          =       5880,
  NVI_C1_WCDMA_1800_RXF_ICI_Q_COEF8_9_I          =       5881,
  NVI_C1_WCDMA_1800_RXF_ICI_Q_COEF10_11_I        =       5882,
  NVI_C1_WCDMA_1800_RXF_ICI_Q_COEF12_13_I        =       5883,
  NVI_C1_WCDMA_1800_RXF_ICI_Q_COEF14_15_I        =       5884,
  NVI_C1_WCDMA_1800_RXF_ICI_IQ_TRUNC_I           =       5885,
  NVI_WLAN_UUID_I                                =       5886,
  NVI_HDR_IS683A_SCAN_LIST_I                     =       5887,
  NVI_CGPS_VEL_UNC_MASK_I                        =       5888,
  NVI_WCDMA_900_RXF_MIS_COMP_A_COEFF_I           =       5889,
  NVI_WCDMA_900_RXF_MIS_COMP_B_COEFF_I           =       5890,
  NVI_C1_WCDMA_900_RXF_MIS_COMP_A_COEFF_I        =       5891,
  NVI_C1_WCDMA_900_RXF_MIS_COMP_B_COEFF_I        =       5892,
  NVI_WCDMA_900_RXF_ICI_I_COEF0_1_I              =       5893,
  NVI_WCDMA_900_RXF_ICI_I_COEF2_3_I              =       5894,
  NVI_WCDMA_900_RXF_ICI_I_COEF4_5_I              =       5895,
  NVI_WCDMA_900_RXF_ICI_I_COEF6_7_I              =       5896,
  NVI_WCDMA_900_RXF_ICI_I_COEF8_9_I              =       5897,
  NVI_WCDMA_900_RXF_ICI_I_COEF10_11_I            =       5898,
  NVI_WCDMA_900_RXF_ICI_I_COEF12_13_I            =       5899,
  NVI_WCDMA_900_RXF_ICI_I_COEF14_15_I            =       5900,
  NVI_WCDMA_900_RXF_ICI_Q_COEF0_1_I              =       5901,
  NVI_WCDMA_900_RXF_ICI_Q_COEF2_3_I              =       5902,
  NVI_WCDMA_900_RXF_ICI_Q_COEF4_5_I              =       5903,
  NVI_WCDMA_900_RXF_ICI_Q_COEF6_7_I              =       5904,
  NVI_WCDMA_900_RXF_ICI_Q_COEF8_9_I              =       5905,
  NVI_WCDMA_900_RXF_ICI_Q_COEF10_11_I            =       5906,
  NVI_WCDMA_900_RXF_ICI_Q_COEF12_13_I            =       5907,
  NVI_WCDMA_900_RXF_ICI_Q_COEF14_15_I            =       5908,
  NVI_WCDMA_900_RXF_ICI_IQ_TRUNC_I               =       5909,
  NVI_C1_WCDMA_900_RXF_ICI_I_COEF0_1_I           =       5910,
  NVI_C1_WCDMA_900_RXF_ICI_I_COEF2_3_I           =       5911,
  NVI_C1_WCDMA_900_RXF_ICI_I_COEF4_5_I           =       5912,
  NVI_C1_WCDMA_900_RXF_ICI_I_COEF6_7_I           =       5913,
  NVI_C1_WCDMA_900_RXF_ICI_I_COEF8_9_I           =       5914,
  NVI_C1_WCDMA_900_RXF_ICI_I_COEF10_11_I         =       5915,
  NVI_C1_WCDMA_900_RXF_ICI_I_COEF12_13_I         =       5916,
  NVI_C1_WCDMA_900_RXF_ICI_I_COEF14_15_I         =       5917,
  NVI_C1_WCDMA_900_RXF_ICI_Q_COEF0_1_I           =       5918,
  NVI_C1_WCDMA_900_RXF_ICI_Q_COEF2_3_I           =       5919,
  NVI_C1_WCDMA_900_RXF_ICI_Q_COEF4_5_I           =       5920,
  NVI_C1_WCDMA_900_RXF_ICI_Q_COEF6_7_I           =       5921,
  NVI_C1_WCDMA_900_RXF_ICI_Q_COEF8_9_I           =       5922,
  NVI_C1_WCDMA_900_RXF_ICI_Q_COEF10_11_I         =       5923,
  NVI_C1_WCDMA_900_RXF_ICI_Q_COEF12_13_I         =       5924,
  NVI_C1_WCDMA_900_RXF_ICI_Q_COEF14_15_I         =       5925,
  NVI_C1_WCDMA_900_RXF_ICI_IQ_TRUNC_I            =       5926,
  NVI_CGPS_QWIP_HEPE_PARAMS_I                    =       5927,
  NVI_CACHE_WT_I                                 =       5928,
  NVI_QDJ_DEQUEUE_LOG_ENABLED_I                  =       5929,
  NVI_GSM_850_LINEAR_TX_GAIN_PARAM_I             =       5930,
  NVI_GSM_1800_LINEAR_TX_GAIN_PARAM_I            =       5931,
  NVI_GSM_1900_LINEAR_TX_GAIN_PARAM_I            =       5932,
  NVI_EDGE_850_LINEAR_TX_GAIN_PARAM_I            =       5933,
  NVI_EDGE_1800_LINEAR_TX_GAIN_PARAM_I           =       5934,
  NVI_EDGE_1900_LINEAR_TX_GAIN_PARAM_I           =       5935,
  NVI_PDP_DEACTIVATE_BEFORE_DETACH_SUPPORTED_I   =       5936,
  NVI_STA_TEST_MODE_I                            =       5937,
  NVI_MIPV6_SEC_HA_I                             =       5938,
  NVI_MIPV6_HOA_PREFIX_LEN_I                     =       5939,
  NVI_WCDMA_QICE_CTRL_I                          =       5940,
  NVI_WCDMA_QICE_LMMSE_ORIDE_I                   =       5941,
  NVI_WCDMA_QICE_SF16_ORIDE_I                    =       5942,
  NVI_WCDMA_QICE_SF16_NONLINEAR_ORIDE_I          =       5943,
  NVI_CGPS_UTC_GPS_TIME_OFFSET_I                 =       5944,
  NVI_BT_QSOC_NVM_MODE_I                         =       5945,
  NVI_BT_QSOC_CLASS_TYPE_I                       =       5946,
  NVI_UNDP_FEATURE_CONFIGS_I                     =       5947,
  NVI_LTE_B13_RX_CAL_CHAN_I                      =       5948,
  NVI_LTE_B13_RX_DELAY_I                         =       5949,
  NVI_LTE_B13_LNA_RANGE_RISE_FALL_I              =       5950,
  NVI_LTE_B13_NONBYPASS_BYPASS_TIMER_I           =       5951,
  NVI_LTE_B13_IM_LEVEL_I                         =       5952,
  NVI_LTE_B13_RX_GAIN_VS_TEMP_I                  =       5953,
  NVI_LTE_B13_RX_GAIN_I                          =       5954,
  NVI_LTE_B13_RX_GAIN_VS_FREQ_I                  =       5955,
  NVI_LTE_B13_LNA_PHASE_CTRL_I                   =       5956,
  NVI_LTE_B13_IM2_VALUES_I                       =       5957,
  NVI_LTE_B13_RXF_MISMATCH_COMP_I                =       5958,
  NVI_LTE_B13_ENC_BTF_I                          =       5959,
  NVI_LTE_B13_MAX_TX_POWER_I                     =       5960,
  NVI_LTE_B13_AGC_PA_ON_RISE_FALL_DELAY_I        =       5961,
  NVI_LTE_B13_AGC_TX_ON_RISE_FALL_DELAY_I        =       5962,
  NVI_LTE_B13_PA_GAIN_UP_DOWN_TIME_I             =       5963,
  NVI_LTE_B13_TX_ROT_ANGLE_PA_STATE_I            =       5964,
  NVI_LTE_B13_PA_COMPENSATE_UP_DOWN_I            =       5965,
  NVI_LTE_B13_TX_LIN_VS_TEMP_I                   =       5966,
  NVI_LTE_B13_PA_RANGE_MAP_I                     =       5967,
  NVI_LTE_B13_TIMER_HYSTERISIS_I                 =       5968,
  NVI_LTE_B13_PA_RISE_FALL_THRESHOLD_I           =       5969,
  NVI_LTE_B13_TX_CAL_CHAN_I                      =       5970,
  NVI_LTE_B13_TX_LIMIT_VS_TEMP_I                 =       5971,
  NVI_LTE_B13_MPR_BASED_PA_SWITCHPOINTS_SHIFT_I  =       5972,
  NVI_LTE_B13_TX_MPR_BACKOFF_I                   =       5973,
  NVI_LTE_B13_TX_DIGITAL_GAIN_COMP_I             =       5974,
  NVI_LTE_B13_TX_AGC_OFFSET_I                    =       5975,
  NVI_LTE_B13_TX_LIN_MASTER_0_I                  =       5976,
  NVI_LTE_B13_TX_LIN_MASTER_1_I                  =       5977,
  NVI_LTE_B13_TX_LIN_MASTER_2_I                  =       5978,
  NVI_LTE_B13_TX_LIN_MASTER_3_I                  =       5979,
  NVI_LTE_B13_TX_GAIN_INDEX_0_I                  =       5980,
  NVI_LTE_B13_TX_GAIN_INDEX_1_I                  =       5981,
  NVI_LTE_B13_TX_GAIN_INDEX_2_I                  =       5982,
  NVI_LTE_B13_TX_GAIN_INDEX_3_I                  =       5983,
  NVI_LTE_B13_TX_COMP_VS_FREQ_I                  =       5984,
  NVI_LTE_B13_EXP_HDET_VS_AGC_I                  =       5985,
  NVI_LTE_B13_TX_LIMIT_VS_FREQ_I                 =       5986,
  NVI_LTE_B13_HDET_OFF_SPAN_I                    =       5987,
  NVI_LTE_B13_ANTSEL_I                           =       5988,
  NVI_LTE_B13_C1_ANTSEL_I                        =       5989,
  NVI_LTE_B13_C1_NONBYPASS_BYPASS_TIMER_I        =       5990,
  NVI_LTE_B13_C1_LNA_RANGE_RISE_FALL_I           =       5991,
  NVI_LTE_B13_C1_IM_LEVEL_I                      =       5992,
  NVI_LTE_B13_C1_RX_GAIN_VS_TEMP_I               =       5993,
  NVI_LTE_B13_C1_LNA_PHASE_CTRL_I                =       5994,
  NVI_LTE_B13_C1_RX_GAIN_I                       =       5995,
  NVI_LTE_B13_C1_RX_GAIN_VS_FREQ_I               =       5996,
  NVI_LTE_B13_C1_IM2_VALUES_I                    =       5997,
  NVI_LTE_B13_C1_RX_CAL_CHAN_I                   =       5998,
  NVI_LTE_B7_NONBYPASS_BYPASS_TIMER_I            =       5999,
  NVI_LTE_B7_RX_DELAY_I                          =       6000,
  NVI_LTE_B7_RX_CAL_CHAN_I                       =       6001,
  NVI_LTE_B7_LNA_RANGE_RISE_FALL_I               =       6002,
  NVI_LTE_B7_IM_LEVEL_I                          =       6003,
  NVI_LTE_B7_RX_GAIN_VS_TEMP_I                   =       6004,
  NVI_LTE_B7_RX_GAIN_I                           =       6005,
  NVI_LTE_B7_RX_GAIN_VS_FREQ_I                   =       6006,
  NVI_LTE_B7_LNA_PHASE_CTRL_I                    =       6007,
  NVI_LTE_B7_IM2_VALUES_I                        =       6008,
  NVI_LTE_B7_RXF_MISMATCH_COMP_I                 =       6009,
  NVI_LTE_B7_ENC_BTF_I                           =       6010,
  NVI_LTE_B7_MAX_TX_POWER_I                      =       6011,
  NVI_LTE_B7_AGC_PA_ON_RISE_FALL_DELAY_I         =       6012,
  NVI_LTE_B7_AGC_TX_ON_RISE_FALL_DELAY_I         =       6013,
  NVI_LTE_B7_PA_GAIN_UP_DOWN_TIME_I              =       6014,
  NVI_LTE_B7_TX_ROT_ANGLE_PA_STATE_I             =       6015,
  NVI_LTE_B7_PA_COMPENSATE_UP_DOWN_I             =       6016,
  NVI_LTE_B7_TX_LIN_VS_TEMP_I                    =       6017,
  NVI_LTE_B7_PA_RANGE_MAP_I                      =       6018,
  NVI_LTE_B7_TIMER_HYSTERISIS_I                  =       6019,
  NVI_LTE_B7_PA_RISE_FALL_THRESHOLD_I            =       6020,
  NVI_LTE_B7_TX_CAL_CHAN_I                       =       6021,
  NVI_LTE_B7_TX_LIMIT_VS_TEMP_I                  =       6022,
  NVI_LTE_B7_MPR_BASED_PA_SWITCHPOINTS_SHIFT_I   =       6023,
  NVI_LTE_B7_TX_MPR_BACKOFF_I                    =       6024,
  NVI_LTE_B7_TX_DIGITAL_GAIN_COMP_I              =       6025,
  NVI_LTE_B7_TX_AGC_OFFSET_I                     =       6026,
  NVI_LTE_B7_TX_LIN_MASTER_0_I                   =       6027,
  NVI_LTE_B7_TX_LIN_MASTER_1_I                   =       6028,
  NVI_LTE_B7_TX_LIN_MASTER_2_I                   =       6029,
  NVI_LTE_B7_TX_LIN_MASTER_3_I                   =       6030,
  NVI_LTE_B7_TX_GAIN_INDEX_0_I                   =       6031,
  NVI_LTE_B7_TX_GAIN_INDEX_1_I                   =       6032,
  NVI_LTE_B7_TX_GAIN_INDEX_2_I                   =       6033,
  NVI_LTE_B7_TX_GAIN_INDEX_3_I                   =       6034,
  NVI_LTE_B7_TX_COMP_VS_FREQ_I                   =       6035,
  NVI_LTE_B7_EXP_HDET_VS_AGC_I                   =       6036,
  NVI_LTE_B7_TX_LIMIT_VS_FREQ_I                  =       6037,
  NVI_LTE_B7_HDET_OFF_SPAN_I                     =       6038,
  NVI_LTE_B7_ANTSEL_I                            =       6039,
  NVI_LTE_B7_C1_ANTSEL_I                         =       6040,
  NVI_LTE_B7_C1_NONBYPASS_BYPASS_TIMER_I         =       6041,
  NVI_LTE_B7_C0_C1_DELAY_I                       =       6042,
  NVI_LTE_B13_C0_C1_DELAY_I                      =       6043,
  NVI_LTE_B7_C1_LNA_RANGE_RISE_FALL_I            =       6044,
  NVI_LTE_B7_C1_IM_LEVEL_I                       =       6045,
  NVI_LTE_B7_C1_RX_GAIN_VS_TEMP_I                =       6046,
  NVI_LTE_B7_C1_LNA_PHASE_CTRL_I                 =       6047,
  NVI_LTE_B7_C1_RX_GAIN_I                        =       6048,
  NVI_LTE_B7_C1_RX_GAIN_VS_FREQ_I                =       6049,
  NVI_LTE_B7_C1_IM2_VALUES_I                     =       6050,
  NVI_LTE_B7_C1_RX_CAL_CHAN_I                    =       6051,
  NVI_LTE_B17_NONBYPASS_BYPASS_TIMER_I           =       6052,
  NVI_LTE_B17_RX_DELAY_I                         =       6053,
  NVI_LTE_B17_RX_CAL_CHAN_I                      =       6054,
  NVI_LTE_B17_LNA_RANGE_RISE_FALL_I              =       6055,
  NVI_LTE_B17_IM_LEVEL_I                         =       6056,
  NVI_LTE_B17_RX_GAIN_VS_TEMP_I                  =       6057,
  NVI_LTE_B17_RX_GAIN_I                          =       6058,
  NVI_LTE_B17_RX_GAIN_VS_FREQ_I                  =       6059,
  NVI_LTE_B17_LNA_PHASE_CTRL_I                   =       6060,
  NVI_LTE_B17_IM2_VALUES_I                       =       6061,
  NVI_LTE_B17_RXF_MISMATCH_COMP_I                =       6062,
  NVI_LTE_B17_ENC_BTF_I                          =       6063,
  NVI_LTE_B17_MAX_TX_POWER_I                     =       6064,
  NVI_LTE_B17_AGC_PA_ON_RISE_FALL_DELAY_I        =       6065,
  NVI_LTE_B17_AGC_TX_ON_RISE_FALL_DELAY_I        =       6066,
  NVI_LTE_B17_PA_GAIN_UP_DOWN_TIME_I             =       6067,
  NVI_LTE_B17_TX_ROT_ANGLE_PA_STATE_I            =       6068,
  NVI_LTE_B17_PA_COMPENSATE_UP_DOWN_I            =       6069,
  NVI_LTE_B17_TX_LIN_VS_TEMP_I                   =       6070,
  NVI_LTE_B17_PA_RANGE_MAP_I                     =       6071,
  NVI_LTE_B17_TIMER_HYSTERISIS_I                 =       6072,
  NVI_LTE_B17_PA_RISE_FALL_THRESHOLD_I           =       6073,
  NVI_LTE_B17_TX_CAL_CHAN_I                      =       6074,
  NVI_LTE_B17_TX_LIMIT_VS_TEMP_I                 =       6075,
  NVI_LTE_B17_TX_LIN_MASTER_0_I                  =       6076,
  NVI_LTE_B17_MPR_BASED_PA_SWITCHPOINTS_SHIFT_I  =       6077,
  NVI_LTE_B17_TX_MPR_BACKOFF_I                   =       6078,
  NVI_LTE_B17_TX_DIGITAL_GAIN_COMP_I             =       6079,
  NVI_LTE_B17_TX_AGC_OFFSET_I                    =       6080,
  NVI_LTE_B17_TX_LIN_MASTER_1_I                  =       6081,
  NVI_LTE_B17_TX_LIN_MASTER_2_I                  =       6082,
  NVI_LTE_B17_TX_LIN_MASTER_3_I                  =       6083,
  NVI_LTE_B17_TX_GAIN_INDEX_0_I                  =       6084,
  NVI_LTE_B17_TX_GAIN_INDEX_1_I                  =       6085,
  NVI_LTE_B17_TX_GAIN_INDEX_2_I                  =       6086,
  NVI_LTE_B17_TX_GAIN_INDEX_3_I                  =       6087,
  NVI_LTE_B17_TX_COMP_VS_FREQ_I                  =       6088,
  NVI_LTE_B17_EXP_HDET_VS_AGC_I                  =       6089,
  NVI_LTE_B17_TX_LIMIT_VS_FREQ_I                 =       6090,
  NVI_LTE_B17_HDET_OFF_SPAN_I                    =       6091,
  NVI_LTE_B17_ANTSEL_I                           =       6092,
  NVI_LTE_B17_C1_ANTSEL_I                        =       6093,
  NVI_LTE_B17_C0_C1_DELAY_I                      =       6094,
  NVI_LTE_B17_C1_LNA_RANGE_RISE_FALL_I           =       6095,
  NVI_LTE_B17_C1_IM_LEVEL_I                      =       6096,
  NVI_LTE_B17_C1_RX_GAIN_VS_TEMP_I               =       6097,
  NVI_LTE_B17_C1_LNA_PHASE_CTRL_I                =       6098,
  NVI_LTE_B17_C1_RX_GAIN_I                       =       6099,
  NVI_LTE_B17_C1_RX_GAIN_VS_FREQ_I               =       6100,
  NVI_LTE_B17_C1_IM2_VALUES_I                    =       6101,
  NVI_LTE_B17_C1_RX_CAL_CHAN_I                   =       6102,
  NVI_LTE_B17_C1_NONBYPASS_BYPASS_TIMER_I        =       6103,
  NVI_LTE_B40_NONBYPASS_BYPASS_TIMER_I           =       6104,
  NVI_LTE_B40_RX_DELAY_I                         =       6105,
  NVI_LTE_B40_RX_CAL_CHAN_I                      =       6106,
  NVI_LTE_B40_LNA_RANGE_RISE_FALL_I              =       6107,
  NVI_LTE_B40_IM_LEVEL_I                         =       6108,
  NVI_LTE_B40_RX_GAIN_VS_TEMP_I                  =       6109,
  NVI_LTE_B40_RX_GAIN_I                          =       6110,
  NVI_LTE_B40_RX_GAIN_VS_FREQ_I                  =       6111,
  NVI_LTE_B40_LNA_PHASE_CTRL_I                   =       6112,
  NVI_LTE_B40_IM2_VALUES_I                       =       6113,
  NVI_LTE_B40_RXF_MISMATCH_COMP_I                =       6114,
  NVI_LTE_B40_ENC_BTF_I                          =       6115,
  NVI_LTE_B40_MAX_TX_POWER_I                     =       6116,
  NVI_LTE_B40_AGC_PA_ON_RISE_FALL_DELAY_I        =       6117,
  NVI_LTE_B40_AGC_TX_ON_RISE_FALL_DELAY_I        =       6118,
  NVI_LTE_B40_PA_GAIN_UP_DOWN_TIME_I             =       6119,
  NVI_LTE_B40_TX_ROT_ANGLE_PA_STATE_I            =       6120,
  NVI_LTE_B40_PA_COMPENSATE_UP_DOWN_I            =       6121,
  NVI_LTE_B40_TX_LIN_VS_TEMP_I                   =       6122,
  NVI_LTE_B40_PA_RANGE_MAP_I                     =       6123,
  NVI_LTE_B40_TIMER_HYSTERISIS_I                 =       6124,
  NVI_LTE_B40_PA_RISE_FALL_THRESHOLD_I           =       6125,
  NVI_LTE_B40_TX_CAL_CHAN_I                      =       6126,
  NVI_LTE_B40_TX_LIMIT_VS_TEMP_I                 =       6127,
  NVI_LTE_B40_MPR_BASED_PA_SWITCHPOINTS_SHIFT_I  =       6128,
  NVI_LTE_B40_TX_MPR_BACKOFF_I                   =       6129,
  NVI_LTE_B40_TX_DIGITAL_GAIN_COMP_I             =       6130,
  NVI_LTE_B40_TX_AGC_OFFSET_I                    =       6131,
  NVI_LTE_B40_TX_LIN_MASTER_0_I                  =       6132,
  NVI_LTE_B40_TX_LIN_MASTER_1_I                  =       6133,
  NVI_LTE_B40_TX_LIN_MASTER_2_I                  =       6134,
  NVI_LTE_B40_TX_LIN_MASTER_3_I                  =       6135,
  NVI_LTE_B40_TX_GAIN_INDEX_0_I                  =       6136,
  NVI_LTE_B40_TX_GAIN_INDEX_1_I                  =       6137,
  NVI_LTE_B40_TX_GAIN_INDEX_2_I                  =       6138,
  NVI_LTE_B40_TX_GAIN_INDEX_3_I                  =       6139,
  NVI_LTE_B40_TX_COMP_VS_FREQ_I                  =       6140,
  NVI_LTE_B40_EXP_HDET_VS_AGC_I                  =       6141,
  NVI_LTE_B40_TX_LIMIT_VS_FREQ_I                 =       6142,
  NVI_LTE_B40_HDET_OFF_SPAN_I                    =       6143,
  NVI_LTE_B40_ANTSEL_I                           =       6144,
  NVI_LTE_B40_C1_ANTSEL_I                        =       6145,
  NVI_LTE_B40_C0_C1_DELAY_I                      =       6146,
  NVI_LTE_B40_C1_NONBYPASS_BYPASS_TIMER_I        =       6147,
  NVI_LTE_B40_C1_LNA_RANGE_RISE_FALL_I           =       6148,
  NVI_LTE_B40_C1_IM_LEVEL_I                      =       6149,
  NVI_LTE_B40_C1_RX_GAIN_VS_TEMP_I               =       6150,
  NVI_LTE_B40_C1_LNA_PHASE_CTRL_I                =       6151,
  NVI_LTE_B40_C1_RX_GAIN_I                       =       6152,
  NVI_LTE_B40_C1_RX_GAIN_VS_FREQ_I               =       6153,
  NVI_LTE_B40_C1_IM2_VALUES_I                    =       6154,
  NVI_LTE_B40_C1_RX_CAL_CHAN_I                   =       6155,
  NVI_LTE_B1_NONBYPASS_BYPASS_TIMER_I            =       6156,
  NVI_LTE_B1_RX_DELAY_I                          =       6157,
  NVI_LTE_B1_RX_CAL_CHAN_I                       =       6158,
  NVI_LTE_B1_LNA_RANGE_RISE_FALL_I               =       6159,
  NVI_LTE_B1_IM_LEVEL_I                          =       6160,
  NVI_LTE_B1_RX_GAIN_VS_TEMP_I                   =       6161,
  NVI_LTE_B1_RX_GAIN_I                           =       6162,
  NVI_LTE_B1_RX_GAIN_VS_FREQ_I                   =       6163,
  NVI_LTE_B1_LNA_PHASE_CTRL_I                    =       6164,
  NVI_LTE_B1_IM2_VALUES_I                        =       6165,
  NVI_LTE_B1_RXF_MISMATCH_COMP_I                 =       6166,
  NVI_LTE_B1_ENC_BTF_I                           =       6167,
  NVI_LTE_B1_MAX_TX_POWER_I                      =       6168,
  NVI_LTE_B1_AGC_PA_ON_RISE_FALL_DELAY_I         =       6169,
  NVI_LTE_B1_AGC_TX_ON_RISE_FALL_DELAY_I         =       6170,
  NVI_LTE_B1_PA_GAIN_UP_DOWN_TIME_I              =       6171,
  NVI_LTE_B1_TX_ROT_ANGLE_PA_STATE_I             =       6172,
  NVI_LTE_B1_PA_COMPENSATE_UP_DOWN_I             =       6173,
  NVI_LTE_B1_TX_LIN_VS_TEMP_I                    =       6174,
  NVI_LTE_B1_PA_RANGE_MAP_I                      =       6175,
  NVI_LTE_B1_TIMER_HYSTERISIS_I                  =       6176,
  NVI_LTE_B1_PA_RISE_FALL_THRESHOLD_I            =       6177,
  NVI_LTE_B1_TX_CAL_CHAN_I                       =       6178,
  NVI_LTE_B1_TX_LIMIT_VS_TEMP_I                  =       6179,
  NVI_LTE_B1_MPR_BASED_PA_SWITCHPOINTS_SHIFT_I   =       6180,
  NVI_LTE_B1_TX_MPR_BACKOFF_I                    =       6181,
  NVI_LTE_B1_TX_DIGITAL_GAIN_COMP_I              =       6182,
  NVI_LTE_B1_TX_AGC_OFFSET_I                     =       6183,
  NVI_LTE_B1_TX_LIN_MASTER_0_I                   =       6184,
  NVI_LTE_B1_TX_LIN_MASTER_1_I                   =       6185,
  NVI_LTE_B1_TX_LIN_MASTER_2_I                   =       6186,
  NVI_LTE_B1_TX_LIN_MASTER_3_I                   =       6187,
  NVI_LTE_B1_TX_GAIN_INDEX_0_I                   =       6188,
  NVI_LTE_B1_TX_GAIN_INDEX_1_I                   =       6189,
  NVI_LTE_B1_TX_GAIN_INDEX_2_I                   =       6190,
  NVI_LTE_B1_TX_GAIN_INDEX_3_I                   =       6191,
  NVI_LTE_B1_TX_COMP_VS_FREQ_I                   =       6192,
  NVI_LTE_B1_EXP_HDET_VS_AGC_I                   =       6193,
  NVI_LTE_B1_TX_LIMIT_VS_FREQ_I                  =       6194,
  NVI_LTE_B1_HDET_OFF_SPAN_I                     =       6195,
  NVI_LTE_B1_ANTSEL_I                            =       6196,
  NVI_LTE_B1_C1_ANTSEL_I                         =       6197,
  NVI_LTE_B1_C0_C1_DELAY_I                       =       6198,
  NVI_LTE_B1_C1_NONBYPASS_BYPASS_TIMER_I         =       6199,
  NVI_LTE_B1_C1_LNA_RANGE_RISE_FALL_I            =       6200,
  NVI_LTE_B1_C1_IM_LEVEL_I                       =       6201,
  NVI_LTE_B1_C1_RX_GAIN_VS_TEMP_I                =       6202,
  NVI_LTE_B1_C1_LNA_PHASE_CTRL_I                 =       6203,
  NVI_LTE_B1_C1_RX_GAIN_I                        =       6204,
  NVI_LTE_B1_C1_RX_GAIN_VS_FREQ_I                =       6205,
  NVI_LTE_B1_C1_IM2_VALUES_I                     =       6206,
  NVI_LTE_B1_C1_RX_CAL_CHAN_I                    =       6207,
  NVI_LTE_B13_DRX_MODE_SEL_I                     =       6208,
  NVI_LTE_B7_DRX_MODE_SEL_I                      =       6209,
  NVI_LTE_B17_DRX_MODE_SEL_I                     =       6210,
  NVI_LTE_B40_DRX_MODE_SEL_I                     =       6211,
  NVI_LTE_B1_DRX_MODE_SEL_I                      =       6212,
  NVI_CGPS_SENSORS_ENABLE_I                      =       6213,
  NVI_WCDMA_REL7_PA_MPR_BACKOFF_I                =       6214,
  NVI_WCDMA_IQ_GAIN_I                            =       6215,
  NVI_GNSS_GPS_RXD_ENABLE_I                      =       6216,
  NVI_GNSS_SYSTEM_CONTROL_I                      =       6217,
  NVI_GNSS_GLO_CONTROL_I                         =       6218,
  NVI_GNSS_RXD_PATH_LOSS_I                       =       6219,
  NVI_GNSS_HBW_PATH_LOSS_I                       =       6220,
  NVI_GNSS_GLO_PATH_LOSS_CENTER_MINUS7_I         =       6221,
  NVI_GNSS_GLO_PATH_LOSS_CENTER_0_I              =       6222,
  NVI_GNSS_GLO_PATH_LOSS_CENTER_PLUS6_I          =       6223,
  NVI_GNSS_LBW_RXD_GROUP_DELAY_DIFF_I            =       6224,
  NVI_GNSS_TIMED_OUTPUT_MODE_SELECTION_I         =       6225,
  NVI_GNSS_TIMED_OUTPUT_FIXED_BIAS_OFFSET_I      =       6226,
  NVI_GNSS_MAX_M_RXD_TASKS_I                     =       6227,
  NVI_GNSS_MAX_GNSS_TASKS_I                      =       6228,
  NVI_GNSS_SHALLOW_FIRST_DWELL_DURATION_I        =       6229,
  NVI_GNSS_SHALLOW_SUCCESSIVE_DWELLS_DURATION_I  =       6230,
  NVI_GNSS_DEEP_FIRST_DWELL_DURATION_I           =       6231,
  NVI_GNSS_DEEP_SECOND_DWELL_DURATION_I          =       6232,
  NVI_GNSS_DEEP_THIRD_DWELL_DURATION_I           =       6233,
  NVI_GNSS_VERIFICATION_DWELL_DURATION_I         =       6234,
  NVI_GNSS_PROBATIONARY_SCAN_DWELL_DURATION_I    =       6235,
  NVI_GNSS_ACQUISITION_SAMPLING_MODE_I           =       6236,
  NVI_GNSS_PP_RESERVED_I                         =       6237,
  NVI_GNSS_MAX_NUM_GPS_SV_MEASUREMENTS_IN_FIX_I  =       6238,
  NVI_GNSS_SPCFC_GPS_SV_MEASURES_NOT_IN_FIX_I    =       6239,
  NVI_GNSS_MAX_NUM_GLO_SV_MEASUREMENTS_IN_FIX_I  =       6240,
  NVI_GNSS_SPCFC_GLO_SV_MEASURES_NOT_IN_FIX_I    =       6241,
  NVI_GNSS_DISABLE_GGTB_CONSTRAINT_IN_WLS_I      =       6242,
  NVI_GNSS_DISABLE_GLO_ONLY_KF_I                 =       6243,
  NVI_GNSS_ENABLE_EXTENDED_ON_FEATURE_FOR_GNSS_I =       6244,
  NVI_GNSS_SPCFC_GLO_SV_NAV_DATA_NOT_DECODED_I   =       6245,
  NVI_GNSS_SPCFC_GPS_SV_NAV_DATA_NOT_DECODED_I   =       6246,
  NVI_GNSS_NMEA_SENTENCE_TYPE_I                  =       6247,
  NVI_GNSS_NMEA_EXTENDED_SENTENCE_TYPE_I         =       6248,
  NVI_GNSS_801_B_PROTOCOL_SUPPORT_I              =       6249,
  NVI_GNSS_SUPL_VERSION_I                        =       6250,
  NVI_GNSS_RRLP8_RRC8_SUPPORTED_I                =       6251,
  NVI_GNSS_DPO_DWELL_DURATION_I                  =       6252,
  NVI_CGPS_DPO_ENTRY_CRITERIA_CONTROL_I          =       6253,
  NVI_CGPS_DEFAULT_REGION_SIZE_I                 =       6254,
  NVI_CGPS_USE_QWIP_FOR_ODP_I                    =       6255,
  NVI_MULTIMODE_SYSTEM_PREFERENCE_I              =       6256,
  NVI_CLKRGM_DEBUG_I                             =       6257,
  NVI_BOARD_CAPABILITIES_I                       =       6258,
  NVI_CSIM_STATIC_1X_APP_I                       =       6259,
  NVI_CSIM_STATIC_GW_APP_I                       =       6260,
  NVI_SLIP_PREF_MODE_I                           =       6261,
  NVI_BUS_PROF_IMEM_ENABLE_I                     =       6262,
  NVI_BUS_PROF_IMEM_MODE_I                       =       6263,
  NVI_BUS_PROF_IMEM_TRIGGER_ID_I                 =       6264,
  NVI_BUS_PROF_IMEM_BUS_COUNT_I                  =       6265,
  NVI_BUS_PROF_IMEM_SIMPLE_SETTINGS_0_I          =       6266,
  NVI_BUS_PROF_IMEM_SIMPLE_SETTINGS_1_I          =       6267,
  NVI_BUS_PROF_IMEM_SIMPLE_SETTINGS_2_I          =       6268,
  NVI_BUS_PROF_IMEM_SIMPLE_SETTINGS_3_I          =       6269,
  NVI_BUS_PROF_IMEM_ADVANCE_SETTINGS_0_I         =       6270,
  NVI_BUS_PROF_IMEM_ADVANCE_SETTINGS_1_I         =       6271,
  NVI_BUS_PROF_IMEM_ADVANCE_SETTINGS_2_I         =       6272,
  NVI_BUS_PROF_IMEM_ADVANCE_SETTINGS_3_I         =       6273,
  NVI_GNSS_MGP_ERROR_RECOVERY_I                  =       6274,
  NVI_GNSS_HBW_CONTROL_I                         =       6275,
  NVI_LTE_B13_TX_MISMATCH_COMP_I                 =       6276,
  NVI_LTE_B7_TX_MISMATCH_COMP_I                  =       6277,
  NVI_LTE_B17_TX_MISMATCH_COMP_I                 =       6278,
  NVI_LTE_B40_TX_MISMATCH_COMP_I                 =       6279,
  NVI_LTE_B1_TX_MISMATCH_COMP_I                  =       6280,
  NVI_LTE_B13_TX_CARRIER_FEEDTHROUGH_COMP_I      =       6281,
  NVI_LTE_B7_TX_CARRIER_FEEDTHROUGH_COMP_I       =       6282,
  NVI_LTE_B17_TX_CARRIER_FEEDTHROUGH_COMP_I      =       6283,
  NVI_LTE_B40_TX_CARRIER_FEEDTHROUGH_COMP_I      =       6284,
  NVI_LTE_B1_TX_CARRIER_FEEDTHROUGH_COMP_I       =       6285,
  NVI_LTE_BC_CONFIG_I                            =       6286,
  NVI_LTE_BC_CONFIG_DIV_I                        =       6287,
  NVI_CS_TO_VOIP_FALLBACK_TIMER_I                =       6288,
  NVI_VOIP_CANCEL_RETRY_TIMER_I                  =       6289,
  NVI_HDRSCP_FORCE_RESTRICTED_CF_I               =       6290,
  NVI_ADC_VBATT_SLOPE_I                          =       6291,
  NVI_ADC_VBATT_OFFSET_I                         =       6292,
  NVI_CGPS_SENSORS_SPI_OPINTERVAL_I              =       6293,
  NVI_CGPS_SENSORS_SPI_DETECTTHRESHOLD_I         =       6294,
  NVI_SNSD_MOTION_SCALE_FACTOR_I                 =       6295,
  NVI_SNSD_MOTION_ZMD_WINDOW_SAMPLES_I           =       6296,
  NVI_SNSD_MOTION_ZMD_METHOD_I                   =       6297,
  NVI_SNSD_MOTION_TRANSIENT_LENGTH_I             =       6298,
  NVI_HS_USB_PERFORMANCE_SETTING_I               =       6299,
  NVI_WLAN_PAL_LINK_PREF_I                       =       6300,
  NVI_HS_USB_DISABLE_LPM_I                       =       6301,
  NVI_ENHANCED_HPLMN_SRCH_TBL_I                  =       6302,
  NVI_GNSS_EMBEDDED_XTRA_CLIENT_ENABLED_I        =       6303,
  NVI_GNSS_WWAN_NETWORK_PREFERENCE_I             =       6304,
  NVI_GNSS_MEDIUM_PREFERENCES_NUMBER_I           =       6305,
  NVI_GNSS_MEDIUM_PREFERENCE_LIST_I              =       6306,
  NVI_GNSS_AUTO_NMEA_COMPORT_ENABLED_I           =       6307,
  NVI_UMTS_AMR_CODEC_PREFERENCE_CONFIG_I         =       6308,
  NVI_GNSS_EMBEDDED_XTRA_TIME_CLIENT_ENABLED_I   =       6309,
  NVI_GNSS_1XUP_MSA_TRUSTED_MODE_DISABLE_I       =       6310,
  NVI_OEM_ITEM_1_I                               =       6311,
  NVI_OEM_ITEM_2_I                               =       6312,
  NVI_OEM_ITEM_3_I                               =       6313,
  NVI_OEM_ITEM_4_I                               =       6314,
  NVI_OEM_ITEM_5_I                               =       6315,
  NVI_OEM_ITEM_6_I                               =       6316,
  NVI_OEM_ITEM_7_I                               =       6317,
  NVI_OEM_ITEM_8_I                               =       6318,
  NVI_RC_PROCESS_ERRORS_I                        =       6319,
  NVI_EHRPD_AUTH_IN_USIM_I                       =       6320,
  NVI_BC0_PA_SMPS_PDM_LEVEL_I                    =       6321,
  NVI_BC1_PA_SMPS_PDM_LEVEL_I                    =       6322,
  NVI_BC3_PA_SMPS_PDM_LEVEL_I                    =       6323,
  NVI_BC4_PA_SMPS_PDM_LEVEL_I                    =       6324,
  NVI_BC5_PA_SMPS_PDM_LEVEL_I                    =       6325,
  NVI_BC6_PA_SMPS_PDM_LEVEL_I                    =       6326,
  NVI_BC10_PA_SMPS_PDM_LEVEL_I                   =       6327,
  NVI_BC14_PA_SMPS_PDM_LEVEL_I                   =       6328,
  NVI_BC15_PA_SMPS_PDM_LEVEL_I                   =       6329,
  NVI_HS_USB_PHY_CONFIG_I                        =       6330,
  NVI_QMI_PORT_LIST_I                            =       6331,
  NVI_AS_ID_1_DATA_I                             =       6332,
  NVI_AS_ID_2_DATA_I                             =       6333,
  NVI_DUAL_STANDBY_CFG_ITEMS_I                   =       6334,
  NVI_HARD_FAIL_THR_TIME_I                       =       6335,
  NVI_WCDMA_CS_VOICE_OVER_HSPA_ENABLED_I         =       6336,
  NVI_WCDMA_2100_LNA_RANGE_OFFSET_CAR0_I         =       6337,
  NVI_WCDMA_2100_LNA_RANGE_OFFSET_2_CAR0_I       =       6338,
  NVI_WCDMA_2100_LNA_RANGE_OFFSET_3_CAR0_I       =       6339,
  NVI_WCDMA_2100_LNA_RANGE_OFFSET_4_CAR0_I       =       6340,
  NVI_WCDMA_2100_LNA_RANGE_OFFSET_5_CAR0_I       =       6341,
  NVI_WCDMA_2100_LNA_RANGE_OFFSET_CAR1_I         =       6342,
  NVI_WCDMA_2100_LNA_RANGE_OFFSET_2_CAR1_I       =       6343,
  NVI_WCDMA_2100_LNA_RANGE_OFFSET_3_CAR1_I       =       6344,
  NVI_WCDMA_2100_LNA_RANGE_OFFSET_4_CAR1_I       =       6345,
  NVI_WCDMA_2100_LNA_RANGE_OFFSET_5_CAR1_I       =       6346,
  NVI_WCDMA_2100_VGA_GAIN_OFFSET_CAR0_I          =       6347,
  NVI_WCDMA_2100_VGA_GAIN_OFFSET_CAR1_I          =       6348,
  NVI_WCDMA_2100_LNA_RANGE_RISE_CAR0_I           =       6349,
  NVI_WCDMA_2100_LNA_RANGE_RISE_2_CAR0_I         =       6350,
  NVI_WCDMA_2100_LNA_RANGE_RISE_3_CAR0_I         =       6351,
  NVI_WCDMA_2100_LNA_RANGE_RISE_4_CAR0_I         =       6352,
  NVI_WCDMA_2100_LNA_RANGE_RISE_CAR1_I           =       6353,
  NVI_WCDMA_2100_LNA_RANGE_RISE_2_CAR1_I         =       6354,
  NVI_WCDMA_2100_LNA_RANGE_RISE_3_CAR1_I         =       6355,
  NVI_WCDMA_2100_LNA_RANGE_RISE_4_CAR1_I         =       6356,
  NVI_WCDMA_2100_LNA_RANGE_FALL_CAR0_I           =       6357,
  NVI_WCDMA_2100_LNA_RANGE_FALL_2_CAR0_I         =       6358,
  NVI_WCDMA_2100_LNA_RANGE_FALL_4_CAR0_I         =       6359,
  NVI_WCDMA_2100_LNA_RANGE_FALL_3_CAR0_I         =       6360,
  NVI_WCDMA_2100_LNA_RANGE_FALL_CAR1_I           =       6361,
  NVI_WCDMA_2100_LNA_RANGE_FALL_2_CAR1_I         =       6362,
  NVI_WCDMA_2100_LNA_RANGE_FALL_3_CAR1_I         =       6363,
  NVI_WCDMA_2100_LNA_RANGE_FALL_4_CAR1_I         =       6364,
  NVI_UIM_HW_SIM_CONFIG_I                        =       6365,
  NVI_WCDMA_1500_VGA_GAIN_OFFSET_I               =       6366,
  NVI_WCDMA_1500_VGA_GAIN_OFFSET_VS_FREQ_I       =       6367,
  NVI_WCDMA_1500_VGA_GAIN_OFFSET_VS_TEMP_I       =       6368,
  NVI_WCDMA_1500_LNA_RANGE_RISE_2_I              =       6369,
  NVI_WCDMA_1500_LNA_RANGE_RISE_3_I              =       6370,
  NVI_WCDMA_1500_LNA_RANGE_FALL_2_I              =       6371,
  NVI_WCDMA_1500_LNA_RANGE_FALL_3_I              =       6372,
  NVI_WCDMA_1500_IM_LEVEL_2_I                    =       6373,
  NVI_WCDMA_1500_IM_LEVEL_3_I                    =       6374,
  NVI_WCDMA_1500_LNA_RANGE_OFFSET_2_I            =       6375,
  NVI_WCDMA_1500_LNA_RANGE_OFFSET_3_I            =       6376,
  NVI_WCDMA_1500_LNA_OFFSET_VS_FREQ_2_I          =       6377,
  NVI_WCDMA_1500_LNA_OFFSET_VS_FREQ_3_I          =       6378,
  NVI_WCDMA_1500_IM2_I_VALUE_I                   =       6379,
  NVI_WCDMA_1500_IM2_Q_VALUE_I                   =       6380,
  NVI_WCDMA_1500_IM2_TRANSCONDUCTOR_VALUE_I      =       6381,
  NVI_WCDMA_1500_RX_AGC_MIN_2_I                  =       6382,
  NVI_WCDMA_1500_RX_AGC_MIN_3_I                  =       6383,
  NVI_WCDMA_1500_MAX_TX_POWER_I                  =       6384,
  NVI_WCDMA_1500_OUT_OF_SERVICE_THRESH_I         =       6385,
  NVI_WCDMA_1500_LNA_RANGE_RISE_I                =       6386,
  NVI_WCDMA_1500_LNA_RANGE_FALL_I                =       6387,
  NVI_WCDMA_1500_IM_LEVEL_I                      =       6388,
  NVI_WCDMA_1500_NONBYPASS_TIMER_I               =       6389,
  NVI_WCDMA_1500_BYPASS_TIMER_I                  =       6390,
  NVI_WCDMA_1500_LNA_RANGE_OFFSET_I              =       6391,
  NVI_WCDMA_1500_LNA_OFFSET_VS_FREQ_I            =       6392,
  NVI_WCDMA_1500_RX_AGC_MIN_I                    =       6393,
  NVI_WCDMA_1500_RX_AGC_MAX_I                    =       6394,
  NVI_WCDMA_1500_AGC_PHASE_OFFSET_I              =       6395,
  NVI_WCDMA_1500_TX_LIN_MASTER_0_I               =       6396,
  NVI_WCDMA_1500_TX_LIN_MASTER_1_I               =       6397,
  NVI_WCDMA_1500_TX_COMP_VS_FREQ_0_I             =       6398,
  NVI_WCDMA_1500_TX_COMP_VS_FREQ_1_I             =       6399,
  NVI_WCDMA_1500_TX_LIN_VS_TEMP_0_I              =       6400,
  NVI_WCDMA_1500_TX_LIN_VS_TEMP_1_I              =       6401,
  NVI_WCDMA_1500_TX_SLP_VS_TEMP_0_I              =       6402,
  NVI_WCDMA_1500_TX_SLP_VS_TEMP_1_I              =       6403,
  NVI_WCDMA_1500_R1_RISE_I                       =       6404,
  NVI_WCDMA_1500_R1_FALL_I                       =       6405,
  NVI_WCDMA_1500_TX_LIM_VS_TEMP_I                =       6406,
  NVI_WCDMA_1500_TX_LIM_VS_FREQ_I                =       6407,
  NVI_WCDMA_1500_ADJ_FACTOR_I                    =       6408,
  NVI_WCDMA_1500_EXP_HDET_VS_AGC_I               =       6409,
  NVI_WCDMA_1500_HDET_OFF_I                      =       6410,
  NVI_WCDMA_1500_HDET_SPN_I                      =       6411,
  NVI_WCDMA_1500_ENC_BTF_I                       =       6412,
  NVI_WCDMA_1500_PA_COMPENSATE_UP_I              =       6413,
  NVI_WCDMA_1500_PA_COMPENSATE_DOWN_I            =       6414,
  NVI_WCDMA_1500_AGC_PA_ON_RISE_DELAY_I          =       6415,
  NVI_WCDMA_1500_AGC_PA_ON_FALL_DELAY_I          =       6416,
  NVI_WCDMA_1500_AGC_TX_ON_RISE_DELAY_I          =       6417,
  NVI_WCDMA_1500_AGC_TX_ON_FALL_DELAY_I          =       6418,
  NVI_WCDMA_1500_AGC_UPDATE_TX_AGC_TIME_I        =       6419,
  NVI_WCDMA_1500_PRACH_R1_RISE_OFFSET_I          =       6420,
  NVI_WCDMA_1500_PRACH_R1_FALL_OFFSET_I          =       6421,
  NVI_WCDMA_1500_RX_DELAY_I                      =       6422,
  NVI_WCDMA_1500_TX_LIN_MASTER_2_I               =       6423,
  NVI_WCDMA_1500_TX_LIN_MASTER_3_I               =       6424,
  NVI_WCDMA_1500_TX_COMP_VS_FREQ_2_I             =       6425,
  NVI_WCDMA_1500_TX_COMP_VS_FREQ_3_I             =       6426,
  NVI_WCDMA_1500_TX_LIN_VS_TEMP_2_I              =       6427,
  NVI_WCDMA_1500_TX_LIN_VS_TEMP_3_I              =       6428,
  NVI_WCDMA_1500_TX_SLP_VS_TEMP_2_I              =       6429,
  NVI_WCDMA_1500_TX_SLP_VS_TEMP_3_I              =       6430,
  NVI_WCDMA_1500_R2_RISE_I                       =       6431,
  NVI_WCDMA_1500_R2_FALL_I                       =       6432,
  NVI_WCDMA_1500_R3_RISE_I                       =       6433,
  NVI_WCDMA_1500_R3_FALL_I                       =       6434,
  NVI_WCDMA_1500_PA_COMPENSATE_UP_R2_I           =       6435,
  NVI_WCDMA_1500_PA_COMPENSATE_DOWN_R2_I         =       6436,
  NVI_WCDMA_1500_PA_COMPENSATE_UP_R3_I           =       6437,
  NVI_WCDMA_1500_PA_COMPENSATE_DOWN_R3_I         =       6438,
  NVI_WCDMA_1500_TX_ROT_ANGLE_PA_STATE_00_I      =       6439,
  NVI_WCDMA_1500_TX_ROT_ANGLE_PA_STATE_01_I      =       6440,
  NVI_WCDMA_1500_TX_ROT_ANGLE_PA_STATE_10_I      =       6441,
  NVI_WCDMA_1500_TX_ROT_ANGLE_PA_STATE_11_I      =       6442,
  NVI_WCDMA_1500_PRACH_R2_RISE_OFFSET_I          =       6443,
  NVI_WCDMA_1500_PRACH_R2_FALL_OFFSET_I          =       6444,
  NVI_WCDMA_1500_PRACH_R3_RISE_OFFSET_I          =       6445,
  NVI_WCDMA_1500_PRACH_R3_FALL_OFFSET_I          =       6446,
  NVI_WCDMA_1500_PA_RANGE_MAP_I                  =       6447,
  NVI_WCDMA_1500_TX_CAL_CHAN_I                   =       6448,
  NVI_WCDMA_1500_RX_CAL_CHAN_I                   =       6449,
  NVI_WCDMA_1500_PA_RANGE_FOR_DVS_I              =       6450,
  NVI_WCDMA_1500_PA_COMPENSATE_UP_WITH_DVS_I     =       6451,
  NVI_WCDMA_1500_PA_COMPENSATE_DN_WITH_DVS_I     =       6452,
  NVI_WCDMA_1500_DCH_AGC_UPDATE_TX_AGC_TIME_I    =       6453,
  NVI_WCDMA_1500_AGC_TX_ADJ_PDM_DELAY_I          =       6454,
  NVI_WCDMA_1500_UTRAN_TX_LIM_VS_TEMP_OFFSET_I   =       6455,
  NVI_WCDMA_1500_MAX_PWR_BACKOFF_VOLTAGES_I      =       6456,
  NVI_WCDMA_1500_MAX_PWR_BACKOFF_VOLT1_I         =       6457,
  NVI_WCDMA_1500_MAX_PWR_BACKOFF_VOLT2_I         =       6458,
  NVI_WCDMA_1500_MAX_PWR_BACKOFF_VOLT3_I         =       6459,
  NVI_WCDMA_1500_PA_GAIN_UP_TIME_I               =       6460,
  NVI_WCDMA_1500_PA_GAIN_DOWN_TIME_I             =       6461,
  NVI_WCDMA_1500_TX_PDM_LIN_0_I                  =       6462,
  NVI_WCDMA_1500_TX_PDM_LIN_1_I                  =       6463,
  NVI_WCDMA_1500_TX_PDM_LIN_2_I                  =       6464,
  NVI_WCDMA_1500_TX_PDM_LIN_3_I                  =       6465,
  NVI_WCDMA_1500_IACCUM_I                        =       6466,
  NVI_WCDMA_1500_QACCUM_I                        =       6467,
  NVI_WCDMA_1500_IM_LEVEL_4_I                    =       6468,
  NVI_WCDMA_1500_LNA_OFFSET_VS_FREQ_4_I          =       6469,
  NVI_WCDMA_1500_LNA_RANGE_FALL_4_I              =       6470,
  NVI_WCDMA_1500_LNA_RANGE_OFFSET_4_I            =       6471,
  NVI_WCDMA_1500_LNA_RANGE_RISE_4_I              =       6472,
  NVI_WCDMA_1500_C0_C1_DELAY_I                   =       6473,
  NVI_WCDMA_1500_REL6_TX_BETA_SCALING_COMP_I     =       6474,
  NVI_WCDMA_1500_REL6_TX_AGC_OFFSET_I            =       6475,
  NVI_WCDMA_1500_REL6_TX_MPR_BACKOFF_I           =       6476,
  NVI_WCDMA_1500_TX_COMP_VS_FREQ_0_SECONDARY_I   =       6477,
  NVI_WCDMA_1500_TX_COMP_VS_FREQ_1_SECONDARY_I   =       6478,
  NVI_WCDMA_1500_TX_COMP_VS_FREQ_2_SECONDARY_I   =       6479,
  NVI_WCDMA_1500_TX_COMP_VS_FREQ_3_SECONDARY_I   =       6480,
  NVI_WCDMA_1500_TX_COMP_VS_FREQ_SEC_PDM_LIST_I  =       6481,
  NVI_WCDMA_1500_TX_LIN_MASTER_0_ENH_I           =       6482,
  NVI_WCDMA_1500_TX_PDM_LIN_0_ENH_I              =       6483,
  NVI_WCDMA_1500_LNA_PHASE_CTL_I                 =       6484,
  NVI_WCDMA_1500_TIMER_HYSTERISIS_I              =       6485,
  NVI_WCDMA_1500_RXF_MIS_COMP_A_COEFF_I          =       6486,
  NVI_WCDMA_1500_RXF_MIS_COMP_B_COEFF_I          =       6487,
  NVI_WCDMA_1500_RXF_ICI_I_COEF0_1_I             =       6488,
  NVI_WCDMA_1500_RXF_ICI_I_COEF2_3_I             =       6489,
  NVI_WCDMA_1500_RXF_ICI_I_COEF4_5_I             =       6490,
  NVI_WCDMA_1500_RXF_ICI_I_COEF6_7_I             =       6491,
  NVI_WCDMA_1500_RXF_ICI_I_COEF8_9_I             =       6492,
  NVI_WCDMA_1500_RXF_ICI_I_COEF10_11_I           =       6493,
  NVI_WCDMA_1500_RXF_ICI_I_COEF12_13_I           =       6494,
  NVI_WCDMA_1500_RXF_ICI_I_COEF14_15_I           =       6495,
  NVI_WCDMA_1500_RXF_ICI_Q_COEF0_1_I             =       6496,
  NVI_WCDMA_1500_RXF_ICI_Q_COEF2_3_I             =       6497,
  NVI_WCDMA_1500_RXF_ICI_Q_COEF4_5_I             =       6498,
  NVI_WCDMA_1500_RXF_ICI_Q_COEF6_7_I             =       6499,
  NVI_WCDMA_1500_RXF_ICI_Q_COEF8_9_I             =       6500,
  NVI_WCDMA_1500_RXF_ICI_Q_COEF10_11_I           =       6501,
  NVI_WCDMA_1500_RXF_ICI_Q_COEF12_13_I           =       6502,
  NVI_WCDMA_1500_RXF_ICI_Q_COEF14_15_I           =       6503,
  NVI_WCDMA_1500_RXF_ICI_IQ_TRUNC_I              =       6504,
  NVI_WCDMA_1500_HS_R1_RISE_I                    =       6505,
  NVI_WCDMA_1500_HS_R1_FALL_I                    =       6506,
  NVI_WCDMA_1500_HS_R2_RISE_I                    =       6507,
  NVI_WCDMA_1500_HS_R2_FALL_I                    =       6508,
  NVI_WCDMA_1500_HS_R3_RISE_I                    =       6509,
  NVI_WCDMA_1500_HS_R3_FALL_I                    =       6510,
  NVI_WCDMA_1500_HS_LNA_RANGE_FALL_4_I           =       6511,
  NVI_WCDMA_1500_HS_LNA_RANGE_FALL_3_I           =       6512,
  NVI_WCDMA_1500_HS_LNA_RANGE_FALL_2_I           =       6513,
  NVI_WCDMA_1500_HS_LNA_RANGE_FALL_I             =       6514,
  NVI_WCDMA_1500_HS_LNA_RANGE_RISE_4_I           =       6515,
  NVI_WCDMA_1500_HS_LNA_RANGE_RISE_3_I           =       6516,
  NVI_WCDMA_1500_HS_LNA_RANGE_RISE_2_I           =       6517,
  NVI_WCDMA_1500_HS_LNA_RANGE_RISE_I             =       6518,
  NVI_WCDMA_1500_HS_IM_LEVEL_2_I                 =       6519,
  NVI_WCDMA_1500_HS_IM_LEVEL_I                   =       6520,
  NVI_WCDMA_1500_HS_IM_LEVEL_3_I                 =       6521,
  NVI_WCDMA_1500_HS_IM_LEVEL_4_I                 =       6522,
  NVI_WCDMA_1500_HS_SWITCHPOINTS_SHIFT_I         =       6523,
  NVI_WCDMA_1500_DRX_MODE_SEL_I                  =       6524,
  NVI_C1_WCDMA_1500_VGA_GAIN_OFFSET_I            =       6525,
  NVI_C1_WCDMA_1500_VGA_GAIN_OFFSET_VS_FREQ_I    =       6526,
  NVI_C1_WCDMA_1500_VGA_GAIN_OFFSET_VS_TEMP_I    =       6527,
  NVI_C1_WCDMA_1500_LNA_RANGE_RISE_I             =       6528,
  NVI_C1_WCDMA_1500_LNA_RANGE_RISE_2_I           =       6529,
  NVI_C1_WCDMA_1500_LNA_RANGE_RISE_3_I           =       6530,
  NVI_C1_WCDMA_1500_LNA_RANGE_RISE_4_I           =       6531,
  NVI_C1_WCDMA_1500_LNA_RANGE_FALL_I             =       6532,
  NVI_C1_WCDMA_1500_LNA_RANGE_FALL_2_I           =       6533,
  NVI_C1_WCDMA_1500_LNA_RANGE_FALL_3_I           =       6534,
  NVI_C1_WCDMA_1500_LNA_RANGE_FALL_4_I           =       6535,
  NVI_C1_WCDMA_1500_IM_LEVEL_I                   =       6536,
  NVI_C1_WCDMA_1500_IM_LEVEL_2_I                 =       6537,
  NVI_C1_WCDMA_1500_IM_LEVEL_3_I                 =       6538,
  NVI_C1_WCDMA_1500_IM_LEVEL_4_I                 =       6539,
  NVI_C1_WCDMA_1500_LNA_RANGE_OFFSET_2_I         =       6540,
  NVI_C1_WCDMA_1500_LNA_RANGE_OFFSET_3_I         =       6541,
  NVI_C1_WCDMA_1500_LNA_RANGE_OFFSET_4_I         =       6542,
  NVI_C1_WCDMA_1500_LNA_OFFSET_VS_FREQ_2_I       =       6543,
  NVI_C1_WCDMA_1500_LNA_OFFSET_VS_FREQ_3_I       =       6544,
  NVI_C1_WCDMA_1500_LNA_OFFSET_VS_FREQ_4_I       =       6545,
  NVI_C1_WCDMA_1500_IM2_I_VALUE_I                =       6546,
  NVI_C1_WCDMA_1500_IM2_Q_VALUE_I                =       6547,
  NVI_C1_WCDMA_1500_IM2_TRANSCONDUCTOR_VALUE_I   =       6548,
  NVI_C1_WCDMA_1500_NONBYPASS_TIMER_I            =       6549,
  NVI_C1_WCDMA_1500_BYPASS_TIMER_I               =       6550,
  NVI_C1_WCDMA_1500_LNA_RANGE_OFFSET_I           =       6551,
  NVI_C1_WCDMA_1500_LNA_OFFSET_VS_FREQ_I         =       6552,
  NVI_C1_WCDMA_1500_RX_CAL_CHAN_I                =       6553,
  NVI_C1_RF_ANTSEL_UMTS_1500_I                   =       6554,
  NVI_C1_WCDMA_1500_LNA_PHASE_CTL_I              =       6555,
  NVI_C1_WCDMA_1500_RXF_MIS_COMP_A_COEFF_I       =       6556,
  NVI_C1_WCDMA_1500_RXF_MIS_COMP_B_COEFF_I       =       6557,
  NVI_C1_WCDMA_1500_RXF_ICI_I_COEF0_1_I          =       6558,
  NVI_C1_WCDMA_1500_RXF_ICI_I_COEF2_3_I          =       6559,
  NVI_C1_WCDMA_1500_RXF_ICI_I_COEF4_5_I          =       6560,
  NVI_C1_WCDMA_1500_RXF_ICI_I_COEF6_7_I          =       6561,
  NVI_C1_WCDMA_1500_RXF_ICI_I_COEF8_9_I          =       6562,
  NVI_C1_WCDMA_1500_RXF_ICI_I_COEF10_11_I        =       6563,
  NVI_C1_WCDMA_1500_RXF_ICI_I_COEF12_13_I        =       6564,
  NVI_C1_WCDMA_1500_RXF_ICI_I_COEF14_15_I        =       6565,
  NVI_C1_WCDMA_1500_RXF_ICI_Q_COEF0_1_I          =       6566,
  NVI_C1_WCDMA_1500_RXF_ICI_Q_COEF2_3_I          =       6567,
  NVI_C1_WCDMA_1500_RXF_ICI_Q_COEF4_5_I          =       6568,
  NVI_C1_WCDMA_1500_RXF_ICI_Q_COEF6_7_I          =       6569,
  NVI_C1_WCDMA_1500_RXF_ICI_Q_COEF8_9_I          =       6570,
  NVI_C1_WCDMA_1500_RXF_ICI_Q_COEF10_11_I        =       6571,
  NVI_C1_WCDMA_1500_RXF_ICI_Q_COEF12_13_I        =       6572,
  NVI_C1_WCDMA_1500_RXF_ICI_Q_COEF14_15_I        =       6573,
  NVI_C1_WCDMA_1500_RXF_ICI_IQ_TRUNC_I           =       6574,
  NVI_WCDMA_1500_PA_COMP_UP_VS_FREQ_I            =       6575,
  NVI_WCDMA_1500_PA_COMP_DOWN_VS_FREQ_I          =       6576,
  NVI_WCDMA_1500_PA_COMP_UP_R2_VS_FREQ_I         =       6577,
  NVI_WCDMA_1500_PA_COMP_DOWN_R2_VS_FREQ_I       =       6578,
  NVI_WCDMA_1500_PA_COMP_UP_R3_VS_FREQ_I         =       6579,
  NVI_WCDMA_1500_PA_COMP_DOWN_R3_VS_FREQ_I       =       6580,
  NVI_WCDMA_1500_EXP_HDET_VS_AGC_V2_I            =       6581,
  NVI_WCDMA_1500_HDET_OFF_V2_I                   =       6582,
  NVI_WCDMA_1500_HDET_SPN_V2_I                   =       6583,
  NVI_WCDMA_2100_TX_LIN_MASTER_3_ENH_I           =       6584,
  NVI_WCDMA_800_TX_LIN_MASTER_3_ENH_I            =       6585,
  NVI_WCDMA_900_TX_LIN_MASTER_3_ENH_I            =       6586,
  NVI_WCDMA_BC4_TX_LIN_MASTER_3_ENH_I            =       6587,
  NVI_WCDMA_1800_TX_LIN_MASTER_3_ENH_I           =       6588,
  NVI_WCDMA_1900_TX_LIN_MASTER_3_ENH_I           =       6589,
  NVI_WCDMA_1500_TX_LIN_MASTER_3_ENH_I           =       6590,
  NVI_WCDMA_2100_TX_PDM_LIN_3_ENH_I              =       6591,
  NVI_WCDMA_800_TX_PDM_LIN_3_ENH_I               =       6592,
  NVI_WCDMA_900_TX_PDM_LIN_3_ENH_I               =       6593,
  NVI_WCDMA_BC4_TX_PDM_LIN_3_ENH_I               =       6594,
  NVI_WCDMA_1800_TX_PDM_LIN_3_ENH_I              =       6595,
  NVI_WCDMA_1900_TX_PDM_LIN_3_ENH_I              =       6596,
  NVI_WCDMA_1500_TX_PDM_LIN_3_ENH_I              =       6597,
  NVI_UNDP_UIM_DRVSTR_I                          =       6598,
  NVI_GNSS_ENABLE_EXTERNAL_CONFIDENCE_INFOR_I    =       6599,
  NVI_GNSS_INTERNAL_CONFIDENCE_STATIONARY_I      =       6600,
  NVI_GNSS_INTERNAL_CONFIDENCE_NON_STATIONARY_I  =       6601,
  NVI_GNSS_XSPI_INJECTION_TIMEOUT_I              =       6602,
  NVI_LU_REJECT_AUTO_ENABLED_I                   =       6603,
  NVI_EXTENDED_EQUIVALENT_PLMN_LIST_I            =       6604,
  NVI_DATA_CALL_OVER_EHRPD_ONLY_I                =       6605,
  NVI_WCDMA_2100_RXF_ICI_CAL_DATA_CAR0_I         =       6606,
  NVI_WCDMA_2100_RXF_ICI_CAL_DATA_CAR1_I         =       6607,
  NVI_C1_WCDMA_2100_RXF_ICI_CAL_DATA_CAR0_I      =       6608,
  NVI_C1_WCDMA_2100_RXF_ICI_CAL_DATA_CAR1_I      =       6609,
  NVI_GOBI_QDL_INDEX_I                           =       6610,
  NVI_GOBI_BOOT_CONFIG_I                         =       6611,
  NVI_GOBI_BOOT_UQCN_FILENAME_I                  =       6612,
  NVI_GOBI_BOOT_AMSS_PART_INDEX_I                =       6613,
  NVI_GOBI_IMAGE_TABLE_I                         =       6614,
  NVI_RODEM_OFF_DISPLAY_I                        =       6615,
  NVI_WCDMA_800_RXF_ICI_CAL_DATA_CAR0_I          =       6616,
  NVI_WCDMA_800_RXF_ICI_CAL_DATA_CAR1_I          =       6617,
  NVI_C1_WCDMA_800_RXF_ICI_CAL_DATA_CAR0_I       =       6618,
  NVI_C1_WCDMA_800_RXF_ICI_CAL_DATA_CAR1_I       =       6619,
  NVI_DDTM_ALLOW_SO_PAGES_I                      =       6620,
  NVI_CGPS_SM_SUPL_NETWORK_PARAMS_I              =       6621,
  NVI_HDET_AUTOCAL_OFFSET_I                      =       6622,
  NVI_GNSS_OEM_FEATURE_MASK_I                    =       6623,
  NVI_CDMA_SO73_ENABLED_I                        =       6624,
  NVI_WCDMA_DC1_LNA_RANGE_OFFSET_CAR1_I          =       6625,
  NVI_WCDMA_DC2_LNA_RANGE_OFFSET_CAR1_I          =       6626,
  NVI_WCDMA_DC1_LNA_RANGE_OFFSET_2_CAR1_I        =       6627,
  NVI_WCDMA_DC2_LNA_RANGE_OFFSET_2_CAR1_I        =       6628,
  NVI_WCDMA_DC1_LNA_RANGE_OFFSET_3_CAR1_I        =       6629,
  NVI_WCDMA_DC2_LNA_RANGE_OFFSET_3_CAR1_I        =       6630,
  NVI_WCDMA_DC1_LNA_RANGE_OFFSET_4_CAR1_I        =       6631,
  NVI_WCDMA_DC2_LNA_RANGE_OFFSET_4_CAR1_I        =       6632,
  NVI_WCDMA_DC1_LNA_RANGE_OFFSET_5_CAR1_I        =       6633,
  NVI_WCDMA_DC2_LNA_RANGE_OFFSET_5_CAR1_I        =       6634,
  NVI_WCDMA_DC1_VGA_GAIN_OFFSET_CAR1_I           =       6635,
  NVI_WCDMA_DC2_VGA_GAIN_OFFSET_CAR1_I           =       6636,
  NVI_WCDMA_DC1_LNA_RANGE_RISE_CAR1_I            =       6637,
  NVI_WCDMA_DC2_LNA_RANGE_RISE_CAR1_I            =       6638,
  NVI_WCDMA_DC1_LNA_RANGE_RISE_2_CAR1_I          =       6639,
  NVI_WCDMA_DC2_LNA_RANGE_RISE_2_CAR1_I          =       6640,
  NVI_WCDMA_DC1_LNA_RANGE_RISE_3_CAR1_I          =       6641,
  NVI_WCDMA_DC2_LNA_RANGE_RISE_3_CAR1_I          =       6642,
  NVI_WCDMA_DC1_LNA_RANGE_RISE_4_CAR1_I          =       6643,
  NVI_WCDMA_DC2_LNA_RANGE_RISE_4_CAR1_I          =       6644,
  NVI_WCDMA_DC1_LNA_RANGE_RISE_5_CAR1_I          =       6645,
  NVI_WCDMA_DC2_LNA_RANGE_RISE_5_CAR1_I          =       6646,
  NVI_WCDMA_DC1_LNA_RANGE_FALL_CAR1_I            =       6647,
  NVI_WCDMA_DC2_LNA_RANGE_FALL_CAR1_I            =       6648,
  NVI_WCDMA_DC1_LNA_RANGE_FALL_2_CAR1_I          =       6649,
  NVI_WCDMA_DC2_LNA_RANGE_FALL_2_CAR1_I          =       6650,
  NVI_WCDMA_DC1_LNA_RANGE_FALL_3_CAR1_I          =       6651,
  NVI_WCDMA_DC2_LNA_RANGE_FALL_3_CAR1_I          =       6652,
  NVI_WCDMA_DC1_LNA_RANGE_FALL_4_CAR1_I          =       6653,
  NVI_WCDMA_DC2_LNA_RANGE_FALL_4_CAR1_I          =       6654,
  NVI_WCDMA_DC1_LNA_RANGE_FALL_5_CAR1_I          =       6655,
  NVI_WCDMA_DC2_LNA_RANGE_FALL_5_CAR1_I          =       6656,
  NVI_WCDMA_DC1_RXF_ICI_CAL_DATA_CAR0_I          =       6657,
  NVI_WCDMA_DC2_RXF_ICI_CAL_DATA_CAR0_I          =       6658,
  NVI_WCDMA_DC1_RXF_ICI_CAL_DATA_CAR1_I          =       6659,
  NVI_WCDMA_DC2_RXF_ICI_CAL_DATA_CAR1_I          =       6660,
  NVI_C1_WCDMA_DC1_RXF_ICI_CAL_DATA_CAR0_I       =       6661,
  NVI_C1_WCDMA_DC2_RXF_ICI_CAL_DATA_CAR0_I       =       6662,
  NVI_C1_WCDMA_DC1_RXF_ICI_CAL_DATA_CAR1_I       =       6663,
  NVI_C1_WCDMA_DC2_RXF_ICI_CAL_DATA_CAR1_I       =       6664,
  NVI_C1_WCDMA_DC1_LNA_RANGE_OFFSET_CAR1_I       =       6665,
  NVI_C1_WCDMA_DC2_LNA_RANGE_OFFSET_CAR1_I       =       6666,
  NVI_C1_WCDMA_DC1_LNA_RANGE_OFFSET_2_CAR1_I     =       6667,
  NVI_C1_WCDMA_DC2_LNA_RANGE_OFFSET_2_CAR1_I     =       6668,
  NVI_C1_WCDMA_DC1_LNA_RANGE_OFFSET_3_CAR1_I     =       6669,
  NVI_C1_WCDMA_DC2_LNA_RANGE_OFFSET_3_CAR1_I     =       6670,
  NVI_C1_WCDMA_DC1_LNA_RANGE_OFFSET_4_CAR1_I     =       6671,
  NVI_C1_WCDMA_DC2_LNA_RANGE_OFFSET_4_CAR1_I     =       6672,
  NVI_C1_WCDMA_DC1_LNA_RANGE_OFFSET_5_CAR1_I     =       6673,
  NVI_C1_WCDMA_DC2_LNA_RANGE_OFFSET_5_CAR1_I     =       6674,
  NVI_C1_WCDMA_DC1_VGA_GAIN_OFFSET_CAR1_I        =       6675,
  NVI_C1_WCDMA_DC2_VGA_GAIN_OFFSET_CAR1_I        =       6676,
  NVI_C1_WCDMA_2100_LNA_RANGE_OFFSET_CAR1_I      =       6677,
  NVI_C1_WCDMA_2100_LNA_RANGE_OFFSET_2_CAR1_I    =       6678,
  NVI_C1_WCDMA_2100_LNA_RANGE_OFFSET_3_CAR1_I    =       6679,
  NVI_C1_WCDMA_2100_LNA_RANGE_OFFSET_4_CAR1_I    =       6680,
  NVI_C1_WCDMA_2100_LNA_RANGE_OFFSET_5_CAR1_I    =       6681,
  NVI_C1_WCDMA_2100_VGA_GAIN_OFFSET_CAR1_I       =       6682,
  NVI_LTE_B17_C1_RX_GAIN_VS_FREQ_I_I             =       6683,
  NVI_LTE_B13_EXP_LPM_HDET_VS_AGC_I              =       6684,
  NVI_LTE_B13_HDET_HPM_LPM_SWITCH_POINT_I        =       6685,
  NVI_LTE_B13_TX_LIMIT_VS_FREQ_LPM_I             =       6686,
  NVI_LTE_B1_HDET_HPM_LPM_SWITCH_POINT_I         =       6687,
  NVI_LTE_B1_EXP_LPM_HDET_VS_AGC_I               =       6688,
  NVI_LTE_B1_TX_LIMIT_VS_FREQ_LPM_I              =       6689,
  NVI_THERM_BINS_2_I                             =       6690,
  NVI_GSM_PRUI_00_I                              =       6691,
  NVI_GSM_PRUI_01_I                              =       6692,
  NVI_GSM_PRUI_02_I                              =       6693,
  NVI_GSM_PRUI_03_I                              =       6694,
  NVI_GSM_PRUI_04_I                              =       6695,
  NVI_GSM_PRUI_05_I                              =       6696,
  NVI_GSM_PRUI_06_I                              =       6697,
  NVI_GSM_PRUI_07_I                              =       6698,
  NVI_GSM_PRUI_08_I                              =       6699,
  NVI_GSM_PRUI_09_I                              =       6700,
  NVI_GSM_PRUI_10_I                              =       6701,
  NVI_GSM_PRDI_00_I                              =       6702,
  NVI_GSM_PRDI_01_I                              =       6703,
  NVI_GSM_PRDI_02_I                              =       6704,
  NVI_GSM_PRDI_03_I                              =       6705,
  NVI_GSM_PRDI_04_I                              =       6706,
  NVI_GSM_PRDI_05_I                              =       6707,
  NVI_GSM_PRDI_06_I                              =       6708,
  NVI_GSM_PRDI_07_I                              =       6709,
  NVI_GSM_PRDI_08_I                              =       6710,
  NVI_GSM_PRDI_09_I                              =       6711,
  NVI_GSM_PRDI_10_I                              =       6712,
  NVI_GSM_PRDI_11_I                              =       6713,
  NVI_DCS_PRUI_00_I                              =       6714,
  NVI_DCS_PRUI_01_I                              =       6715,
  NVI_DCS_PRUI_02_I                              =       6716,
  NVI_DCS_PRUI_03_I                              =       6717,
  NVI_DCS_PRUI_04_I                              =       6718,
  NVI_DCS_PRUI_05_I                              =       6719,
  NVI_DCS_PRUI_06_I                              =       6720,
  NVI_DCS_PRUI_07_I                              =       6721,
  NVI_DCS_PRUI_08_I                              =       6722,
  NVI_DCS_PRUI_09_I                              =       6723,
  NVI_DCS_PRUI_10_I                              =       6724,
  NVI_DCS_PRUI_11_I                              =       6725,
  NVI_DCS_PRUI_12_I                              =       6726,
  NVI_DCS_PRDI_00_I                              =       6727,
  NVI_DCS_PRDI_01_I                              =       6728,
  NVI_DCS_PRDI_02_I                              =       6729,
  NVI_DCS_PRDI_03_I                              =       6730,
  NVI_DCS_PRDI_04_I                              =       6731,
  NVI_DCS_PRDI_05_I                              =       6732,
  NVI_DCS_PRDI_06_I                              =       6733,
  NVI_DCS_PRDI_07_I                              =       6734,
  NVI_DCS_PRDI_08_I                              =       6735,
  NVI_DCS_PRDI_09_I                              =       6736,
  NVI_DCS_PRDI_10_I                              =       6737,
  NVI_DCS_PRDI_11_I                              =       6738,
  NVI_DCS_PRDI_12_I                              =       6739,
  NVI_GSM_1900_PRUI_00_I                         =       6740,
  NVI_GSM_1900_PRUI_01_I                         =       6741,
  NVI_GSM_1900_PRUI_02_I                         =       6742,
  NVI_GSM_1900_PRUI_03_I                         =       6743,
  NVI_GSM_1900_PRUI_04_I                         =       6744,
  NVI_GSM_1900_PRUI_05_I                         =       6745,
  NVI_GSM_1900_PRUI_06_I                         =       6746,
  NVI_GSM_1900_PRUI_07_I                         =       6747,
  NVI_GSM_1900_PRUI_08_I                         =       6748,
  NVI_GSM_1900_PRUI_09_I                         =       6749,
  NVI_GSM_1900_PRUI_10_I                         =       6750,
  NVI_GSM_1900_PRUI_11_I                         =       6751,
  NVI_GSM_1900_PRUI_12_I                         =       6752,
  NVI_GSM_1900_PRDI_02_I                         =       6753,
  NVI_GSM_1900_PRDI_03_I                         =       6754,
  NVI_GSM_1900_PRDI_04_I                         =       6755,
  NVI_GSM_1900_PRDI_05_I                         =       6756,
  NVI_GSM_1900_PRDI_06_I                         =       6757,
  NVI_GSM_1900_PRDI_07_I                         =       6758,
  NVI_GSM_1900_PRDI_09_I                         =       6759,
  NVI_GSM_1900_PRDI_10_I                         =       6760,
  NVI_GSM_1900_PRDI_12_I                         =       6761,
  NVI_GSM_VL_TL_BRUI_14_I                        =       6762,
  NVI_GSM_VL_TL_BRUI_13_I                        =       6763,
  NVI_GSM_VL_TL_BRUI_12_I                        =       6764,
  NVI_GSM_VL_TL_BRDI_14_I                        =       6765,
  NVI_GSM_VL_TL_BRDI_13_I                        =       6766,
  NVI_GSM_VL_TL_BRDI_12_I                        =       6767,
  NVI_DCS_VL_TL_BRUI_15_I                        =       6768,
  NVI_DCS_VL_TL_BRUI_14_I                        =       6769,
  NVI_DCS_VL_TL_BRUI_13_I                        =       6770,
  NVI_DCS_VL_TL_BRDI_15_I                        =       6771,
  NVI_DCS_VL_TL_BRDI_14_I                        =       6772,
  NVI_DCS_VL_TL_BRDI_13_I                        =       6773,
  NVI_GSM_1900_VL_TL_BRUI_15_I                   =       6774,
  NVI_GSM_1900_VL_TL_BRUI_14_I                   =       6775,
  NVI_GSM_1900_VL_TL_BRUI_13_I                   =       6776,
  NVI_GSM_1900_VL_TL_BRDI_15_I                   =       6777,
  NVI_GSM_1900_VL_TL_BRDI_14_I                   =       6778,
  NVI_GSM_1900_VL_TL_BRDI_13_I                   =       6779,
  NVI_GSM_VM_TL_BRUI_14_I                        =       6780,
  NVI_GSM_VM_TL_BRUI_13_I                        =       6781,
  NVI_GSM_VM_TL_BRUI_12_I                        =       6782,
  NVI_GSM_VM_TL_BRDI_14_I                        =       6783,
  NVI_GSM_VM_TL_BRDI_13_I                        =       6784,
  NVI_GSM_VM_TL_BRDI_12_I                        =       6785,
  NVI_DCS_VM_TL_BRUI_15_I                        =       6786,
  NVI_DCS_VM_TL_BRUI_14_I                        =       6787,
  NVI_DCS_VM_TL_BRUI_13_I                        =       6788,
  NVI_DCS_VM_TL_BRDI_15_I                        =       6789,
  NVI_DCS_VM_TL_BRDI_14_I                        =       6790,
  NVI_DCS_VM_TL_BRDI_13_I                        =       6791,
  NVI_GSM_1900_VM_TL_BRUI_15_I                   =       6792,
  NVI_GSM_1900_VM_TL_BRUI_14_I                   =       6793,
  NVI_GSM_1900_VM_TL_BRUI_13_I                   =       6794,
  NVI_GSM_1900_VM_TL_BRDI_15_I                   =       6795,
  NVI_GSM_1900_VM_TL_BRDI_14_I                   =       6796,
  NVI_GSM_1900_VM_TL_BRDI_13_I                   =       6797,
  NVI_GSM_VH_TL_BRUI_14_I                        =       6798,
  NVI_GSM_VH_TL_BRUI_13_I                        =       6799,
  NVI_GSM_VH_TL_BRUI_12_I                        =       6800,
  NVI_GSM_VH_TL_BRDI_14_I                        =       6801,
  NVI_GSM_VH_TL_BRDI_13_I                        =       6802,
  NVI_GSM_VH_TL_BRDI_12_I                        =       6803,
  NVI_DCS_VH_TL_BRUI_15_I                        =       6804,
  NVI_DCS_VH_TL_BRUI_14_I                        =       6805,
  NVI_DCS_VH_TL_BRUI_13_I                        =       6806,
  NVI_DCS_VH_TL_BRDI_15_I                        =       6807,
  NVI_DCS_VH_TL_BRDI_14_I                        =       6808,
  NVI_DCS_VH_TL_BRDI_13_I                        =       6809,
  NVI_GSM_1900_VH_TL_BRUI_15_I                   =       6810,
  NVI_GSM_1900_VH_TL_BRUI_14_I                   =       6811,
  NVI_GSM_1900_VH_TL_BRUI_13_I                   =       6812,
  NVI_GSM_1900_VH_TL_BRDI_15_I                   =       6813,
  NVI_GSM_1900_VH_TL_BRDI_14_I                   =       6814,
  NVI_GSM_1900_VH_TL_BRDI_13_I                   =       6815,
  NVI_GSM_VL_TM_BRUI_14_I                        =       6816,
  NVI_GSM_VL_TM_BRUI_13_I                        =       6817,
  NVI_GSM_VL_TM_BRUI_12_I                        =       6818,
  NVI_GSM_VL_TM_BRDI_14_I                        =       6819,
  NVI_GSM_VL_TM_BRDI_13_I                        =       6820,
  NVI_GSM_VL_TM_BRDI_12_I                        =       6821,
  NVI_DCS_VL_TM_BRUI_15_I                        =       6822,
  NVI_DCS_VL_TM_BRUI_14_I                        =       6823,
  NVI_DCS_VL_TM_BRUI_13_I                        =       6824,
  NVI_DCS_VL_TM_BRDI_15_I                        =       6825,
  NVI_DCS_VL_TM_BRDI_14_I                        =       6826,
  NVI_DCS_VL_TM_BRDI_13_I                        =       6827,
  NVI_GSM_1900_VL_TM_BRUI_15_I                   =       6828,
  NVI_GSM_1900_VL_TM_BRUI_14_I                   =       6829,
  NVI_GSM_1900_VL_TM_BRUI_13_I                   =       6830,
  NVI_GSM_1900_VL_TM_BRDI_15_I                   =       6831,
  NVI_GSM_1900_VL_TM_BRDI_14_I                   =       6832,
  NVI_GSM_1900_VL_TM_BRDI_13_I                   =       6833,
  NVI_GSM_VM_TM_BRUI_14_I                        =       6834,
  NVI_GSM_VM_TM_BRUI_13_I                        =       6835,
  NVI_GSM_VM_TM_BRUI_12_I                        =       6836,
  NVI_GSM_VM_TM_BRDI_14_I                        =       6837,
  NVI_GSM_VM_TM_BRDI_13_I                        =       6838,
  NVI_GSM_VM_TM_BRDI_12_I                        =       6839,
  NVI_DCS_VM_TM_BRUI_15_I                        =       6840,
  NVI_DCS_VM_TM_BRUI_14_I                        =       6841,
  NVI_DCS_VM_TM_BRUI_13_I                        =       6842,
  NVI_DCS_VM_TM_BRDI_15_I                        =       6843,
  NVI_DCS_VM_TM_BRDI_14_I                        =       6844,
  NVI_DCS_VM_TM_BRDI_13_I                        =       6845,
  NVI_GSM_1900_VM_TM_BRUI_15_I                   =       6846,
  NVI_GSM_1900_VM_TM_BRUI_14_I                   =       6847,
  NVI_GSM_1900_VM_TM_BRUI_13_I                   =       6848,
  NVI_GSM_1900_VM_TM_BRDI_15_I                   =       6849,
  NVI_GSM_1900_VM_TM_BRDI_14_I                   =       6850,
  NVI_GSM_1900_VM_TM_BRDI_13_I                   =       6851,
  NVI_GSM_VH_TM_BRUI_14_I                        =       6852,
  NVI_GSM_VH_TM_BRUI_13_I                        =       6853,
  NVI_GSM_VH_TM_BRUI_12_I                        =       6854,
  NVI_GSM_VH_TM_BRDI_14_I                        =       6855,
  NVI_GSM_VH_TM_BRDI_13_I                        =       6856,
  NVI_GSM_VH_TM_BRDI_12_I                        =       6857,
  NVI_DCS_VH_TM_BRUI_15_I                        =       6858,
  NVI_DCS_VH_TM_BRUI_14_I                        =       6859,
  NVI_DCS_VH_TM_BRUI_13_I                        =       6860,
  NVI_DCS_VH_TM_BRDI_15_I                        =       6861,
  NVI_DCS_VH_TM_BRDI_14_I                        =       6862,
  NVI_DCS_VH_TM_BRDI_13_I                        =       6863,
  NVI_GSM_1900_VH_TM_BRUI_15_I                   =       6864,
  NVI_GSM_1900_VH_TM_BRUI_14_I                   =       6865,
  NVI_GSM_1900_VH_TM_BRUI_13_I                   =       6866,
  NVI_GSM_1900_VH_TM_BRDI_15_I                   =       6867,
  NVI_GSM_1900_VH_TM_BRDI_14_I                   =       6868,
  NVI_GSM_1900_VH_TM_BRDI_13_I                   =       6869,
  NVI_GSM_VL_TH_BRUI_14_I                        =       6870,
  NVI_GSM_VL_TH_BRUI_13_I                        =       6871,
  NVI_GSM_VL_TH_BRUI_12_I                        =       6872,
  NVI_GSM_VL_TH_BRDI_14_I                        =       6873,
  NVI_GSM_VL_TH_BRDI_13_I                        =       6874,
  NVI_GSM_VL_TH_BRDI_12_I                        =       6875,
  NVI_DCS_VL_TH_BRUI_15_I                        =       6876,
  NVI_DCS_VL_TH_BRUI_14_I                        =       6877,
  NVI_DCS_VL_TH_BRUI_13_I                        =       6878,
  NVI_DCS_VL_TH_BRDI_15_I                        =       6879,
  NVI_DCS_VL_TH_BRDI_14_I                        =       6880,
  NVI_DCS_VL_TH_BRDI_13_I                        =       6881,
  NVI_GSM_1900_VL_TH_BRUI_15_I                   =       6882,
  NVI_GSM_1900_VL_TH_BRUI_14_I                   =       6883,
  NVI_GSM_1900_VL_TH_BRUI_13_I                   =       6884,
  NVI_GSM_1900_VL_TH_BRDI_15_I                   =       6885,
  NVI_GSM_1900_VL_TH_BRDI_14_I                   =       6886,
  NVI_GSM_1900_VL_TH_BRDI_13_I                   =       6887,
  NVI_GSM_VM_TH_BRUI_14_I                        =       6888,
  NVI_GSM_VM_TH_BRUI_13_I                        =       6889,
  NVI_GSM_VM_TH_BRUI_12_I                        =       6890,
  NVI_GSM_VM_TH_BRDI_14_I                        =       6891,
  NVI_GSM_VM_TH_BRDI_13_I                        =       6892,
  NVI_GSM_VM_TH_BRDI_12_I                        =       6893,
  NVI_DCS_VM_TH_BRUI_15_I                        =       6894,
  NVI_DCS_VM_TH_BRUI_14_I                        =       6895,
  NVI_DCS_VM_TH_BRUI_13_I                        =       6896,
  NVI_DCS_VM_TH_BRDI_15_I                        =       6897,
  NVI_DCS_VM_TH_BRDI_14_I                        =       6898,
  NVI_DCS_VM_TH_BRDI_13_I                        =       6899,
  NVI_GSM_1900_VM_TH_BRUI_15_I                   =       6900,
  NVI_GSM_1900_VM_TH_BRUI_14_I                   =       6901,
  NVI_GSM_1900_VM_TH_BRUI_13_I                   =       6902,
  NVI_GSM_1900_VM_TH_BRDI_15_I                   =       6903,
  NVI_GSM_1900_VM_TH_BRDI_14_I                   =       6904,
  NVI_GSM_1900_VM_TH_BRDI_13_I                   =       6905,
  NVI_GSM_VH_TH_BRUI_14_I                        =       6906,
  NVI_GSM_VH_TH_BRUI_13_I                        =       6907,
  NVI_GSM_VH_TH_BRUI_12_I                        =       6908,
  NVI_GSM_VH_TH_BRDI_14_I                        =       6909,
  NVI_GSM_VH_TH_BRDI_13_I                        =       6910,
  NVI_GSM_VH_TH_BRDI_12_I                        =       6911,
  NVI_DCS_VH_TH_BRUI_15_I                        =       6912,
  NVI_DCS_VH_TH_BRUI_14_I                        =       6913,
  NVI_DCS_VH_TH_BRUI_13_I                        =       6914,
  NVI_DCS_VH_TH_BRDI_15_I                        =       6915,
  NVI_DCS_VH_TH_BRDI_14_I                        =       6916,
  NVI_DCS_VH_TH_BRDI_13_I                        =       6917,
  NVI_GSM_1900_VH_TH_BRUI_15_I                   =       6918,
  NVI_GSM_1900_VH_TH_BRUI_14_I                   =       6919,
  NVI_GSM_1900_VH_TH_BRUI_13_I                   =       6920,
  NVI_GSM_1900_VH_TH_BRDI_15_I                   =       6921,
  NVI_GSM_1900_VH_TH_BRDI_14_I                   =       6922,
  NVI_GSM_1900_VH_TH_BRDI_13_I                   =       6923,
  NVI_GSM_C0_TX_FREQ_COMP_I                      =       6924,
  NVI_DCS_C0_TX_FREQ_COMP_I                      =       6925,
  NVI_GSM_1900_C0_TX_FREQ_COMP_I                 =       6926,
  NVI_GSM_C1_TX_FREQ_COMP_I                      =       6927,
  NVI_DCS_C1_TX_FREQ_COMP_I                      =       6928,
  NVI_GSM1900_C1_TX_FREQ_COMP_I                  =       6929,
  NVI_GSM_ENABLE_TX_FREQ_COMP_VS_PCL_I           =       6930,
  NVI_DCS_ENABLE_TX_FREQ_COMP_VS_PCL_I           =       6931,
  NVI_GSM_1900_ENABLE_TX_FREQ_COMP_VS_PCL_I      =       6932,
  NVI_THERM_COMP_THRESHOLDS_I                    =       6933,
  NVI_VBATT_COMP_THRESHOLDS_I                    =       6934,
  NVI_WCDMA_C0_TX_COMP_VS_FREQ_0_I               =       6935,
  NVI_WCDMA_C0_TX_COMP_VS_FREQ_1_I               =       6936,
  NVI_WCDMA_C1_TX_COMP_VS_FREQ_0_I               =       6937,
  NVI_WCDMA_C1_TX_COMP_VS_FREQ_1_I               =       6938,
  NVI_WCDMA_TX_LIM_VS_VOLT_OFFSET_I              =       6939,
  NVI_GSM_VL_TL_PRUI_14_I                        =       6940,
  NVI_GSM_VL_TL_PRUI_13_I                        =       6941,
  NVI_GSM_VL_TL_PRUI_12_I                        =       6942,
  NVI_GSM_VL_TL_PRDI_14_I                        =       6943,
  NVI_GSM_VL_TL_PRDI_13_I                        =       6944,
  NVI_GSM_VL_TL_PRDI_12_I                        =       6945,
  NVI_DCS_VL_TL_PRUI_15_I                        =       6946,
  NVI_DCS_VL_TL_PRUI_14_I                        =       6947,
  NVI_DCS_VL_TL_PRUI_13_I                        =       6948,
  NVI_DCS_VL_TL_PRDI_15_I                        =       6949,
  NVI_DCS_VL_TL_PRDI_14_I                        =       6950,
  NVI_DCS_VL_TL_PRDI_13_I                        =       6951,
  NVI_GSM_1900_VL_TL_PRUI_15_I                   =       6952,
  NVI_GSM_1900_VL_TL_PRUI_14_I                   =       6953,
  NVI_GSM_1900_VL_TL_PRUI_13_I                   =       6954,
  NVI_GSM_1900_VL_TL_PRDI_15_I                   =       6955,
  NVI_GSM_1900_VL_TL_PRDI_14_I                   =       6956,
  NVI_GSM_1900_VL_TL_PRDI_13_I                   =       6957,
  NVI_GSM_VM_TL_PRUI_14_I                        =       6958,
  NVI_GSM_VM_TL_PRUI_13_I                        =       6959,
  NVI_GSM_VM_TL_PRUI_12_I                        =       6960,
  NVI_GSM_VM_TL_PRDI_14_I                        =       6961,
  NVI_GSM_VM_TL_PRDI_13_I                        =       6962,
  NVI_GSM_VM_TL_PRDI_12_I                        =       6963,
  NVI_DCS_VM_TL_PRUI_15_I                        =       6964,
  NVI_DCS_VM_TL_PRUI_14_I                        =       6965,
  NVI_DCS_VM_TL_PRUI_13_I                        =       6966,
  NVI_DCS_VM_TL_PRDI_15_I                        =       6967,
  NVI_DCS_VM_TL_PRDI_14_I                        =       6968,
  NVI_DCS_VM_TL_PRDI_13_I                        =       6969,
  NVI_GSM_1900_VM_TL_PRUI_15_I                   =       6970,
  NVI_GSM_1900_VM_TL_PRUI_14_I                   =       6971,
  NVI_GSM_1900_VM_TL_PRUI_13_I                   =       6972,
  NVI_GSM_1900_VM_TL_PRDI_15_I                   =       6973,
  NVI_GSM_1900_VM_TL_PRDI_14_I                   =       6974,
  NVI_GSM_1900_VM_TL_PRDI_13_I                   =       6975,
  NVI_GSM_VH_TL_PRUI_14_I                        =       6976,
  NVI_GSM_VH_TL_PRUI_13_I                        =       6977,
  NVI_GSM_VH_TL_PRUI_12_I                        =       6978,
  NVI_GSM_VH_TL_PRDI_14_I                        =       6979,
  NVI_GSM_VH_TL_PRDI_13_I                        =       6980,
  NVI_GSM_VH_TL_PRDI_12_I                        =       6981,
  NVI_DCS_VH_TL_PRUI_15_I                        =       6982,
  NVI_DCS_VH_TL_PRUI_14_I                        =       6983,
  NVI_DCS_VH_TL_PRUI_13_I                        =       6984,
  NVI_DCS_VH_TL_PRDI_15_I                        =       6985,
  NVI_DCS_VH_TL_PRDI_14_I                        =       6986,
  NVI_DCS_VH_TL_PRDI_13_I                        =       6987,
  NVI_GSM_1900_VH_TL_PRUI_15_I                   =       6988,
  NVI_GSM_1900_VH_TL_PRUI_14_I                   =       6989,
  NVI_GSM_1900_VH_TL_PRUI_13_I                   =       6990,
  NVI_GSM_1900_VH_TL_PRDI_15_I                   =       6991,
  NVI_GSM_1900_VH_TL_PRDI_14_I                   =       6992,
  NVI_GSM_1900_VH_TL_PRDI_13_I                   =       6993,
  NVI_GSM_VL_TM_PRUI_14_I                        =       6994,
  NVI_GSM_VL_TM_PRUI_13_I                        =       6995,
  NVI_GSM_VL_TM_PRUI_12_I                        =       6996,
  NVI_GSM_VL_TM_PRDI_14_I                        =       6997,
  NVI_GSM_VL_TM_PRDI_13_I                        =       6998,
  NVI_GSM_VL_TM_PRDI_12_I                        =       6999,
  NVI_DCS_VL_TM_PRUI_15_I                        =       7000,
  NVI_DCS_VL_TM_PRUI_14_I                        =       7001,
  NVI_DCS_VL_TM_PRUI_13_I                        =       7002,
  NVI_DCS_VL_TM_PRDI_15_I                        =       7003,
  NVI_DCS_VL_TM_PRDI_14_I                        =       7004,
  NVI_DCS_VL_TM_PRDI_13_I                        =       7005,
  NVI_GSM_1900_VL_TM_PRUI_15_I                   =       7006,
  NVI_GSM_1900_VL_TM_PRUI_14_I                   =       7007,
  NVI_GSM_1900_VL_TM_PRUI_13_I                   =       7008,
  NVI_GSM_1900_VL_TM_PRDI_15_I                   =       7009,
  NVI_GSM_1900_VL_TM_PRDI_14_I                   =       7010,
  NVI_GSM_1900_VL_TM_PRDI_13_I                   =       7011,
  NVI_GSM_VM_TM_PRUI_14_I                        =       7012,
  NVI_GSM_VM_TM_PRUI_13_I                        =       7013,
  NVI_GSM_VM_TM_PRUI_12_I                        =       7014,
  NVI_GSM_VM_TM_PRDI_14_I                        =       7015,
  NVI_GSM_VM_TM_PRDI_13_I                        =       7016,
  NVI_GSM_VM_TM_PRDI_12_I                        =       7017,
  NVI_DCS_VM_TM_PRUI_15_I                        =       7018,
  NVI_DCS_VM_TM_PRUI_14_I                        =       7019,
  NVI_DCS_VM_TM_PRUI_13_I                        =       7020,
  NVI_DCS_VM_TM_PRDI_15_I                        =       7021,
  NVI_DCS_VM_TM_PRDI_14_I                        =       7022,
  NVI_DCS_VM_TM_PRDI_13_I                        =       7023,
  NVI_GSM_1900_VM_TM_PRUI_15_I                   =       7024,
  NVI_GSM_1900_VM_TM_PRUI_14_I                   =       7025,
  NVI_GSM_1900_VM_TM_PRUI_13_I                   =       7026,
  NVI_GSM_1900_VM_TM_PRDI_15_I                   =       7027,
  NVI_GSM_1900_VM_TM_PRDI_14_I                   =       7028,
  NVI_GSM_1900_VM_TM_PRDI_13_I                   =       7029,
  NVI_GSM_VH_TM_PRUI_14_I                        =       7030,
  NVI_GSM_VH_TM_PRUI_13_I                        =       7031,
  NVI_GSM_VH_TM_PRUI_12_I                        =       7032,
  NVI_GSM_VH_TM_PRDI_14_I                        =       7033,
  NVI_GSM_VH_TM_PRDI_13_I                        =       7034,
  NVI_GSM_VH_TM_PRDI_12_I                        =       7035,
  NVI_DCS_VH_TM_PRUI_15_I                        =       7036,
  NVI_DCS_VH_TM_PRUI_14_I                        =       7037,
  NVI_DCS_VH_TM_PRUI_13_I                        =       7038,
  NVI_DCS_VH_TM_PRDI_15_I                        =       7039,
  NVI_DCS_VH_TM_PRDI_14_I                        =       7040,
  NVI_DCS_VH_TM_PRDI_13_I                        =       7041,
  NVI_GSM_1900_VH_TM_PRUI_15_I                   =       7042,
  NVI_GSM_1900_VH_TM_PRUI_14_I                   =       7043,
  NVI_GSM_1900_VH_TM_PRUI_13_I                   =       7044,
  NVI_GSM_1900_VH_TM_PRDI_15_I                   =       7045,
  NVI_GSM_1900_VH_TM_PRDI_14_I                   =       7046,
  NVI_GSM_1900_VH_TM_PRDI_13_I                   =       7047,
  NVI_GSM_VL_TH_PRUI_14_I                        =       7048,
  NVI_GSM_VL_TH_PRUI_13_I                        =       7049,
  NVI_GSM_VL_TH_PRUI_12_I                        =       7050,
  NVI_GSM_VL_TH_PRDI_14_I                        =       7051,
  NVI_GSM_VL_TH_PRDI_13_I                        =       7052,
  NVI_GSM_VL_TH_PRDI_12_I                        =       7053,
  NVI_DCS_VL_TH_PRUI_15_I                        =       7054,
  NVI_DCS_VL_TH_PRUI_14_I                        =       7055,
  NVI_DCS_VL_TH_PRUI_13_I                        =       7056,
  NVI_DCS_VL_TH_PRDI_15_I                        =       7057,
  NVI_DCS_VL_TH_PRDI_14_I                        =       7058,
  NVI_DCS_VL_TH_PRDI_13_I                        =       7059,
  NVI_GSM_1900_VL_TH_PRUI_15_I                   =       7060,
  NVI_GSM_1900_VL_TH_PRUI_14_I                   =       7061,
  NVI_GSM_1900_VL_TH_PRUI_13_I                   =       7062,
  NVI_GSM_1900_VL_TH_PRDI_15_I                   =       7063,
  NVI_GSM_1900_VL_TH_PRDI_14_I                   =       7064,
  NVI_GSM_1900_VL_TH_PRDI_13_I                   =       7065,
  NVI_GSM_VM_TH_PRUI_14_I                        =       7066,
  NVI_GSM_VM_TH_PRUI_13_I                        =       7067,
  NVI_GSM_VM_TH_PRUI_12_I                        =       7068,
  NVI_GSM_VM_TH_PRDI_14_I                        =       7069,
  NVI_GSM_VM_TH_PRDI_13_I                        =       7070,
  NVI_GSM_VM_TH_PRDI_12_I                        =       7071,
  NVI_DCS_VM_TH_PRUI_15_I                        =       7072,
  NVI_DCS_VM_TH_PRUI_14_I                        =       7073,
  NVI_DCS_VM_TH_PRUI_13_I                        =       7074,
  NVI_DCS_VM_TH_PRDI_15_I                        =       7075,
  NVI_DCS_VM_TH_PRDI_14_I                        =       7076,
  NVI_DCS_VM_TH_PRDI_13_I                        =       7077,
  NVI_GSM_1900_VM_TH_PRUI_15_I                   =       7078,
  NVI_GSM_1900_VM_TH_PRUI_14_I                   =       7079,
  NVI_GSM_1900_VM_TH_PRUI_13_I                   =       7080,
  NVI_GSM_1900_VM_TH_PRDI_15_I                   =       7081,
  NVI_GSM_1900_VM_TH_PRDI_14_I                   =       7082,
  NVI_GSM_1900_VM_TH_PRDI_13_I                   =       7083,
  NVI_GSM_VH_TH_PRUI_14_I                        =       7084,
  NVI_GSM_VH_TH_PRUI_13_I                        =       7085,
  NVI_GSM_VH_TH_PRUI_12_I                        =       7086,
  NVI_GSM_VH_TH_PRDI_14_I                        =       7087,
  NVI_GSM_VH_TH_PRDI_13_I                        =       7088,
  NVI_GSM_VH_TH_PRDI_12_I                        =       7089,
  NVI_DCS_VH_TH_PRUI_15_I                        =       7090,
  NVI_DCS_VH_TH_PRUI_14_I                        =       7091,
  NVI_DCS_VH_TH_PRUI_13_I                        =       7092,
  NVI_DCS_VH_TH_PRDI_15_I                        =       7093,
  NVI_DCS_VH_TH_PRDI_14_I                        =       7094,
  NVI_DCS_VH_TH_PRDI_13_I                        =       7095,
  NVI_GSM_1900_VH_TH_PRUI_15_I                   =       7096,
  NVI_GSM_1900_VH_TH_PRUI_14_I                   =       7097,
  NVI_GSM_1900_VH_TH_PRUI_13_I                   =       7098,
  NVI_GSM_1900_VH_TH_PRDI_15_I                   =       7099,
  NVI_GSM_1900_VH_TH_PRDI_14_I                   =       7100,
  NVI_GSM_1900_VH_TH_PRDI_13_I                   =       7101,
  NVI_FACTORY_DATA_1_I                           =       7102,
  NVI_FACTORY_DATA_2_I                           =       7103,
  NVI_FACTORY_DATA_3_I                           =       7104,
  NVI_FACTORY_DATA_4_I                           =       7105,
  NVI_GSM_PRUI_11_I                              =       7106,
  NVI_GSM_1900_PRDI_00_I                         =       7107,
  NVI_GSM_1900_PRDI_01_I                         =       7108,
  NVI_GSM_1900_PRDI_11_I                         =       7109,
  NVI_GSM_1900_PRDI_08_I                         =       7110,
  NVI_DEVICE_SERIAL_NO_I                         =       7111,
  NVI_MAX_I                                      =       7112,
  NVI_ITEMS_ENUM_PAD                             =   0x7FFF
} nvi_items_enum_type;


/*=========================================================================*/
/* NVM Internal Items Union Type.                                          */
/*=========================================================================*/

typedef PACKED union PACKED_POST{
  /* Extended version number */
  nvi_verno_ext_type                               nv_verno_ext;
  /* speed dials */
  nvi_dial_type                                    dial;
  
  nvi_stdial_type                                  stack;
  /* esn */
  dword                                            esn;
  
  dword                                            esn_valid;
  /* esn_chksum */
  dword                                            esn_chksum;
  /* Major version number */
  byte                                             verno_maj;
  /* Minor version number */
  byte                                             verno_min;
  /* Roaming list */
  nvi_roaming_list_type                            roaming_list;
  /* Unwired Planet cache */
  nvi_up_cache_type                                up_cache;
  /* PN code selection */
  nvi_pn_id_type                                   pn_id;
  /* SMS */
  nvi_sms_type                                     sms;
  /* NAM chksum */
  nvi_word_type                                    nam_chksum;
  /* Name of NAM */
  nvi_name_type                                    name_nam;
  /* FM AGC values vs power */
  nvi_pwr_table_type                               fm_agc_set_vs_pwr;
  /* FM AGC values vs frequency */
  nvi_freq_table_type                              fm_agc_set_vs_freq;
  /* FM AGC values vs temperature */
  nvi_temp_table_type                              fm_agc_set_vs_temp;
  /* FM HDET values vs power */
  nvi_pwr_table_type                               fm_exp_hdet_vs_pwr;
  /* FM slope values vs power */
  nvi_pwr_table_type                               fm_err_slp_vs_pwr;
  /* CDMA RX compensation values vs. freq */
  nvi_freq_int1_table_type                         cdma_rx_comp_vs_freq;
  /* CDMA TX compensation values vs. freq */
  nvi_freq_int1_table_type                         cdma_tx_comp_vs_freq;
  /* CDMA TX values vs temperature */
  nvi_temp_table_type                              cdma_tx_lin_vs_temp;
  /* CDMA TX values vs voltage */
  nvi_volt_table_type                              cdma_tx_lin_vs_volt;
  
  nvi_temp_table_type                              cdma_tx_lim_vs_temp;
  
  nvi_volt_table_type                              cdma_tx_lim_vs_volt;
  
  nvi_freq_table_type                              cdma_tx_lim_vs_freq;
  
  nvi_temp_int1_table_type                         cdma_rx_lin_vs_temp;
  
  nvi_temp_int1_table_type                         cdma_rx_slp_vs_temp;
  
  nvi_temp_int1_table_type                         cdma_tx_slp_vs_temp;
  
  nvi_temp_int1_table_type                         pa_range_vs_temp;
  
  nvi_temp_table_type                              fm_exp_hdet_vs_temp;
  
  nvi_temp_int1_table_type                         pdm2_vs_temp;
  /* Banner */
  nvi_name_type                                    banner;
  /* System Integration Test Data 1 */
  nvi_si_test_data_type                            si_test_data_1;
  /* System Integration Test Data 2 */
  nvi_si_test_data_type                            si_test_data_2;
  /* Rental timer count item */
  nvi_rental_cnt_type                              rental_cnt;
  /* Internal CDMA tx linearizer master item definition */
  nvi_tx_linearizer_type                           cdma_tx_lin_master;
  
  nvi_a_key_type                                   a_key;
  
  nvi_a_key_chksum_type                            a_key_chksum;
  
  nvi_ssd_type                                     ssd_a;
  
  nvi_ssd_type                                     ssd_b;
  
  nvi_pap_user_id_type                             pap_user_id;
  
  nvi_pap_password_type                            pap_password;
  
  nvi_ppp_password_type                            ppp_password;
  
  nvi_ppp_user_id_type                             ppp_user_id;
  
  nvi_sec_device_key_type                          sec_device_key;
  
  nvi_byte_type                                    scm;
  
  nvi_byte_type                                    mob_cai_rev;
  
  nvi_word_type                                    mob_firm_rev;
  
  nvi_byte_type                                    mob_model;
  
  nvi_config_chksum_type                           config_chksum;
  
  nvi_run_time_type                                run_timer;
  
  nvi_maintrsn_type                                maintrsn;
  
  nvi_lckrsn_type                                  lckrsn_p;
  
  nvi_sec_code_type                                sec_code;
  
  nvi_err_log_type                                 err_log;
  
  nvi_word_type                                    spare_1;
  
  nvi_word_type                                    spare_2;
  
  nvi_fact_info_type                               fact_info;
  
  nvi_fsc_type                                     fsc;
  
  nvi_run_time_type                                life_timer_g;
  
  nvi_run_time_type                                call_timer_g;
  
  nvi_fsc2_type                                    fsc2;
  
  nvi_fsc2_chksum_type                             fsc2_chksum;
  
  nvi_wdc_type                                     wdc;
  
  nvi_dword_type                                   hw_config;
  
  nvi_sec_code_type                                otksl;
  
  nvi_up_key_type                                  up_key;
  
  nvi_byte_type                                    gps1_gps_rf_loss;
  
  nvi_dword_type                                   gps1_lock;
  
  nvi_word_type                                    subpcg_pa_warmup_delay;
  
  nvi_boolean_type                                 data_trtl_enabled;
  
  nvi_enabled_type                                 amps_backstop_enabled;
  
  nvi_byte_type                                    ftm_mode;
  
  nvi_enum_type                                    ds_default_baudrate;
  
  nvi_enum_type                                    diag_default_baudrate;
  
  nvi_byte_type                                    lo_bias_update_cnt;
  
  nvi_byte_type                                    usb_product_id_offset;
  
  nvi_uint16_type                                  avcd_call_duration;
  
  nvi_uint16_type                                  avcd_time_between_calls;
  
  nvi_uint16_type                                  avcd_number_of_calls;
  
  nvi_uint16_type                                  avcd_so;
  
  nvi_boolean_type                                 gmm_ptmsi_sig_tobe_deleted;
  
  nvi_uint8_type                                   diag_debug_control;
  
  nvi_uint8_type                                   diag_debug_detail;
  
  nvi_word_type                                    qvp_app_default_capability_type;
  
  nvi_boolean_type                                 vrhfk_enabled;
  
  nvi_boolean_type                                 vrhfk_voice_answer;
  
  nvi_pref_serv_type                               analog_pref_serv;
  
  nvi_sid_lock_type                                analog_sid_lock;
  
  nvi_sid_acq_type                                 analog_sid_acq;
  
  nvi_firstchp_type                                analog_firstchp;
  
  nvi_sid_type                                     analog_home_sid;
  
  nvi_analog_reg_type                              analog_reg;
  
  nvi_dword_type                                   nxtreg;
  
  nvi_word_type                                    lstsid;
  
  nvi_word_type                                    locaid;
  
  nvi_boolean_type                                 pureg;
  
  nvi_pref_serv_type                               cdma_pref_serv;
  
  nvi_sid_lock_type                                cdma_sid_lock;
  
  nvi_sid_acq_type                                 cdma_sid_acq;
  
  nvi_cdmach_type                                  pcdmach;
  
  nvi_cdmach_type                                  scdmach;
  
  nvi_mob_term_type                                mob_term_home;
  
  nvi_mob_term_type                                mob_term_for_sid;
  
  nvi_mob_term_type                                mob_term_for_nid;
  
  nvi_accolc_type                                  accolc;
  
  nvi_zone_list_type                               zone_list;
  
  nvi_sid_nid_list_type                            sid_nid_list;
  
  nvi_dist_reg_type                                dist_reg;
  
  nvi_cdmach_type                                  last_cdmach;
  
  nvi_call_time_type                               call_timer;
  
  nvi_call_time_type                               air_timer;
  
  nvi_call_time_type                               roam_timer;
  
  nvi_call_time_type                               life_timer;
  
  nvi_byte_type                                    cdma_pn_mask;
  
  nvi_imsi_mcc_type                                imsi_mcc;
  
  nvi_imsi_11_12_type                              imsi_11_12;
  
  nvi_dir_number_type                              dir_number;
  
  nvi_imsi_addr_num_type                           imsi_addr_num;
  
  nvi_tmsi_zone_length_type                        assigning_tmsi_zone_length;
  
  nvi_tmsi_zone_type                               assigning_tmsi_zone;
  
  nvi_tmsi_code_type                               tmsi_code;
  
  nvi_tmsi_exp_time_type                           tmsi_exp_timer;
  
  nvi_mob_dir_data_type                            mob_dir_number;
  
  nvi_sid_nid_lock_type                            sid_nid_lock;
  
  nvi_home_sid_nid_type                            home_sid_nid;
  
  nvi_enabled_type                                 otapa_enabled;
  
  nvi_enabled_type                                 nam_lock;
  
  nvi_min1_type                                    imsi_t_s1;
  
  nvi_min2_type                                    imsi_t_s2;
  
  nvi_imsi_mcc_type                                imsi_t_mcc;
  
  nvi_imsi_11_12_type                              imsi_t_11_12;
  
  nvi_imsi_addr_num_type                           imsi_t_addr_num;
  
  nvi_pref_voice_so_type                           pref_voice_so;
  
  nvi_boolean_type                                 spc_change_enabled;
  
  nvi_boolean_type                                 user_zone_enabled;
  
  nvi_user_zone_type                               user_zone;
  
  nvi_enabled_type                                 puzl_enabled;
  
  nvi_qword_type                                   cdma_powerup_reg_performed;
  
  nvi_uint8_type                                   jcdma_m511_mode;
  
  nvi_uint8_type                                   jcdma_m512_mode;
  
  nvi_uint8_type                                   jcdma_m513_mode;
  
  nvi_cdmach_type                                  jtacs_pcdmach;
  
  nvi_cdmach_type                                  jtacs_scdmach;
  
  nvi_mru3_table_type                              mru3_table;
  
  nvi_mru2_table_type                              mru2_table;
  
  nvi_enabled_type                                 prl_enabled;
  
  nvi_roaming_list_union_type                      roaming_list_683;
  
  nvi_band_pref_type                               band_pref;
  
  nvi_roam_pref_type                               roam_pref;
  
  nvi_band_pref_type                               band_pref_16_31;
  
  nvi_int8_type                                    slot_cycle_index;
  
  nvi_pref_mode_type                               pref_mode;
  
  nvi_count_type                                   count;
  
  nvi_min1_type                                    min1;
  
  nvi_min2_type                                    min2;
  
  nvi_sid_nid_type                                 sid_nid;
  
  nvi_min_chksum_type                              min_chksum;
  
  nvi_byte_type                                    curr_nam;
  
  nvi_boolean_type                                 auto_nam;
  
  nvi_byte_type                                    send_timeout;
  
  nvi_sys_pref_type                                system_pref;
  
  nvi_int8_type                                    neg_slot_cycle_index;
  
  nvi_byte_type                                    sspr_p_rev;
  
  nvi_enum_type                                    ps_data_orig_pref;
  
  nvi_byte_type                                    browser_type;
  
  nvi_ubrowser_type                                ubrowser;
  
  nvi_byte_type                                    up_browser_warn;
  
  nvi_byte_type                                    dm_io_mode;
  
  nvi_byte_type                                    dm_addr;
  
  nvi_boolean_type                                 sio_pwrdwn;
  
  nvi_enum_type                                    ds_default_baud;
  
  nvi_enum_type                                    diag_default_baud;
  
  nvi_int1_type                                    sio_dev_map_menu_item;
  
  nvi_byte_type                                    diag_port_select;
  
  nvi_diag_restart_config_type                     diag_restart_config;
  
  nvi_up_link_info_type                            up_link_info;
  
  nvi_up_parms_type                                up_parms;
  
  nvi_up_alert_record_type                         up_alert_record;
  
  nvi_word_type                                    up_idle_timer;
  
  nvi_boolean_type                                 data_srvc_enabled;
  
  nvi_byte_type                                    data_io_mode;
  
  nvi_word_type                                    idle_data_timeout;
  
  nvi_boolean_type                                 data_qnc_enabled;
  
  nvi_byte_type                                    data_so_set;
  
  nvi_byte_type                                    data_mdr_mode;
  
  nvi_data_pkt_orig_str_type                       data_pkt_orig_str;
  
  nvi_byte_type                                    data_auto_packet_detection;
  
  nvi_byte_type                                    data_default_profile;
  
  nvi_dword_type                                   primary_dns;
  
  nvi_dword_type                                   secondary_dns;
  
  nvi_boolean_type                                 data_scrm_enabled;
  
  nvi_byte_type                                    ds_qcmip;
  
  nvi_byte_type                                    ds_mip_retries;
  
  nvi_byte_type                                    ds_mip_retry_int;
  
  nvi_byte_type                                    ds_mip_pre_re_rrq_time;
  
  nvi_byte_type                                    ds_mip_num_prof;
  
  nvi_byte_type                                    ds_mip_active_prof;
  
  nvi_ds_mip_gen_user_prof_type                    ds_mip_gen_user_prof;
  
  nvi_ds_mip_ss_user_prof_type                     ds_mip_ss_user_prof;
  
  nvi_ds_mip_mn_ha_time_delta_type                 ds_mip_mn_ha_time_delta;
  
  nvi_boolean_type                                 ds_mip_qc_drs_opt;
  
  nvi_boolean_type                                 ds_mip_2002bis_mn_ha_auth;
  
  nvi_domain_name_type                             domain_name;
  
  nvi_boolean_type                                 ds_mip_rrq_if_tfrk;
  
  nvi_ds_mip_enable_prof_type                      ds_mip_enable_prof;
  
  nvi_enum_type                                    ppp_authentication;
  
  nvi_apn_name_type                                apn_name;
  
  nvi_ds_mip_dmu_pkoid_type                        ds_mip_dmu_pkoid;
  
  nvi_uint32_type                                  last_tx_data_count;
  
  nvi_uint32_type                                  last_rx_data_count;
  
  nvi_uint32_type                                  total_tx_data_count;
  
  nvi_uint32_type                                  total_rx_data_count;
  
  nvi_ds_mip_dmu_mn_auth_type                      ds_mip_dmu_mn_auth;
  
  nvi_boolean_type                                 wcdmacs_sync_test_app_enabled;
  
  nvi_rtsp_proxy_server_addr_type                  rtsp_proxy_server_addr;
  
  nvi_uint16_type                                  hysterisis_activation_timer;
  
  nvi_uint16_type                                  hysterisis_timer;
  
  nvi_pkt_dial_string_type                         pkt_dial_strings;
  
  nvi_boolean_type                                 data_incoming_csd_call_is_internal;
  
  nvi_int8_type                                    btfd_olpc_floor_db;
  
  nvi_int8_type                                    non_btfd_olpc_floor_db;
  
  nvi_rtsp_proxy_server_addr_type                  rtsp_proxy_server_addr_alternate;
  
  nvi_boolean_type                                 long_pdpact_tolerance_for_te;
  
  nvi_boolean_type                                 ds_mip_qc_handdown_to_1x_opt;
  
  nvi_ppp_configure_data_type                      ppp_config_data;
  
  nvi_boolean_type                                 select_tech_for_card;
  
  nvi_ppp_ncp_remote_initiate_type                 ppp_ncp_remote_initiate;
  
  nvi_byte_type                                    ds_ucsd_rlp_version_gsm;
  
  nvi_byte_type                                    ds_ucsd_rlp_version_wcdma;
  
  nvi_byte_type                                    ds_atcop_rlp_version_default;
  
  nvi_boolean_type                                 ds_ucsd_recovery_mode_srej;
  
  nvi_uint32_type                                  tcp_keepalive_idle_time;
  
  nvi_data_pkt_orig_str_type                       data_force_cdma_pkt_str;
  
  nvi_ps_ipv6_iid_type                             ps_ipv6_iid;
  
  nvi_boolean_type                                 ipv6_enabled;
  
  nvi_ip6_sm_config_type                           ipv6_sm_config;
  
  nvi_ipv6_address_type                            ipv6_primary_dns;
  
  nvi_ipv6_address_type                            ipv6_secondary_dns;
  
  nvi_boolean_type                                 auth_require_password_encryption;
  
  nvi_boolean_type                                 pdsn_as_proxy_ipv6_dns_server;
  
  nvi_uint32_type                                  hdr_con_suspend;
  
  nvi_uint8_type                                   hdr_pre_cc_cyc_enabled;
  
  nvi_uint16_type                                  hdr_pre_cc_cyc;
  
  nvi_hdr_srch_params_type                         hdr_srch_params;
  
  nvi_uint32_type                                  hdrsmp_keep_alive_start;
  
  nvi_uint32_type                                  hdrsmp_keep_alive_sent;
  
  nvi_uint16_type                                  hdrsmp_keep_alive_req_int;
  
  nvi_hdramp_address_data_type                     hdramp_address_data;
  
  nvi_enum_type                                    hdrscp_session_status;
  
  nvi_uint16_type                                  hdrscp_token;
  
  nvi_hdrscp_protocol_subtype_type                 hdrscp_protocol_subtype;
  
  nvi_uint32_type                                  hdramp_dual_expire_time;
  
  nvi_hdrstream_curr_stream_cfg_type               hdrstream_curr_stream_cfg;
  
  nvi_hdr_chan_mgmt_params_type                    hdr_set_mngmt_same_chan;
  
  nvi_hdr_chan_mgmt_params_type                    hdr_set_mngmt_diff_chan;
  
  nvi_boolean_type                                 hdrlup_unsolicited_enabled;
  
  nvi_hdramac_initial_config_type                  hdramac_initial_config;
  
  nvi_hdramac_power_params_type                    hdramac_power_params;
  
  nvi_uint8_type                                   hdrfmac_drc_gating;
  
  nvi_hdrfmac_handoff_delays_type                  hdrfmac_handoff_delays;
  
  nvi_hdrrmac_power_params_type                    hdrrmac_power_params;
  
  nvi_hdrrmac_rate_params_type                     hdrrmac_rate_params;
  
  nvi_uint8_type                                   hdrslp_reset_seqno;
  
  nvi_hdrfmac_drc_lock_type                        hdrfmac_drc_lock;
  
  nvi_byte_type                                    hybrid_pref;
  
  nvi_hdr_an_auth_nai_type                         hdr_an_auth_nai;
  
  nvi_hdr_an_auth_password_type                    hdr_an_auth_password;
  
  nvi_hdrkep_config_type                           hdrkep_config;
  
  nvi_hdrauth_config_type                          hdrauth_config;
  
  nvi_uint16_type                                  colloc_disallowed_time;
  
  nvi_uint16_type                                  hold_hdr_time;
  
  nvi_boolean_type                                 hdrscp_an_auth_status;
  
  nvi_qword_type                                   hdrsmpka_start_time;
  
  nvi_qword_type                                   hdrsmpka_sent_time;
  
  nvi_uint8_type                                   hdr_rx_diversity_ctrl;
  
  nvi_hdrrup_srch_params_type                      hdrrup_srch_params;
  
  nvi_boolean_type                                 hdr_do_not_disturb;
  
  nvi_uint8_type                                   hdrrup_override_allowed;
  
  nvi_hdr_an_ppp_nai_type                          hdr_an_ppp_user_id;
  
  nvi_hdr_an_ppp_password_type                     hdr_an_ppp_password;
  
  nvi_hdr_an_auth_passwd_long_type                 hdr_an_auth_passwd_long;
  
  nvi_hdr_an_auth_user_id_long_type                hdr_an_auth_user_id_long;
  
  nvi_uint32_type                                  hdramp_hardware_id;
  
  nvi_boolean_type                                 sn_ppp_status;
  
  nvi_minmax_type                                  vbatt;
  
  nvi_minmax_type                                  vbatt_pa;
  
  nvi_minmax_type                                  vbatt_aux;
  
  nvi_byte_type                                    lcd;
  
  nvi_fm_tx_pwr_type                               fm_tx_pwr;
  
  nvi_fr_temp_offset_type                          fr_temp_offset;
  
  nvi_minmax_type                                  fm_rssi;
  
  nvi_byte_type                                    max_tx_adj;
  
  nvi_byte_type                                    fm_freq_sense_gain;
  
  nvi_byte_type                                    cdma_rx_lin_off_0;
  
  nvi_cdma_rx_lin_slp_type                         cdma_rx_lin_slp;
  
  nvi_word_type                                    cdma_tx_lin_master_off_0;
  
  nvi_cdma_tx_lin_master_slp_type                  cdma_tx_lin_master_slp;
  
  nvi_cdma_exp_hdet_vs_agc_type                    cdma_exp_hdet_vs_agc;
  
  nvi_cdma_err_slp_vs_hdet_type                    cdma_err_slp_vs_hdet;
  
  nvi_minmax_type                                  therm;
  
  nvi_byte_type                                    hdet_off;
  
  nvi_byte_type                                    hdet_spn;
  
  nvi_fm_agc_adj_vs_freq_type                      fm_agc_adj_vs_freq;
  
  nvi_byte_type                                    rf_config;
  
  nvi_byte_type                                    r1_rise;
  
  nvi_byte_type                                    r1_fall;
  
  nvi_byte_type                                    r2_rise;
  
  nvi_byte_type                                    r2_fall;
  
  nvi_byte_type                                    r3_rise;
  
  nvi_byte_type                                    r3_fall;
  
  nvi_byte_type                                    pa_range_step_cal;
  
  nvi_byte_type                                    lna_range_pol;
  
  nvi_int1_type                                    lna_range_rise;
  
  nvi_int1_type                                    lna_range_fall;
  
  nvi_word_type                                    lna_range_offset;
  
  nvi_minmax_type                                  fm_lna_ctl;
  
  nvi_minmax_type                                  fm_agc;
  
  nvi_byte_type                                    cdma_adj_factor;
  
  nvi_byte_type                                    n1m;
  
  nvi_byte_type                                    pdm2;
  
  nvi_minmax_type                                  rx_agc_minmax;
  
  nvi_byte_type                                    pdm1;
  
  nvi_byte_type                                    pol_rev_timeout;
  
  nvi_fm_hdet_adc_range_type                       fm_hdet_adc_range;
  
  nvi_byte_type                                    cdma_hdet_adc_range;
  
  nvi_sta_values_type                              sta_tbye;
  
  nvi_sta_values_type                              sta_min_thr;
  
  nvi_sta_values_type                              sta_min_rx;
  
  nvi_sta_values_type                              sta_min_ecio;
  
  nvi_byte_type                                    sta_pri;
  
  nvi_byte_type                                    pcs_rx_lin_off_0;
  
  nvi_pcs_rx_lin_slp_type                          pcs_rx_lin_slp;
  
  nvi_pcs_rx_comp_vs_freq_type                     pcs_rx_comp_vs_freq;
  
  nvi_pcs_tx_comp_vs_freq_type                     pcs_tx_comp_vs_freq;
  
  nvi_word_type                                    pcs_tx_lin_master_off_0;
  
  nvi_pcs_tx_lin_master_slp_type                   pcs_tx_lin_master_slp;
  
  nvi_pcs_tx_lin_vs_temp_type                      pcs_tx_lin_vs_temp;
  
  nvi_pcs_tx_lim_vs_temp_type                      pcs_tx_lim_vs_temp;
  
  nvi_pcs_tx_lim_vs_freq_type                      pcs_tx_lim_vs_freq;
  
  nvi_pcs_exp_hdet_vs_agc_type                     pcs_exp_hdet_vs_agc;
  
  nvi_byte_type                                    pcs_hdet_off;
  
  nvi_byte_type                                    pcs_hdet_spn;
  
  nvi_byte_type                                    pcs_r1_rise;
  
  nvi_byte_type                                    pcs_r1_fall;
  
  nvi_byte_type                                    pcs_r2_rise;
  
  nvi_byte_type                                    pcs_r2_fall;
  
  nvi_byte_type                                    pcs_r3_rise;
  
  nvi_byte_type                                    pcs_r3_fall;
  
  nvi_byte_type                                    pcs_pa_range_step_cal;
  
  nvi_pcs_pdm1_vs_freq_type                        pcs_pdm1_vs_freq;
  
  nvi_pcs_pdm2_vs_freq_type                        pcs_pdm2_vs_freq;
  
  nvi_byte_type                                    pcs_lna_range_pol;
  
  nvi_int1_type                                    pcs_lna_range_rise;
  
  nvi_int1_type                                    pcs_lna_range_fall;
  
  nvi_word_type                                    pcs_lna_range_offset;
  
  nvi_pcs_rx_lin_vs_temp_type                      pcs_rx_lin_vs_temp;
  
  nvi_byte_type                                    pcs_adj_factor;
  
  nvi_pcs_pa_range_vs_temp_type                    pcs_pa_range_vs_temp;
  
  nvi_pcs_pdm1_vs_temp_type                        pcs_pdm1_vs_temp;
  
  nvi_pcs_pdm2_vs_temp_type                        pcs_pdm2_vs_temp;
  
  nvi_pcs_rx_slp_vs_temp_type                      pcs_rx_slp_vs_temp;
  
  nvi_pcs_tx_slp_vs_temp_type                      pcs_tx_slp_vs_temp;
  
  nvi_minmax_type                                  pcs_rx_agc_minmax;
  
  nvi_pa_offset_type                               pa_offsets;
  
  nvi_tx_linearizer_type                           cdma_tx_lin_master0;
  
  nvi_tx_linearizer_type                           cdma_tx_lin_master1;
  
  nvi_tx_linearizer_type                           cdma_tx_lin_master2;
  
  nvi_tx_linearizer_type                           cdma_tx_lin_master3;
  
  nvi_int1_type                                    lna_range_2_rise;
  
  nvi_int1_type                                    lna_range_2_fall;
  
  nvi_int2_type                                    lna_range_12_offset;
  
  nvi_byte_type                                    nonbypass_timer;
  
  nvi_byte_type                                    bypass_timer;
  
  nvi_byte_type                                    im_level1;
  
  nvi_byte_type                                    im_level2;
  
  nvi_cdma_lna_offset_vs_freq_type                 cdma_lna_offset_vs_freq;
  
  nvi_cdma_lna_12_offset_vs_freq_type              cdma_lna_12_offset_vs_freq;
  
  nvi_byte_type                                    agc_phase_offset;
  
  nvi_minmax_type                                  rx_agc_min_11;
  
  nvi_int1_type                                    pcs_lna_range_2_rise;
  
  nvi_int1_type                                    pcs_lna_range_2_fall;
  
  nvi_int2_type                                    pcs_lna_range_12_offset;
  
  nvi_byte_type                                    pcs_nonbypass_timer;
  
  nvi_byte_type                                    pcs_bypass_timer;
  
  nvi_byte_type                                    pcs_im_level1;
  
  nvi_byte_type                                    pcs_im_level2;
  
  nvi_pcs_cdma_lna_offset_vs_freq_type             pcs_cdma_lna_offset_vs_freq;
  
  nvi_pcs_cdma_lna_12_offset_vs_freq_type          pcs_cdma_lna_12_offset_vs_freq;
  
  nvi_byte_type                                    pcs_agc_phase_offset;
  
  nvi_minmax_type                                  pcs_rx_agc_min_11;
  
  nvi_enum_type                                    pref_for_rc;
  
  nvi_pa_range_offsets_type                        pa_range_offsets;
  
  nvi_tx_comp_type                                 tx_comp0;
  
  nvi_tx_comp_type                                 tx_comp1;
  
  nvi_tx_comp_type                                 tx_comp2;
  
  nvi_tx_comp_type                                 tx_comp3;
  
  nvi_tx_linearizer_type                           pcs_tx_lin_master0;
  
  nvi_tx_linearizer_type                           pcs_tx_lin_master1;
  
  nvi_tx_linearizer_type                           pcs_tx_lin_master2;
  
  nvi_tx_linearizer_type                           pcs_tx_lin_master3;
  
  nvi_pcs_pa_range_offsets_type                    pcs_pa_range_offsets;
  
  nvi_tx_comp_type                                 pcs_tx_comp0;
  
  nvi_tx_comp_type                                 pcs_tx_comp1;
  
  nvi_tx_comp_type                                 pcs_tx_comp2;
  
  nvi_tx_comp_type                                 pcs_tx_comp3;
  
  nvi_pwr_backoff_vs_volt_med_type                 pwr_backoff_vs_volt_med;
  
  nvi_pwr_backoff_vs_volt_low_type                 pwr_backoff_vs_volt_low;
  
  nvi_pa_backoff_volts_type                        pa_backoff_volts;
  
  nvi_minmax_type                                  vbatt_min_max;
  
  nvi_byte_type                                    ant2_cdma_rx_lin_off_0;
  
  nvi_ant2_cdma_rx_lin_slp_type                    ant2_cdma_rx_lin_slp;
  
  nvi_ant2_cdma_rx_comp_vs_freq_type               ant2_cdma_rx_comp_vs_freq;
  
  nvi_ant2_cdma_rx_lin_vs_temp_type                ant2_cdma_rx_lin_vs_temp;
  
  nvi_ant2_cdma_rx_slp_vs_temp_type                ant2_cdma_rx_slp_vs_temp;
  
  nvi_word_type                                    ant2_lna_range_offset;
  
  nvi_int2_type                                    ant2_lna_range_12_offset;
  
  nvi_ant2_cdma_lna_offset_vs_freq_type            ant2_cdma_lna_offset_vs_freq;
  
  nvi_ant2_cdma_lna_12_offset_vs_freq_type         ant2_cdma_lna_12_offset_vs_freq;
  
  nvi_byte_type                                    ant2_pcs_rx_lin_off_0;
  
  nvi_ant2_pcs_rx_lin_slp_type                     ant2_pcs_rx_lin_slp;
  
  nvi_ant2_pcs_rx_comp_vs_freq_type                ant2_pcs_rx_comp_vs_freq;
  
  nvi_ant2_pcs_rx_lin_vs_temp_type                 ant2_pcs_rx_lin_vs_temp;
  
  nvi_ant2_pcs_rx_slp_vs_temp_type                 ant2_pcs_rx_slp_vs_temp;
  
  nvi_word_type                                    ant2_pcs_lna_range_offset;
  
  nvi_int2_type                                    ant2_pcs_lna_range_12_offset;
  
  nvi_ant2_pcs_cdma_lna_offset_vs_freq_type        ant2_pcs_cdma_lna_offset_vs_freq;
  
  nvi_ant2_pcs_cdma_lna_12_offset_vs_freq_type     ant2_pcs_cdma_lna_12_offset_vs_freq;
  
  nvi_test_code_ver_type                           test_code_ver;
  
  nvi_sys_sw_ver_type                              sys_sw_ver;
  
  nvi_rf_cal_ver_type                              rf_cal_ver;
  
  nvi_rf_config_ver_type                           rf_config_ver;
  
  nvi_dword_type                                   rf_cal_date;
  
  nvi_dword_type                                   rf_nv_loaded_date;
  
  nvi_rf_cal_dat_file_type                         rf_cal_dat_file;
  
  nvi_vco_coarse_tune_table_type                   vco_coarse_tune_table;
  
  nvi_uint32_type                                  rf_test_item_1;
  
  nvi_uint32_type                                  rf_test_item_2;
  /* Internal cdma_tx_cal_chan items definition */
  nvi_cal_chan_type                                cdma_tx_cal_chan;
  /* Internal cdma_rx_cal_chan items definition */
  nvi_cal_chan_type                                cdma_rx_cal_chan;
  /* Internal pcs_rx_cal_chan items definition */
  nvi_cal_chan_type                                pcs_rx_cal_chan;
  /* Internal pcs_tx_cal_chan items definition */
  nvi_cal_chan_type                                pcs_tx_cal_chan;
  
  nvi_boolean_type                                 tcp_graceful_dormant_close;
  
  nvi_boolean_type                                 interfreq_enabled;
  
  nvi_boolean_type                                 eplmn_enabled;
  
  nvi_uint8_type                                   dtmf;
  
  nvi_word_type                                    elapsed_time;
  
  nvi_boolean_type                                 sms_utc;
  
  nvi_boolean_type                                 sms_auto_delete;
  
  nvi_byte_type                                    sms_reminder_tone;
  
  nvi_word_type                                    sms_bc_service_table_size;
  
  nvi_sms_bc_service_table_type                    sms_bc_service_table;
  
  nvi_byte_type                                    sms_bc_config;
  
  nvi_byte_type                                    sms_bc_user_pref;
  
  nvi_sms_vm_number_type                           sms_vm_number;
  
  nvi_sms_gw_parms_type                            sms_gw_parms;
  
  nvi_sms_gw_type                                  sms_gw;
  
  nvi_sms_routing_type                             sms_cfg_routing;
  
  nvi_sms_cd_parms_type                            sms_cd_parms;
  
  nvi_sms_bc_service_table_options_type            sms_bc_service_table_options;
  
  nvi_byte_type                                    sms_gw_bearer_pref;
  
  nvi_sms_default_template_type                    sms_gw_default_template;
  
  nvi_sms_default_template_type                    sms_cd_default_template;
  
  nvi_sms_gw_cb_service_table_type                 sms_gw_cb_service_table;
  
  nvi_word_type                                    sms_gw_cb_service_table_size;
  
  nvi_byte_type                                    sms_gw_cb_config;
  
  nvi_byte_type                                    sms_gw_cb_user_pref;
  
  nvi_stack_idx_type                               stack_idx;
  
  nvi_byte_type                                    ear_level;
  
  nvi_byte_type                                    speaker_level;
  
  nvi_byte_type                                    ringer_level;
  
  nvi_byte_type                                    beep_level;
  
  nvi_boolean_type                                 call_beep;
  
  nvi_boolean_type                                 cont_key_dtmf;
  
  nvi_boolean_type                                 cont_str_dtmf;
  
  nvi_boolean_type                                 svc_area_alert;
  
  nvi_boolean_type                                 call_fade_alert;
  
  nvi_byte_type                                    auto_power;
  
  nvi_auto_answer_type                             auto_answer;
  
  nvi_auto_redial_type                             auto_redial;
  
  nvi_boolean_type                                 auto_hyphen;
  
  nvi_byte_type                                    back_light;
  
  nvi_boolean_type                                 auto_mute;
  
  nvi_byte_type                                    lock;
  
  nvi_lock_code_type                               lock_code;
  
  nvi_boolean_type                                 auto_lock;
  
  nvi_word_type                                    call_rstrc;
  
  nvi_boolean_type                                 horn_alert;
  
  nvi_byte_type                                    init_mute;
  
  nvi_boolean_type                                 onetouch_dial;
  
  nvi_byte_type                                    alerts_lvl;
  
  nvi_byte_type                                    alerts_lvl_shadow;
  
  nvi_byte_type                                    ringer_lvl_shadow;
  
  nvi_byte_type                                    beep_lvl_shadow;
  
  nvi_byte_type                                    ear_lvl_shadow;
  
  nvi_boolean_type                                 time_show;
  
  nvi_call_cnt_type                                air_cnt;
  
  nvi_call_cnt_type                                roam_cnt;
  
  nvi_dword_type                                   life_cnt;
  
  nvi_boolean_type                                 send_pin;
  
  nvi_byte_type                                    voice_priv;
  
  nvi_dword_type                                   pwr_dwn_cnt;
  
  nvi_dial_type                                    redial;
  
  nvi_boolean_type                                 timed_pref_mode;
  
  nvi_byte_type                                    ringer_type;
  
  nvi_boolean_type                                 any_key_answer;
  
  nvi_byte_type                                    back_light_hfk;
  
  nvi_enum_type                                    key_sound;
  
  nvi_enum_type                                    sorting_method;
  
  nvi_enum_type                                    language_selection;
  
  nvi_enum_type                                    menu_format;
  
  nvi_byte_type                                    ringer_spkr_lvl;
  
  nvi_byte_type                                    beep_spkr_lvl;
  
  nvi_byte_type                                    vibrator;
  
  nvi_boolean_type                                 flip_answers;
  
  nvi_byte_type                                    voice_priv_alert;
  
  nvi_dtaco_control_type                           dtaco_control;
  
  nvi_byte_type                                    dtaco_interdigit_timeout;
  
  nvi_boolean_type                                 full_system_pref;
  
  nvi_byte_type                                    roam_ringer;
  
  nvi_boolean_type                                 srda_enabled;
  
  nvi_boolean_type                                 output_ui_keys;
  
  nvi_boolean_type                                 auto_volume_enabled;
  
  nvi_roam_msg_type                                roam_msg;
  
  nvi_byte_type                                    otksl_flag;
  
  nvi_int2_type                                    btf_adjust;
  
  nvi_boolean_type                                 full_pref_mode;
  
  nvi_enum_type                                    time_fmt_selection;
  
  nvi_ruim_chv_type                                ruim_chv_1;
  
  nvi_ruim_chv_type                                ruim_chv_2;
  
  nvi_byte_type                                    gps1_capabilities;
  
  nvi_dword_type                                   gps1_pde_address;
  
  nvi_boolean_type                                 gps1_allowed;
  
  nvi_enum_type                                    gps1_pde_transport;
  
  nvi_enum_type                                    gps1_mobile_calc;
  
  nvi_dword_type                                   gps1_pde_port;
  
  nvi_int16_type                                   gps1_lo_cal;
  
  nvi_int16_type                                   gps1_ant_off_db;
  
  nvi_int16_type                                   gps1_pcs_rf_delay;
  
  nvi_byte_type                                    tty;
  
  nvi_byte_type                                    mm_sdac_lvl;
  
  nvi_byte_type                                    beep_sdac_lvl;
  
  nvi_byte_type                                    sdac_lvl;
  
  nvi_byte_type                                    mm_lvl;
  
  nvi_byte_type                                    mm_lvl_shadow;
  
  nvi_byte_type                                    mm_speaker_lvl;
  
  nvi_byte_type                                    mm_play_mode;
  
  nvi_byte_type                                    mm_repeat_mode;
  
  nvi_mm_ringer_file_type                          mm_ringer_file;
  
  nvi_byte_type                                    mm_storage_device;
  
  nvi_ruim_sms_status_type                         ruim_sms_status;
  
  nvi_int16_type                                   gps1_gps_rf_delay;
  
  nvi_int16_type                                   gps1_cdma_rf_delay;
  
  nvi_dword_type                                   pcs_enc_btf;
  
  nvi_dword_type                                   cdma_enc_btf;
  
  nvi_bd_addr_type                                 bd_addr;
  
  nvi_boolean_type                                 sp_ecc_enabled;
  
  nvi_ecc_list_type                                ecc_list;
  
  nvi_uint32_type                                  bt_lpos_lat;
  
  nvi_uint32_type                                  bt_lpos_long;
  
  nvi_plmn_id_info_type                            pref_plmn;
  
  nvi_sys_struct_fct_file_name_type                sys_struct_fct_file_name;
  
  nvi_uint32_type                                  sys_struct_fct_file_xsum;
  
  nvi_sys_custom_ini_file_name_type                sys_custom_ini_file_name;
  
  nvi_uint32_type                                  sys_custom_ini_file_xsum;
  
  nvi_int16_type                                   sys_std_map_file_ver;
  
  nvi_uint32_type                                  sys_std_map_file_xsum;
  
  nvi_uint16_type                                  sys_spc_delta_file_ver;
  
  nvi_uint32_type                                  sys_spc_delta_file_xsum;
  
  nvi_byte_type                                    imsi_index;
  
  nvi_byte_type                                    gps1_privacy;
  
  nvi_byte_type                                    gps1_net_access;
  
  nvi_boolean_type                                 gps1_cellbased_sms;
  
  nvi_word_type                                    gps1_teleservice_id;
  
  nvi_byte_type                                    gps1_net_dbm_size;
  
  nvi_acq_order_pref_type                          acq_order_pref;
  
  nvi_net_sel_mode_pref_type                       net_sel_mode_pref;
  
  nvi_srv_domain_pref_type                         service_domain_pref;
  
  nvi_equivalent_plmn_list_type                    equivalent_plmn_list;
  
  nvi_enum_type                                    rtre_config;
  
  nvi_enum_type                                    uim_first_inst_class;
  
  nvi_err_fatal_options_type                       err_fatal_options;
  
  nvi_enum_type                                    uim_pref_protocol;
  
  nvi_non_compliance_comment_type                  non_compliance_comment;
  
  nvi_df_type                                      df;
  
  nvi_enum_type                                    uim_cdma_pref_slot;
  
  nvi_enum_type                                    uim_gsm_pref_slot;
  
  nvi_word_type                                    cdma_rx_diversity_ctrl;
  
  nvi_boolean_type                                 mdsp_mem_dump_enabled;
  
  nvi_rplmnact_type                                rplmnact;
  
  nvi_byte_type                                    ue_rat_capability;
  
  nvi_byte_type                                    gsm_ue_op_class;
  
  nvi_byte_type                                    umts_ue_op_class;
  
  nvi_byte_type                                    msrac_sms_value;
  
  nvi_byte_type                                    msrac_sm_value;
  
  nvi_byte_type                                    gsm_a5_algorithms_supported;
  
  nvi_ue_imei_type                                 ue_imei;
  
  nvi_acq_db_type                                  acq_db;
  
  nvi_acq_list1_type                               acq_list_1;
  
  nvi_acq_list1_type                               acq_list_2;
  
  nvi_acq_list2_type                               acq_list_3;
  
  nvi_acq_list2_type                               acq_list_4;
  
  nvi_boolean_type                                 rrc_integrity_enabled;
  
  nvi_boolean_type                                 rrc_ciphering_enabled;
  
  nvi_boolean_type                                 rrc_fake_security_enabled;
  
  nvi_gsm_cal_arfcn_type                           gsm_cal_arfcn;
  
  nvi_dcs_cal_arfcn_type                           dcs_cal_arfcn;
  
  nvi_gsm_rx_gain_range_1_freq_comp_type           gsm_rx_gain_range_1_freq_comp;
  
  nvi_gsm_rx_gain_range_2_freq_comp_type           gsm_rx_gain_range_2_freq_comp;
  
  nvi_gsm_rx_gain_range_3_freq_comp_type           gsm_rx_gain_range_3_freq_comp;
  
  nvi_gsm_rx_gain_range_4_freq_comp_type           gsm_rx_gain_range_4_freq_comp;
  
  nvi_dcs_rx_gain_range_1_freq_comp_type           dcs_rx_gain_range_1_freq_comp;
  
  nvi_dcs_rx_gain_range_2_freq_comp_type           dcs_rx_gain_range_2_freq_comp;
  
  nvi_dcs_rx_gain_range_3_freq_comp_type           dcs_rx_gain_range_3_freq_comp;
  
  nvi_dcs_rx_gain_range_4_freq_comp_type           dcs_rx_gain_range_4_freq_comp;
  
  nvi_uint16_type                                  gsm_trk_lo_adj_pdm_init_val;
  
  nvi_uint16_type                                  gsm_trk_lo_adj_pdm_gain_slope;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_00;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_01;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_02;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_03;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_04;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_05;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_06;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_07;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_08;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_09;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_10;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_11;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_12;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_13;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_up_index_14;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_00;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_01;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_02;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_03;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_04;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_05;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_06;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_07;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_08;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_09;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_10;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_11;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_12;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_13;
  
  nvi_tx_burst_ramp_index_type                     gsm_tx_burst_ramp_down_index_14;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_00;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_01;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_02;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_03;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_04;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_05;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_06;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_07;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_08;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_09;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_10;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_11;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_12;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_13;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_14;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_up_index_15;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_00;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_01;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_02;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_03;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_04;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_05;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_06;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_07;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_08;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_09;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_10;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_11;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_12;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_13;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_14;
  
  nvi_tx_burst_ramp_index_type                     dcs_tx_burst_ramp_down_index_15;
  
  nvi_gsm_pa_gain_slope_type                       gsm_pa_gain_slope;
  
  nvi_dcs_pa_gain_slope_type                       dcs_pa_gain_slope;
  
  nvi_gsm_tx_freq_comp_type                        gsm_tx_freq_comp;
  
  nvi_dcs_tx_freq_comp_type                        dcs_tx_freq_comp;
  
  nvi_byte_type                                    gsm_vbatt_hi_pa_comp;
  
  nvi_byte_type                                    gsm_vbatt_lo_pa_comp;
  
  nvi_byte_type                                    dcs_vbatt_hi_pa_comp;
  
  nvi_byte_type                                    dcs_vbatt_lo_pa_comp;
  
  nvi_word_type                                    vbatt_3200_mv_adc;
  
  nvi_word_type                                    vbatt_3700_mv_adc;
  
  nvi_word_type                                    vbatt_4200_mv_adc;
  
  nvi_word_type                                    gsm_precharge;
  
  nvi_word_type                                    dcs_precharge;
  
  nvi_word_type                                    gsm_precharge_dur;
  
  nvi_word_type                                    dcs_precharge_dur;
  
  nvi_int8_type                                    gsm_pa_start_time_offset;
  
  nvi_int8_type                                    gsm_pa_stop_time_offset;
  
  nvi_int8_type                                    dcs_pa_start_time_offset;
  
  nvi_int8_type                                    dcs_pa_stop_time_offset;
  
  nvi_gsm_locigprs_type                            gsm_locigprs;
  
  nvi_gsm_kcgprs_type                              gsm_kcgprs;
  
  nvi_byte_type                                    multislot_class;
  
  nvi_byte_type                                    non_drx_timer;
  
  nvi_byte_type                                    split_paging_cycle;
  
  nvi_gainrange_switchpoint_type                   gsm_gainrange_switchpoints;
  
  nvi_gainrange_switchpoint_type                   dcs_gainrange_switchpoints;
  
  nvi_gsmumts_imsi_type                            gsmumts_imsi;
  
  nvi_boolean_type                                 gprs_anite_gcf;
  
  nvi_byte_type                                    force_ue_sgsnr_r99;
  
  nvi_byte_type                                    force_ue_mscr_r99;
  
  nvi_gsm_pa_temp_comp_index_14_type               gsm_pa_temp_comp_index_14;
  
  nvi_dcs_pa_temp_comp_index_15_type               dcs_pa_temp_comp_index_15;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_00;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_01;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_02;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_03;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_04;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_05;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_06;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_07;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_08;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_09;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_10;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_11;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_12;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_index_13;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_00;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_01;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_02;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_03;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_04;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_05;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_06;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_07;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_08;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_09;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_10;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_11;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_12;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_13;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_index_14;
  
  nvi_boolean_type                                 gsm_amr_call_config;
  
  nvi_pa_temp_comp_index_type                      gsm_pa_temp_comp_int8_index_14;
  
  nvi_pa_temp_comp_index_type                      dcs_pa_temp_comp_int8_index_15;
  
  nvi_boolean_type                                 amr;
  
  nvi_rr_stored_last_best_arfcns_band_type         rr_stored_last_best_arfcns_band;
  
  nvi_int1_type                                    im_level3;
  
  nvi_int1_type                                    im_level4;
  
  nvi_int1_type                                    agc_value_3_min;
  
  nvi_int1_type                                    agc_value_4_min;
  
  nvi_word_type                                    lna_bypass_timer_0;
  
  nvi_word_type                                    lna_bypass_timer_1;
  
  nvi_word_type                                    lna_bypass_timer_2;
  
  nvi_word_type                                    lna_bypass_timer_3;
  
  nvi_word_type                                    lna_non_bypass_timer_0;
  
  nvi_word_type                                    lna_non_bypass_timer_1;
  
  nvi_word_type                                    lna_non_bypass_timer_2;
  
  nvi_word_type                                    lna_non_bypass_timer_3;
  
  nvi_int2_type                                    tx_gain_atten_limit;
  
  nvi_int1_type                                    cdma_lna_3_fall;
  
  nvi_int2_type                                    cdma_lna_3_offset;
  
  nvi_int1_type                                    cdma_lna_3_rise;
  
  nvi_cdma_lna_3_offset_vs_freq_type               cdma_lna_3_offset_vs_freq;
  
  nvi_int1_type                                    pcs_lna_3_fall;
  
  nvi_int2_type                                    pcs_lna_3_offset;
  
  nvi_int1_type                                    pcs_lna_3_rise;
  
  nvi_pcs_lna_3_offset_vs_freq_type                pcs_lna_3_offset_vs_freq;
  
  nvi_int1_type                                    cdma_lna_4_fall;
  
  nvi_int2_type                                    cdma_lna_4_offset;
  
  nvi_int1_type                                    cdma_lna_4_rise;
  
  nvi_cdma_lna_4_offset_vs_freq_type               cdma_lna_4_offset_vs_freq;
  
  nvi_int1_type                                    pcs_lna_4_fall;
  
  nvi_int2_type                                    pcs_lna_4_offset;
  
  nvi_int1_type                                    pcs_lna_4_rise;
  
  nvi_pcs_lna_4_offset_vs_freq_type                pcs_lna_4_offset_vs_freq;
  
  nvi_int1_type                                    dfm_lna_fall;
  
  nvi_int2_type                                    dfm_lna_offset;
  
  nvi_int1_type                                    dfm_lna_rise;
  
  nvi_dfm_lna_offset_vs_freq_type                  dfm_lna_offset_vs_freq;
  
  nvi_word_type                                    dfm_lna_bypass_timer;
  
  nvi_word_type                                    dfm_lna_nonbypass_timer;
  
  nvi_byte_type                                    dfm_agc_acc_min_1;
  
  nvi_byte_type                                    dfm_agc_im_gain;
  
  nvi_byte_type                                    dfm_agc_dc_gain;
  
  nvi_int1_type                                    dfm_im_level1;
  
  nvi_byte_type                                    gps_fg_trk_offset_scaler;
  
  nvi_byte_type                                    digital_fg_trk_offset_scaler;
  
  nvi_byte_type                                    fm_fg_trk_offset_scaler;
  
  nvi_word_type                                    dfm_lna_s0_phase_offset;
  
  nvi_word_type                                    dfm_lna_s1_phase_offset;
  
  nvi_dword_type                                   cdma_rxf_cg_ioffset;
  
  nvi_dword_type                                   pcs_rxf_cg_ioffset;
  
  nvi_dword_type                                   fm_rxf_cg_ioffset;
  
  nvi_dword_type                                   gps_rxf_cg_ioffset;
  
  nvi_dword_type                                   cdma_rxf_cg_qoffset;
  
  nvi_dword_type                                   pcs_rxf_cg_qoffset;
  
  nvi_dword_type                                   fm_rxf_cg_qoffset;
  
  nvi_dword_type                                   gps_rxf_cg_qoffset;
  
  nvi_dword_type                                   cdma_rxf_fg_ioffset;
  
  nvi_dword_type                                   pcs_rxf_fg_ioffset;
  
  nvi_dword_type                                   fm_rxf_fg_ioffset;
  
  nvi_dword_type                                   gps_rxf_fg_ioffset;
  
  nvi_dword_type                                   cdma_rxf_fg_qoffset;
  
  nvi_dword_type                                   pcs_rxf_fg_qoffset;
  
  nvi_dword_type                                   fm_rxf_fg_qoffset;
  
  nvi_dword_type                                   gps_rxf_fg_qoffset;
  
  nvi_dword_type                                   cdma_dacc_est_ioffset;
  
  nvi_dword_type                                   pcs_dacc_est_ioffset;
  
  nvi_dword_type                                   fm_dacc_est_ioffset;
  
  nvi_dword_type                                   gps_dacc_est_ioffset;
  
  nvi_dword_type                                   cdma_dacc_est_qoffset;
  
  nvi_dword_type                                   pcs_dacc_est_qoffset;
  
  nvi_dword_type                                   fm_dacc_est_qoffset;
  
  nvi_dword_type                                   gps_dacc_est_qoffset;
  
  nvi_byte_type                                    cdma_dacc_iaccum0;
  
  nvi_byte_type                                    pcs_dacc_iaccum0;
  
  nvi_byte_type                                    fm_dacc_iaccum0;
  
  nvi_byte_type                                    gps_dacc_iaccum0;
  
  nvi_byte_type                                    cdma_dacc_iaccum1;
  
  nvi_byte_type                                    pcs_dacc_iaccum1;
  
  nvi_byte_type                                    fm_dacc_iaccum1;
  
  nvi_byte_type                                    gps_dacc_iaccum1;
  
  nvi_byte_type                                    cdma_dacc_iaccum2;
  
  nvi_byte_type                                    pcs_dacc_iaccum2;
  
  nvi_byte_type                                    fm_dacc_iaccum2;
  
  nvi_byte_type                                    gps_dacc_iaccum2;
  
  nvi_byte_type                                    cdma_dacc_iaccum3;
  
  nvi_byte_type                                    pcs_dacc_iaccum3;
  
  nvi_byte_type                                    fm_dacc_iaccum3;
  
  nvi_byte_type                                    gps_dacc_iaccum3;
  
  nvi_byte_type                                    cdma_dacc_iaccum4;
  
  nvi_byte_type                                    pcs_dacc_iaccum4;
  
  nvi_byte_type                                    fm_dacc_iaccum4;
  
  nvi_byte_type                                    gps_dacc_iaccum4;
  
  nvi_byte_type                                    cdma_dacc_qaccum0;
  
  nvi_byte_type                                    pcs_dacc_qaccum0;
  
  nvi_byte_type                                    fm_dacc_qaccum0;
  
  nvi_byte_type                                    gps_dacc_qaccum0;
  
  nvi_byte_type                                    cdma_dacc_qaccum1;
  
  nvi_byte_type                                    pcs_dacc_qaccum1;
  
  nvi_byte_type                                    fm_dacc_qaccum1;
  
  nvi_byte_type                                    gps_dacc_qaccum1;
  
  nvi_byte_type                                    cdma_dacc_qaccum2;
  
  nvi_byte_type                                    pcs_dacc_qaccum2;
  
  nvi_byte_type                                    fm_dacc_qaccum2;
  
  nvi_byte_type                                    gps_dacc_qaccum2;
  
  nvi_byte_type                                    cdma_dacc_qaccum3;
  
  nvi_byte_type                                    pcs_dacc_qaccum3;
  
  nvi_byte_type                                    fm_dacc_qaccum3;
  
  nvi_byte_type                                    gps_dacc_qaccum3;
  
  nvi_byte_type                                    cdma_dacc_qaccum4;
  
  nvi_byte_type                                    pcs_dacc_qaccum4;
  
  nvi_byte_type                                    fm_dacc_qaccum4;
  
  nvi_byte_type                                    gps_dacc_qaccum4;
  
  nvi_byte_type                                    cdma_dacc_gain_mult;
  
  nvi_byte_type                                    pcs_dacc_gain_mult;
  
  nvi_byte_type                                    fm_dacc_gain_mult;
  
  nvi_byte_type                                    gps_dacc_gain_mult;
  
  nvi_byte_type                                    cdma_im2_i_value;
  
  nvi_byte_type                                    pcs_im2_i_value;
  
  nvi_byte_type                                    cdma_im2_q_value;
  
  nvi_byte_type                                    pcs_im2_q_value;
  
  nvi_byte_type                                    rtc_time_adjust;
  
  nvi_int2_type                                    fm_vga_gain_offset;
  
  nvi_int2_type                                    cdma_vga_gain_offset;
  
  nvi_int2_type                                    pcs_vga_gain_offset;
  
  nvi_fm_vga_gain_offset_vs_freq_type              fm_vga_gain_offset_vs_freq;
  
  nvi_cdma_vga_gain_offset_vs_freq_type            cdma_vga_gain_offset_vs_freq;
  
  nvi_pcs_vga_gain_offset_vs_freq_type             pcs_vga_gain_offset_vs_freq;
  
  nvi_fm_vga_gain_offset_vs_temp_type              fm_vga_gain_offset_vs_temp;
  
  nvi_cdma_vga_gain_offset_vs_temp_type            cdma_vga_gain_offset_vs_temp;
  
  nvi_pcs_vga_gain_offset_vs_temp_type             pcs_vga_gain_offset_vs_temp;
  
  nvi_int32_type                                   fm_mis_comp_a_offset;
  
  nvi_int32_type                                   digital_mis_comp_a_offset;
  
  nvi_int32_type                                   gps_mis_comp_a_offset;
  
  nvi_int32_type                                   fm_mis_comp_b_offset;
  
  nvi_int32_type                                   digital_mis_comp_b_offset;
  
  nvi_int32_type                                   gps_mis_comp_b_offset;
  
  nvi_int1_type                                    pcs_im_level3;
  
  nvi_int1_type                                    pcs_im_level4;
  
  nvi_int1_type                                    pcs_agc_value_3_min;
  
  nvi_int1_type                                    pcs_agc_value_4_min;
  
  nvi_byte_type                                    digital_pll_lock_timer;
  
  nvi_int2_type                                    cdma_tx_gain_atten_limit;
  
  nvi_int2_type                                    pcs_tx_gain_atten_limit;
  
  nvi_int2_type                                    amps_tx_gain_atten_limit;
  
  nvi_int2_type                                    gps_tx_gain_atten_limit;
  
  nvi_byte_type                                    cdma_im2_transconductor_value;
  
  nvi_byte_type                                    pcs_im2_transconductor_value;
  
  nvi_byte_type                                    fm_pa_mac_high;
  
  nvi_int2_type                                    cdma_dynamic_range;
  
  nvi_int2_type                                    cdma_min_rx_rssi;
  
  nvi_word_type                                    tx_warmup;
  
  nvi_cdma_p1_rise_fall_off_type                   cdma_p1_rise_fall_off;
  
  nvi_pcs_p1_rise_fall_off_type                    pcs_p1_rise_fall_off;
  
  nvi_word_type                                    pcs_lna_bypass_timer_0;
  
  nvi_byte_type                                    gps_dopp_sdev;
  
  nvi_byte_type                                    gps_rf_config;
  
  nvi_uint32_type                                  aagps_max_osc_unc;
  
  nvi_uint32_type                                  aagps_max_osc_unc_rate;
  
  nvi_uint32_type                                  aagps_processing_losses;
  
  nvi_uint32_type                                  aagps_max_platform_velocity;
  
  nvi_uint32_type                                  aagps_max_platform_accl;
  
  nvi_uint32_type                                  aagps_default_qos_time;
  
  nvi_uint32_type                                  aagps_rapid_fix_report_max_latency;
  
  nvi_uint32_type                                  aagps_positioning_modes_supported;
  
  nvi_uint32_type                                  aagps_default_ref_time_unc;
  
  nvi_uint32_type                                  aagps_default_ref_position_unc;
  
  nvi_uint32_type                                  aagps_app_tracking_gpsidle_thsld;
  
  nvi_byte_type                                    aagps_gps_lock_control;
  
  nvi_aagps_default_url_type                       aagps_default_url;
  
  nvi_aagps_default_ip_address_type                aagps_default_ip_address;
  
  nvi_appx5_pref_type                              appx5_pref;
  
  nvi_byte_type                                    aagps_transport_type;
  
  nvi_byte_type                                    aagps_2g_mo_lrsupport;
  
  nvi_byte_type                                    aagps_emergency_services_spprt;
  
  nvi_byte_type                                    aagps_protocol_select;
  
  nvi_uint32_type                                  aagps_app_trkg_periodic_req_dly_margin;
  
  nvi_uint32_type                                  aagps_default_qos_unc;
  
  nvi_uint32_type                                  aagps_app_tracking_gpson_thsld;
  
  nvi_byte_type                                    aagps_mt_lrsupport;
  
  nvi_wcdma_rx_lin_type                            wcdma_rx_lin;
  
  nvi_wcdma_rx_comp_vs_freq_type                   wcdma_rx_comp_vs_freq;
  
  nvi_wcdma_rx_lin_vs_temp_type                    wcdma_rx_lin_vs_temp;
  
  nvi_wcdma_rx_slp_vs_temp_type                    wcdma_rx_slp_vs_temp;
  
  nvi_uint8_type                                   wcdma_lna_range_pol;
  
  nvi_int16_type                                   wcdma_lna_range_rise;
  
  nvi_int16_type                                   wcdma_lna_range_fall;
  
  nvi_int16_type                                   wcdma_im_level;
  
  nvi_uint8_type                                   wcdma_nonbypass_timer;
  
  nvi_uint16_type                                  wcdma_bypass_timer;
  
  nvi_int16_type                                   wcdma_lna_range_offset;
  
  nvi_wcdma_lna_offset_vs_freq_type                wcdma_lna_offset_vs_freq;
  
  nvi_int16_type                                   wcdma_rx_agc_min;
  
  nvi_int16_type                                   wcdma_rx_agc_max;
  
  nvi_uint8_type                                   wcdma_agc_phase_offset;
  
  nvi_wcdma_tx_lin_master_0_type                   wcdma_tx_lin_master_0;
  
  nvi_wcdma_tx_lin_master_1_type                   wcdma_tx_lin_master_1;
  
  nvi_wcdma_tx_comp_vs_freq_0_type                 wcdma_tx_comp_vs_freq_0;
  
  nvi_wcdma_tx_comp_vs_freq_1_type                 wcdma_tx_comp_vs_freq_1;
  
  nvi_wcdma_tx_lin_vs_temp_0_type                  wcdma_tx_lin_vs_temp_0;
  
  nvi_wcdma_tx_lin_vs_temp_1_type                  wcdma_tx_lin_vs_temp_1;
  
  nvi_wcdma_tx_slp_vs_temp_0_type                  wcdma_tx_slp_vs_temp_0;
  
  nvi_wcdma_tx_slp_vs_temp_1_type                  wcdma_tx_slp_vs_temp_1;
  
  nvi_uint16_type                                  wcdma_r1_rise;
  
  nvi_uint16_type                                  wcdma_r1_fall;
  
  nvi_wcdma_tx_lim_vs_temp_type                    wcdma_tx_lim_vs_temp;
  
  nvi_wcdma_tx_lim_vs_freq_type                    wcdma_tx_lim_vs_freq;
  
  nvi_uint8_type                                   wcdma_adj_factor;
  
  nvi_wcdma_exp_hdet_vs_agc_type                   wcdma_exp_hdet_vs_agc;
  
  nvi_uint8_type                                   wcdma_hdet_off;
  
  nvi_uint8_type                                   wcdma_hdet_spn;
  
  nvi_uint32_type                                  wcdma_enc_btf;
  
  nvi_int16_type                                   wcdma_vga_gain_offset;
  
  nvi_wcdma_vga_gain_offset_vs_freq_type           wcdma_vga_gain_offset_vs_freq;
  
  nvi_wcdma_vga_gain_offset_vs_temp_type           wcdma_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   wcdma_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_im_level_2;
  
  nvi_int16_type                                   wcdma_im_level_3;
  
  nvi_int16_type                                   wcdma_lna_range_offset_2;
  
  nvi_int16_type                                   wcdma_lna_range_offset_3;
  
  nvi_wcdma_lna_offset_vs_freq_2_type              wcdma_lna_offset_vs_freq_2;
  
  nvi_wcdma_lna_offset_vs_freq_3_type              wcdma_lna_offset_vs_freq_3;
  
  nvi_uint8_type                                   wcdma_im2_i_value;
  
  nvi_uint8_type                                   wcdma_im2_q_value;
  
  nvi_uint8_type                                   wcdma_im2_transconductor_value;
  
  nvi_int16_type                                   wcdma_rx_agc_min_2;
  
  nvi_int16_type                                   wcdma_rx_agc_min_3;
  
  nvi_wcdma_vbatt_type                             wcdma_vbatt;
  
  nvi_wcdma_therm_type                             wcdma_therm;
  
  nvi_int8_type                                    wcdma_max_tx_power;
  
  nvi_int16_type                                   wcdma_out_of_service_thresh;
  
  nvi_trk_lo_adj_vs_temp_type                      trk_lo_adj_vs_temp;
  
  nvi_rot_freq_vs_temp_type                        rot_freq_vs_temp;
  
  nvi_uint16_type                                  wcdma_agc_pa_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_agc_pa_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_agc_tx_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_agc_tx_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_agc_update_tx_agc_time;
  
  nvi_uint16_type                                  trk_lo_adj_default;
  
  nvi_uint16_type                                  trk_lo_adj_slope_default;
  
  nvi_uint16_type                                  wcdma_pa_gain_up_time;
  
  nvi_uint16_type                                  wcdma_pa_gain_down_time;
  
  nvi_uint8_type                                   rfr_bb_filter;
  
  nvi_uint8_type                                   rfr_iq_line_resistor;
  
  nvi_rfr_vco_coarse_tuning_1900_type              rfr_vco_coarse_tuning_1900;
  
  nvi_uint16_type                                  wcdma_tx_rot_angle_pa_state_00;
  
  nvi_uint16_type                                  wcdma_tx_rot_angle_pa_state_01;
  
  nvi_uint16_type                                  wcdma_tx_rot_angle_pa_state_10;
  
  nvi_uint16_type                                  wcdma_tx_rot_angle_pa_state_11;
  
  nvi_boolean_type                                 wcdma_spike_mitigation_enabled;
  
  nvi_int16_type                                   pa_compensate_up;
  
  nvi_int16_type                                   pa_compensate_down;
  
  nvi_int2_type                                    c1_cdma_lna_offset;
  
  nvi_c1_cdma_lna_offset_vs_freq_type              c1_cdma_lna_offset_vs_freq;
  
  nvi_int2_type                                    c1_pcs_lna_offset;
  
  nvi_c1_pcs_lna_offset_vs_freq_type               c1_pcs_lna_offset_vs_freq;
  
  nvi_int2_type                                    c1_cdma_lna_2_offset;
  
  nvi_c1_cdma_lna_2_offset_vs_freq_type            c1_cdma_lna_2_offset_vs_freq;
  
  nvi_int2_type                                    c1_pcs_lna_2_offset;
  
  nvi_c1_pcs_lna_2_offset_vs_freq_type             c1_pcs_lna_2_offset_vs_freq;
  
  nvi_int2_type                                    c1_cdma_lna_3_offset;
  
  nvi_c1_cdma_lna_3_offset_vs_freq_type            c1_cdma_lna_3_offset_vs_freq;
  
  nvi_int2_type                                    c1_pcs_lna_3_offset;
  
  nvi_c1_pcs_lna_3_offset_vs_freq_type             c1_pcs_lna_3_offset_vs_freq;
  
  nvi_int2_type                                    c1_cdma_lna_4_offset;
  
  nvi_c1_cdma_lna_4_offset_vs_freq_type            c1_cdma_lna_4_offset_vs_freq;
  
  nvi_int2_type                                    c1_pcs_lna_4_offset;
  
  nvi_c1_pcs_lna_4_offset_vs_freq_type             c1_pcs_lna_4_offset_vs_freq;
  
  nvi_c1_cdma_p1_rise_fall_offset_type             c1_cdma_p1_rise_fall_offset;
  
  nvi_c1_pcs_p1_rise_fall_offset_type              c1_pcs_p1_rise_fall_offset;
  
  nvi_minmax_type                                  c1_rx_agc_value_1_minmax;
  
  nvi_minmax_type                                  c1_rx_agc_value_2_minmax;
  
  nvi_minmax_type                                  c1_rx_agc_value_3_minmax;
  
  nvi_minmax_type                                  c1_rx_agc_value_4_minmax;
  
  nvi_byte_type                                    c0_rx_agc_vref_val;
  
  nvi_byte_type                                    c1_rx_agc_vref_val;
  
  nvi_byte_type                                    c0_grp_delay_adj;
  
  nvi_byte_type                                    c1_grp_delay_adj;
  
  nvi_int2_type                                    c1_cdma_vga_gain_offset;
  
  nvi_c1_cdma_vga_gain_offset_vs_freq_type         c1_cdma_vga_gain_offset_vs_freq;
  
  nvi_c1_cdma_vga_gain_offset_vs_temp_type         c1_cdma_vga_gain_offset_vs_temp;
  
  nvi_int2_type                                    c1_pcs_vga_gain_offset;
  
  nvi_c1_pcs_vga_gain_offset_vs_freq_type          c1_pcs_vga_gain_offset_vs_freq;
  
  nvi_c1_pcs_vga_gain_offset_vs_temp_type          c1_pcs_vga_gain_offset_vs_temp;
  
  nvi_int4_type                                    c1_digital_mis_comp_a_offset;
  
  nvi_int4_type                                    c1_gps_mis_comp_a_offset;
  
  nvi_int4_type                                    c1_digital_mis_comp_b_offset;
  
  nvi_int4_type                                    c1_gps_mis_comp_b_offset;
  
  nvi_byte_type                                    c1_cdma_dacc_iaccum0;
  
  nvi_byte_type                                    c1_pcs_dacc_iaccum0;
  
  nvi_byte_type                                    c1_gps_dacc_iaccum0;
  
  nvi_byte_type                                    c1_cdma_dacc_iaccum1;
  
  nvi_byte_type                                    c1_pcs_dacc_iaccum1;
  
  nvi_byte_type                                    c1_gps_dacc_iaccum1;
  
  nvi_byte_type                                    c1_cdma_dacc_iaccum2;
  
  nvi_byte_type                                    c1_pcs_dacc_iaccum2;
  
  nvi_byte_type                                    c1_gps_dacc_iaccum2;
  
  nvi_byte_type                                    c1_cdma_dacc_iaccum3;
  
  nvi_byte_type                                    c1_pcs_dacc_iaccum3;
  
  nvi_byte_type                                    c1_gps_dacc_iaccum3;
  
  nvi_byte_type                                    c1_cdma_dacc_iaccum4;
  
  nvi_byte_type                                    c1_pcs_dacc_iaccum4;
  
  nvi_byte_type                                    c1_gps_dacc_iaccum4;
  
  nvi_byte_type                                    c1_cdma_dacc_qaccum0;
  
  nvi_byte_type                                    c1_pcs_dacc_qaccum0;
  
  nvi_byte_type                                    c1_gps_dacc_qaccum0;
  
  nvi_byte_type                                    c1_cdma_dacc_qaccum1;
  
  nvi_byte_type                                    c1_pcs_dacc_qaccum1;
  
  nvi_byte_type                                    c1_gps_dacc_qaccum1;
  
  nvi_byte_type                                    c1_cdma_dacc_qaccum2;
  
  nvi_byte_type                                    c1_pcs_dacc_qaccum2;
  
  nvi_byte_type                                    c1_gps_dacc_qaccum2;
  
  nvi_byte_type                                    c1_cdma_dacc_qaccum3;
  
  nvi_byte_type                                    c1_pcs_dacc_qaccum3;
  
  nvi_byte_type                                    c1_gps_dacc_qaccum3;
  
  nvi_byte_type                                    c1_cdma_dacc_qaccum4;
  
  nvi_byte_type                                    c1_pcs_dacc_qaccum4;
  
  nvi_byte_type                                    c1_gps_dacc_qaccum4;
  
  nvi_byte_type                                    c1_cdma_im2_q_value;
  
  nvi_byte_type                                    c1_pcs_im2_q_value;
  
  nvi_byte_type                                    c1_cdma_im2_i_value;
  
  nvi_byte_type                                    c1_pcs_im2_i_value;
  
  nvi_byte_type                                    c1_cdma_im2_transconductor_value;
  
  nvi_byte_type                                    c1_pcs_im2_transconductor_value;
  
  nvi_c1_vco_coarse_tune_table_type                c1_vco_coarse_tune_table;
  
  nvi_byte_type                                    c1_cdma_lna_1_rise;
  
  nvi_byte_type                                    c1_cdma_lna_2_rise;
  
  nvi_byte_type                                    c1_cdma_lna_3_rise;
  
  nvi_byte_type                                    c1_cdma_lna_4_rise;
  
  nvi_byte_type                                    c1_pcs_lna_1_rise;
  
  nvi_byte_type                                    c1_pcs_lna_2_rise;
  
  nvi_byte_type                                    c1_pcs_lna_3_rise;
  
  nvi_byte_type                                    c1_pcs_lna_4_rise;
  
  nvi_byte_type                                    c1_cdma_lna_1_fall;
  
  nvi_byte_type                                    c1_cdma_lna_2_fall;
  
  nvi_byte_type                                    c1_cdma_lna_3_fall;
  
  nvi_byte_type                                    c1_cdma_lna_4_fall;
  
  nvi_byte_type                                    c1_pcs_lna_1_fall;
  
  nvi_byte_type                                    c1_pcs_lna_2_fall;
  
  nvi_byte_type                                    c1_pcs_lna_3_fall;
  
  nvi_byte_type                                    c1_pcs_lna_4_fall;
  
  nvi_byte_type                                    c1_cdma_im_level1;
  
  nvi_byte_type                                    c1_cdma_im_level2;
  
  nvi_byte_type                                    c1_cdma_im_level3;
  
  nvi_byte_type                                    c1_cdma_im_level4;
  
  nvi_byte_type                                    c1_pcs_im_level1;
  
  nvi_byte_type                                    c1_pcs_im_level2;
  
  nvi_byte_type                                    c1_pcs_im_level3;
  
  nvi_byte_type                                    c1_pcs_im_level4;
  
  nvi_cell_1x_olta_backoff_type                    cell_1x_olta_backoff;
  
  nvi_cell_hdr_olta_backoff_type                   cell_hdr_olta_backoff;
  
  nvi_pcs_olta_backoff_type                        pcs_olta_backoff;
  
  nvi_bc6_tx_lim_vs_temp_type                      bc6_tx_lim_vs_temp;
  /* Internal bc6_rx_cal_chan items definition */
  nvi_cal_chan_type                                c0_bc6_rx_cal_chan;
  
  nvi_tx_linearizer_type                           bc6_tx_lin_master0;
  
  nvi_tx_linearizer_type                           bc6_tx_lin_master1;
  
  nvi_tx_comp_type                                 bc6_tx_comp0;
  
  nvi_tx_comp_type                                 bc6_tx_comp1;
  
  nvi_bc6_tx_lim_vs_freq_type                      bc6_tx_lim_vs_freq;
  
  nvi_bc6_exp_hdet_vs_agc_type                     bc6_exp_hdet_vs_agc;
  
  nvi_byte_type                                    bc6_hdet_off;
  
  nvi_byte_type                                    bc6_hdet_spn;
  
  nvi_byte_type                                    bc6_pa_r1_rise;
  
  nvi_byte_type                                    bc6_pa_r1_fall;
  
  nvi_byte_type                                    bc6_lna_range_pol;
  
  nvi_int1_type                                    bc6_lna_1_rise;
  
  nvi_int1_type                                    bc6_lna_1_fall;
  
  nvi_word_type                                    c0_bc6_lna_range_offset;
  
  nvi_word_type                                    c1_bc6_lna_range_offset;
  
  nvi_int1_type                                    bc6_lna_2_rise;
  
  nvi_int1_type                                    bc6_lna_2_fall;
  
  nvi_int2_type                                    bc6_lna_range_12_offset;
  
  nvi_byte_type                                    c0_bc6_im_level1;
  
  nvi_byte_type                                    c0_bc6_im_level2;
  
  nvi_byte_type                                    c0_bc6_im_level3;
  
  nvi_byte_type                                    c0_bc6_im_level4;
  
  nvi_c0_bc6_lna_1_offset_vs_freq_type             c0_bc6_lna_1_offset_vs_freq;
  
  nvi_c1_bc6_lna_1_offset_vs_freq_type             c1_bc6_lna_1_offset_vs_freq;
  
  nvi_byte_type                                    bc6_agc_phase_offset;
  
  nvi_byte_type                                    bc6_adj_factor;
  
  nvi_minmax_type                                  bc6_rx_agc_minmax;
  
  nvi_minmax_type                                  bc6_rx_agc_min_11;
  
  nvi_dword_type                                   bc6_enc_btf;
  
  nvi_int2_type                                    bc6_tx_gain_atten_limit;
  
  nvi_int1_type                                    bc6_lna_3_fall;
  
  nvi_int1_type                                    bc6_lna_3_rise;
  
  nvi_int2_type                                    bc6_lna_3_offset;
  
  nvi_c0_bc6_lna_3_offset_vs_freq_type             c0_bc6_lna_3_offset_vs_freq;
  
  nvi_c1_bc6_lna_3_offset_vs_freq_type             c1_bc6_lna_3_offset_vs_freq;
  
  nvi_int1_type                                    bc6_lna_4_fall;
  
  nvi_int1_type                                    bc6_lna_4_rise;
  
  nvi_int2_type                                    c0_bc6_lna_4_offset;
  
  nvi_int2_type                                    c1_bc6_lna_4_offset;
  
  nvi_byte_type                                    c0_bc6_im2_i_value;
  
  nvi_byte_type                                    c1_bc6_im2_i_value;
  
  nvi_byte_type                                    c0_bc6_im2_q_value;
  
  nvi_byte_type                                    c1_bc6_im2_q_value;
  
  nvi_int2_type                                    c0_bc6_vga_gain_offset;
  
  nvi_int2_type                                    c1_bc6_vga_gain_offset;
  
  nvi_c0_bc6_vga_gain_offset_vs_freq_type          c0_bc6_vga_gain_offset_vs_freq;
  
  nvi_c1_bc6_vga_gain_offset_vs_freq_type          c1_bc6_vga_gain_offset_vs_freq;
  
  nvi_c0_bc6_vga_gain_offset_vs_temp_type          c0_bc6_vga_gain_offset_vs_temp;
  
  nvi_c1_bc6_vga_gain_offset_vs_temp_type          c1_bc6_vga_gain_offset_vs_temp;
  
  nvi_bc6_p1_rise_fall_off_type                    bc6_p1_rise_fall_off;
  
  nvi_c0_bc6_lna_4_offset_vs_freq_type             c0_bc6_lna_4_offset_vs_freq;
  
  nvi_c1_bc6_lna_4_offset_vs_freq_type             c1_bc6_lna_4_offset_vs_freq;
  
  nvi_c0_bc6_p1_rise_fall_offset_type              c0_bc6_p1_rise_fall_offset;
  
  nvi_c1_bc6_p1_rise_fall_offset_type              c1_bc6_p1_rise_fall_offset;
  
  nvi_int4_type                                    c0_bc6_digital_mis_comp_a_offset;
  
  nvi_int4_type                                    c1_bc6_digital_mis_comp_a_offset;
  
  nvi_int4_type                                    c0_bc6_digital_mis_comp_b_offset;
  
  nvi_int4_type                                    c1_bc6_digital_mis_comp_b_offset;
  
  nvi_byte_type                                    c0_bc6_im2_transconductor_value;
  
  nvi_byte_type                                    c1_bc6_im2_transconductor_value;
  
  nvi_bc6_vco_coarse_tune_table_type               bc6_vco_coarse_tune_table;
  /* Coefficients for Freq comp for Tx */
  nvi_cal_chan_type                                c0_bc6_tx_cal_chan;
  
  nvi_int16_type                                   bc6_gps1_rf_delay;
  
  nvi_tx_linearizer_type                           bc6_tx_lin_master2;
  
  nvi_tx_linearizer_type                           bc6_tx_lin_master3;
  
  nvi_tx_comp_type                                 bc6_tx_comp2;
  
  nvi_tx_comp_type                                 bc6_tx_comp3;
  
  nvi_byte_type                                    bc6_pa_r2_rise;
  
  nvi_byte_type                                    bc6_pa_r2_fall;
  
  nvi_byte_type                                    bc6_pa_r3_rise;
  
  nvi_byte_type                                    bc6_pa_r3_fall;
  
  nvi_c0_bc6_lna_2_offset_vs_freq_type             c0_bc6_lna_2_offset_vs_freq;
  
  nvi_int2_type                                    c0_bc6_lna_1_offset;
  
  nvi_int2_type                                    c0_bc6_lna_2_offset;
  
  nvi_int2_type                                    c0_bc6_lna_3_offset;
  
  nvi_int1_type                                    c0_bc6_lna_1_rise;
  
  nvi_int1_type                                    c0_bc6_lna_1_fall;
  
  nvi_int1_type                                    c0_bc6_lna_2_rise;
  
  nvi_int1_type                                    c0_bc6_lna_2_fall;
  
  nvi_int1_type                                    c0_bc6_lna_3_rise;
  
  nvi_int1_type                                    c0_bc6_lna_3_fall;
  
  nvi_int1_type                                    c0_bc6_lna_4_rise;
  
  nvi_int1_type                                    c0_bc6_lna_4_fall;
  /* Coefficients for Freq comp for Tx */
  nvi_cal_chan_type                                c1_bc6_tx_cal_chan;
  /* Internal bc6_rx_cal_chan items definition */
  nvi_cal_chan_type                                c1_bc6_rx_cal_chan;
  
  nvi_c1_bc6_lna_2_offset_vs_freq_type             c1_bc6_lna_2_offset_vs_freq;
  
  nvi_int2_type                                    c1_bc6_lna_1_offset;
  
  nvi_int2_type                                    c1_bc6_lna_2_offset;
  
  nvi_int2_type                                    c1_bc6_lna_3_offset;
  
  nvi_int1_type                                    c1_bc6_lna_1_rise;
  
  nvi_int1_type                                    c1_bc6_lna_1_fall;
  
  nvi_int1_type                                    c1_bc6_lna_2_rise;
  
  nvi_int1_type                                    c1_bc6_lna_2_fall;
  
  nvi_int1_type                                    c1_bc6_lna_3_rise;
  
  nvi_int1_type                                    c1_bc6_lna_3_fall;
  
  nvi_int1_type                                    c1_bc6_lna_4_rise;
  
  nvi_int1_type                                    c1_bc6_lna_4_fall;
  
  nvi_byte_type                                    c1_bc6_im_level1;
  
  nvi_byte_type                                    c1_bc6_im_level2;
  
  nvi_byte_type                                    c1_bc6_im_level3;
  
  nvi_byte_type                                    c1_bc6_im_level4;
  
  nvi_int16_type                                   bc5_gps1_rf_delay;
  
  nvi_word_type                                    bc11_gps1_rf_delay;
  
  nvi_word_type                                    bcx_block_gps1_rf_delay;
  
  nvi_bc5_tx_lim_vs_temp_type                      bc5_tx_lim_vs_temp;
  
  nvi_bc11_tx_lim_vs_temp_type                     bc11_tx_lim_vs_temp;
  
  nvi_bcx_block_tx_lim_vs_temp_type                bcx_block_tx_lim_vs_temp;
  
  nvi_tx_linearizer_type                           bc5_tx_lin_master0;
  
  nvi_tx_linearizer_type                           bc11_tx_lin_master0;
  
  nvi_tx_linearizer_type                           bcx_block_tx_lin_master0;
  
  nvi_tx_linearizer_type                           bc5_tx_lin_master1;
  
  nvi_tx_linearizer_type                           bc11_tx_lin_master1;
  
  nvi_tx_linearizer_type                           bcx_block_tx_lin_master1;
  
  nvi_tx_linearizer_type                           bc5_tx_lin_master2;
  
  nvi_tx_linearizer_type                           bc11_tx_lin_master2;
  
  nvi_tx_linearizer_type                           bcx_block_tx_lin_master2;
  
  nvi_tx_linearizer_type                           bc5_tx_lin_master3;
  
  nvi_tx_linearizer_type                           bc11_tx_lin_master3;
  
  nvi_tx_linearizer_type                           bcx_block_tx_lin_master3;
  
  nvi_tx_comp_type                                 bc5_tx_comp0;
  
  nvi_tx_comp_type                                 bc11_tx_comp0;
  
  nvi_tx_comp_type                                 bcx_block_tx_comp0;
  
  nvi_tx_comp_type                                 bc5_tx_comp1;
  
  nvi_tx_comp_type                                 bc11_tx_comp1;
  
  nvi_tx_comp_type                                 bcx_block_tx_comp1;
  
  nvi_tx_comp_type                                 bc5_tx_comp2;
  
  nvi_tx_comp_type                                 bc11_tx_comp2;
  
  nvi_tx_comp_type                                 bcx_block_tx_comp2;
  
  nvi_tx_comp_type                                 bc5_tx_comp3;
  
  nvi_tx_comp_type                                 bc11_tx_comp3;
  
  nvi_tx_comp_type                                 bcx_block_tx_comp3;
  
  nvi_bc5_tx_lim_vs_freq_type                      bc5_tx_lim_vs_freq;
  
  nvi_bc11_tx_lim_vs_freq_type                     bc11_tx_lim_vs_freq;
  
  nvi_bcx_block_tx_lim_vs_freq_type                bcx_block_tx_lim_vs_freq;
  
  nvi_byte_type                                    bc5_pa_r1_rise;
  
  nvi_byte_type                                    bc11_pa_r1_rise;
  
  nvi_byte_type                                    bcx_block_pa_r1_rise;
  
  nvi_byte_type                                    bc5_pa_r1_fall;
  
  nvi_byte_type                                    bc11_pa_r1_fall;
  
  nvi_byte_type                                    bcx_block_pa_r1_fall;
  
  nvi_byte_type                                    bc5_pa_r2_rise;
  
  nvi_byte_type                                    bc11_pa_r2_rise;
  
  nvi_byte_type                                    bcx_block_pa_r2_rise;
  
  nvi_byte_type                                    bc5_pa_r2_fall;
  
  nvi_byte_type                                    bc11_pa_r2_fall;
  
  nvi_byte_type                                    bcx_block_pa_r2_fall;
  
  nvi_byte_type                                    bc5_pa_r3_rise;
  
  nvi_byte_type                                    bc11_pa_r3_rise;
  
  nvi_byte_type                                    bcx_block_pa_r3_rise;
  
  nvi_byte_type                                    bc5_pa_r3_fall;
  
  nvi_byte_type                                    bc11_pa_r3_fall;
  
  nvi_byte_type                                    bcx_block_pa_r3_fall;
  
  nvi_byte_type                                    bc5_hdet_off;
  
  nvi_byte_type                                    bc11_hdet_off;
  
  nvi_byte_type                                    bcx_block_hdet_off;
  
  nvi_byte_type                                    bc5_hdet_spn;
  
  nvi_byte_type                                    bc11_hdet_spn;
  
  nvi_byte_type                                    bcx_block_hdet_spn;
  
  nvi_bc5_exp_hdet_vs_agc_type                     bc5_exp_hdet_vs_agc;
  
  nvi_bc11_exp_hdet_vs_agc_type                    bc11_exp_hdet_vs_agc;
  
  nvi_bcx_block_exp_hdet_vs_agc_type               bcx_block_exp_hdet_vs_agc;
  
  nvi_dword_type                                   bc5_enc_btf;
  
  nvi_dword_type                                   bc11_enc_btf;
  
  nvi_dword_type                                   bcx_block_enc_btf;
  
  nvi_bc5_vco_coarse_tune_table_type               bc5_vco_coarse_tune_table;
  
  nvi_bc11_vco_coarse_tune_table_type              bc11_vco_coarse_tune_table;
  
  nvi_bcx_block_vco_coarse_tune_table_type         bcx_block_vco_coarse_tune_table;
  
  nvi_bc5_p1_rise_fall_off_type                    bc5_p1_rise_fall_off;
  
  nvi_bc11_p1_rise_fall_off_type                   bc11_p1_rise_fall_off;
  
  nvi_bcx_block_p1_rise_fall_off_type              bcx_block_p1_rise_fall_off;
  
  nvi_c0_bc5_tx_cal_chan_type                      c0_bc5_tx_cal_chan;
  
  nvi_c0_bc11_tx_cal_chan_type                     c0_bc11_tx_cal_chan;
  
  nvi_c0_bcx_block_tx_cal_chan_type                c0_bcx_block_tx_cal_chan;
  
  nvi_c0_bc5_rx_cal_chan_type                      c0_bc5_rx_cal_chan;
  
  nvi_c0_bc11_rx_cal_chan_type                     c0_bc11_rx_cal_chan;
  
  nvi_c0_bcx_block_rx_cal_chan_type                c0_bcx_block_rx_cal_chan;
  
  nvi_c0_bc5_lna_1_offset_vs_freq_type             c0_bc5_lna_1_offset_vs_freq;
  
  nvi_c0_bc11_lna_1_offset_vs_freq_type            c0_bc11_lna_1_offset_vs_freq;
  
  nvi_c0_bcx_block_lna_1_offset_vs_freq_type       c0_bcx_block_lna_1_offset_vs_freq;
  
  nvi_c0_bc5_lna_2_offset_vs_freq_type             c0_bc5_lna_2_offset_vs_freq;
  
  nvi_c0_bc11_lna_2_offset_vs_freq_type            c0_bc11_lna_2_offset_vs_freq;
  
  nvi_c0_bcx_block_lna_2_offset_vs_freq_type       c0_bcx_block_lna_2_offset_vs_freq;
  
  nvi_c0_bc5_lna_3_offset_vs_freq_type             c0_bc5_lna_3_offset_vs_freq;
  
  nvi_c0_bc11_lna_3_offset_vs_freq_type            c0_bc11_lna_3_offset_vs_freq;
  
  nvi_c0_bcx_block_lna_3_offset_vs_freq_type       c0_bcx_block_lna_3_offset_vs_freq;
  
  nvi_c0_bc5_lna_4_offset_vs_freq_type             c0_bc5_lna_4_offset_vs_freq;
  
  nvi_c0_bc11_lna_4_offset_vs_freq_type            c0_bc11_lna_4_offset_vs_freq;
  
  nvi_c0_bcx_block_lna_4_offset_vs_freq_type       c0_bcx_block_lna_4_offset_vs_freq;
  
  nvi_int2_type                                    c0_bc5_lna_1_offset;
  
  nvi_int2_type                                    c0_bc11_lna_1_offset;
  
  nvi_int2_type                                    c0_bcx_block_lna_1_offset;
  
  nvi_int2_type                                    c0_bc5_lna_2_offset;
  
  nvi_int2_type                                    c0_bc11_lna_2_offset;
  
  nvi_int2_type                                    c0_bcx_block_lna_2_offset;
  
  nvi_int2_type                                    c0_bc5_lna_3_offset;
  
  nvi_int2_type                                    c0_bc11_lna_3_offset;
  
  nvi_int2_type                                    c0_bcx_block_lna_3_offset;
  
  nvi_int2_type                                    c0_bc5_lna_4_offset;
  
  nvi_int2_type                                    c0_bc11_lna_4_offset;
  
  nvi_int2_type                                    c0_bcx_block_lna_4_offset;
  
  nvi_byte_type                                    c0_bc5_im2_i_value;
  
  nvi_byte_type                                    c0_bc11_im2_i_value;
  
  nvi_byte_type                                    c0_bcx_block_im2_i_value;
  
  nvi_byte_type                                    c0_bc5_im2_q_value;
  
  nvi_byte_type                                    c0_bc11_im2_q_value;
  
  nvi_byte_type                                    c0_bcx_block_im2_q_value;
  
  nvi_int2_type                                    c0_bc5_vga_gain_offset;
  
  nvi_int2_type                                    c0_bc11_vga_gain_offset;
  
  nvi_int2_type                                    c0_bcx_block_vga_gain_offset;
  
  nvi_c0_bc5_vga_gain_offset_vs_freq_type          c0_bc5_vga_gain_offset_vs_freq;
  
  nvi_c0_bc11_vga_gain_offset_vs_freq_type         c0_bc11_vga_gain_offset_vs_freq;
  
  nvi_c0_bcx_block_vga_gain_offset_vs_freq_type    c0_bcx_block_vga_gain_offset_vs_freq;
  
  nvi_byte_type                                    c0_bc5_im2_transconductor_value;
  
  nvi_byte_type                                    c0_bc11_im2_transconductor_value;
  
  nvi_byte_type                                    c0_bcx_block_im2_transconductor_value;
  
  nvi_int1_type                                    c0_bc5_lna_1_rise;
  
  nvi_int1_type                                    c0_bc11_lna_1_rise;
  
  nvi_int1_type                                    c0_bcx_block_lna_1_rise;
  
  nvi_int1_type                                    c0_bc5_lna_1_fall;
  
  nvi_int1_type                                    c0_bc11_lna_1_fall;
  
  nvi_int1_type                                    c0_bcx_block_lna_1_fall;
  
  nvi_int1_type                                    c0_bc5_lna_2_rise;
  
  nvi_int1_type                                    c0_bc11_lna_2_rise;
  
  nvi_int1_type                                    c0_bcx_block_lna_2_rise;
  
  nvi_int1_type                                    c0_bc5_lna_2_fall;
  
  nvi_int1_type                                    c0_bc11_lna_2_fall;
  
  nvi_int1_type                                    c0_bcx_block_lna_2_fall;
  
  nvi_int1_type                                    c0_bc5_lna_3_rise;
  
  nvi_int1_type                                    c0_bc11_lna_3_rise;
  
  nvi_int1_type                                    c0_bcx_block_lna_3_rise;
  
  nvi_int1_type                                    c0_bc5_lna_3_fall;
  
  nvi_int1_type                                    c0_bc11_lna_3_fall;
  
  nvi_int1_type                                    c0_bcx_block_lna_3_fall;
  
  nvi_int1_type                                    c0_bc5_lna_4_rise;
  
  nvi_int1_type                                    c0_bc11_lna_4_rise;
  
  nvi_int1_type                                    c0_bcx_block_lna_4_rise;
  
  nvi_int1_type                                    c0_bc5_lna_4_fall;
  
  nvi_int1_type                                    c0_bc11_lna_4_fall;
  
  nvi_int1_type                                    c0_bcx_block_lna_4_fall;
  
  nvi_byte_type                                    c0_bc5_im_level1;
  
  nvi_byte_type                                    c0_bc11_im_level1;
  
  nvi_byte_type                                    c0_bcx_block_im_level1;
  
  nvi_byte_type                                    c0_bc5_im_level2;
  
  nvi_byte_type                                    c0_bc11_im_level2;
  
  nvi_byte_type                                    c0_bcx_block_im_level2;
  
  nvi_byte_type                                    c0_bc5_im_level3;
  
  nvi_byte_type                                    c0_bc11_im_level3;
  
  nvi_byte_type                                    c0_bcx_block_im_level3;
  
  nvi_byte_type                                    c0_bc5_im_level4;
  
  nvi_byte_type                                    c0_bc11_im_level4;
  
  nvi_byte_type                                    c0_bcx_block_im_level4;
  
  nvi_c1_bc5_tx_cal_chan_type                      c1_bc5_tx_cal_chan;
  
  nvi_c1_bc11_tx_cal_chan_type                     c1_bc11_tx_cal_chan;
  
  nvi_c1_bcx_block_tx_cal_chan_type                c1_bcx_block_tx_cal_chan;
  
  nvi_c1_bc5_rx_cal_chan_type                      c1_bc5_rx_cal_chan;
  
  nvi_c1_bc11_rx_cal_chan_type                     c1_bc11_rx_cal_chan;
  
  nvi_c1_bcx_block_rx_cal_chan_type                c1_bcx_block_rx_cal_chan;
  
  nvi_c1_bc5_lna_1_offset_vs_freq_type             c1_bc5_lna_1_offset_vs_freq;
  
  nvi_c1_bc11_lna_1_offset_vs_freq_type            c1_bc11_lna_1_offset_vs_freq;
  
  nvi_c1_bcx_block_lna_1_offset_vs_freq_type       c1_bcx_block_lna_1_offset_vs_freq;
  
  nvi_c1_bc5_lna_2_offset_vs_freq_type             c1_bc5_lna_2_offset_vs_freq;
  
  nvi_c1_bc11_lna_2_offset_vs_freq_type            c1_bc11_lna_2_offset_vs_freq;
  
  nvi_c1_bcx_block_lna_2_offset_vs_freq_type       c1_bcx_block_lna_2_offset_vs_freq;
  
  nvi_c1_bc5_lna_3_offset_vs_freq_type             c1_bc5_lna_3_offset_vs_freq;
  
  nvi_c1_bc11_lna_3_offset_vs_freq_type            c1_bc11_lna_3_offset_vs_freq;
  
  nvi_c1_bcx_block_lna_3_offset_vs_freq_type       c1_bcx_block_lna_3_offset_vs_freq;
  
  nvi_c1_bc5_lna_4_offset_vs_freq_type             c1_bc5_lna_4_offset_vs_freq;
  
  nvi_c1_bc11_lna_4_offset_vs_freq_type            c1_bc11_lna_4_offset_vs_freq;
  
  nvi_c1_bcx_block_lna_4_offset_vs_freq_type       c1_bcx_block_lna_4_offset_vs_freq;
  
  nvi_int2_type                                    c1_bc5_lna_1_offset;
  
  nvi_int2_type                                    c1_bc11_lna_1_offset;
  
  nvi_int2_type                                    c1_bcx_block_lna_1_offset;
  
  nvi_int2_type                                    c1_bc5_lna_2_offset;
  
  nvi_int2_type                                    c1_bc11_lna_2_offset;
  
  nvi_int2_type                                    c1_bcx_block_lna_2_offset;
  
  nvi_int2_type                                    c1_bc5_lna_3_offset;
  
  nvi_int2_type                                    c1_bc11_lna_3_offset;
  
  nvi_int2_type                                    c1_bcx_block_lna_3_offset;
  
  nvi_int2_type                                    c1_bc5_lna_4_offset;
  
  nvi_int2_type                                    c1_bc11_lna_4_offset;
  
  nvi_int2_type                                    c1_bcx_block_lna_4_offset;
  
  nvi_byte_type                                    c1_bc5_im2_i_value;
  
  nvi_byte_type                                    c1_bc11_im2_i_value;
  
  nvi_byte_type                                    c1_bcx_block_im2_i_value;
  
  nvi_byte_type                                    c1_bc5_im2_q_value;
  
  nvi_byte_type                                    c1_bc11_im2_q_value;
  
  nvi_byte_type                                    c1_bcx_block_im2_q_value;
  
  nvi_int2_type                                    c1_bc5_vga_gain_offset;
  
  nvi_int2_type                                    c1_bc11_vga_gain_offset;
  
  nvi_int2_type                                    c1_bcx_block_vga_gain_offset;
  
  nvi_c1_bc5_vga_gain_offset_vs_freq_type          c1_bc5_vga_gain_offset_vs_freq;
  
  nvi_c1_bc11_vga_gain_offset_vs_freq_type         c1_bc11_vga_gain_offset_vs_freq;
  
  nvi_c1_bcx_block_vga_gain_offset_vs_freq_type    c1_bcx_block_vga_gain_offset_vs_freq;
  
  nvi_byte_type                                    c1_bc5_im2_transconductor_value;
  
  nvi_byte_type                                    c1_bc11_im2_transconductor_value;
  
  nvi_byte_type                                    c1_bcx_block_im2_transconductor_value;
  
  nvi_int1_type                                    c1_bc5_lna_1_rise;
  
  nvi_int1_type                                    c1_bc11_lna_1_rise;
  
  nvi_int1_type                                    c1_bcx_block_lna_1_rise;
  
  nvi_int1_type                                    c1_bc5_lna_1_fall;
  
  nvi_int1_type                                    c1_bc11_lna_1_fall;
  
  nvi_int1_type                                    c1_bcx_block_lna_1_fall;
  
  nvi_int1_type                                    c1_bc5_lna_2_rise;
  
  nvi_int1_type                                    c1_bc11_lna_2_rise;
  
  nvi_int1_type                                    c1_bcx_block_lna_2_rise;
  
  nvi_int1_type                                    c1_bc5_lna_2_fall;
  
  nvi_int1_type                                    c1_bc11_lna_2_fall;
  
  nvi_int1_type                                    c1_bcx_block_lna_2_fall;
  
  nvi_int1_type                                    c1_bc5_lna_3_rise;
  
  nvi_int1_type                                    c1_bc11_lna_3_rise;
  
  nvi_int1_type                                    c1_bcx_block_lna_3_rise;
  
  nvi_int1_type                                    c1_bc5_lna_3_fall;
  
  nvi_int1_type                                    c1_bc11_lna_3_fall;
  
  nvi_int1_type                                    c1_bcx_block_lna_3_fall;
  
  nvi_int1_type                                    c1_bc5_lna_4_rise;
  
  nvi_int1_type                                    c1_bc11_lna_4_rise;
  
  nvi_int1_type                                    c1_bcx_block_lna_4_rise;
  
  nvi_int1_type                                    c1_bc5_lna_4_fall;
  
  nvi_int1_type                                    c1_bc11_lna_4_fall;
  
  nvi_int1_type                                    c1_bcx_block_lna_4_fall;
  
  nvi_byte_type                                    c1_bc5_im_level1;
  
  nvi_byte_type                                    c1_bc11_im_level1;
  
  nvi_byte_type                                    c1_bcx_block_im_level1;
  
  nvi_byte_type                                    c1_bc5_im_level2;
  
  nvi_byte_type                                    c1_bc11_im_level2;
  
  nvi_byte_type                                    c1_bcx_block_im_level2;
  
  nvi_byte_type                                    c1_bc5_im_level3;
  
  nvi_byte_type                                    c1_bc11_im_level3;
  
  nvi_byte_type                                    c1_bcx_block_im_level3;
  
  nvi_byte_type                                    c1_bc5_im_level4;
  
  nvi_byte_type                                    c1_bc11_im_level4;
  
  nvi_byte_type                                    c1_bcx_block_im_level4;
  
  nvi_int16_type                                   bc4_gps1_rf_delay;
  
  nvi_bc4_tx_lim_vs_temp_type                      bc4_tx_lim_vs_temp;
  
  nvi_tx_linearizer_type                           bc4_tx_lin_master0;
  
  nvi_tx_linearizer_type                           bc4_tx_lin_master1;
  
  nvi_tx_linearizer_type                           bc4_tx_lin_master2;
  
  nvi_uint8_type                                   lcd_id;
  
  nvi_tx_linearizer_type                           bc4_tx_lin_master3;
  
  nvi_tx_comp_type                                 bc4_tx_comp0;
  
  nvi_tx_comp_type                                 bc4_tx_comp1;
  
  nvi_tx_comp_type                                 bc4_tx_comp2;
  
  nvi_tx_comp_type                                 bc4_tx_comp3;
  
  nvi_bc4_tx_lim_vs_freq_type                      bc4_tx_lim_vs_freq;
  
  nvi_byte_type                                    bc4_pa_r1_rise;
  
  nvi_byte_type                                    bc4_pa_r1_fall;
  
  nvi_byte_type                                    bc4_pa_r2_rise;
  
  nvi_byte_type                                    bc4_pa_r2_fall;
  
  nvi_byte_type                                    bc4_pa_r3_rise;
  
  nvi_byte_type                                    bc4_pa_r3_fall;
  
  nvi_byte_type                                    bc4_hdet_off;
  
  nvi_byte_type                                    bc4_hdet_spn;
  
  nvi_bc4_exp_hdet_vs_agc_type                     bc4_exp_hdet_vs_agc;
  
  nvi_dword_type                                   bc4_enc_btf;
  
  nvi_bc4_vco_coarse_tune_table_type               bc4_vco_coarse_tune_table;
  
  nvi_bc4_p1_rise_fall_off_type                    bc4_p1_rise_fall_off;
  
  nvi_c0_bc4_tx_cal_chan_type                      c0_bc4_tx_cal_chan;
  
  nvi_c0_bc4_rx_cal_chan_type                      c0_bc4_rx_cal_chan;
  
  nvi_c0_bc4_lna_1_offset_vs_freq_type             c0_bc4_lna_1_offset_vs_freq;
  
  nvi_c0_bc4_lna_2_offset_vs_freq_type             c0_bc4_lna_2_offset_vs_freq;
  
  nvi_c0_bc4_lna_3_offset_vs_freq_type             c0_bc4_lna_3_offset_vs_freq;
  
  nvi_c0_bc4_lna_4_offset_vs_freq_type             c0_bc4_lna_4_offset_vs_freq;
  
  nvi_int2_type                                    c0_bc4_lna_1_offset;
  
  nvi_int2_type                                    c0_bc4_lna_2_offset;
  
  nvi_int2_type                                    c0_bc4_lna_3_offset;
  
  nvi_int2_type                                    c0_bc4_lna_4_offset;
  
  nvi_byte_type                                    c0_bc4_im2_i_value;
  
  nvi_byte_type                                    c0_bc4_im2_q_value;
  
  nvi_int2_type                                    c0_bc4_vga_gain_offset;
  
  nvi_c0_bc4_vga_gain_offset_vs_freq_type          c0_bc4_vga_gain_offset_vs_freq;
  
  nvi_byte_type                                    c0_bc4_im2_transconductor_value;
  
  nvi_int1_type                                    c0_bc4_lna_1_rise;
  
  nvi_int1_type                                    c0_bc4_lna_1_fall;
  
  nvi_int1_type                                    c0_bc4_lna_2_rise;
  
  nvi_int1_type                                    c0_bc4_lna_2_fall;
  
  nvi_int1_type                                    c0_bc4_lna_3_rise;
  
  nvi_int1_type                                    c0_bc4_lna_3_fall;
  
  nvi_int1_type                                    c0_bc4_lna_4_rise;
  
  nvi_int1_type                                    c0_bc4_lna_4_fall;
  
  nvi_byte_type                                    c0_bc4_im_level1;
  
  nvi_byte_type                                    c0_bc4_im_level2;
  
  nvi_byte_type                                    c0_bc4_im_level3;
  
  nvi_byte_type                                    c0_bc4_im_level4;
  
  nvi_c1_bc4_tx_cal_chan_type                      c1_bc4_tx_cal_chan;
  
  nvi_c1_bc4_rx_cal_chan_type                      c1_bc4_rx_cal_chan;
  
  nvi_c1_bc4_lna_1_offset_vs_freq_type             c1_bc4_lna_1_offset_vs_freq;
  
  nvi_c1_bc4_lna_2_offset_vs_freq_type             c1_bc4_lna_2_offset_vs_freq;
  
  nvi_c1_bc4_lna_3_offset_vs_freq_type             c1_bc4_lna_3_offset_vs_freq;
  
  nvi_c1_bc4_lna_4_offset_vs_freq_type             c1_bc4_lna_4_offset_vs_freq;
  
  nvi_int2_type                                    c1_bc4_lna_1_offset;
  
  nvi_int2_type                                    c1_bc4_lna_2_offset;
  
  nvi_int2_type                                    c1_bc4_lna_3_offset;
  
  nvi_int2_type                                    c1_bc4_lna_4_offset;
  
  nvi_byte_type                                    c1_bc4_im2_i_value;
  
  nvi_byte_type                                    c1_bc4_im2_q_value;
  
  nvi_int2_type                                    c1_bc4_vga_gain_offset;
  
  nvi_c1_bc4_vga_gain_offset_vs_freq_type          c1_bc4_vga_gain_offset_vs_freq;
  
  nvi_byte_type                                    c1_bc4_im2_transconductor_value;
  
  nvi_int1_type                                    c1_bc4_lna_1_rise;
  
  nvi_int1_type                                    c1_bc4_lna_1_fall;
  
  nvi_int1_type                                    c1_bc4_lna_2_rise;
  
  nvi_int1_type                                    c1_bc4_lna_2_fall;
  
  nvi_int1_type                                    c1_bc4_lna_3_rise;
  
  nvi_int1_type                                    c1_bc4_lna_3_fall;
  
  nvi_int1_type                                    c1_bc4_lna_4_rise;
  
  nvi_int1_type                                    c1_bc4_lna_4_fall;
  
  nvi_byte_type                                    c1_bc4_im_level1;
  
  nvi_byte_type                                    c1_bc4_im_level2;
  
  nvi_byte_type                                    c1_bc4_im_level3;
  
  nvi_byte_type                                    c1_bc4_im_level4;
  
  nvi_int16_type                                   bc3_gps1_rf_delay;
  
  nvi_bc3_tx_lim_vs_temp_type                      bc3_tx_lim_vs_temp;
  
  nvi_tx_linearizer_type                           bc3_tx_lin_master0;
  
  nvi_tx_linearizer_type                           bc3_tx_lin_master1;
  
  nvi_tx_linearizer_type                           bc3_tx_lin_master2;
  
  nvi_tx_linearizer_type                           bc3_tx_lin_master3;
  
  nvi_tx_comp_type                                 bc3_tx_comp0;
  
  nvi_tx_comp_type                                 bc3_tx_comp1;
  
  nvi_tx_comp_type                                 bc3_tx_comp2;
  
  nvi_tx_comp_type                                 bc3_tx_comp3;
  
  nvi_bc3_tx_lim_vs_freq_type                      bc3_tx_lim_vs_freq;
  
  nvi_byte_type                                    bc3_pa_r1_rise;
  
  nvi_byte_type                                    bc3_pa_r1_fall;
  
  nvi_byte_type                                    bc3_pa_r2_rise;
  
  nvi_byte_type                                    bc3_pa_r2_fall;
  
  nvi_byte_type                                    bc3_pa_r3_rise;
  
  nvi_byte_type                                    bc3_pa_r3_fall;
  
  nvi_byte_type                                    bc3_hdet_off;
  
  nvi_byte_type                                    bc3_hdet_spn;
  
  nvi_bc3_exp_hdet_vs_agc_type                     bc3_exp_hdet_vs_agc;
  
  nvi_dword_type                                   bc3_enc_btf;
  
  nvi_bc3_vco_coarse_tune_table_type               bc3_vco_coarse_tune_table;
  
  nvi_bc3_p1_rise_fall_off_type                    bc3_p1_rise_fall_off;
  
  nvi_c0_bc3_tx_cal_chan_type                      c0_bc3_tx_cal_chan;
  
  nvi_c0_bc3_rx_cal_chan_type                      c0_bc3_rx_cal_chan;
  
  nvi_c0_bc3_lna_1_offset_vs_freq_type             c0_bc3_lna_1_offset_vs_freq;
  
  nvi_c0_bc3_lna_2_offset_vs_freq_type             c0_bc3_lna_2_offset_vs_freq;
  
  nvi_c0_bc3_lna_3_offset_vs_freq_type             c0_bc3_lna_3_offset_vs_freq;
  
  nvi_c0_bc3_lna_4_offset_vs_freq_type             c0_bc3_lna_4_offset_vs_freq;
  
  nvi_int2_type                                    c0_bc3_lna_1_offset;
  
  nvi_int2_type                                    c0_bc3_lna_2_offset;
  
  nvi_int2_type                                    c0_bc3_lna_3_offset;
  
  nvi_int2_type                                    c0_bc3_lna_4_offset;
  
  nvi_byte_type                                    c0_bc3_im2_i_value;
  
  nvi_byte_type                                    c0_bc3_im2_q_value;
  
  nvi_int2_type                                    c0_bc3_vga_gain_offset;
  
  nvi_c0_bc3_vga_gain_offset_vs_freq_type          c0_bc3_vga_gain_offset_vs_freq;
  
  nvi_byte_type                                    c0_bc3_im2_transconductor_value;
  
  nvi_int1_type                                    c0_bc3_lna_1_rise;
  
  nvi_int1_type                                    c0_bc3_lna_1_fall;
  
  nvi_int1_type                                    c0_bc3_lna_2_rise;
  
  nvi_int1_type                                    c0_bc3_lna_2_fall;
  
  nvi_int1_type                                    c0_bc3_lna_3_rise;
  
  nvi_int1_type                                    c0_bc3_lna_3_fall;
  
  nvi_int1_type                                    c0_bc3_lna_4_rise;
  
  nvi_int1_type                                    c0_bc3_lna_4_fall;
  
  nvi_byte_type                                    c0_bc3_im_level1;
  
  nvi_byte_type                                    c0_bc3_im_level2;
  
  nvi_byte_type                                    c0_bc3_im_level3;
  
  nvi_byte_type                                    c0_bc3_im_level4;
  
  nvi_c1_bc3_tx_cal_chan_type                      c1_bc3_tx_cal_chan;
  
  nvi_c1_bc3_rx_cal_chan_type                      c1_bc3_rx_cal_chan;
  
  nvi_c1_bc3_lna_1_offset_vs_freq_type             c1_bc3_lna_1_offset_vs_freq;
  
  nvi_c1_bc3_lna_2_offset_vs_freq_type             c1_bc3_lna_2_offset_vs_freq;
  
  nvi_c1_bc3_lna_3_offset_vs_freq_type             c1_bc3_lna_3_offset_vs_freq;
  
  nvi_c1_bc3_lna_4_offset_vs_freq_type             c1_bc3_lna_4_offset_vs_freq;
  
  nvi_int2_type                                    c1_bc3_lna_1_offset;
  
  nvi_int2_type                                    c1_bc3_lna_2_offset;
  
  nvi_int2_type                                    c1_bc3_lna_3_offset;
  
  nvi_int2_type                                    c1_bc3_lna_4_offset;
  
  nvi_byte_type                                    c1_bc3_im2_i_value;
  
  nvi_byte_type                                    c1_bc3_im2_q_value;
  
  nvi_int2_type                                    c1_bc3_vga_gain_offset;
  
  nvi_c1_bc3_vga_gain_offset_vs_freq_type          c1_bc3_vga_gain_offset_vs_freq;
  
  nvi_byte_type                                    c1_bc3_im2_transconductor_value;
  
  nvi_int1_type                                    c1_bc3_lna_1_rise;
  
  nvi_int1_type                                    c1_bc3_lna_1_fall;
  
  nvi_int1_type                                    c1_bc3_lna_2_rise;
  
  nvi_int1_type                                    c1_bc3_lna_2_fall;
  
  nvi_int1_type                                    c1_bc3_lna_3_rise;
  
  nvi_int1_type                                    c1_bc3_lna_3_fall;
  
  nvi_int1_type                                    c1_bc3_lna_4_rise;
  
  nvi_int1_type                                    c1_bc3_lna_4_fall;
  
  nvi_byte_type                                    c1_bc3_im_level1;
  
  nvi_byte_type                                    c1_bc3_im_level2;
  
  nvi_byte_type                                    c1_bc3_im_level3;
  
  nvi_byte_type                                    c1_bc3_im_level4;
  
  nvi_int16_type                                   bc1_gps1_rf_delay;
  
  nvi_bc1_tx_lim_vs_temp_type                      bc1_tx_lim_vs_temp;
  
  nvi_tx_linearizer_type                           bc1_tx_lin_master0;
  
  nvi_tx_linearizer_type                           bc1_tx_lin_master1;
  
  nvi_tx_linearizer_type                           bc1_tx_lin_master2;
  
  nvi_tx_linearizer_type                           bc1_tx_lin_master3;
  
  nvi_tx_comp_type                                 bc1_tx_comp0;
  
  nvi_tx_comp_type                                 bc1_tx_comp1;
  
  nvi_tx_comp_type                                 bc1_tx_comp2;
  
  nvi_tx_comp_type                                 bc1_tx_comp3;
  
  nvi_bc1_tx_lim_vs_freq_type                      bc1_tx_lim_vs_freq;
  
  nvi_byte_type                                    bc1_pa_r1_rise;
  
  nvi_byte_type                                    bc1_pa_r1_fall;
  
  nvi_byte_type                                    bc1_pa_r2_rise;
  
  nvi_byte_type                                    bc1_pa_r2_fall;
  
  nvi_byte_type                                    bc1_pa_r3_rise;
  
  nvi_byte_type                                    bc1_pa_r3_fall;
  
  nvi_byte_type                                    bc1_hdet_off;
  
  nvi_byte_type                                    bc1_hdet_spn;
  
  nvi_bc1_exp_hdet_vs_agc_type                     bc1_exp_hdet_vs_agc;
  
  nvi_dword_type                                   bc1_enc_btf;
  
  nvi_bc1_vco_coarse_tune_table_type               bc1_vco_coarse_tune_table;
  
  nvi_bc1_p1_rise_fall_off_type                    bc1_p1_rise_fall_off;
  
  nvi_c0_bc1_tx_cal_chan_type                      c0_bc1_tx_cal_chan;
  
  nvi_c0_bc1_rx_cal_chan_type                      c0_bc1_rx_cal_chan;
  
  nvi_c0_bc1_lna_1_offset_vs_freq_type             c0_bc1_lna_1_offset_vs_freq;
  
  nvi_c0_bc1_lna_2_offset_vs_freq_type             c0_bc1_lna_2_offset_vs_freq;
  
  nvi_c0_bc1_lna_3_offset_vs_freq_type             c0_bc1_lna_3_offset_vs_freq;
  
  nvi_c0_bc1_lna_4_offset_vs_freq_type             c0_bc1_lna_4_offset_vs_freq;
  
  nvi_int2_type                                    c0_bc1_lna_1_offset;
  
  nvi_int2_type                                    c0_bc1_lna_2_offset;
  
  nvi_int2_type                                    c0_bc1_lna_3_offset;
  
  nvi_int2_type                                    c0_bc1_lna_4_offset;
  
  nvi_byte_type                                    c0_bc1_im2_i_value;
  
  nvi_byte_type                                    c0_bc1_im2_q_value;
  
  nvi_int2_type                                    c0_bc1_vga_gain_offset;
  
  nvi_c0_bc1_vga_gain_offset_vs_freq_type          c0_bc1_vga_gain_offset_vs_freq;
  
  nvi_byte_type                                    c0_bc1_im2_transconductor_value;
  
  nvi_int1_type                                    c0_bc1_lna_1_rise;
  
  nvi_int1_type                                    c0_bc1_lna_1_fall;
  
  nvi_int1_type                                    c0_bc1_lna_2_rise;
  
  nvi_int1_type                                    c0_bc1_lna_2_fall;
  
  nvi_int1_type                                    c0_bc1_lna_3_rise;
  
  nvi_int1_type                                    c0_bc1_lna_3_fall;
  
  nvi_int1_type                                    c0_bc1_lna_4_rise;
  
  nvi_int1_type                                    c0_bc1_lna_4_fall;
  
  nvi_byte_type                                    c0_bc1_im_level1;
  
  nvi_byte_type                                    c0_bc1_im_level2;
  
  nvi_byte_type                                    c0_bc1_im_level3;
  
  nvi_byte_type                                    c0_bc1_im_level4;
  
  nvi_c1_bc1_tx_cal_chan_type                      c1_bc1_tx_cal_chan;
  
  nvi_c1_bc1_rx_cal_chan_type                      c1_bc1_rx_cal_chan;
  
  nvi_c1_bc1_lna_1_offset_vs_freq_type             c1_bc1_lna_1_offset_vs_freq;
  
  nvi_c1_bc1_lna_2_offset_vs_freq_type             c1_bc1_lna_2_offset_vs_freq;
  
  nvi_c1_bc1_lna_3_offset_vs_freq_type             c1_bc1_lna_3_offset_vs_freq;
  
  nvi_c1_bc1_lna_4_offset_vs_freq_type             c1_bc1_lna_4_offset_vs_freq;
  
  nvi_int2_type                                    c1_bc1_lna_1_offset;
  
  nvi_int2_type                                    c1_bc1_lna_2_offset;
  
  nvi_int2_type                                    c1_bc1_lna_3_offset;
  
  nvi_int2_type                                    c1_bc1_lna_4_offset;
  
  nvi_byte_type                                    c1_bc1_im2_i_value;
  
  nvi_byte_type                                    c1_bc1_im2_q_value;
  
  nvi_int2_type                                    c1_bc1_vga_gain_offset;
  
  nvi_c1_bc1_vga_gain_offset_vs_freq_type          c1_bc1_vga_gain_offset_vs_freq;
  
  nvi_byte_type                                    c1_bc1_im2_transconductor_value;
  
  nvi_int1_type                                    c1_bc1_lna_1_rise;
  
  nvi_int1_type                                    c1_bc1_lna_1_fall;
  
  nvi_int1_type                                    c1_bc1_lna_2_rise;
  
  nvi_int1_type                                    c1_bc1_lna_2_fall;
  
  nvi_int1_type                                    c1_bc1_lna_3_rise;
  
  nvi_int1_type                                    c1_bc1_lna_3_fall;
  
  nvi_int1_type                                    c1_bc1_lna_4_rise;
  
  nvi_int1_type                                    c1_bc1_lna_4_fall;
  
  nvi_byte_type                                    c1_bc1_im_level1;
  
  nvi_byte_type                                    c1_bc1_im_level2;
  
  nvi_byte_type                                    c1_bc1_im_level3;
  
  nvi_byte_type                                    c1_bc1_im_level4;
  
  nvi_int16_type                                   bc0_gps1_rf_delay;
  
  nvi_bc0_tx_lim_vs_temp_type                      bc0_tx_lim_vs_temp;
  
  nvi_tx_linearizer_type                           bc0_tx_lin_master0;
  
  nvi_tx_linearizer_type                           bc0_tx_lin_master1;
  
  nvi_tx_linearizer_type                           bc0_tx_lin_master2;
  
  nvi_tx_linearizer_type                           bc0_tx_lin_master3;
  
  nvi_tx_comp_type                                 bc0_tx_comp0;
  
  nvi_tx_comp_type                                 bc0_tx_comp1;
  
  nvi_tx_comp_type                                 bc0_tx_comp2;
  
  nvi_tx_comp_type                                 bc0_tx_comp3;
  
  nvi_bc0_tx_lim_vs_freq_type                      bc0_tx_lim_vs_freq;
  
  nvi_byte_type                                    bc0_pa_r1_rise;
  
  nvi_byte_type                                    bc0_pa_r1_fall;
  
  nvi_byte_type                                    bc0_pa_r2_rise;
  
  nvi_byte_type                                    bc0_pa_r2_fall;
  
  nvi_byte_type                                    bc0_pa_r3_rise;
  
  nvi_byte_type                                    bc0_pa_r3_fall;
  
  nvi_byte_type                                    bc0_hdet_off;
  
  nvi_byte_type                                    bc0_hdet_spn;
  
  nvi_bc0_exp_hdet_vs_agc_type                     bc0_exp_hdet_vs_agc;
  
  nvi_dword_type                                   bc0_enc_btf;
  
  nvi_bc0_vco_coarse_tune_table_type               bc0_vco_coarse_tune_table;
  
  nvi_bc0_p1_rise_fall_off_type                    bc0_p1_rise_fall_off;
  
  nvi_c0_bc0_tx_cal_chan_type                      c0_bc0_tx_cal_chan;
  
  nvi_c0_bc0_rx_cal_chan_type                      c0_bc0_rx_cal_chan;
  
  nvi_c0_bc0_lna_1_offset_vs_freq_type             c0_bc0_lna_1_offset_vs_freq;
  
  nvi_c0_bc0_lna_2_offset_vs_freq_type             c0_bc0_lna_2_offset_vs_freq;
  
  nvi_c0_bc0_lna_3_offset_vs_freq_type             c0_bc0_lna_3_offset_vs_freq;
  
  nvi_c0_bc0_lna_4_offset_vs_freq_type             c0_bc0_lna_4_offset_vs_freq;
  
  nvi_int2_type                                    c0_bc0_lna_1_offset;
  
  nvi_int2_type                                    c0_bc0_lna_2_offset;
  
  nvi_int2_type                                    c0_bc0_lna_3_offset;
  
  nvi_int2_type                                    c0_bc0_lna_4_offset;
  
  nvi_byte_type                                    c0_bc0_im2_i_value;
  
  nvi_byte_type                                    c0_bc0_im2_q_value;
  
  nvi_int2_type                                    c0_bc0_vga_gain_offset;
  
  nvi_c0_bc0_vga_gain_offset_vs_freq_type          c0_bc0_vga_gain_offset_vs_freq;
  
  nvi_byte_type                                    c0_bc0_im2_transconductor_value;
  
  nvi_int1_type                                    c0_bc0_lna_1_rise;
  
  nvi_int1_type                                    c0_bc0_lna_1_fall;
  
  nvi_int1_type                                    c0_bc0_lna_2_rise;
  
  nvi_int1_type                                    c0_bc0_lna_2_fall;
  
  nvi_int1_type                                    c0_bc0_lna_3_rise;
  
  nvi_int1_type                                    c0_bc0_lna_3_fall;
  
  nvi_int1_type                                    c0_bc0_lna_4_rise;
  
  nvi_int1_type                                    c0_bc0_lna_4_fall;
  
  nvi_byte_type                                    c0_bc0_im_level1;
  
  nvi_byte_type                                    c0_bc0_im_level2;
  
  nvi_byte_type                                    c0_bc0_im_level3;
  
  nvi_byte_type                                    c0_bc0_im_level4;
  
  nvi_c1_bc0_tx_cal_chan_type                      c1_bc0_tx_cal_chan;
  
  nvi_c1_bc0_rx_cal_chan_type                      c1_bc0_rx_cal_chan;
  
  nvi_c1_bc0_lna_1_offset_vs_freq_type             c1_bc0_lna_1_offset_vs_freq;
  
  nvi_c1_bc0_lna_2_offset_vs_freq_type             c1_bc0_lna_2_offset_vs_freq;
  
  nvi_c1_bc0_lna_3_offset_vs_freq_type             c1_bc0_lna_3_offset_vs_freq;
  
  nvi_c1_bc0_lna_4_offset_vs_freq_type             c1_bc0_lna_4_offset_vs_freq;
  
  nvi_int2_type                                    c1_bc0_lna_1_offset;
  
  nvi_int2_type                                    c1_bc0_lna_2_offset;
  
  nvi_int2_type                                    c1_bc0_lna_3_offset;
  
  nvi_int2_type                                    c1_bc0_lna_4_offset;
  
  nvi_byte_type                                    c1_bc0_im2_i_value;
  
  nvi_byte_type                                    c1_bc0_im2_q_value;
  
  nvi_int2_type                                    c1_bc0_vga_gain_offset;
  
  nvi_c1_bc0_vga_gain_offset_vs_freq_type          c1_bc0_vga_gain_offset_vs_freq;
  
  nvi_byte_type                                    c1_bc0_im2_transconductor_value;
  
  nvi_int1_type                                    c1_bc0_lna_1_rise;
  
  nvi_int1_type                                    c1_bc0_lna_1_fall;
  
  nvi_int1_type                                    c1_bc0_lna_2_rise;
  
  nvi_int1_type                                    c1_bc0_lna_2_fall;
  
  nvi_int1_type                                    c1_bc0_lna_3_rise;
  
  nvi_int1_type                                    c1_bc0_lna_3_fall;
  
  nvi_int1_type                                    c1_bc0_lna_4_rise;
  
  nvi_int1_type                                    c1_bc0_lna_4_fall;
  
  nvi_byte_type                                    c1_bc0_im_level1;
  
  nvi_byte_type                                    c1_bc0_im_level2;
  
  nvi_byte_type                                    c1_bc0_im_level3;
  
  nvi_byte_type                                    c1_bc0_im_level4;
  
  nvi_byte_type                                    rf_tune_reserved;
  
  nvi_byte_type                                    pa_r_map;
  
  nvi_uint64_type                                  rf_bc_config;
  
  nvi_byte_type                                    rf_hw_config;
  
  nvi_int1_type                                    bc0_hdr_im_fall;
  
  nvi_int1_type                                    bc0_hdr_im_rise;
  
  nvi_vco_temp_type                                vco_temp;
  
  nvi_int16_type                                   vco_default;
  
  nvi_uint16_type                                  vco_slope;
  
  nvi_uint8_type                                   vco_slope_range;
  
  nvi_uint32_type                                  rgs_time;
  
  nvi_uint8_type                                   rgs_type;
  
  nvi_uint8_type                                   rgs_temp;
  
  nvi_int16_type                                   rgs_rot;
  
  nvi_int16_type                                   rgs_vco;
  
  nvi_int1_type                                    bc0_hdr_im_level;
  
  nvi_c1_bc0_vco_coarse_tune_table_type            c1_bc0_vco_coarse_tune_table;
  
  nvi_c1_bc1_vco_coarse_tune_table_type            c1_bc1_vco_coarse_tune_table;
  
  nvi_c1_bc3_vco_coarse_tune_table_type            c1_bc3_vco_coarse_tune_table;
  
  nvi_c1_bc4_vco_coarse_tune_table_type            c1_bc4_vco_coarse_tune_table;
  
  nvi_c1_bc5_vco_coarse_tune_table_type            c1_bc5_vco_coarse_tune_table;
  
  nvi_c1_bc11_vco_coarse_tune_table_type           c1_bc11_vco_coarse_tune_table;
  
  nvi_c1_bc6_vco_coarse_tune_table_type            c1_bc6_vco_coarse_tune_table;
  
  nvi_byte_type                                    c1_rfr_bb_filter;
  
  nvi_gsm_1900_pa_temp_comp_index_15_type          gsm_1900_pa_temp_comp_index_15;
  
  nvi_gsm_1900_cal_arfcn_type                      gsm_1900_cal_arfcn;
  
  nvi_gsm_1900_rx_gain_range_1_freq_comp_type      gsm_1900_rx_gain_range_1_freq_comp;
  
  nvi_gsm_1900_rx_gain_range_2_freq_comp_type      gsm_1900_rx_gain_range_2_freq_comp;
  
  nvi_gsm_1900_rx_gain_range_3_freq_comp_type      gsm_1900_rx_gain_range_3_freq_comp;
  
  nvi_gsm_1900_rx_gain_range_4_freq_comp_type      gsm_1900_rx_gain_range_4_freq_comp;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_00;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_01;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_02;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_03;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_04;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_05;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_06;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_07;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_08;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_09;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_10;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_11;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_12;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_13;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_14;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_up_index_15;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_00;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_01;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_02;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_03;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_04;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_05;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_06;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_07;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_08;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_09;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_10;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_11;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_12;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_13;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_14;
  
  nvi_tx_burst_ramp_index_type                     gsm_1900_tx_burst_ramp_down_index_15;
  
  nvi_gsm_1900_pa_gain_slope_type                  gsm_1900_pa_gain_slope;
  
  nvi_gsm_1900_tx_freq_comp_type                   gsm_1900_tx_freq_comp;
  
  nvi_byte_type                                    gsm_1900_vbatt_hi_pa_comp;
  
  nvi_byte_type                                    gsm_1900_vbatt_lo_pa_comp;
  
  nvi_int8_type                                    gsm_1900_pa_start_time_offset;
  
  nvi_int8_type                                    gsm_1900_pa_stop_time_offset;
  
  nvi_gainrange_switchpoint_type                   gsm_1900_gainrange_switchpoints;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_00;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_01;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_02;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_03;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_04;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_05;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_06;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_07;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_08;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_09;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_10;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_11;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_12;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_13;
  
  nvi_pa_temp_comp_index_type                      gsm_1900_pa_temp_comp_index_14;
  
  nvi_gsm_850_pa_temp_comp_index_14_type           gsm_850_pa_temp_comp_index_14;
  
  nvi_gsm_850_cal_arfcn_type                       gsm_850_cal_arfcn;
  
  nvi_gsm_850_rx_gain_range_1_freq_comp_type       gsm_850_rx_gain_range_1_freq_comp;
  
  nvi_gsm_850_rx_gain_range_2_freq_comp_type       gsm_850_rx_gain_range_2_freq_comp;
  
  nvi_gsm_850_rx_gain_range_3_freq_comp_type       gsm_850_rx_gain_range_3_freq_comp;
  
  nvi_gsm_850_rx_gain_range_4_freq_comp_type       gsm_850_rx_gain_range_4_freq_comp;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_00;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_01;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_02;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_03;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_04;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_05;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_06;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_07;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_08;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_09;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_10;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_11;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_12;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_13;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_up_index_14;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_00;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_01;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_02;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_03;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_04;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_05;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_06;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_07;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_08;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_09;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_10;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_11;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_12;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_13;
  
  nvi_tx_burst_ramp_index_type                     gsm_850_tx_burst_ramp_down_index_14;
  
  nvi_gsm_850_pa_gain_slope_type                   gsm_850_pa_gain_slope;
  
  nvi_gsm_850_tx_freq_comp_type                    gsm_850_tx_freq_comp;
  
  nvi_byte_type                                    gsm_850_vbatt_hi_pa_comp;
  
  nvi_byte_type                                    gsm_850_vbatt_lo_pa_comp;
  
  nvi_int8_type                                    gsm_850_pa_start_time_offset;
  
  nvi_int8_type                                    gsm_850_pa_stop_time_offset;
  
  nvi_gainrange_switchpoint_type                   gsm_850_gainrange_switchpoints;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_00;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_01;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_02;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_03;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_04;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_05;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_06;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_07;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_08;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_09;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_10;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_11;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_12;
  
  nvi_pa_temp_comp_index_type                      gsm_850_pa_temp_comp_index_13;
  
  nvi_int16_type                                   wcdma_1900_vga_gain_offset;
  
  nvi_wcdma_1900_vga_gain_offset_vs_freq_type      wcdma_1900_vga_gain_offset_vs_freq;
  
  nvi_wcdma_1900_vga_gain_offset_vs_temp_type      wcdma_1900_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   wcdma_1900_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_1900_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_1900_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_1900_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_1900_im_level_2;
  
  nvi_int16_type                                   wcdma_1900_im_level_3;
  
  nvi_int16_type                                   wcdma_1900_lna_range_offset_2;
  
  nvi_int16_type                                   wcdma_1900_lna_range_offset_3;
  
  nvi_wcdma_1900_lna_offset_vs_freq_2_type         wcdma_1900_lna_offset_vs_freq_2;
  
  nvi_wcdma_1900_lna_offset_vs_freq_3_type         wcdma_1900_lna_offset_vs_freq_3;
  
  nvi_uint8_type                                   wcdma_1900_im2_i_value;
  
  nvi_uint8_type                                   wcdma_1900_im2_q_value;
  
  nvi_uint8_type                                   wcdma_1900_im2_transconductor_value;
  
  nvi_int16_type                                   wcdma_1900_rx_agc_min_2;
  
  nvi_int16_type                                   wcdma_1900_rx_agc_min_3;
  
  nvi_int8_type                                    wcdma_1900_max_tx_power;
  
  nvi_int16_type                                   wcdma_1900_out_of_service_thresh;
  
  nvi_int16_type                                   wcdma_1900_lna_range_rise;
  
  nvi_int16_type                                   wcdma_1900_lna_range_fall;
  
  nvi_int16_type                                   wcdma_1900_im_level;
  
  nvi_uint8_type                                   wcdma_1900_nonbypass_timer;
  
  nvi_uint16_type                                  wcdma_1900_bypass_timer;
  
  nvi_int16_type                                   wcdma_1900_lna_range_offset;
  
  nvi_wcdma_1900_lna_offset_vs_freq_type           wcdma_1900_lna_offset_vs_freq;
  
  nvi_int16_type                                   wcdma_1900_rx_agc_min;
  
  nvi_int16_type                                   wcdma_1900_rx_agc_max;
  
  nvi_uint8_type                                   wcdma_1900_agc_phase_offset;
  
  nvi_wcdma_1900_tx_lin_master_0_type              wcdma_1900_tx_lin_master_0;
  
  nvi_wcdma_1900_tx_lin_master_1_type              wcdma_1900_tx_lin_master_1;
  
  nvi_wcdma_1900_tx_comp_vs_freq_0_type            wcdma_1900_tx_comp_vs_freq_0;
  
  nvi_wcdma_1900_tx_comp_vs_freq_1_type            wcdma_1900_tx_comp_vs_freq_1;
  
  nvi_wcdma_1900_tx_lin_vs_temp_0_type             wcdma_1900_tx_lin_vs_temp_0;
  
  nvi_wcdma_1900_tx_lin_vs_temp_1_type             wcdma_1900_tx_lin_vs_temp_1;
  
  nvi_wcdma_1900_tx_slp_vs_temp_0_type             wcdma_1900_tx_slp_vs_temp_0;
  
  nvi_wcdma_1900_tx_slp_vs_temp_1_type             wcdma_1900_tx_slp_vs_temp_1;
  
  nvi_uint16_type                                  wcdma_1900_r1_rise;
  
  nvi_uint16_type                                  wcdma_1900_r1_fall;
  
  nvi_wcdma_1900_tx_lim_vs_temp_type               wcdma_1900_tx_lim_vs_temp;
  
  nvi_wcdma_1900_tx_lim_vs_freq_type               wcdma_1900_tx_lim_vs_freq;
  
  nvi_uint8_type                                   wcdma_1900_adj_factor;
  
  nvi_wcdma_1900_exp_hdet_vs_agc_type              wcdma_1900_exp_hdet_vs_agc;
  
  nvi_uint8_type                                   wcdma_1900_hdet_off;
  
  nvi_uint8_type                                   wcdma_1900_hdet_spn;
  
  nvi_uint32_type                                  wcdma_1900_enc_btf;
  
  nvi_uint16_type                                  wcdma_1900_agc_pa_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_1900_agc_pa_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_1900_agc_tx_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_1900_agc_tx_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_1900_agc_update_tx_agc_time;
  
  nvi_int16_type                                   wcdma_800_vga_gain_offset;
  
  nvi_wcdma_800_vga_gain_offset_vs_freq_type       wcdma_800_vga_gain_offset_vs_freq;
  
  nvi_wcdma_800_vga_gain_offset_vs_temp_type       wcdma_800_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   wcdma_800_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_800_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_800_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_800_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_800_im_level_2;
  
  nvi_int16_type                                   wcdma_800_im_level_3;
  
  nvi_int16_type                                   wcdma_800_lna_range_offset_2;
  
  nvi_int16_type                                   wcdma_800_lna_range_offset_3;
  
  nvi_wcdma_800_lna_offset_vs_freq_2_type          wcdma_800_lna_offset_vs_freq_2;
  
  nvi_wcdma_800_lna_offset_vs_freq_3_type          wcdma_800_lna_offset_vs_freq_3;
  
  nvi_uint8_type                                   wcdma_800_im2_i_value;
  
  nvi_uint8_type                                   wcdma_800_im2_q_value;
  
  nvi_uint8_type                                   wcdma_800_im2_transconductor_value;
  
  nvi_int16_type                                   wcdma_800_rx_agc_min_2;
  
  nvi_int16_type                                   wcdma_800_rx_agc_min_3;
  
  nvi_int8_type                                    wcdma_800_max_tx_power;
  
  nvi_int16_type                                   wcdma_800_out_of_service_thresh;
  
  nvi_int16_type                                   wcdma_800_lna_range_rise;
  
  nvi_int16_type                                   wcdma_800_lna_range_fall;
  
  nvi_int16_type                                   wcdma_800_im_level;
  
  nvi_uint8_type                                   wcdma_800_nonbypass_timer;
  
  nvi_uint16_type                                  wcdma_800_bypass_timer;
  
  nvi_int16_type                                   wcdma_800_lna_range_offset;
  
  nvi_wcdma_800_lna_offset_vs_freq_type            wcdma_800_lna_offset_vs_freq;
  
  nvi_int16_type                                   wcdma_800_rx_agc_min;
  
  nvi_int16_type                                   wcdma_800_rx_agc_max;
  
  nvi_uint8_type                                   wcdma_800_agc_phase_offset;
  
  nvi_wcdma_800_tx_lin_master_0_type               wcdma_800_tx_lin_master_0;
  
  nvi_wcdma_800_tx_lin_master_1_type               wcdma_800_tx_lin_master_1;
  
  nvi_wcdma_800_tx_comp_vs_freq_0_type             wcdma_800_tx_comp_vs_freq_0;
  
  nvi_wcdma_800_tx_comp_vs_freq_1_type             wcdma_800_tx_comp_vs_freq_1;
  
  nvi_wcdma_800_tx_lin_vs_temp_0_type              wcdma_800_tx_lin_vs_temp_0;
  
  nvi_wcdma_800_tx_lin_vs_temp_1_type              wcdma_800_tx_lin_vs_temp_1;
  
  nvi_wcdma_800_tx_slp_vs_temp_0_type              wcdma_800_tx_slp_vs_temp_0;
  
  nvi_wcdma_800_tx_slp_vs_temp_1_type              wcdma_800_tx_slp_vs_temp_1;
  
  nvi_uint16_type                                  wcdma_800_r1_rise;
  
  nvi_uint16_type                                  wcdma_800_r1_fall;
  
  nvi_wcdma_800_tx_lim_vs_temp_type                wcdma_800_tx_lim_vs_temp;
  
  nvi_wcdma_800_tx_lim_vs_freq_type                wcdma_800_tx_lim_vs_freq;
  
  nvi_uint8_type                                   wcdma_800_adj_factor;
  
  nvi_wcdma_800_exp_hdet_vs_agc_type               wcdma_800_exp_hdet_vs_agc;
  
  nvi_uint8_type                                   wcdma_800_hdet_off;
  
  nvi_uint8_type                                   wcdma_800_hdet_spn;
  
  nvi_uint32_type                                  wcdma_800_enc_btf;
  
  nvi_uint16_type                                  wcdma_800_agc_pa_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_800_agc_pa_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_800_agc_tx_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_800_agc_tx_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_800_agc_update_tx_agc_time;
  
  nvi_int16_type                                   gsm_tx_burst_offset_adj;
  
  nvi_int16_type                                   wcdma_prach_r1_rise_offset;
  
  nvi_int16_type                                   wcdma_prach_r1_fall_offset;
  
  nvi_int16_type                                   wcdma_1900_prach_r1_rise_offset;
  
  nvi_int16_type                                   wcdma_1900_prach_r1_fall_offset;
  
  nvi_int16_type                                   wcdma_800_prach_r1_rise_offset;
  
  nvi_int16_type                                   wcdma_800_prach_r1_fall_offset;
  
  nvi_byte_type                                    ipv6_failover_config;
  
  nvi_boolean_type                                 uim_use_cave_for_an_auth;
  
  nvi_qword_type                                   meid;
  
  nvi_byte_type                                    gps1_call_related;
  
  nvi_rf_antsel_gsm_default_type                   rf_antsel_gsm_default;
  
  nvi_rf_antsel_gsm_850_tx_type                    rf_antsel_gsm_850_tx;
  
  nvi_rf_antsel_gsm_850_rx_type                    rf_antsel_gsm_850_rx;
  
  nvi_rf_antsel_gsm_900_tx_type                    rf_antsel_gsm_900_tx;
  
  nvi_rf_antsel_gsm_900_rx_type                    rf_antsel_gsm_900_rx;
  
  nvi_rf_antsel_gsm_1800_tx_type                   rf_antsel_gsm_1800_tx;
  
  nvi_rf_antsel_gsm_1800_rx_type                   rf_antsel_gsm_1800_rx;
  
  nvi_rf_antsel_gsm_1900_tx_type                   rf_antsel_gsm_1900_tx;
  
  nvi_rf_antsel_gsm_1900_rx_type                   rf_antsel_gsm_1900_rx;
  
  nvi_rf_antsel_umts_800_type                      rf_antsel_umts_800;
  
  nvi_rf_antsel_umts_1900_type                     rf_antsel_umts_1900;
  
  nvi_rf_antsel_umts_2100_type                     rf_antsel_umts_2100;
  
  nvi_boolean_type                                 tcp_sack_timestamp_enabled;
  
  nvi_prl_pref_type                                prl_pref;
  
  nvi_uint16_type                                  aagps_default_ip_port;
  
  nvi_byte_type                                    aagps_3g_mo_lrsupport;
  
  nvi_uint32_type                                  aagps_development_test_control;
  
  nvi_uint8_type                                   diag_debug_max_files;
  
  nvi_int16_type                                   wcdma_800_pa_compensate_up;
  
  nvi_int16_type                                   wcdma_800_pa_compensate_down;
  
  nvi_int16_type                                   wcdma_1900_pa_compensate_up;
  
  nvi_int16_type                                   wcdma_1900_pa_compensate_down;
  
  nvi_int16_type                                   wcdma_800_pa_gain_up_time;
  
  nvi_int16_type                                   wcdma_800_pa_gain_down_time;
  
  nvi_int16_type                                   wcdma_1900_pa_gain_up_time;
  
  nvi_int16_type                                   wcdma_1900_pa_gain_down_time;
  
  nvi_wcdma_tx_cal_chan_type                       wcdma_tx_cal_chan;
  
  nvi_wcdma_rx_cal_chan_type                       wcdma_rx_cal_chan;
  
  nvi_wcdma_1900_tx_cal_chan_type                  wcdma_1900_tx_cal_chan;
  
  nvi_wcdma_1900_rx_cal_chan_type                  wcdma_1900_rx_cal_chan;
  
  nvi_wcdma_800_tx_cal_chan_type                   wcdma_800_tx_cal_chan;
  
  nvi_wcdma_800_rx_cal_chan_type                   wcdma_800_rx_cal_chan;
  
  nvi_dword_type                                   brew_carrier_id;
  
  nvi_dword_type                                   brew_platform_id;
  
  nvi_brew_bkey_type                               brew_bkey;
  
  nvi_brew_server_type                             brew_server;
  
  nvi_word_type                                    brew_download_flags;
  
  nvi_dword_type                                   brew_auth_policy;
  
  nvi_uint8_type                                   meid_cd;
  
  nvi_dword_type                                   brew_privacy_policy;
  
  nvi_uint8_type                                   gps1_vx_lcs_agent;
  
  nvi_brew_subscriber_id_type                      brew_subscriber_id;
  
  nvi_uint8_type                                   gps1_vx_app_trusted_settings;
  
  nvi_int16_type                                   wcdma_rx_delay;
  
  nvi_uint16_type                                  gps1_vx_ni_teleservice_id;
  
  nvi_int16_type                                   wcdma_800_rx_delay;
  
  nvi_boolean_type                                 gps1_vx_lcs_agent_prev6_only;
  
  nvi_int16_type                                   wcdma_1900_rx_delay;
  
  nvi_uint32_type                                  gps1_vx_mo_max_duration;
  
  nvi_uint32_type                                  aagps_development_test_control2;
  
  nvi_uint8_type                                   gps1_oos_operation_pref;
  
  nvi_uint32_type                                  aagps_development_test_control3;
  
  nvi_uint8_type                                   gps1_vx_gps_during_voice_call;
  
  nvi_uint32_type                                  aagps_development_test_control4;
  
  nvi_wlan_tech_pref_type                          wlan_tech_pref;
  
  nvi_uint32_type                                  aagps_development_test_control5;
  
  nvi_uint32_type                                  ds_ucsd_rlp_adm_idle;
  
  nvi_uint8_type                                   ppp_ccp_reject;
  
  nvi_wlan_scan_pref_type                          wlan_scan_pref;
  
  nvi_uint8_type                                   hdrbcmcs_ovhd_period;
  
  nvi_uint8_type                                   hdrbcmcs_page_reg_period;
  
  nvi_uint8_type                                   hdrbcmcs_dyn_reg_period;
  
  nvi_uint8_type                                   hdrbcmcs_monitor_period;
  
  nvi_uint8_type                                   hdrbcmcs_num_periods;
  
  nvi_wcdma_tx_lin_master_2_type                   wcdma_tx_lin_master_2;
  
  nvi_wcdma_tx_lin_master_3_type                   wcdma_tx_lin_master_3;
  
  nvi_wcdma_tx_comp_vs_freq_2_type                 wcdma_tx_comp_vs_freq_2;
  
  nvi_wcdma_tx_comp_vs_freq_3_type                 wcdma_tx_comp_vs_freq_3;
  
  nvi_wcdma_tx_lin_vs_temp_2_type                  wcdma_tx_lin_vs_temp_2;
  
  nvi_wcdma_tx_lin_vs_temp_3_type                  wcdma_tx_lin_vs_temp_3;
  
  nvi_wcdma_tx_slp_vs_temp_2_type                  wcdma_tx_slp_vs_temp_2;
  
  nvi_wcdma_tx_slp_vs_temp_3_type                  wcdma_tx_slp_vs_temp_3;
  
  nvi_uint16_type                                  wcdma_r2_rise;
  
  nvi_uint16_type                                  wcdma_r2_fall;
  
  nvi_uint16_type                                  wcdma_r3_rise;
  
  nvi_uint16_type                                  wcdma_r3_fall;
  
  nvi_int16_type                                   pa_compensate_up_r2;
  
  nvi_int16_type                                   pa_compensate_down_r2;
  
  nvi_int16_type                                   pa_compensate_up_r3;
  
  nvi_int16_type                                   pa_compensate_down_r3;
  
  nvi_int16_type                                   wcdma_prach_r2_rise_offset;
  
  nvi_int16_type                                   wcdma_prach_r2_fall_offset;
  
  nvi_int16_type                                   wcdma_prach_r3_rise_offset;
  
  nvi_int16_type                                   wcdma_prach_r3_fall_offset;
  
  nvi_wcdma_pa_range_map_type                      wcdma_pa_range_map;
  
  nvi_wcdma_1900_tx_lin_master_2_type              wcdma_1900_tx_lin_master_2;
  
  nvi_wcdma_1900_tx_lin_master_3_type              wcdma_1900_tx_lin_master_3;
  
  nvi_wcdma_1900_tx_comp_vs_freq_2_type            wcdma_1900_tx_comp_vs_freq_2;
  
  nvi_wcdma_1900_tx_comp_vs_freq_3_type            wcdma_1900_tx_comp_vs_freq_3;
  
  nvi_wcdma_1900_tx_lin_vs_temp_2_type             wcdma_1900_tx_lin_vs_temp_2;
  
  nvi_wcdma_1900_tx_lin_vs_temp_3_type             wcdma_1900_tx_lin_vs_temp_3;
  
  nvi_wcdma_1900_tx_slp_vs_temp_2_type             wcdma_1900_tx_slp_vs_temp_2;
  
  nvi_wcdma_1900_tx_slp_vs_temp_3_type             wcdma_1900_tx_slp_vs_temp_3;
  
  nvi_uint16_type                                  wcdma_1900_r2_rise;
  
  nvi_uint16_type                                  wcdma_1900_r2_fall;
  
  nvi_uint16_type                                  wcdma_1900_r3_rise;
  
  nvi_uint16_type                                  wcdma_1900_r3_fall;
  
  nvi_int16_type                                   wcdma_1900_pa_compensate_up_r2;
  
  nvi_int16_type                                   wcdma_1900_pa_compensate_down_r2;
  
  nvi_int16_type                                   wcdma_1900_pa_compensate_up_r3;
  
  nvi_int16_type                                   wcdma_1900_pa_compensate_down_r3;
  
  nvi_uint16_type                                  wcdma_1900_tx_rot_angle_pa_state_00;
  
  nvi_uint16_type                                  wcdma_1900_tx_rot_angle_pa_state_01;
  
  nvi_uint16_type                                  wcdma_1900_tx_rot_angle_pa_state_10;
  
  nvi_uint16_type                                  wcdma_1900_tx_rot_angle_pa_state_11;
  
  nvi_int16_type                                   wcdma_1900_prach_r2_rise_offset;
  
  nvi_int16_type                                   wcdma_1900_prach_r2_fall_offset;
  
  nvi_int16_type                                   wcdma_1900_prach_r3_rise_offset;
  
  nvi_int16_type                                   wcdma_1900_prach_r3_fall_offset;
  
  nvi_wcdma_1900_pa_range_map_type                 wcdma_1900_pa_range_map;
  
  nvi_wcdma_800_tx_lin_master_2_type               wcdma_800_tx_lin_master_2;
  
  nvi_wcdma_800_tx_lin_master_3_type               wcdma_800_tx_lin_master_3;
  
  nvi_wcdma_800_tx_comp_vs_freq_2_type             wcdma_800_tx_comp_vs_freq_2;
  
  nvi_wcdma_800_tx_comp_vs_freq_3_type             wcdma_800_tx_comp_vs_freq_3;
  
  nvi_wcdma_800_tx_lin_vs_temp_2_type              wcdma_800_tx_lin_vs_temp_2;
  
  nvi_wcdma_800_tx_lin_vs_temp_3_type              wcdma_800_tx_lin_vs_temp_3;
  
  nvi_wcdma_800_tx_slp_vs_temp_2_type              wcdma_800_tx_slp_vs_temp_2;
  
  nvi_wcdma_800_tx_slp_vs_temp_3_type              wcdma_800_tx_slp_vs_temp_3;
  
  nvi_uint16_type                                  wcdma_800_r2_rise;
  
  nvi_uint16_type                                  wcdma_800_r2_fall;
  
  nvi_uint16_type                                  wcdma_800_r3_rise;
  
  nvi_uint16_type                                  wcdma_800_r3_fall;
  
  nvi_int16_type                                   wcdma_800_pa_compensate_up_r2;
  
  nvi_int16_type                                   wcdma_800_pa_compensate_down_r2;
  
  nvi_int16_type                                   wcdma_800_pa_compensate_up_r3;
  
  nvi_int16_type                                   wcdma_800_pa_compensate_down_r3;
  
  nvi_uint16_type                                  wcdma_800_tx_rot_angle_pa_state_00;
  
  nvi_uint16_type                                  wcdma_800_tx_rot_angle_pa_state_01;
  
  nvi_uint16_type                                  wcdma_800_tx_rot_angle_pa_state_10;
  
  nvi_uint16_type                                  wcdma_800_tx_rot_angle_pa_state_11;
  
  nvi_int16_type                                   wcdma_800_prach_r2_rise_offset;
  
  nvi_int16_type                                   wcdma_800_prach_r2_fall_offset;
  
  nvi_int16_type                                   wcdma_800_prach_r3_rise_offset;
  
  nvi_int16_type                                   wcdma_800_prach_r3_fall_offset;
  
  nvi_wcdma_800_pa_range_map_type                  wcdma_800_pa_range_map;
  
  nvi_uint8_type                                   bc0_vco_coarse_tune_2;
  
  nvi_uint8_type                                   bc1_vco_coarse_tune_2;
  
  nvi_uint8_type                                   bc3_vco_coarse_tune_2;
  
  nvi_uint8_type                                   bc4_vco_coarse_tune_2;
  
  nvi_uint8_type                                   bc5_vco_coarse_tune_2;
  
  nvi_uint8_type                                   bc6_vco_coarse_tune_2;
  
  nvi_wlan_net_sel_mode_pref_type                  wlan_net_sel_mode_pref;
  
  nvi_boolean_type                                 edge_feature_support;
  
  nvi_uint8_type                                   edge_multislot_class;
  
  nvi_uint8_type                                   edge_8psk_power_class;
  
  nvi_uint8_type                                   edge_8psk_power_capability;
  
  nvi_uint8_type                                   geran_feature_pack_1;
  
  nvi_int16_type                                   gsm_amam_max_pwr;
  
  nvi_int16_type                                   gsm_amam_min_pwr;
  
  nvi_int16_type                                   dcs_amam_max_pwr;
  
  nvi_int16_type                                   dcs_amam_min_pwr;
  
  nvi_int16_type                                   gsm_850_amam_max_pwr;
  
  nvi_int16_type                                   gsm_850_amam_min_pwr;
  
  nvi_int16_type                                   gsm_1900_amam_max_pwr;
  
  nvi_int16_type                                   gsm_1900_amam_min_pwr;
  
  nvi_gsm_amam_master_tbl_seg1_f1_type             gsm_amam_master_tbl_seg1_f1;
  
  nvi_gsm_amam_master_tbl_seg2_f1_type             gsm_amam_master_tbl_seg2_f1;
  
  nvi_gsm_amam_master_tbl_seg3_f1_type             gsm_amam_master_tbl_seg3_f1;
  
  nvi_gsm_amam_master_tbl_seg4_f1_type             gsm_amam_master_tbl_seg4_f1;
  
  nvi_gsm_amam_master_tbl_seg5_f1_type             gsm_amam_master_tbl_seg5_f1;
  
  nvi_gsm_amam_master_tbl_seg6_f1_type             gsm_amam_master_tbl_seg6_f1;
  
  nvi_gsm_amam_master_tbl_seg7_f1_type             gsm_amam_master_tbl_seg7_f1;
  
  nvi_gsm_amam_master_tbl_seg8_f1_type             gsm_amam_master_tbl_seg8_f1;
  
  nvi_dcs_amam_master_tbl_seg1_f1_type             dcs_amam_master_tbl_seg1_f1;
  
  nvi_dcs_amam_master_tbl_seg2_f1_type             dcs_amam_master_tbl_seg2_f1;
  
  nvi_dcs_amam_master_tbl_seg3_f1_type             dcs_amam_master_tbl_seg3_f1;
  
  nvi_dcs_amam_master_tbl_seg4_f1_type             dcs_amam_master_tbl_seg4_f1;
  
  nvi_dcs_amam_master_tbl_seg5_f1_type             dcs_amam_master_tbl_seg5_f1;
  
  nvi_dcs_amam_master_tbl_seg6_f1_type             dcs_amam_master_tbl_seg6_f1;
  
  nvi_dcs_amam_master_tbl_seg7_f1_type             dcs_amam_master_tbl_seg7_f1;
  
  nvi_dcs_amam_master_tbl_seg8_f1_type             dcs_amam_master_tbl_seg8_f1;
  
  nvi_gsm_850_amam_master_tbl_seg1_f1_type         gsm_850_amam_master_tbl_seg1_f1;
  
  nvi_gsm_850_amam_master_tbl_seg2_f1_type         gsm_850_amam_master_tbl_seg2_f1;
  
  nvi_gsm_850_amam_master_tbl_seg3_f1_type         gsm_850_amam_master_tbl_seg3_f1;
  
  nvi_gsm_850_amam_master_tbl_seg4_f1_type         gsm_850_amam_master_tbl_seg4_f1;
  
  nvi_gsm_850_amam_master_tbl_seg5_f1_type         gsm_850_amam_master_tbl_seg5_f1;
  
  nvi_gsm_850_amam_master_tbl_seg6_f1_type         gsm_850_amam_master_tbl_seg6_f1;
  
  nvi_gsm_850_amam_master_tbl_seg7_f1_type         gsm_850_amam_master_tbl_seg7_f1;
  
  nvi_gsm_850_amam_master_tbl_seg8_f1_type         gsm_850_amam_master_tbl_seg8_f1;
  
  nvi_gsm_1900_amam_master_tbl_seg1_f1_type        gsm_1900_amam_master_tbl_seg1_f1;
  
  nvi_gsm_1900_amam_master_tbl_seg2_f1_type        gsm_1900_amam_master_tbl_seg2_f1;
  
  nvi_gsm_1900_amam_master_tbl_seg3_f1_type        gsm_1900_amam_master_tbl_seg3_f1;
  
  nvi_gsm_1900_amam_master_tbl_seg4_f1_type        gsm_1900_amam_master_tbl_seg4_f1;
  
  nvi_gsm_1900_amam_master_tbl_seg5_f1_type        gsm_1900_amam_master_tbl_seg5_f1;
  
  nvi_gsm_1900_amam_master_tbl_seg6_f1_type        gsm_1900_amam_master_tbl_seg6_f1;
  
  nvi_gsm_1900_amam_master_tbl_seg7_f1_type        gsm_1900_amam_master_tbl_seg7_f1;
  
  nvi_gsm_1900_amam_master_tbl_seg8_f1_type        gsm_1900_amam_master_tbl_seg8_f1;
  
  nvi_gsm_amam_master_tbl_seg1_f2_type             gsm_amam_master_tbl_seg1_f2;
  
  nvi_gsm_amam_master_tbl_seg2_f2_type             gsm_amam_master_tbl_seg2_f2;
  
  nvi_gsm_amam_master_tbl_seg3_f2_type             gsm_amam_master_tbl_seg3_f2;
  
  nvi_gsm_amam_master_tbl_seg4_f2_type             gsm_amam_master_tbl_seg4_f2;
  
  nvi_gsm_amam_master_tbl_seg5_f2_type             gsm_amam_master_tbl_seg5_f2;
  
  nvi_gsm_amam_master_tbl_seg6_f2_type             gsm_amam_master_tbl_seg6_f2;
  
  nvi_gsm_amam_master_tbl_seg7_f2_type             gsm_amam_master_tbl_seg7_f2;
  
  nvi_gsm_amam_master_tbl_seg8_f2_type             gsm_amam_master_tbl_seg8_f2;
  
  nvi_dcs_amam_master_tbl_seg1_f2_type             dcs_amam_master_tbl_seg1_f2;
  
  nvi_dcs_amam_master_tbl_seg2_f2_type             dcs_amam_master_tbl_seg2_f2;
  
  nvi_dcs_amam_master_tbl_seg3_f2_type             dcs_amam_master_tbl_seg3_f2;
  
  nvi_dcs_amam_master_tbl_seg4_f2_type             dcs_amam_master_tbl_seg4_f2;
  
  nvi_dcs_amam_master_tbl_seg5_f2_type             dcs_amam_master_tbl_seg5_f2;
  
  nvi_dcs_amam_master_tbl_seg6_f2_type             dcs_amam_master_tbl_seg6_f2;
  
  nvi_dcs_amam_master_tbl_seg7_f2_type             dcs_amam_master_tbl_seg7_f2;
  
  nvi_dcs_amam_master_tbl_seg8_f2_type             dcs_amam_master_tbl_seg8_f2;
  
  nvi_gsm_850_amam_master_tbl_seg1_f2_type         gsm_850_amam_master_tbl_seg1_f2;
  
  nvi_gsm_850_amam_master_tbl_seg2_f2_type         gsm_850_amam_master_tbl_seg2_f2;
  
  nvi_gsm_850_amam_master_tbl_seg3_f2_type         gsm_850_amam_master_tbl_seg3_f2;
  
  nvi_gsm_850_amam_master_tbl_seg4_f2_type         gsm_850_amam_master_tbl_seg4_f2;
  
  nvi_gsm_850_amam_master_tbl_seg5_f2_type         gsm_850_amam_master_tbl_seg5_f2;
  
  nvi_gsm_850_amam_master_tbl_seg6_f2_type         gsm_850_amam_master_tbl_seg6_f2;
  
  nvi_gsm_850_amam_master_tbl_seg7_f2_type         gsm_850_amam_master_tbl_seg7_f2;
  
  nvi_gsm_850_amam_master_tbl_seg8_f2_type         gsm_850_amam_master_tbl_seg8_f2;
  
  nvi_gsm_1900_amam_master_tbl_seg1_f2_type        gsm_1900_amam_master_tbl_seg1_f2;
  
  nvi_gsm_1900_amam_master_tbl_seg2_f2_type        gsm_1900_amam_master_tbl_seg2_f2;
  
  nvi_gsm_1900_amam_master_tbl_seg3_f2_type        gsm_1900_amam_master_tbl_seg3_f2;
  
  nvi_gsm_1900_amam_master_tbl_seg4_f2_type        gsm_1900_amam_master_tbl_seg4_f2;
  
  nvi_gsm_1900_amam_master_tbl_seg5_f2_type        gsm_1900_amam_master_tbl_seg5_f2;
  
  nvi_gsm_1900_amam_master_tbl_seg6_f2_type        gsm_1900_amam_master_tbl_seg6_f2;
  
  nvi_gsm_1900_amam_master_tbl_seg7_f2_type        gsm_1900_amam_master_tbl_seg7_f2;
  
  nvi_gsm_1900_amam_master_tbl_seg8_f2_type        gsm_1900_amam_master_tbl_seg8_f2;
  
  nvi_gsm_ampm_master_tbl_seg1_f1_type             gsm_ampm_master_tbl_seg1_f1;
  
  nvi_gsm_ampm_master_tbl_seg2_f1_type             gsm_ampm_master_tbl_seg2_f1;
  
  nvi_gsm_ampm_master_tbl_seg3_f1_type             gsm_ampm_master_tbl_seg3_f1;
  
  nvi_gsm_ampm_master_tbl_seg4_f1_type             gsm_ampm_master_tbl_seg4_f1;
  
  nvi_gsm_ampm_master_tbl_seg5_f1_type             gsm_ampm_master_tbl_seg5_f1;
  
  nvi_gsm_ampm_master_tbl_seg6_f1_type             gsm_ampm_master_tbl_seg6_f1;
  
  nvi_gsm_ampm_master_tbl_seg7_f1_type             gsm_ampm_master_tbl_seg7_f1;
  
  nvi_gsm_ampm_master_tbl_seg8_f1_type             gsm_ampm_master_tbl_seg8_f1;
  
  nvi_dcs_ampm_master_tbl_seg1_f1_type             dcs_ampm_master_tbl_seg1_f1;
  
  nvi_dcs_ampm_master_tbl_seg2_f1_type             dcs_ampm_master_tbl_seg2_f1;
  
  nvi_dcs_ampm_master_tbl_seg3_f1_type             dcs_ampm_master_tbl_seg3_f1;
  
  nvi_dcs_ampm_master_tbl_seg4_f1_type             dcs_ampm_master_tbl_seg4_f1;
  
  nvi_dcs_ampm_master_tbl_seg5_f1_type             dcs_ampm_master_tbl_seg5_f1;
  
  nvi_dcs_ampm_master_tbl_seg6_f1_type             dcs_ampm_master_tbl_seg6_f1;
  
  nvi_dcs_ampm_master_tbl_seg7_f1_type             dcs_ampm_master_tbl_seg7_f1;
  
  nvi_dcs_ampm_master_tbl_seg8_f1_type             dcs_ampm_master_tbl_seg8_f1;
  
  nvi_gsm_850_ampm_master_tbl_seg1_f1_type         gsm_850_ampm_master_tbl_seg1_f1;
  
  nvi_gsm_850_ampm_master_tbl_seg2_f1_type         gsm_850_ampm_master_tbl_seg2_f1;
  
  nvi_gsm_850_ampm_master_tbl_seg3_f1_type         gsm_850_ampm_master_tbl_seg3_f1;
  
  nvi_gsm_850_ampm_master_tbl_seg4_f1_type         gsm_850_ampm_master_tbl_seg4_f1;
  
  nvi_gsm_850_ampm_master_tbl_seg5_f1_type         gsm_850_ampm_master_tbl_seg5_f1;
  
  nvi_gsm_850_ampm_master_tbl_seg6_f1_type         gsm_850_ampm_master_tbl_seg6_f1;
  
  nvi_gsm_850_ampm_master_tbl_seg7_f1_type         gsm_850_ampm_master_tbl_seg7_f1;
  
  nvi_gsm_850_ampm_master_tbl_seg8_f1_type         gsm_850_ampm_master_tbl_seg8_f1;
  
  nvi_gsm_1900_ampm_master_tbl_seg1_f1_type        gsm_1900_ampm_master_tbl_seg1_f1;
  
  nvi_gsm_1900_ampm_master_tbl_seg2_f1_type        gsm_1900_ampm_master_tbl_seg2_f1;
  
  nvi_gsm_1900_ampm_master_tbl_seg3_f1_type        gsm_1900_ampm_master_tbl_seg3_f1;
  
  nvi_gsm_1900_ampm_master_tbl_seg4_f1_type        gsm_1900_ampm_master_tbl_seg4_f1;
  
  nvi_gsm_1900_ampm_master_tbl_seg5_f1_type        gsm_1900_ampm_master_tbl_seg5_f1;
  
  nvi_gsm_1900_ampm_master_tbl_seg6_f1_type        gsm_1900_ampm_master_tbl_seg6_f1;
  
  nvi_gsm_1900_ampm_master_tbl_seg7_f1_type        gsm_1900_ampm_master_tbl_seg7_f1;
  
  nvi_gsm_1900_ampm_master_tbl_seg8_f1_type        gsm_1900_ampm_master_tbl_seg8_f1;
  
  nvi_gsm_ampm_master_tbl_seg1_f2_type             gsm_ampm_master_tbl_seg1_f2;
  
  nvi_gsm_ampm_master_tbl_seg2_f2_type             gsm_ampm_master_tbl_seg2_f2;
  
  nvi_gsm_ampm_master_tbl_seg3_f2_type             gsm_ampm_master_tbl_seg3_f2;
  
  nvi_gsm_ampm_master_tbl_seg4_f2_type             gsm_ampm_master_tbl_seg4_f2;
  
  nvi_gsm_ampm_master_tbl_seg5_f2_type             gsm_ampm_master_tbl_seg5_f2;
  
  nvi_gsm_ampm_master_tbl_seg6_f2_type             gsm_ampm_master_tbl_seg6_f2;
  
  nvi_gsm_ampm_master_tbl_seg7_f2_type             gsm_ampm_master_tbl_seg7_f2;
  
  nvi_gsm_ampm_master_tbl_seg8_f2_type             gsm_ampm_master_tbl_seg8_f2;
  
  nvi_dcs_ampm_master_tbl_seg1_f2_type             dcs_ampm_master_tbl_seg1_f2;
  
  nvi_dcs_ampm_master_tbl_seg2_f2_type             dcs_ampm_master_tbl_seg2_f2;
  
  nvi_dcs_ampm_master_tbl_seg3_f2_type             dcs_ampm_master_tbl_seg3_f2;
  
  nvi_dcs_ampm_master_tbl_seg4_f2_type             dcs_ampm_master_tbl_seg4_f2;
  
  nvi_dcs_ampm_master_tbl_seg5_f2_type             dcs_ampm_master_tbl_seg5_f2;
  
  nvi_dcs_ampm_master_tbl_seg6_f2_type             dcs_ampm_master_tbl_seg6_f2;
  
  nvi_dcs_ampm_master_tbl_seg7_f2_type             dcs_ampm_master_tbl_seg7_f2;
  
  nvi_dcs_ampm_master_tbl_seg8_f2_type             dcs_ampm_master_tbl_seg8_f2;
  
  nvi_gsm_850_ampm_master_tbl_seg1_f2_type         gsm_850_ampm_master_tbl_seg1_f2;
  
  nvi_gsm_850_ampm_master_tbl_seg2_f2_type         gsm_850_ampm_master_tbl_seg2_f2;
  
  nvi_gsm_850_ampm_master_tbl_seg3_f2_type         gsm_850_ampm_master_tbl_seg3_f2;
  
  nvi_gsm_850_ampm_master_tbl_seg4_f2_type         gsm_850_ampm_master_tbl_seg4_f2;
  
  nvi_gsm_850_ampm_master_tbl_seg5_f2_type         gsm_850_ampm_master_tbl_seg5_f2;
  
  nvi_gsm_850_ampm_master_tbl_seg6_f2_type         gsm_850_ampm_master_tbl_seg6_f2;
  
  nvi_gsm_850_ampm_master_tbl_seg7_f2_type         gsm_850_ampm_master_tbl_seg7_f2;
  
  nvi_gsm_850_ampm_master_tbl_seg8_f2_type         gsm_850_ampm_master_tbl_seg8_f2;
  
  nvi_gsm_1900_ampm_master_tbl_seg1_f2_type        gsm_1900_ampm_master_tbl_seg1_f2;
  
  nvi_gsm_1900_ampm_master_tbl_seg2_f2_type        gsm_1900_ampm_master_tbl_seg2_f2;
  
  nvi_gsm_1900_ampm_master_tbl_seg3_f2_type        gsm_1900_ampm_master_tbl_seg3_f2;
  
  nvi_gsm_1900_ampm_master_tbl_seg4_f2_type        gsm_1900_ampm_master_tbl_seg4_f2;
  
  nvi_gsm_1900_ampm_master_tbl_seg5_f2_type        gsm_1900_ampm_master_tbl_seg5_f2;
  
  nvi_gsm_1900_ampm_master_tbl_seg6_f2_type        gsm_1900_ampm_master_tbl_seg6_f2;
  
  nvi_gsm_1900_ampm_master_tbl_seg7_f2_type        gsm_1900_ampm_master_tbl_seg7_f2;
  
  nvi_gsm_1900_ampm_master_tbl_seg8_f2_type        gsm_1900_ampm_master_tbl_seg8_f2;
  
  nvi_int16_type                                   gsm_calpath_rsb_a_g1;
  
  nvi_int16_type                                   gsm_calpath_rsb_b_g1;
  
  nvi_int16_type                                   gsm_850_calpath_rsb_a_g1;
  
  nvi_int16_type                                   gsm_850_calpath_rsb_b_g1;
  
  nvi_int16_type                                   dcs_calpath_rsb_a_g1;
  
  nvi_int16_type                                   dcs_calpath_rsb_b_g1;
  
  nvi_int16_type                                   gsm_1900_calpath_rsb_a_g1;
  
  nvi_int16_type                                   gsm_1900_calpath_rsb_b_g1;
  
  nvi_int16_type                                   gsm_calpath_rsb_a_g2;
  
  nvi_int16_type                                   gsm_calpath_rsb_b_g2;
  
  nvi_int16_type                                   gsm_850_calpath_rsb_a_g2;
  
  nvi_int16_type                                   gsm_850_calpath_rsb_b_g2;
  
  nvi_int16_type                                   dcs_calpath_rsb_a_g2;
  
  nvi_int16_type                                   dcs_calpath_rsb_b_g2;
  
  nvi_int16_type                                   gsm_1900_calpath_rsb_a_g2;
  
  nvi_int16_type                                   gsm_1900_calpath_rsb_b_g2;
  
  nvi_int16_type                                   gsm_amam_gain_low_temp;
  
  nvi_int16_type                                   gsm_amam_dc_low_temp;
  
  nvi_int16_type                                   gsm_amam_gain_high_temp;
  
  nvi_int16_type                                   gsm_amam_dc_high_temp;
  
  nvi_int16_type                                   gsm_amam_gain_nom_temp;
  
  nvi_int16_type                                   gsm_amam_dc_nom_temp;
  
  nvi_int16_type                                   gsm_850_amam_gain_low_temp;
  
  nvi_int16_type                                   gsm_850_amam_dc_low_temp;
  
  nvi_int16_type                                   gsm_850_amam_gain_high_temp;
  
  nvi_int16_type                                   gsm_850_amam_dc_high_temp;
  
  nvi_int16_type                                   gsm_850_amam_gain_nom_temp;
  
  nvi_int16_type                                   gsm_850_amam_dc_nom_temp;
  
  nvi_int16_type                                   dcs_amam_gain_low_temp;
  
  nvi_int16_type                                   dcs_amam_dc_low_temp;
  
  nvi_int16_type                                   dcs_amam_gain_high_temp;
  
  nvi_int16_type                                   dcs_amam_dc_high_temp;
  
  nvi_int16_type                                   dcs_amam_gain_nom_temp;
  
  nvi_int16_type                                   dcs_amam_dc_nom_temp;
  
  nvi_int16_type                                   gsm_1900_amam_gain_low_temp;
  
  nvi_int16_type                                   gsm_1900_amam_dc_low_temp;
  
  nvi_int16_type                                   gsm_1900_amam_gain_high_temp;
  
  nvi_int16_type                                   gsm_1900_amam_dc_high_temp;
  
  nvi_int16_type                                   gsm_1900_amam_gain_nom_temp;
  
  nvi_int16_type                                   gsm_1900_amam_dc_nom_temp;
  
  nvi_gsm_amam_arfcn_type                          gsm_amam_arfcn;
  
  nvi_dcs_amam_arfcn_type                          dcs_amam_arfcn;
  
  nvi_gsm_850_amam_arfcn_type                      gsm_850_amam_arfcn;
  
  nvi_gsm_1900_amam_arfcn_type                     gsm_1900_amam_arfcn;
  
  nvi_uint32_type                                  abnormal_exit_count;
  
  nvi_uint16_type                                  wcdma_pa_range_for_dvs;
  
  nvi_wcdma_pa_compensate_up_with_dvs_type         wcdma_pa_compensate_up_with_dvs;
  
  nvi_wcdma_pa_compensate_dn_with_dvs_type         wcdma_pa_compensate_dn_with_dvs;
  
  nvi_uint16_type                                  wcdma_1900_pa_range_for_dvs;
  
  nvi_wcdma_1900_pa_compensate_up_with_dvs_type    wcdma_1900_pa_compensate_up_with_dvs;
  
  nvi_wcdma_1900_pa_compensate_dn_with_dvs_type    wcdma_1900_pa_compensate_dn_with_dvs;
  
  nvi_uint16_type                                  wcdma_800_pa_range_for_dvs;
  
  nvi_wcdma_800_pa_compensate_up_with_dvs_type     wcdma_800_pa_compensate_up_with_dvs;
  
  nvi_wcdma_800_pa_compensate_dn_with_dvs_type     wcdma_800_pa_compensate_dn_with_dvs;
  
  nvi_wcdma_max_pwr_backoff_voltages_type          wcdma_max_pwr_backoff_voltages;
  
  nvi_wcdma_max_pwr_backoff_volt1_type             wcdma_max_pwr_backoff_volt1;
  
  nvi_wcdma_max_pwr_backoff_volt2_type             wcdma_max_pwr_backoff_volt2;
  
  nvi_wcdma_max_pwr_backoff_volt3_type             wcdma_max_pwr_backoff_volt3;
  
  nvi_wcdma_1900_max_pwr_backoff_voltages_type     wcdma_1900_max_pwr_backoff_voltages;
  
  nvi_wcdma_1900_max_pwr_backoff_volt1_type        wcdma_1900_max_pwr_backoff_volt1;
  
  nvi_wcdma_1900_max_pwr_backoff_volt2_type        wcdma_1900_max_pwr_backoff_volt2;
  
  nvi_wcdma_1900_max_pwr_backoff_volt3_type        wcdma_1900_max_pwr_backoff_volt3;
  
  nvi_wcdma_800_max_pwr_backoff_voltages_type      wcdma_800_max_pwr_backoff_voltages;
  
  nvi_wcdma_800_max_pwr_backoff_volt1_type         wcdma_800_max_pwr_backoff_volt1;
  
  nvi_wcdma_800_max_pwr_backoff_volt2_type         wcdma_800_max_pwr_backoff_volt2;
  
  nvi_wcdma_800_max_pwr_backoff_volt3_type         wcdma_800_max_pwr_backoff_volt3;
  
  nvi_int16_type                                   wcdma_hs_r1_rise;
  
  nvi_int16_type                                   wcdma_hs_r1_fall;
  
  nvi_int16_type                                   wcdma_hs_r2_rise;
  
  nvi_int16_type                                   wcdma_hs_r2_fall;
  
  nvi_int16_type                                   wcdma_hs_r3_rise;
  
  nvi_int16_type                                   wcdma_hs_r3_fall;
  
  nvi_int16_type                                   wcdma_1900_hs_r1_rise;
  
  nvi_int16_type                                   wcdma_1900_hs_r1_fall;
  
  nvi_int16_type                                   wcdma_1900_hs_r2_rise;
  
  nvi_int16_type                                   wcdma_1900_hs_r2_fall;
  
  nvi_int16_type                                   wcdma_1900_hs_r3_rise;
  
  nvi_int16_type                                   wcdma_1900_hs_r3_fall;
  
  nvi_int16_type                                   wcdma_800_hs_r1_rise;
  
  nvi_int16_type                                   wcdma_800_hs_r1_fall;
  
  nvi_int16_type                                   wcdma_800_hs_r2_rise;
  
  nvi_int16_type                                   wcdma_800_hs_r2_fall;
  
  nvi_int16_type                                   wcdma_800_hs_r3_rise;
  
  nvi_int16_type                                   wcdma_800_hs_r3_fall;
  
  nvi_autocal_pwr_dac_type                         gsm_autocal_pwr_dac_f1;
  
  nvi_amam_dynamic_range                           gsm_amam_dynamic_range;
  
  nvi_autocal_pwr_dac_type                         dcs_autocal_pwr_dac_f1;
  
  nvi_amam_dynamic_range                           dcs_amam_dynamic_range;
  
  nvi_autocal_pwr_dac_type                         gsm_850_autocal_pwr_dac_f1;
  
  nvi_amam_dynamic_range                           gsm_850_amam_dynamic_range;
  
  nvi_autocal_pwr_dac_type                         gsm_1900_autocal_pwr_dac_f1;
  
  nvi_amam_dynamic_range                           gsm_1900_amam_dynamic_range;
  
  nvi_calpath_rsb_type                             gsm_calpath_rsb;
  
  nvi_calpath_rsb_type                             dcs_calpath_rsb;
  
  nvi_calpath_rsb_type                             gsm_850_calpath_rsb;
  
  nvi_calpath_rsb_type                             gsm_1900_calpath_rsb;
  
  nvi_amam_sys_gain_dc_corr                        gsm_amam_sys_gain_dc_corr;
  
  nvi_amam_sys_gain_dc_corr                        gsm_850_amam_sys_gain_dc_corr;
  
  nvi_amam_sys_gain_dc_corr                        dcs_amam_sys_gain_dc_corr;
  
  nvi_amam_sys_gain_dc_corr                        gsm_1900_amam_sys_gain_dc_corr;
  
  nvi_uint16_type                                  gsm_amam_arfcn_f1;
  
  nvi_uint16_type                                  dcs_amam_arfcn_f1;
  
  nvi_uint16_type                                  gsm_850_amam_arfcn_f1;
  
  nvi_uint16_type                                  gsm_1900_amam_arfcn_f1;
  
  nvi_uint16_type                                  gsm_amam_arfcn_f2;
  
  nvi_uint16_type                                  dcs_amam_arfcn_f2;
  
  nvi_uint16_type                                  gsm_850_amam_arfcn_f2;
  
  nvi_uint16_type                                  gsm_1900_amam_arfcn_f2;
  
  nvi_autocal_pwr_dac_type                         gsm_autocal_pwr_dac_f2;
  
  nvi_autocal_pwr_dac_type                         dcs_autocal_pwr_dac_f2;
  
  nvi_autocal_pwr_dac_type                         gsm_850_autocal_pwr_dac_f2;
  
  nvi_autocal_pwr_dac_type                         gsm_1900_autocal_pwr_dac_f2;
  
  nvi_int16_type                                   gsm_polar_path_delay;
  
  nvi_int16_type                                   dcs_polar_path_delay;
  
  nvi_int16_type                                   gsm_850_polar_path_delay;
  
  nvi_int16_type                                   gsm_1900_polar_path_delay;
  
  nvi_uint8_type                                   gsm_opll_bw_val;
  
  nvi_uint8_type                                   dcs_opll_bw_val;
  
  nvi_uint8_type                                   gsm_850_opll_bw_val;
  
  nvi_uint8_type                                   gsm_1900_opll_bw_val;
  
  nvi_uint8_type                                   gsm_baseband_bw_val;
  
  nvi_uint8_type                                   dcs_baseband_bw_val;
  
  nvi_uint8_type                                   gsm_850_baseband_bw_val;
  
  nvi_uint8_type                                   gsm_1900_baseband_bw_val;
  
  nvi_enum_type                                    usb_current_device;
  
  nvi_uint8_type                                   gps1_min_num_svs;
  
  nvi_uint32_type                                  aagps_default_allow_rrc;
  
  nvi_uint32_type                                  aagps_default_mtlr_guard_timer;
  
  nvi_uint32_type                                  aagps_default_smlc_comm_timeout;
  
  nvi_uint32_type                                  aagps_default_presupl_ue_timer1_value;
  
  nvi_uint32_type                                  aagps_default_presupl_ue_timer2_value;
  
  nvi_uint32_type                                  aagps_default_presupl_ue_timer3_value;
  
  nvi_enum_type                                    active_epzid_type;
  
  nvi_c0_bc0_rx_cal_chan_lru_type                  c0_bc0_rx_cal_chan_lru;
  
  nvi_c1_bc0_rx_cal_chan_lru_type                  c1_bc0_rx_cal_chan_lru;
  
  nvi_c0_bc1_rx_cal_chan_lru_type                  c0_bc1_rx_cal_chan_lru;
  
  nvi_c1_bc1_rx_cal_chan_lru_type                  c1_bc1_rx_cal_chan_lru;
  
  nvi_c0_bc3_rx_cal_chan_lru_type                  c0_bc3_rx_cal_chan_lru;
  
  nvi_c1_bc3_rx_cal_chan_lru_type                  c1_bc3_rx_cal_chan_lru;
  
  nvi_c0_bc4_rx_cal_chan_lru_type                  c0_bc4_rx_cal_chan_lru;
  
  nvi_c1_bc4_rx_cal_chan_lru_type                  c1_bc4_rx_cal_chan_lru;
  
  nvi_c0_bc5_rx_cal_chan_lru_type                  c0_bc5_rx_cal_chan_lru;
  
  nvi_c1_bc5_rx_cal_chan_lru_type                  c1_bc5_rx_cal_chan_lru;
  
  nvi_c0_bc6_rx_cal_chan_lru_type                  c0_bc6_rx_cal_chan_lru;
  
  nvi_c1_bc6_rx_cal_chan_lru_type                  c1_bc6_rx_cal_chan_lru;
  
  nvi_uint8_type                                   ccm_version_info;
  
  nvi_uint32_type                                  turnoff_counter;
  
  nvi_boolean_type                                 powerdown_status;
  
  nvi_uint8_type                                   phone_power_on_status;
  
  nvi_uint32_type                                  first_power_on_time;
  
  nvi_sw_version_info_type                         sw_version_info;
  
  nvi_enum_type                                    set_date_format;
  
  nvi_enum_type                                    set_time_format;
  
  nvi_boolean_type                                 set_show_time;
  
  nvi_boolean_type                                 set_auto_time;
  
  nvi_boolean_type                                 set_buddhist_year;
  
  nvi_bc0_hdr_p1_rise_fall_off_type                bc0_hdr_p1_rise_fall_off;
  
  nvi_bc1_hdr_p1_rise_fall_off_type                bc1_hdr_p1_rise_fall_off;
  
  nvi_bc3_hdr_p1_rise_fall_off_type                bc3_hdr_p1_rise_fall_off;
  
  nvi_bc4_hdr_p1_rise_fall_off_type                bc4_hdr_p1_rise_fall_off;
  
  nvi_bc5_hdr_p1_rise_fall_off_type                bc5_hdr_p1_rise_fall_off;
  
  nvi_bc6_hdr_p1_rise_fall_off_type                bc6_hdr_p1_rise_fall_off;
  
  nvi_uint32_type                                  ds_incoming_data_rlp_timeout;
  
  nvi_uint32_type                                  ds_default_inactivity_restore_timeout;
  
  nvi_enum_type                                    chg_usb_nvdisable_val;
  
  nvi_uint8_type                                   consortium_config;
  
  nvi_ds_mip_rm_nai_type                           ds_mip_rm_nai;
  
  nvi_sms_bmc_reading_pref_type                    sms_bmc_reading_pref;
  
  nvi_int16_type                                   voc_hs_mic_gain_adjust;
  
  nvi_int32_type                                   auto_power_off;
  
  nvi_boolean_type                                 fast_search;
  
  nvi_boolean_type                                 uploadmedia_album_menu_enabled;
  
  nvi_uploadmedia_album_addr_type                  uploadmedia_album_addr;
  
  nvi_boolean_type                                 uploadmedia_postcard_menu_enabled;
  
  nvi_uint8_type                                   uploadmedia_postcard_separator;
  
  nvi_uploadmedia_postcard_addr_type               uploadmedia_postcard_addr;
  
  nvi_uint16_type                                  uploadmedia_postcard_max_characters;
  
  nvi_uint8_type                                   uploadmedia_postcard_max_recipients;
  
  nvi_boolean_type                                 uploadmedia_postcard_auto_save;
  
  nvi_uint8_type                                   email_active_profile;
  
  nvi_boolean_type                                 bt_active;
  
  nvi_boolean_type                                 bt_visible;
  
  nvi_boolean_type                                 bt_sap_enable;
  
  nvi_enum_type                                    wclock_auto_nitz_zone_dst;
  
  nvi_enum_type                                    timezone;
  
  nvi_uint32_type                                  hdrscp_bcmcs_enable;
  
  nvi_int16_type                                   wcdma_1800_vga_gain_offset;
  
  nvi_wcdma_1800_vga_gain_offset_vs_freq_type      wcdma_1800_vga_gain_offset_vs_freq;
  
  nvi_wcdma_1800_vga_gain_offset_vs_temp_type      wcdma_1800_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   wcdma_1800_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_1800_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_1800_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_1800_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_1800_im_level_2;
  
  nvi_int16_type                                   wcdma_1800_im_level_3;
  
  nvi_int16_type                                   wcdma_1800_lna_range_offset_2;
  
  nvi_int16_type                                   wcdma_1800_lna_range_offset_3;
  
  nvi_wcdma_1800_lna_offset_vs_freq_2_type         wcdma_1800_lna_offset_vs_freq_2;
  
  nvi_wcdma_1800_lna_offset_vs_freq_3_type         wcdma_1800_lna_offset_vs_freq_3;
  
  nvi_uint8_type                                   wcdma_1800_im2_i_value;
  
  nvi_uint8_type                                   wcdma_1800_im2_q_value;
  
  nvi_uint8_type                                   wcdma_1800_im2_transconductor_value;
  
  nvi_int16_type                                   wcdma_1800_rx_agc_min_2;
  
  nvi_int16_type                                   wcdma_1800_rx_agc_min_3;
  
  nvi_int16_type                                   wcdma_1800_lna_range_rise;
  
  nvi_int16_type                                   wcdma_1800_lna_range_fall;
  
  nvi_int16_type                                   wcdma_1800_im_level;
  
  nvi_uint8_type                                   wcdma_1800_nonbypass_timer;
  
  nvi_uint16_type                                  wcdma_1800_bypass_timer;
  
  nvi_int16_type                                   wcdma_1800_lna_range_offset;
  
  nvi_wcdma_1800_lna_offset_vs_freq_type           wcdma_1800_lna_offset_vs_freq;
  
  nvi_int16_type                                   wcdma_1800_rx_agc_min;
  
  nvi_int16_type                                   wcdma_1800_rx_agc_max;
  
  nvi_uint8_type                                   wcdma_1800_agc_phase_offset;
  
  nvi_wcdma_1800_tx_lin_master_0_type              wcdma_1800_tx_lin_master_0;
  
  nvi_wcdma_1800_tx_lin_master_1_type              wcdma_1800_tx_lin_master_1;
  
  nvi_wcdma_1800_tx_lin_master_2_type              wcdma_1800_tx_lin_master_2;
  
  nvi_wcdma_1800_tx_lin_master_3_type              wcdma_1800_tx_lin_master_3;
  
  nvi_wcdma_1800_tx_comp_vs_freq_0_type            wcdma_1800_tx_comp_vs_freq_0;
  
  nvi_wcdma_1800_tx_comp_vs_freq_1_type            wcdma_1800_tx_comp_vs_freq_1;
  
  nvi_wcdma_1800_tx_comp_vs_freq_2_type            wcdma_1800_tx_comp_vs_freq_2;
  
  nvi_wcdma_1800_tx_comp_vs_freq_3_type            wcdma_1800_tx_comp_vs_freq_3;
  
  nvi_wcdma_1800_tx_lin_vs_temp_0_type             wcdma_1800_tx_lin_vs_temp_0;
  
  nvi_wcdma_1800_tx_lin_vs_temp_1_type             wcdma_1800_tx_lin_vs_temp_1;
  
  nvi_wcdma_1800_tx_lin_vs_temp_2_type             wcdma_1800_tx_lin_vs_temp_2;
  
  nvi_wcdma_1800_tx_lin_vs_temp_3_type             wcdma_1800_tx_lin_vs_temp_3;
  
  nvi_wcdma_1800_tx_slp_vs_temp_0_type             wcdma_1800_tx_slp_vs_temp_0;
  
  nvi_wcdma_1800_tx_slp_vs_temp_1_type             wcdma_1800_tx_slp_vs_temp_1;
  
  nvi_wcdma_1800_tx_slp_vs_temp_2_type             wcdma_1800_tx_slp_vs_temp_2;
  
  nvi_wcdma_1800_tx_slp_vs_temp_3_type             wcdma_1800_tx_slp_vs_temp_3;
  
  nvi_uint16_type                                  wcdma_1800_r1_rise;
  
  nvi_uint16_type                                  wcdma_1800_r1_fall;
  
  nvi_wcdma_1800_tx_lim_vs_temp_type               wcdma_1800_tx_lim_vs_temp;
  
  nvi_wcdma_1800_tx_lim_vs_freq_type               wcdma_1800_tx_lim_vs_freq;
  
  nvi_uint8_type                                   wcdma_1800_adj_factor;
  
  nvi_wcdma_1800_exp_hdet_vs_agc_type              wcdma_1800_exp_hdet_vs_agc;
  
  nvi_uint8_type                                   wcdma_1800_hdet_off;
  
  nvi_uint8_type                                   wcdma_1800_hdet_spn;
  
  nvi_int8_type                                    wcdma_1800_max_tx_power;
  
  nvi_int16_type                                   wcdma_1800_out_of_service_thresh;
  
  nvi_uint32_type                                  wcdma_1800_enc_btf;
  
  nvi_int16_type                                   wcdma_1800_rx_delay;
  
  nvi_uint16_type                                  wcdma_1800_agc_pa_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_1800_agc_pa_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_1800_agc_tx_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_1800_agc_tx_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_1800_agc_update_tx_agc_time;
  
  nvi_int16_type                                   wcdma_1800_pa_gain_up_time;
  
  nvi_int16_type                                   wcdma_1800_pa_gain_down_time;
  
  nvi_uint16_type                                  wcdma_1800_tx_rot_angle_pa_state_00;
  
  nvi_uint16_type                                  wcdma_1800_tx_rot_angle_pa_state_01;
  
  nvi_uint16_type                                  wcdma_1800_tx_rot_angle_pa_state_10;
  
  nvi_uint16_type                                  wcdma_1800_tx_rot_angle_pa_state_11;
  
  nvi_rfr_vco_coarse_tuning_1800_type              rfr_vco_coarse_tuning_1800;
  
  nvi_int16_type                                   wcdma_1800_pa_compensate_up;
  
  nvi_int16_type                                   wcdma_1800_pa_compensate_down;
  
  nvi_int16_type                                   wcdma_1800_prach_r1_rise_offset;
  
  nvi_int16_type                                   wcdma_1800_prach_r1_fall_offset;
  
  nvi_wcdma_1800_tx_cal_chan_type                  wcdma_1800_tx_cal_chan;
  
  nvi_wcdma_1800_rx_cal_chan_type                  wcdma_1800_rx_cal_chan;
  
  nvi_uint16_type                                  wcdma_1800_r2_rise;
  
  nvi_uint16_type                                  wcdma_1800_r2_fall;
  
  nvi_uint16_type                                  wcdma_1800_r3_rise;
  
  nvi_uint16_type                                  wcdma_1800_r3_fall;
  
  nvi_int16_type                                   wcdma_1800_pa_compensate_up_r2;
  
  nvi_int16_type                                   wcdma_1800_pa_compensate_down_r2;
  
  nvi_int16_type                                   wcdma_1800_pa_compensate_up_r3;
  
  nvi_int16_type                                   wcdma_1800_pa_compensate_down_r3;
  
  nvi_int16_type                                   wcdma_1800_prach_r2_rise_offset;
  
  nvi_int16_type                                   wcdma_1800_prach_r2_fall_offset;
  
  nvi_int16_type                                   wcdma_1800_prach_r3_rise_offset;
  
  nvi_int16_type                                   wcdma_1800_prach_r3_fall_offset;
  
  nvi_wcdma_1800_pa_range_map_type                 wcdma_1800_pa_range_map;
  
  nvi_uint16_type                                  wcdma_1800_pa_range_for_dvs;
  
  nvi_wcdma_1800_pa_compensate_up_with_dvs_type    wcdma_1800_pa_compensate_up_with_dvs;
  
  nvi_wcdma_1800_pa_compensate_dn_with_dvs_type    wcdma_1800_pa_compensate_dn_with_dvs;
  
  nvi_wcdma_1800_max_pwr_backoff_voltages_type     wcdma_1800_max_pwr_backoff_voltages;
  
  nvi_wcdma_1800_max_pwr_backoff_volt1_type        wcdma_1800_max_pwr_backoff_volt1;
  
  nvi_wcdma_1800_max_pwr_backoff_volt2_type        wcdma_1800_max_pwr_backoff_volt2;
  
  nvi_wcdma_1800_max_pwr_backoff_volt3_type        wcdma_1800_max_pwr_backoff_volt3;
  
  nvi_int16_type                                   wcdma_1800_hs_r1_rise;
  
  nvi_int16_type                                   wcdma_1800_hs_r1_fall;
  
  nvi_int16_type                                   wcdma_1800_hs_r2_rise;
  
  nvi_int16_type                                   wcdma_1800_hs_r2_fall;
  
  nvi_int16_type                                   wcdma_1800_hs_r3_rise;
  
  nvi_int16_type                                   wcdma_1800_hs_r3_fall;
  
  nvi_int16_type                                   wcdma_1800_dch_agc_update_tx_agc_time;
  
  nvi_int16_type                                   wcdma_1800_agc_tx_adj_pdm_delay;
  
  nvi_int16_type                                   wcdma_1900_dch_agc_update_tx_agc_time;
  
  nvi_int16_type                                   wcdma_1900_agc_tx_adj_pdm_delay;
  
  nvi_int16_type                                   wcdma_800_dch_agc_update_tx_agc_time;
  
  nvi_int16_type                                   wcdma_800_agc_tx_adj_pdm_delay;
  
  nvi_int16_type                                   wcdma_dch_agc_update_tx_agc_time;
  
  nvi_int16_type                                   wcdma_agc_tx_adj_pdm_delay;
  
  nvi_ds_sip_rm_nai_type                           ds_sip_rm_nai;
  
  nvi_band_pref_32_63_type                         band_pref_32_63;
  
  nvi_uint16_type                                  mms_max_msg_size1;
  
  nvi_uint16_type                                  mms_max_msg_size2;
  
  nvi_uint16_type                                  mms_max_msg_size3;
  
  nvi_boolean_type                                 mms_max_size_user_selectable;
  
  nvi_uint8_type                                   mms_active_max_msg_size;
  
  nvi_uint8_type                                   mms_active_profile;
  
  nvi_enum_type                                    mms_hide_number;
  
  nvi_boolean_type                                 mms_req_delivery_rpt;
  
  nvi_boolean_type                                 mms_req_read_rpt;
  
  nvi_enum_type                                    mms_priority;
  
  nvi_enum_type                                    mms_validity_period;
  
  nvi_enum_type                                    mms_slide_duration;
  
  nvi_enum_type                                    mms_retrieval_home;
  
  nvi_enum_type                                    mms_retrieval_roam;
  
  nvi_enum_type                                    mms_delivery_time;
  
  nvi_boolean_type                                 mms_allow_anon_msg;
  
  nvi_enum_type                                    mms_creation_mode;
  
  nvi_boolean_type                                 mms_autosig;
  
  nvi_boolean_type                                 mms_auto_save;
  
  nvi_boolean_type                                 mms_allow_read_rpt;
  
  nvi_boolean_type                                 mms_allow_delivery_rpt;
  
  nvi_uint8_type                                   mms_max_recipients;
  
  nvi_uint16_type                                  mms_max_stored_mms;
  
  nvi_uint8_type                                   mms_signature_active_template;
  
  nvi_boolean_type                                 bt_filelocation_ondevice;
  
  nvi_wcdma_utran_tx_lim_vs_temp_offset_type       wcdma_utran_tx_lim_vs_temp_offset;
  
  nvi_wcdma_1800_utran_tx_lim_vs_temp_offset_type  wcdma_1800_utran_tx_lim_vs_temp_offset;
  
  nvi_wcdma_800_utran_tx_lim_vs_temp_offset_type   wcdma_800_utran_tx_lim_vs_temp_offset;
  
  nvi_wcdma_1900_utran_tx_lim_vs_temp_offset_type  wcdma_1900_utran_tx_lim_vs_temp_offset;
  
  nvi_uint32_type                                  sendvia_cfg;
  
  nvi_boolean_type                                 pu_prompt_enabled;
  
  nvi_user_greeting_type                           user_greeting;
  
  nvi_enum_type                                    screensaver_style;
  
  nvi_uint32_type                                  screensaver_timeout;
  
  nvi_enum_type                                    messaging_font;
  
  nvi_uint8_type                                   syncml_dm_activeprofile;
  
  nvi_uint8_type                                   syncml_ds_activeprofile;
  
  nvi_enum_type                                    syncml_syncdirection;
  
  nvi_enum_type                                    syncml_datatosync;
  
  nvi_enum_type                                    syncml_appstosync;
  
  nvi_uint8_type                                   ms_sms_active_profile;
  
  nvi_enum_type                                    ms_sms_text_size;
  
  nvi_boolean_type                                 ms_sms_autoheader;
  
  nvi_boolean_type                                 ms_sms_autosignature;
  
  nvi_uint8_type                                   ms_sms_header_active_template;
  
  nvi_uint8_type                                   ms_sms_signature_active_template;
  
  nvi_boolean_type                                 ms_sms_autosave;
  
  nvi_boolean_type                                 ms_sms_autodelete;
  
  nvi_boolean_type                                 ms_sms_allow_emoticons;
  
  nvi_uint8_type                                   ms_sms_max_segments;
  
  nvi_uint8_type                                   ms_sms_max_recipients;
  
  nvi_uint16_type                                  ms_sms_max_number_of_sms;
  
  nvi_uint8_type                                   ms_sms_max_templates;
  
  nvi_ms_sms_opco_types_supported_type             ms_sms_opco_types_supported;
  
  nvi_ms_sms_smsc_address1_type                    ms_sms_smsc_address1;
  
  nvi_ms_sms_smsc_address2_type                    ms_sms_smsc_address2;
  
  nvi_ms_sms_smsc_address3_type                    ms_sms_smsc_address3;
  
  nvi_ms_sms_smsc_address4_type                    ms_sms_smsc_address4;
  
  nvi_ms_sms_smsc_address5_type                    ms_sms_smsc_address5;
  
  nvi_int16_type                                   wcdma_max_tx_power_dch_pc4;
  
  nvi_boolean_type                                 poc_show_pt_menu;
  
  nvi_poc_server_ip1_type                          poc_server_ip1;
  
  nvi_poc_server_ip2_type                          poc_server_ip2;
  
  nvi_uint16_type                                  poc_server_port;
  
  nvi_poc_nai_type                                 poc_nai;
  
  nvi_poc_billing_service_type                     poc_billing_service;
  
  nvi_poc_glm_password_type                        poc_glm_password;
  
  nvi_uint16_type                                  poc_rtp_port;
  
  nvi_uint16_type                                  poc_sip_port;
  
  nvi_uint8_type                                   poc_is_sig_comp;
  
  nvi_uint8_type                                   poc_max_auth_retries;
  
  nvi_uint8_type                                   poc_connection_profile;
  
  nvi_rf_antsel_umts_1800_type                     rf_antsel_umts_1800;
  
  nvi_boolean_type                                 im_show_menu;
  
  nvi_uint8_type                                   im_connection_profile;
  
  nvi_im_primary_ip_addr_type                      im_primary_ip_addr;
  
  nvi_uint16_type                                  im_primary_port;
  
  nvi_enum_type                                    im_encoding_method;
  
  nvi_im_server_name_type                          im_server_name;
  
  nvi_enum_type                                    im_wv_version;
  
  nvi_uint16_type                                  bc0_pa_dvs_voltage;
  
  nvi_uint16_type                                  bc1_pa_dvs_voltage;
  
  nvi_uint16_type                                  bc3_pa_dvs_voltage;
  
  nvi_uint16_type                                  bc4_pa_dvs_voltage;
  
  nvi_uint16_type                                  bc5_pa_dvs_voltage;
  
  nvi_uint16_type                                  bc6_pa_dvs_voltage;
  
  nvi_boolean_type                                 ext_op_list_entry_valid;
  
  nvi_ext_op_list_entry_name_type                  ext_op_list_entry_name;
  
  nvi_ext_op_list_entry_plmn_type                  ext_op_list_entry_plmn;
  
  nvi_bm_bat_stats_type                            bm_bat_stats;
  
  nvi_display_language_options_type                display_language_options;
  
  nvi_uint32_type                                  display_language;
  
  nvi_boolean_type                                 input_language_mode;
  
  nvi_input_language_options_type                  input_language_options;
  
  nvi_uint32_type                                  input_language;
  
  nvi_uint32_type                                  sys_convert_script_ver;
  
  nvi_uint32_type                                  sys_prod_spec_convert_script_ver;
  
  nvi_uint32_type                                  sys_manual_convert_script_ver;
  
  nvi_boolean_type                                 irda_active;
  
  nvi_enum_type                                    irda_file_location;
  
  nvi_gsm_power_levels_type                        gsm_power_levels;
  
  nvi_dcs_power_levels_type                        dcs_power_levels;
  
  nvi_gsm_850_power_levels_type                    gsm_850_power_levels;
  
  nvi_gsm_1900_power_levels_type                   gsm_1900_power_levels;
  
  nvi_int16_type                                   gsm_pa_en_start;
  
  nvi_int16_type                                   gsm_ant_timing_rel_to_pa_en_start;
  
  nvi_int16_type                                   dcs_pa_en_start;
  
  nvi_int16_type                                   dcs_ant_timing_rel_to_pa_en_start;
  
  nvi_int16_type                                   gsm_850_pa_en_start;
  
  nvi_int16_type                                   gsm_1900_pa_en_start;
  
  nvi_int16_type                                   gsm_1900_ant_timing_rel_to_pa_en_start;
  
  nvi_int16_type                                   gsm_pa_en_stop;
  
  nvi_int16_type                                   gsm_ant_timing_rel_to_pa_en_stop;
  
  nvi_int16_type                                   dcs_pa_en_stop;
  
  nvi_int16_type                                   dcs_ant_timing_rel_to_pa_en_stop;
  
  nvi_int16_type                                   gsm_850_pa_en_stop;
  
  nvi_int16_type                                   gsm_850_ant_timing_rel_to_pa_en_stop;
  
  nvi_int16_type                                   gsm_1900_pa_en_stop;
  
  nvi_int16_type                                   gsm_1900_ant_timing_rel_to_pa_en_stop;
  
  nvi_gsm_amam_master_tbl_seg1_f3_type             gsm_amam_master_tbl_seg1_f3;
  
  nvi_gsm_amam_master_tbl_seg2_f3_type             gsm_amam_master_tbl_seg2_f3;
  
  nvi_gsm_amam_master_tbl_seg3_f3_type             gsm_amam_master_tbl_seg3_f3;
  
  nvi_gsm_amam_master_tbl_seg4_f3_type             gsm_amam_master_tbl_seg4_f3;
  
  nvi_gsm_amam_master_tbl_seg5_f3_type             gsm_amam_master_tbl_seg5_f3;
  
  nvi_gsm_amam_master_tbl_seg6_f3_type             gsm_amam_master_tbl_seg6_f3;
  
  nvi_gsm_amam_master_tbl_seg7_f3_type             gsm_amam_master_tbl_seg7_f3;
  
  nvi_gsm_amam_master_tbl_seg8_f3_type             gsm_amam_master_tbl_seg8_f3;
  
  nvi_dcs_amam_master_tbl_seg1_f3_type             dcs_amam_master_tbl_seg1_f3;
  
  nvi_dcs_amam_master_tbl_seg2_f3_type             dcs_amam_master_tbl_seg2_f3;
  
  nvi_dcs_amam_master_tbl_seg3_f3_type             dcs_amam_master_tbl_seg3_f3;
  
  nvi_dcs_amam_master_tbl_seg4_f3_type             dcs_amam_master_tbl_seg4_f3;
  
  nvi_dcs_amam_master_tbl_seg5_f3_type             dcs_amam_master_tbl_seg5_f3;
  
  nvi_dcs_amam_master_tbl_seg6_f3_type             dcs_amam_master_tbl_seg6_f3;
  
  nvi_dcs_amam_master_tbl_seg7_f3_type             dcs_amam_master_tbl_seg7_f3;
  
  nvi_dcs_amam_master_tbl_seg8_f3_type             dcs_amam_master_tbl_seg8_f3;
  
  nvi_gsm_850_amam_master_tbl_seg1_f3_type         gsm_850_amam_master_tbl_seg1_f3;
  
  nvi_gsm_850_amam_master_tbl_seg2_f3_type         gsm_850_amam_master_tbl_seg2_f3;
  
  nvi_gsm_850_amam_master_tbl_seg3_f3_type         gsm_850_amam_master_tbl_seg3_f3;
  
  nvi_gsm_850_amam_master_tbl_seg4_f3_type         gsm_850_amam_master_tbl_seg4_f3;
  
  nvi_gsm_850_amam_master_tbl_seg5_f3_type         gsm_850_amam_master_tbl_seg5_f3;
  
  nvi_gsm_850_amam_master_tbl_seg6_f3_type         gsm_850_amam_master_tbl_seg6_f3;
  
  nvi_gsm_850_amam_master_tbl_seg7_f3_type         gsm_850_amam_master_tbl_seg7_f3;
  
  nvi_gsm_850_amam_master_tbl_seg8_f3_type         gsm_850_amam_master_tbl_seg8_f3;
  
  nvi_gsm_1900_amam_master_tbl_seg1_f3_type        gsm_1900_amam_master_tbl_seg1_f3;
  
  nvi_gsm_1900_amam_master_tbl_seg2_f3_type        gsm_1900_amam_master_tbl_seg2_f3;
  
  nvi_gsm_1900_amam_master_tbl_seg3_f3_type        gsm_1900_amam_master_tbl_seg3_f3;
  
  nvi_gsm_1900_amam_master_tbl_seg4_f3_type        gsm_1900_amam_master_tbl_seg4_f3;
  
  nvi_gsm_1900_amam_master_tbl_seg5_f3_type        gsm_1900_amam_master_tbl_seg5_f3;
  
  nvi_gsm_1900_amam_master_tbl_seg6_f3_type        gsm_1900_amam_master_tbl_seg6_f3;
  
  nvi_gsm_1900_amam_master_tbl_seg7_f3_type        gsm_1900_amam_master_tbl_seg7_f3;
  
  nvi_gsm_1900_amam_master_tbl_seg8_f3_type        gsm_1900_amam_master_tbl_seg8_f3;
  
  nvi_gsm_ampm_master_tbl_seg1_f3_type             gsm_ampm_master_tbl_seg1_f3;
  
  nvi_gsm_ampm_master_tbl_seg2_f3_type             gsm_ampm_master_tbl_seg2_f3;
  
  nvi_gsm_ampm_master_tbl_seg3_f3_type             gsm_ampm_master_tbl_seg3_f3;
  
  nvi_gsm_ampm_master_tbl_seg4_f3_type             gsm_ampm_master_tbl_seg4_f3;
  
  nvi_gsm_ampm_master_tbl_seg5_f3_type             gsm_ampm_master_tbl_seg5_f3;
  
  nvi_gsm_ampm_master_tbl_seg6_f3_type             gsm_ampm_master_tbl_seg6_f3;
  
  nvi_gsm_ampm_master_tbl_seg7_f3_type             gsm_ampm_master_tbl_seg7_f3;
  
  nvi_gsm_ampm_master_tbl_seg8_f3_type             gsm_ampm_master_tbl_seg8_f3;
  
  nvi_dcs_ampm_master_tbl_seg1_f3_type             dcs_ampm_master_tbl_seg1_f3;
  
  nvi_dcs_ampm_master_tbl_seg2_f3_type             dcs_ampm_master_tbl_seg2_f3;
  
  nvi_dcs_ampm_master_tbl_seg3_f3_type             dcs_ampm_master_tbl_seg3_f3;
  
  nvi_dcs_ampm_master_tbl_seg4_f3_type             dcs_ampm_master_tbl_seg4_f3;
  
  nvi_dcs_ampm_master_tbl_seg5_f3_type             dcs_ampm_master_tbl_seg5_f3;
  
  nvi_dcs_ampm_master_tbl_seg6_f3_type             dcs_ampm_master_tbl_seg6_f3;
  
  nvi_dcs_ampm_master_tbl_seg7_f3_type             dcs_ampm_master_tbl_seg7_f3;
  
  nvi_dcs_ampm_master_tbl_seg8_f3_type             dcs_ampm_master_tbl_seg8_f3;
  
  nvi_gsm_850_ampm_master_tbl_seg1_f3_type         gsm_850_ampm_master_tbl_seg1_f3;
  
  nvi_gsm_850_ampm_master_tbl_seg2_f3_type         gsm_850_ampm_master_tbl_seg2_f3;
  
  nvi_gsm_850_ampm_master_tbl_seg3_f3_type         gsm_850_ampm_master_tbl_seg3_f3;
  
  nvi_gsm_850_ampm_master_tbl_seg4_f3_type         gsm_850_ampm_master_tbl_seg4_f3;
  
  nvi_gsm_850_ampm_master_tbl_seg5_f3_type         gsm_850_ampm_master_tbl_seg5_f3;
  
  nvi_gsm_850_ampm_master_tbl_seg6_f3_type         gsm_850_ampm_master_tbl_seg6_f3;
  
  nvi_gsm_850_ampm_master_tbl_seg7_f3_type         gsm_850_ampm_master_tbl_seg7_f3;
  
  nvi_gsm_850_ampm_master_tbl_seg8_f3_type         gsm_850_ampm_master_tbl_seg8_f3;
  
  nvi_gsm_1900_ampm_master_tbl_seg1_f3_type        gsm_1900_ampm_master_tbl_seg1_f3;
  
  nvi_gsm_1900_ampm_master_tbl_seg2_f3_type        gsm_1900_ampm_master_tbl_seg2_f3;
  
  nvi_gsm_1900_ampm_master_tbl_seg3_f3_type        gsm_1900_ampm_master_tbl_seg3_f3;
  
  nvi_gsm_1900_ampm_master_tbl_seg4_f3_type        gsm_1900_ampm_master_tbl_seg4_f3;
  
  nvi_gsm_1900_ampm_master_tbl_seg5_f3_type        gsm_1900_ampm_master_tbl_seg5_f3;
  
  nvi_gsm_1900_ampm_master_tbl_seg6_f3_type        gsm_1900_ampm_master_tbl_seg6_f3;
  
  nvi_gsm_1900_ampm_master_tbl_seg7_f3_type        gsm_1900_ampm_master_tbl_seg7_f3;
  
  nvi_gsm_1900_ampm_master_tbl_seg8_f3_type        gsm_1900_ampm_master_tbl_seg8_f3;
  
  nvi_uint16_type                                  gsm_amam_arfcn_f3;
  
  nvi_uint16_type                                  dcs_amam_arfcn_f3;
  
  nvi_uint16_type                                  gsm_850_amam_arfcn_f3;
  
  nvi_uint16_type                                  gsm_1900_amam_arfcn_f3;
  
  nvi_autocal_pwr_dac_type                         gsm_autocal_pwr_dac_f3;
  
  nvi_autocal_pwr_dac_type                         dcs_autocal_pwr_dac_f3;
  
  nvi_autocal_pwr_dac_type                         gsm_850_autocal_pwr_dac_f3;
  
  nvi_autocal_pwr_dac_type                         gsm_1900_autocal_pwr_dac_f3;
  
  nvi_int16_type                                   gsm_850_ant_timing_rel_to_pa_en_start;
  
  nvi_rtr6250_rsb_type                             gsm_rtr6250_rsb;
  
  nvi_rtr6250_rsb_type                             dcs_rtr6250_rsb;
  
  nvi_rtr6250_rsb_type                             gsm_850_rtr6250_rsb;
  
  nvi_rtr6250_rsb_type                             gsm_1900_rtr6250_rsb;
  
  nvi_boolean_type                                 display_language_auto;
  
  nvi_boolean_type                                 input_language_auto;
  
  nvi_boolean_type                                 browser_display_splash;
  
  nvi_boolean_type                                 browser_http_referer;
  
  nvi_uint8_type                                   browser_active_profile;
  
  nvi_boolean_type                                 browser_disable_image;
  
  nvi_boolean_type                                 browser_disable_sound;
  
  nvi_boolean_type                                 browser_disable_object;
  
  nvi_enum_type                                    browser_mailto_phonenum;
  
  nvi_enum_type                                    browser_mailto_email;
  
  nvi_boolean_type                                 browser_cookie_enable;
  
  nvi_boolean_type                                 browser_secure_prompt;
  
  nvi_boolean_type                                 browser_idcache;
  
  nvi_boolean_type                                 browser_title_region;
  
  nvi_boolean_type                                 browser_showsessioninfo;
  
  nvi_enum_type                                    currently_active_profile;
  
  nvi_boolean_type                                 allow_mp3_ringers;
  
  nvi_boolean_type                                 allow_aacplus_ringers;
  
  nvi_boolean_type                                 allow_non_drm_ringers;
  
  nvi_boolean_type                                 cbs_enabled;
  
  nvi_uint16_type                                  cbs_max_topic_index;
  
  nvi_uint16_type                                  cbs_min_topic_index;
  
  nvi_boolean_type                                 cbs_allow_receive;
  
  nvi_boolean_type                                 cbs_display_cell_info;
  
  nvi_uint16_type                                  cbs_num_selected_topics;
  
  nvi_irda_device_name_type                        irda_device_name;
  
  nvi_irda_pnp_device_id_type                      irda_pnp_device_id;
  
  nvi_irda_pnp_manufacturer_type                   irda_pnp_manufacturer;
  
  nvi_irda_pnp_name_type                           irda_pnp_name;
  
  nvi_irda_pnp_device_category_type                irda_pnp_device_category;
  
  nvi_uint32_type                                  irda_pnp_compatibility_count;
  
  nvi_uint32_type                                  irda_pnp_status;
  
  nvi_uint16_type                                  irda_pnp_version;
  
  nvi_uint16_type                                  display_language_group_num;
  
  nvi_boolean_type                                 poc_auto_answer;
  
  nvi_uint16_type                                  poc_incoming_call_timeout;
  
  nvi_enum_type                                    poc_auto_login;
  
  nvi_enum_type                                    poc_wildcards;
  
  nvi_uint8_type                                   poc_history_length;
  
  nvi_boolean_type                                 poc_secondary_pdp_context;
  
  nvi_boolean_type                                 poc_early_session;
  
  nvi_boolean_type                                 poc_qos_mode;
  
  nvi_uint8_type                                   poc_max_concurrent_user_limit1;
  
  nvi_uint8_type                                   poc_max_concurrent_user_limit2;
  
  nvi_uint8_type                                   poc_max_concurrent_user_limit3;
  
  nvi_uint16_type                                  poc_buffered_packets;
  
  nvi_boolean_type                                 poc_speaker_phone;
  
  nvi_enum_type                                    im_notification;
  
  nvi_boolean_type                                 im_auto_login;
  
  nvi_im_supported_bearers_type                    im_supported_bearers;
  
  nvi_im_supported_cir_methods_type                im_supported_cir_methods;
  
  nvi_uint16_type                                  im_max_search_results;
  
  nvi_boolean_type                                 im_short_login_sequence;
  
  nvi_boolean_type                                 im_no_contacts_exist;
  
  nvi_boolean_type                                 im_send_file_disabled;
  
  nvi_boolean_type                                 im_version_discovery;
  
  nvi_enum_type                                    im_login_type;
  
  nvi_enum_type                                    im_initial_delivery_method;
  
  nvi_boolean_type                                 im_any_content;
  
  nvi_uint16_type                                  im_accepted_char_sets;
  
  nvi_uint16_type                                  im_accepted_content_types;
  
  nvi_uint16_type                                  im_accepted_transfer_encodings;
  
  nvi_uint32_type                                  im_accepted_content_length;
  
  nvi_uint32_type                                  im_parser_size;
  
  nvi_uint16_type                                  im_max_saved_conversations;
  
  nvi_uint16_type                                  im_max_concurrent_conversations;
  
  nvi_uint16_type                                  im_supported_bearer_count;
  
  nvi_uint32_type                                  im_server_port;
  
  nvi_boolean_type                                 im_hide_server;
  
  nvi_boolean_type                                 im_allow_change_server;
  
  nvi_uint8_type                                   im_internet_profile;
  
  nvi_uint32_type                                  im_knock_service_timeout;
  
  nvi_im_password_type                             im_password;
  
  nvi_im_cir_port_type                             im_cir_port;
  
  nvi_uint16_type                                  im_schema_count;
  
  nvi_uint16_type                                  im_cir_methods_count;
  
  nvi_uint32_type                                  im_multiple_transactions;
  
  nvi_im_smsc_address_type                         im_smsc_address;
  
  nvi_im_optional_header_type                      im_optional_header;
  
  nvi_im_digest_schemas_type                       im_digest_schemas;
  
  nvi_uint8_type                                   poc_limit_selection;
  
  nvi_im_userid_type                               im_userid;
  
  nvi_bc0_vco_tune_2_type                          bc0_vco_tune_2;
  
  nvi_bc1_vco_tune_2_type                          bc1_vco_tune_2;
  
  nvi_bc3_vco_tune_2_type                          bc3_vco_tune_2;
  
  nvi_bc4_vco_tune_2_type                          bc4_vco_tune_2;
  
  nvi_bc5_vco_tune_2_type                          bc5_vco_tune_2;
  
  nvi_bc6_vco_tune_2_type                          bc6_vco_tune_2;
  
  nvi_boolean_type                                 mm_enable_real;
  
  nvi_uint8_type                                   diag_debug_call_trace;
  
  nvi_uint8_type                                   enable_fasttrack;
  
  nvi_boolean_type                                 im_edit_messenger_id_pswd;
  
  nvi_boolean_type                                 im_safety_tip;
  
  nvi_im_start_string_type                         im_start_string;
  
  nvi_uint32_type                                  im_max_received_file_limit;
  
  nvi_boolean_type                                 wap_auto_connect;
  
  nvi_uint16_type                                  wap_lockout_time;
  
  nvi_uint8_type                                   diag_spc_unlock_ttl;
  
  nvi_rf_rx_im2_cal                                c0_bc0_im2_lpm_1;
  
  nvi_rf_rx_im2_cal                                c0_bc1_im2_lpm_1;
  
  nvi_rf_rx_im2_cal                                c0_bc3_im2_lpm_1;
  
  nvi_rf_rx_im2_cal                                c0_bc4_im2_lpm_1;
  
  nvi_rf_rx_im2_cal                                c0_bc5_im2_lpm_1;
  
  nvi_rf_rx_im2_cal                                c0_bc6_im2_lpm_1;
  
  nvi_rf_rx_im2_cal                                c0_bc0_im2_lpm_2;
  
  nvi_rf_rx_im2_cal                                c0_bc1_im2_lpm_2;
  
  nvi_rf_rx_im2_cal                                c0_bc3_im2_lpm_2;
  
  nvi_rf_rx_im2_cal                                c0_bc4_im2_lpm_2;
  
  nvi_rf_rx_im2_cal                                c0_bc5_im2_lpm_2;
  
  nvi_rf_rx_im2_cal                                c0_bc6_im2_lpm_2;
  
  nvi_c0_bc0_intelliceiver_cal_type                c0_bc0_intelliceiver_cal;
  
  nvi_c0_bc1_intelliceiver_cal_type                c0_bc1_intelliceiver_cal;
  
  nvi_c0_bc3_intelliceiver_cal_type                c0_bc3_intelliceiver_cal;
  
  nvi_c0_bc4_intelliceiver_cal_type                c0_bc4_intelliceiver_cal;
  
  nvi_c0_bc5_intelliceiver_cal_type                c0_bc5_intelliceiver_cal;
  
  nvi_c0_bc6_intelliceiver_cal_type                c0_bc6_intelliceiver_cal;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc0_lna_switchpoints_lpm_1;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc1_lna_switchpoints_lpm_1;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc3_lna_switchpoints_lpm_1;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc4_lna_switchpoints_lpm_1;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc5_lna_switchpoints_lpm_1;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc6_lna_switchpoints_lpm_1;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc0_lna_switchpoints_lpm_2;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc1_lna_switchpoints_lpm_2;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc3_lna_switchpoints_lpm_2;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc4_lna_switchpoints_lpm_2;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc5_lna_switchpoints_lpm_2;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc6_lna_switchpoints_lpm_2;
  
  nvi_rfr_vco_coarse_tuning_800_type               rfr_vco_coarse_tuning_800;
  
  nvi_boolean_type                                 poc_netinitdereg;
  
  nvi_uint8_type                                   poc_app_timeout;
  
  nvi_uint16_type                                  poc_registration_timeout;
  
  nvi_uint16_type                                  poc_glm_timeout;
  
  nvi_uint8_type                                   java_connection_profile_id;
  
  nvi_uint8_type                                   java_internet_profile_id;
  
  nvi_boolean_type                                 enable_ext_gps_antenna_pwr_supply;
  
  nvi_presupl_wap_gateway_address_type             presupl_wap_gateway_address;
  
  nvi_uint16_type                                  presupl_wap_gateway_port;
  
  nvi_uint8_type                                   gps1_position_report;
  
  nvi_enum_type                                    set_voice_call_tone;
  
  nvi_boolean_type                                 conn_profile_unpw_ro_override;
  
  nvi_boolean_type                                 internet_profile_unpw_ro_override;
  
  nvi_uint32_type                                  aagps_rti_validity_dur;
  
  nvi_uint8_type                                   ipv6_umts_failover_config;
  
  nvi_boolean_type                                 poc_forbid_change_userid;
  
  nvi_poc_wtuser_password_type                     poc_wtuser_password;
  
  nvi_uint8_type                                   cbs_max_msg_per_topic;
  
  nvi_enum_type                                    browser_fwdurl_to;
  
  nvi_boolean_type                                 browser_wap_sim_combinelock;
  
  nvi_boolean_type                                 browser_startpage_readonly;
  
  nvi_boolean_type                                 cmgr_display_ro_for_missing_dcf;
  
  nvi_boolean_type                                 cmgr_prompt_for_ro_delete;
  
  nvi_boolean_type                                 cmgr_auto_redirect_to_license_server;
  
  nvi_boolean_type                                 set_drm_content_prompt;
  
  nvi_uint8_type                                   cmgr_wd_remaining_hours_1_threshold;
  
  nvi_uint8_type                                   cmgr_wd_remaining_hours_2_threshold;
  
  nvi_uint8_type                                   cmgr_wd_run_every_hours;
  
  nvi_boolean_type                                 set_drm_expire_warning;
  
  nvi_uint32_type                                  cmgr_max_preview_data_size;
  
  nvi_boolean_type                                 browser_disable_image_ro;
  
  nvi_boolean_type                                 browser_disable_sound_ro;
  
  nvi_enum_type                                    browser_timeout;
  
  nvi_boolean_type                                 browser_timeout_ro;
  
  nvi_boolean_type                                 browser_secure_prompt_ro;
  
  nvi_enum_type                                    browser_fontsize;
  
  nvi_enum_type                                    browser_textwrap;
  
  nvi_enum_type                                    browser_scrollstep;
  
  nvi_boolean_type                                 browser_exit_prompt;
  
  nvi_boolean_type                                 pu_force_on;
  
  nvi_browser_jump_portal_name_type                browser_jump_portal_name;
  
  nvi_browser_jump_embdlnk1_name_type              browser_jump_embdlnk1_name;
  
  nvi_browser_jump_embdlnk2_name_type              browser_jump_embdlnk2_name;
  
  nvi_browser_jump_embdlnk3_name_type              browser_jump_embdlnk3_name;
  
  nvi_browser_jump_embdlnk4_name_type              browser_jump_embdlnk4_name;
  
  nvi_browser_jump_embdlnk5_name_type              browser_jump_embdlnk5_name;
  
  nvi_browser_jump_embdlnk6_name_type              browser_jump_embdlnk6_name;
  
  nvi_browser_jump_embdlnk7_name_type              browser_jump_embdlnk7_name;
  
  nvi_browser_jump_embdlnk8_name_type              browser_jump_embdlnk8_name;
  
  nvi_voice_mail_line1_type                        voice_mail_line1;
  
  nvi_boolean_type                                 voice_mail_use_sim_number;
  
  nvi_boolean_type                                 voice_mail_notify;
  
  nvi_voice_mail_line2_type                        voice_mail_line2;
  
  nvi_uint8_type                                   camera_app_save_location;
  
  nvi_boolean_type                                 vt_show_my_image;
  
  nvi_boolean_type                                 vt_auto_redial;
  
  nvi_enum_type                                    set_ringer_volume;
  
  nvi_wcdma_c0_tx_lim_vs_freq_type                 wcdma_c0_tx_lim_vs_freq;
  
  nvi_boolean_type                                 sos_key_enabled;
  
  nvi_sos_number_type                              sos_number;
  
  nvi_wap_trusted_domain_type                      wap_trusted_domain;
  
  nvi_wap_push_autoload_type                       wap_push_autoload;
  
  nvi_im_server_address_type                       im_server_address;
  
  nvi_uint16_type                                  poc_timeout_scale;
  
  nvi_boolean_type                                 mr_defaults_stored;
  
  nvi_boolean_type                                 set_play_startup_sound;
  
  nvi_boolean_type                                 set_play_shutdown_sound;
  
  nvi_boolean_type                                 set_play_startup_animation;
  
  nvi_boolean_type                                 set_play_shutdown_animation;
  
  nvi_gsm_polar_ramp_profile_type                  gsm_polar_ramp_profile;
  
  nvi_uint8_type                                   gps1_msb_back_off_factor;
  
  nvi_uint32_type                                  gps1_msb_back_off_min;
  
  nvi_uint32_type                                  gps1_msb_back_off_max;
  
  nvi_uint32_type                                  gps1_msb_back_off_reset;
  
  nvi_boolean_type                                 gps1_msb_throttle_enable;
  
  nvi_boolean_type                                 manual_plmn_sel;
  
  nvi_boolean_type                                 manual_plmn_selection;
  
  nvi_uint16_type                                  consortium_config_numb;
  
  nvi_uint8_type                                   hdr_equalizer_ctrl;
  
  nvi_uint8_type                                   wlan_enable_ps_mode;
  
  nvi_uint16_type                                  mf_700_lna_rise_2;
  
  nvi_uint16_type                                  mf_700_lna_rise_3;
  
  nvi_uint16_type                                  mf_700_lna_rise_4;
  
  nvi_uint16_type                                  mf_700_lna_fall_2;
  
  nvi_uint16_type                                  mf_700_lna_fall_3;
  
  nvi_uint16_type                                  mf_700_lna_fall_4;
  
  nvi_mf_700_agc_vs_freq_type                      mf_700_agc_vs_freq;
  
  nvi_mf_700_rx_cal_chan_type                      mf_700_rx_cal_chan;
  
  nvi_uint16_type                                  mf_hw_config;
  
  nvi_uint16_type                                  mf_band_config;
  
  nvi_mf_afc_loop_params_type                      mf_afc_loop_params;
  
  nvi_int8_type                                    last_registered_sci;
  
  nvi_int16_type                                   mms_max_chars_slide;
  
  nvi_uint8_type                                   mms_max_number_of_slides;
  
  nvi_uint8_type                                   mms_max_subject_size;
  
  nvi_uint16_type                                  qvp_app_default_audio_capability_type;
  
  nvi_uint16_type                                  qvp_app_default_video_capability_type;
  
  nvi_uint16_type                                  hdrmrlp_num_bytes_to_log;
  
  nvi_sectime_offsets_type                         sectime_time_offsets;
  
  nvi_uint8_type                                   ds_ucsd_nt_connect_state;
  
  nvi_boolean_type                                 pb_recordasound;
  
  nvi_int32_type                                   pb_auto_power_off;
  
  nvi_int8_type                                    bc0_hdr_g0_im_fall;
  
  nvi_int8_type                                    bc0_hdr_g0_im_rise;
  
  nvi_int8_type                                    bc0_hdr_g0_im_level;
  
  nvi_int32_type                                   set_linger_time;
  
  nvi_enum_type                                    pb_sim_defaultnumberpriority_first;
  
  nvi_enum_type                                    pb_sim_defaultnumberpriority_second;
  
  nvi_enum_type                                    pb_sim_defaultnumberpriority_third;
  
  nvi_enum_type                                    pb_default_sorting;
  
  nvi_boolean_type                                 snd_send_restricted;
  
  nvi_boolean_type                                 poc_roamiing_alert_enabled;
  
  nvi_uint16_type                                  gsm_850_precharge;
  
  nvi_uint16_type                                  gsm_850_precharge_dur;
  
  nvi_uint16_type                                  gsm_1900_precharge;
  
  nvi_uint16_type                                  gsm_1900_precharge_dur;
  
  nvi_boolean_type                                 ms_sms_use_smsc_from_sim;
  
  nvi_boolean_type                                 browser_jump_menu_setting_enabled;
  
  nvi_uint32_type                                  browser_drm_wait_time;
  
  nvi_boolean_type                                 lc_enabled;
  
  nvi_lc_servicename_type                          lc_servicename;
  
  nvi_uint8_type                                   lc_connectionprofile;
  
  nvi_uint8_type                                   lc_internetprofile;
  
  nvi_lc_udppushservername_type                    lc_udppushservername;
  
  nvi_uint16_type                                  lc_udppushserverport;
  
  nvi_uint8_type                                   lc_udppushretrytimes;
  
  nvi_uint16_type                                  lc_udppushretryseconds;
  
  nvi_uint16_type                                  lc_msgassemblytimeout;
  
  nvi_uint16_type                                  lc_tickertimeout;
  
  nvi_enum_type                                    lc_tickerspeed;
  
  nvi_uint8_type                                   lc_tickerstartdelay;
  
  nvi_enum_type                                    lc_maxtickeritems;
  
  nvi_uint16_type                                  lc_backlighttimeout;
  
  nvi_lc_trusteddomain_type                        lc_trusteddomain;
  
  nvi_lc_suburl_key_label_type                     lc_suburl_key_label;
  
  nvi_boolean_type                                 homezone_enabled;
  
  nvi_bc0_ant_quality_type                         bc0_ant_quality;
  
  nvi_bc1_ant_quality_type                         bc1_ant_quality;
  
  nvi_bc3_ant_quality_type                         bc3_ant_quality;
  
  nvi_bc4_ant_quality_type                         bc4_ant_quality;
  
  nvi_bc5_ant_quality_type                         bc5_ant_quality;
  
  nvi_bc6_ant_quality_type                         bc6_ant_quality;
  
  nvi_uint16_type                                  media_player_min_udp_port;
  
  nvi_uint16_type                                  media_player_max_udp_port;
  
  nvi_uint8_type                                   media_player_conn_prof;
  
  nvi_boolean_type                                 media_player_qos_enable;
  
  nvi_uint8_type                                   gps1_num_searcher_tasks;
  
  nvi_gsm_pa_transition_table_type                 gsm_pa_transition_table;
  
  nvi_k_key_type                                   k_key;
  
  nvi_cipher_key_type                              cipher_key;
  
  nvi_int_key_type                                 int_key;
  
  nvi_key_id_type                                  last_3g_key_id;
  
  nvi_sseq_type                                    sseq;
  
  nvi_ck_threshold_type                            ck_threshold;
  
  nvi_sqn_arr_type                                 seq_arr_1;
  
  nvi_sqn_arr_type                                 seq_arr_2;
  
  nvi_int16_type                                   wcdma_min_tx_power;
  
  nvi_uint8_type                                   ccbs_sel;
  
  nvi_boolean_type                                 home_screen_enabled;
  
  nvi_enum_type                                    home_screen_layout;
  
  nvi_boolean_type                                 is_thm_initialized;
  
  nvi_boolean_type                                 heaptracker_enabled;
  
  nvi_trm_config_type                              trm_config;
  
  nvi_uint32_type                                  irda_inactivity_timer;
  
  nvi_uint8_type                                   mms_max_templates;
  
  nvi_enum_type                                    mms_text_size;
  
  nvi_uint8_type                                   video_app_save_location;
  
  nvi_camera_default_name_prefix_type              camera_default_name_prefix;
  
  nvi_video_default_name_prefix_type               video_default_name_prefix;
  
  nvi_boolean_type                                 camera_audio_record;
  
  nvi_uint8_type                                   camera_pict_resolution_front;
  
  nvi_uint8_type                                   camera_pict_resolution_back;
  
  nvi_uint8_type                                   camera_video_resolution_front;
  
  nvi_uint8_type                                   camera_video_resolution_back;
  
  nvi_hdrscp_custom_config_type                    hdrscp_subtype_custom_config;
  
  nvi_boolean_type                                 set_linger_time_menu_enable;
  
  nvi_boolean_type                                 java_show_logo_on_start;
  
  nvi_boolean_type                                 ens_enabled;
  
  nvi_uint16_type                                  diag_spc_timeout;
  
  nvi_ms_sms_header_template_file_type             ms_sms_header_template_file;
  
  nvi_ms_sms_signature_template_file_type          ms_sms_signature_template_file;
  
  nvi_hdridle_enhanced_config_type                 hdridle_enhanced_config;
  
  nvi_hdridle_slot_cycle_timeouts_type             hdridle_slot_cycle_timeouts;
  
  nvi_uint8_type                                   back_light_intensity;
  
  nvi_uint32_type                                  display_duration;
  
  nvi_c0_bc0_intelliceiver_det_thresh_type         c0_bc0_intelliceiver_det_thresh;
  
  nvi_c0_bc1_intelliceiver_det_thresh_type         c0_bc1_intelliceiver_det_thresh;
  
  nvi_c0_bc3_intelliceiver_det_thresh_type         c0_bc3_intelliceiver_det_thresh;
  
  nvi_c0_bc4_intelliceiver_det_thresh_type         c0_bc4_intelliceiver_det_thresh;
  
  nvi_c0_bc5_intelliceiver_det_thresh_type         c0_bc5_intelliceiver_det_thresh;
  
  nvi_c0_bc6_intelliceiver_det_thresh_type         c0_bc6_intelliceiver_det_thresh;
  
  nvi_enum_type                                    set_voice_volume;
  
  nvi_enum_type                                    set_media_volume;
  
  nvi_hdrrmac_config_type                          hdrrmac_config;
  
  nvi_uint8_type                                   gps1_cross_corr_threshold_dbhz;
  
  nvi_uint8_type                                   gps1_cme_t_track_threshold;
  
  nvi_boolean_type                                 gps1_vx_lcsagent_v2_handoff_enable;
  
  nvi_uint16_type                                  gps1_vx_lcsagent_mo_backoff_duration;
  
  nvi_uint16_type                                  odm_backlight_intensity;
  
  nvi_int32_type                                   odm_power_save_timeout;
  
  nvi_int32_type                                   odm_backlight_timeout;
  
  nvi_uint16_type                                  timezone_city;
  
  nvi_uint32_type                                  sigmareject;
  
  nvi_uint32_type                                  velnoiseinonesecdrive;
  
  nvi_uint32_type                                  velnoiseinonesecped;
  
  nvi_uint32_type                                  velnoiseinonesecstatic;
  
  nvi_uint32_type                                  extraclockbiaserror;
  
  nvi_uint16_type                                  configmask;
  
  nvi_uint32_type                                  maxpropagationwonewmeas;
  
  nvi_uint8_type                                   configcontrolflag;
  
  nvi_uint32_type                                  aagps_development_test_control6;
  
  nvi_enum_type                                    set_alarm_clock_tone_setting;
  
  nvi_sys_default_efs_file_name_type               sys_default_efs_file_name;
  
  nvi_sys_efs_file_name_type                       sys_efs_file_name;
  
  nvi_sys_default_nv_ini_file_name_type            sys_default_nv_ini_file_name;
  
  nvi_sys_nv_ini_file_name_type                    sys_nv_ini_file_name;
  
  nvi_sys_script_file_name_type                    sys_script_file_name;
  
  nvi_gainrange5_switchpoint_type                  gsm_gainrange5_switchpoints;
  
  nvi_gsm_rx_gain_range_5_freq_comp_type           gsm_rx_gain_range_5_freq_comp;
  
  nvi_dcs_rx_gain_range_5_freq_comp_type           dcs_rx_gain_range_5_freq_comp;
  
  nvi_gsm_850_rx_gain_range_5_freq_comp_type       gsm_850_rx_gain_range_5_freq_comp;
  
  nvi_gsm_1900_rx_gain_range_5_freq_comp_type      gsm_1900_rx_gain_range_5_freq_comp;
  
  nvi_gainrange5_switchpoint_type                  dcs_gainrange5_switchpoints;
  
  nvi_gainrange5_switchpoint_type                  gsm_850_gainrange5_switchpoints;
  
  nvi_gainrange5_switchpoint_type                  gsm_1900_gainrange5_switchpoints;
  
  nvi_gsm_polar_ramp_profile_type                  dcs_polar_ramp_profile;
  
  nvi_gsm_polar_ramp_profile_type                  gsm_1900_polar_ramp_profile;
  
  nvi_gsm_polar_ramp_profile_type                  gsm_850_polar_ramp_profile;
  
  nvi_wcdma_tx_lim_vs_temp_voice_call_active_type  wcdma_tx_lim_vs_temp_voice_call_active;
  
  nvi_uint8_type                                   hdrbcmcs_disable_one_time_reg;
  
  nvi_uint8_type                                   hdrbcmcs_disable_subnet_reg;
  
  nvi_cdma_rx_chain_sel_thresh_type                cdma_rx_chain_sel_thresh;
  
  nvi_boolean_type                                 set_auto_keylock;
  
  nvi_boolean_type                                 set_any_key_answer;
  
  nvi_uint32_type                                  vp_frame_rate;
  
  nvi_dyn_clock_voltage_type                       dyn_clock_voltage;
  
  nvi_uint16_type                                  gps1_seedpos_option;
  
  nvi_uint8_type                                   ms_send_attempts;
  
  nvi_uint16_type                                  ms_period_betw_send_attempts;
  
  nvi_boolean_type                                 ms_send_in_background;
  
  nvi_uint32_type                                  wcdma_dl_freq;
  
  nvi_boolean_type                                 wcdma_dl_freq_enabled;
  
  nvi_ms_sms_smsc_address6_type                    ms_sms_smsc_address6;
  
  nvi_ms_sms_smsc_address7_type                    ms_sms_smsc_address7;
  
  nvi_ms_sms_smsc_address8_type                    ms_sms_smsc_address8;
  
  nvi_ms_sms_smsc_address9_type                    ms_sms_smsc_address9;
  
  nvi_ms_sms_smsc_address10_type                   ms_sms_smsc_address10;
  
  nvi_boolean_type                                 auto_time_enable;
  
  nvi_uint8_type                                   sms_mo_retry_period;
  
  nvi_uint8_type                                   sms_mo_retry_interval;
  
  nvi_rmnet_autoconnect_type                       rmnet_autoconnect;
  
  nvi_boolean_type                                 enable_bt_diag;
  
  nvi_tx_linearizer_type                           bc14_tx_lin_master0;
  
  nvi_tx_linearizer_type                           bc14_tx_lin_master1;
  
  nvi_tx_linearizer_type                           bc14_tx_lin_master2;
  
  nvi_tx_linearizer_type                           bc14_tx_lin_master3;
  
  nvi_uint16_type                                  bc14_gps1_rf_delay;
  
  nvi_bc14_tx_lim_vs_temp_type                     bc14_tx_lim_vs_temp;
  
  nvi_tx_comp_type                                 bc14_tx_comp0;
  
  nvi_tx_comp_type                                 bc14_tx_comp1;
  
  nvi_tx_comp_type                                 bc14_tx_comp2;
  
  nvi_tx_comp_type                                 bc14_tx_comp3;
  
  nvi_bc14_tx_lim_vs_freq_type                     bc14_tx_lim_vs_freq;
  
  nvi_uint8_type                                   bc14_pa_r1_rise;
  
  nvi_uint8_type                                   bc14_pa_r1_fall;
  
  nvi_uint8_type                                   bc14_pa_r2_rise;
  
  nvi_uint8_type                                   bc14_pa_r2_fall;
  
  nvi_uint8_type                                   bc14_pa_r3_rise;
  
  nvi_uint8_type                                   bc14_pa_r3_fall;
  
  nvi_uint8_type                                   bc14_hdet_off;
  
  nvi_uint8_type                                   bc14_hdet_spn;
  
  nvi_bc14_exp_hdet_vs_agc_type                    bc14_exp_hdet_vs_agc;
  
  nvi_uint32_type                                  bc14_enc_btf;
  
  nvi_bc14_vco_coarse_tune_table_type              bc14_vco_coarse_tune_table;
  
  nvi_bc14_vco_tune_2_type                         bc14_vco_tune_2;
  
  nvi_bc14_p1_rise_fall_off_type                   bc14_p1_rise_fall_off;
  
  nvi_bc14_hdr_p1_rise_fall_off_type               bc14_hdr_p1_rise_fall_off;
  
  nvi_c0_bc14_tx_cal_chan_type                     c0_bc14_tx_cal_chan;
  
  nvi_c0_bc14_rx_cal_chan_type                     c0_bc14_rx_cal_chan;
  
  nvi_c0_bc14_rx_cal_chan_lru_type                 c0_bc14_rx_cal_chan_lru;
  
  nvi_int16_type                                   c0_bc14_lna_1_offset;
  
  nvi_int16_type                                   c0_bc14_lna_2_offset;
  
  nvi_int16_type                                   c0_bc14_lna_3_offset;
  
  nvi_int16_type                                   c0_bc14_lna_4_offset;
  
  nvi_c0_bc14_lna_1_offset_vs_freq_type            c0_bc14_lna_1_offset_vs_freq;
  
  nvi_c0_bc14_lna_2_offset_vs_freq_type            c0_bc14_lna_2_offset_vs_freq;
  
  nvi_c0_bc14_lna_3_offset_vs_freq_type            c0_bc14_lna_3_offset_vs_freq;
  
  nvi_c0_bc14_lna_4_offset_vs_freq_type            c0_bc14_lna_4_offset_vs_freq;
  
  nvi_uint8_type                                   c0_bc14_im2_i_value;
  
  nvi_uint8_type                                   c0_bc14_im2_q_value;
  
  nvi_int16_type                                   c0_bc14_vga_gain_offset;
  
  nvi_c0_bc14_vga_gain_offset_vs_freq_type         c0_bc14_vga_gain_offset_vs_freq;
  
  nvi_uint8_type                                   c0_bc14_im2_transconductor_value;
  
  nvi_int8_type                                    c0_bc14_lna_1_rise;
  
  nvi_int8_type                                    c0_bc14_lna_1_fall;
  
  nvi_int8_type                                    c0_bc14_lna_2_rise;
  
  nvi_int8_type                                    c0_bc14_lna_2_fall;
  
  nvi_int8_type                                    c0_bc14_lna_3_rise;
  
  nvi_int8_type                                    c0_bc14_lna_3_fall;
  
  nvi_int8_type                                    c0_bc14_lna_4_rise;
  
  nvi_int8_type                                    c0_bc14_lna_4_fall;
  
  nvi_uint8_type                                   c0_bc14_im_level1;
  
  nvi_uint8_type                                   c0_bc14_im_level2;
  
  nvi_uint8_type                                   c0_bc14_im_level3;
  
  nvi_uint8_type                                   c0_bc14_im_level4;
  
  nvi_c1_bc14_tx_cal_chan_type                     c1_bc14_tx_cal_chan;
  
  nvi_c1_bc14_rx_cal_chan_type                     c1_bc14_rx_cal_chan;
  
  nvi_c1_bc14_lna_1_offset_vs_freq_type            c1_bc14_lna_1_offset_vs_freq;
  
  nvi_c1_bc14_lna_2_offset_vs_freq_type            c1_bc14_lna_2_offset_vs_freq;
  
  nvi_c1_bc14_lna_3_offset_vs_freq_type            c1_bc14_lna_3_offset_vs_freq;
  
  nvi_c1_bc14_lna_4_offset_vs_freq_type            c1_bc14_lna_4_offset_vs_freq;
  
  nvi_int16_type                                   c1_bc14_lna_1_offset;
  
  nvi_int16_type                                   c1_bc14_lna_2_offset;
  
  nvi_int16_type                                   c1_bc14_lna_3_offset;
  
  nvi_int16_type                                   c1_bc14_lna_4_offset;
  
  nvi_uint8_type                                   c1_bc14_im2_i_value;
  
  nvi_uint8_type                                   c1_bc14_im2_q_value;
  
  nvi_int16_type                                   c1_bc14_vga_gain_offset;
  
  nvi_c1_bc14_vga_gain_offset_vs_freq_type         c1_bc14_vga_gain_offset_vs_freq;
  
  nvi_uint8_type                                   c1_bc14_im2_transconductor_value;
  
  nvi_int8_type                                    c1_bc14_lna_1_rise;
  
  nvi_int8_type                                    c1_bc14_lna_1_fall;
  
  nvi_int8_type                                    c1_bc14_lna_2_rise;
  
  nvi_int8_type                                    c1_bc14_lna_2_fall;
  
  nvi_int8_type                                    c1_bc14_lna_3_rise;
  
  nvi_int8_type                                    c1_bc14_lna_3_fall;
  
  nvi_int8_type                                    c1_bc14_lna_4_rise;
  
  nvi_int8_type                                    c1_bc14_lna_4_fall;
  
  nvi_uint8_type                                   c1_bc14_im_level1;
  
  nvi_uint8_type                                   c1_bc14_im_level2;
  
  nvi_uint8_type                                   c1_bc14_im_level3;
  
  nvi_uint8_type                                   c1_bc14_im_level4;
  
  nvi_c1_bc14_vco_coarse_tune_table_type           c1_bc14_vco_coarse_tune_table;
  
  nvi_bc14_ant_quality_type                        bc14_ant_quality;
  
  nvi_uint16_type                                  bc14_pa_dvs_voltage;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc14_lna_switchpoints_lpm_1;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc14_lna_switchpoints_lpm_2;
  
  nvi_rf_rx_im2_cal                                c0_bc14_im2_lpm_1;
  
  nvi_rf_rx_im2_cal                                c0_bc14_im2_lpm_2;
  
  nvi_c0_bc14_intelliceiver_cal_type               c0_bc14_intelliceiver_cal;
  
  nvi_c0_bc14_intelliceiver_det_thresh_type        c0_bc14_intelliceiver_det_thresh;
  
  nvi_c1_bc14_rx_cal_chan_lru_type                 c1_bc14_rx_cal_chan_lru;
  
  nvi_sys_variant_name_type                        sys_variant_name;
  
  nvi_boolean_type                                 set_ssaver_auto_keylock;
  
  nvi_boolean_type                                 dtm_feature_support;
  
  nvi_uint8_type                                   dtm_multislot_class;
  
  nvi_boolean_type                                 eda_feature_support;
  
  nvi_uint16_type                                  mf_mru_chan;
  
  nvi_uint64_type                                  srch_dbg_mask;
  
  nvi_boolean_type                                 stride_active;
  
  nvi_ddtm_settings_s_type                         ddtm_settings;
  
  nvi_sd_cfg_items_s_type                          sd_cfg_items;
  
  nvi_uint16_type                                  voip_qos_evdo_sip_profile_id;
  
  nvi_uint16_type                                  voip_qos_evdo_rtp_profile_id;
  
  nvi_uint16_type                                  voip_qos_evdo_dscp;
  
  nvi_boolean_type                                 voip_dtx_enabled;
  
  nvi_uint8_type                                   mf_afc_inner_loop_gain;
  
  nvi_uint16_type                                  mf_afc_init_freq_offset;
  
  nvi_uint8_type                                   mf_c0_im2_i_value;
  
  nvi_uint8_type                                   mf_c0_im2_q_value;
  
  nvi_uint8_type                                   mf_c0_im2_transconductor_value;
  
  nvi_uint8_type                                   mf_c1_im2_i_value;
  
  nvi_uint8_type                                   mf_c1_im2_q_value;
  
  nvi_uint8_type                                   mf_c1_im2_transconductor_value;
  
  nvi_mf_afc_acquisition_params_type               mf_acq_parameters;
  
  nvi_uint8_type                                   wcdma_rrc_version;
  
  nvi_int16_type                                   wcdma_900_vga_gain_offset;
  
  nvi_wcdma_900_vga_gain_offset_vs_freq_type       wcdma_900_vga_gain_offset_vs_freq;
  
  nvi_wcdma_900_vga_gain_offset_vs_temp_type       wcdma_900_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   wcdma_900_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_900_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_900_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_900_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_900_im_level_2;
  
  nvi_int16_type                                   wcdma_900_im_level_3;
  
  nvi_int16_type                                   wcdma_900_lna_range_offset_2;
  
  nvi_int16_type                                   wcdma_900_lna_range_offset_3;
  
  nvi_wcdma_900_lna_offset_vs_freq_2_type          wcdma_900_lna_offset_vs_freq_2;
  
  nvi_wcdma_900_lna_offset_vs_freq_3_type          wcdma_900_lna_offset_vs_freq_3;
  
  nvi_uint8_type                                   wcdma_900_im2_i_value;
  
  nvi_uint8_type                                   wcdma_900_im2_q_value;
  
  nvi_uint8_type                                   wcdma_900_im2_transconductor_value;
  
  nvi_int16_type                                   wcdma_900_rx_agc_min_2;
  
  nvi_int16_type                                   wcdma_900_rx_agc_min_3;
  
  nvi_int8_type                                    wcdma_900_max_tx_power;
  
  nvi_int16_type                                   wcdma_900_out_of_service_thresh;
  
  nvi_int16_type                                   wcdma_900_lna_range_rise;
  
  nvi_int16_type                                   wcdma_900_lna_range_fall;
  
  nvi_int16_type                                   wcdma_900_im_level;
  
  nvi_uint8_type                                   wcdma_900_nonbypass_timer;
  
  nvi_uint16_type                                  wcdma_900_bypass_timer;
  
  nvi_int16_type                                   wcdma_900_lna_range_offset;
  
  nvi_wcdma_900_lna_offset_vs_freq_type            wcdma_900_lna_offset_vs_freq;
  
  nvi_int16_type                                   wcdma_900_rx_agc_min;
  
  nvi_int16_type                                   wcdma_900_rx_agc_max;
  
  nvi_uint8_type                                   wcdma_900_agc_phase_offset;
  
  nvi_wcdma_900_tx_lin_master_0_type               wcdma_900_tx_lin_master_0;
  
  nvi_wcdma_900_tx_lin_master_1_type               wcdma_900_tx_lin_master_1;
  
  nvi_wcdma_900_tx_comp_vs_freq_0_type             wcdma_900_tx_comp_vs_freq_0;
  
  nvi_wcdma_900_tx_comp_vs_freq_1_type             wcdma_900_tx_comp_vs_freq_1;
  
  nvi_wcdma_900_tx_lin_vs_temp_0_type              wcdma_900_tx_lin_vs_temp_0;
  
  nvi_wcdma_900_tx_lin_vs_temp_1_type              wcdma_900_tx_lin_vs_temp_1;
  
  nvi_wcdma_900_tx_slp_vs_temp_0_type              wcdma_900_tx_slp_vs_temp_0;
  
  nvi_wcdma_900_tx_slp_vs_temp_1_type              wcdma_900_tx_slp_vs_temp_1;
  
  nvi_uint16_type                                  wcdma_900_r1_rise;
  
  nvi_uint16_type                                  wcdma_900_r1_fall;
  
  nvi_wcdma_900_tx_lim_vs_temp_type                wcdma_900_tx_lim_vs_temp;
  
  nvi_wcdma_900_tx_lim_vs_freq_type                wcdma_900_tx_lim_vs_freq;
  
  nvi_uint8_type                                   wcdma_900_adj_factor;
  
  nvi_wcdma_900_exp_hdet_vs_agc_type               wcdma_900_exp_hdet_vs_agc;
  
  nvi_uint8_type                                   wcdma_900_hdet_off;
  
  nvi_uint8_type                                   wcdma_900_hdet_spn;
  
  nvi_uint32_type                                  wcdma_900_enc_btf;
  
  nvi_uint16_type                                  wcdma_900_agc_pa_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_900_agc_pa_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_900_agc_tx_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_900_agc_tx_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_900_agc_update_tx_agc_time;
  
  nvi_int16_type                                   wcdma_900_prach_r1_rise_offset;
  
  nvi_int16_type                                   wcdma_900_prach_r1_fall_offset;
  
  nvi_wcdma_900_tx_cal_chan_type                   wcdma_900_tx_cal_chan;
  
  nvi_wcdma_900_rx_cal_chan_type                   wcdma_900_rx_cal_chan;
  
  nvi_wcdma_900_tx_lin_master_2_type               wcdma_900_tx_lin_master_2;
  
  nvi_wcdma_900_tx_lin_master_3_type               wcdma_900_tx_lin_master_3;
  
  nvi_wcdma_900_tx_comp_vs_freq_2_type             wcdma_900_tx_comp_vs_freq_2;
  
  nvi_wcdma_900_tx_comp_vs_freq_3_type             wcdma_900_tx_comp_vs_freq_3;
  
  nvi_wcdma_900_tx_lin_vs_temp_2_type              wcdma_900_tx_lin_vs_temp_2;
  
  nvi_wcdma_900_tx_lin_vs_temp_3_type              wcdma_900_tx_lin_vs_temp_3;
  
  nvi_wcdma_900_tx_slp_vs_temp_2_type              wcdma_900_tx_slp_vs_temp_2;
  
  nvi_wcdma_900_tx_slp_vs_temp_3_type              wcdma_900_tx_slp_vs_temp_3;
  
  nvi_uint16_type                                  wcdma_900_r2_rise;
  
  nvi_uint16_type                                  wcdma_900_r2_fall;
  
  nvi_uint16_type                                  wcdma_900_r3_rise;
  
  nvi_uint16_type                                  wcdma_900_r3_fall;
  
  nvi_int16_type                                   wcdma_900_pa_compensate_up_r2;
  
  nvi_int16_type                                   wcdma_900_pa_compensate_down_r2;
  
  nvi_int16_type                                   wcdma_900_pa_compensate_up_r3;
  
  nvi_int16_type                                   wcdma_900_pa_compensate_down_r3;
  
  nvi_uint16_type                                  wcdma_900_tx_rot_angle_pa_state_00;
  
  nvi_uint16_type                                  wcdma_900_tx_rot_angle_pa_state_01;
  
  nvi_uint16_type                                  wcdma_900_tx_rot_angle_pa_state_10;
  
  nvi_uint16_type                                  wcdma_900_tx_rot_angle_pa_state_11;
  
  nvi_int16_type                                   wcdma_900_prach_r2_rise_offset;
  
  nvi_int16_type                                   wcdma_900_prach_r2_fall_offset;
  
  nvi_int16_type                                   wcdma_900_prach_r3_rise_offset;
  
  nvi_int16_type                                   wcdma_900_prach_r3_fall_offset;
  
  nvi_wcdma_900_pa_range_map_type                  wcdma_900_pa_range_map;
  
  nvi_int16_type                                   wcdma_900_dch_agc_update_tx_agc_time;
  
  nvi_int16_type                                   wcdma_900_agc_tx_adj_pdm_delay;
  
  nvi_wcdma_900_utran_tx_lim_vs_temp_offset_type   wcdma_900_utran_tx_lim_vs_temp_offset;
  
  nvi_int16_type                                   wcdma_900_pa_gain_up_time;
  
  nvi_int16_type                                   wcdma_900_pa_gain_down_time;
  
  nvi_int16_type                                   wcdma_900_pa_compensate_up;
  
  nvi_int16_type                                   wcdma_900_pa_compensate_down;
  
  nvi_int16_type                                   wcdma_900_rx_delay;
  
  nvi_uint16_type                                  wcdma_900_pa_range_for_dvs;
  
  nvi_wcdma_900_pa_compensate_up_with_dvs_type     wcdma_900_pa_compensate_up_with_dvs;
  
  nvi_wcdma_900_pa_compensate_dn_with_dvs_type     wcdma_900_pa_compensate_dn_with_dvs;
  
  nvi_wcdma_900_max_pwr_backoff_voltages_type      wcdma_900_max_pwr_backoff_voltages;
  
  nvi_wcdma_900_max_pwr_backoff_volt1_type         wcdma_900_max_pwr_backoff_volt1;
  
  nvi_wcdma_900_max_pwr_backoff_volt2_type         wcdma_900_max_pwr_backoff_volt2;
  
  nvi_wcdma_900_max_pwr_backoff_volt3_type         wcdma_900_max_pwr_backoff_volt3;
  
  nvi_int16_type                                   wcdma_900_hs_r1_rise;
  
  nvi_int16_type                                   wcdma_900_hs_r1_fall;
  
  nvi_int16_type                                   wcdma_900_hs_r2_rise;
  
  nvi_int16_type                                   wcdma_900_hs_r2_fall;
  
  nvi_int16_type                                   wcdma_900_hs_r3_rise;
  
  nvi_int16_type                                   wcdma_900_hs_r3_fall;
  
  nvi_rfr_vco_coarse_tuning_900_type               rfr_vco_coarse_tuning_900;
  
  nvi_nitz_plmn_type                               nitz_nw_info;
  
  nvi_uint16_type                                  cbs_max_msgs_per_topic;
  
  nvi_uint8_type                                   camera_type;
  
  nvi_uint8_type                                   gps1_dynamic_mode;
  
  nvi_uint8_type                                   aagps_use_transport_security;
  
  nvi_int16_type                                   c1_wcdma_2100_vga_gain_offset;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_rise;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_fall;
  
  nvi_int16_type                                   c1_wcdma_2100_im_level;
  
  nvi_uint8_type                                   c1_wcdma_2100_nonbypass_timer;
  
  nvi_uint16_type                                  c1_wcdma_2100_bypass_timer;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_offset;
  
  nvi_c1_wcdma_2100_lna_offset_vs_freq_type        c1_wcdma_2100_lna_offset_vs_freq;
  
  nvi_c1_wcdma_2100_vga_gain_offset_vs_freq_type   c1_wcdma_2100_vga_gain_offset_vs_freq;
  
  nvi_c1_wcdma_2100_vga_gain_offset_vs_temp_type   c1_wcdma_2100_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_rise_2;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_rise_3;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_rise_4;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_fall_2;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_fall_3;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_fall_4;
  
  nvi_int16_type                                   c1_wcdma_2100_im_level_2;
  
  nvi_int16_type                                   c1_wcdma_2100_im_level_3;
  
  nvi_int16_type                                   c1_wcdma_2100_im_level_4;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_offset_2;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_offset_3;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_offset_4;
  
  nvi_c1_wcdma_2100_lna_offset_vs_freq_2_type      c1_wcdma_2100_lna_offset_vs_freq_2;
  
  nvi_c1_wcdma_2100_lna_offset_vs_freq_3_type      c1_wcdma_2100_lna_offset_vs_freq_3;
  
  nvi_c1_wcdma_2100_lna_offset_vs_freq_4_type      c1_wcdma_2100_lna_offset_vs_freq_4;
  
  nvi_uint8_type                                   c1_wcdma_2100_im2_i_value;
  
  nvi_uint8_type                                   c1_wcdma_2100_im2_q_value;
  
  nvi_uint8_type                                   c1_wcdma_2100_im2_transconductor_value;
  
  nvi_c1_wcdma_2100_rx_cal_chan_type               c1_wcdma_2100_rx_cal_chan;
  
  nvi_c1_rf_antsel_umts_2100_type                  c1_rf_antsel_umts_2100;
  
  nvi_int16_type                                   c1_wcdma_1900_vga_gain_offset;
  
  nvi_c1_wcdma_1900_vga_gain_offset_vs_freq_type   c1_wcdma_1900_vga_gain_offset_vs_freq;
  
  nvi_c1_wcdma_1900_vga_gain_offset_vs_temp_type   c1_wcdma_1900_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   c1_wcdma_1900_lna_range_rise;
  
  nvi_int16_type                                   c1_wcdma_1900_lna_range_rise_2;
  
  nvi_int16_type                                   c1_wcdma_1900_lna_range_rise_3;
  
  nvi_int16_type                                   c1_wcdma_1900_lna_range_rise_4;
  
  nvi_int16_type                                   c1_wcdma_1900_lna_range_fall;
  
  nvi_int16_type                                   c1_wcdma_1900_lna_range_fall_2;
  
  nvi_int16_type                                   c1_wcdma_1900_lna_range_fall_3;
  
  nvi_int16_type                                   c1_wcdma_1900_lna_range_fall_4;
  
  nvi_int16_type                                   c1_wcdma_1900_im_level;
  
  nvi_int16_type                                   c1_wcdma_1900_im_level_2;
  
  nvi_int16_type                                   c1_wcdma_1900_im_level_3;
  
  nvi_int16_type                                   c1_wcdma_1900_im_level_4;
  
  nvi_int16_type                                   c1_wcdma_1900_lna_range_offset_2;
  
  nvi_int16_type                                   c1_wcdma_1900_lna_range_offset_3;
  
  nvi_int16_type                                   c1_wcdma_1900_lna_range_offset_4;
  
  nvi_c1_wcdma_1900_lna_offset_vs_freq_2_type      c1_wcdma_1900_lna_offset_vs_freq_2;
  
  nvi_c1_wcdma_1900_lna_offset_vs_freq_3_type      c1_wcdma_1900_lna_offset_vs_freq_3;
  
  nvi_c1_wcdma_1900_lna_offset_vs_freq_4_type      c1_wcdma_1900_lna_offset_vs_freq_4;
  
  nvi_uint8_type                                   c1_wcdma_1900_im2_i_value;
  
  nvi_uint8_type                                   c1_wcdma_1900_im2_q_value;
  
  nvi_uint8_type                                   c1_wcdma_1900_im2_transconductor_value;
  
  nvi_uint8_type                                   c1_wcdma_1900_nonbypass_timer;
  
  nvi_uint16_type                                  c1_wcdma_1900_bypass_timer;
  
  nvi_int16_type                                   c1_wcdma_1900_lna_range_offset;
  
  nvi_c1_wcdma_1900_lna_offset_vs_freq_type        c1_wcdma_1900_lna_offset_vs_freq;
  
  nvi_c1_wcdma_1900_rx_cal_chan_type               c1_wcdma_1900_rx_cal_chan;
  
  nvi_c1_rf_antsel_umts_1900_type                  c1_rf_antsel_umts_1900;
  
  nvi_int16_type                                   c1_wcdma_800_vga_gain_offset;
  
  nvi_c1_wcdma_800_vga_gain_offset_vs_freq_type    c1_wcdma_800_vga_gain_offset_vs_freq;
  
  nvi_c1_wcdma_800_vga_gain_offset_vs_temp_type    c1_wcdma_800_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   c1_wcdma_800_lna_range_rise;
  
  nvi_uint16_type                                  c1_wcdma_800_lna_range_rise_2;
  
  nvi_int16_type                                   c1_wcdma_800_lna_range_rise_3;
  
  nvi_int16_type                                   c1_wcdma_800_lna_range_rise_4;
  
  nvi_int16_type                                   c1_wcdma_800_lna_range_fall;
  
  nvi_int16_type                                   c1_wcdma_800_lna_range_fall_2;
  
  nvi_int16_type                                   c1_wcdma_800_lna_range_fall_3;
  
  nvi_int16_type                                   c1_wcdma_800_lna_range_fall_4;
  
  nvi_int16_type                                   c1_wcdma_800_im_level;
  
  nvi_int16_type                                   c1_wcdma_800_im_level_2;
  
  nvi_int16_type                                   c1_wcdma_800_im_level_3;
  
  nvi_int16_type                                   c1_wcdma_800_im_level_4;
  
  nvi_int16_type                                   c1_wcdma_800_lna_range_offset;
  
  nvi_int16_type                                   c1_wcdma_800_lna_range_offset_2;
  
  nvi_int16_type                                   c1_wcdma_800_lna_range_offset_3;
  
  nvi_int16_type                                   c1_wcdma_800_lna_range_offset_4;
  
  nvi_c1_wcdma_800_lna_offset_vs_freq_type         c1_wcdma_800_lna_offset_vs_freq;
  
  nvi_c1_wcdma_800_lna_offset_vs_freq_2_type       c1_wcdma_800_lna_offset_vs_freq_2;
  
  nvi_c1_wcdma_800_lna_offset_vs_freq_3_type       c1_wcdma_800_lna_offset_vs_freq_3;
  
  nvi_c1_wcdma_800_lna_offset_vs_freq_4_type       c1_wcdma_800_lna_offset_vs_freq_4;
  
  nvi_uint8_type                                   c1_wcdma_800_im2_i_value;
  
  nvi_uint8_type                                   c1_wcdma_800_im2_q_value;
  
  nvi_uint8_type                                   c1_wcdma_800_im2_transconductor_value;
  
  nvi_uint8_type                                   c1_wcdma_800_nonbypass_timer;
  
  nvi_uint16_type                                  c1_wcdma_800_bypass_timer;
  
  nvi_c1_wcdma_800_rx_cal_chan_type                c1_wcdma_800_rx_cal_chan;
  
  nvi_c1_rf_antsel_umts_800_type                   c1_rf_antsel_umts_800;
  
  nvi_rfr_vco_coarse_tune_2_1900_type              rfr_vco_coarse_tune_2_1900;
  
  nvi_int8_type                                    rfr_wcdma_c0_c1_delay;
  
  nvi_uint8_type                                   wcdma_rx_diversity_ctrl;
  
  nvi_uint8_type                                   wcdma_equalizer_ctrl;
  
  nvi_bc11_vco_tune_2_type                         bc11_vco_tune_2;
  
  nvi_bc11_hdr_p1_rise_fall_off_type               bc11_hdr_p1_rise_fall_off;
  
  nvi_c0_bc11_rx_cal_chan_lru_type                 c0_bc11_rx_cal_chan_lru;
  
  nvi_c1_bc11_rx_cal_chan_lru_type                 c1_bc11_rx_cal_chan_lru;
  
  nvi_bc11_ant_quality_type                        bc11_ant_quality;
  
  nvi_rf_rx_im2_cal                                c0_bc11_im2_lpm_1;
  
  nvi_rf_rx_im2_cal                                c0_bc11_im2_lpm_2;
  
  nvi_c0_bc11_intelliceiver_cal_type               c0_bc11_intelliceiver_cal;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc11_lna_switchpoints_lpm_1;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc11_lna_switchpoints_lpm_2;
  
  nvi_c0_bc11_intelliceiver_det_thresh_type        c0_bc11_intelliceiver_det_thresh;
  
  nvi_uint16_type                                  bc11_pa_dvs_voltage;
  
  nvi_uint16_type                                  voip_wlan_prfrd_codec;
  
  nvi_uint16_type                                  voip_evdo_prfrd_codec;
  
  nvi_wcdma_pa_comp_up_vs_freq_type                wcdma_pa_comp_up_vs_freq;
  
  nvi_wcdma_pa_comp_down_vs_freq_type              wcdma_pa_comp_down_vs_freq;
  
  nvi_wcdma_pa_comp_up_r2_vs_freq_type             wcdma_pa_comp_up_r2_vs_freq;
  
  nvi_wcdma_pa_comp_down_r2_vs_freq_type           wcdma_pa_comp_down_r2_vs_freq;
  
  nvi_wcdma_pa_comp_up_r3_vs_freq_type             wcdma_pa_comp_up_r3_vs_freq;
  
  nvi_wcdma_pa_comp_down_r3_vs_freq_type           wcdma_pa_comp_down_r3_vs_freq;
  
  nvi_wcdma_800_pa_comp_up_vs_freq_type            wcdma_800_pa_comp_up_vs_freq;
  
  nvi_wcdma_800_pa_comp_down_vs_freq_type          wcdma_800_pa_comp_down_vs_freq;
  
  nvi_wcdma_800_pa_comp_up_r2_vs_freq_type         wcdma_800_pa_comp_up_r2_vs_freq;
  
  nvi_wcdma_800_pa_comp_down_r2_vs_freq_type       wcdma_800_pa_comp_down_r2_vs_freq;
  
  nvi_wcdma_800_pa_comp_up_r3_vs_freq_type         wcdma_800_pa_comp_up_r3_vs_freq;
  
  nvi_wcdma_800_pa_comp_down_r3_vs_freq_type       wcdma_800_pa_comp_down_r3_vs_freq;
  
  nvi_wcdma_1900_pa_comp_up_vs_freq_type           wcdma_1900_pa_comp_up_vs_freq;
  
  nvi_wcdma_1900_pa_comp_down_vs_freq_type         wcdma_1900_pa_comp_down_vs_freq;
  
  nvi_wcdma_1900_pa_comp_up_r2_vs_freq_type        wcdma_1900_pa_comp_up_r2_vs_freq;
  
  nvi_wcdma_1900_pa_comp_down_r2_vs_freq_type      wcdma_1900_pa_comp_down_r2_vs_freq;
  
  nvi_wcdma_1900_pa_comp_up_r3_vs_freq_type        wcdma_1900_pa_comp_up_r3_vs_freq;
  
  nvi_wcdma_1900_pa_comp_down_r3_vs_freq_type      wcdma_1900_pa_comp_down_r3_vs_freq;
  
  nvi_wcdma_900_pa_comp_up_vs_freq_type            wcdma_900_pa_comp_up_vs_freq;
  
  nvi_wcdma_900_pa_comp_down_vs_freq_type          wcdma_900_pa_comp_down_vs_freq;
  
  nvi_wcdma_900_pa_comp_up_r2_vs_freq_type         wcdma_900_pa_comp_up_r2_vs_freq;
  
  nvi_wcdma_900_pa_comp_down_r2_vs_freq_type       wcdma_900_pa_comp_down_r2_vs_freq;
  
  nvi_wcdma_900_pa_comp_up_r3_vs_freq_type         wcdma_900_pa_comp_up_r3_vs_freq;
  
  nvi_wcdma_900_pa_comp_down_r3_vs_freq_type       wcdma_900_pa_comp_down_r3_vs_freq;
  
  nvi_wcdma_tx_pdm_lin_0_type                      wcdma_tx_pdm_lin_0;
  
  nvi_wcdma_tx_pdm_lin_1_type                      wcdma_tx_pdm_lin_1;
  
  nvi_wcdma_tx_pdm_lin_2_type                      wcdma_tx_pdm_lin_2;
  
  nvi_wcdma_tx_pdm_lin_3_type                      wcdma_tx_pdm_lin_3;
  
  nvi_wcdma_800_tx_pdm_lin_0_type                  wcdma_800_tx_pdm_lin_0;
  
  nvi_wcdma_800_tx_pdm_lin_1_type                  wcdma_800_tx_pdm_lin_1;
  
  nvi_wcdma_800_tx_pdm_lin_2_type                  wcdma_800_tx_pdm_lin_2;
  
  nvi_wcdma_800_tx_pdm_lin_3_type                  wcdma_800_tx_pdm_lin_3;
  
  nvi_wcdma_1900_tx_pdm_lin_0_type                 wcdma_1900_tx_pdm_lin_0;
  
  nvi_wcdma_1900_tx_pdm_lin_1_type                 wcdma_1900_tx_pdm_lin_1;
  
  nvi_wcdma_1900_tx_pdm_lin_2_type                 wcdma_1900_tx_pdm_lin_2;
  
  nvi_wcdma_1900_tx_pdm_lin_3_type                 wcdma_1900_tx_pdm_lin_3;
  
  nvi_wcdma_900_tx_pdm_lin_0_type                  wcdma_900_tx_pdm_lin_0;
  
  nvi_wcdma_900_tx_pdm_lin_1_type                  wcdma_900_tx_pdm_lin_1;
  
  nvi_wcdma_900_tx_pdm_lin_2_type                  wcdma_900_tx_pdm_lin_2;
  
  nvi_wcdma_900_tx_pdm_lin_3_type                  wcdma_900_tx_pdm_lin_3;
  
  nvi_wcdma_1800_pa_comp_up_vs_freq_type           wcdma_1800_pa_comp_up_vs_freq;
  
  nvi_wcdma_1800_pa_comp_down_vs_freq_type         wcdma_1800_pa_comp_down_vs_freq;
  
  nvi_wcdma_1800_pa_comp_up_r2_vs_freq_type        wcdma_1800_pa_comp_up_r2_vs_freq;
  
  nvi_wcdma_1800_pa_comp_down_r2_vs_freq_type      wcdma_1800_pa_comp_down_r2_vs_freq;
  
  nvi_wcdma_1800_pa_comp_up_r3_vs_freq_type        wcdma_1800_pa_comp_up_r3_vs_freq;
  
  nvi_wcdma_1800_pa_comp_down_r3_vs_freq_type      wcdma_1800_pa_comp_down_r3_vs_freq;
  
  nvi_wcdma_1800_tx_pdm_lin_0_type                 wcdma_1800_tx_pdm_lin_0;
  
  nvi_wcdma_1800_tx_pdm_lin_1_type                 wcdma_1800_tx_pdm_lin_1;
  
  nvi_wcdma_1800_tx_pdm_lin_2_type                 wcdma_1800_tx_pdm_lin_2;
  
  nvi_wcdma_1800_tx_pdm_lin_3_type                 wcdma_1800_tx_pdm_lin_3;
  
  nvi_int16_type                                   wcdma_bc4_vga_gain_offset;
  
  nvi_wcdma_bc4_vga_gain_offset_vs_freq_type       wcdma_bc4_vga_gain_offset_vs_freq;
  
  nvi_wcdma_bc4_vga_gain_offset_vs_temp_type       wcdma_bc4_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   wcdma_bc4_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_bc4_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_bc4_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_bc4_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_bc4_im_level_2;
  
  nvi_int16_type                                   wcdma_bc4_im_level_3;
  
  nvi_int16_type                                   wcdma_bc4_lna_range_offset_2;
  
  nvi_int16_type                                   wcdma_bc4_lna_range_offset_3;
  
  nvi_wcdma_bc4_lna_offset_vs_freq_2_type          wcdma_bc4_lna_offset_vs_freq_2;
  
  nvi_wcdma_bc4_lna_offset_vs_freq_3_type          wcdma_bc4_lna_offset_vs_freq_3;
  
  nvi_uint8_type                                   wcdma_bc4_im2_i_value;
  
  nvi_uint8_type                                   wcdma_bc4_im2_q_value;
  
  nvi_uint8_type                                   wcdma_bc4_im2_transconductor_value;
  
  nvi_int16_type                                   wcdma_bc4_rx_agc_min_2;
  
  nvi_int16_type                                   wcdma_bc4_rx_agc_min_3;
  
  nvi_int8_type                                    wcdma_bc4_max_tx_power;
  
  nvi_int16_type                                   wcdma_bc4_out_of_service_thresh;
  
  nvi_int16_type                                   wcdma_bc4_lna_range_rise;
  
  nvi_int16_type                                   wcdma_bc4_lna_range_fall;
  
  nvi_int16_type                                   wcdma_bc4_im_level;
  
  nvi_uint8_type                                   wcdma_bc4_nonbypass_timer;
  
  nvi_uint16_type                                  wcdma_bc4_bypass_timer;
  
  nvi_int16_type                                   wcdma_bc4_lna_range_offset;
  
  nvi_wcdma_bc4_lna_offset_vs_freq_type            wcdma_bc4_lna_offset_vs_freq;
  
  nvi_int16_type                                   wcdma_bc4_rx_agc_min;
  
  nvi_int16_type                                   wcdma_bc4_rx_agc_max;
  
  nvi_uint8_type                                   wcdma_bc4_agc_phase_offset;
  
  nvi_wcdma_bc4_tx_lin_master_0_type               wcdma_bc4_tx_lin_master_0;
  
  nvi_wcdma_bc4_tx_lin_master_1_type               wcdma_bc4_tx_lin_master_1;
  
  nvi_wcdma_bc4_tx_comp_vs_freq_0_type             wcdma_bc4_tx_comp_vs_freq_0;
  
  nvi_wcdma_bc4_tx_comp_vs_freq_1_type             wcdma_bc4_tx_comp_vs_freq_1;
  
  nvi_wcdma_bc4_tx_lin_vs_temp_0_type              wcdma_bc4_tx_lin_vs_temp_0;
  
  nvi_wcdma_bc4_tx_lin_vs_temp_1_type              wcdma_bc4_tx_lin_vs_temp_1;
  
  nvi_wcdma_bc4_tx_slp_vs_temp_0_type              wcdma_bc4_tx_slp_vs_temp_0;
  
  nvi_wcdma_bc4_tx_slp_vs_temp_1_type              wcdma_bc4_tx_slp_vs_temp_1;
  
  nvi_uint16_type                                  wcdma_bc4_r1_rise;
  
  nvi_uint16_type                                  wcdma_bc4_r1_fall;
  
  nvi_wcdma_bc4_tx_lim_vs_temp_type                wcdma_bc4_tx_lim_vs_temp;
  
  nvi_wcdma_bc4_tx_lim_vs_freq_type                wcdma_bc4_tx_lim_vs_freq;
  
  nvi_uint8_type                                   wcdma_bc4_adj_factor;
  
  nvi_wcdma_bc4_exp_hdet_vs_agc_type               wcdma_bc4_exp_hdet_vs_agc;
  
  nvi_uint8_type                                   wcdma_bc4_hdet_off;
  
  nvi_uint8_type                                   wcdma_bc4_hdet_spn;
  
  nvi_uint32_type                                  wcdma_bc4_enc_btf;
  
  nvi_uint16_type                                  wcdma_bc4_agc_pa_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_bc4_agc_pa_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_bc4_agc_tx_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_bc4_agc_tx_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_bc4_agc_update_tx_agc_time;
  
  nvi_int16_type                                   wcdma_bc4_prach_r1_rise_offset;
  
  nvi_int16_type                                   wcdma_bc4_prach_r1_fall_offset;
  
  nvi_wcdma_bc4_tx_cal_chan_type                   wcdma_bc4_tx_cal_chan;
  
  nvi_wcdma_bc4_rx_cal_chan_type                   wcdma_bc4_rx_cal_chan;
  
  nvi_wcdma_bc4_tx_lin_master_2_type               wcdma_bc4_tx_lin_master_2;
  
  nvi_wcdma_bc4_tx_lin_master_3_type               wcdma_bc4_tx_lin_master_3;
  
  nvi_wcdma_bc4_tx_comp_vs_freq_2_type             wcdma_bc4_tx_comp_vs_freq_2;
  
  nvi_wcdma_bc4_tx_comp_vs_freq_3_type             wcdma_bc4_tx_comp_vs_freq_3;
  
  nvi_wcdma_bc4_tx_lin_vs_temp_2_type              wcdma_bc4_tx_lin_vs_temp_2;
  
  nvi_wcdma_bc4_tx_lin_vs_temp_3_type              wcdma_bc4_tx_lin_vs_temp_3;
  
  nvi_wcdma_bc4_tx_slp_vs_temp_2_type              wcdma_bc4_tx_slp_vs_temp_2;
  
  nvi_wcdma_bc4_tx_slp_vs_temp_3_type              wcdma_bc4_tx_slp_vs_temp_3;
  
  nvi_uint16_type                                  wcdma_bc4_r2_rise;
  
  nvi_uint16_type                                  wcdma_bc4_r2_fall;
  
  nvi_uint16_type                                  wcdma_bc4_r3_rise;
  
  nvi_uint16_type                                  wcdma_bc4_r3_fall;
  
  nvi_int16_type                                   wcdma_bc4_pa_compensate_up_r2;
  
  nvi_int16_type                                   wcdma_bc4_pa_compensate_down_r2;
  
  nvi_int16_type                                   wcdma_bc4_pa_compensate_up_r3;
  
  nvi_int16_type                                   wcdma_bc4_pa_compensate_down_r3;
  
  nvi_uint16_type                                  wcdma_bc4_tx_rot_angle_pa_state_00;
  
  nvi_uint16_type                                  wcdma_bc4_tx_rot_angle_pa_state_01;
  
  nvi_uint16_type                                  wcdma_bc4_tx_rot_angle_pa_state_10;
  
  nvi_uint16_type                                  wcdma_bc4_tx_rot_angle_pa_state_11;
  
  nvi_int16_type                                   wcdma_bc4_prach_r2_rise_offset;
  
  nvi_int16_type                                   wcdma_bc4_prach_r2_fall_offset;
  
  nvi_int16_type                                   wcdma_bc4_prach_r3_rise_offset;
  
  nvi_int16_type                                   wcdma_bc4_prach_r3_fall_offset;
  
  nvi_wcdma_bc4_pa_range_map_type                  wcdma_bc4_pa_range_map;
  
  nvi_int16_type                                   wcdma_bc4_dch_agc_update_tx_agc_time;
  
  nvi_int16_type                                   wcdma_bc4_agc_tx_adj_pdm_delay;
  
  nvi_wcdma_bc4_utran_tx_lim_vs_temp_offset_type   wcdma_bc4_utran_tx_lim_vs_temp_offset;
  
  nvi_int16_type                                   wcdma_bc4_pa_gain_up_time;
  
  nvi_int16_type                                   wcdma_bc4_pa_gain_down_time;
  
  nvi_int16_type                                   wcdma_bc4_pa_compensate_up;
  
  nvi_int16_type                                   wcdma_bc4_pa_compensate_down;
  
  nvi_int16_type                                   wcdma_bc4_rx_delay;
  
  nvi_uint16_type                                  wcdma_bc4_pa_range_for_dvs;
  
  nvi_wcdma_bc4_pa_compensate_up_with_dvs_type     wcdma_bc4_pa_compensate_up_with_dvs;
  
  nvi_wcdma_bc4_pa_compensate_dn_with_dvs_type     wcdma_bc4_pa_compensate_dn_with_dvs;
  
  nvi_wcdma_bc4_max_pwr_backoff_voltages_type      wcdma_bc4_max_pwr_backoff_voltages;
  
  nvi_wcdma_bc4_max_pwr_backoff_volt1_type         wcdma_bc4_max_pwr_backoff_volt1;
  
  nvi_wcdma_bc4_max_pwr_backoff_volt2_type         wcdma_bc4_max_pwr_backoff_volt2;
  
  nvi_wcdma_bc4_max_pwr_backoff_volt3_type         wcdma_bc4_max_pwr_backoff_volt3;
  
  nvi_int16_type                                   wcdma_bc4_hs_r1_rise;
  
  nvi_int16_type                                   wcdma_bc4_hs_r1_fall;
  
  nvi_int16_type                                   wcdma_bc4_hs_r2_rise;
  
  nvi_int16_type                                   wcdma_bc4_hs_r2_fall;
  
  nvi_int16_type                                   wcdma_bc4_hs_r3_rise;
  
  nvi_int16_type                                   wcdma_bc4_hs_r3_fall;
  
  nvi_rfr_vco_coarse_tuning_bc4_type               rfr_vco_coarse_tuning_bc4;
  
  nvi_rf_antsel_umts_900_type                      rf_antsel_umts_900;
  
  nvi_rf_antsel_umts_bc4_type                      rf_antsel_umts_bc4;
  
  nvi_uint8_type                                   gps1_nmea_output;
  
  nvi_roam_ind_custom_home_type                    roam_ind_custom_home;
  
  nvi_boolean_type                                 cdma_so68_enabled;
  
  nvi_uint8_type                                   rtr_bb_filter;
  
  nvi_mf_chan_support_type                         mf_chan_support;
  
  nvi_mf_rf_path_config_type                       mf_rf_path_config;
  
  nvi_mf_rssi_cal_vs_freq_0_type                   mf_rssi_cal_vs_freq_0;
  
  nvi_mf_rssi_cal_vs_freq_1_type                   mf_rssi_cal_vs_freq_1;
  
  nvi_mf_rssi_cal_vs_freq_2_type                   mf_rssi_cal_vs_freq_2;
  
  nvi_mf_rssi_cal_vs_freq_3_type                   mf_rssi_cal_vs_freq_3;
  
  nvi_boolean_type                                 uploadmedia_postcard_server_readonly;
  
  nvi_boolean_type                                 umts_call_vt_codec_list;
  
  nvi_wcdma_bc4_tx_pdm_lin_0_type                  wcdma_bc4_tx_pdm_lin_0;
  
  nvi_wcdma_bc4_tx_pdm_lin_1_type                  wcdma_bc4_tx_pdm_lin_1;
  
  nvi_wcdma_bc4_tx_pdm_lin_2_type                  wcdma_bc4_tx_pdm_lin_2;
  
  nvi_wcdma_bc4_tx_pdm_lin_3_type                  wcdma_bc4_tx_pdm_lin_3;
  
  nvi_uint8_type                                   interrat_nacc_support;
  
  nvi_uint8_type                                   darp_feature_support;
  
  nvi_uint8_type                                   hsdpa_cat;
  
  nvi_uint8_type                                   set_display_layout;
  
  nvi_boolean_type                                 set_chinese_associated_switch;
  
  nvi_uint8_type                                   set_chinese_input_methods;
  
  nvi_enum_type                                    wlan_qos_mode;
  
  nvi_boolean_type                                 game_mode_persist;
  
  nvi_boolean_type                                 game_mode;
  
  nvi_int16_type                                   gsm_850_gmsk_multislot_2_tx_pwr;
  
  nvi_int16_type                                   gsm_850_gmsk_multislot_3_tx_pwr;
  
  nvi_int16_type                                   gsm_850_gmsk_multislot_4_tx_pwr;
  
  nvi_int16_type                                   gsm_850_gmsk_multislot_5_tx_pwr;
  
  nvi_int16_type                                   gsm_gmsk_multislot_2_tx_pwr;
  
  nvi_int16_type                                   gsm_gmsk_multislot_3_tx_pwr;
  
  nvi_int16_type                                   gsm_gmsk_multislot_4_tx_pwr;
  
  nvi_int16_type                                   gsm_gmsk_multislot_5_tx_pwr;
  
  nvi_int16_type                                   dcs_gmsk_multislot_2_tx_pwr;
  
  nvi_int16_type                                   dcs_gmsk_multislot_3_tx_pwr;
  
  nvi_int16_type                                   dcs_gmsk_multislot_4_tx_pwr;
  
  nvi_int16_type                                   dcs_gmsk_multislot_5_tx_pwr;
  
  nvi_int16_type                                   gsm_1900_gmsk_multislot_2_tx_pwr;
  
  nvi_int16_type                                   gsm_1900_gmsk_multislot_3_tx_pwr;
  
  nvi_int16_type                                   gsm_1900_gmsk_multislot_4_tx_pwr;
  
  nvi_int16_type                                   gsm_1900_gmsk_multislot_5_tx_pwr;
  
  nvi_int16_type                                   gsm_850_8psk_multislot_2_tx_pwr;
  
  nvi_int16_type                                   gsm_850_8psk_multislot_3_tx_pwr;
  
  nvi_int16_type                                   gsm_850_8psk_multislot_4_tx_pwr;
  
  nvi_int16_type                                   gsm_850_8psk_multislot_5_tx_pwr;
  
  nvi_int16_type                                   gsm_8psk_multislot_2_tx_pwr;
  
  nvi_int16_type                                   gsm_8psk_multislot_3_tx_pwr;
  
  nvi_int16_type                                   gsm_8psk_multislot_4_tx_pwr;
  
  nvi_int16_type                                   gsm_8psk_multislot_5_tx_pwr;
  
  nvi_int16_type                                   dcs_8psk_multislot_2_tx_pwr;
  
  nvi_int16_type                                   dcs_8psk_multislot_3_tx_pwr;
  
  nvi_int16_type                                   dcs_8psk_multislot_4_tx_pwr;
  
  nvi_int16_type                                   dcs_8psk_multislot_5_tx_pwr;
  
  nvi_int16_type                                   gsm_1900_8psk_multislot_2_tx_pwr;
  
  nvi_int16_type                                   gsm_1900_8psk_multislot_3_tx_pwr;
  
  nvi_int16_type                                   gsm_1900_8psk_multislot_4_tx_pwr;
  
  nvi_int16_type                                   gsm_1900_8psk_multislot_5_tx_pwr;
  
  nvi_uint8_type                                   multislot_gmsk_power_profile;
  
  nvi_uint8_type                                   multislot_8psk_power_profile;
  
  nvi_uint8_type                                   hsdpa_compressed_mode_enabled;
  
  nvi_lock_code_ext_type                           lock_code_ext;
  
  nvi_wcdma_iaccum_type                            wcdma_iaccum;
  
  nvi_wcdma_qaccum_type                            wcdma_qaccum;
  
  nvi_wcdma_1900_iaccum_type                       wcdma_1900_iaccum;
  
  nvi_wcdma_1900_qaccum_type                       wcdma_1900_qaccum;
  
  nvi_wcdma_1800_iaccum_type                       wcdma_1800_iaccum;
  
  nvi_wcdma_1800_qaccum_type                       wcdma_1800_qaccum;
  
  nvi_wcdma_bc4_iaccum_type                        wcdma_bc4_iaccum;
  
  nvi_wcdma_bc4_qaccum_type                        wcdma_bc4_qaccum;
  
  nvi_wcdma_800_iaccum_type                        wcdma_800_iaccum;
  
  nvi_wcdma_800_qaccum_type                        wcdma_800_qaccum;
  
  nvi_wcdma_900_iaccum_type                        wcdma_900_iaccum;
  
  nvi_wcdma_900_qaccum_type                        wcdma_900_qaccum;
  
  nvi_boolean_type                                 wcdma_rrc_pdcp_disabled;
  
  nvi_gsm_im2_type                                 gsm_im2_850;
  
  nvi_gsm_im2_type                                 gsm_im2_900;
  
  nvi_gsm_im2_type                                 gsm_im2_1800;
  
  nvi_gsm_im2_type                                 gsm_im2_1900;
  
  nvi_uint8_type                                   market_region_ui;
  
  nvi_tx_rsb_corr_type                             gsm_tx_rsb_corr;
  
  nvi_tx_rsb_corr_type                             dcs_tx_rsb_corr;
  
  nvi_tx_rsb_corr_type                             gsm_850_tx_rsb_corr;
  
  nvi_tx_rsb_corr_type                             gsm_1900_tx_rsb_corr;
  
  nvi_boolean_type                                 voip_qos_enabled;
  
  nvi_sec_csprng_init_seed_type                    sec_csprng_init_seed;
  
  nvi_boolean_type                                 hdr_min_uati_mode;
  
  nvi_boolean_type                                 voip_write_media_file_enabled;
  
  nvi_boolean_type                                 voip_read_media_file_enabled;
  
  nvi_boolean_type                                 rdb_lock_to_user;
  
  nvi_uint8_type                                   ms_messagingdaemon_log_enabled;
  
  nvi_boolean_type                                 java_positioning_enabled;
  
  nvi_lock_code_ext_digits_type                    lock_code_ext_digits;
  
  nvi_boolean_type                                 cdma_so70_enabled;
  
  nvi_hdridle_desired_slotted_mode_config          hdridle_desired_slotted_mode_config;
  
  nvi_wcdma_1800_drx_mode_sel_type                 wcdma_1800_drx_mode_sel;
  
  nvi_wcdma_1900_drx_mode_sel_type                 wcdma_1900_drx_mode_sel;
  
  nvi_wcdma_2100_drx_mode_sel_type                 wcdma_2100_drx_mode_sel;
  
  nvi_wcdma_800_drx_mode_sel_type                  wcdma_800_drx_mode_sel;
  
  nvi_wcdma_900_drx_mode_sel_type                  wcdma_900_drx_mode_sel;
  
  nvi_wcdma_bc4_drx_mode_sel_type                  wcdma_bc4_drx_mode_sel;
  
  nvi_gps_drx_mode_sel_type                        gps_drx_mode_sel;
  
  nvi_uint8_type                                   apps_pwrc_disable;
  
  nvi_enum_type                                    wlan_oem_index;
  
  nvi_boolean_type                                 ms_notify_first_retry;
  
  nvi_uint8_type                                   hdrscp_force_rel0_config;
  
  nvi_uim_config_params_type                       uim_config_params;
  
  nvi_hdrscmdb_secure_config_type                  hdrscmdb_secure_config;
  
  nvi_hdramp_location_type                         hdramp_location;
  
  nvi_boolean_type                                 crash_debug_disallowed;
  
  nvi_boolean_type                                 edtm_feature_support;
  
  nvi_uint8_type                                   wcdma_hsupa_category;
  
  nvi_uint32_type                                  wcdma_optional_feature_list;
  
  nvi_xo_trim_vals_type                            xo_trim_values;
  
  nvi_gsm_path_delay_comp_freq_tbl_type            gsm_path_delay_comp_freq_tbl;
  
  nvi_gsm_850_path_delay_comp_freq_tbl_type        gsm_850_path_delay_comp_freq_tbl;
  
  nvi_gsm_path_delay_cold_temp_vs_freq_type        gsm_path_delay_cold_temp_vs_freq;
  
  nvi_gsm_path_delay_room_temp_vs_freq_type        gsm_path_delay_room_temp_vs_freq;
  
  nvi_gsm_path_delay_hot_temp_vs_freq_type         gsm_path_delay_hot_temp_vs_freq;
  
  nvi_gsm_850_path_delay_cold_temp_vs_freq_type    gsm_850_path_delay_cold_temp_vs_freq;
  
  nvi_gsm_850_path_delay_room_temp_vs_freq_type    gsm_850_path_delay_room_temp_vs_freq;
  
  nvi_gsm_850_path_delay_hot_temp_vs_freq_type     gsm_850_path_delay_hot_temp_vs_freq;
  
  nvi_int8_type                                    therm_value_t1;
  
  nvi_int8_type                                    therm_value_t2;
  
  nvi_int8_type                                    therm_value_t3;
  
  nvi_int8_type                                    therm_value_t4;
  
  nvi_int8_type                                    therm_temp_min;
  
  nvi_int8_type                                    therm_temp_max;
  
  nvi_uint32_type                                  sms_max_payload_length;
  
  nvi_uint8_type                                   sms_mo_on_access_channel;
  
  nvi_boolean_type                                 sms_mo_on_traffic_channel;
  
  nvi_uint16_type                                  voip_confrd_uri;
  
  nvi_hdrl1_dbg_msk_type                           hdrl1_dbg_msk;
  
  nvi_boolean_type                                 bus_prof_ebi1_enable;
  
  nvi_boolean_type                                 bus_prof_smi_enable;
  
  nvi_bus_prof_ebi1_mode_type                      bus_prof_ebi1_mode;
  
  nvi_bus_prof_smi_mode_type                       bus_prof_smi_mode;
  
  nvi_uint32_type                                  bus_prof_ebi1_trigger_id;
  
  nvi_uint32_type                                  bus_prof_smi_trigger_id;
  
  nvi_uint32_type                                  bus_prof_ebi1_bus_count;
  
  nvi_uint32_type                                  bus_prof_smi_bus_count;
  
  nvi_bus_prof_simple_settings_t                   bus_prof_ebi1_simple_settings_0;
  
  nvi_bus_prof_simple_settings_t                   bus_prof_ebi1_simple_settings_1;
  
  nvi_bus_prof_simple_settings_t                   bus_prof_ebi1_simple_settings_2;
  
  nvi_bus_prof_simple_settings_t                   bus_prof_ebi1_simple_settings_3;
  
  nvi_bus_prof_simple_settings_t                   bus_prof_smi_simple_settings_0;
  
  nvi_bus_prof_simple_settings_t                   bus_prof_smi_simple_settings_1;
  
  nvi_bus_prof_simple_settings_t                   bus_prof_smi_simple_settings_2;
  
  nvi_bus_prof_simple_settings_t                   bus_prof_smi_simple_settings_3;
  
  nvi_bus_prof_advanced_settings_t                 bus_prof_ebi1_advance_settings_0;
  
  nvi_bus_prof_advanced_settings_t                 bus_prof_ebi1_advance_settings_1;
  
  nvi_bus_prof_advanced_settings_t                 bus_prof_ebi1_advance_settings_2;
  
  nvi_bus_prof_advanced_settings_t                 bus_prof_ebi1_advance_settings_3;
  
  nvi_bus_prof_advanced_settings_t                 bus_prof_smi_advance_settings_0;
  
  nvi_bus_prof_advanced_settings_t                 bus_prof_smi_advance_settings_1;
  
  nvi_bus_prof_advanced_settings_t                 bus_prof_smi_advance_settings_2;
  
  nvi_bus_prof_advanced_settings_t                 bus_prof_smi_advance_settings_3;
  
  nvi_uint8_type                                   hdr_qos_flow_priority;
  
  nvi_uint8_type                                   rf_pm_config;
  
  nvi_boolean_type                                 sms_tl_ack_enabled;
  
  nvi_wlan_bss_type_pref                           wlan_bss_type_pref;
  
  nvi_hdridle_pref_slotted_mode_config_type        hdridle_pref_slotted_mode_config;
  
  nvi_boolean_type                                 cpu_based_flow_control;
  
  nvi_uint32_type                                  pat_acq_timeout;
  
  nvi_uint32_type                                  pmt_acq_timeout;
  
  nvi_uint32_type                                  int_acq_timeout;
  
  nvi_uint8_type                                   voip_registration_mode;
  
  nvi_uint16_type                                  gps1_cme_max_throttle_duration;
  
  nvi_uint64_type                                  time_tod_offset;
  
  nvi_tx_linearizer_type                           bc15_tx_lin_master0;
  
  nvi_tx_linearizer_type                           bc15_tx_lin_master1;
  
  nvi_tx_linearizer_type                           bc15_tx_lin_master2;
  
  nvi_tx_linearizer_type                           bc15_tx_lin_master3;
  
  nvi_uint16_type                                  bc15_gps1_rf_delay;
  
  nvi_bc15_tx_lim_vs_temp_type                     bc15_tx_lim_vs_temp;
  
  nvi_tx_comp_type                                 bc15_tx_comp0;
  
  nvi_tx_comp_type                                 bc15_tx_comp1;
  
  nvi_tx_comp_type                                 bc15_tx_comp2;
  
  nvi_tx_comp_type                                 bc15_tx_comp3;
  
  nvi_bc15_tx_lim_vs_freq_type                     bc15_tx_lim_vs_freq;
  
  nvi_uint8_type                                   bc15_pa_r1_rise;
  
  nvi_uint8_type                                   bc15_pa_r1_fall;
  
  nvi_uint8_type                                   bc15_pa_r2_rise;
  
  nvi_uint8_type                                   bc15_pa_r2_fall;
  
  nvi_uint8_type                                   bc15_pa_r3_rise;
  
  nvi_uint8_type                                   bc15_pa_r3_fall;
  
  nvi_uint8_type                                   bc15_hdet_off;
  
  nvi_uint8_type                                   bc15_hdet_spn;
  
  nvi_bc15_exp_hdet_vs_agc_type                    bc15_exp_hdet_vs_agc;
  
  nvi_uint32_type                                  bc15_enc_btf;
  
  nvi_bc15_vco_coarse_tune_table_type              bc15_vco_coarse_tune_table;
  
  nvi_bc15_vco_tune_2_type                         bc15_vco_tune_2;
  
  nvi_bc15_p1_rise_fall_off_type                   bc15_p1_rise_fall_off;
  
  nvi_bc15_hdr_p1_rise_fall_off_type               bc15_hdr_p1_rise_fall_off;
  
  nvi_c0_bc15_tx_cal_chan_type                     c0_bc15_tx_cal_chan;
  
  nvi_c0_bc15_rx_cal_chan_type                     c0_bc15_rx_cal_chan;
  
  nvi_c0_bc15_rx_cal_chan_lru_type                 c0_bc15_rx_cal_chan_lru;
  
  nvi_int16_type                                   c0_bc15_lna_1_offset;
  
  nvi_int16_type                                   c0_bc15_lna_2_offset;
  
  nvi_int16_type                                   c0_bc15_lna_3_offset;
  
  nvi_int16_type                                   c0_bc15_lna_4_offset;
  
  nvi_c0_bc15_lna_1_offset_vs_freq_type            c0_bc15_lna_1_offset_vs_freq;
  
  nvi_c0_bc15_lna_2_offset_vs_freq_type            c0_bc15_lna_2_offset_vs_freq;
  
  nvi_c0_bc15_lna_3_offset_vs_freq_type            c0_bc15_lna_3_offset_vs_freq;
  
  nvi_c0_bc15_lna_4_offset_vs_freq_type            c0_bc15_lna_4_offset_vs_freq;
  
  nvi_uint8_type                                   c0_bc15_im2_i_value;
  
  nvi_uint8_type                                   c0_bc15_im2_q_value;
  
  nvi_int16_type                                   c0_bc15_vga_gain_offset;
  
  nvi_c0_bc15_vga_gain_offset_vs_freq_type         c0_bc15_vga_gain_offset_vs_freq;
  
  nvi_uint8_type                                   c0_bc15_im2_transconductor_value;
  
  nvi_int8_type                                    c0_bc15_lna_1_rise;
  
  nvi_int8_type                                    c0_bc15_lna_1_fall;
  
  nvi_int8_type                                    c0_bc15_lna_2_rise;
  
  nvi_int8_type                                    c0_bc15_lna_2_fall;
  
  nvi_int8_type                                    c0_bc15_lna_3_rise;
  
  nvi_int8_type                                    c0_bc15_lna_3_fall;
  
  nvi_int8_type                                    c0_bc15_lna_4_rise;
  
  nvi_int8_type                                    c0_bc15_lna_4_fall;
  
  nvi_uint8_type                                   c0_bc15_im_level1;
  
  nvi_uint8_type                                   c0_bc15_im_level2;
  
  nvi_uint8_type                                   c0_bc15_im_level3;
  
  nvi_uint8_type                                   c0_bc15_im_level4;
  
  nvi_c1_bc15_tx_cal_chan_type                     c1_bc15_tx_cal_chan;
  
  nvi_c1_bc15_rx_cal_chan_type                     c1_bc15_rx_cal_chan;
  
  nvi_c1_bc15_lna_1_offset_vs_freq_type            c1_bc15_lna_1_offset_vs_freq;
  
  nvi_c1_bc15_lna_2_offset_vs_freq_type            c1_bc15_lna_2_offset_vs_freq;
  
  nvi_c1_bc15_lna_3_offset_vs_freq_type            c1_bc15_lna_3_offset_vs_freq;
  
  nvi_c1_bc15_lna_4_offset_vs_freq_type            c1_bc15_lna_4_offset_vs_freq;
  
  nvi_int16_type                                   c1_bc15_lna_1_offset;
  
  nvi_int16_type                                   c1_bc15_lna_2_offset;
  
  nvi_int16_type                                   c1_bc15_lna_3_offset;
  
  nvi_int16_type                                   c1_bc15_lna_4_offset;
  
  nvi_uint8_type                                   c1_bc15_im2_i_value;
  
  nvi_uint8_type                                   c1_bc15_im2_q_value;
  
  nvi_int16_type                                   c1_bc15_vga_gain_offset;
  
  nvi_c1_bc15_vga_gain_offset_vs_freq_type         c1_bc15_vga_gain_offset_vs_freq;
  
  nvi_uint8_type                                   c1_bc15_im2_transconductor_value;
  
  nvi_int8_type                                    c1_bc15_lna_1_rise;
  
  nvi_int8_type                                    c1_bc15_lna_1_fall;
  
  nvi_int8_type                                    c1_bc15_lna_2_rise;
  
  nvi_int8_type                                    c1_bc15_lna_2_fall;
  
  nvi_int8_type                                    c1_bc15_lna_3_rise;
  
  nvi_int8_type                                    c1_bc15_lna_3_fall;
  
  nvi_int8_type                                    c1_bc15_lna_4_rise;
  
  nvi_int8_type                                    c1_bc15_lna_4_fall;
  
  nvi_uint8_type                                   c1_bc15_im_level1;
  
  nvi_uint8_type                                   c1_bc15_im_level2;
  
  nvi_uint8_type                                   c1_bc15_im_level3;
  
  nvi_uint8_type                                   c1_bc15_im_level4;
  
  nvi_c1_bc15_vco_coarse_tune_table_type           c1_bc15_vco_coarse_tune_table;
  
  nvi_bc15_ant_quality_type                        bc15_ant_quality;
  
  nvi_uint16_type                                  bc15_pa_dvs_voltage;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc15_lna_switchpoints_lpm_1;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc15_lna_switchpoints_lpm_2;
  
  nvi_rf_rx_im2_cal                                c0_bc15_im2_lpm_1;
  
  nvi_rf_rx_im2_cal                                c0_bc15_im2_lpm_2;
  
  nvi_c0_bc15_intelliceiver_cal_type               c0_bc15_intelliceiver_cal;
  
  nvi_c0_bc15_intelliceiver_det_thresh_type        c0_bc15_intelliceiver_det_thresh;
  
  nvi_c1_bc15_rx_cal_chan_lru_type                 c1_bc15_rx_cal_chan_lru;
  
  nvi_uint32_type                                  dcvs_acpu_enable;
  
  nvi_gpsone_password_type                         gpsone_password;
  
  nvi_uint16_type                                  voip_callerid_mode;
  
  nvi_uint8_type                                   wlan_multidomain_capability_pref;
  
  nvi_boolean_type                                 umts_nbns_enable;
  
  nvi_enum_type                                    scudif_callsetup_pref;
  
  nvi_uint16_type                                  voip_refer_subscription_expires_duration;
  
  nvi_uint16_type                                  voip_notify_refer_response_duration;
  
  nvi_uint32_type                                  sms_service_option;
  
  nvi_uint8_type                                   drm_bind_sim_rights;
  
  nvi_gsm_850_pa_temp_comp_max_pwr_type            gsm_850_pa_temp_comp_max_pwr;
  
  nvi_gsm_pa_temp_comp_max_pwr_type                gsm_pa_temp_comp_max_pwr;
  
  nvi_dcs_pa_temp_comp_max_pwr_type                dcs_pa_temp_comp_max_pwr;
  
  nvi_gsm_1900_pa_temp_comp_max_pwr_type           gsm_1900_pa_temp_comp_max_pwr;
  
  nvi_gsm_rssi_temp_values_type                    gsm_rssi_temp_values;
  
  nvi_gsm_850_rx_gain_range_1_temp_comp_type       gsm_850_rx_gain_range_1_temp_comp;
  
  nvi_gsm_rx_gain_range_1_temp_comp_type           gsm_rx_gain_range_1_temp_comp;
  
  nvi_dcs_rx_gain_range_1_temp_comp_type           dcs_rx_gain_range_1_temp_comp;
  
  nvi_gsm_1900_rx_gain_range_1_temp_comp_type      gsm_1900_rx_gain_range_1_temp_comp;
  
  nvi_gsm_850_rx_gain_range_2_temp_comp_type       gsm_850_rx_gain_range_2_temp_comp;
  
  nvi_gsm_rx_gain_range_2_temp_comp_type           gsm_rx_gain_range_2_temp_comp;
  
  nvi_dcs_rx_gain_range_2_temp_comp_type           dcs_rx_gain_range_2_temp_comp;
  
  nvi_gsm_1900_rx_gain_range_2_temp_comp_type      gsm_1900_rx_gain_range_2_temp_comp;
  
  nvi_gsm_850_rx_gain_range_3_temp_comp_type       gsm_850_rx_gain_range_3_temp_comp;
  
  nvi_gsm_rx_gain_range_3_temp_comp_type           gsm_rx_gain_range_3_temp_comp;
  
  nvi_dcs_rx_gain_range_3_temp_comp_type           dcs_rx_gain_range_3_temp_comp;
  
  nvi_gsm_1900_rx_gain_range_3_temp_comp_type      gsm_1900_rx_gain_range_3_temp_comp;
  
  nvi_gsm_850_rx_gain_range_4_temp_comp_type       gsm_850_rx_gain_range_4_temp_comp;
  
  nvi_gsm_rx_gain_range_4_temp_comp_type           gsm_rx_gain_range_4_temp_comp;
  
  nvi_dcs_rx_gain_range_4_temp_comp_type           dcs_rx_gain_range_4_temp_comp;
  
  nvi_gsm_1900_rx_gain_range_4_temp_comp_type      gsm_1900_rx_gain_range_4_temp_comp;
  
  nvi_gsm_850_rx_gain_range_5_temp_comp_type       gsm_850_rx_gain_range_5_temp_comp;
  
  nvi_gsm_rx_gain_range_5_temp_comp_type           gsm_rx_gain_range_5_temp_comp;
  
  nvi_dcs_rx_gain_range_5_temp_comp_type           dcs_rx_gain_range_5_temp_comp;
  
  nvi_gsm_1900_rx_gain_range_5_temp_comp_type      gsm_1900_rx_gain_range_5_temp_comp;
  
  nvi_dcvsapps_type                                dcvsapps_nv;
  
  nvi_uint8_type                                   gps1_sec_update_rate;
  
  nvi_uint32_type                                  mmgsdi_me_config_param;
  
  nvi_uint8_type                                   ds_mip_dereg_retries;
  
  nvi_boolean_type                                 ruim_no_support;
  
  nvi_boolean_type                                 uim_select_default_usim_app;
  
  nvi_uint8_type                                   detect_hw_reset;
  
  nvi_int16_type                                   wcdma_im_level_4;
  
  nvi_wcdma_lna_offset_vs_freq_4_type              wcdma_lna_offset_vs_freq_4;
  
  nvi_int16_type                                   wcdma_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_lna_range_offset_4;
  
  nvi_int16_type                                   wcdma_lna_range_rise_4;
  
  nvi_int16_type                                   wcdma_1900_im_level_4;
  
  nvi_wcdma_1900_lna_offset_vs_freq_4_type         wcdma_1900_lna_offset_vs_freq_4;
  
  nvi_int16_type                                   wcdma_1900_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_1900_lna_range_offset_4;
  
  nvi_int16_type                                   wcdma_1900_lna_range_rise_4;
  
  nvi_int16_type                                   wcdma_800_im_level_4;
  
  nvi_wcdma_800_lna_offset_vs_freq_4_type          wcdma_800_lna_offset_vs_freq_4;
  
  nvi_int16_type                                   wcdma_800_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_800_lna_range_offset_4;
  
  nvi_int16_type                                   wcdma_800_lna_range_rise_4;
  
  nvi_int16_type                                   wcdma_1800_im_level_4;
  
  nvi_wcdma_1800_lna_offset_vs_freq_4_type         wcdma_1800_lna_offset_vs_freq_4;
  
  nvi_int16_type                                   wcdma_1800_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_1800_lna_range_offset_4;
  
  nvi_int16_type                                   wcdma_1800_lna_range_rise_4;
  
  nvi_int16_type                                   wcdma_900_im_level_4;
  
  nvi_wcdma_900_lna_offset_vs_freq_4_type          wcdma_900_lna_offset_vs_freq_4;
  
  nvi_int16_type                                   wcdma_900_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_900_lna_range_offset_4;
  
  nvi_int16_type                                   wcdma_900_lna_range_rise_4;
  
  nvi_int16_type                                   wcdma_bc4_im_level_4;
  
  nvi_wcdma_bc4_lna_offset_vs_freq_4_type          wcdma_bc4_lna_offset_vs_freq_4;
  
  nvi_int16_type                                   wcdma_bc4_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_bc4_lna_range_offset_4;
  
  nvi_int16_type                                   wcdma_bc4_lna_range_rise_4;
  
  nvi_boolean_type                                 ipv6_privacy_extensions_enabled;
  
  nvi_ipv6_priv_addr_config                        ipv6_private_address_config;
  
  nvi_uint8_type                                   gprs_gea_algorithms_supported;
  
  nvi_boolean_type                                 rex_trace;
  
  nvi_int16_type                                   c1_wcdma_1800_vga_gain_offset;
  
  nvi_c1_wcdma_1800_vga_gain_offset_vs_freq_type   c1_wcdma_1800_vga_gain_offset_vs_freq;
  
  nvi_c1_wcdma_1800_vga_gain_offset_vs_temp_type   c1_wcdma_1800_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   c1_wcdma_1800_lna_range_rise;
  
  nvi_int16_type                                   c1_wcdma_1800_lna_range_rise_2;
  
  nvi_int16_type                                   c1_wcdma_1800_lna_range_rise_3;
  
  nvi_int16_type                                   c1_wcdma_1800_lna_range_rise_4;
  
  nvi_int16_type                                   c1_wcdma_1800_lna_range_fall;
  
  nvi_int16_type                                   c1_wcdma_1800_lna_range_fall_2;
  
  nvi_int16_type                                   c1_wcdma_1800_lna_range_fall_3;
  
  nvi_int16_type                                   c1_wcdma_1800_lna_range_fall_4;
  
  nvi_int16_type                                   c1_wcdma_1800_im_level;
  
  nvi_int16_type                                   c1_wcdma_1800_im_level_2;
  
  nvi_int16_type                                   c1_wcdma_1800_im_level_3;
  
  nvi_int16_type                                   c1_wcdma_1800_im_level_4;
  
  nvi_int16_type                                   c1_wcdma_1800_lna_range_offset_2;
  
  nvi_int16_type                                   c1_wcdma_1800_lna_range_offset_3;
  
  nvi_int16_type                                   c1_wcdma_1800_lna_range_offset_4;
  
  nvi_c1_wcdma_1800_lna_offset_vs_freq_2_type      c1_wcdma_1800_lna_offset_vs_freq_2;
  
  nvi_c1_wcdma_1800_lna_offset_vs_freq_3_type      c1_wcdma_1800_lna_offset_vs_freq_3;
  
  nvi_c1_wcdma_1800_lna_offset_vs_freq_4_type      c1_wcdma_1800_lna_offset_vs_freq_4;
  
  nvi_uint8_type                                   c1_wcdma_1800_im2_i_value;
  
  nvi_uint8_type                                   c1_wcdma_1800_im2_q_value;
  
  nvi_uint8_type                                   c1_wcdma_1800_im2_transconductor_value;
  
  nvi_uint8_type                                   c1_wcdma_1800_nonbypass_timer;
  
  nvi_uint16_type                                  c1_wcdma_1800_bypass_timer;
  
  nvi_int16_type                                   c1_wcdma_1800_lna_range_offset;
  
  nvi_c1_wcdma_1800_lna_offset_vs_freq_type        c1_wcdma_1800_lna_offset_vs_freq;
  
  nvi_c1_wcdma_1800_rx_cal_chan_type               c1_wcdma_1800_rx_cal_chan;
  
  nvi_int16_type                                   c1_wcdma_900_vga_gain_offset;
  
  nvi_c1_wcdma_900_vga_gain_offset_vs_freq_type    c1_wcdma_900_vga_gain_offset_vs_freq;
  
  nvi_c1_wcdma_900_vga_gain_offset_vs_temp_type    c1_wcdma_900_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   c1_wcdma_900_lna_range_rise;
  
  nvi_int16_type                                   c1_wcdma_900_lna_range_rise_2;
  
  nvi_int16_type                                   c1_wcdma_900_lna_range_rise_3;
  
  nvi_int16_type                                   c1_wcdma_900_lna_range_rise_4;
  
  nvi_int16_type                                   c1_wcdma_900_lna_range_fall;
  
  nvi_int16_type                                   c1_wcdma_900_lna_range_fall_2;
  
  nvi_int16_type                                   c1_wcdma_900_lna_range_fall_3;
  
  nvi_int16_type                                   c1_wcdma_900_lna_range_fall_4;
  
  nvi_int16_type                                   c1_wcdma_900_im_level;
  
  nvi_int16_type                                   c1_wcdma_900_im_level_2;
  
  nvi_int16_type                                   c1_wcdma_900_im_level_3;
  
  nvi_int16_type                                   c1_wcdma_900_im_level_4;
  
  nvi_int16_type                                   c1_wcdma_900_lna_range_offset_2;
  
  nvi_int16_type                                   c1_wcdma_900_lna_range_offset_3;
  
  nvi_int16_type                                   c1_wcdma_900_lna_range_offset_4;
  
  nvi_c1_wcdma_900_lna_offset_vs_freq_2_type       c1_wcdma_900_lna_offset_vs_freq_2;
  
  nvi_c1_wcdma_900_lna_offset_vs_freq_3_type       c1_wcdma_900_lna_offset_vs_freq_3;
  
  nvi_c1_wcdma_900_lna_offset_vs_freq_4_type       c1_wcdma_900_lna_offset_vs_freq_4;
  
  nvi_uint8_type                                   c1_wcdma_900_im2_i_value;
  
  nvi_uint8_type                                   c1_wcdma_900_im2_q_value;
  
  nvi_uint8_type                                   c1_wcdma_900_im2_transconductor_value;
  
  nvi_uint8_type                                   c1_wcdma_900_nonbypass_timer;
  
  nvi_uint16_type                                  c1_wcdma_900_bypass_timer;
  
  nvi_int16_type                                   c1_wcdma_900_lna_range_offset;
  
  nvi_c1_wcdma_900_lna_offset_vs_freq_type         c1_wcdma_900_lna_offset_vs_freq;
  
  nvi_c1_wcdma_900_rx_cal_chan_type                c1_wcdma_900_rx_cal_chan;
  
  nvi_int16_type                                   c1_wcdma_bc4_vga_gain_offset;
  
  nvi_c1_wcdma_bc4_vga_gain_offset_vs_freq_type    c1_wcdma_bc4_vga_gain_offset_vs_freq;
  
  nvi_c1_wcdma_bc4_vga_gain_offset_vs_temp_type    c1_wcdma_bc4_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   c1_wcdma_bc4_lna_range_rise;
  
  nvi_int16_type                                   c1_wcdma_bc4_lna_range_rise_2;
  
  nvi_int16_type                                   c1_wcdma_bc4_lna_range_rise_3;
  
  nvi_int16_type                                   c1_wcdma_bc4_lna_range_rise_4;
  
  nvi_int16_type                                   c1_wcdma_bc4_lna_range_fall;
  
  nvi_int16_type                                   c1_wcdma_bc4_lna_range_fall_2;
  
  nvi_int16_type                                   c1_wcdma_bc4_lna_range_fall_3;
  
  nvi_int16_type                                   c1_wcdma_bc4_lna_range_fall_4;
  
  nvi_int16_type                                   c1_wcdma_bc4_im_level;
  
  nvi_int16_type                                   c1_wcdma_bc4_im_level_2;
  
  nvi_int16_type                                   c1_wcdma_bc4_im_level_3;
  
  nvi_int16_type                                   c1_wcdma_bc4_im_level_4;
  
  nvi_int16_type                                   c1_wcdma_bc4_lna_range_offset_2;
  
  nvi_int16_type                                   c1_wcdma_bc4_lna_range_offset_3;
  
  nvi_int16_type                                   c1_wcdma_bc4_lna_range_offset_4;
  
  nvi_c1_wcdma_bc4_lna_offset_vs_freq_2_type       c1_wcdma_bc4_lna_offset_vs_freq_2;
  
  nvi_c1_wcdma_bc4_lna_offset_vs_freq_3_type       c1_wcdma_bc4_lna_offset_vs_freq_3;
  
  nvi_c1_wcdma_bc4_lna_offset_vs_freq_4_type       c1_wcdma_bc4_lna_offset_vs_freq_4;
  
  nvi_uint8_type                                   c1_wcdma_bc4_im2_i_value;
  
  nvi_uint8_type                                   c1_wcdma_bc4_im2_q_value;
  
  nvi_uint8_type                                   c1_wcdma_bc4_im2_transconductor_value;
  
  nvi_uint8_type                                   c1_wcdma_bc4_nonbypass_timer;
  
  nvi_uint16_type                                  c1_wcdma_bc4_bypass_timer;
  
  nvi_int16_type                                   c1_wcdma_bc4_lna_range_offset;
  
  nvi_c1_wcdma_bc4_lna_offset_vs_freq_type         c1_wcdma_bc4_lna_offset_vs_freq;
  
  nvi_c1_wcdma_bc4_rx_cal_chan_type                c1_wcdma_bc4_rx_cal_chan;
  
  nvi_mf_pref_rf_chan_list_type                    mf_pref_rf_chan_list;
  
  nvi_uint16_type                                  mf_ic_update_rate;
  
  nvi_uint8_type                                   npt_count;
  
  nvi_sms_bearer_prefs_type                        sms_bearer_prefs;
  
  nvi_uint8_type                                   bt_disabled;
  
  nvi_enum_type                                    hs_usb_current_composition;
  
  nvi_boolean_type                                 wlan_enable_bt_coex;
  
  nvi_uint8_type                                   hdr_empa_supported;
  
  nvi_boolean_type                                 aagps_xtra_enabled;
  
  nvi_uint16_type                                  aagps_xtra_download_interval;
  
  nvi_uint8_type                                   aagps_xtra_num_download_attempts;
  
  nvi_aagps_xtra_primary_server_url_type           aagps_xtra_primary_server_url;
  
  nvi_aagps_xtra_secondary_server_url_type         aagps_xtra_secondary_server_url;
  
  nvi_uint8_type                                   aagps_xtra_time_between_attempts;
  
  nvi_aagps_xtra_tertiary_server_url_type          aagps_xtra_tertiary_server_url;
  
  nvi_boolean_type                                 aagps_xtra_auto_download_enabled;
  
  nvi_uint8_type                                   aagps_xtra_time_info_enabled;
  
  nvi_uint16_type                                  aagps_xtra_time_info_unc_thresh;
  
  nvi_uint16_type                                  aagps_xtra_time_info_delay_thresh;
  
  nvi_aagps_xtra_primary_sntp_server_url_type      aagps_xtra_primary_sntp_server_url;
  
  nvi_aagps_xtra_secondary_sntp_server_url_type    aagps_xtra_secondary_sntp_server_url;
  
  nvi_aagps_xtra_tertiary_sntp_server_url_type     aagps_xtra_tertiary_sntp_server_url;
  
  nvi_boolean_type                                 voip_precondition_enable;
  
  nvi_aagps_ipc_dm_thread_mask_type                aagps_ipc_dm_thread_mask;
  
  nvi_mf_rf_override_desc                          mf_rf_override_desc;
  
  nvi_mf_dmtt_params                               mf_dmtt_params;
  
  nvi_uint8_type                                   camera_default_preview_rotation;
  
  nvi_uint64_type                                  rf_bc_config_div;
  
  nvi_boolean_type                                 gps1_xtra_enabled;
  
  nvi_uint16_type                                  gps1_xtra_download_interval;
  
  nvi_uint8_type                                   gps1_xtra_num_download_attempts;
  
  nvi_uint8_type                                   gps1_xtra_time_between_attempts;
  
  nvi_boolean_type                                 gps1_xtra_auto_download_enabled;
  
  nvi_gps1_xtra_primary_server_url_type            gps1_xtra_primary_server_url;
  
  nvi_gps1_xtra_secondary_server_url_type          gps1_xtra_secondary_server_url;
  
  nvi_gps1_xtra_tertiary_server_url_type           gps1_xtra_tertiary_server_url;
  
  nvi_uint8_type                                   db_lp_sec;
  
  nvi_uint8_type                                   db_ltm_off;
  
  nvi_boolean_type                                 db_daylt;
  
  nvi_bc0_tx_pdm_lin_0_type                        bc0_tx_pdm_lin_0;
  
  nvi_bc0_tx_pdm_lin_1_type                        bc0_tx_pdm_lin_1;
  
  nvi_bc0_tx_pdm_lin_2_type                        bc0_tx_pdm_lin_2;
  
  nvi_bc0_tx_pdm_lin_3_type                        bc0_tx_pdm_lin_3;
  
  nvi_bc1_tx_pdm_lin_0_type                        bc1_tx_pdm_lin_0;
  
  nvi_bc1_tx_pdm_lin_1_type                        bc1_tx_pdm_lin_1;
  
  nvi_bc1_tx_pdm_lin_2_type                        bc1_tx_pdm_lin_2;
  
  nvi_bc1_tx_pdm_lin_3_type                        bc1_tx_pdm_lin_3;
  
  nvi_bc3_tx_pdm_lin_0_type                        bc3_tx_pdm_lin_0;
  
  nvi_bc3_tx_pdm_lin_1_type                        bc3_tx_pdm_lin_1;
  
  nvi_bc3_tx_pdm_lin_2_type                        bc3_tx_pdm_lin_2;
  
  nvi_bc3_tx_pdm_lin_3_type                        bc3_tx_pdm_lin_3;
  
  nvi_bc4_tx_pdm_lin_0_type                        bc4_tx_pdm_lin_0;
  
  nvi_bc4_tx_pdm_lin_1_type                        bc4_tx_pdm_lin_1;
  
  nvi_bc4_tx_pdm_lin_2_type                        bc4_tx_pdm_lin_2;
  
  nvi_bc4_tx_pdm_lin_3_type                        bc4_tx_pdm_lin_3;
  
  nvi_bc5_tx_pdm_lin_0_type                        bc5_tx_pdm_lin_0;
  
  nvi_bc5_tx_pdm_lin_1_type                        bc5_tx_pdm_lin_1;
  
  nvi_bc5_tx_pdm_lin_2_type                        bc5_tx_pdm_lin_2;
  
  nvi_bc5_tx_pdm_lin_3_type                        bc5_tx_pdm_lin_3;
  
  nvi_bc6_tx_pdm_lin_0_type                        bc6_tx_pdm_lin_0;
  
  nvi_bc6_tx_pdm_lin_1_type                        bc6_tx_pdm_lin_1;
  
  nvi_bc6_tx_pdm_lin_2_type                        bc6_tx_pdm_lin_2;
  
  nvi_bc6_tx_pdm_lin_3_type                        bc6_tx_pdm_lin_3;
  
  nvi_bc11_tx_pdm_lin_0_type                       bc11_tx_pdm_lin_0;
  
  nvi_bc11_tx_pdm_lin_1_type                       bc11_tx_pdm_lin_1;
  
  nvi_bc11_tx_pdm_lin_2_type                       bc11_tx_pdm_lin_2;
  
  nvi_bc11_tx_pdm_lin_3_type                       bc11_tx_pdm_lin_3;
  
  nvi_bc14_tx_pdm_lin_0_type                       bc14_tx_pdm_lin_0;
  
  nvi_bc14_tx_pdm_lin_1_type                       bc14_tx_pdm_lin_1;
  
  nvi_bc14_tx_pdm_lin_2_type                       bc14_tx_pdm_lin_2;
  
  nvi_bc14_tx_pdm_lin_3_type                       bc14_tx_pdm_lin_3;
  
  nvi_bc15_tx_pdm_lin_0_type                       bc15_tx_pdm_lin_0;
  
  nvi_bc15_tx_pdm_lin_1_type                       bc15_tx_pdm_lin_1;
  
  nvi_bc15_tx_pdm_lin_2_type                       bc15_tx_pdm_lin_2;
  
  nvi_bc15_tx_pdm_lin_3_type                       bc15_tx_pdm_lin_3;
  
  nvi_uint8_type                                   hit_enable;
  
  nvi_vci_parameters_type                          vci_parameters;
  
  nvi_uint32_type                                  ds707_go_null_timer_1x;
  
  nvi_uint32_type                                  ds707_go_null_timer_do;
  
  nvi_wlan_mac_address_type                        wlan_mac_address;
  
  nvi_uint32_type                                  clk_regime_test_cfg;
  
  nvi_uint32_type                                  dvbh_pat_acq_timeout;
  
  nvi_uint32_type                                  dvbh_pmt_acq_timeout;
  
  nvi_uint32_type                                  dvbh_int_acq_timeout;
  
  nvi_dvbh_uhf_freq_band_range_type                dvbh_uhf_freq_band_range;
  
  nvi_dvbh_vhf_freq_band_range_type                dvbh_vhf_freq_band_range;
  
  nvi_dvbh_l_freq_band_range_type                  dvbh_l_freq_band_range;
  
  nvi_uint32_type                                  dvbh_uhf_band_bw;
  
  nvi_uint32_type                                  dvbh_uhf_band_offset;
  
  nvi_uint32_type                                  dvbh_vhf_band_bw;
  
  nvi_uint32_type                                  dvbh_vhf_band_offset;
  
  nvi_uint32_type                                  dvbh_l_band_bw;
  
  nvi_uint32_type                                  dvbh_l_band_offset;
  
  nvi_dvbh_platform_nw_id_list_type                dvbh_platform_nw_id_list;
  
  nvi_http_proxy_server_addr_type                  http_proxy_server_addr;
  
  nvi_http_proxy_server_addr_alt_type              http_proxy_server_addr_alternate;
  
  nvi_uint32_type                                  cgps_1x_pde_server_addr_ipv4;
  
  nvi_cgps_1x_pde_server_addr_ipv6_type            cgps_1x_pde_server_addr_ipv6;
  
  nvi_cgps_1x_pde_server_addr_url_type             cgps_1x_pde_server_addr_url;
  
  nvi_uint32_type                                  cgps_1x_mpc_server_addr_ipv4;
  
  nvi_cgps_1x_mpc_server_addr_ipv6_type            cgps_1x_mpc_server_addr_ipv6;
  
  nvi_cgps_1x_mpc_server_addr_url_type             cgps_1x_mpc_server_addr_url;
  
  nvi_uint32_type                                  cgps_umts_pde_server_addr_ipv4;
  
  nvi_cgps_umts_pde_server_addr_ipv6_type          cgps_umts_pde_server_addr_ipv6;
  
  nvi_cgps_umts_pde_server_addr_url_type           cgps_umts_pde_server_addr_url;
  
  nvi_uint32_type                                  cgps_1x_pde_server_port;
  
  nvi_uint32_type                                  cgps_1x_mpc_server_port;
  
  nvi_uint32_type                                  cgps_umts_pde_server_port;
  
  nvi_uint8_type                                   cgps_mo_method;
  
  nvi_uint8_type                                   cgps_nmea_sentence_type;
  
  nvi_uint32_type                                  cgps_max_osc_unc_active_sys;
  
  nvi_uint32_type                                  cgps_max_osc_unc_rgs;
  
  nvi_uint32_type                                  cgps_max_osc_unc_temp_tbl;
  
  nvi_uint32_type                                  cgps_max_osc_unc_rgs_old;
  
  nvi_uint8_type                                   cgps_max_carrier_code_filter;
  
  nvi_uint32_type                                  cgps_max_integrate_ms;
  
  nvi_uint32_type                                  cgps_me_reserved1;
  
  nvi_uint32_type                                  cgps_me_reserved2;
  
  nvi_uint32_type                                  cgps_me_reserved3;
  
  nvi_uint32_type                                  cgps_me_reserved4;
  
  nvi_uint32_type                                  ftm_mode_boot_count;
  
  nvi_mf_rssi_cal_vs_freq_4_type                   mf_rssi_cal_vs_freq_4;
  
  nvi_mf_rssi_cal_vs_freq_5_type                   mf_rssi_cal_vs_freq_5;
  
  nvi_uint8_type                                   nas_release_compliance;
  
  nvi_int16_type                                   wcdma_bc4_hs_im_level_4;
  
  nvi_int16_type                                   wcdma_bc4_hs_im_level_3;
  
  nvi_int16_type                                   wcdma_bc4_hs_im_level_2;
  
  nvi_int16_type                                   wcdma_bc4_hs_im_level;
  
  nvi_int16_type                                   wcdma_bc4_hs_lna_range_rise_4;
  
  nvi_int16_type                                   wcdma_bc4_hs_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_bc4_hs_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_bc4_hs_lna_range_rise;
  
  nvi_int16_type                                   wcdma_bc4_hs_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_bc4_hs_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_bc4_hs_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_bc4_hs_lna_range_fall;
  
  nvi_int16_type                                   wcdma_900_hs_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_900_hs_lna_range_rise;
  
  nvi_int16_type                                   wcdma_900_hs_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_900_hs_lna_range_rise_4;
  
  nvi_int16_type                                   wcdma_900_hs_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_900_hs_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_900_hs_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_900_hs_lna_range_fall;
  
  nvi_int16_type                                   wcdma_900_hs_im_level_2;
  
  nvi_int16_type                                   wcdma_900_hs_im_level_3;
  
  nvi_int16_type                                   wcdma_900_hs_im_level;
  
  nvi_int16_type                                   wcdma_900_hs_im_level_4;
  
  nvi_int16_type                                   wcdma_1800_hs_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_1800_hs_lna_range_rise_4;
  
  nvi_int16_type                                   wcdma_1800_hs_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_1800_hs_lna_range_rise;
  
  nvi_int16_type                                   wcdma_1800_hs_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_1800_hs_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_1800_hs_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_1800_hs_lna_range_fall;
  
  nvi_int16_type                                   wcdma_1800_hs_im_level_4;
  
  nvi_int16_type                                   wcdma_1800_hs_im_level_3;
  
  nvi_int16_type                                   wcdma_1800_hs_im_level_2;
  
  nvi_int16_type                                   wcdma_1800_hs_im_level;
  
  nvi_int16_type                                   wcdma_1900_hs_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_1900_hs_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_1900_hs_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_1900_hs_lna_range_fall;
  
  nvi_int16_type                                   wcdma_1900_hs_lna_range_rise_4;
  
  nvi_int16_type                                   wcdma_1900_hs_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_1900_hs_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_1900_hs_lna_range_rise;
  
  nvi_int16_type                                   wcdma_1900_hs_im_level_2;
  
  nvi_int16_type                                   wcdma_1900_hs_im_level;
  
  nvi_int16_type                                   wcdma_1900_hs_im_level_3;
  
  nvi_int16_type                                   wcdma_1900_hs_im_level_4;
  
  nvi_int16_type                                   wcdma_800_hs_lna_range_rise_4;
  
  nvi_int16_type                                   wcdma_800_hs_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_800_hs_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_800_hs_lna_range_rise;
  
  nvi_int16_type                                   wcdma_800_hs_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_800_hs_lna_range_fall;
  
  nvi_int16_type                                   wcdma_800_hs_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_800_hs_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_800_hs_im_level_3;
  
  nvi_int16_type                                   wcdma_800_hs_im_level_2;
  
  nvi_int16_type                                   wcdma_800_hs_im_level;
  
  nvi_int16_type                                   wcdma_800_hs_im_level_4;
  
  nvi_int16_type                                   wcdma_hs_im_level_2;
  
  nvi_int16_type                                   wcdma_hs_im_level_3;
  
  nvi_int16_type                                   wcdma_hs_im_level_4;
  
  nvi_int16_type                                   wcdma_hs_im_level;
  
  nvi_int16_type                                   wcdma_hs_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_hs_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_hs_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_hs_lna_range_fall;
  
  nvi_int16_type                                   wcdma_hs_lna_range_rise_4;
  
  nvi_int16_type                                   wcdma_hs_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_hs_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_hs_lna_range_rise;
  
  nvi_bc0_tx_pdm_0_type                            bc0_tx_pdm_0;
  
  nvi_bc0_tx_pdm_1_type                            bc0_tx_pdm_1;
  
  nvi_bc0_tx_pdm_2_type                            bc0_tx_pdm_2;
  
  nvi_bc0_tx_pdm_3_type                            bc0_tx_pdm_3;
  
  nvi_bc1_tx_pdm_0_type                            bc1_tx_pdm_0;
  
  nvi_bc1_tx_pdm_1_type                            bc1_tx_pdm_1;
  
  nvi_bc1_tx_pdm_2_type                            bc1_tx_pdm_2;
  
  nvi_bc1_tx_pdm_3_type                            bc1_tx_pdm_3;
  
  nvi_bc3_tx_pdm_0_type                            bc3_tx_pdm_0;
  
  nvi_bc3_tx_pdm_1_type                            bc3_tx_pdm_1;
  
  nvi_bc3_tx_pdm_2_type                            bc3_tx_pdm_2;
  
  nvi_bc3_tx_pdm_3_type                            bc3_tx_pdm_3;
  
  nvi_bc4_tx_pdm_0_type                            bc4_tx_pdm_0;
  
  nvi_bc4_tx_pdm_1_type                            bc4_tx_pdm_1;
  
  nvi_bc4_tx_pdm_2_type                            bc4_tx_pdm_2;
  
  nvi_bc4_tx_pdm_3_type                            bc4_tx_pdm_3;
  
  nvi_bc5_tx_pdm_0_type                            bc5_tx_pdm_0;
  
  nvi_bc5_tx_pdm_1_type                            bc5_tx_pdm_1;
  
  nvi_bc5_tx_pdm_2_type                            bc5_tx_pdm_2;
  
  nvi_bc5_tx_pdm_3_type                            bc5_tx_pdm_3;
  
  nvi_bc6_tx_pdm_0_type                            bc6_tx_pdm_0;
  
  nvi_bc6_tx_pdm_1_type                            bc6_tx_pdm_1;
  
  nvi_bc6_tx_pdm_2_type                            bc6_tx_pdm_2;
  
  nvi_bc6_tx_pdm_3_type                            bc6_tx_pdm_3;
  
  nvi_bc11_tx_pdm_0_type                           bc11_tx_pdm_0;
  
  nvi_bc11_tx_pdm_1_type                           bc11_tx_pdm_1;
  
  nvi_bc11_tx_pdm_2_type                           bc11_tx_pdm_2;
  
  nvi_bc11_tx_pdm_3_type                           bc11_tx_pdm_3;
  
  nvi_bc14_tx_pdm_0_type                           bc14_tx_pdm_0;
  
  nvi_bc14_tx_pdm_1_type                           bc14_tx_pdm_1;
  
  nvi_bc14_tx_pdm_2_type                           bc14_tx_pdm_2;
  
  nvi_bc14_tx_pdm_3_type                           bc14_tx_pdm_3;
  
  nvi_bc15_tx_pdm_0_type                           bc15_tx_pdm_0;
  
  nvi_bc15_tx_pdm_1_type                           bc15_tx_pdm_1;
  
  nvi_bc15_tx_pdm_2_type                           bc15_tx_pdm_2;
  
  nvi_bc15_tx_pdm_3_type                           bc15_tx_pdm_3;
  
  nvi_bc0_tx_lin_0_type                            bc0_tx_lin_0;
  
  nvi_bc0_tx_lin_1_type                            bc0_tx_lin_1;
  
  nvi_bc0_tx_lin_2_type                            bc0_tx_lin_2;
  
  nvi_bc0_tx_lin_3_type                            bc0_tx_lin_3;
  
  nvi_bc1_tx_lin_0_type                            bc1_tx_lin_0;
  
  nvi_bc1_tx_lin_1_type                            bc1_tx_lin_1;
  
  nvi_bc1_tx_lin_2_type                            bc1_tx_lin_2;
  
  nvi_bc1_tx_lin_3_type                            bc1_tx_lin_3;
  
  nvi_bc3_tx_lin_0_type                            bc3_tx_lin_0;
  
  nvi_bc3_tx_lin_1_type                            bc3_tx_lin_1;
  
  nvi_bc3_tx_lin_2_type                            bc3_tx_lin_2;
  
  nvi_bc3_tx_lin_3_type                            bc3_tx_lin_3;
  
  nvi_bc4_tx_lin_0_type                            bc4_tx_lin_0;
  
  nvi_bc4_tx_lin_1_type                            bc4_tx_lin_1;
  
  nvi_bc4_tx_lin_2_type                            bc4_tx_lin_2;
  
  nvi_bc4_tx_lin_3_type                            bc4_tx_lin_3;
  
  nvi_bc5_tx_lin_0_type                            bc5_tx_lin_0;
  
  nvi_bc5_tx_lin_1_type                            bc5_tx_lin_1;
  
  nvi_bc5_tx_lin_2_type                            bc5_tx_lin_2;
  
  nvi_bc5_tx_lin_3_type                            bc5_tx_lin_3;
  
  nvi_bc6_tx_lin_0_type                            bc6_tx_lin_0;
  
  nvi_bc6_tx_lin_1_type                            bc6_tx_lin_1;
  
  nvi_bc6_tx_lin_2_type                            bc6_tx_lin_2;
  
  nvi_bc6_tx_lin_3_type                            bc6_tx_lin_3;
  
  nvi_bc11_tx_lin_0_type                           bc11_tx_lin_0;
  
  nvi_bc11_tx_lin_1_type                           bc11_tx_lin_1;
  
  nvi_bc11_tx_lin_2_type                           bc11_tx_lin_2;
  
  nvi_bc11_tx_lin_3_type                           bc11_tx_lin_3;
  
  nvi_bc14_tx_lin_0_type                           bc14_tx_lin_0;
  
  nvi_bc14_tx_lin_1_type                           bc14_tx_lin_1;
  
  nvi_bc14_tx_lin_2_type                           bc14_tx_lin_2;
  
  nvi_bc14_tx_lin_3_type                           bc14_tx_lin_3;
  
  nvi_bc15_tx_lin_0_type                           bc15_tx_lin_0;
  
  nvi_bc15_tx_lin_1_type                           bc15_tx_lin_1;
  
  nvi_bc15_tx_lin_2_type                           bc15_tx_lin_2;
  
  nvi_bc15_tx_lin_3_type                           bc15_tx_lin_3;
  
  nvi_uint32_type                                  hdr_rx_div_bc_enable_mask;
  
  nvi_uint32_type                                  cdma_rx_div_bc_enable_mask;
  
  nvi_gsm_carrier_suppression_type                 gsm_carrier_suppression;
  
  nvi_gsm_850_carrier_suppression_type             gsm_850_carrier_suppression;
  
  nvi_gsm_dcs_carrier_suppression_type             gsm_dcs_carrier_suppression;
  
  nvi_gsm_1900_carrier_suppression_type            gsm_1900_carrier_suppression;
  
  nvi_boolean_type                                 dvbh_store_nw_info_to_efs;
  
  nvi_uint32_type                                  dvbh_efs_nw_info_expiry_time;
  
  nvi_boolean_type                                 dvbh_nw_acq_on_cell_id_mismatch;
  
  nvi_boolean_type                                 dvbh_wait_for_nit_other;
  
  nvi_uint32_type                                  dvbh_all_nit_acq_timeout;
  
  nvi_uint32_type                                  dvbh_lnkg_acq_timeout;
  
  nvi_boolean_type                                 display_update_power_test_mode;
  
  nvi_uint8_type                                   bc0_pa_r_map;
  
  nvi_uint8_type                                   bc1_pa_r_map;
  
  nvi_uint8_type                                   bc3_pa_r_map;
  
  nvi_uint8_type                                   bc4_pa_r_map;
  
  nvi_uint8_type                                   bc5_pa_r_map;
  
  nvi_uint8_type                                   bc6_pa_r_map;
  
  nvi_uint8_type                                   bc11_pa_r_map;
  
  nvi_uint8_type                                   bc14_pa_r_map;
  
  nvi_uint8_type                                   bc15_pa_r_map;
  
  nvi_hdrsrch_dbg_msk_type                         hdrsrch_dbg_msk;
  
  nvi_boolean_type                                 aims_on;
  
  nvi_mbp_rf_dvbh_cal_freq_type                    mbp_rf_dvbh_cal_freq;
  
  nvi_mbp_rf_dvbh_gs0_cal_type                     mbp_rf_dvbh_gs0_cal;
  
  nvi_mbp_rf_dvbh_gs1_cal_type                     mbp_rf_dvbh_gs1_cal;
  
  nvi_mbp_rf_dvbh_gs2_cal_type                     mbp_rf_dvbh_gs2_cal;
  
  nvi_mbp_rf_dvbh_gs3_cal_type                     mbp_rf_dvbh_gs3_cal;
  
  nvi_mbp_rf_dvbh_gs4_cal_type                     mbp_rf_dvbh_gs4_cal;
  
  nvi_mbp_rf_dvbh_gs5_cal_type                     mbp_rf_dvbh_gs5_cal;
  
  nvi_mbp_rf_mflo_cal_freq_type                    mbp_rf_mflo_cal_freq;
  
  nvi_mbp_rf_mflo_gs0_cal_type                     mbp_rf_mflo_gs0_cal;
  
  nvi_mbp_rf_mflo_gs1_cal_type                     mbp_rf_mflo_gs1_cal;
  
  nvi_mbp_rf_mflo_gs2_cal_type                     mbp_rf_mflo_gs2_cal;
  
  nvi_mbp_rf_mflo_gs3_cal_type                     mbp_rf_mflo_gs3_cal;
  
  nvi_mbp_rf_mflo_gs4_cal_type                     mbp_rf_mflo_gs4_cal;
  
  nvi_mbp_rf_mflo_gs5_cal_type                     mbp_rf_mflo_gs5_cal;
  
  nvi_boolean_type                                 qvp_app_psvt_enable_flag;
  
  nvi_uint8_type                                   cgps_dgps_corrections_allowed;
  
  nvi_uint16_type                                  cgps_maximum_dgps_interval;
  
  nvi_uint8_type                                   cgps_use_fdic;
  
  nvi_uint8_type                                   cgps_altitude_hold_mode;
  
  nvi_uint8_type                                   cgps_pdop_mask;
  
  nvi_uint8_type                                   cgps_2d_pdop_mask;
  
  nvi_uint8_type                                   cgps_reference_mode;
  
  nvi_uint8_type                                   cgps_operation_mode;
  
  nvi_int8_type                                    cgps_elevation_mask;
  
  nvi_uint8_type                                   cgps_max_almanac_age_in_weeks;
  
  nvi_uint8_type                                   cgps_steering_on_startup;
  
  nvi_nd_config_items                              icmp6_nd_config;
  
  nvi_uint32_type                                  hs_usb_remote_wakeup_delay;
  
  nvi_dvbh_uhf_band_freq_range_and_offset_1_type   dvbh_uhf_band_freq_range_and_offset_1;
  
  nvi_dvbh_uhf_band_freq_range_and_offset_2_type   dvbh_uhf_band_freq_range_and_offset_2;
  
  nvi_dvbh_cell_id_range_type                      dvbh_cell_id_range;
  
  nvi_jcdma_ruimid                                 jcdma_ruim_id;
  
  nvi_jcdma_uim_lock_data                          jcdma_uim_lock;
  
  nvi_uint8_type                                   diag_ftm_mode_switch;
  
  nvi_uint32_type                                  dhcp4_options_mask;
  
  nvi_uint32_type                                  dhcp6_options_mask;
  
  nvi_uint8_type                                   gps1_xtra_time_info_enabled;
  
  nvi_uint16_type                                  gps1_xtra_time_info_unc_thresh;
  
  nvi_uint16_type                                  gps1_xtra_time_info_delay_thresh;
  
  nvi_gps1_xtra_primary_sntp_server_url_type       gps1_xtra_primary_sntp_server_url;
  
  nvi_gps1_xtra_secondary_sntp_server_url_type     gps1_xtra_secondary_sntp_server_url;
  
  nvi_gps1_xtra_tertiary_sntp_server_url_type      gps1_xtra_tertiary_sntp_server_url;
  
  nvi_mf_proxy_type                                mf_proxy;
  
  nvi_uint8_type                                   mf_proxy_len;
  
  nvi_int8_type                                    wcdma_1900_c0_c1_delay;
  
  nvi_int8_type                                    wcdma_1800_c0_c1_delay;
  
  nvi_int8_type                                    wcdma_bc4_c0_c1_delay;
  
  nvi_int8_type                                    wcdma_900_c0_c1_delay;
  
  nvi_int8_type                                    wcdma_800_c0_c1_delay;
  
  nvi_uint8_type                                   ims_fw_api_enable_flag;
  
  nvi_wcdma_rel6_tx_beta_scaling_comp_type         wcdma_rel6_tx_beta_scaling_comp;
  
  nvi_wcdma_rel6_tx_agc_offset_type                wcdma_rel6_tx_agc_offset;
  
  nvi_wcdma_rel6_tx_mpr_backoff_type               wcdma_rel6_tx_mpr_backoff;
  
  nvi_wcdma_1900_rel6_tx_beta_scaling_comp_type    wcdma_1900_rel6_tx_beta_scaling_comp;
  
  nvi_wcdma_1900_rel6_tx_agc_offset_type           wcdma_1900_rel6_tx_agc_offset;
  
  nvi_wcdma_1900_rel6_tx_mpr_backoff_type          wcdma_1900_rel6_tx_mpr_backoff;
  
  nvi_wcdma_800_rel6_tx_beta_scaling_comp_type     wcdma_800_rel6_tx_beta_scaling_comp;
  
  nvi_wcdma_800_rel6_tx_agc_offset_type            wcdma_800_rel6_tx_agc_offset;
  
  nvi_wcdma_800_rel6_tx_mpr_backoff_type           wcdma_800_rel6_tx_mpr_backoff;
  
  nvi_wcdma_bc4_rel6_tx_beta_scaling_comp_type     wcdma_bc4_rel6_tx_beta_scaling_comp;
  
  nvi_wcdma_bc4_rel6_tx_agc_offset_type            wcdma_bc4_rel6_tx_agc_offset;
  
  nvi_wcdma_bc4_rel6_tx_mpr_backoff_type           wcdma_bc4_rel6_tx_mpr_backoff;
  
  nvi_xo_cal_field_data_type                       xo_field_calibration;
  
  nvi_xo_cal_fac_data_type                         xo_factory_calibration;
  
  nvi_xo_cal_ft_conv_type                          xo_cal_conv;
  
  nvi_wcdma_lna_phase_ctl_type                     wcdma_lna_phase_ctl;
  
  nvi_c1_wcdma_lna_phase_ctl_type                  c1_wcdma_lna_phase_ctl;
  
  nvi_uint16_type                                  home_mcc;
  
  nvi_usr_sid_to_mcc_assoc_type                    usr_sid_to_mcc_assoc_tbl;
  
  nvi_uint8_type                                   hs_based_plus_dial_setting;
  
  nvi_ds_at_v250_registers_type                    ds_at_v250_registers;
  
  nvi_ds_at_s_registers_type                       ds_at_s_registers;
  
  nvi_process_restart_switch_type                  process_restart_switch;
  
  nvi_enum_type                                    hdrscp_force_at_config;
  
  nvi_wcdma_tx_comp_vs_freq_0_secondary_type       wcdma_tx_comp_vs_freq_0_secondary;
  
  nvi_wcdma_tx_comp_vs_freq_1_secondary_type       wcdma_tx_comp_vs_freq_1_secondary;
  
  nvi_wcdma_tx_comp_vs_freq_2_secondary_type       wcdma_tx_comp_vs_freq_2_secondary;
  
  nvi_wcdma_tx_comp_vs_freq_3_secondary_type       wcdma_tx_comp_vs_freq_3_secondary;
  
  nvi_wcdma_tx_comp_vs_freq_sec_pdm_list_type      wcdma_tx_comp_vs_freq_sec_pdm_list;
  
  nvi_wcdma_1900_tx_comp_vs_freq_0_secondary_type  wcdma_1900_tx_comp_vs_freq_0_secondary;
  
  nvi_wcdma_1900_tx_comp_vs_freq_1_secondary_type  wcdma_1900_tx_comp_vs_freq_1_secondary;
  
  nvi_wcdma_1900_tx_comp_vs_freq_2_secondary_type  wcdma_1900_tx_comp_vs_freq_2_secondary;
  
  nvi_wcdma_1900_tx_comp_vs_freq_3_secondary_type  wcdma_1900_tx_comp_vs_freq_3_secondary;
  
  nvi_wcdma_1900_tx_comp_vs_freq_sec_pdm_list_type wcdma_1900_tx_comp_vs_freq_sec_pdm_list;
  
  nvi_wcdma_800_tx_comp_vs_freq_0_secondary_type   wcdma_800_tx_comp_vs_freq_0_secondary;
  
  nvi_wcdma_800_tx_comp_vs_freq_1_secondary_type   wcdma_800_tx_comp_vs_freq_1_secondary;
  
  nvi_wcdma_800_tx_comp_vs_freq_2_secondary_type   wcdma_800_tx_comp_vs_freq_2_secondary;
  
  nvi_wcdma_800_tx_comp_vs_freq_3_secondary_type   wcdma_800_tx_comp_vs_freq_3_secondary;
  
  nvi_wcdma_800_tx_comp_vs_freq_sec_pdm_list_type  wcdma_800_tx_comp_vs_freq_sec_pdm_list;
  
  nvi_wcdma_1800_tx_comp_vs_freq_0_secondary_type  wcdma_1800_tx_comp_vs_freq_0_secondary;
  
  nvi_wcdma_1800_tx_comp_vs_freq_1_secondary_type  wcdma_1800_tx_comp_vs_freq_1_secondary;
  
  nvi_wcdma_1800_tx_comp_vs_freq_2_secondary_type  wcdma_1800_tx_comp_vs_freq_2_secondary;
  
  nvi_wcdma_1800_tx_comp_vs_freq_3_secondary_type  wcdma_1800_tx_comp_vs_freq_3_secondary;
  
  nvi_wcdma_1800_tx_comp_vs_freq_sec_pdm_list_type wcdma_1800_tx_comp_vs_freq_sec_pdm_list;
  
  nvi_wcdma_bc4_tx_comp_vs_freq_0_secondary_type   wcdma_bc4_tx_comp_vs_freq_0_secondary;
  
  nvi_wcdma_bc4_tx_comp_vs_freq_1_secondary_type   wcdma_bc4_tx_comp_vs_freq_1_secondary;
  
  nvi_wcdma_bc4_tx_comp_vs_freq_2_secondary_type   wcdma_bc4_tx_comp_vs_freq_2_secondary;
  
  nvi_wcdma_bc4_tx_comp_vs_freq_3_secondary_type   wcdma_bc4_tx_comp_vs_freq_3_secondary;
  
  nvi_wcdma_bc4_tx_comp_vs_freq_sec_pdm_list_type  wcdma_bc4_tx_comp_vs_freq_sec_pdm_list;
  
  nvi_wcdma_900_tx_comp_vs_freq_0_secondary_type   wcdma_900_tx_comp_vs_freq_0_secondary;
  
  nvi_wcdma_900_tx_comp_vs_freq_1_secondary_type   wcdma_900_tx_comp_vs_freq_1_secondary;
  
  nvi_wcdma_900_tx_comp_vs_freq_2_secondary_type   wcdma_900_tx_comp_vs_freq_2_secondary;
  
  nvi_wcdma_900_tx_comp_vs_freq_3_secondary_type   wcdma_900_tx_comp_vs_freq_3_secondary;
  
  nvi_wcdma_900_tx_comp_vs_freq_sec_pdm_list_type  wcdma_900_tx_comp_vs_freq_sec_pdm_list;
  
  nvi_uint32_type                                  cust_uqcn_c2k_version;
  
  nvi_uint32_type                                  cust_uqcn_umts_version;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc0_tx_pwr_comp0;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc0_tx_pwr_comp1;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc0_tx_pwr_comp2;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc0_tx_pwr_comp3;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc1_tx_pwr_comp0;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc1_tx_pwr_comp1;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc1_tx_pwr_comp2;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc1_tx_pwr_comp3;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc3_tx_pwr_comp0;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc3_tx_pwr_comp1;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc3_tx_pwr_comp2;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc3_tx_pwr_comp3;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc5_tx_pwr_comp0;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc5_tx_pwr_comp1;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc5_tx_pwr_comp2;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc5_tx_pwr_comp3;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc6_tx_pwr_comp0;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc6_tx_pwr_comp1;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc6_tx_pwr_comp2;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc6_tx_pwr_comp3;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc11_tx_pwr_comp0;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc11_tx_pwr_comp1;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc11_tx_pwr_comp2;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc11_tx_pwr_comp3;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc14_tx_pwr_comp0;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc14_tx_pwr_comp1;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc14_tx_pwr_comp2;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc14_tx_pwr_comp3;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc15_tx_pwr_comp0;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc15_tx_pwr_comp1;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc15_tx_pwr_comp2;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc15_tx_pwr_comp3;
  
  nvi_therm_bins_type                              therm_bins;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc4_tx_pwr_comp0;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc4_tx_pwr_comp1;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc4_tx_pwr_comp2;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc4_tx_pwr_comp3;
  
  nvi_uint16_type                                  cgps_qos_override_acc_threshold;
  
  nvi_uint8_type                                   cgps_qos_override_time;
  
  nvi_web_info_type                                web_info;
  
  nvi_uint8_type                                   siota_call_info;
  
  nvi_phone_boot_naiurl_type                       phone_boot_naiurl;
  
  nvi_phone_boot_url_type                          phone_boot_url;
  
  nvi_ds_phone_rdf_url_type                        ds_phone_rdf_url;
  
  nvi_browser_domain_trusted_type                  browser_domain_trusted;
  
  nvi_boolean_type                                 iota_commit;
  
  nvi_uint32_type                                  dvbh_nit_actual_acq_timeout;
  
  nvi_boolean_type                                 hs_usb_diag_on_legacy_usb_port;
  
  nvi_uint64_type                                  hw_entropy;
  
  nvi_uint8_type                                   cgps_mem_config;
  
  nvi_nmea_config_info_type                        cgps_nmea_config_info;
  
  nvi_int16_type                                   wcdma_800_timer_hysterisis;
  
  nvi_int16_type                                   wcdma_900_timer_hysterisis;
  
  nvi_int16_type                                   wcdma_bc4_timer_hysterisis;
  
  nvi_int16_type                                   wcdma_1800_timer_hysterisis;
  
  nvi_int16_type                                   wcdma_1900_timer_hysterisis;
  
  nvi_int16_type                                   wcdma_2100_timer_hysterisis;
  
  nvi_wcdma_800_tx_lin_master_0_enh_type           wcdma_800_tx_lin_master_0_enh;
  
  nvi_wcdma_900_tx_lin_master_0_enh_type           wcdma_900_tx_lin_master_0_enh;
  
  nvi_wcdma_bc4_tx_lin_master_0_enh_type           wcdma_bc4_tx_lin_master_0_enh;
  
  nvi_wcdma_1800_tx_lin_master_0_enh_type          wcdma_1800_tx_lin_master_0_enh;
  
  nvi_wcdma_1900_tx_lin_master_0_enh_type          wcdma_1900_tx_lin_master_0_enh;
  
  nvi_wcdma_2100_tx_lin_master_0_enh_type          wcdma_2100_tx_lin_master_0_enh;
  
  nvi_wcdma_800_tx_pdm_lin_0_enh_type              wcdma_800_tx_pdm_lin_0_enh;
  
  nvi_wcdma_900_tx_pdm_lin_0_enh_type              wcdma_900_tx_pdm_lin_0_enh;
  
  nvi_wcdma_bc4_tx_pdm_lin_0_enh_type              wcdma_bc4_tx_pdm_lin_0_enh;
  
  nvi_wcdma_1800_tx_pdm_lin_0_enh_type             wcdma_1800_tx_pdm_lin_0_enh;
  
  nvi_wcdma_1900_tx_pdm_lin_0_enh_type             wcdma_1900_tx_pdm_lin_0_enh;
  
  nvi_wcdma_2100_tx_pdm_lin_0_enh_type             wcdma_2100_tx_pdm_lin_0_enh;
  
  nvi_uint32_type                                  gsm_850_kv_cal;
  
  nvi_uint32_type                                  gsm_900_kv_cal;
  
  nvi_uint32_type                                  gsm_1800_kv_cal;
  
  nvi_uint32_type                                  gsm_1900_kv_cal;
  
  nvi_uint16_type                                  bc1_balun_ctl;
  
  nvi_uint16_type                                  bc2_balun_ctl;
  
  nvi_uint16_type                                  bc3_balun_ctl;
  
  nvi_uint16_type                                  bc4_balun_ctl;
  
  nvi_uint16_type                                  bc6_balun_ctl;
  
  nvi_uint16_type                                  bc8_balun_ctl;
  
  nvi_uint16_type                                  bc9_balun_ctl;
  
  nvi_undp_hsu_vid_pid_type                        undp_hsu_vid_pid;
  
  nvi_undp_hsu_mfgstr_type                         undp_hsu_mfgstr;
  
  nvi_undp_hsu_prodstr_type                        undp_hsu_prodstr;
  
  nvi_rr_acq_db_chunk_00_type                      rr_acq_db_chunk_00;
  
  nvi_rr_acq_db_chunk_01_type                      rr_acq_db_chunk_01;
  
  nvi_rr_acq_db_chunk_02_type                      rr_acq_db_chunk_02;
  
  nvi_rr_acq_db_chunk_03_type                      rr_acq_db_chunk_03;
  
  nvi_rr_acq_db_chunk_04_type                      rr_acq_db_chunk_04;
  
  nvi_rr_acq_db_chunk_05_type                      rr_acq_db_chunk_05;
  
  nvi_rr_acq_db_chunk_06_type                      rr_acq_db_chunk_06;
  
  nvi_rr_acq_db_chunk_07_type                      rr_acq_db_chunk_07;
  
  nvi_uint32_type                                  nitz_nw_info_mcc;
  
  nvi_uint32_type                                  nitz_nw_info_mnc;
  
  nvi_boolean_type                                 wcdma_hsupa_cm_ctrl;
  
  nvi_gsm_850_smps_pdm_tbl_type                    gsm_850_smps_pdm_tbl;
  
  nvi_gsm_900_smps_pdm_tbl_type                    gsm_900_smps_pdm_tbl;
  
  nvi_gsm_1800_smps_pdm_tbl_type                   gsm_1800_smps_pdm_tbl;
  
  nvi_gsm_1900_smps_pdm_tbl_type                   gsm_1900_smps_pdm_tbl;
  
  nvi_wcdma_1900_lna_phase_ctl_type                wcdma_1900_lna_phase_ctl;
  
  nvi_c1_wcdma_1900_lna_phase_ctl_type             c1_wcdma_1900_lna_phase_ctl;
  
  nvi_wcdma_800_lna_phase_ctl_type                 wcdma_800_lna_phase_ctl;
  
  nvi_c1_wcdma_800_lna_phase_ctl_type              c1_wcdma_800_lna_phase_ctl;
  
  nvi_wcdma_bc4_lna_phase_ctl_type                 wcdma_bc4_lna_phase_ctl;
  
  nvi_c1_wcdma_bc4_lna_phase_ctl_type              c1_wcdma_bc4_lna_phase_ctl;
  
  nvi_wcdma_900_lna_phase_ctl_type                 wcdma_900_lna_phase_ctl;
  
  nvi_c1_wcdma_900_lna_phase_ctl_type              c1_wcdma_900_lna_phase_ctl;
  
  nvi_wcdma_1800_lna_phase_ctl_type                wcdma_1800_lna_phase_ctl;
  
  nvi_c1_wcdma_1800_lna_phase_ctl_type             c1_wcdma_1800_lna_phase_ctl;
  
  nvi_uint16_type                                  diag_diagbuf_tx_sleep_time_nv;
  
  nvi_uint16_type                                  diag_diagbuf_tx_sleep_threshold_nv;
  
  nvi_uint16_type                                  repeated_acch;
  
  nvi_bc0_p2_rise_fall_off_type                    bc0_p2_rise_fall_off;
  
  nvi_bc1_p2_rise_fall_off_type                    bc1_p2_rise_fall_off;
  
  nvi_bc3_p2_rise_fall_off_type                    bc3_p2_rise_fall_off;
  
  nvi_bc4_p2_rise_fall_off_type                    bc4_p2_rise_fall_off;
  
  nvi_bc5_p2_rise_fall_off_type                    bc5_p2_rise_fall_off;
  
  nvi_bc6_p2_rise_fall_off_type                    bc6_p2_rise_fall_off;
  
  nvi_bc11_p2_rise_fall_off_type                   bc11_p2_rise_fall_off;
  
  nvi_bc14_p2_rise_fall_off_type                   bc14_p2_rise_fall_off;
  
  nvi_bc15_p2_rise_fall_off_type                   bc15_p2_rise_fall_off;
  
  nvi_bcx_block_p2_rise_fall_off_type              bcx_block_p2_rise_fall_off;
  
  nvi_bc0_p3_rise_fall_off_type                    bc0_p3_rise_fall_off;
  
  nvi_bc1_p3_rise_fall_off_type                    bc1_p3_rise_fall_off;
  
  nvi_bc3_p3_rise_fall_off_type                    bc3_p3_rise_fall_off;
  
  nvi_bc4_p3_rise_fall_off_type                    bc4_p3_rise_fall_off;
  
  nvi_bc5_p3_rise_fall_off_type                    bc5_p3_rise_fall_off;
  
  nvi_bc6_p3_rise_fall_off_type                    bc6_p3_rise_fall_off;
  
  nvi_bc11_p3_rise_fall_off_type                   bc11_p3_rise_fall_off;
  
  nvi_bc14_p3_rise_fall_off_type                   bc14_p3_rise_fall_off;
  
  nvi_bc15_p3_rise_fall_off_type                   bc15_p3_rise_fall_off;
  
  nvi_bcx_block_p3_rise_fall_off_type              bcx_block_p3_rise_fall_off;
  
  nvi_bc0_hdr_p2_rise_fall_off_type                bc0_hdr_p2_rise_fall_off;
  
  nvi_bc1_hdr_p2_rise_fall_off_type                bc1_hdr_p2_rise_fall_off;
  
  nvi_bc3_hdr_p2_rise_fall_off_type                bc3_hdr_p2_rise_fall_off;
  
  nvi_bc4_hdr_p2_rise_fall_off_type                bc4_hdr_p2_rise_fall_off;
  
  nvi_bc5_hdr_p2_rise_fall_off_type                bc5_hdr_p2_rise_fall_off;
  
  nvi_bc6_hdr_p2_rise_fall_off_type                bc6_hdr_p2_rise_fall_off;
  
  nvi_bc11_hdr_p2_rise_fall_off_type               bc11_hdr_p2_rise_fall_off;
  
  nvi_bc14_hdr_p2_rise_fall_off_type               bc14_hdr_p2_rise_fall_off;
  
  nvi_bc15_hdr_p2_rise_fall_off_type               bc15_hdr_p2_rise_fall_off;
  
  nvi_bcx_block_hdr_p2_rise_fall_off_type          bcx_block_hdr_p2_rise_fall_off;
  
  nvi_bc0_hdr_p3_rise_fall_off_type                bc0_hdr_p3_rise_fall_off;
  
  nvi_bc1_hdr_p3_rise_fall_off_type                bc1_hdr_p3_rise_fall_off;
  
  nvi_bc3_hdr_p3_rise_fall_off_type                bc3_hdr_p3_rise_fall_off;
  
  nvi_bc4_hdr_p3_rise_fall_off_type                bc4_hdr_p3_rise_fall_off;
  
  nvi_bc5_hdr_p3_rise_fall_off_type                bc5_hdr_p3_rise_fall_off;
  
  nvi_bc6_hdr_p3_rise_fall_off_type                bc6_hdr_p3_rise_fall_off;
  
  nvi_bc11_hdr_p3_rise_fall_off_type               bc11_hdr_p3_rise_fall_off;
  
  nvi_bc14_hdr_p3_rise_fall_off_type               bc14_hdr_p3_rise_fall_off;
  
  nvi_bc15_hdr_p3_rise_fall_off_type               bc15_hdr_p3_rise_fall_off;
  
  nvi_bcx_block_hdr_p3_rise_fall_off_type          bcx_block_hdr_p3_rise_fall_off;
  
  nvi_int8_type                                    bt_tx_rfcal;
  
  nvi_boolean_type                                 bt_lisbon_disabled;
  
  nvi_ds_at_csas_csca_register                     ds_at_csas_csca_settings;
  
  nvi_ds_at_csas_csmp_settings                     ds_at_csas_csmp_settings;
  
  nvi_ds_at_csas_cscb_settings                     ds_at_csas_cscb_settings;
  
  nvi_uint8_type                                   ue_imeisv_svn;
  
  nvi_uint8_type                                   gps_engine_type;
  
  nvi_undp_hsu_vid_pid2_type                       undp_hsu_vid_pid2;
  
  nvi_undp_notebook_info_type                      undp_notebook_info;
  
  nvi_boolean_type                                 dvbh_do_freq_scan_after_sys_lost;
  
  nvi_uint32_type                                  dvbh_bat_acq_timeout;
  
  nvi_boolean_type                                 dvbh_use_nw_ids_for_complete_nw_acq;
  
  nvi_uint32_type                                  dvbh_inactivity_timeout;
  
  nvi_boolean_type                                 dvbh_get_platform_list_from_first_nit;
  
  nvi_boolean_type                                 dvbh_update_nw_info_from_ts;
  
  nvi_tx_linearizer_type                           bc10_tx_lin_master0;
  
  nvi_tx_linearizer_type                           bc10_tx_lin_master1;
  
  nvi_tx_linearizer_type                           bc10_tx_lin_master2;
  
  nvi_tx_linearizer_type                           bc10_tx_lin_master3;
  
  nvi_uint16_type                                  bc10_gps1_rf_delay;
  
  nvi_bc10_tx_lim_vs_temp_type                     bc10_tx_lim_vs_temp;
  
  nvi_tx_comp_type                                 bc10_tx_comp0;
  
  nvi_tx_comp_type                                 bc10_tx_comp1;
  
  nvi_tx_comp_type                                 bc10_tx_comp2;
  
  nvi_tx_comp_type                                 bc10_tx_comp3;
  
  nvi_bc10_tx_lim_vs_freq_type                     bc10_tx_lim_vs_freq;
  
  nvi_uint8_type                                   bc10_pa_r1_rise;
  
  nvi_uint8_type                                   bc10_pa_r1_fall;
  
  nvi_uint8_type                                   bc10_pa_r2_rise;
  
  nvi_uint8_type                                   bc10_pa_r2_fall;
  
  nvi_uint8_type                                   bc10_pa_r3_rise;
  
  nvi_uint8_type                                   bc10_pa_r3_fall;
  
  nvi_uint8_type                                   bc10_hdet_off;
  
  nvi_uint8_type                                   bc10_hdet_spn;
  
  nvi_bc10_exp_hdet_vs_agc_type                    bc10_exp_hdet_vs_agc;
  
  nvi_uint32_type                                  bc10_enc_btf;
  
  nvi_bc10_vco_coarse_tune_table_type              bc10_vco_coarse_tune_table;
  
  nvi_bc10_vco_tune_2_type                         bc10_vco_tune_2;
  
  nvi_bc10_p1_rise_fall_off_type                   bc10_p1_rise_fall_off;
  
  nvi_bc10_hdr_p1_rise_fall_off_type               bc10_hdr_p1_rise_fall_off;
  
  nvi_bc10_ant_quality_type                        bc10_ant_quality;
  
  nvi_uint16_type                                  bc10_pa_dvs_voltage;
  
  nvi_bc10_tx_pdm_lin_0_type                       bc10_tx_pdm_lin_0;
  
  nvi_bc10_tx_pdm_lin_1_type                       bc10_tx_pdm_lin_1;
  
  nvi_bc10_tx_pdm_lin_2_type                       bc10_tx_pdm_lin_2;
  
  nvi_bc10_tx_pdm_lin_3_type                       bc10_tx_pdm_lin_3;
  
  nvi_bc10_tx_pdm_0_type                           bc10_tx_pdm_0;
  
  nvi_bc10_tx_pdm_1_type                           bc10_tx_pdm_1;
  
  nvi_bc10_tx_pdm_2_type                           bc10_tx_pdm_2;
  
  nvi_bc10_tx_pdm_3_type                           bc10_tx_pdm_3;
  
  nvi_bc10_tx_lin_0_type                           bc10_tx_lin_0;
  
  nvi_bc10_tx_lin_1_type                           bc10_tx_lin_1;
  
  nvi_bc10_tx_lin_2_type                           bc10_tx_lin_2;
  
  nvi_bc10_tx_lin_3_type                           bc10_tx_lin_3;
  
  nvi_uint8_type                                   bc10_pa_r_map;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc10_tx_pwr_comp0;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc10_tx_pwr_comp1;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc10_tx_pwr_comp2;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bc10_tx_pwr_comp3;
  
  nvi_c0_bc10_tx_cal_chan_type                     c0_bc10_tx_cal_chan;
  
  nvi_c0_bc10_rx_cal_chan_type                     c0_bc10_rx_cal_chan;
  
  nvi_c0_bc10_rx_cal_chan_lru_type                 c0_bc10_rx_cal_chan_lru;
  
  nvi_int16_type                                   c0_bc10_lna_1_offset;
  
  nvi_int16_type                                   c0_bc10_lna_2_offset;
  
  nvi_int16_type                                   c0_bc10_lna_3_offset;
  
  nvi_int16_type                                   c0_bc10_lna_4_offset;
  
  nvi_c0_bc10_lna_1_offset_vs_freq_type            c0_bc10_lna_1_offset_vs_freq;
  
  nvi_c0_bc10_lna_2_offset_vs_freq_type            c0_bc10_lna_2_offset_vs_freq;
  
  nvi_c0_bc10_lna_3_offset_vs_freq_type            c0_bc10_lna_3_offset_vs_freq;
  
  nvi_c0_bc10_lna_4_offset_vs_freq_type            c0_bc10_lna_4_offset_vs_freq;
  
  nvi_uint8_type                                   c0_bc10_im2_i_value;
  
  nvi_uint8_type                                   c0_bc10_im2_q_value;
  
  nvi_int16_type                                   c0_bc10_vga_gain_offset;
  
  nvi_c0_bc10_vga_gain_offset_vs_freq_type         c0_bc10_vga_gain_offset_vs_freq;
  
  nvi_uint8_type                                   c0_bc10_im2_transconductor_value;
  
  nvi_int8_type                                    c0_bc10_lna_1_rise;
  
  nvi_int8_type                                    c0_bc10_lna_1_fall;
  
  nvi_int8_type                                    c0_bc10_lna_2_rise;
  
  nvi_int8_type                                    c0_bc10_lna_2_fall;
  
  nvi_int8_type                                    c0_bc10_lna_3_rise;
  
  nvi_int8_type                                    c0_bc10_lna_3_fall;
  
  nvi_int8_type                                    c0_bc10_lna_4_rise;
  
  nvi_int8_type                                    c0_bc10_lna_4_fall;
  
  nvi_uint8_type                                   c0_bc10_im_level1;
  
  nvi_uint8_type                                   c0_bc10_im_level2;
  
  nvi_uint8_type                                   c0_bc10_im_level3;
  
  nvi_uint8_type                                   c0_bc10_im_level4;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc10_lna_switchpoints_lpm_1;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bc10_lna_switchpoints_lpm_2;
  
  nvi_rf_rx_im2_cal                                c0_bc10_im2_lpm_1;
  
  nvi_rf_rx_im2_cal                                c0_bc10_im2_lpm_2;
  
  nvi_c0_bc10_intelliceiver_cal_type               c0_bc10_intelliceiver_cal;
  
  nvi_c0_bc10_intelliceiver_det_thresh_type        c0_bc10_intelliceiver_det_thresh;
  
  nvi_c1_bc10_tx_cal_chan_type                     c1_bc10_tx_cal_chan;
  
  nvi_c1_bc10_rx_cal_chan_type                     c1_bc10_rx_cal_chan;
  
  nvi_c1_bc10_rx_cal_chan_lru_type                 c1_bc10_rx_cal_chan_lru;
  
  nvi_c1_bc10_lna_1_offset_vs_freq_type            c1_bc10_lna_1_offset_vs_freq;
  
  nvi_c1_bc10_lna_2_offset_vs_freq_type            c1_bc10_lna_2_offset_vs_freq;
  
  nvi_c1_bc10_lna_3_offset_vs_freq_type            c1_bc10_lna_3_offset_vs_freq;
  
  nvi_c1_bc10_lna_4_offset_vs_freq_type            c1_bc10_lna_4_offset_vs_freq;
  
  nvi_int16_type                                   c1_bc10_lna_1_offset;
  
  nvi_int16_type                                   c1_bc10_lna_2_offset;
  
  nvi_int16_type                                   c1_bc10_lna_3_offset;
  
  nvi_int16_type                                   c1_bc10_lna_4_offset;
  
  nvi_uint8_type                                   c1_bc10_im2_i_value;
  
  nvi_uint8_type                                   c1_bc10_im2_q_value;
  
  nvi_int16_type                                   c1_bc10_vga_gain_offset;
  
  nvi_c1_bc10_vga_gain_offset_vs_freq_type         c1_bc10_vga_gain_offset_vs_freq;
  
  nvi_uint8_type                                   c1_bc10_im2_transconductor_value;
  
  nvi_int8_type                                    c1_bc10_lna_1_rise;
  
  nvi_int8_type                                    c1_bc10_lna_1_fall;
  
  nvi_int8_type                                    c1_bc10_lna_2_rise;
  
  nvi_int8_type                                    c1_bc10_lna_2_fall;
  
  nvi_int8_type                                    c1_bc10_lna_3_rise;
  
  nvi_int8_type                                    c1_bc10_lna_3_fall;
  
  nvi_int8_type                                    c1_bc10_lna_4_rise;
  
  nvi_int8_type                                    c1_bc10_lna_4_fall;
  
  nvi_uint8_type                                   c1_bc10_im_level1;
  
  nvi_uint8_type                                   c1_bc10_im_level2;
  
  nvi_uint8_type                                   c1_bc10_im_level3;
  
  nvi_uint8_type                                   c1_bc10_im_level4;
  
  nvi_c1_bc10_vco_coarse_tune_table_type           c1_bc10_vco_coarse_tune_table;
  
  nvi_kv_cal_chan_type                             gsm_850_kv_cal_chan;
  
  nvi_kv_cal_chan_type                             gsm_900_kv_cal_chan;
  
  nvi_kv_cal_chan_type                             gsm_1800_kv_cal_chan;
  
  nvi_kv_cal_chan_type                             gsm_1900_kv_cal_chan;
  
  nvi_wcdma_900_rel6_tx_beta_scaling_comp_type     wcdma_900_rel6_tx_beta_scaling_comp;
  
  nvi_wcdma_900_rel6_tx_agc_offset_type            wcdma_900_rel6_tx_agc_offset;
  
  nvi_wcdma_900_rel6_tx_mpr_backoff_type           wcdma_900_rel6_tx_mpr_backoff;
  
  nvi_wcdma_1800_rel6_tx_beta_scaling_comp_type    wcdma_1800_rel6_tx_beta_scaling_comp;
  
  nvi_wcdma_1800_rel6_tx_agc_offset_type           wcdma_1800_rel6_tx_agc_offset;
  
  nvi_wcdma_1800_rel6_tx_mpr_backoff_type          wcdma_1800_rel6_tx_mpr_backoff;
  
  nvi_uint64_type                                  disable_cm_call_type;
  
  nvi_multi_sec_code_type                          multi_sec_code;
  
  nvi_multi_sec_code_type                          multi_otksl;
  
  nvi_multi_otksl_flag_type                        multi_otksl_flag;
  
  nvi_uint8_type                                   dvbh_do_freq_scan_after_int_acq;
  
  nvi_gsm_850_padac_dc_offset_tbl_type             gsm_850_padac_dc_offset_tbl;
  
  nvi_gsm_900_padac_dc_offset_tbl_type             gsm_900_padac_dc_offset_tbl;
  
  nvi_gsm_1800_padac_dc_offset_tbl_type            gsm_1800_padac_dc_offset_tbl;
  
  nvi_gsm_1900_padac_dc_offset_tbl_type            gsm_1900_padac_dc_offset_tbl;
  
  nvi_uint8_type                                   cgps_vco_age;
  
  nvi_uint8_type                                   cgps_optimistic_punc;
  
  nvi_gsm_850_rgi_g0_f1_type                       gsm_850_rgi_g0_f1;
  
  nvi_gsm_850_rgi_g1_f1_type                       gsm_850_rgi_g1_f1;
  
  nvi_gsm_850_rgi_g2_f1_type                       gsm_850_rgi_g2_f1;
  
  nvi_gsm_850_rgi_g3_f1_type                       gsm_850_rgi_g3_f1;
  
  nvi_gsm_850_rgi_g0_f2_type                       gsm_850_rgi_g0_f2;
  
  nvi_gsm_850_rgi_g1_f2_type                       gsm_850_rgi_g1_f2;
  
  nvi_gsm_850_rgi_g2_f2_type                       gsm_850_rgi_g2_f2;
  
  nvi_gsm_850_rgi_g3_f2_type                       gsm_850_rgi_g3_f2;
  
  nvi_gsm_900_rgi_g0_f1_type                       gsm_900_rgi_g0_f1;
  
  nvi_gsm_900_rgi_g1_f1_type                       gsm_900_rgi_g1_f1;
  
  nvi_gsm_900_rgi_g2_f1_type                       gsm_900_rgi_g2_f1;
  
  nvi_gsm_900_rgi_g3_f1_type                       gsm_900_rgi_g3_f1;
  
  nvi_gsm_900_rgi_g0_f2_type                       gsm_900_rgi_g0_f2;
  
  nvi_gsm_900_rgi_g1_f2_type                       gsm_900_rgi_g1_f2;
  
  nvi_gsm_900_rgi_g2_f2_type                       gsm_900_rgi_g2_f2;
  
  nvi_gsm_900_rgi_g3_f2_type                       gsm_900_rgi_g3_f2;
  
  nvi_gsm_1800_rgi_g0_f1_type                      gsm_1800_rgi_g0_f1;
  
  nvi_gsm_1800_rgi_g1_f1_type                      gsm_1800_rgi_g1_f1;
  
  nvi_gsm_1800_rgi_g2_f1_type                      gsm_1800_rgi_g2_f1;
  
  nvi_gsm_1800_rgi_g3_f1_type                      gsm_1800_rgi_g3_f1;
  
  nvi_gsm_1800_rgi_g0_f2_type                      gsm_1800_rgi_g0_f2;
  
  nvi_gsm_1800_rgi_g1_f2_type                      gsm_1800_rgi_g1_f2;
  
  nvi_gsm_1800_rgi_g2_f2_type                      gsm_1800_rgi_g2_f2;
  
  nvi_gsm_1800_rgi_g3_f2_type                      gsm_1800_rgi_g3_f2;
  
  nvi_gsm_1900_rgi_g0_f1_type                      gsm_1900_rgi_g0_f1;
  
  nvi_gsm_1900_rgi_g1_f1_type                      gsm_1900_rgi_g1_f1;
  
  nvi_gsm_1900_rgi_g2_f1_type                      gsm_1900_rgi_g2_f1;
  
  nvi_gsm_1900_rgi_g3_f1_type                      gsm_1900_rgi_g3_f1;
  
  nvi_gsm_1900_rgi_g0_f2_type                      gsm_1900_rgi_g0_f2;
  
  nvi_gsm_1900_rgi_g1_f2_type                      gsm_1900_rgi_g1_f2;
  
  nvi_gsm_1900_rgi_g2_f2_type                      gsm_1900_rgi_g2_f2;
  
  nvi_gsm_1900_rgi_g3_f2_type                      gsm_1900_rgi_g3_f2;
  
  nvi_gsm_850_pmeas_g0_f1_type                     gsm_850_pmeas_g0_f1;
  
  nvi_gsm_850_pmeas_g1_f1_type                     gsm_850_pmeas_g1_f1;
  
  nvi_gsm_850_pmeas_g2_f1_type                     gsm_850_pmeas_g2_f1;
  
  nvi_gsm_850_pmeas_g3_f1_type                     gsm_850_pmeas_g3_f1;
  
  nvi_gsm_850_pmeas_g0_f2_type                     gsm_850_pmeas_g0_f2;
  
  nvi_gsm_850_pmeas_g1_f2_type                     gsm_850_pmeas_g1_f2;
  
  nvi_gsm_850_pmeas_g2_f2_type                     gsm_850_pmeas_g2_f2;
  
  nvi_gsm_850_pmeas_g3_f2_type                     gsm_850_pmeas_g3_f2;
  
  nvi_gsm_900_pmeas_g0_f1_type                     gsm_900_pmeas_g0_f1;
  
  nvi_gsm_900_pmeas_g1_f1_type                     gsm_900_pmeas_g1_f1;
  
  nvi_gsm_900_pmeas_g2_f1_type                     gsm_900_pmeas_g2_f1;
  
  nvi_gsm_900_pmeas_g3_f1_type                     gsm_900_pmeas_g3_f1;
  
  nvi_gsm_900_pmeas_g0_f2_type                     gsm_900_pmeas_g0_f2;
  
  nvi_gsm_900_pmeas_g1_f2_type                     gsm_900_pmeas_g1_f2;
  
  nvi_gsm_900_pmeas_g2_f2_type                     gsm_900_pmeas_g2_f2;
  
  nvi_gsm_900_pmeas_g3_f2_type                     gsm_900_pmeas_g3_f2;
  
  nvi_gsm_1800_pmeas_g0_f1_type                    gsm_1800_pmeas_g0_f1;
  
  nvi_gsm_1800_pmeas_g1_f1_type                    gsm_1800_pmeas_g1_f1;
  
  nvi_gsm_1800_pmeas_g2_f1_type                    gsm_1800_pmeas_g2_f1;
  
  nvi_gsm_1800_pmeas_g3_f1_type                    gsm_1800_pmeas_g3_f1;
  
  nvi_gsm_1800_pmeas_g0_f2_type                    gsm_1800_pmeas_g0_f2;
  
  nvi_gsm_1800_pmeas_g1_f2_type                    gsm_1800_pmeas_g1_f2;
  
  nvi_gsm_1800_pmeas_g2_f2_type                    gsm_1800_pmeas_g2_f2;
  
  nvi_gsm_1800_pmeas_g3_f2_type                    gsm_1800_pmeas_g3_f2;
  
  nvi_gsm_1900_pmeas_g0_f1_type                    gsm_1900_pmeas_g0_f1;
  
  nvi_gsm_1900_pmeas_g1_f1_type                    gsm_1900_pmeas_g1_f1;
  
  nvi_gsm_1900_pmeas_g2_f1_type                    gsm_1900_pmeas_g2_f1;
  
  nvi_gsm_1900_pmeas_g3_f1_type                    gsm_1900_pmeas_g3_f1;
  
  nvi_gsm_1900_pmeas_g0_f2_type                    gsm_1900_pmeas_g0_f2;
  
  nvi_gsm_1900_pmeas_g1_f2_type                    gsm_1900_pmeas_g1_f2;
  
  nvi_gsm_1900_pmeas_g2_f2_type                    gsm_1900_pmeas_g2_f2;
  
  nvi_gsm_1900_pmeas_g3_f2_type                    gsm_1900_pmeas_g3_f2;
  
  nvi_uint16_type                                  gsm_1800_pa_r1_to_r2;
  
  nvi_uint16_type                                  gsm_1800_pa_r2_to_r4;
  
  nvi_uint16_type                                  gsm_1900_pa_r1_to_r2;
  
  nvi_uint16_type                                  gsm_1900_pa_r2_to_r4;
  
  nvi_uint16_type                                  gsm_850_pa_r1_to_r2;
  
  nvi_uint16_type                                  gsm_850_pa_r2_to_r3;
  
  nvi_uint16_type                                  gsm_850_pa_r3_to_r4;
  
  nvi_uint16_type                                  gsm_900_pa_r1_to_r2;
  
  nvi_uint16_type                                  gsm_900_pa_r2_to_r3;
  
  nvi_uint16_type                                  gsm_900_pa_r3_to_r4;
  
  nvi_uint16_type                                  gsm_850_pa_predist_swpt1;
  
  nvi_uint16_type                                  gsm_850_pa_predist_swpt2;
  
  nvi_uint16_type                                  gsm_900_pa_predist_swpt1;
  
  nvi_uint16_type                                  gsm_900_pa_predist_swpt2;
  
  nvi_uint16_type                                  gsm_1800_pa_predist_swpt1;
  
  nvi_uint16_type                                  gsm_1800_pa_predist_swpt2;
  
  nvi_uint16_type                                  gsm_1900_pa_predist_swpt1;
  
  nvi_uint16_type                                  gsm_1900_pa_predist_swpt2;
  
  nvi_hsupa_irq_flow_ctrl_2ms_pdu_size_336_type    hsupa_irq_flow_ctrl_2ms_pdu_size_336;
  
  nvi_hsupa_irq_flow_ctrl_2ms_pdu_size_656_type    hsupa_irq_flow_ctrl_2ms_pdu_size_656;
  
  nvi_bc10_p2_rise_fall_off_type                   bc10_p2_rise_fall_off;
  
  nvi_bc10_p3_rise_fall_off_type                   bc10_p3_rise_fall_off;
  
  nvi_bc10_hdr_p2_rise_fall_off_type               bc10_hdr_p2_rise_fall_off;
  
  nvi_bc10_hdr_p3_rise_fall_off_type               bc10_hdr_p3_rise_fall_off;
  
  nvi_boolean_type                                 psho_feature_support;
  
  nvi_gsm_850_kv_vs_temp_type                      gsm_850_kv_vs_temp;
  
  nvi_gsm_900_kv_vs_temp_type                      gsm_900_kv_vs_temp;
  
  nvi_gsm_1800_kv_vs_temp_type                     gsm_1800_kv_vs_temp;
  
  nvi_gsm_1900_kv_vs_temp_type                     gsm_1900_kv_vs_temp;
  
  nvi_uint16_type                                  gsm_900_edge_pa_ultra_lo_to_lo;
  
  nvi_uint16_type                                  gsm_900_edge_pa_lo_to_mid;
  
  nvi_uint16_type                                  gsm_900_edge_pa_mid_to_hi;
  
  nvi_uint16_type                                  gsm_850_edge_pa_ultra_lo_to_lo;
  
  nvi_uint16_type                                  gsm_850_edge_pa_lo_to_mid;
  
  nvi_uint16_type                                  gsm_850_edge_pa_mid_to_hi;
  
  nvi_uint16_type                                  gsm_1800_edge_pa_lo_to_mid;
  
  nvi_uint16_type                                  gsm_1800_edge_pa_mid_to_hi;
  
  nvi_uint16_type                                  gsm_1900_edge_pa_lo_to_mid;
  
  nvi_uint16_type                                  gsm_1900_edge_pa_mid_to_hi;
  
  nvi_undp_noem_test_type                          undp_noem_test;
  
  nvi_gsm_850_linear_pa_temp_comp_type             gsm_850_linear_pa_temp_comp;
  
  nvi_gsm_900_linear_pa_temp_comp_type             gsm_900_linear_pa_temp_comp;
  
  nvi_gsm_1800_linear_pa_temp_comp_type            gsm_1800_linear_pa_temp_comp;
  
  nvi_gsm_1900_linear_pa_temp_comp_type            gsm_1900_linear_pa_temp_comp;
  
  nvi_gsm_850_rgi_g0_f3_type                       gsm_850_rgi_g0_f3;
  
  nvi_gsm_850_rgi_g1_f3_type                       gsm_850_rgi_g1_f3;
  
  nvi_gsm_850_rgi_g2_f3_type                       gsm_850_rgi_g2_f3;
  
  nvi_gsm_850_rgi_g3_f3_type                       gsm_850_rgi_g3_f3;
  
  nvi_gsm_900_rgi_g0_f3_type                       gsm_900_rgi_g0_f3;
  
  nvi_gsm_900_rgi_g1_f3_type                       gsm_900_rgi_g1_f3;
  
  nvi_gsm_900_rgi_g2_f3_type                       gsm_900_rgi_g2_f3;
  
  nvi_gsm_900_rgi_g3_f3_type                       gsm_900_rgi_g3_f3;
  
  nvi_gsm_1800_rgi_g0_f3_type                      gsm_1800_rgi_g0_f3;
  
  nvi_gsm_1800_rgi_g1_f3_type                      gsm_1800_rgi_g1_f3;
  
  nvi_gsm_1800_rgi_g2_f3_type                      gsm_1800_rgi_g2_f3;
  
  nvi_gsm_1800_rgi_g3_f3_type                      gsm_1800_rgi_g3_f3;
  
  nvi_gsm_1900_rgi_g0_f3_type                      gsm_1900_rgi_g0_f3;
  
  nvi_gsm_1900_rgi_g1_f3_type                      gsm_1900_rgi_g1_f3;
  
  nvi_gsm_1900_rgi_g2_f3_type                      gsm_1900_rgi_g2_f3;
  
  nvi_gsm_1900_rgi_g3_f3_type                      gsm_1900_rgi_g3_f3;
  
  nvi_gsm_850_pmeas_g0_f3_type                     gsm_850_pmeas_g0_f3;
  
  nvi_gsm_850_pmeas_g1_f3_type                     gsm_850_pmeas_g1_f3;
  
  nvi_gsm_850_pmeas_g2_f3_type                     gsm_850_pmeas_g2_f3;
  
  nvi_gsm_850_pmeas_g3_f3_type                     gsm_850_pmeas_g3_f3;
  
  nvi_gsm_900_pmeas_g0_f3_type                     gsm_900_pmeas_g0_f3;
  
  nvi_gsm_900_pmeas_g1_f3_type                     gsm_900_pmeas_g1_f3;
  
  nvi_gsm_900_pmeas_g2_f3_type                     gsm_900_pmeas_g2_f3;
  
  nvi_gsm_900_pmeas_g3_f3_type                     gsm_900_pmeas_g3_f3;
  
  nvi_gsm_1800_pmeas_g0_f3_type                    gsm_1800_pmeas_g0_f3;
  
  nvi_gsm_1800_pmeas_g1_f3_type                    gsm_1800_pmeas_g1_f3;
  
  nvi_gsm_1800_pmeas_g2_f3_type                    gsm_1800_pmeas_g2_f3;
  
  nvi_gsm_1800_pmeas_g3_f3_type                    gsm_1800_pmeas_g3_f3;
  
  nvi_gsm_1900_pmeas_g0_f3_type                    gsm_1900_pmeas_g0_f3;
  
  nvi_gsm_1900_pmeas_g1_f3_type                    gsm_1900_pmeas_g1_f3;
  
  nvi_gsm_1900_pmeas_g2_f3_type                    gsm_1900_pmeas_g2_f3;
  
  nvi_gsm_1900_pmeas_g3_f3_type                    gsm_1900_pmeas_g3_f3;
  
  nvi_uint8_type                                   mf_ipdc_supercedes_clipcast;
  
  nvi_process_cal_type                             process_cal;
  
  nvi_lo_cal_type                                  c0_bc0_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc1_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc2_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc3_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc4_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc5_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc6_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc7_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc8_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc9_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc10_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc11_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc12_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc13_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc14_lo_cal;
  
  nvi_lo_cal_type                                  c0_bc15_lo_cal;
  
  nvi_dc_cal_type                                  dc_cal;
  
  nvi_mf_band_class_sp_info_type                   mf_band_class_sp_info;
  
  nvi_ds_sip_profile_type                          ds_sip_profile;
  
  nvi_uint8_type                                   ds_sip_active_profile_index;
  
  nvi_uint8_type                                   ds_sip_num_valid_profiles;
  
  nvi_ds_sip_profile_nai_info_type                 ds_sip_nai_info;
  
  nvi_ds_sip_ppp_ss_info_type                      ds_sip_ppp_ss_info;
  
  nvi_uint64_type                                  diag_diagbuf_tx_sleep_threshold_ext;
  
  nvi_uint32_type                                  wcdma_cltd_fbi_ber_thresh;
  
  nvi_uint32_type                                  wcdma_test_nv_1;
  
  nvi_wcdma_2100_exp_hdet_vs_agc_v2_type           wcdma_2100_exp_hdet_vs_agc_v2;
  
  nvi_wcdma_1900_exp_hdet_vs_agc_v2_type           wcdma_1900_exp_hdet_vs_agc_v2;
  
  nvi_wcdma_800_exp_hdet_vs_agc_v2_type            wcdma_800_exp_hdet_vs_agc_v2;
  
  nvi_wcdma_bc4_exp_hdet_vs_agc_v2_type            wcdma_bc4_exp_hdet_vs_agc_v2;
  
  nvi_wcdma_1800_exp_hdet_vs_agc_v2_type           wcdma_1800_exp_hdet_vs_agc_v2;
  
  nvi_wcdma_900_exp_hdet_vs_agc_v2_type            wcdma_900_exp_hdet_vs_agc_v2;
  
  nvi_uint16_type                                  wcdma_2100_hdet_off_v2;
  
  nvi_uint16_type                                  wcdma_1900_hdet_off_v2;
  
  nvi_uint16_type                                  wcdma_800_hdet_off_v2;
  
  nvi_uint16_type                                  wcdma_bc4_hdet_off_v2;
  
  nvi_uint16_type                                  wcdma_1800_hdet_off_v2;
  
  nvi_uint16_type                                  wcdma_900_hdet_off_v2;
  
  nvi_uint16_type                                  wcdma_2100_hdet_spn_v2;
  
  nvi_uint16_type                                  wcdma_1900_hdet_spn_v2;
  
  nvi_uint16_type                                  wcdma_800_hdet_spn_v2;
  
  nvi_uint16_type                                  wcdma_bc4_hdet_spn_v2;
  
  nvi_uint16_type                                  wcdma_1800_hdet_spn_v2;
  
  nvi_uint16_type                                  wcdma_900_hdet_spn_v2;
  
  nvi_uint16_type                                  gsm_linear_tx_gain_param;
  
  nvi_uint16_type                                  edge_linear_tx_gain_param;
  
  nvi_therm_type                                   enh_therm;
  
  nvi_edge_850_rgi_g0_f1_type                      edge_850_rgi_g0_f1;
  
  nvi_edge_850_rgi_g1_f1_type                      edge_850_rgi_g1_f1;
  
  nvi_edge_850_rgi_g2_f1_type                      edge_850_rgi_g2_f1;
  
  nvi_edge_850_rgi_g3_f1_type                      edge_850_rgi_g3_f1;
  
  nvi_edge_850_rgi_g0_f2_type                      edge_850_rgi_g0_f2;
  
  nvi_edge_850_rgi_g1_f2_type                      edge_850_rgi_g1_f2;
  
  nvi_edge_850_rgi_g2_f2_type                      edge_850_rgi_g2_f2;
  
  nvi_edge_850_rgi_g3_f2_type                      edge_850_rgi_g3_f2;
  
  nvi_edge_850_rgi_g0_f3_type                      edge_850_rgi_g0_f3;
  
  nvi_edge_850_rgi_g1_f3_type                      edge_850_rgi_g1_f3;
  
  nvi_edge_850_rgi_g2_f3_type                      edge_850_rgi_g2_f3;
  
  nvi_edge_850_rgi_g3_f3_type                      edge_850_rgi_g3_f3;
  
  nvi_edge_900_rgi_g0_f1_type                      edge_900_rgi_g0_f1;
  
  nvi_edge_900_rgi_g1_f1_type                      edge_900_rgi_g1_f1;
  
  nvi_edge_900_rgi_g2_f1_type                      edge_900_rgi_g2_f1;
  
  nvi_edge_900_rgi_g3_f1_type                      edge_900_rgi_g3_f1;
  
  nvi_edge_900_rgi_g0_f2_type                      edge_900_rgi_g0_f2;
  
  nvi_edge_900_rgi_g1_f2_type                      edge_900_rgi_g1_f2;
  
  nvi_edge_900_rgi_g2_f2_type                      edge_900_rgi_g2_f2;
  
  nvi_edge_900_rgi_g3_f2_type                      edge_900_rgi_g3_f2;
  
  nvi_edge_900_rgi_g0_f3_type                      edge_900_rgi_g0_f3;
  
  nvi_edge_900_rgi_g1_f3_type                      edge_900_rgi_g1_f3;
  
  nvi_edge_900_rgi_g2_f3_type                      edge_900_rgi_g2_f3;
  
  nvi_edge_900_rgi_g3_f3_type                      edge_900_rgi_g3_f3;
  
  nvi_edge_1800_rgi_g0_f1_type                     edge_1800_rgi_g0_f1;
  
  nvi_edge_1800_rgi_g1_f1_type                     edge_1800_rgi_g1_f1;
  
  nvi_edge_1800_rgi_g2_f1_type                     edge_1800_rgi_g2_f1;
  
  nvi_edge_1800_rgi_g3_f1_type                     edge_1800_rgi_g3_f1;
  
  nvi_edge_1800_rgi_g0_f2_type                     edge_1800_rgi_g0_f2;
  
  nvi_edge_1800_rgi_g1_f2_type                     edge_1800_rgi_g1_f2;
  
  nvi_edge_1800_rgi_g2_f2_type                     edge_1800_rgi_g2_f2;
  
  nvi_edge_1800_rgi_g3_f2_type                     edge_1800_rgi_g3_f2;
  
  nvi_edge_1800_rgi_g0_f3_type                     edge_1800_rgi_g0_f3;
  
  nvi_edge_1800_rgi_g1_f3_type                     edge_1800_rgi_g1_f3;
  
  nvi_edge_1800_rgi_g2_f3_type                     edge_1800_rgi_g2_f3;
  
  nvi_edge_1800_rgi_g3_f3_type                     edge_1800_rgi_g3_f3;
  
  nvi_edge_1900_rgi_g0_f1_type                     edge_1900_rgi_g0_f1;
  
  nvi_edge_1900_rgi_g1_f1_type                     edge_1900_rgi_g1_f1;
  
  nvi_edge_1900_rgi_g2_f1_type                     edge_1900_rgi_g2_f1;
  
  nvi_edge_1900_rgi_g3_f1_type                     edge_1900_rgi_g3_f1;
  
  nvi_edge_1900_rgi_g0_f2_type                     edge_1900_rgi_g0_f2;
  
  nvi_edge_1900_rgi_g1_f2_type                     edge_1900_rgi_g1_f2;
  
  nvi_edge_1900_rgi_g2_f2_type                     edge_1900_rgi_g2_f2;
  
  nvi_edge_1900_rgi_g3_f2_type                     edge_1900_rgi_g3_f2;
  
  nvi_edge_1900_rgi_g0_f3_type                     edge_1900_rgi_g0_f3;
  
  nvi_edge_1900_rgi_g1_f3_type                     edge_1900_rgi_g1_f3;
  
  nvi_edge_1900_rgi_g2_f3_type                     edge_1900_rgi_g2_f3;
  
  nvi_edge_1900_rgi_g3_f3_type                     edge_1900_rgi_g3_f3;
  
  nvi_edge_850_pmeas_g0_f1_type                    edge_850_pmeas_g0_f1;
  
  nvi_edge_850_pmeas_g1_f1_type                    edge_850_pmeas_g1_f1;
  
  nvi_edge_850_pmeas_g2_f1_type                    edge_850_pmeas_g2_f1;
  
  nvi_edge_850_pmeas_g3_f1_type                    edge_850_pmeas_g3_f1;
  
  nvi_edge_850_pmeas_g0_f2_type                    edge_850_pmeas_g0_f2;
  
  nvi_edge_850_pmeas_g1_f2_type                    edge_850_pmeas_g1_f2;
  
  nvi_edge_850_pmeas_g2_f2_type                    edge_850_pmeas_g2_f2;
  
  nvi_edge_850_pmeas_g3_f2_type                    edge_850_pmeas_g3_f2;
  
  nvi_edge_850_pmeas_g0_f3_type                    edge_850_pmeas_g0_f3;
  
  nvi_edge_850_pmeas_g1_f3_type                    edge_850_pmeas_g1_f3;
  
  nvi_edge_850_pmeas_g2_f3_type                    edge_850_pmeas_g2_f3;
  
  nvi_edge_850_pmeas_g3_f3_type                    edge_850_pmeas_g3_f3;
  
  nvi_edge_900_pmeas_g0_f1_type                    edge_900_pmeas_g0_f1;
  
  nvi_edge_900_pmeas_g1_f1_type                    edge_900_pmeas_g1_f1;
  
  nvi_edge_900_pmeas_g2_f1_type                    edge_900_pmeas_g2_f1;
  
  nvi_edge_900_pmeas_g3_f1_type                    edge_900_pmeas_g3_f1;
  
  nvi_edge_900_pmeas_g0_f2_type                    edge_900_pmeas_g0_f2;
  
  nvi_edge_900_pmeas_g1_f2_type                    edge_900_pmeas_g1_f2;
  
  nvi_edge_900_pmeas_g2_f2_type                    edge_900_pmeas_g2_f2;
  
  nvi_edge_900_pmeas_g3_f2_type                    edge_900_pmeas_g3_f2;
  
  nvi_edge_900_pmeas_g0_f3_type                    edge_900_pmeas_g0_f3;
  
  nvi_edge_900_pmeas_g1_f3_type                    edge_900_pmeas_g1_f3;
  
  nvi_edge_900_pmeas_g2_f3_type                    edge_900_pmeas_g2_f3;
  
  nvi_edge_900_pmeas_g3_f3_type                    edge_900_pmeas_g3_f3;
  
  nvi_edge_1800_pmeas_g0_f1_type                   edge_1800_pmeas_g0_f1;
  
  nvi_edge_1800_pmeas_g1_f1_type                   edge_1800_pmeas_g1_f1;
  
  nvi_edge_1800_pmeas_g2_f1_type                   edge_1800_pmeas_g2_f1;
  
  nvi_edge_1800_pmeas_g3_f1_type                   edge_1800_pmeas_g3_f1;
  
  nvi_edge_1800_pmeas_g0_f2_type                   edge_1800_pmeas_g0_f2;
  
  nvi_edge_1800_pmeas_g1_f2_type                   edge_1800_pmeas_g1_f2;
  
  nvi_edge_1800_pmeas_g2_f2_type                   edge_1800_pmeas_g2_f2;
  
  nvi_edge_1800_pmeas_g3_f2_type                   edge_1800_pmeas_g3_f2;
  
  nvi_edge_1800_pmeas_g0_f3_type                   edge_1800_pmeas_g0_f3;
  
  nvi_edge_1800_pmeas_g1_f3_type                   edge_1800_pmeas_g1_f3;
  
  nvi_edge_1800_pmeas_g2_f3_type                   edge_1800_pmeas_g2_f3;
  
  nvi_edge_1800_pmeas_g3_f3_type                   edge_1800_pmeas_g3_f3;
  
  nvi_edge_1900_pmeas_g0_f1_type                   edge_1900_pmeas_g0_f1;
  
  nvi_edge_1900_pmeas_g1_f1_type                   edge_1900_pmeas_g1_f1;
  
  nvi_edge_1900_pmeas_g2_f1_type                   edge_1900_pmeas_g2_f1;
  
  nvi_edge_1900_pmeas_g3_f1_type                   edge_1900_pmeas_g3_f1;
  
  nvi_edge_1900_pmeas_g0_f2_type                   edge_1900_pmeas_g0_f2;
  
  nvi_edge_1900_pmeas_g1_f2_type                   edge_1900_pmeas_g1_f2;
  
  nvi_edge_1900_pmeas_g2_f2_type                   edge_1900_pmeas_g2_f2;
  
  nvi_edge_1900_pmeas_g3_f2_type                   edge_1900_pmeas_g3_f2;
  
  nvi_edge_1900_pmeas_g0_f3_type                   edge_1900_pmeas_g0_f3;
  
  nvi_edge_1900_pmeas_g1_f3_type                   edge_1900_pmeas_g1_f3;
  
  nvi_edge_1900_pmeas_g2_f3_type                   edge_1900_pmeas_g2_f3;
  
  nvi_edge_1900_pmeas_g3_f3_type                   edge_1900_pmeas_g3_f3;
  
  nvi_uint16_type                                  supply;
  
  nvi_im2_cal_type                                 c0_bc0_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc1_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc2_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc3_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc4_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc5_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc6_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc7_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc8_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc9_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc10_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc11_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc12_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc13_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc14_im2_cal;
  
  nvi_im2_cal_type                                 c0_bc15_im2_cal;
  
  nvi_boolean_type                                 toolkit_env_retry_flag;
  
  nvi_uint8_type                                   cgps_sbas_enabled;
  
  nvi_uint8_type                                   cgps_sbas_user_preference;
  
  nvi_uint8_type                                   cgps_dpo_control;
  
  nvi_esn_me_type                                  esn_me;
  
  nvi_uint64_type                                  meid_me;
  
  nvi_uint8_type                                   cgps_on_demand_enabled;
  
  nvi_enum_type                                    hdrscp_select_bcmcs_config;
  
  nvi_amam_linear_seg_type                         gsm_850_amam_linear_pa_rangea_f1_seg1;
  
  nvi_amam_linear_seg_type                         gsm_850_amam_linear_pa_rangea_f1_seg2;
  
  nvi_amam_linear_seg_type                         gsm_850_amam_linear_pa_rangeb_f1_seg1;
  
  nvi_amam_linear_seg_type                         gsm_850_amam_linear_pa_rangeb_f1_seg2;
  
  nvi_amam_linear_seg_type                         gsm_850_amam_linear_pa_rangea_f2_seg1;
  
  nvi_amam_linear_seg_type                         gsm_850_amam_linear_pa_rangea_f2_seg2;
  
  nvi_amam_linear_seg_type                         gsm_850_amam_linear_pa_rangeb_f2_seg1;
  
  nvi_amam_linear_seg_type                         gsm_850_amam_linear_pa_rangeb_f2_seg2;
  
  nvi_amam_linear_seg_type                         gsm_850_amam_linear_pa_rangea_f3_seg1;
  
  nvi_amam_linear_seg_type                         gsm_850_amam_linear_pa_rangea_f3_seg2;
  
  nvi_amam_linear_seg_type                         gsm_850_amam_linear_pa_rangeb_f3_seg1;
  
  nvi_amam_linear_seg_type                         gsm_850_amam_linear_pa_rangeb_f3_seg2;
  
  nvi_amam_linear_seg_type                         gsm_900_amam_linear_pa_rangea_f1_seg1;
  
  nvi_amam_linear_seg_type                         gsm_900_amam_linear_pa_rangea_f1_seg2;
  
  nvi_amam_linear_seg_type                         gsm_900_amam_linear_pa_rangeb_f1_seg1;
  
  nvi_amam_linear_seg_type                         gsm_900_amam_linear_pa_rangeb_f1_seg2;
  
  nvi_amam_linear_seg_type                         gsm_900_amam_linear_pa_rangea_f2_seg1;
  
  nvi_amam_linear_seg_type                         gsm_900_amam_linear_pa_rangea_f2_seg2;
  
  nvi_amam_linear_seg_type                         gsm_900_amam_linear_pa_rangeb_f2_seg1;
  
  nvi_amam_linear_seg_type                         gsm_900_amam_linear_pa_rangeb_f2_seg2;
  
  nvi_amam_linear_seg_type                         gsm_900_amam_linear_pa_rangea_f3_seg1;
  
  nvi_amam_linear_seg_type                         gsm_900_amam_linear_pa_rangea_f3_seg2;
  
  nvi_amam_linear_seg_type                         gsm_900_amam_linear_pa_rangeb_f3_seg1;
  
  nvi_amam_linear_seg_type                         gsm_900_amam_linear_pa_rangeb_f3_seg2;
  
  nvi_amam_linear_seg_type                         gsm_1800_amam_linear_pa_rangea_f1_seg1;
  
  nvi_amam_linear_seg_type                         gsm_1800_amam_linear_pa_rangea_f1_seg2;
  
  nvi_amam_linear_seg_type                         gsm_1800_amam_linear_pa_rangeb_f1_seg1;
  
  nvi_amam_linear_seg_type                         gsm_1800_amam_linear_pa_rangeb_f1_seg2;
  
  nvi_amam_linear_seg_type                         gsm_1800_amam_linear_pa_rangea_f2_seg1;
  
  nvi_amam_linear_seg_type                         gsm_1800_amam_linear_pa_rangea_f2_seg2;
  
  nvi_amam_linear_seg_type                         gsm_1800_amam_linear_pa_rangeb_f2_seg1;
  
  nvi_amam_linear_seg_type                         gsm_1800_amam_linear_pa_rangeb_f2_seg2;
  
  nvi_amam_linear_seg_type                         gsm_1800_amam_linear_pa_rangea_f3_seg1;
  
  nvi_amam_linear_seg_type                         gsm_1800_amam_linear_pa_rangea_f3_seg2;
  
  nvi_amam_linear_seg_type                         gsm_1800_amam_linear_pa_rangeb_f3_seg1;
  
  nvi_amam_linear_seg_type                         gsm_1800_amam_linear_pa_rangeb_f3_seg2;
  
  nvi_amam_linear_seg_type                         gsm_1900_amam_linear_pa_rangea_f1_seg1;
  
  nvi_amam_linear_seg_type                         gsm_1900_amam_linear_pa_rangea_f1_seg2;
  
  nvi_amam_linear_seg_type                         gsm_1900_amam_linear_pa_rangeb_f1_seg1;
  
  nvi_amam_linear_seg_type                         gsm_1900_amam_linear_pa_rangeb_f1_seg2;
  
  nvi_amam_linear_seg_type                         gsm_1900_amam_linear_pa_rangea_f2_seg1;
  
  nvi_amam_linear_seg_type                         gsm_1900_amam_linear_pa_rangea_f2_seg2;
  
  nvi_amam_linear_seg_type                         gsm_1900_amam_linear_pa_rangeb_f2_seg1;
  
  nvi_amam_linear_seg_type                         gsm_1900_amam_linear_pa_rangeb_f2_seg2;
  
  nvi_amam_linear_seg_type                         gsm_1900_amam_linear_pa_rangea_f3_seg1;
  
  nvi_amam_linear_seg_type                         gsm_1900_amam_linear_pa_rangea_f3_seg2;
  
  nvi_amam_linear_seg_type                         gsm_1900_amam_linear_pa_rangeb_f3_seg1;
  
  nvi_amam_linear_seg_type                         gsm_1900_amam_linear_pa_rangeb_f3_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_850_ampm_linear_pa_rangea_f1_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_850_ampm_linear_pa_rangea_f1_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_850_ampm_linear_pa_rangeb_f1_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_850_ampm_linear_pa_rangeb_f1_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_850_ampm_linear_pa_rangea_f2_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_850_ampm_linear_pa_rangea_f2_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_850_ampm_linear_pa_rangeb_f2_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_850_ampm_linear_pa_rangeb_f2_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_850_ampm_linear_pa_rangea_f3_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_850_ampm_linear_pa_rangea_f3_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_850_ampm_linear_pa_rangeb_f3_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_850_ampm_linear_pa_rangeb_f3_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_900_ampm_linear_pa_rangea_f1_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_900_ampm_linear_pa_rangea_f1_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_900_ampm_linear_pa_rangeb_f1_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_900_ampm_linear_pa_rangeb_f1_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_900_ampm_linear_pa_rangea_f2_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_900_ampm_linear_pa_rangea_f2_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_900_ampm_linear_pa_rangeb_f2_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_900_ampm_linear_pa_rangeb_f2_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_900_ampm_linear_pa_rangea_f3_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_900_ampm_linear_pa_rangea_f3_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_900_ampm_linear_pa_rangeb_f3_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_900_ampm_linear_pa_rangeb_f3_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_1800_ampm_linear_pa_rangea_f1_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_1800_ampm_linear_pa_rangea_f1_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_1800_ampm_linear_pa_rangeb_f1_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_1800_ampm_linear_pa_rangeb_f1_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_1800_ampm_linear_pa_rangea_f2_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_1800_ampm_linear_pa_rangea_f2_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_1800_ampm_linear_pa_rangeb_f2_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_1800_ampm_linear_pa_rangeb_f2_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_1800_ampm_linear_pa_rangea_f3_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_1800_ampm_linear_pa_rangea_f3_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_1800_ampm_linear_pa_rangeb_f3_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_1800_ampm_linear_pa_rangeb_f3_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_1900_ampm_linear_pa_rangea_f1_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_1900_ampm_linear_pa_rangea_f1_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_1900_ampm_linear_pa_rangeb_f1_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_1900_ampm_linear_pa_rangeb_f1_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_1900_ampm_linear_pa_rangea_f2_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_1900_ampm_linear_pa_rangea_f2_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_1900_ampm_linear_pa_rangeb_f2_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_1900_ampm_linear_pa_rangeb_f2_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_1900_ampm_linear_pa_rangea_f3_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_1900_ampm_linear_pa_rangea_f3_seg2;
  
  nvi_ampm_linear_seg_type                         gsm_1900_ampm_linear_pa_rangeb_f3_seg1;
  
  nvi_ampm_linear_seg_type                         gsm_1900_ampm_linear_pa_rangeb_f3_seg2;
  
  nvi_uint16_type                                  gsm_850_tx_agc_setting_for_pred;
  
  nvi_uint16_type                                  gsm_900_tx_agc_setting_for_pred;
  
  nvi_uint16_type                                  gsm_1800_tx_agc_setting_for_pred;
  
  nvi_uint16_type                                  gsm_1900_tx_agc_setting_for_pred;
  
  nvi_enum_type                                    mipv6_behavior;
  
  nvi_uint8_type                                   mipv6_active_user;
  
  nvi_mipv6_gen_user_profile_type                  mipv6_gen_user_profile;
  
  nvi_mipv6_nai_type                               mipv6_nai_0;
  
  nvi_mipv6_nai_type                               mipv6_nai_1;
  
  nvi_mipv6_nai_type                               mipv6_nai_2;
  
  nvi_mipv6_nai_type                               mipv6_nai_3;
  
  nvi_mipv6_nai_type                               mipv6_nai_4;
  
  nvi_mipv6_eap_aka_credential_type                mipv6_eap_aka_credential;
  
  nvi_mipv6_ha_type                                mipv6_ha;
  
  nvi_mipv6_hoa_type                               mipv6_hoa;
  
  nvi_mipv6_primary_dns_type                       mipv6_primary_dns;
  
  nvi_mipv6_secondary_dns_type                     mipv6_secondary_dns;
  
  nvi_mipv6_ipsec_config_type                      mipv6_ipsec_config;
  
  nvi_mipv6_registration_config_type               mipv6_registration_config;
  
  nvi_boolean_type                                 mipv6_ipsec_on_payload;
  
  nvi_boolean_type                                 mipv6_request_visited_network_ha;
  
  nvi_enum_type                                    mipv6_protection_method;
  
  nvi_mipv6_mn_aaa_shared_secret_type              mipv6_mn_aaa_shared_secret;
  
  nvi_mipv6_mn_ha_shared_secret_type               mipv6_mn_ha_shared_secret;
  
  nvi_mipv6_auth_proto_config_type                 mipv6_auth_proto_config;
  
  nvi_bc0_exp_hdet_vs_agc_v2_type                  bc0_exp_hdet_vs_agc_v2;
  
  nvi_bc1_exp_hdet_vs_agc_v2_type                  bc1_exp_hdet_vs_agc_v2;
  
  nvi_bc2_exp_hdet_vs_agc_v2_type                  bc2_exp_hdet_vs_agc_v2;
  
  nvi_bc3_exp_hdet_vs_agc_v2_type                  bc3_exp_hdet_vs_agc_v2;
  
  nvi_bc4_exp_hdet_vs_agc_v2_type                  bc4_exp_hdet_vs_agc_v2;
  
  nvi_bc5_exp_hdet_vs_agc_v2_type                  bc5_exp_hdet_vs_agc_v2;
  
  nvi_bc6_exp_hdet_vs_agc_v2_type                  bc6_exp_hdet_vs_agc_v2;
  
  nvi_bc7_exp_hdet_vs_agc_v2_type                  bc7_exp_hdet_vs_agc_v2;
  
  nvi_bc8_exp_hdet_vs_agc_v2_type                  bc8_exp_hdet_vs_agc_v2;
  
  nvi_bc9_exp_hdet_vs_agc_v2_type                  bc9_exp_hdet_vs_agc_v2;
  
  nvi_bc10_exp_hdet_vs_agc_v2_type                 bc10_exp_hdet_vs_agc_v2;
  
  nvi_bc11_exp_hdet_vs_agc_v2_type                 bc11_exp_hdet_vs_agc_v2;
  
  nvi_bc12_exp_hdet_vs_agc_v2_type                 bc12_exp_hdet_vs_agc_v2;
  
  nvi_bc13_exp_hdet_vs_agc_v2_type                 bc13_exp_hdet_vs_agc_v2;
  
  nvi_bc14_exp_hdet_vs_agc_v2_type                 bc14_exp_hdet_vs_agc_v2;
  
  nvi_bc15_exp_hdet_vs_agc_v2_type                 bc15_exp_hdet_vs_agc_v2;
  
  nvi_uint16_type                                  bc0_hdet_off_v2;
  
  nvi_uint16_type                                  bc1_hdet_off_v2;
  
  nvi_uint16_type                                  bc2_hdet_off_v2;
  
  nvi_uint16_type                                  bc3_hdet_off_v2;
  
  nvi_uint16_type                                  bc4_hdet_off_v2;
  
  nvi_uint16_type                                  bc5_hdet_off_v2;
  
  nvi_uint16_type                                  bc6_hdet_off_v2;
  
  nvi_uint16_type                                  bc7_hdet_off_v2;
  
  nvi_uint16_type                                  bc8_hdet_off_v2;
  
  nvi_uint16_type                                  bc9_hdet_off_v2;
  
  nvi_uint16_type                                  bc10_hdet_off_v2;
  
  nvi_uint16_type                                  bc11_hdet_off_v2;
  
  nvi_uint16_type                                  bc12_hdet_off_v2;
  
  nvi_uint16_type                                  bc13_hdet_off_v2;
  
  nvi_uint16_type                                  bc14_hdet_off_v2;
  
  nvi_uint16_type                                  bc15_hdet_off_v2;
  
  nvi_uint16_type                                  bc0_hdet_spn_v2;
  
  nvi_uint16_type                                  bc1_hdet_spn_v2;
  
  nvi_uint16_type                                  bc2_hdet_spn_v2;
  
  nvi_uint16_type                                  bc3_hdet_spn_v2;
  
  nvi_uint16_type                                  bc4_hdet_spn_v2;
  
  nvi_uint16_type                                  bc5_hdet_spn_v2;
  
  nvi_uint16_type                                  bc6_hdet_spn_v2;
  
  nvi_uint16_type                                  bc7_hdet_spn_v2;
  
  nvi_uint16_type                                  bc8_hdet_spn_v2;
  
  nvi_uint16_type                                  bc9_hdet_spn_v2;
  
  nvi_uint16_type                                  bc10_hdet_spn_v2;
  
  nvi_uint16_type                                  bc11_hdet_spn_v2;
  
  nvi_uint16_type                                  bc12_hdet_spn_v2;
  
  nvi_uint16_type                                  bc13_hdet_spn_v2;
  
  nvi_uint16_type                                  bc14_hdet_spn_v2;
  
  nvi_uint16_type                                  bc15_hdet_spn_v2;
  
  nvi_boolean_type                                 toolkit_cs_ps_parallel;
  
  nvi_uint32_type                                  dvbh_max_ts_acq_attempts;
  
  nvi_uint32_type                                  dvbh_max_sys_acq_attempts;
  
  nvi_uint32_type                                  dsat707_cta_timer;
  
  nvi_data_agg_timer_type                          data_agg_timer;
  
  nvi_uint32_type                                  dhcp6_inform_req_tries;
  
  nvi_uint32_type                                  dhcp6_inform_req_init_retry_interval;
  
  nvi_uint8_type                                   wcdma_mimo_ctrl;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_ebi2_ws;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_debug;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_use_acq_timeout;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_snooze;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_sleep;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_bw;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_t_scan_lockout_ms;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_t_scan_no_agc_ms;
  
  nvi_int32_type                                   ubm_dvbh_l1_cfg_scan_no_sig_trs_db_q6;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_t_scan_agc_ms;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_t_scan_tps_ms;
  
  nvi_int32_type                                   ubm_dvbh_l1_cfg_scan_enbld_trs_db_q6;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_handoff_thresh_db_q6;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_acq_timeout_ms;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_recovery_retries;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_total_recovery_cnt;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_acq_bailout;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_pre_jammer_cfg;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_jammer_notch_gain;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_post_jammer_cfg;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_cpce_enabled;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_fap_lap_sens;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_max_cand_paths;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_sig_recovered_trsh_q7;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_disable_cpce_iir;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_tt_cir_thresh;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_full_sleep_reacq;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_jammer_detect_thresh;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_cpce_lna_thresh;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_ce_irr_filt_gain;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_cpce_check_sym_count;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_cpce_cand_ps_qpsk_trs;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_add_rampup_symbols;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_cpce_chck_sym_ignre_cnt;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_recovery_min_good_rs1;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_recovery_max_drop_count;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_t_recovery_scan_ms;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_cand_per_trs_qpsk_q14;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_cpce_agc_var_thresh;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_cpce_agc_ignore_cnt;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_cpce_cand_ps_16qam_trs;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_cand_per_trs_16qam_q14;
  
  nvi_uint32_type                                  ubm_dvbh_l1_jammer_symbols_to_iir;
  
  nvi_uint32_type                                  ubm_dvbh_l1_jammer_iir_gain;
  
  nvi_uint32_type                                  ubm_dvbh_l1_cfg_jammer_peak_abs_trs;
  
  nvi_uint32_type                                  mao_test_cfg;
  
  nvi_boolean_type                                 wwan_access_over_wifi_preferred;
  
  nvi_enum_type                                    wifi_local_breakout_allowed;
  
  nvi_iwlan_operator_id_type                       iwlan_operator_id;
  
  nvi_iwlan_realm_type                             iwlan_realm;
  
  nvi_enum_type                                    iwlan_auth_mode;
  
  nvi_uint32_type                                  iwlan_soft_ike_rekey_time;
  
  nvi_uint32_type                                  iwlan_hard_ike_rekey_time;
  
  nvi_uint32_type                                  iwlan_child_sa_soft_lifetime_sec;
  
  nvi_uint32_type                                  iwlan_child_sa_hard_lifetime_sec;
  
  nvi_uint32_type                                  iwlan_child_sa_soft_lifetime_bytes;
  
  nvi_uint32_type                                  iwlan_child_sa_hard_lifetime_bytes;
  
  nvi_uint32_type                                  iwlan_nat_keepalive_interval;
  
  nvi_uint32_type                                  iwlan_ike_retransmission_interval;
  
  nvi_uint32_type                                  iwlan_ike_max_retransmissions;
  
  nvi_uint32_type                                  iwlan_ikev2_ip_config_mask;
  
  nvi_uint32_type                                  iwlan_dhcp_ip_config_mask;
  
  nvi_uint32_type                                  iwlan_child_sa_enc_algo_proposal_mask;
  
  nvi_uint32_type                                  iwlan_ike_sa_enc_algo_proposal_mask;
  
  nvi_uint32_type                                  iwlan_ike_sa_prf_algo_proposal_mask;
  
  nvi_uint32_type                                  iwlan_child_sa_auth_algo_proposal_mask;
  
  nvi_uint32_type                                  iwlan_ike_sa_auth_algo_proposal_mask;
  
  nvi_enum_type                                    iwlan_ike_dh_mode;
  
  nvi_uint32_type                                  iwlan_pdif_address;
  
  nvi_boolean_type                                 iwlan_multi_auth_supported;
  
  nvi_iwlan_pdif_fqdn_type                         iwlan_pdif_fqdn;
  
  nvi_sbas_area_node_type                          cgps_sbas_waas_area_node1;
  
  nvi_sbas_area_node_type                          cgps_sbas_waas_area_node2;
  
  nvi_sbas_area_node_type                          cgps_sbas_waas_area_node3;
  
  nvi_sbas_area_node_type                          cgps_sbas_waas_area_node4;
  
  nvi_sbas_area_node_type                          cgps_sbas_waas_area_node5;
  
  nvi_sbas_area_node_type                          cgps_sbas_waas_area_node6;
  
  nvi_sbas_area_node_type                          cgps_sbas_egnos_area_node1;
  
  nvi_sbas_area_node_type                          cgps_sbas_egnos_area_node2;
  
  nvi_sbas_area_node_type                          cgps_sbas_egnos_area_node3;
  
  nvi_sbas_area_node_type                          cgps_sbas_egnos_area_node4;
  
  nvi_sbas_area_node_type                          cgps_sbas_egnos_area_node5;
  
  nvi_sbas_area_node_type                          cgps_sbas_egnos_area_node6;
  
  nvi_sbas_area_node_type                          cgps_sbas_msas_area_node1;
  
  nvi_sbas_area_node_type                          cgps_sbas_msas_area_node2;
  
  nvi_sbas_area_node_type                          cgps_sbas_msas_area_node3;
  
  nvi_sbas_area_node_type                          cgps_sbas_msas_area_node4;
  
  nvi_sbas_area_node_type                          cgps_sbas_msas_area_node5;
  
  nvi_sbas_area_node_type                          cgps_sbas_msas_area_node6;
  
  nvi_sbas_area_node_type                          cgps_sbas_gagan_area_node1;
  
  nvi_sbas_area_node_type                          cgps_sbas_gagan_area_node2;
  
  nvi_sbas_area_node_type                          cgps_sbas_gagan_area_node3;
  
  nvi_sbas_area_node_type                          cgps_sbas_gagan_area_node4;
  
  nvi_sbas_area_node_type                          cgps_sbas_gagan_area_node5;
  
  nvi_sbas_area_node_type                          cgps_sbas_gagan_area_node6;
  
  nvi_boolean_type                                 iwlan_dpd_enabled;
  
  nvi_uint32_type                                  iwlan_dpd_time_secs;
  
  nvi_enum_type                                    bt_soc_refclock_type;
  
  nvi_enum_type                                    bt_soc_clk_sharing_type;
  
  nvi_enum_type                                    bt_soc_inband_sleep;
  
  nvi_boolean_type                                 bt_soc_logging_enabled;
  
  nvi_enum_type                                    bt_soc_pm_mode;
  
  nvi_uint32_type                                  tcp_default_round_trip_time;
  
  nvi_int16_type                                   gps1_gps_rfic_im2cal_im2dac_i_channel;
  
  nvi_int16_type                                   gps1_gps_rfic_im2cal_im2dac_q_channel;
  
  nvi_bc0_hdr_reva_tx_predistort_type              bc0_hdr_reva_tx_predistort;
  
  nvi_bc1_hdr_reva_tx_predistort_type              bc1_hdr_reva_tx_predistort;
  
  nvi_bc3_hdr_reva_tx_predistort_type              bc3_hdr_reva_tx_predistort;
  
  nvi_bc4_hdr_reva_tx_predistort_type              bc4_hdr_reva_tx_predistort;
  
  nvi_bc6_hdr_reva_tx_predistort_type              bc6_hdr_reva_tx_predistort;
  
  nvi_bc5_hdr_reva_tx_predistort_type              bc5_hdr_reva_tx_predistort;
  
  nvi_bc10_hdr_reva_tx_predistort_type             bc10_hdr_reva_tx_predistort;
  
  nvi_bc11_hdr_reva_tx_predistort_type             bc11_hdr_reva_tx_predistort;
  
  nvi_bc14_hdr_reva_tx_predistort_type             bc14_hdr_reva_tx_predistort;
  
  nvi_bc15_hdr_reva_tx_predistort_type             bc15_hdr_reva_tx_predistort;
  
  nvi_bcx_hdr_reva_tx_predistort_type              bcx_hdr_reva_tx_predistort;
  
  nvi_hdrmrlparda_param_type                       hdrmrlparda_param;
  
  nvi_boolean_type                                 mgrf_supported;
  
  nvi_int16_type                                   wcdma_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   wcdma_rxf_mis_comp_b_coeff;
  
  nvi_int16_type                                   c1_wcdma_2100_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   c1_wcdma_2100_rxf_mis_comp_b_coeff;
  
  nvi_int16_type                                   wcdma_1900_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   wcdma_1900_rxf_mis_comp_b_coeff;
  
  nvi_int16_type                                   c1_wcdma_1900_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   c1_wcdma_1900_rxf_mis_comp_b_coeff;
  
  nvi_int16_type                                   wcdma_bc4_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   wcdma_bc4_rxf_mis_comp_b_coeff;
  
  nvi_int16_type                                   c1_wcdma_bc4_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   c1_wcdma_bc4_rxf_mis_comp_b_coeff;
  
  nvi_int16_type                                   wcdma_800_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   wcdma_800_rxf_mis_comp_b_coeff;
  
  nvi_int16_type                                   c1_wcdma_800_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   c1_wcdma_800_rxf_mis_comp_b_coeff;
  
  nvi_uint32_type                                  wcdma_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  wcdma_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  wcdma_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  wcdma_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  wcdma_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  wcdma_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  wcdma_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  wcdma_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  wcdma_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  wcdma_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  wcdma_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  wcdma_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  wcdma_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  wcdma_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  wcdma_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  wcdma_rxf_ici_q_coef14_15;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_2100_rxf_ici_q_coef14_15;
  
  nvi_uint8_type                                   wcdma_rxf_ici_iq_trunc;
  
  nvi_uint8_type                                   c1_wcdma_2100_rxf_ici_iq_trunc;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  wcdma_1900_rxf_ici_q_coef14_15;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_1900_rxf_ici_q_coef14_15;
  
  nvi_uint8_type                                   wcdma_1900_rxf_ici_iq_trunc;
  
  nvi_uint8_type                                   c1_wcdma_1900_rxf_ici_iq_trunc;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  wcdma_bc4_rxf_ici_q_coef14_15;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_bc4_rxf_ici_q_coef14_15;
  
  nvi_uint8_type                                   wcdma_bc4_rxf_ici_iq_trunc;
  
  nvi_uint8_type                                   c1_wcdma_bc4_rxf_ici_iq_trunc;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  wcdma_800_rxf_ici_q_coef14_15;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_800_rxf_ici_q_coef14_15;
  
  nvi_uint8_type                                   wcdma_800_rxf_ici_iq_trunc;
  
  nvi_uint8_type                                   c1_wcdma_800_rxf_ici_iq_trunc;
  
  nvi_wcdma_2100_hs_switchpoints_shift_type        wcdma_2100_hs_switchpoints_shift;
  
  nvi_wcdma_1900_hs_switchpoints_shift_type        wcdma_1900_hs_switchpoints_shift;
  
  nvi_wcdma_1800_hs_switchpoints_shift_type        wcdma_1800_hs_switchpoints_shift;
  
  nvi_wcdma_900_hs_switchpoints_shift_type         wcdma_900_hs_switchpoints_shift;
  
  nvi_wcdma_800_hs_switchpoints_shift_type         wcdma_800_hs_switchpoints_shift;
  
  nvi_wcdma_bc4_hs_switchpoints_shift_type         wcdma_bc4_hs_switchpoints_shift;
  
  nvi_int16_type                                   bcx_block_1_gps1_rf_delay;
  
  nvi_uint8_type                                   bcx_block_1_rf_tune_reserved;
  
  nvi_bcx_block_1_tx_lim_vs_temp_type              bcx_block_1_tx_lim_vs_temp;
  
  nvi_tx_linearizer_type                           bcx_block_1_tx_lin_master0;
  
  nvi_tx_linearizer_type                           bcx_block_1_tx_lin_master1;
  
  nvi_tx_linearizer_type                           bcx_block_1_tx_lin_master2;
  
  nvi_tx_linearizer_type                           bcx_block_1_tx_lin_master3;
  
  nvi_tx_comp_type                                 bcx_block_1_tx_comp0;
  
  nvi_tx_comp_type                                 bcx_block_1_tx_comp1;
  
  nvi_tx_comp_type                                 bcx_block_1_tx_comp2;
  
  nvi_tx_comp_type                                 bcx_block_1_tx_comp3;
  
  nvi_bcx_block_1_tx_lim_vs_freq_type              bcx_block_1_tx_lim_vs_freq;
  
  nvi_uint8_type                                   bcx_block_1_pa_r1_rise;
  
  nvi_uint8_type                                   bcx_block_1_pa_r1_fall;
  
  nvi_uint8_type                                   bcx_block_1_pa_r2_rise;
  
  nvi_uint8_type                                   bcx_block_1_pa_r2_fall;
  
  nvi_uint8_type                                   bcx_block_1_pa_r3_rise;
  
  nvi_uint8_type                                   bcx_block_1_pa_r3_fall;
  
  nvi_uint8_type                                   bcx_block_1_hdet_off;
  
  nvi_uint8_type                                   bcx_block_1_hdet_spn;
  
  nvi_bcx_block_1_exp_hdet_vs_agc_type             bcx_block_1_exp_hdet_vs_agc;
  
  nvi_uint32_type                                  bcx_block_1_enc_btf;
  
  nvi_bcx_block_1_vco_coarse_tune_table_type       bcx_block_1_vco_coarse_tune_table;
  
  nvi_bcx_block_1_p1_rise_fall_off_type            bcx_block_1_p1_rise_fall_off;
  
  nvi_c0_bcx_block_1_tx_cal_chan_type              c0_bcx_block_1_tx_cal_chan;
  
  nvi_c0_bcx_block_1_rx_cal_chan_type              c0_bcx_block_1_rx_cal_chan;
  
  nvi_c0_bcx_block_1_lna_1_offset_vs_freq_type     c0_bcx_block_1_lna_1_offset_vs_freq;
  
  nvi_c0_bcx_block_1_lna_2_offset_vs_freq_type     c0_bcx_block_1_lna_2_offset_vs_freq;
  
  nvi_c0_bcx_block_1_lna_3_offset_vs_freq_type     c0_bcx_block_1_lna_3_offset_vs_freq;
  
  nvi_c0_bcx_block_1_lna_4_offset_vs_freq_type     c0_bcx_block_1_lna_4_offset_vs_freq;
  
  nvi_int16_type                                   c0_bcx_block_1_lna_1_offset;
  
  nvi_int16_type                                   c0_bcx_block_1_lna_2_offset;
  
  nvi_int16_type                                   c0_bcx_block_1_lna_3_offset;
  
  nvi_int16_type                                   c0_bcx_block_1_lna_4_offset;
  
  nvi_uint8_type                                   c0_bcx_block_1_im2_i_value;
  
  nvi_uint8_type                                   c0_bcx_block_1_im2_q_value;
  
  nvi_int16_type                                   c0_bcx_block_1_vga_gain_offset;
  
  nvi_c0_bcx_block_1_vga_gain_offset_vs_freq_type  c0_bcx_block_1_vga_gain_offset_vs_freq;
  
  nvi_uint8_type                                   c0_bcx_block_1_im2_transconductor_value;
  
  nvi_int8_type                                    c0_bcx_block_1_lna_1_rise;
  
  nvi_int8_type                                    c0_bcx_block_1_lna_1_fall;
  
  nvi_int8_type                                    c0_bcx_block_1_lna_2_rise;
  
  nvi_int8_type                                    c0_bcx_block_1_lna_2_fall;
  
  nvi_int8_type                                    c0_bcx_block_1_lna_3_rise;
  
  nvi_int8_type                                    c0_bcx_block_1_lna_3_fall;
  
  nvi_int8_type                                    c0_bcx_block_1_lna_4_rise;
  
  nvi_int8_type                                    c0_bcx_block_1_lna_4_fall;
  
  nvi_uint8_type                                   c0_bcx_block_1_im_level1;
  
  nvi_uint8_type                                   c0_bcx_block_1_im_level2;
  
  nvi_uint8_type                                   c0_bcx_block_1_im_level3;
  
  nvi_uint8_type                                   c0_bcx_block_1_im_level4;
  
  nvi_c1_bcx_block_1_tx_cal_chan_type              c1_bcx_block_1_tx_cal_chan;
  
  nvi_c1_bcx_block_1_rx_cal_chan_type              c1_bcx_block_1_rx_cal_chan;
  
  nvi_c1_bcx_block_1_lna_1_offset_vs_freq_type     c1_bcx_block_1_lna_1_offset_vs_freq;
  
  nvi_c1_bcx_block_1_lna_2_offset_vs_freq_type     c1_bcx_block_1_lna_2_offset_vs_freq;
  
  nvi_c1_bcx_block_1_lna_3_offset_vs_freq_type     c1_bcx_block_1_lna_3_offset_vs_freq;
  
  nvi_c1_bcx_block_1_lna_4_offset_vs_freq_type     c1_bcx_block_1_lna_4_offset_vs_freq;
  
  nvi_int16_type                                   c1_bcx_block_1_lna_1_offset;
  
  nvi_int16_type                                   c1_bcx_block_1_lna_2_offset;
  
  nvi_int16_type                                   c1_bcx_block_1_lna_3_offset;
  
  nvi_int16_type                                   c1_bcx_block_1_lna_4_offset;
  
  nvi_uint8_type                                   c1_bcx_block_1_im2_i_value;
  
  nvi_uint8_type                                   c1_bcx_block_1_im2_q_value;
  
  nvi_int16_type                                   c1_bcx_block_1_vga_gain_offset;
  
  nvi_c1_bcx_block_1_vga_gain_offset_vs_freq_type  c1_bcx_block_1_vga_gain_offset_vs_freq;
  
  nvi_uint8_type                                   c1_bcx_block_1_im2_transconductor_value;
  
  nvi_int8_type                                    c1_bcx_block_1_lna_1_rise;
  
  nvi_int8_type                                    c1_bcx_block_1_lna_1_fall;
  
  nvi_int8_type                                    c1_bcx_block_1_lna_2_rise;
  
  nvi_int8_type                                    c1_bcx_block_1_lna_2_fall;
  
  nvi_int8_type                                    c1_bcx_block_1_lna_3_rise;
  
  nvi_int8_type                                    c1_bcx_block_1_lna_3_fall;
  
  nvi_int8_type                                    c1_bcx_block_1_lna_4_rise;
  
  nvi_int8_type                                    c1_bcx_block_1_lna_4_fall;
  
  nvi_uint8_type                                   c1_bcx_block_1_im_level1;
  
  nvi_uint8_type                                   c1_bcx_block_1_im_level2;
  
  nvi_uint8_type                                   c1_bcx_block_1_im_level3;
  
  nvi_uint8_type                                   c1_bcx_block_1_im_level4;
  
  nvi_bcx_block_1_p2_rise_fall_off_type            bcx_block_1_p2_rise_fall_off;
  
  nvi_bcx_block_1_p3_rise_fall_off_type            bcx_block_1_p3_rise_fall_off;
  
  nvi_bcx_block_1_hdr_p2_rise_fall_off_type        bcx_block_1_hdr_p2_rise_fall_off;
  
  nvi_bcx_block_1_hdr_p3_rise_fall_off_type        bcx_block_1_hdr_p3_rise_fall_off;
  
  nvi_uint8_type                                   bcx_block_vco_coarse_tune_2;
  
  nvi_c1_bcx_block_vco_coarse_tune_table_type      c1_bcx_block_vco_coarse_tune_table;
  
  nvi_c0_bcx_block_rx_cal_chan_lru_type            c0_bcx_block_rx_cal_chan_lru;
  
  nvi_c1_bcx_block_rx_cal_chan_lru_type            c1_bcx_block_rx_cal_chan_lru;
  
  nvi_bcx_block_hdr_p1_rise_fall_off_type          bcx_block_hdr_p1_rise_fall_off;
  
  nvi_uint16_type                                  bcx_block_pa_dvs_voltage;
  
  nvi_bcx_block_vco_tune_2_type                    bcx_block_vco_tune_2;
  
  nvi_rf_rx_im2_cal                                c0_bcx_block_im2_lpm_1;
  
  nvi_rf_rx_im2_cal                                c0_bcx_block_im2_lpm_2;
  
  nvi_c0_bcx_block_intelliceiver_cal_type          c0_bcx_block_intelliceiver_cal;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bcx_block_lna_switchpoints_lpm_1;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bcx_block_lna_switchpoints_lpm_2;
  
  nvi_bcx_block_ant_quality_type                   bcx_block_ant_quality;
  
  nvi_c0_bcx_block_intelliceiver_det_thresh_type   c0_bcx_block_intelliceiver_det_thresh;
  
  nvi_bcx_block_tx_pdm_lin_0_type                  bcx_block_tx_pdm_lin_0;
  
  nvi_bcx_block_tx_pdm_lin_1_type                  bcx_block_tx_pdm_lin_1;
  
  nvi_bcx_block_tx_pdm_lin_2_type                  bcx_block_tx_pdm_lin_2;
  
  nvi_bcx_block_tx_pdm_lin_3_type                  bcx_block_tx_pdm_lin_3;
  
  nvi_bcx_block_tx_pdm_0_type                      bcx_block_tx_pdm_0;
  
  nvi_bcx_block_tx_pdm_1_type                      bcx_block_tx_pdm_1;
  
  nvi_bcx_block_tx_pdm_2_type                      bcx_block_tx_pdm_2;
  
  nvi_bcx_block_tx_pdm_3_type                      bcx_block_tx_pdm_3;
  
  nvi_bcx_block_tx_lin_0_type                      bcx_block_tx_lin_0;
  
  nvi_bcx_block_tx_lin_1_type                      bcx_block_tx_lin_1;
  
  nvi_bcx_block_tx_lin_2_type                      bcx_block_tx_lin_2;
  
  nvi_bcx_block_tx_lin_3_type                      bcx_block_tx_lin_3;
  
  nvi_uint8_type                                   bcx_block_pa_r_map;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bcx_block_tx_pwr_comp0;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bcx_block_tx_pwr_comp1;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bcx_block_tx_pwr_comp2;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bcx_block_tx_pwr_comp3;
  
  nvi_lo_cal_type                                  c0_bcx_block_lo_cal;
  
  nvi_im2_cal_type                                 c0_bcx_block_im2_cal;
  
  nvi_bcx_block_exp_hdet_vs_agc_v2_type            bcx_block_exp_hdet_vs_agc_v2;
  
  nvi_uint16_type                                  bcx_block_hdet_off_v2;
  
  nvi_uint16_type                                  bcx_block_hdet_spn_v2;
  
  nvi_uint8_type                                   bcx_block_1_vco_coarse_tune_2;
  
  nvi_c1_bcx_block_1_vco_coarse_tune_table_type    c1_bcx_block_1_vco_coarse_tune_table;
  
  nvi_c0_bcx_block_1_rx_cal_chan_lru_type          c0_bcx_block_1_rx_cal_chan_lru;
  
  nvi_c1_bcx_block_1_rx_cal_chan_lru_type          c1_bcx_block_1_rx_cal_chan_lru;
  
  nvi_bcx_block_1_hdr_p1_rise_fall_off_type        bcx_block_1_hdr_p1_rise_fall_off;
  
  nvi_uint16_type                                  bcx_block_1_pa_dvs_voltage;
  
  nvi_bcx_block_1_vco_tune_2_type                  bcx_block_1_vco_tune_2;
  
  nvi_rf_rx_im2_cal                                c0_bcx_block_1_im2_lpm_1;
  
  nvi_rf_rx_im2_cal                                c0_bcx_block_1_im2_lpm_2;
  
  nvi_c0_bcx_block_1_intelliceiver_cal_type        c0_bcx_block_1_intelliceiver_cal;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bcx_block_1_lna_switchpoints_lpm_1;
  
  nvi_rf_rx_agc_lpm_switchpoints                   c0_bcx_block_1_lna_switchpoints_lpm_2;
  
  nvi_bcx_block_1_ant_quality_type                 bcx_block_1_ant_quality;
  
  nvi_c0_bcx_block_1_intelliceiver_det_thresh_type c0_bcx_block_1_intelliceiver_det_thresh;
  
  nvi_bcx_block_1_tx_pdm_lin_0_type                bcx_block_1_tx_pdm_lin_0;
  
  nvi_bcx_block_1_tx_pdm_lin_1_type                bcx_block_1_tx_pdm_lin_1;
  
  nvi_bcx_block_1_tx_pdm_lin_2_type                bcx_block_1_tx_pdm_lin_2;
  
  nvi_bcx_block_1_tx_pdm_lin_3_type                bcx_block_1_tx_pdm_lin_3;
  
  nvi_bcx_block_1_tx_pdm_0_type                    bcx_block_1_tx_pdm_0;
  
  nvi_bcx_block_1_tx_pdm_1_type                    bcx_block_1_tx_pdm_1;
  
  nvi_bcx_block_1_tx_pdm_2_type                    bcx_block_1_tx_pdm_2;
  
  nvi_bcx_block_1_tx_pdm_3_type                    bcx_block_1_tx_pdm_3;
  
  nvi_bcx_block_1_tx_lin_0_type                    bcx_block_1_tx_lin_0;
  
  nvi_bcx_block_1_tx_lin_1_type                    bcx_block_1_tx_lin_1;
  
  nvi_bcx_block_1_tx_lin_2_type                    bcx_block_1_tx_lin_2;
  
  nvi_bcx_block_1_tx_lin_3_type                    bcx_block_1_tx_lin_3;
  
  nvi_uint8_type                                   bcx_block_1_pa_r_map;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bcx_block_1_tx_pwr_comp0;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bcx_block_1_tx_pwr_comp1;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bcx_block_1_tx_pwr_comp2;
  
  nvi_tx_pwr_temp_freq_based_comp_type             bcx_block_1_tx_pwr_comp3;
  
  nvi_lo_cal_type                                  c0_bcx_block_1_lo_cal;
  
  nvi_im2_cal_type                                 c0_bcx_block_1_im2_cal;
  
  nvi_bcx_block_1_exp_hdet_vs_agc_v2_type          bcx_block_1_exp_hdet_vs_agc_v2;
  
  nvi_uint16_type                                  bcx_block_1_hdet_off_v2;
  
  nvi_uint16_type                                  bcx_block_1_hdet_spn_v2;
  
  nvi_uint8_type                                   bcx_block_band_class;
  
  nvi_uint8_type                                   bcx_block_1_band_class;
  
  nvi_uint32_type                                  bcx_block_subclass_mask;
  
  nvi_uint32_type                                  bcx_block_1_subclass_mask;
  
  nvi_boolean_type                                 uim_par_err_workaround;
  
  nvi_uint16_type                                  gps1_er_curve_fit_interval;
  
  nvi_uint8_type                                   cgps_er_enable;
  
  nvi_int16_type                                   cgps_er_start_time;
  
  nvi_uint16_type                                  cgps_er_slot_interval;
  
  nvi_uint8_type                                   cgps_er_slot_period;
  
  nvi_int32_type                                   uw_fmc_nat_refresh_timer;
  
  nvi_uint32_type                                  bc0_subclass_mask;
  
  nvi_uint32_type                                  bc1_subclass_mask;
  
  nvi_uint32_type                                  bc2_subclass_mask;
  
  nvi_uint32_type                                  bc3_subclass_mask;
  
  nvi_uint32_type                                  bc4_subclass_mask;
  
  nvi_uint32_type                                  bc5_subclass_mask;
  
  nvi_uint32_type                                  bc6_subclass_mask;
  
  nvi_uint32_type                                  bc7_subclass_mask;
  
  nvi_uint32_type                                  bc8_subclass_mask;
  
  nvi_uint32_type                                  bc9_subclass_mask;
  
  nvi_uint32_type                                  bc10_subclass_mask;
  
  nvi_uint32_type                                  bc11_subclass_mask;
  
  nvi_uint32_type                                  bc12_subclass_mask;
  
  nvi_uint32_type                                  bc13_subclass_mask;
  
  nvi_uint32_type                                  bc14_subclass_mask;
  
  nvi_uint32_type                                  bc15_subclass_mask;
  
  nvi_boolean_type                                 hs_usb_use_pmic_otg_comparators;
  
  nvi_uint8_type                                   rfr_multi_chipset_1_bb_filter;
  
  nvi_uint8_type                                   c1_rfr_multi_chipset_1_bb_filter;
  
  nvi_uint8_type                                   rfr_multi_chipset_1_iq_line_resistor;
  
  nvi_uint8_type                                   hs_usb_number_of_sdcc_luns;
  
  nvi_thermal_monitor_thresholds_type              thermal_monitor_thresholds;
  
  nvi_thermal_monitor_timers_type                  thermal_monitor_timers;
  
  nvi_uint16_type                                  delta_tx_power;
  
  nvi_thermal_current_monitor_config_type          thermal_current_monitor_config;
  
  nvi_thermal_monitor_max_temp_type                thermal_monitor_max_temp;
  
  nvi_eap_shared_secret_type                       ppp_eap_shared_secret;
  
  nvi_ppp_eap_user_id_type                         ppp_eap_user_id;
  
  nvi_ppp_vsncp_config_data_type                   ppp_vsncp_config_data;
  
  nvi_boolean_type                                 ehrpd_enabled;
  
  nvi_wlan_atheros_specific_cfg                    wlan_atheros_specific_cfg;
  
  nvi_enum_type                                    gan_mode_preference;
  
  nvi_boolean_type                                 iwlan_enforce_peer_cert_auth;
  
  nvi_uint8_type                                   lpm_persistence;
  
  nvi_boolean_type                                 csim_support;
  
  nvi_uint16_type                                  qmi_roam_pref;
  
  nvi_uint16_type                                  uw_fmc_v4_mtu;
  
  nvi_int16_type                                   aagps_global_altitude;
  
  nvi_uint16_type                                  aagps_global_alt_unc;
  
  nvi_wwwan_config_type                            wwwan_config;
  
  nvi_boolean_type                                 hs_usb_host_mode_enabled;
  
  nvi_uint16_type                                  wlan_cpu_flow_control_cfg;
  
  nvi_adsp_dyn_clock_voltage_type                  adsp_dyn_clock_voltage;
  
  nvi_mtpdp_app_type                               mtpdp_app;
  
  nvi_uint32_type                                  aagps_acquisition_timer;
  
  nvi_uint32_type                                  cgps_minimum_gps_week_number;
  
  nvi_current_monitor_thresholds_type              current_monitor_thresholds;
  
  nvi_uint32_type                                  thermal_current_monitor_cfg_mitigation;
  
  nvi_uint8_type                                   cgps_qwip_loc_engine_config;
  
  nvi_cgps_qwip_server_params_type                 cgps_qwip_server_config;
  
  nvi_cgps_qwip_tile_params_type                   cgps_qwip_tile_config;
  
  nvi_uint32_type                                  cgps_qwip_reserved_1;
  
  nvi_uint32_type                                  cgps_qwip_reserved_2;
  
  nvi_uint8_type                                   cgps_xtra_t_control;
  
  nvi_uint32_type                                  gps_default_operating_mode;
  
  nvi_uint32_type                                  gps_default_tbf;
  
  nvi_intelliceiver_rc_tune_cal_type               bc0_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc1_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc2_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc3_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc4_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc5_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc6_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc7_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc8_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc9_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc10_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc11_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc12_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc13_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc14_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bc15_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bcx_block_intelliceiver_rc_tune_cal;
  
  nvi_intelliceiver_rc_tune_cal_type               bcx_block_1_intelliceiver_rc_tune_cal;
  
  nvi_uint8_type                                   adsp_pwrc_disable;
  
  nvi_int16_type                                   gsm_850_linear_envdc_cal_val;
  
  nvi_int16_type                                   gsm_900_linear_envdc_cal_val;
  
  nvi_int16_type                                   gsm_1800_linear_envdc_cal_val;
  
  nvi_int16_type                                   gsm_1900_linear_envdc_cal_val;
  
  nvi_boolean_type                                 hs_usb_reconnect_on_reset_during_suspend;
  
  nvi_mf_rssi_cal_vs_freq_6_type                   mf_rssi_cal_vs_freq_6;
  
  nvi_mf_chan_support_l_band_type                  mf_chan_support_l_band;
  
  nvi_mf_rssi_cal_vs_l_band_freq_0_type            mf_rssi_cal_vs_l_band_freq_0;
  
  nvi_mf_rssi_cal_vs_l_band_freq_1_type            mf_rssi_cal_vs_l_band_freq_1;
  
  nvi_mf_rssi_cal_vs_l_band_freq_2_type            mf_rssi_cal_vs_l_band_freq_2;
  
  nvi_mf_rssi_cal_vs_l_band_freq_3_type            mf_rssi_cal_vs_l_band_freq_3;
  
  nvi_mf_rssi_cal_vs_l_band_freq_4_type            mf_rssi_cal_vs_l_band_freq_4;
  
  nvi_mf_rssi_cal_vs_l_band_freq_5_type            mf_rssi_cal_vs_l_band_freq_5;
  
  nvi_mf_rssi_cal_vs_l_band_freq_6_type            mf_rssi_cal_vs_l_band_freq_6;
  
  nvi_mf_chan_support_vhf_type                     mf_chan_support_vhf;
  
  nvi_mf_rssi_cal_vs_vhf_freq_0_type               mf_rssi_cal_vs_vhf_freq_0;
  
  nvi_mf_rssi_cal_vs_vhf_freq_1_type               mf_rssi_cal_vs_vhf_freq_1;
  
  nvi_mf_rssi_cal_vs_vhf_freq_2_type               mf_rssi_cal_vs_vhf_freq_2;
  
  nvi_mf_rssi_cal_vs_vhf_freq_3_type               mf_rssi_cal_vs_vhf_freq_3;
  
  nvi_mf_rssi_cal_vs_vhf_freq_4_type               mf_rssi_cal_vs_vhf_freq_4;
  
  nvi_mf_rssi_cal_vs_vhf_freq_5_type               mf_rssi_cal_vs_vhf_freq_5;
  
  nvi_mf_rssi_cal_vs_vhf_freq_6_type               mf_rssi_cal_vs_vhf_freq_6;
  
  nvi_uint16_type                                  mf_platform_config;
  
  nvi_mbp_rf_isdbt_cal_freq_type                   mbp_rf_isdbt_cal_freq;
  
  nvi_mbp_rf_isdbt_gs0_cal_type                    mbp_rf_isdbt_gs0_cal;
  
  nvi_mbp_rf_isdbt_gs1_cal_type                    mbp_rf_isdbt_gs1_cal;
  
  nvi_mbp_rf_isdbt_gs2_cal_type                    mbp_rf_isdbt_gs2_cal;
  
  nvi_mbp_rf_isdbt_gs3_cal_type                    mbp_rf_isdbt_gs3_cal;
  
  nvi_mbp_rf_isdbt_gs4_cal_type                    mbp_rf_isdbt_gs4_cal;
  
  nvi_mbp_rf_isdbt_gs5_cal_type                    mbp_rf_isdbt_gs5_cal;
  
  nvi_mbp_rf_isdbt_gs6_cal_type                    mbp_rf_isdbt_gs6_cal;
  
  nvi_mbp_rf_dvbh_gs6_cal_type                     mbp_rf_dvbh_gs6_cal;
  
  nvi_uint16_type                                  rtp_manager_max_dejitter_delay;
  
  nvi_boolean_type                                 hs_usb_disable_sleep_voting;
  
  nvi_boolean_type                                 wb_cal_passed;
  
  nvi_boolean_type                                 all_outliers;
  
  nvi_uint32_type                                  rg_adj_ratio;
  
  nvi_uint32_type                                  bg_adj_ratio;
  
  nvi_uint32_type                                  rg_high_tol;
  
  nvi_uint32_type                                  rg_low_tol;
  
  nvi_uint32_type                                  bg_high_tol;
  
  nvi_uint32_type                                  bg_low_tol;
  
  nvi_uim_iccid_tpl_type                           uim_iccid_tpl;
  
  nvi_ehrpd_milenage_op_type                       ehrpd_milenage_op;
  
  nvi_ehrpd_imsi_type                              ehrpd_imsi;
  
  nvi_uint32_type                                  cgps_me_shallow_integ_stage1;
  
  nvi_uint32_type                                  cgps_me_shallow_integ_stage2;
  
  nvi_uint32_type                                  cgps_me_shallow_integ_stage3;
  
  nvi_gsm_850_linear_pa_r0_temp_comp_type          gsm_850_linear_pa_r0_temp_comp;
  
  nvi_gsm_850_linear_pa_r1_temp_comp_type          gsm_850_linear_pa_r1_temp_comp;
  
  nvi_gsm_850_linear_pa_r2_temp_comp_type          gsm_850_linear_pa_r2_temp_comp;
  
  nvi_gsm_850_linear_pa_r3_temp_comp_type          gsm_850_linear_pa_r3_temp_comp;
  
  nvi_gsm_900_linear_pa_r0_temp_comp_type          gsm_900_linear_pa_r0_temp_comp;
  
  nvi_gsm_900_linear_pa_r1_temp_comp_type          gsm_900_linear_pa_r1_temp_comp;
  
  nvi_gsm_900_linear_pa_r2_temp_comp_type          gsm_900_linear_pa_r2_temp_comp;
  
  nvi_gsm_900_linear_pa_r3_temp_comp_type          gsm_900_linear_pa_r3_temp_comp;
  
  nvi_gsm_1800_linear_pa_r0_temp_comp_type         gsm_1800_linear_pa_r0_temp_comp;
  
  nvi_gsm_1800_linear_pa_r1_temp_comp_type         gsm_1800_linear_pa_r1_temp_comp;
  
  nvi_gsm_1800_linear_pa_r2_temp_comp_type         gsm_1800_linear_pa_r2_temp_comp;
  
  nvi_gsm_1800_linear_pa_r3_temp_comp_type         gsm_1800_linear_pa_r3_temp_comp;
  
  nvi_gsm_1900_linear_pa_r0_temp_comp_type         gsm_1900_linear_pa_r0_temp_comp;
  
  nvi_gsm_1900_linear_pa_r1_temp_comp_type         gsm_1900_linear_pa_r1_temp_comp;
  
  nvi_gsm_1900_linear_pa_r2_temp_comp_type         gsm_1900_linear_pa_r2_temp_comp;
  
  nvi_gsm_1900_linear_pa_r3_temp_comp_type         gsm_1900_linear_pa_r3_temp_comp;
  
  nvi_int16_type                                   gsm_850_linear_pa_r0_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_850_linear_pa_r0_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_850_linear_pa_r1_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_850_linear_pa_r1_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_850_linear_pa_r2_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_850_linear_pa_r2_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_850_linear_pa_r3_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_850_linear_pa_r3_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_900_linear_pa_r0_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_900_linear_pa_r0_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_900_linear_pa_r1_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_900_linear_pa_r1_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_900_linear_pa_r2_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_900_linear_pa_r2_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_900_linear_pa_r3_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_900_linear_pa_r3_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_1800_linear_pa_r0_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_1800_linear_pa_r0_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_1800_linear_pa_r1_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_1800_linear_pa_r1_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_1800_linear_pa_r2_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_1800_linear_pa_r2_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_1800_linear_pa_r3_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_1800_linear_pa_r3_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_1900_linear_pa_r0_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_1900_linear_pa_r0_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_1900_linear_pa_r1_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_1900_linear_pa_r1_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_1900_linear_pa_r2_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_1900_linear_pa_r2_vbatt_hi_comp;
  
  nvi_int16_type                                   gsm_1900_linear_pa_r3_vbatt_lo_comp;
  
  nvi_int16_type                                   gsm_1900_linear_pa_r3_vbatt_hi_comp;
  
  nvi_int16_type                                   wcdma_1800_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   wcdma_1800_rxf_mis_comp_b_coeff;
  
  nvi_int16_type                                   c1_wcdma_1800_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   c1_wcdma_1800_rxf_mis_comp_b_coeff;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  wcdma_1800_rxf_ici_q_coef14_15;
  
  nvi_uint8_type                                   wcdma_1800_rxf_ici_iq_trunc;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_1800_rxf_ici_q_coef14_15;
  
  nvi_uint8_type                                   c1_wcdma_1800_rxf_ici_iq_trunc;
  
  nvi_wlan_uuid_type                               wlan_uuid;
  
  nvi_hdr_is683a_scan_list_type                    hdr_is683a_scan_list;
  
  nvi_uint16_type                                  cgps_vel_unc_mask;
  
  nvi_int16_type                                   wcdma_900_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   wcdma_900_rxf_mis_comp_b_coeff;
  
  nvi_int16_type                                   c1_wcdma_900_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   c1_wcdma_900_rxf_mis_comp_b_coeff;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  wcdma_900_rxf_ici_q_coef14_15;
  
  nvi_uint8_type                                   wcdma_900_rxf_ici_iq_trunc;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_900_rxf_ici_q_coef14_15;
  
  nvi_uint8_type                                   c1_wcdma_900_rxf_ici_iq_trunc;
  
  nvi_cgps_qwip_hepe_params_type                   cgps_qwip_hepe_params;
  
  nvi_uint8_type                                   cache_wt;
  
  nvi_boolean_type                                 qdj_dequeue_log_enabled;
  
  nvi_uint16_type                                  gsm_850_linear_tx_gain_param;
  
  nvi_uint16_type                                  gsm_1800_linear_tx_gain_param;
  
  nvi_uint16_type                                  gsm_1900_linear_tx_gain_param;
  
  nvi_uint16_type                                  edge_850_linear_tx_gain_param;
  
  nvi_uint16_type                                  edge_1800_linear_tx_gain_param;
  
  nvi_uint16_type                                  edge_1900_linear_tx_gain_param;
  
  nvi_boolean_type                                 pdp_deactivate_before_detach_supported;
  
  nvi_uint32_type                                  sta_test_mode;
  
  nvi_mipv6_sec_ha_type                            mipv6_sec_ha;
  
  nvi_mipv6_hoa_prefix_len_type                    mipv6_hoa_prefix_len;
  
  nvi_uint8_type                                   wcdma_qice_ctrl;
  
  nvi_uint8_type                                   wcdma_qice_lmmse_oride;
  
  nvi_uint32_type                                  wcdma_qice_sf16_oride;
  
  nvi_uint32_type                                  wcdma_qice_sf16_nonlinear_oride;
  
  nvi_uint8_type                                   cgps_utc_gps_time_offset;
  
  nvi_enum_type                                    bt_qsoc_nvm_mode;
  
  nvi_enum_type                                    bt_qsoc_class_type;
  
  nvi_undp_feat_configs_type                       undp_feature_configs;
  
  nvi_lte_b13_rx_cal_chan_type                     lte_b13_rx_cal_chan;
  
  nvi_int16_type                                   lte_b13_rx_delay;
  
  nvi_lte_b13_lna_range_rise_fall_type             lte_b13_lna_range_rise_fall;
  
  nvi_lte_nonbypass_bypass_timer_type              lte_b13_nonbypass_bypass_timer;
  
  nvi_lte_b13_im_level_type                        lte_b13_im_level;
  
  nvi_lte_b13_rx_gain_vs_temp_type                 lte_b13_rx_gain_vs_temp;
  
  nvi_lte_b13_rx_gain_type                         lte_b13_rx_gain;
  
  nvi_lte_b13_rx_gain_vs_freq_type                 lte_b13_rx_gain_vs_freq;
  
  nvi_lte_b13_lna_phase_ctrl_type                  lte_b13_lna_phase_ctrl;
  
  nvi_lte_im2_values_type                          lte_b13_im2_values;
  
  nvi_lte_rxf_mismatch_comp_type                   lte_b13_rxf_mismatch_comp;
  
  nvi_int32_type                                   lte_b13_enc_btf;
  
  nvi_int8_type                                    lte_b13_max_tx_power;
  
  nvi_lte_agc_pa_on_rise_fall_delay_type           lte_b13_agc_pa_on_rise_fall_delay;
  
  nvi_lte_agc_tx_on_rise_fall_delay_type           lte_b13_agc_tx_on_rise_fall_delay;
  
  nvi_lte_pa_gain_up_down_time_type                lte_b13_pa_gain_up_down_time;
  
  nvi_lte_b13_tx_rot_angle_pa_state_type           lte_b13_tx_rot_angle_pa_state;
  
  nvi_lte_b13_pa_compensate_up_down_type           lte_b13_pa_compensate_up_down;
  
  nvi_lte_b13_tx_lin_vs_temp_type                  lte_b13_tx_lin_vs_temp;
  
  nvi_lte_b13_pa_range_map_type                    lte_b13_pa_range_map;
  
  nvi_int16_type                                   lte_b13_timer_hysterisis;
  
  nvi_lte_b13_pa_rise_fall_threshold_type          lte_b13_pa_rise_fall_threshold;
  
  nvi_lte_b13_tx_cal_chan_type                     lte_b13_tx_cal_chan;
  
  nvi_lte_b13_tx_limit_vs_temp_type                lte_b13_tx_limit_vs_temp;
  
  nvi_lte_b13_mpr_based_pa_switchpoints_shift_type lte_b13_mpr_based_pa_switchpoints_shift;
  
  nvi_lte_b13_tx_mpr_backoff_type                  lte_b13_tx_mpr_backoff;
  
  nvi_lte_b13_tx_digital_gain_comp_type            lte_b13_tx_digital_gain_comp;
  
  nvi_lte_b13_tx_agc_offset_type                   lte_b13_tx_agc_offset;
  
  nvi_lte_b13_tx_lin_master_0_type                 lte_b13_tx_lin_master_0;
  
  nvi_lte_b13_tx_lin_master_1_type                 lte_b13_tx_lin_master_1;
  
  nvi_lte_b13_tx_lin_master_2_type                 lte_b13_tx_lin_master_2;
  
  nvi_lte_b13_tx_lin_master_3_type                 lte_b13_tx_lin_master_3;
  
  nvi_lte_b13_tx_gain_index_0_type                 lte_b13_tx_gain_index_0;
  
  nvi_lte_b13_tx_gain_index_1_type                 lte_b13_tx_gain_index_1;
  
  nvi_lte_b13_tx_gain_index_2_type                 lte_b13_tx_gain_index_2;
  
  nvi_lte_b13_tx_gain_index_3_type                 lte_b13_tx_gain_index_3;
  
  nvi_lte_b13_tx_comp_vs_freq_type                 lte_b13_tx_comp_vs_freq;
  
  nvi_lte_b13_exp_hdet_vs_agc_type                 lte_b13_exp_hdet_vs_agc;
  
  nvi_lte_b13_tx_limit_vs_freq_type                lte_b13_tx_limit_vs_freq;
  
  nvi_lte_hdet_off_span_type                       lte_b13_hdet_off_span;
  
  nvi_lte_b13_antsel_type                          lte_b13_antsel;
  
  nvi_lte_b13_c1_antsel_type                       lte_b13_c1_antsel;
  
  nvi_lte_c1_nonbypass_bypass_timer_type           lte_b13_c1_nonbypass_bypass_timer;
  
  nvi_lte_b13_c1_lna_range_rise_fall_type          lte_b13_c1_lna_range_rise_fall;
  
  nvi_lte_b13_c1_im_level_type                     lte_b13_c1_im_level;
  
  nvi_lte_b13_c1_rx_gain_vs_temp_type              lte_b13_c1_rx_gain_vs_temp;
  
  nvi_lte_b13_c1_lna_phase_ctrl_type               lte_b13_c1_lna_phase_ctrl;
  
  nvi_lte_b13_c1_rx_gain_type                      lte_b13_c1_rx_gain;
  
  nvi_lte_b13_c1_rx_gain_vs_freq_type              lte_b13_c1_rx_gain_vs_freq;
  
  nvi_lte_c1_im2_values_type                       lte_b13_c1_im2_values;
  
  nvi_lte_b13_c1_rx_cal_chan_type                  lte_b13_c1_rx_cal_chan;
  
  nvi_lte_nonbypass_bypass_timer_type              lte_b7_nonbypass_bypass_timer;
  
  nvi_int16_type                                   lte_b7_rx_delay;
  
  nvi_lte_b7_rx_cal_chan_type                      lte_b7_rx_cal_chan;
  
  nvi_lte_b7_lna_range_rise_fall_type              lte_b7_lna_range_rise_fall;
  
  nvi_lte_b7_im_level_type                         lte_b7_im_level;
  
  nvi_lte_b7_rx_gain_vs_temp_type                  lte_b7_rx_gain_vs_temp;
  
  nvi_lte_b7_rx_gain_type                          lte_b7_rx_gain;
  
  nvi_lte_b7_rx_gain_vs_freq_type                  lte_b7_rx_gain_vs_freq;
  
  nvi_lte_b7_lna_phase_ctrl_type                   lte_b7_lna_phase_ctrl;
  
  nvi_lte_im2_values_type                          lte_b7_im2_values;
  
  nvi_lte_rxf_mismatch_comp_type                   lte_b7_rxf_mismatch_comp;
  
  nvi_int32_type                                   lte_b7_enc_btf;
  
  nvi_int8_type                                    lte_b7_max_tx_power;
  
  nvi_lte_agc_pa_on_rise_fall_delay_type           lte_b7_agc_pa_on_rise_fall_delay;
  
  nvi_lte_agc_tx_on_rise_fall_delay_type           lte_b7_agc_tx_on_rise_fall_delay;
  
  nvi_lte_pa_gain_up_down_time_type                lte_b7_pa_gain_up_down_time;
  
  nvi_lte_b7_tx_rot_angle_pa_state_type            lte_b7_tx_rot_angle_pa_state;
  
  nvi_lte_b7_pa_compensate_up_down_type            lte_b7_pa_compensate_up_down;
  
  nvi_lte_b7_tx_lin_vs_temp_type                   lte_b7_tx_lin_vs_temp;
  
  nvi_lte_b7_pa_range_map_type                     lte_b7_pa_range_map;
  
  nvi_int16_type                                   lte_b7_timer_hysterisis;
  
  nvi_lte_b7_pa_rise_fall_threshold_type           lte_b7_pa_rise_fall_threshold;
  
  nvi_lte_b7_tx_cal_chan_type                      lte_b7_tx_cal_chan;
  
  nvi_lte_b7_tx_limit_vs_temp_type                 lte_b7_tx_limit_vs_temp;
  
  nvi_lte_b7_mpr_based_pa_switchpoints_shift_type  lte_b7_mpr_based_pa_switchpoints_shift;
  
  nvi_lte_b7_tx_mpr_backoff_type                   lte_b7_tx_mpr_backoff;
  
  nvi_lte_b7_tx_digital_gain_comp_type             lte_b7_tx_digital_gain_comp;
  
  nvi_lte_b7_tx_agc_offset_type                    lte_b7_tx_agc_offset;
  
  nvi_lte_b7_tx_lin_master_0_type                  lte_b7_tx_lin_master_0;
  
  nvi_lte_b7_tx_lin_master_1_type                  lte_b7_tx_lin_master_1;
  
  nvi_lte_b7_tx_lin_master_2_type                  lte_b7_tx_lin_master_2;
  
  nvi_lte_b7_tx_lin_master_3_type                  lte_b7_tx_lin_master_3;
  
  nvi_lte_b7_tx_gain_index_0_type                  lte_b7_tx_gain_index_0;
  
  nvi_lte_b7_tx_gain_index_1_type                  lte_b7_tx_gain_index_1;
  
  nvi_lte_b7_tx_gain_index_2_type                  lte_b7_tx_gain_index_2;
  
  nvi_lte_b7_tx_gain_index_3_type                  lte_b7_tx_gain_index_3;
  
  nvi_lte_b7_tx_comp_vs_freq_type                  lte_b7_tx_comp_vs_freq;
  
  nvi_lte_b7_exp_hdet_vs_agc_type                  lte_b7_exp_hdet_vs_agc;
  
  nvi_lte_b7_tx_limit_vs_freq_type                 lte_b7_tx_limit_vs_freq;
  
  nvi_lte_hdet_off_span_type                       lte_b7_hdet_off_span;
  
  nvi_lte_b7_antsel_type                           lte_b7_antsel;
  
  nvi_lte_b7_c1_antsel_type                        lte_b7_c1_antsel;
  
  nvi_lte_c1_nonbypass_bypass_timer_type           lte_b7_c1_nonbypass_bypass_timer;
  
  nvi_int8_type                                    lte_b7_c0_c1_delay;
  
  nvi_int8_type                                    lte_b13_c0_c1_delay;
  
  nvi_lte_b7_c1_lna_range_rise_fall_type           lte_b7_c1_lna_range_rise_fall;
  
  nvi_lte_b7_c1_im_level_type                      lte_b7_c1_im_level;
  
  nvi_lte_b7_c1_rx_gain_vs_temp_type               lte_b7_c1_rx_gain_vs_temp;
  
  nvi_lte_b7_c1_lna_phase_ctrl_type                lte_b7_c1_lna_phase_ctrl;
  
  nvi_lte_b7_c1_rx_gain_type                       lte_b7_c1_rx_gain;
  
  nvi_lte_b7_c1_rx_gain_vs_freq_type               lte_b7_c1_rx_gain_vs_freq;
  
  nvi_lte_im2_values_type                          lte_b7_c1_im2_values;
  
  nvi_lte_b7_c1_rx_cal_chan_type                   lte_b7_c1_rx_cal_chan;
  
  nvi_lte_nonbypass_bypass_timer_type              lte_b17_nonbypass_bypass_timer;
  
  nvi_int16_type                                   lte_b17_rx_delay;
  
  nvi_lte_b17_rx_cal_chan_type                     lte_b17_rx_cal_chan;
  
  nvi_lte_b17_lna_range_rise_fall_type             lte_b17_lna_range_rise_fall;
  
  nvi_lte_b17_im_level_type                        lte_b17_im_level;
  
  nvi_lte_b17_rx_gain_vs_temp_type                 lte_b17_rx_gain_vs_temp;
  
  nvi_lte_b17_rx_gain_type                         lte_b17_rx_gain;
  
  nvi_lte_b17_rx_gain_vs_freq_type                 lte_b17_rx_gain_vs_freq;
  
  nvi_lte_b17_lna_phase_ctrl_type                  lte_b17_lna_phase_ctrl;
  
  nvi_lte_im2_values_type                          lte_b17_im2_values;
  
  nvi_lte_rxf_mismatch_comp_type                   lte_b17_rxf_mismatch_comp;
  
  nvi_int16_type                                   lte_b17_enc_btf;
  
  nvi_int8_type                                    lte_b17_max_tx_power;
  
  nvi_lte_agc_pa_on_rise_fall_delay_type           lte_b17_agc_pa_on_rise_fall_delay;
  
  nvi_lte_agc_tx_on_rise_fall_delay_type           lte_b17_agc_tx_on_rise_fall_delay;
  
  nvi_lte_pa_gain_up_down_time_type                lte_b17_pa_gain_up_down_time;
  
  nvi_lte_b17_tx_rot_angle_pa_state_type           lte_b17_tx_rot_angle_pa_state;
  
  nvi_lte_b17_pa_compensate_up_down_type           lte_b17_pa_compensate_up_down;
  
  nvi_lte_b17_tx_lin_vs_temp_type                  lte_b17_tx_lin_vs_temp;
  
  nvi_lte_b17_pa_range_map_type                    lte_b17_pa_range_map;
  
  nvi_int16_type                                   lte_b17_timer_hysterisis;
  
  nvi_lte_b17_pa_rise_fall_threshold_type          lte_b17_pa_rise_fall_threshold;
  
  nvi_lte_b17_tx_cal_chan_type                     lte_b17_tx_cal_chan;
  
  nvi_lte_b17_tx_limit_vs_temp_type                lte_b17_tx_limit_vs_temp;
  
  nvi_lte_b17_tx_lin_master_0_type                 lte_b17_tx_lin_master_0;
  
  nvi_lte_b17_mpr_based_pa_switchpoints_shift_type lte_b17_mpr_based_pa_switchpoints_shift;
  
  nvi_lte_b17_tx_mpr_backoff_type                  lte_b17_tx_mpr_backoff;
  
  nvi_lte_b17_tx_digital_gain_comp_type            lte_b17_tx_digital_gain_comp;
  
  nvi_lte_b17_tx_agc_offset_type                   lte_b17_tx_agc_offset;
  
  nvi_lte_b17_tx_lin_master_1_type                 lte_b17_tx_lin_master_1;
  
  nvi_lte_b17_tx_lin_master_2_type                 lte_b17_tx_lin_master_2;
  
  nvi_lte_b17_tx_lin_master_3_type                 lte_b17_tx_lin_master_3;
  
  nvi_lte_b17_tx_gain_index_0_type                 lte_b17_tx_gain_index_0;
  
  nvi_lte_b17_tx_gain_index_1_type                 lte_b17_tx_gain_index_1;
  
  nvi_lte_b17_tx_gain_index_2_type                 lte_b17_tx_gain_index_2;
  
  nvi_lte_b17_tx_gain_index_3_type                 lte_b17_tx_gain_index_3;
  
  nvi_lte_b17_tx_comp_vs_freq_type                 lte_b17_tx_comp_vs_freq;
  
  nvi_lte_b17_exp_hdet_vs_agc_type                 lte_b17_exp_hdet_vs_agc;
  
  nvi_lte_b17_tx_limit_vs_freq_type                lte_b17_tx_limit_vs_freq;
  
  nvi_lte_hdet_off_span_type                       lte_b17_hdet_off_span;
  
  nvi_lte_b17_antsel_type                          lte_b17_antsel;
  
  nvi_lte_b17_c1_antsel_type                       lte_b17_c1_antsel;
  
  nvi_int8_type                                    lte_b17_c0_c1_delay;
  
  nvi_lte_b17_c1_lna_range_rise_fall_type          lte_b17_c1_lna_range_rise_fall;
  
  nvi_lte_b17_c1_im_level_type                     lte_b17_c1_im_level;
  
  nvi_lte_b17_c1_rx_gain_vs_temp_type              lte_b17_c1_rx_gain_vs_temp;
  
  nvi_lte_b17_c1_lna_phase_ctrl_type               lte_b17_c1_lna_phase_ctrl;
  
  nvi_lte_b17_c1_rx_gain_type                      lte_b17_c1_rx_gain;
  
  nvi_lte_b17_c1_rx_gain_vs_freq_type              lte_b17_c1_rx_gain_vs_freq;
  
  nvi_lte_c1_im2_values_type                       lte_b17_c1_im2_values;
  
  nvi_lte_b17_c1_rx_cal_chan_type                  lte_b17_c1_rx_cal_chan;
  
  nvi_lte_c1_nonbypass_bypass_timer_type           lte_b17_c1_nonbypass_bypass_timer;
  
  nvi_lte_nonbypass_bypass_timer_type              lte_b40_nonbypass_bypass_timer;
  
  nvi_int16_type                                   lte_b40_rx_delay;
  
  nvi_lte_b40_rx_cal_chan_type                     lte_b40_rx_cal_chan;
  
  nvi_lte_b40_lna_range_rise_fall_type             lte_b40_lna_range_rise_fall;
  
  nvi_lte_b40_im_level_type                        lte_b40_im_level;
  
  nvi_lte_b40_rx_gain_vs_temp_type                 lte_b40_rx_gain_vs_temp;
  
  nvi_lte_b40_rx_gain_type                         lte_b40_rx_gain;
  
  nvi_lte_b40_rx_gain_vs_freq_type                 lte_b40_rx_gain_vs_freq;
  
  nvi_lte_b40_lna_phase_ctrl_type                  lte_b40_lna_phase_ctrl;
  
  nvi_lte_im2_values_type                          lte_b40_im2_values;
  
  nvi_lte_rxf_mismatch_comp_type                   lte_b40_rxf_mismatch_comp;
  
  nvi_int32_type                                   lte_b40_enc_btf;
  
  nvi_int8_type                                    lte_b40_max_tx_power;
  
  nvi_lte_agc_pa_on_rise_fall_delay_type           lte_b40_agc_pa_on_rise_fall_delay;
  
  nvi_lte_agc_tx_on_rise_fall_delay_type           lte_b40_agc_tx_on_rise_fall_delay;
  
  nvi_lte_pa_gain_up_down_time_type                lte_b40_pa_gain_up_down_time;
  
  nvi_lte_b40_tx_rot_angle_pa_state_type           lte_b40_tx_rot_angle_pa_state;
  
  nvi_lte_b40_pa_compensate_up_down_type           lte_b40_pa_compensate_up_down;
  
  nvi_lte_b40_tx_lin_vs_temp_type                  lte_b40_tx_lin_vs_temp;
  
  nvi_lte_b40_pa_range_map_type                    lte_b40_pa_range_map;
  
  nvi_int16_type                                   lte_b40_timer_hysterisis;
  
  nvi_lte_b40_pa_rise_fall_threshold_type          lte_b40_pa_rise_fall_threshold;
  
  nvi_lte_b40_tx_cal_chan_type                     lte_b40_tx_cal_chan;
  
  nvi_lte_b40_tx_limit_vs_temp_type                lte_b40_tx_limit_vs_temp;
  
  nvi_lte_b40_mpr_based_pa_switchpoints_shift_type lte_b40_mpr_based_pa_switchpoints_shift;
  
  nvi_lte_b40_tx_mpr_backoff_type                  lte_b40_tx_mpr_backoff;
  
  nvi_lte_b40_tx_digital_gain_comp_type            lte_b40_tx_digital_gain_comp;
  
  nvi_lte_b40_tx_agc_offset_type                   lte_b40_tx_agc_offset;
  
  nvi_lte_b40_tx_lin_master_0_type                 lte_b40_tx_lin_master_0;
  
  nvi_lte_b40_tx_lin_master_1_type                 lte_b40_tx_lin_master_1;
  
  nvi_lte_b40_tx_lin_master_2_type                 lte_b40_tx_lin_master_2;
  
  nvi_lte_b40_tx_lin_master_3_type                 lte_b40_tx_lin_master_3;
  
  nvi_lte_b40_tx_gain_index_0_type                 lte_b40_tx_gain_index_0;
  
  nvi_lte_b40_tx_gain_index_1_type                 lte_b40_tx_gain_index_1;
  
  nvi_lte_b40_tx_gain_index_2_type                 lte_b40_tx_gain_index_2;
  
  nvi_lte_b40_tx_gain_index_3_type                 lte_b40_tx_gain_index_3;
  
  nvi_lte_b40_tx_comp_vs_freq_type                 lte_b40_tx_comp_vs_freq;
  
  nvi_lte_b40_exp_hdet_vs_agc_type                 lte_b40_exp_hdet_vs_agc;
  
  nvi_lte_b40_tx_limit_vs_freq_type                lte_b40_tx_limit_vs_freq;
  
  nvi_lte_hdet_off_span_type                       lte_b40_hdet_off_span;
  
  nvi_lte_b40_antsel_type                          lte_b40_antsel;
  
  nvi_lte_b40_c1_antsel_type                       lte_b40_c1_antsel;
  
  nvi_int8_type                                    lte_b40_c0_c1_delay;
  
  nvi_lte_c1_nonbypass_bypass_timer_type           lte_b40_c1_nonbypass_bypass_timer;
  
  nvi_lte_b40_c1_lna_range_rise_fall_type          lte_b40_c1_lna_range_rise_fall;
  
  nvi_lte_b40_c1_im_level_type                     lte_b40_c1_im_level;
  
  nvi_lte_b40_c1_rx_gain_vs_temp_type              lte_b40_c1_rx_gain_vs_temp;
  
  nvi_lte_b40_c1_lna_phase_ctrl_type               lte_b40_c1_lna_phase_ctrl;
  
  nvi_lte_b40_c1_rx_gain_type                      lte_b40_c1_rx_gain;
  
  nvi_lte_b40_c1_rx_gain_vs_freq_type              lte_b40_c1_rx_gain_vs_freq;
  
  nvi_lte_c1_im2_values_type                       lte_b40_c1_im2_values;
  
  nvi_lte_b40_c1_rx_cal_chan_type                  lte_b40_c1_rx_cal_chan;
  
  nvi_lte_nonbypass_bypass_timer_type              lte_b1_nonbypass_bypass_timer;
  
  nvi_int16_type                                   lte_b1_rx_delay;
  
  nvi_lte_b1_rx_cal_chan_type                      lte_b1_rx_cal_chan;
  
  nvi_lte_b1_lna_range_rise_fall_type              lte_b1_lna_range_rise_fall;
  
  nvi_lte_b1_im_level_type                         lte_b1_im_level;
  
  nvi_lte_b1_rx_gain_vs_temp_type                  lte_b1_rx_gain_vs_temp;
  
  nvi_lte_b1_rx_gain_type                          lte_b1_rx_gain;
  
  nvi_lte_b1_rx_gain_vs_freq_type                  lte_b1_rx_gain_vs_freq;
  
  nvi_lte_b1_lna_phase_ctrl_type                   lte_b1_lna_phase_ctrl;
  
  nvi_lte_im2_values_type                          lte_b1_im2_values;
  
  nvi_lte_rxf_mismatch_comp_type                   lte_b1_rxf_mismatch_comp;
  
  nvi_int32_type                                   lte_b1_enc_btf;
  
  nvi_int8_type                                    lte_b1_max_tx_power;
  
  nvi_lte_agc_pa_on_rise_fall_delay_type           lte_b1_agc_pa_on_rise_fall_delay;
  
  nvi_lte_agc_tx_on_rise_fall_delay_type           lte_b1_agc_tx_on_rise_fall_delay;
  
  nvi_lte_pa_gain_up_down_time_type                lte_b1_pa_gain_up_down_time;
  
  nvi_lte_b1_tx_rot_angle_pa_state_type            lte_b1_tx_rot_angle_pa_state;
  
  nvi_lte_b1_pa_compensate_up_down_type            lte_b1_pa_compensate_up_down;
  
  nvi_lte_b1_tx_lin_vs_temp_type                   lte_b1_tx_lin_vs_temp;
  
  nvi_lte_b1_pa_range_map_type                     lte_b1_pa_range_map;
  
  nvi_int16_type                                   lte_b1_timer_hysterisis;
  
  nvi_lte_b1_pa_rise_fall_threshold_type           lte_b1_pa_rise_fall_threshold;
  
  nvi_lte_b1_tx_cal_chan_type                      lte_b1_tx_cal_chan;
  
  nvi_lte_b1_tx_limit_vs_temp_type                 lte_b1_tx_limit_vs_temp;
  
  nvi_lte_b1_mpr_based_pa_switchpoints_shift_type  lte_b1_mpr_based_pa_switchpoints_shift;
  
  nvi_lte_b1_tx_mpr_backoff_type                   lte_b1_tx_mpr_backoff;
  
  nvi_lte_b1_tx_digital_gain_comp_type             lte_b1_tx_digital_gain_comp;
  
  nvi_lte_b1_tx_agc_offset_type                    lte_b1_tx_agc_offset;
  
  nvi_lte_b1_tx_lin_master_0_type                  lte_b1_tx_lin_master_0;
  
  nvi_lte_b1_tx_lin_master_1_type                  lte_b1_tx_lin_master_1;
  
  nvi_lte_b1_tx_lin_master_2_type                  lte_b1_tx_lin_master_2;
  
  nvi_lte_b1_tx_lin_master_3_type                  lte_b1_tx_lin_master_3;
  
  nvi_lte_b1_tx_gain_index_0_type                  lte_b1_tx_gain_index_0;
  
  nvi_lte_b1_tx_gain_index_1_type                  lte_b1_tx_gain_index_1;
  
  nvi_lte_b1_tx_gain_index_2_type                  lte_b1_tx_gain_index_2;
  
  nvi_lte_b1_tx_gain_index_3_type                  lte_b1_tx_gain_index_3;
  
  nvi_lte_b1_tx_comp_vs_freq_type                  lte_b1_tx_comp_vs_freq;
  
  nvi_lte_b1_exp_hdet_vs_agc_type                  lte_b1_exp_hdet_vs_agc;
  
  nvi_lte_b1_tx_limit_vs_freq_type                 lte_b1_tx_limit_vs_freq;
  
  nvi_lte_hdet_off_span_type                       lte_b1_hdet_off_span;
  
  nvi_lte_b1_antsel_type                           lte_b1_antsel;
  
  nvi_lte_b1_c1_antsel_type                        lte_b1_c1_antsel;
  
  nvi_int8_type                                    lte_b1_c0_c1_delay;
  
  nvi_lte_c1_nonbypass_bypass_timer_type           lte_b1_c1_nonbypass_bypass_timer;
  
  nvi_lte_b1_c1_lna_range_rise_fall_type           lte_b1_c1_lna_range_rise_fall;
  
  nvi_lte_b1_c1_im_level_type                      lte_b1_c1_im_level;
  
  nvi_lte_b1_c1_rx_gain_vs_temp_type               lte_b1_c1_rx_gain_vs_temp;
  
  nvi_lte_b1_c1_lna_phase_ctrl_type                lte_b1_c1_lna_phase_ctrl;
  
  nvi_lte_b1_c1_rx_gain_type                       lte_b1_c1_rx_gain;
  
  nvi_lte_b1_c1_rx_gain_vs_freq_type               lte_b1_c1_rx_gain_vs_freq;
  
  nvi_lte_c1_im2_values_type                       lte_b1_c1_im2_values;
  
  nvi_lte_b1_c1_rx_cal_chan_type                   lte_b1_c1_rx_cal_chan;
  
  nvi_lte_b13_drx_mode_sel_type                    lte_b13_drx_mode_sel;
  
  nvi_lte_b7_drx_mode_sel_type                     lte_b7_drx_mode_sel;
  
  nvi_lte_b17_drx_mode_sel_type                    lte_b17_drx_mode_sel;
  
  nvi_lte_b40_drx_mode_sel_type                    lte_b40_drx_mode_sel;
  
  nvi_lte_b1_drx_mode_sel_type                     lte_b1_drx_mode_sel;
  
  nvi_uint8_type                                   cgps_sensors_enable;
  
  nvi_wcdma_rel7_pa_mpr_backoff_type               wcdma_rel7_pa_mpr_backoff;
  
  nvi_uint16_type                                  wcdma_iq_gain;
  
  nvi_uint8_type                                   gnss_gps_rxd_enable;
  
  nvi_uint8_type                                   gnss_system_control;
  
  nvi_uint8_type                                   gnss_glo_control;
  
  nvi_uint8_type                                   gnss_rxd_path_loss;
  
  nvi_uint8_type                                   gnss_hbw_path_loss;
  
  nvi_uint8_type                                   gnss_glo_path_loss_center_minus7;
  
  nvi_uint8_type                                   gnss_glo_path_loss_center_0;
  
  nvi_uint8_type                                   gnss_glo_path_loss_center_plus6;
  
  nvi_int16_type                                   gnss_lbw_rxd_group_delay_diff;
  
  nvi_uint8_type                                   gnss_timed_output_mode_selection;
  
  nvi_uint32_type                                  gnss_timed_output_fixed_bias_offset;
  
  nvi_uint8_type                                   gnss_max_m_rxd_tasks;
  
  nvi_uint8_type                                   gnss_max_gnss_tasks;
  
  nvi_uint16_type                                  gnss_shallow_first_dwell_duration;
  
  nvi_uint16_type                                  gnss_shallow_successive_dwells_duration;
  
  nvi_uint16_type                                  gnss_deep_first_dwell_duration;
  
  nvi_uint16_type                                  gnss_deep_second_dwell_duration;
  
  nvi_uint16_type                                  gnss_deep_third_dwell_duration;
  
  nvi_uint16_type                                  gnss_verification_dwell_duration;
  
  nvi_uint16_type                                  gnss_probationary_scan_dwell_duration;
  
  nvi_uint8_type                                   gnss_acquisition_sampling_mode;
  
  nvi_gnss_pp_reserved_type                        gnss_pp_reserved;
  
  nvi_uint8_type                                   gnss_max_num_gps_sv_measurements_in_fix;
  
  nvi_uint32_type                                  gnss_spcfc_gps_sv_measures_not_in_fix;
  
  nvi_uint8_type                                   gnss_max_num_glo_sv_measurements_in_fix;
  
  nvi_uint32_type                                  gnss_spcfc_glo_sv_measures_not_in_fix;
  
  nvi_uint8_type                                   gnss_disable_ggtb_constraint_in_wls;
  
  nvi_uint8_type                                   gnss_disable_glo_only_kf;
  
  nvi_uint8_type                                   gnss_enable_extended_on_feature_for_gnss;
  
  nvi_uint16_type                                  gnss_spcfc_glo_sv_nav_data_not_decoded;
  
  nvi_uint32_type                                  gnss_spcfc_gps_sv_nav_data_not_decoded;
  
  nvi_uint8_type                                   gnss_nmea_sentence_type;
  
  nvi_uint16_type                                  gnss_nmea_extended_sentence_type;
  
  nvi_uint8_type                                   gnss_801_b_protocol_support;
  
  nvi_uint32_type                                  gnss_supl_version;
  
  nvi_uint8_type                                   gnss_rrlp8_rrc8_supported;
  
  nvi_uint16_type                                  gnss_dpo_dwell_duration;
  
  nvi_uint32_type                                  cgps_dpo_entry_criteria_control;
  
  nvi_cgps_default_region_size_type                cgps_default_region_size;
  
  nvi_uint8_type                                   cgps_use_qwip_for_odp;
  
  nvi_enum_type                                    multimode_system_preference;
  
  nvi_clkrgm_debug_type                            clkrgm_debug;
  
  nvi_uint8_type                                   board_capabilities;
  
  nvi_csim_static_1x_app                           csim_static_1x_app;
  
  nvi_csim_static_gw_app                           csim_static_gw_app;
  
  nvi_boolean_type                                 slip_pref_mode;
  
  nvi_boolean_type                                 bus_prof_imem_enable;
  
  nvi_bus_prof_imem_mode_type                      bus_prof_imem_mode;
  
  nvi_uint32_type                                  bus_prof_imem_trigger_id;
  
  nvi_uint32_type                                  bus_prof_imem_bus_count;
  
  nvi_bus_prof_simple_settings_t                   bus_prof_imem_simple_settings_0;
  
  nvi_bus_prof_simple_settings_t                   bus_prof_imem_simple_settings_1;
  
  nvi_bus_prof_simple_settings_t                   bus_prof_imem_simple_settings_2;
  
  nvi_bus_prof_simple_settings_t                   bus_prof_imem_simple_settings_3;
  
  nvi_bus_prof_advanced_settings_t                 bus_prof_imem_advance_settings_0;
  
  nvi_bus_prof_advanced_settings_t                 bus_prof_imem_advance_settings_1;
  
  nvi_bus_prof_advanced_settings_t                 bus_prof_imem_advance_settings_2;
  
  nvi_bus_prof_advanced_settings_t                 bus_prof_imem_advance_settings_3;
  
  nvi_uint8_type                                   gnss_mgp_error_recovery;
  
  nvi_uint8_type                                   gnss_hbw_control;
  
  nvi_lte_tx_mismatch_comp_type                    lte_b13_tx_mismatch_comp;
  
  nvi_lte_tx_mismatch_comp_type                    lte_b7_tx_mismatch_comp;
  
  nvi_lte_tx_mismatch_comp_type                    lte_b17_tx_mismatch_comp;
  
  nvi_lte_tx_mismatch_comp_type                    lte_b40_tx_mismatch_comp;
  
  nvi_lte_tx_mismatch_comp_type                    lte_b1_tx_mismatch_comp;
  
  nvi_lte_tx_carrier_feedthrough_comp_type         lte_b13_tx_carrier_feedthrough_comp;
  
  nvi_lte_tx_carrier_feedthrough_comp_type         lte_b7_tx_carrier_feedthrough_comp;
  
  nvi_lte_tx_carrier_feedthrough_comp_type         lte_b17_tx_carrier_feedthrough_comp;
  
  nvi_lte_tx_carrier_feedthrough_comp_type         lte_b40_tx_carrier_feedthrough_comp;
  
  nvi_lte_tx_carrier_feedthrough_comp_type         lte_b1_tx_carrier_feedthrough_comp;
  
  nvi_lte_bc_config_type                           lte_bc_config;
  
  nvi_lte_bc_config_div_type                       lte_bc_config_div;
  
  nvi_uint8_type                                   cs_to_voip_fallback_timer;
  
  nvi_uint8_type                                   voip_cancel_retry_timer;
  
  nvi_boolean_type                                 hdrscp_force_restricted_cf;
  
  nvi_uint32_type                                  adc_vbatt_slope;
  
  nvi_uint32_type                                  adc_vbatt_offset;
  
  nvi_uint16_type                                  cgps_sensors_spi_opinterval;
  
  nvi_uint16_type                                  cgps_sensors_spi_detectthreshold;
  
  nvi_uint16_type                                  snsd_motion_scale_factor;
  
  nvi_uint16_type                                  snsd_motion_zmd_window_samples;
  
  nvi_uint8_type                                   snsd_motion_zmd_method;
  
  nvi_uint8_type                                   snsd_motion_transient_length;
  
  nvi_enum_type                                    hs_usb_performance_setting;
  
  nvi_enum_type                                    wlan_pal_link_pref;
  
  nvi_boolean_type                                 hs_usb_disable_lpm;
  
  nvi_enhanced_hplmn_srch_tbl_type                 enhanced_hplmn_srch_tbl;
  
  nvi_uint8_type                                   gnss_embedded_xtra_client_enabled;
  
  nvi_enum_type                                    gnss_wwan_network_preference;
  
  nvi_uint8_type                                   gnss_medium_preferences_number;
  
  nvi_gnss_medium_preference_list_type             gnss_medium_preference_list;
  
  nvi_uint8_type                                   gnss_auto_nmea_comport_enabled;
  
  nvi_uint8_type                                   umts_amr_codec_preference_config;
  
  nvi_uint8_type                                   gnss_embedded_xtra_time_client_enabled;
  
  nvi_uint8_type                                   gnss_1xup_msa_trusted_mode_disable;
  
  nvi_oem_item_1_type                              oem_item_1;
  
  nvi_oem_item_2_type                              oem_item_2;
  
  nvi_oem_item_3_type                              oem_item_3;
  
  nvi_oem_item_4_type                              oem_item_4;
  
  nvi_oem_item_5_type                              oem_item_5;
  
  nvi_oem_item_6_type                              oem_item_6;
  
  nvi_oem_item_7_type                              oem_item_7;
  
  nvi_oem_item_8_type                              oem_item_8;
  
  nvi_rc_process_errors_type                       rc_process_errors;
  
  nvi_boolean_type                                 ehrpd_auth_in_usim;
  
  nvi_bc0_pa_smps_pdm_level_type                   bc0_pa_smps_pdm_level;
  
  nvi_bc1_pa_smps_pdm_level_type                   bc1_pa_smps_pdm_level;
  
  nvi_bc3_pa_smps_pdm_level_type                   bc3_pa_smps_pdm_level;
  
  nvi_bc4_pa_smps_pdm_level_type                   bc4_pa_smps_pdm_level;
  
  nvi_bc5_pa_smps_pdm_level_type                   bc5_pa_smps_pdm_level;
  
  nvi_bc6_pa_smps_pdm_level_type                   bc6_pa_smps_pdm_level;
  
  nvi_bc10_pa_smps_pdm_level_type                  bc10_pa_smps_pdm_level;
  
  nvi_bc14_pa_smps_pdm_level_type                  bc14_pa_smps_pdm_level;
  
  nvi_bc15_pa_smps_pdm_level_type                  bc15_pa_smps_pdm_level;
  
  nvi_hs_usb_phy_config_type                       hs_usb_phy_config;
  
  nvi_qmi_port_list_type                           qmi_port_list;
  
  nvi_active_subs_info_s_type                      as_id_1_data;
  
  nvi_active_subs_info_s_type                      as_id_2_data;
  
  nvi_dual_standby_cfg_type                        dual_standby_cfg_items;
  
  nvi_uint32_type                                  hard_fail_thr_time;
  
  nvi_boolean_type                                 wcdma_cs_voice_over_hspa_enabled;
  
  nvi_int16_type                                   wcdma_2100_lna_range_offset_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_offset_2_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_offset_3_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_offset_4_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_offset_5_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_offset_car1;
  
  nvi_int16_type                                   wcdma_2100_lna_range_offset_2_car1;
  
  nvi_int16_type                                   wcdma_2100_lna_range_offset_3_car1;
  
  nvi_int16_type                                   wcdma_2100_lna_range_offset_4_car1;
  
  nvi_int16_type                                   wcdma_2100_lna_range_offset_5_car1;
  
  nvi_int16_type                                   wcdma_2100_vga_gain_offset_car0;
  
  nvi_int16_type                                   wcdma_2100_vga_gain_offset_car1;
  
  nvi_int16_type                                   wcdma_2100_lna_range_rise_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_rise_2_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_rise_3_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_rise_4_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_rise_car1;
  
  nvi_int16_type                                   wcdma_2100_lna_range_rise_2_car1;
  
  nvi_int16_type                                   wcdma_2100_lna_range_rise_3_car1;
  
  nvi_int16_type                                   wcdma_2100_lna_range_rise_4_car1;
  
  nvi_int16_type                                   wcdma_2100_lna_range_fall_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_fall_2_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_fall_4_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_fall_3_car0;
  
  nvi_int16_type                                   wcdma_2100_lna_range_fall_car1;
  
  nvi_int16_type                                   wcdma_2100_lna_range_fall_2_car1;
  
  nvi_int16_type                                   wcdma_2100_lna_range_fall_3_car1;
  
  nvi_int16_type                                   wcdma_2100_lna_range_fall_4_car1;
  
  nvi_enum_type                                    uim_hw_sim_config;
  
  nvi_int16_type                                   wcdma_1500_vga_gain_offset;
  
  nvi_wcdma_1500_vga_gain_offset_vs_freq_type      wcdma_1500_vga_gain_offset_vs_freq;
  
  nvi_wcdma_1500_vga_gain_offset_vs_temp_type      wcdma_1500_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   wcdma_1500_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_1500_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_1500_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_1500_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_1500_im_level_2;
  
  nvi_int16_type                                   wcdma_1500_im_level_3;
  
  nvi_int16_type                                   wcdma_1500_lna_range_offset_2;
  
  nvi_int16_type                                   wcdma_1500_lna_range_offset_3;
  
  nvi_wcdma_1500_lna_offset_vs_freq_2_type         wcdma_1500_lna_offset_vs_freq_2;
  
  nvi_wcdma_1500_lna_offset_vs_freq_3_type         wcdma_1500_lna_offset_vs_freq_3;
  
  nvi_uint8_type                                   wcdma_1500_im2_i_value;
  
  nvi_uint8_type                                   wcdma_1500_im2_q_value;
  
  nvi_uint8_type                                   wcdma_1500_im2_transconductor_value;
  
  nvi_int16_type                                   wcdma_1500_rx_agc_min_2;
  
  nvi_int16_type                                   wcdma_1500_rx_agc_min_3;
  
  nvi_int8_type                                    wcdma_1500_max_tx_power;
  
  nvi_int16_type                                   wcdma_1500_out_of_service_thresh;
  
  nvi_int16_type                                   wcdma_1500_lna_range_rise;
  
  nvi_int16_type                                   wcdma_1500_lna_range_fall;
  
  nvi_int16_type                                   wcdma_1500_im_level;
  
  nvi_uint8_type                                   wcdma_1500_nonbypass_timer;
  
  nvi_uint16_type                                  wcdma_1500_bypass_timer;
  
  nvi_int16_type                                   wcdma_1500_lna_range_offset;
  
  nvi_wcdma_1500_lna_offset_vs_freq_type           wcdma_1500_lna_offset_vs_freq;
  
  nvi_int16_type                                   wcdma_1500_rx_agc_min;
  
  nvi_int16_type                                   wcdma_1500_rx_agc_max;
  
  nvi_uint8_type                                   wcdma_1500_agc_phase_offset;
  
  nvi_wcdma_1500_tx_lin_master_0_type              wcdma_1500_tx_lin_master_0;
  
  nvi_wcdma_1500_tx_lin_master_1_type              wcdma_1500_tx_lin_master_1;
  
  nvi_wcdma_1500_tx_comp_vs_freq_0_type            wcdma_1500_tx_comp_vs_freq_0;
  
  nvi_wcdma_1500_tx_comp_vs_freq_1_type            wcdma_1500_tx_comp_vs_freq_1;
  
  nvi_wcdma_1500_tx_lin_vs_temp_0_type             wcdma_1500_tx_lin_vs_temp_0;
  
  nvi_wcdma_1500_tx_lin_vs_temp_1_type             wcdma_1500_tx_lin_vs_temp_1;
  
  nvi_wcdma_1500_tx_slp_vs_temp_0_type             wcdma_1500_tx_slp_vs_temp_0;
  
  nvi_wcdma_1500_tx_slp_vs_temp_1_type             wcdma_1500_tx_slp_vs_temp_1;
  
  nvi_uint16_type                                  wcdma_1500_r1_rise;
  
  nvi_uint16_type                                  wcdma_1500_r1_fall;
  
  nvi_wcdma_1500_tx_lim_vs_temp_type               wcdma_1500_tx_lim_vs_temp;
  
  nvi_wcdma_1500_tx_lim_vs_freq_type               wcdma_1500_tx_lim_vs_freq;
  
  nvi_uint8_type                                   wcdma_1500_adj_factor;
  
  nvi_wcdma_1500_exp_hdet_vs_agc_type              wcdma_1500_exp_hdet_vs_agc;
  
  nvi_uint8_type                                   wcdma_1500_hdet_off;
  
  nvi_uint8_type                                   wcdma_1500_hdet_spn;
  
  nvi_uint32_type                                  wcdma_1500_enc_btf;
  
  nvi_int16_type                                   wcdma_1500_pa_compensate_up;
  
  nvi_int16_type                                   wcdma_1500_pa_compensate_down;
  
  nvi_uint16_type                                  wcdma_1500_agc_pa_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_1500_agc_pa_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_1500_agc_tx_on_rise_delay;
  
  nvi_uint16_type                                  wcdma_1500_agc_tx_on_fall_delay;
  
  nvi_uint16_type                                  wcdma_1500_agc_update_tx_agc_time;
  
  nvi_int16_type                                   wcdma_1500_prach_r1_rise_offset;
  
  nvi_int16_type                                   wcdma_1500_prach_r1_fall_offset;
  
  nvi_int16_type                                   wcdma_1500_rx_delay;
  
  nvi_wcdma_1500_tx_lin_master_2_type              wcdma_1500_tx_lin_master_2;
  
  nvi_wcdma_1500_tx_lin_master_3_type              wcdma_1500_tx_lin_master_3;
  
  nvi_wcdma_1500_tx_comp_vs_freq_2_type            wcdma_1500_tx_comp_vs_freq_2;
  
  nvi_wcdma_1500_tx_comp_vs_freq_3_type            wcdma_1500_tx_comp_vs_freq_3;
  
  nvi_wcdma_1500_tx_lin_vs_temp_2_type             wcdma_1500_tx_lin_vs_temp_2;
  
  nvi_wcdma_1500_tx_lin_vs_temp_3_type             wcdma_1500_tx_lin_vs_temp_3;
  
  nvi_wcdma_1500_tx_slp_vs_temp_2_type             wcdma_1500_tx_slp_vs_temp_2;
  
  nvi_wcdma_1500_tx_slp_vs_temp_3_type             wcdma_1500_tx_slp_vs_temp_3;
  
  nvi_uint16_type                                  wcdma_1500_r2_rise;
  
  nvi_uint16_type                                  wcdma_1500_r2_fall;
  
  nvi_uint16_type                                  wcdma_1500_r3_rise;
  
  nvi_uint16_type                                  wcdma_1500_r3_fall;
  
  nvi_int16_type                                   wcdma_1500_pa_compensate_up_r2;
  
  nvi_int16_type                                   wcdma_1500_pa_compensate_down_r2;
  
  nvi_int16_type                                   wcdma_1500_pa_compensate_up_r3;
  
  nvi_int16_type                                   wcdma_1500_pa_compensate_down_r3;
  
  nvi_uint16_type                                  wcdma_1500_tx_rot_angle_pa_state_00;
  
  nvi_uint16_type                                  wcdma_1500_tx_rot_angle_pa_state_01;
  
  nvi_uint16_type                                  wcdma_1500_tx_rot_angle_pa_state_10;
  
  nvi_uint16_type                                  wcdma_1500_tx_rot_angle_pa_state_11;
  
  nvi_int16_type                                   wcdma_1500_prach_r2_rise_offset;
  
  nvi_int16_type                                   wcdma_1500_prach_r2_fall_offset;
  
  nvi_int16_type                                   wcdma_1500_prach_r3_rise_offset;
  
  nvi_int16_type                                   wcdma_1500_prach_r3_fall_offset;
  
  nvi_wcdma_1500_pa_range_map_type                 wcdma_1500_pa_range_map;
  
  nvi_wcdma_1500_tx_cal_chan_type                  wcdma_1500_tx_cal_chan;
  
  nvi_wcdma_1500_rx_cal_chan_type                  wcdma_1500_rx_cal_chan;
  
  nvi_int16_type                                   wcdma_1500_pa_range_for_dvs;
  
  nvi_wcdma_1500_pa_compensate_up_with_dvs_type    wcdma_1500_pa_compensate_up_with_dvs;
  
  nvi_wcdma_1500_pa_compensate_dn_with_dvs_type    wcdma_1500_pa_compensate_dn_with_dvs;
  
  nvi_int16_type                                   wcdma_1500_dch_agc_update_tx_agc_time;
  
  nvi_int16_type                                   wcdma_1500_agc_tx_adj_pdm_delay;
  
  nvi_wcdma_1500_utran_tx_lim_vs_temp_offset_type  wcdma_1500_utran_tx_lim_vs_temp_offset;
  
  nvi_wcdma_1500_max_pwr_backoff_voltages_type     wcdma_1500_max_pwr_backoff_voltages;
  
  nvi_wcdma_1500_max_pwr_backoff_volt1_type        wcdma_1500_max_pwr_backoff_volt1;
  
  nvi_wcdma_1500_max_pwr_backoff_volt2_type        wcdma_1500_max_pwr_backoff_volt2;
  
  nvi_wcdma_1500_max_pwr_backoff_volt3_type        wcdma_1500_max_pwr_backoff_volt3;
  
  nvi_int16_type                                   wcdma_1500_pa_gain_up_time;
  
  nvi_int16_type                                   wcdma_1500_pa_gain_down_time;
  
  nvi_wcdma_1500_tx_pdm_lin_0_type                 wcdma_1500_tx_pdm_lin_0;
  
  nvi_wcdma_1500_tx_pdm_lin_1_type                 wcdma_1500_tx_pdm_lin_1;
  
  nvi_wcdma_1500_tx_pdm_lin_2_type                 wcdma_1500_tx_pdm_lin_2;
  
  nvi_wcdma_1500_tx_pdm_lin_3_type                 wcdma_1500_tx_pdm_lin_3;
  
  nvi_wcdma_1500_iaccum_type                       wcdma_1500_iaccum;
  
  nvi_wcdma_1500_qaccum_type                       wcdma_1500_qaccum;
  
  nvi_int16_type                                   wcdma_1500_im_level_4;
  
  nvi_wcdma_1500_lna_offset_vs_freq_4_type         wcdma_1500_lna_offset_vs_freq_4;
  
  nvi_int16_type                                   wcdma_1500_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_1500_lna_range_offset_4;
  
  nvi_int16_type                                   wcdma_1500_lna_range_rise_4;
  
  nvi_int8_type                                    wcdma_1500_c0_c1_delay;
  
  nvi_wcdma_1500_rel6_tx_beta_scaling_comp_type    wcdma_1500_rel6_tx_beta_scaling_comp;
  
  nvi_wcdma_1500_rel6_tx_agc_offset_type           wcdma_1500_rel6_tx_agc_offset;
  
  nvi_wcdma_1500_rel6_tx_mpr_backoff_type          wcdma_1500_rel6_tx_mpr_backoff;
  
  nvi_wcdma_1500_tx_comp_vs_freq_0_secondary_type  wcdma_1500_tx_comp_vs_freq_0_secondary;
  
  nvi_wcdma_1500_tx_comp_vs_freq_1_secondary_type  wcdma_1500_tx_comp_vs_freq_1_secondary;
  
  nvi_wcdma_1500_tx_comp_vs_freq_2_secondary_type  wcdma_1500_tx_comp_vs_freq_2_secondary;
  
  nvi_wcdma_1500_tx_comp_vs_freq_3_secondary_type  wcdma_1500_tx_comp_vs_freq_3_secondary;
  
  nvi_wcdma_1500_tx_comp_vs_freq_sec_pdm_list_type wcdma_1500_tx_comp_vs_freq_sec_pdm_list;
  
  nvi_wcdma_1500_tx_lin_master_0_enh_type          wcdma_1500_tx_lin_master_0_enh;
  
  nvi_wcdma_1500_tx_pdm_lin_0_enh_type             wcdma_1500_tx_pdm_lin_0_enh;
  
  nvi_wcdma_1500_lna_phase_ctl_type                wcdma_1500_lna_phase_ctl;
  
  nvi_int16_type                                   wcdma_1500_timer_hysterisis;
  
  nvi_int16_type                                   wcdma_1500_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   wcdma_1500_rxf_mis_comp_b_coeff;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  wcdma_1500_rxf_ici_q_coef14_15;
  
  nvi_uint8_type                                   wcdma_1500_rxf_ici_iq_trunc;
  
  nvi_int16_type                                   wcdma_1500_hs_r1_rise;
  
  nvi_int16_type                                   wcdma_1500_hs_r1_fall;
  
  nvi_int16_type                                   wcdma_1500_hs_r2_rise;
  
  nvi_int16_type                                   wcdma_1500_hs_r2_fall;
  
  nvi_int16_type                                   wcdma_1500_hs_r3_rise;
  
  nvi_int16_type                                   wcdma_1500_hs_r3_fall;
  
  nvi_int16_type                                   wcdma_1500_hs_lna_range_fall_4;
  
  nvi_int16_type                                   wcdma_1500_hs_lna_range_fall_3;
  
  nvi_int16_type                                   wcdma_1500_hs_lna_range_fall_2;
  
  nvi_int16_type                                   wcdma_1500_hs_lna_range_fall;
  
  nvi_int16_type                                   wcdma_1500_hs_lna_range_rise_4;
  
  nvi_int16_type                                   wcdma_1500_hs_lna_range_rise_3;
  
  nvi_int16_type                                   wcdma_1500_hs_lna_range_rise_2;
  
  nvi_int16_type                                   wcdma_1500_hs_lna_range_rise;
  
  nvi_int16_type                                   wcdma_1500_hs_im_level_2;
  
  nvi_int16_type                                   wcdma_1500_hs_im_level;
  
  nvi_int16_type                                   wcdma_1500_hs_im_level_3;
  
  nvi_int16_type                                   wcdma_1500_hs_im_level_4;
  
  nvi_wcdma_1500_hs_switchpoints_shift_type        wcdma_1500_hs_switchpoints_shift;
  
  nvi_wcdma_1500_drx_mode_sel_type                 wcdma_1500_drx_mode_sel;
  
  nvi_int16_type                                   c1_wcdma_1500_vga_gain_offset;
  
  nvi_c1_wcdma_1500_vga_gain_offset_vs_freq_type   c1_wcdma_1500_vga_gain_offset_vs_freq;
  
  nvi_c1_wcdma_1500_vga_gain_offset_vs_temp_type   c1_wcdma_1500_vga_gain_offset_vs_temp;
  
  nvi_int16_type                                   c1_wcdma_1500_lna_range_rise;
  
  nvi_int16_type                                   c1_wcdma_1500_lna_range_rise_2;
  
  nvi_int16_type                                   c1_wcdma_1500_lna_range_rise_3;
  
  nvi_int16_type                                   c1_wcdma_1500_lna_range_rise_4;
  
  nvi_int16_type                                   c1_wcdma_1500_lna_range_fall;
  
  nvi_int16_type                                   c1_wcdma_1500_lna_range_fall_2;
  
  nvi_int16_type                                   c1_wcdma_1500_lna_range_fall_3;
  
  nvi_int16_type                                   c1_wcdma_1500_lna_range_fall_4;
  
  nvi_int16_type                                   c1_wcdma_1500_im_level;
  
  nvi_int16_type                                   c1_wcdma_1500_im_level_2;
  
  nvi_int16_type                                   c1_wcdma_1500_im_level_3;
  
  nvi_int16_type                                   c1_wcdma_1500_im_level_4;
  
  nvi_int16_type                                   c1_wcdma_1500_lna_range_offset_2;
  
  nvi_int16_type                                   c1_wcdma_1500_lna_range_offset_3;
  
  nvi_int16_type                                   c1_wcdma_1500_lna_range_offset_4;
  
  nvi_c1_wcdma_1500_lna_offset_vs_freq_2_type      c1_wcdma_1500_lna_offset_vs_freq_2;
  
  nvi_c1_wcdma_1500_lna_offset_vs_freq_3_type      c1_wcdma_1500_lna_offset_vs_freq_3;
  
  nvi_c1_wcdma_1500_lna_offset_vs_freq_4_type      c1_wcdma_1500_lna_offset_vs_freq_4;
  
  nvi_uint8_type                                   c1_wcdma_1500_im2_i_value;
  
  nvi_uint8_type                                   c1_wcdma_1500_im2_q_value;
  
  nvi_uint8_type                                   c1_wcdma_1500_im2_transconductor_value;
  
  nvi_uint8_type                                   c1_wcdma_1500_nonbypass_timer;
  
  nvi_uint16_type                                  c1_wcdma_1500_bypass_timer;
  
  nvi_int16_type                                   c1_wcdma_1500_lna_range_offset;
  
  nvi_c1_wcdma_1500_lna_offset_vs_freq_type        c1_wcdma_1500_lna_offset_vs_freq;
  
  nvi_c1_wcdma_1500_rx_cal_chan_type               c1_wcdma_1500_rx_cal_chan;
  
  nvi_c1_rf_antsel_umts_1500_type                  c1_rf_antsel_umts_1500;
  
  nvi_c1_wcdma_1500_lna_phase_ctl_type             c1_wcdma_1500_lna_phase_ctl;
  
  nvi_int16_type                                   c1_wcdma_1500_rxf_mis_comp_a_coeff;
  
  nvi_int16_type                                   c1_wcdma_1500_rxf_mis_comp_b_coeff;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_i_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_i_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_i_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_i_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_i_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_i_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_i_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_i_coef14_15;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_q_coef0_1;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_q_coef2_3;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_q_coef4_5;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_q_coef6_7;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_q_coef8_9;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_q_coef10_11;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_q_coef12_13;
  
  nvi_uint32_type                                  c1_wcdma_1500_rxf_ici_q_coef14_15;
  
  nvi_uint8_type                                   c1_wcdma_1500_rxf_ici_iq_trunc;
  
  nvi_wcdma_1500_pa_comp_up_vs_freq_type           wcdma_1500_pa_comp_up_vs_freq;
  
  nvi_wcdma_1500_pa_comp_down_vs_freq_type         wcdma_1500_pa_comp_down_vs_freq;
  
  nvi_wcdma_1500_pa_comp_up_r2_vs_freq_type        wcdma_1500_pa_comp_up_r2_vs_freq;
  
  nvi_wcdma_1500_pa_comp_down_r2_vs_freq_type      wcdma_1500_pa_comp_down_r2_vs_freq;
  
  nvi_wcdma_1500_pa_comp_up_r3_vs_freq_type        wcdma_1500_pa_comp_up_r3_vs_freq;
  
  nvi_wcdma_1500_pa_comp_down_r3_vs_freq_type      wcdma_1500_pa_comp_down_r3_vs_freq;
  
  nvi_wcdma_1500_exp_hdet_vs_agc_v2_type           wcdma_1500_exp_hdet_vs_agc_v2;
  
  nvi_uint16_type                                  wcdma_1500_hdet_off_v2;
  
  nvi_uint16_type                                  wcdma_1500_hdet_spn_v2;
  
  nvi_wcdma_2100_tx_lin_master_3_enh_type          wcdma_2100_tx_lin_master_3_enh;
  
  nvi_wcdma_800_tx_lin_master_3_enh_type           wcdma_800_tx_lin_master_3_enh;
  
  nvi_wcdma_900_tx_lin_master_3_enh_type           wcdma_900_tx_lin_master_3_enh;
  
  nvi_wcdma_bc4_tx_lin_master_3_enh_type           wcdma_bc4_tx_lin_master_3_enh;
  
  nvi_wcdma_1800_tx_lin_master_3_enh_type          wcdma_1800_tx_lin_master_3_enh;
  
  nvi_wcdma_1900_tx_lin_master_3_enh_type          wcdma_1900_tx_lin_master_3_enh;
  
  nvi_wcdma_1500_tx_lin_master_3_enh_type          wcdma_1500_tx_lin_master_3_enh;
  
  nvi_wcdma_2100_tx_pdm_lin_3_enh_type             wcdma_2100_tx_pdm_lin_3_enh;
  
  nvi_wcdma_800_tx_pdm_lin_3_enh_type              wcdma_800_tx_pdm_lin_3_enh;
  
  nvi_wcdma_900_tx_pdm_lin_3_enh_type              wcdma_900_tx_pdm_lin_3_enh;
  
  nvi_wcdma_bc4_tx_pdm_lin_3_enh_type              wcdma_bc4_tx_pdm_lin_3_enh;
  
  nvi_wcdma_1800_tx_pdm_lin_3_enh_type             wcdma_1800_tx_pdm_lin_3_enh;
  
  nvi_wcdma_1900_tx_pdm_lin_3_enh_type             wcdma_1900_tx_pdm_lin_3_enh;
  
  nvi_wcdma_1500_tx_pdm_lin_3_enh_type             wcdma_1500_tx_pdm_lin_3_enh;
  
  nvi_undp_uim_dvrstr_type                         undp_uim_drvstr;
  
  nvi_uint8_type                                   gnss_enable_external_confidence_infor;
  
  nvi_gnss_internal_confidence_stationary_type     gnss_internal_confidence_stationary;
  
  nvi_gnss_internal_confidence_non_stationary_type gnss_internal_confidence_non_stationary;
  
  nvi_uint8_type                                   gnss_xspi_injection_timeout;
  
  nvi_boolean_type                                 lu_reject_auto_enabled;
  
  nvi_extended_equivalent_plmn_list_type           extended_equivalent_plmn_list;
  
  nvi_data_call_over_ehrpd_only_type               data_call_over_ehrpd_only;
  
  nvi_wcdma_2100_rxf_ici_cal_data_car0_type        wcdma_2100_rxf_ici_cal_data_car0;
  
  nvi_wcdma_2100_rxf_ici_cal_data_car1_type        wcdma_2100_rxf_ici_cal_data_car1;
  
  nvi_c1_wcdma_2100_rxf_ici_cal_data_car0_type     c1_wcdma_2100_rxf_ici_cal_data_car0;
  
  nvi_c1_wcdma_2100_rxf_ici_cal_data_car1_type     c1_wcdma_2100_rxf_ici_cal_data_car1;
  
  nvi_uint32_type                                  gobi_qdl_index;
  
  nvi_uint32_type                                  gobi_boot_config;
  
  nvi_gobi_boot_uqcn_filename_type                 gobi_boot_uqcn_filename;
  
  nvi_uint8_type                                   gobi_boot_amss_part_index;
  
  nvi_gobi_image_table_type                        gobi_image_table;
  
  nvi_uint32_type                                  rodem_off_display;
  
  nvi_wcdma_800_rxf_ici_cal_data_car0_type         wcdma_800_rxf_ici_cal_data_car0;
  
  nvi_wcdma_800_rxf_ici_cal_data_car1_type         wcdma_800_rxf_ici_cal_data_car1;
  
  nvi_c1_wcdma_800_rxf_ici_cal_data_car0_type      c1_wcdma_800_rxf_ici_cal_data_car0;
  
  nvi_c1_wcdma_800_rxf_ici_cal_data_car1_type      c1_wcdma_800_rxf_ici_cal_data_car1;
  
  nvi_ddtm_allow_so_list_s_type                    ddtm_allow_so_pages;
  
  nvi_cgps_sm_supl_network_params_type             cgps_sm_supl_network_params;
  
  nvi_uint8_type                                   hdet_autocal_offset;
  
  nvi_uint32_type                                  gnss_oem_feature_mask;
  
  nvi_boolean_type                                 cdma_so73_enabled;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_offset_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_offset_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_offset_2_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_offset_2_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_offset_3_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_offset_3_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_offset_4_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_offset_4_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_offset_5_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_offset_5_car1;
  
  nvi_int16_type                                   wcdma_dc1_vga_gain_offset_car1;
  
  nvi_int16_type                                   wcdma_dc2_vga_gain_offset_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_rise_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_rise_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_rise_2_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_rise_2_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_rise_3_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_rise_3_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_rise_4_car1;
  
  nvi_uint8_type                                   wcdma_dc2_lna_range_rise_4_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_rise_5_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_rise_5_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_fall_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_fall_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_fall_2_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_fall_2_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_fall_3_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_fall_3_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_fall_4_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_fall_4_car1;
  
  nvi_int16_type                                   wcdma_dc1_lna_range_fall_5_car1;
  
  nvi_int16_type                                   wcdma_dc2_lna_range_fall_5_car1;
  
  nvi_wcdma_dc1_rxf_ici_cal_data_car0_type         wcdma_dc1_rxf_ici_cal_data_car0;
  
  nvi_wcdma_dc2_rxf_ici_cal_data_car0_type         wcdma_dc2_rxf_ici_cal_data_car0;
  
  nvi_wcdma_dc1_rxf_ici_cal_data_car1_type         wcdma_dc1_rxf_ici_cal_data_car1;
  
  nvi_wcdma_dc2_rxf_ici_cal_data_car1_type         wcdma_dc2_rxf_ici_cal_data_car1;
  
  nvi_c1_wcdma_dc1_rxf_ici_cal_data_car0_type      c1_wcdma_dc1_rxf_ici_cal_data_car0;
  
  nvi_c1_wcdma_dc2_rxf_ici_cal_data_car0_type      c1_wcdma_dc2_rxf_ici_cal_data_car0;
  
  nvi_c1_wcdma_dc1_rxf_ici_cal_data_car1_type      c1_wcdma_dc1_rxf_ici_cal_data_car1;
  
  nvi_c1_wcdma_dc2_rxf_ici_cal_data_car1_type      c1_wcdma_dc2_rxf_ici_cal_data_car1;
  
  nvi_int16_type                                   c1_wcdma_dc1_lna_range_offset_car1;
  
  nvi_int16_type                                   c1_wcdma_dc2_lna_range_offset_car1;
  
  nvi_int16_type                                   c1_wcdma_dc1_lna_range_offset_2_car1;
  
  nvi_int16_type                                   c1_wcdma_dc2_lna_range_offset_2_car1;
  
  nvi_int16_type                                   c1_wcdma_dc1_lna_range_offset_3_car1;
  
  nvi_int16_type                                   c1_wcdma_dc2_lna_range_offset_3_car1;
  
  nvi_int16_type                                   c1_wcdma_dc1_lna_range_offset_4_car1;
  
  nvi_int16_type                                   c1_wcdma_dc2_lna_range_offset_4_car1;
  
  nvi_int16_type                                   c1_wcdma_dc1_lna_range_offset_5_car1;
  
  nvi_int16_type                                   c1_wcdma_dc2_lna_range_offset_5_car1;
  
  nvi_int16_type                                   c1_wcdma_dc1_vga_gain_offset_car1;
  
  nvi_int16_type                                   c1_wcdma_dc2_vga_gain_offset_car1;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_offset_car1;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_offset_2_car1;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_offset_3_car1;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_offset_4_car1;
  
  nvi_int16_type                                   c1_wcdma_2100_lna_range_offset_5_car1;
  
  nvi_int16_type                                   c1_wcdma_2100_vga_gain_offset_car1;
  
  nvi_lte_b17_c1_rx_gain_vs_freq_i_type            lte_b17_c1_rx_gain_vs_freq_i;
  
  nvi_lte_b13_exp_lpm_hdet_vs_agc_type             lte_b13_exp_lpm_hdet_vs_agc;
  
  nvi_uint16_type                                  lte_b13_hdet_hpm_lpm_switch_point;
  
  nvi_lte_b13_tx_limit_vs_freq_lpm_type            lte_b13_tx_limit_vs_freq_lpm;
  
  nvi_uint16_type                                  lte_b1_hdet_hpm_lpm_switch_point;
  
  nvi_lte_b1_exp_lpm_hdet_vs_agc_type              lte_b1_exp_lpm_hdet_vs_agc;
  
  nvi_lte_b1_tx_limit_vs_freq_lpm_type             lte_b1_tx_limit_vs_freq_lpm;
  
  nvi_therm_bins_2_type                            therm_bins_2;
  
  nvi_gsm_prui_00_type                             gsm_prui_00;
  
  nvi_gsm_prui_01_type                             gsm_prui_01;
  
  nvi_gsm_prui_02_type                             gsm_prui_02;
  
  nvi_gsm_prui_03_type                             gsm_prui_03;
  
  nvi_gsm_prui_04_type                             gsm_prui_04;
  
  nvi_gsm_prui_05_type                             gsm_prui_05;
  
  nvi_gsm_prui_06_type                             gsm_prui_06;
  
  nvi_gsm_prui_07_type                             gsm_prui_07;
  
  nvi_gsm_prui_08_type                             gsm_prui_08;
  
  nvi_gsm_prui_09_type                             gsm_prui_09;
  
  nvi_gsm_prui_10_type                             gsm_prui_10;
  
  nvi_gsm_prdi_00_type                             gsm_prdi_00;
  
  nvi_gsm_prdi_01_type                             gsm_prdi_01;
  
  nvi_gsm_prdi_02_type                             gsm_prdi_02;
  
  nvi_gsm_prdi_03_type                             gsm_prdi_03;
  
  nvi_gsm_prdi_04_type                             gsm_prdi_04;
  
  nvi_gsm_prdi_05_type                             gsm_prdi_05;
  
  nvi_gsm_prdi_06_type                             gsm_prdi_06;
  
  nvi_gsm_prdi_07_type                             gsm_prdi_07;
  
  nvi_gsm_prdi_08_type                             gsm_prdi_08;
  
  nvi_gsm_prdi_09_type                             gsm_prdi_09;
  
  nvi_gsm_prdi_10_type                             gsm_prdi_10;
  
  nvi_gsm_prdi_11_type                             gsm_prdi_11;
  
  nvi_dcs_prui_00_type                             dcs_prui_00;
  
  nvi_dcs_prui_01_type                             dcs_prui_01;
  
  nvi_dcs_prui_02_type                             dcs_prui_02;
  
  nvi_dcs_prui_03_type                             dcs_prui_03;
  
  nvi_dcs_prui_04_type                             dcs_prui_04;
  
  nvi_dcs_prui_05_type                             dcs_prui_05;
  
  nvi_dcs_prui_06_type                             dcs_prui_06;
  
  nvi_dcs_prui_07_type                             dcs_prui_07;
  
  nvi_dcs_prui_08_type                             dcs_prui_08;
  
  nvi_dcs_prui_09_type                             dcs_prui_09;
  
  nvi_dcs_prui_10_type                             dcs_prui_10;
  
  nvi_dcs_prui_11_type                             dcs_prui_11;
  
  nvi_dcs_prui_12_type                             dcs_prui_12;
  
  nvi_dcs_prdi_00_type                             dcs_prdi_00;
  
  nvi_dcs_prdi_01_type                             dcs_prdi_01;
  
  nvi_dcs_prdi_02_type                             dcs_prdi_02;
  
  nvi_dcs_prdi_03_type                             dcs_prdi_03;
  
  nvi_dcs_prdi_04_type                             dcs_prdi_04;
  
  nvi_dcs_prdi_05_type                             dcs_prdi_05;
  
  nvi_dcs_prdi_06_type                             dcs_prdi_06;
  
  nvi_dcs_prdi_07_type                             dcs_prdi_07;
  
  nvi_dcs_prdi_08_type                             dcs_prdi_08;
  
  nvi_dcs_prdi_09_type                             dcs_prdi_09;
  
  nvi_dcs_prdi_10_type                             dcs_prdi_10;
  
  nvi_dcs_prdi_11_type                             dcs_prdi_11;
  
  nvi_dcs_prdi_12_type                             dcs_prdi_12;
  
  nvi_gsm_1900_prui_00_type                        gsm_1900_prui_00;
  
  nvi_gsm_1900_prui_01_type                        gsm_1900_prui_01;
  
  nvi_gsm_1900_prui_02_type                        gsm_1900_prui_02;
  
  nvi_gsm_1900_prui_03_type                        gsm_1900_prui_03;
  
  nvi_gsm_1900_prui_04_type                        gsm_1900_prui_04;
  
  nvi_gsm_1900_prui_05_type                        gsm_1900_prui_05;
  
  nvi_gsm_1900_prui_06_type                        gsm_1900_prui_06;
  
  nvi_gsm_1900_prui_07_type                        gsm_1900_prui_07;
  
  nvi_gsm_1900_prui_08_type                        gsm_1900_prui_08;
  
  nvi_gsm_1900_prui_09_type                        gsm_1900_prui_09;
  
  nvi_gsm_1900_prui_10_type                        gsm_1900_prui_10;
  
  nvi_gsm_1900_prui_11_type                        gsm_1900_prui_11;
  
  nvi_gsm_1900_prui_12_type                        gsm_1900_prui_12;
  
  nvi_gsm_1900_prdi_02_type                        gsm_1900_prdi_02;
  
  nvi_gsm_1900_prdi_03_type                        gsm_1900_prdi_03;
  
  nvi_gsm_1900_prdi_04_type                        gsm_1900_prdi_04;
  
  nvi_gsm_1900_prdi_05_type                        gsm_1900_prdi_05;
  
  nvi_gsm_1900_prdi_06_type                        gsm_1900_prdi_06;
  
  nvi_gsm_1900_prdi_07_type                        gsm_1900_prdi_07;
  
  nvi_gsm_1900_prdi_09_type                        gsm_1900_prdi_09;
  
  nvi_gsm_1900_prdi_10_type                        gsm_1900_prdi_10;
  
  nvi_gsm_1900_prdi_12_type                        gsm_1900_prdi_12;
  
  nvi_gsm_vl_tl_brui_14_type                       gsm_vl_tl_brui_14;
  
  nvi_gsm_vl_tl_brui_13_type                       gsm_vl_tl_brui_13;
  
  nvi_gsm_vl_tl_brui_12_type                       gsm_vl_tl_brui_12;
  
  nvi_gsm_vl_tl_brdi_14_type                       gsm_vl_tl_brdi_14;
  
  nvi_gsm_vl_tl_brdi_13_type                       gsm_vl_tl_brdi_13;
  
  nvi_gsm_vl_tl_brdi_12_type                       gsm_vl_tl_brdi_12;
  
  nvi_dcs_vl_tl_brui_15_type                       dcs_vl_tl_brui_15;
  
  nvi_dcs_vl_tl_brui_14_type                       dcs_vl_tl_brui_14;
  
  nvi_dcs_vl_tl_brui_13_type                       dcs_vl_tl_brui_13;
  
  nvi_dcs_vl_tl_brdi_15_type                       dcs_vl_tl_brdi_15;
  
  nvi_dcs_vl_tl_brdi_14_type                       dcs_vl_tl_brdi_14;
  
  nvi_dcs_vl_tl_brdi_13_type                       dcs_vl_tl_brdi_13;
  
  nvi_gsm_1900_vl_tl_brui_15_type                  gsm_1900_vl_tl_brui_15;
  
  nvi_gsm_1900_vl_tl_brui_14_type                  gsm_1900_vl_tl_brui_14;
  
  nvi_gsm_1900_vl_tl_brui_13_type                  gsm_1900_vl_tl_brui_13;
  
  nvi_gsm_1900_vl_tl_brdi_15_type                  gsm_1900_vl_tl_brdi_15;
  
  nvi_gsm_1900_vl_tl_brdi_14_type                  gsm_1900_vl_tl_brdi_14;
  
  nvi_gsm_1900_vl_tl_brdi_13_type                  gsm_1900_vl_tl_brdi_13;
  
  nvi_gsm_vm_tl_brui_14_type                       gsm_vm_tl_brui_14;
  
  nvi_gsm_vm_tl_brui_13_type                       gsm_vm_tl_brui_13;
  
  nvi_gsm_vm_tl_brui_12_type                       gsm_vm_tl_brui_12;
  
  nvi_gsm_vm_tl_brdi_14_type                       gsm_vm_tl_brdi_14;
  
  nvi_gsm_vm_tl_brdi_13_type                       gsm_vm_tl_brdi_13;
  
  nvi_gsm_vm_tl_brdi_12_type                       gsm_vm_tl_brdi_12;
  
  nvi_dcs_vm_tl_brui_15_type                       dcs_vm_tl_brui_15;
  
  nvi_dcs_vm_tl_brui_14_type                       dcs_vm_tl_brui_14;
  
  nvi_dcs_vm_tl_brui_13_type                       dcs_vm_tl_brui_13;
  
  nvi_dcs_vm_tl_brdi_15_type                       dcs_vm_tl_brdi_15;
  
  nvi_dcs_vm_tl_brdi_14_type                       dcs_vm_tl_brdi_14;
  
  nvi_dcs_vm_tl_brdi_13_type                       dcs_vm_tl_brdi_13;
  
  nvi_gsm_1900_vm_tl_brui_15_type                  gsm_1900_vm_tl_brui_15;
  
  nvi_gsm_1900_vm_tl_brui_14_type                  gsm_1900_vm_tl_brui_14;
  
  nvi_gsm_1900_vm_tl_brui_13_type                  gsm_1900_vm_tl_brui_13;
  
  nvi_gsm_1900_vm_tl_brdi_15_type                  gsm_1900_vm_tl_brdi_15;
  
  nvi_gsm_1900_vm_tl_brdi_14_type                  gsm_1900_vm_tl_brdi_14;
  
  nvi_gsm_1900_vm_tl_brdi_13_type                  gsm_1900_vm_tl_brdi_13;
  
  nvi_gsm_vh_tl_brui_14_type                       gsm_vh_tl_brui_14;
  
  nvi_gsm_vh_tl_brui_13_type                       gsm_vh_tl_brui_13;
  
  nvi_gsm_vh_tl_brui_12_type                       gsm_vh_tl_brui_12;
  
  nvi_gsm_vh_tl_brdi_14_type                       gsm_vh_tl_brdi_14;
  
  nvi_gsm_vh_tl_brdi_13_type                       gsm_vh_tl_brdi_13;
  
  nvi_gsm_vh_tl_brdi_12_type                       gsm_vh_tl_brdi_12;
  
  nvi_dcs_vh_tl_brui_15_type                       dcs_vh_tl_brui_15;
  
  nvi_dcs_vh_tl_brui_14_type                       dcs_vh_tl_brui_14;
  
  nvi_dcs_vh_tl_brui_13_type                       dcs_vh_tl_brui_13;
  
  nvi_dcs_vh_tl_brdi_15_type                       dcs_vh_tl_brdi_15;
  
  nvi_dcs_vh_tl_brdi_14_type                       dcs_vh_tl_brdi_14;
  
  nvi_dcs_vh_tl_brdi_13_type                       dcs_vh_tl_brdi_13;
  
  nvi_gsm_1900_vh_tl_brui_15_type                  gsm_1900_vh_tl_brui_15;
  
  nvi_gsm_1900_vh_tl_brui_14_type                  gsm_1900_vh_tl_brui_14;
  
  nvi_gsm_1900_vh_tl_brui_13_type                  gsm_1900_vh_tl_brui_13;
  
  nvi_gsm_1900_vh_tl_brdi_15_type                  gsm_1900_vh_tl_brdi_15;
  
  nvi_gsm_1900_vh_tl_brdi_14_type                  gsm_1900_vh_tl_brdi_14;
  
  nvi_gsm_1900_vh_tl_brdi_13_type                  gsm_1900_vh_tl_brdi_13;
  
  nvi_gsm_vl_tm_brui_14_type                       gsm_vl_tm_brui_14;
  
  nvi_gsm_vl_tm_brui_13_type                       gsm_vl_tm_brui_13;
  
  nvi_gsm_vl_tm_brui_12_type                       gsm_vl_tm_brui_12;
  
  nvi_gsm_vl_tm_brdi_14_type                       gsm_vl_tm_brdi_14;
  
  nvi_gsm_vl_tm_brdi_13_type                       gsm_vl_tm_brdi_13;
  
  nvi_gsm_vl_tm_brdi_12_type                       gsm_vl_tm_brdi_12;
  
  nvi_dcs_vl_tm_brui_15_type                       dcs_vl_tm_brui_15;
  
  nvi_dcs_vl_tm_brui_14_type                       dcs_vl_tm_brui_14;
  
  nvi_dcs_vl_tm_brui_13_type                       dcs_vl_tm_brui_13;
  
  nvi_dcs_vl_tm_brdi_15_type                       dcs_vl_tm_brdi_15;
  
  nvi_dcs_vl_tm_brdi_14_type                       dcs_vl_tm_brdi_14;
  
  nvi_dcs_vl_tm_brdi_13_type                       dcs_vl_tm_brdi_13;
  
  nvi_gsm_1900_vl_tm_brui_15_type                  gsm_1900_vl_tm_brui_15;
  
  nvi_gsm_1900_vl_tm_brui_14_type                  gsm_1900_vl_tm_brui_14;
  
  nvi_gsm_1900_vl_tm_brui_13_type                  gsm_1900_vl_tm_brui_13;
  
  nvi_gsm_1900_vl_tm_brdi_15_type                  gsm_1900_vl_tm_brdi_15;
  
  nvi_gsm_1900_vl_tm_brdi_14_type                  gsm_1900_vl_tm_brdi_14;
  
  nvi_gsm_1900_vl_tm_brdi_13_type                  gsm_1900_vl_tm_brdi_13;
  
  nvi_gsm_vm_tm_brui_14_type                       gsm_vm_tm_brui_14;
  
  nvi_gsm_vm_tm_brui_13_type                       gsm_vm_tm_brui_13;
  
  nvi_gsm_vm_tm_brui_12_type                       gsm_vm_tm_brui_12;
  
  nvi_gsm_vm_tm_brdi_14_type                       gsm_vm_tm_brdi_14;
  
  nvi_gsm_vm_tm_brdi_13_type                       gsm_vm_tm_brdi_13;
  
  nvi_gsm_vm_tm_brdi_12_type                       gsm_vm_tm_brdi_12;
  
  nvi_dcs_vm_tm_brui_15_type                       dcs_vm_tm_brui_15;
  
  nvi_dcs_vm_tm_brui_14_type                       dcs_vm_tm_brui_14;
  
  nvi_dcs_vm_tm_brui_13_type                       dcs_vm_tm_brui_13;
  
  nvi_dcs_vm_tm_brdi_15_type                       dcs_vm_tm_brdi_15;
  
  nvi_dcs_vm_tm_brdi_14_type                       dcs_vm_tm_brdi_14;
  
  nvi_dcs_vm_tm_brdi_13_type                       dcs_vm_tm_brdi_13;
  
  nvi_gsm_1900_vm_tm_brui_15_type                  gsm_1900_vm_tm_brui_15;
  
  nvi_gsm_1900_vm_tm_brui_14_type                  gsm_1900_vm_tm_brui_14;
  
  nvi_gsm_1900_vm_tm_brui_13_type                  gsm_1900_vm_tm_brui_13;
  
  nvi_gsm_1900_vm_tm_brdi_15_type                  gsm_1900_vm_tm_brdi_15;
  
  nvi_gsm_1900_vm_tm_brdi_14_type                  gsm_1900_vm_tm_brdi_14;
  
  nvi_gsm_1900_vm_tm_brdi_13_type                  gsm_1900_vm_tm_brdi_13;
  
  nvi_gsm_vh_tm_brui_14_type                       gsm_vh_tm_brui_14;
  
  nvi_gsm_vh_tm_brui_13_type                       gsm_vh_tm_brui_13;
  
  nvi_gsm_vh_tm_brui_12_type                       gsm_vh_tm_brui_12;
  
  nvi_gsm_vh_tm_brdi_14_type                       gsm_vh_tm_brdi_14;
  
  nvi_gsm_vh_tm_brdi_13_type                       gsm_vh_tm_brdi_13;
  
  nvi_gsm_vh_tm_brdi_12_type                       gsm_vh_tm_brdi_12;
  
  nvi_dcs_vh_tm_brui_15_type                       dcs_vh_tm_brui_15;
  
  nvi_dcs_vh_tm_brui_14_type                       dcs_vh_tm_brui_14;
  
  nvi_dcs_vh_tm_brui_13_type                       dcs_vh_tm_brui_13;
  
  nvi_dcs_vh_tm_brdi_15_type                       dcs_vh_tm_brdi_15;
  
  nvi_dcs_vh_tm_brdi_14_type                       dcs_vh_tm_brdi_14;
  
  nvi_dcs_vh_tm_brdi_13_type                       dcs_vh_tm_brdi_13;
  
  nvi_gsm_1900_vh_tm_brui_15_type                  gsm_1900_vh_tm_brui_15;
  
  nvi_gsm_1900_vh_tm_brui_14_type                  gsm_1900_vh_tm_brui_14;
  
  nvi_gsm_1900_vh_tm_brui_13_type                  gsm_1900_vh_tm_brui_13;
  
  nvi_gsm_1900_vh_tm_brdi_15_type                  gsm_1900_vh_tm_brdi_15;
  
  nvi_gsm_1900_vh_tm_brdi_14_type                  gsm_1900_vh_tm_brdi_14;
  
  nvi_gsm_1900_vh_tm_brdi_13_type                  gsm_1900_vh_tm_brdi_13;
  
  nvi_gsm_vl_th_brui_14_type                       gsm_vl_th_brui_14;
  
  nvi_gsm_vl_th_brui_13_type                       gsm_vl_th_brui_13;
  
  nvi_gsm_vl_th_brui_12_type                       gsm_vl_th_brui_12;
  
  nvi_gsm_vl_th_brdi_14_type                       gsm_vl_th_brdi_14;
  
  nvi_gsm_vl_th_brdi_13_type                       gsm_vl_th_brdi_13;
  
  nvi_gsm_vl_th_brdi_12_type                       gsm_vl_th_brdi_12;
  
  nvi_dcs_vl_th_brui_15_type                       dcs_vl_th_brui_15;
  
  nvi_dcs_vl_th_brui_14_type                       dcs_vl_th_brui_14;
  
  nvi_dcs_vl_th_brui_13_type                       dcs_vl_th_brui_13;
  
  nvi_dcs_vl_th_brdi_15_type                       dcs_vl_th_brdi_15;
  
  nvi_dcs_vl_th_brdi_14_type                       dcs_vl_th_brdi_14;
  
  nvi_dcs_vl_th_brdi_13_type                       dcs_vl_th_brdi_13;
  
  nvi_gsm_1900_vl_th_brui_15_type                  gsm_1900_vl_th_brui_15;
  
  nvi_gsm_1900_vl_th_brui_14_type                  gsm_1900_vl_th_brui_14;
  
  nvi_gsm_1900_vl_th_brui_13_type                  gsm_1900_vl_th_brui_13;
  
  nvi_gsm_1900_vl_th_brdi_15_type                  gsm_1900_vl_th_brdi_15;
  
  nvi_gsm_1900_vl_th_brdi_14_type                  gsm_1900_vl_th_brdi_14;
  
  nvi_gsm_1900_vl_th_brdi_13_type                  gsm_1900_vl_th_brdi_13;
  
  nvi_gsm_vm_th_brui_14_type                       gsm_vm_th_brui_14;
  
  nvi_gsm_vm_th_brui_13_type                       gsm_vm_th_brui_13;
  
  nvi_gsm_vm_th_brui_12_type                       gsm_vm_th_brui_12;
  
  nvi_gsm_vm_th_brdi_14_type                       gsm_vm_th_brdi_14;
  
  nvi_gsm_vm_th_brdi_13_type                       gsm_vm_th_brdi_13;
  
  nvi_gsm_vm_th_brdi_12_type                       gsm_vm_th_brdi_12;
  
  nvi_dcs_vm_th_brui_15_type                       dcs_vm_th_brui_15;
  
  nvi_dcs_vm_th_brui_14_type                       dcs_vm_th_brui_14;
  
  nvi_dcs_vm_th_brui_13_type                       dcs_vm_th_brui_13;
  
  nvi_dcs_vm_th_brdi_15_type                       dcs_vm_th_brdi_15;
  
  nvi_dcs_vm_th_brdi_14_type                       dcs_vm_th_brdi_14;
  
  nvi_dcs_vm_th_brdi_13_type                       dcs_vm_th_brdi_13;
  
  nvi_gsm_1900_vm_th_brui_15_type                  gsm_1900_vm_th_brui_15;
  
  nvi_gsm_1900_vm_th_brui_14_type                  gsm_1900_vm_th_brui_14;
  
  nvi_gsm_1900_vm_th_brui_13_type                  gsm_1900_vm_th_brui_13;
  
  nvi_gsm_1900_vm_th_brdi_15_type                  gsm_1900_vm_th_brdi_15;
  
  nvi_gsm_1900_vm_th_brdi_14_type                  gsm_1900_vm_th_brdi_14;
  
  nvi_gsm_1900_vm_th_brdi_13_type                  gsm_1900_vm_th_brdi_13;
  
  nvi_gsm_vh_th_brui_14_type                       gsm_vh_th_brui_14;
  
  nvi_gsm_vh_th_brui_13_type                       gsm_vh_th_brui_13;
  
  nvi_gsm_vh_th_brui_12_type                       gsm_vh_th_brui_12;
  
  nvi_gsm_vh_th_brdi_14_type                       gsm_vh_th_brdi_14;
  
  nvi_gsm_vh_th_brdi_13_type                       gsm_vh_th_brdi_13;
  
  nvi_gsm_vh_th_brdi_12_type                       gsm_vh_th_brdi_12;
  
  nvi_dcs_vh_th_brui_15_type                       dcs_vh_th_brui_15;
  
  nvi_dcs_vh_th_brui_14_type                       dcs_vh_th_brui_14;
  
  nvi_dcs_vh_th_brui_13_type                       dcs_vh_th_brui_13;
  
  nvi_dcs_vh_th_brdi_15_type                       dcs_vh_th_brdi_15;
  
  nvi_dcs_vh_th_brdi_14_type                       dcs_vh_th_brdi_14;
  
  nvi_dcs_vh_th_brdi_13_type                       dcs_vh_th_brdi_13;
  
  nvi_gsm_1900_vh_th_brui_15_type                  gsm_1900_vh_th_brui_15;
  
  nvi_gsm_1900_vh_th_brui_14_type                  gsm_1900_vh_th_brui_14;
  
  nvi_gsm_1900_vh_th_brui_13_type                  gsm_1900_vh_th_brui_13;
  
  nvi_gsm_1900_vh_th_brdi_15_type                  gsm_1900_vh_th_brdi_15;
  
  nvi_gsm_1900_vh_th_brdi_14_type                  gsm_1900_vh_th_brdi_14;
  
  nvi_gsm_1900_vh_th_brdi_13_type                  gsm_1900_vh_th_brdi_13;
  
  nvi_gsm_c0_tx_freq_comp_type                     gsm_c0_tx_freq_comp;
  
  nvi_dcs_c0_tx_freq_comp_type                     dcs_c0_tx_freq_comp;
  
  nvi_gsm_1900_c0_tx_freq_comp_type                gsm_1900_c0_tx_freq_comp;
  
  nvi_gsm_c1_tx_freq_comp_type                     gsm_c1_tx_freq_comp;
  
  nvi_dcs_c1_tx_freq_comp_type                     dcs_c1_tx_freq_comp;
  
  nvi_gsm1900_c1_tx_freq_comp_type                 gsm1900_c1_tx_freq_comp;
  
  nvi_gsm_enable_tx_freq_comp_vs_pcl_type          gsm_enable_tx_freq_comp_vs_pcl;
  
  nvi_dcs_enable_tx_freq_comp_vs_pcl_type          dcs_enable_tx_freq_comp_vs_pcl;
  
  nvi_gsm_1900_enable_tx_freq_comp_vs_pcl_type     gsm_1900_enable_tx_freq_comp_vs_pcl;
  
  nvi_therm_comp_thresholds_type                   therm_comp_thresholds;
  
  nvi_vbatt_comp_thresholds_type                   vbatt_comp_thresholds;
  
  nvi_wcdma_c0_tx_comp_vs_freq_0_type              wcdma_c0_tx_comp_vs_freq_0;
  
  nvi_wcdma_c0_tx_comp_vs_freq_1_type              wcdma_c0_tx_comp_vs_freq_1;
  
  nvi_wcdma_c1_tx_comp_vs_freq_0_type              wcdma_c1_tx_comp_vs_freq_0;
  
  nvi_wcdma_c1_tx_comp_vs_freq_1_type              wcdma_c1_tx_comp_vs_freq_1;
  
  nvi_wcdma_tx_lim_vs_volt_offset_type             wcdma_tx_lim_vs_volt_offset;
  
  nvi_gsm_vl_tl_prui_14_type                       gsm_vl_tl_prui_14;
  
  nvi_gsm_vl_tl_prui_13_type                       gsm_vl_tl_prui_13;
  
  nvi_gsm_vl_tl_prui_12_type                       gsm_vl_tl_prui_12;
  
  nvi_gsm_vl_tl_prdi_14_type                       gsm_vl_tl_prdi_14;
  
  nvi_gsm_vl_tl_prdi_13_type                       gsm_vl_tl_prdi_13;
  
  nvi_gsm_vl_tl_prdi_12_type                       gsm_vl_tl_prdi_12;
  
  nvi_dcs_vl_tl_prui_15_type                       dcs_vl_tl_prui_15;
  
  nvi_dcs_vl_tl_prui_14_type                       dcs_vl_tl_prui_14;
  
  nvi_dcs_vl_tl_prui_13_type                       dcs_vl_tl_prui_13;
  
  nvi_dcs_vl_tl_prdi_15_type                       dcs_vl_tl_prdi_15;
  
  nvi_dcs_vl_tl_prdi_14_type                       dcs_vl_tl_prdi_14;
  
  nvi_dcs_vl_tl_prdi_13_type                       dcs_vl_tl_prdi_13;
  
  nvi_gsm_1900_vl_tl_prui_15_type                  gsm_1900_vl_tl_prui_15;
  
  nvi_gsm_1900_vl_tl_prui_14_type                  gsm_1900_vl_tl_prui_14;
  
  nvi_gsm_1900_vl_tl_prui_13_type                  gsm_1900_vl_tl_prui_13;
  
  nvi_gsm_1900_vl_tl_prdi_15_type                  gsm_1900_vl_tl_prdi_15;
  
  nvi_gsm_1900_vl_tl_prdi_14_type                  gsm_1900_vl_tl_prdi_14;
  
  nvi_gsm_1900_vl_tl_prdi_13_type                  gsm_1900_vl_tl_prdi_13;
  
  nvi_gsm_vm_tl_prui_14_type                       gsm_vm_tl_prui_14;
  
  nvi_gsm_vm_tl_prui_13_type                       gsm_vm_tl_prui_13;
  
  nvi_gsm_vm_tl_prui_12_type                       gsm_vm_tl_prui_12;
  
  nvi_gsm_vm_tl_prdi_14_type                       gsm_vm_tl_prdi_14;
  
  nvi_gsm_vm_tl_prdi_13_type                       gsm_vm_tl_prdi_13;
  
  nvi_gsm_vm_tl_prdi_12_type                       gsm_vm_tl_prdi_12;
  
  nvi_dcs_vm_tl_prui_15_type                       dcs_vm_tl_prui_15;
  
  nvi_dcs_vm_tl_prui_14_type                       dcs_vm_tl_prui_14;
  
  nvi_dcs_vm_tl_prui_13_type                       dcs_vm_tl_prui_13;
  
  nvi_dcs_vm_tl_prdi_15_type                       dcs_vm_tl_prdi_15;
  
  nvi_dcs_vm_tl_prdi_14_type                       dcs_vm_tl_prdi_14;
  
  nvi_dcs_vm_tl_prdi_13_type                       dcs_vm_tl_prdi_13;
  
  nvi_gsm_1900_vm_tl_prui_15_type                  gsm_1900_vm_tl_prui_15;
  
  nvi_gsm_1900_vm_tl_prui_14_type                  gsm_1900_vm_tl_prui_14;
  
  nvi_gsm_1900_vm_tl_prui_13_type                  gsm_1900_vm_tl_prui_13;
  
  nvi_gsm_1900_vm_tl_prdi_15_type                  gsm_1900_vm_tl_prdi_15;
  
  nvi_gsm_1900_vm_tl_prdi_14_type                  gsm_1900_vm_tl_prdi_14;
  
  nvi_gsm_1900_vm_tl_prdi_13_type                  gsm_1900_vm_tl_prdi_13;
  
  nvi_gsm_vh_tl_prui_14_type                       gsm_vh_tl_prui_14;
  
  nvi_gsm_vh_tl_prui_13_type                       gsm_vh_tl_prui_13;
  
  nvi_gsm_vh_tl_prui_12_type                       gsm_vh_tl_prui_12;
  
  nvi_gsm_vh_tl_prdi_14_type                       gsm_vh_tl_prdi_14;
  
  nvi_gsm_vh_tl_prdi_13_type                       gsm_vh_tl_prdi_13;
  
  nvi_gsm_vh_tl_prdi_12_type                       gsm_vh_tl_prdi_12;
  
  nvi_dcs_vh_tl_prui_15_type                       dcs_vh_tl_prui_15;
  
  nvi_dcs_vh_tl_prui_14_type                       dcs_vh_tl_prui_14;
  
  nvi_dcs_vh_tl_prui_13_type                       dcs_vh_tl_prui_13;
  
  nvi_dcs_vh_tl_prdi_15_type                       dcs_vh_tl_prdi_15;
  
  nvi_dcs_vh_tl_prdi_14_type                       dcs_vh_tl_prdi_14;
  
  nvi_dcs_vh_tl_prdi_13_type                       dcs_vh_tl_prdi_13;
  
  nvi_gsm_1900_vh_tl_prui_15_type                  gsm_1900_vh_tl_prui_15;
  
  nvi_gsm_1900_vh_tl_prui_14_type                  gsm_1900_vh_tl_prui_14;
  
  nvi_gsm_1900_vh_tl_prui_13_type                  gsm_1900_vh_tl_prui_13;
  
  nvi_gsm_1900_vh_tl_prdi_15_type                  gsm_1900_vh_tl_prdi_15;
  
  nvi_gsm_1900_vh_tl_prdi_14_type                  gsm_1900_vh_tl_prdi_14;
  
  nvi_gsm_1900_vh_tl_prdi_13_type                  gsm_1900_vh_tl_prdi_13;
  
  nvi_gsm_vl_tm_prui_14_type                       gsm_vl_tm_prui_14;
  
  nvi_gsm_vl_tm_prui_13_type                       gsm_vl_tm_prui_13;
  
  nvi_gsm_vl_tm_prui_12_type                       gsm_vl_tm_prui_12;
  
  nvi_gsm_vl_tm_prdi_14_type                       gsm_vl_tm_prdi_14;
  
  nvi_gsm_vl_tm_prdi_13_type                       gsm_vl_tm_prdi_13;
  
  nvi_gsm_vl_tm_prdi_12_type                       gsm_vl_tm_prdi_12;
  
  nvi_dcs_vl_tm_prui_15_type                       dcs_vl_tm_prui_15;
  
  nvi_dcs_vl_tm_prui_14_type                       dcs_vl_tm_prui_14;
  
  nvi_dcs_vl_tm_prui_13_type                       dcs_vl_tm_prui_13;
  
  nvi_dcs_vl_tm_prdi_15_type                       dcs_vl_tm_prdi_15;
  
  nvi_dcs_vl_tm_prdi_14_type                       dcs_vl_tm_prdi_14;
  
  nvi_dcs_vl_tm_prdi_13_type                       dcs_vl_tm_prdi_13;
  
  nvi_gsm_1900_vl_tm_prui_15_type                  gsm_1900_vl_tm_prui_15;
  
  nvi_gsm_1900_vl_tm_prui_14_type                  gsm_1900_vl_tm_prui_14;
  
  nvi_gsm_1900_vl_tm_prui_13_type                  gsm_1900_vl_tm_prui_13;
  
  nvi_gsm_1900_vl_tm_prdi_15_type                  gsm_1900_vl_tm_prdi_15;
  
  nvi_gsm_1900_vl_tm_prdi_14_type                  gsm_1900_vl_tm_prdi_14;
  
  nvi_gsm_1900_vl_tm_prdi_13_type                  gsm_1900_vl_tm_prdi_13;
  
  nvi_gsm_vm_tm_prui_14_type                       gsm_vm_tm_prui_14;
  
  nvi_gsm_vm_tm_prui_13_type                       gsm_vm_tm_prui_13;
  
  nvi_gsm_vm_tm_prui_12_type                       gsm_vm_tm_prui_12;
  
  nvi_gsm_vm_tm_prdi_14_type                       gsm_vm_tm_prdi_14;
  
  nvi_gsm_vm_tm_prdi_13_type                       gsm_vm_tm_prdi_13;
  
  nvi_gsm_vm_tm_prdi_12_type                       gsm_vm_tm_prdi_12;
  
  nvi_dcs_vm_tm_prui_15_type                       dcs_vm_tm_prui_15;
  
  nvi_dcs_vm_tm_prui_14_type                       dcs_vm_tm_prui_14;
  
  nvi_dcs_vm_tm_prui_13_type                       dcs_vm_tm_prui_13;
  
  nvi_dcs_vm_tm_prdi_15_type                       dcs_vm_tm_prdi_15;
  
  nvi_dcs_vm_tm_prdi_14_type                       dcs_vm_tm_prdi_14;
  
  nvi_dcs_vm_tm_prdi_13_type                       dcs_vm_tm_prdi_13;
  
  nvi_gsm_1900_vm_tm_prui_15_type                  gsm_1900_vm_tm_prui_15;
  
  nvi_gsm_1900_vm_tm_prui_14_type                  gsm_1900_vm_tm_prui_14;
  
  nvi_gsm_1900_vm_tm_prui_13_type                  gsm_1900_vm_tm_prui_13;
  
  nvi_gsm_1900_vm_tm_prdi_15_type                  gsm_1900_vm_tm_prdi_15;
  
  nvi_gsm_1900_vm_tm_prdi_14_type                  gsm_1900_vm_tm_prdi_14;
  
  nvi_gsm_1900_vm_tm_prdi_13_type                  gsm_1900_vm_tm_prdi_13;
  
  nvi_gsm_vh_tm_prui_14_type                       gsm_vh_tm_prui_14;
  
  nvi_gsm_vh_tm_prui_13_type                       gsm_vh_tm_prui_13;
  
  nvi_gsm_vh_tm_prui_12_type                       gsm_vh_tm_prui_12;
  
  nvi_gsm_vh_tm_prdi_14_type                       gsm_vh_tm_prdi_14;
  
  nvi_gsm_vh_tm_prdi_13_type                       gsm_vh_tm_prdi_13;
  
  nvi_gsm_vh_tm_prdi_12_type                       gsm_vh_tm_prdi_12;
  
  nvi_dcs_vh_tm_prui_15_type                       dcs_vh_tm_prui_15;
  
  nvi_dcs_vh_tm_prui_14_type                       dcs_vh_tm_prui_14;
  
  nvi_dcs_vh_tm_prui_13_type                       dcs_vh_tm_prui_13;
  
  nvi_dcs_vh_tm_prdi_15_type                       dcs_vh_tm_prdi_15;
  
  nvi_dcs_vh_tm_prdi_14_type                       dcs_vh_tm_prdi_14;
  
  nvi_dcs_vh_tm_prdi_13_type                       dcs_vh_tm_prdi_13;
  
  nvi_gsm_1900_vh_tm_prui_15_type                  gsm_1900_vh_tm_prui_15;
  
  nvi_gsm_1900_vh_tm_prui_14_type                  gsm_1900_vh_tm_prui_14;
  
  nvi_gsm_1900_vh_tm_prui_13_type                  gsm_1900_vh_tm_prui_13;
  
  nvi_gsm_1900_vh_tm_prdi_15_type                  gsm_1900_vh_tm_prdi_15;
  
  nvi_gsm_1900_vh_tm_prdi_14_type                  gsm_1900_vh_tm_prdi_14;
  
  nvi_gsm_1900_vh_tm_prdi_13_type                  gsm_1900_vh_tm_prdi_13;
  
  nvi_gsm_vl_th_prui_14_type                       gsm_vl_th_prui_14;
  
  nvi_gsm_vl_th_prui_13_type                       gsm_vl_th_prui_13;
  
  nvi_gsm_vl_th_prui_12_type                       gsm_vl_th_prui_12;
  
  nvi_gsm_vl_th_prdi_14_type                       gsm_vl_th_prdi_14;
  
  nvi_gsm_vl_th_prdi_13_type                       gsm_vl_th_prdi_13;
  
  nvi_gsm_vl_th_prdi_12_type                       gsm_vl_th_prdi_12;
  
  nvi_dcs_vl_th_prui_15_type                       dcs_vl_th_prui_15;
  
  nvi_dcs_vl_th_prui_14_type                       dcs_vl_th_prui_14;
  
  nvi_dcs_vl_th_prui_13_type                       dcs_vl_th_prui_13;
  
  nvi_dcs_vl_th_prdi_15_type                       dcs_vl_th_prdi_15;
  
  nvi_dcs_vl_th_prdi_14_type                       dcs_vl_th_prdi_14;
  
  nvi_dcs_vl_th_prdi_13_type                       dcs_vl_th_prdi_13;
  
  nvi_gsm_1900_vl_th_prui_15_type                  gsm_1900_vl_th_prui_15;
  
  nvi_gsm_1900_vl_th_prui_14_type                  gsm_1900_vl_th_prui_14;
  
  nvi_gsm_1900_vl_th_prui_13_type                  gsm_1900_vl_th_prui_13;
  
  nvi_gsm_1900_vl_th_prdi_15_type                  gsm_1900_vl_th_prdi_15;
  
  nvi_gsm_1900_vl_th_prdi_14_type                  gsm_1900_vl_th_prdi_14;
  
  nvi_gsm_1900_vl_th_prdi_13_type                  gsm_1900_vl_th_prdi_13;
  
  nvi_gsm_vm_th_prui_14_type                       gsm_vm_th_prui_14;
  
  nvi_gsm_vm_th_prui_13_type                       gsm_vm_th_prui_13;
  
  nvi_gsm_vm_th_prui_12_type                       gsm_vm_th_prui_12;
  
  nvi_gsm_vm_th_prdi_14_type                       gsm_vm_th_prdi_14;
  
  nvi_gsm_vm_th_prdi_13_type                       gsm_vm_th_prdi_13;
  
  nvi_gsm_vm_th_prdi_12_type                       gsm_vm_th_prdi_12;
  
  nvi_dcs_vm_th_prui_15_type                       dcs_vm_th_prui_15;
  
  nvi_dcs_vm_th_prui_14_type                       dcs_vm_th_prui_14;
  
  nvi_dcs_vm_th_prui_13_type                       dcs_vm_th_prui_13;
  
  nvi_dcs_vm_th_prdi_15_type                       dcs_vm_th_prdi_15;
  
  nvi_dcs_vm_th_prdi_14_type                       dcs_vm_th_prdi_14;
  
  nvi_dcs_vm_th_prdi_13_type                       dcs_vm_th_prdi_13;
  
  nvi_gsm_1900_vm_th_prui_15_type                  gsm_1900_vm_th_prui_15;
  
  nvi_gsm_1900_vm_th_prui_14_type                  gsm_1900_vm_th_prui_14;
  
  nvi_gsm_1900_vm_th_prui_13_type                  gsm_1900_vm_th_prui_13;
  
  nvi_gsm_1900_vm_th_prdi_15_type                  gsm_1900_vm_th_prdi_15;
  
  nvi_gsm_1900_vm_th_prdi_14_type                  gsm_1900_vm_th_prdi_14;
  
  nvi_gsm_1900_vm_th_prdi_13_type                  gsm_1900_vm_th_prdi_13;
  
  nvi_gsm_vh_th_prui_14_type                       gsm_vh_th_prui_14;
  
  nvi_gsm_vh_th_prui_13_type                       gsm_vh_th_prui_13;
  
  nvi_gsm_vh_th_prui_12_type                       gsm_vh_th_prui_12;
  
  nvi_gsm_vh_th_prdi_14_type                       gsm_vh_th_prdi_14;
  
  nvi_gsm_vh_th_prdi_13_type                       gsm_vh_th_prdi_13;
  
  nvi_gsm_vh_th_prdi_12_type                       gsm_vh_th_prdi_12;
  
  nvi_dcs_vh_th_prui_15_type                       dcs_vh_th_prui_15;
  
  nvi_dcs_vh_th_prui_14_type                       dcs_vh_th_prui_14;
  
  nvi_dcs_vh_th_prui_13_type                       dcs_vh_th_prui_13;
  
  nvi_dcs_vh_th_prdi_15_type                       dcs_vh_th_prdi_15;
  
  nvi_dcs_vh_th_prdi_14_type                       dcs_vh_th_prdi_14;
  
  nvi_dcs_vh_th_prdi_13_type                       dcs_vh_th_prdi_13;
  
  nvi_gsm_1900_vh_th_prui_15_type                  gsm_1900_vh_th_prui_15;
  
  nvi_gsm_1900_vh_th_prui_14_type                  gsm_1900_vh_th_prui_14;
  
  nvi_gsm_1900_vh_th_prui_13_type                  gsm_1900_vh_th_prui_13;
  
  nvi_gsm_1900_vh_th_prdi_15_type                  gsm_1900_vh_th_prdi_15;
  
  nvi_gsm_1900_vh_th_prdi_14_type                  gsm_1900_vh_th_prdi_14;
  
  nvi_gsm_1900_vh_th_prdi_13_type                  gsm_1900_vh_th_prdi_13;
  
  nvi_factory_data_1_type                          factory_data_1;
  
  nvi_factory_data_2_type                          factory_data_2;
  
  nvi_factory_data_3_type                          factory_data_3;
  
  nvi_factory_data_4_type                          factory_data_4;
  
  nvi_gsm_prui_11_type                             gsm_prui_11;
  
  nvi_gsm_1900_prdi_00_type                        gsm_1900_prdi_00;
  
  nvi_gsm_1900_prdi_01_type                        gsm_1900_prdi_01;
  
  nvi_gsm_1900_prdi_11_type                        gsm_1900_prdi_11;
  
  nvi_gsm_1900_prdi_08_type                        gsm_1900_prdi_08;
  
  nvi_device_serial_no_type                        device_serial_no;
} nvi_item_type;

#endif  /* NVI_ITEMS_H */
