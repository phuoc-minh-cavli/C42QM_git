#===============================================================================
#
# Xport RPM Libs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2014-2015,2018-2019 Qualcomm Technologies, Inc.
# All Rights Reserved.
# Qualcomm Technologies, Inc. Confidential and Proprietary.
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.mpss/3.10/mproc/glink/xport_rpm/build/xport_rpm.scons#3 $
#  $DateTime: 2019/08/14 00:45:33 $
#  $Author: pwbldsvc $
#  $Change: 20199023 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 11/02/15   an      Added uImage Glink API for RPM
# 06/11/15   bc      Select generic config file if new MSM_ID doesn't exist
# 05/13/15   db      Added RCINIT function for TN APSS image
# 05/04/15   db      Added compilation support for APSS images
# 01/15/15   bc      Removed RPM macro
# 12/29/14   bc      Adding macro for rpm processor
# 10/20/14   an      Initial version.
#
#===============================================================================
Import('env')
env = env.Clone()

# Do not compile in chips which do not require the interface
if env['MSM_ID'] in ['9x55', '9x45', '6150']:
  Return()

import os

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/core/mproc/glink/xport_rpm/src"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

XPORT_RPM_CONFIG = SRCPATH + '/${MSM_ID}'
if os.path.exists(env.subst(XPORT_RPM_CONFIG)):
   XPORT_RPM_CONFIG_FILE = '${BUILDPATH}/${MSM_ID}/xport_rpm_config.c'
else:
   XPORT_RPM_CONFIG_FILE = '${BUILDPATH}/generic_config/xport_rpm_config.c'
   XPORT_RPM_CONFIG = '${BUILDPATH}/generic_config'

#-------------------------------------------------------------------------------
#  Publish Private APIs
#-------------------------------------------------------------------------------

env.PublishPrivateApi('MPROC_GLINK', [
   "${BUILD_ROOT}/core/mproc/glink/os/inc",
   "${BUILD_ROOT}/core/mproc/glink/xport_rpm/inc",
   XPORT_RPM_CONFIG
] )

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'BUSES',
   'DEBUGTOOLS',
   'HAL',
   'DAL',
   'HWENGINES',
   'MPROC',
   'MEMORY',
   'POWER',
   'SERVICES',
   'SYSTEMDRIVERS',
   'WIREDCONNECTIVITY',

   # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)
env.RequireProtectedApi(['MPROC_GLINK'])

#-------------------------------------------------------------------------------
# Feature Definition
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------

# Sources compiled only in the full image.
XPORT_RPM_SRC = [
   '${BUILDPATH}/xport_rpm.c'
]

# Sources common for both big image and uImage.
XPORT_RPM_COMMON_SRC = [
   '${BUILDPATH}/xport_rpm_cmn.c',
   XPORT_RPM_CONFIG_FILE
]

XPORT_RPM_TOC_SRC = [
   '${BUILDPATH}/xport_rpm_toc.c',
]

# Sources used only for uImage
GLINK_URPM_SRC = [
   '${BUILDPATH}/glink_urpm.c',
]

#-------------------------------------------------------------------------------
# CFLAGS
#-------------------------------------------------------------------------------
env.Append(CFLAGS= "-fno-builtin")

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------
# Add Image-specific Libraries, whose sources should be packed out.
env.AddBinaryLibrary(['RPM_IMAGE', 'CORE_QDSP6_SW', 'CBSP_APPS_IMAGE', 'APPS_IMAGE', 'MODEM_PAGEONLY','MODEM_SENSORONLY'],
                     '${BUILDPATH}/xport_rpm',
                     [XPORT_RPM_SRC])

env.AddBinaryLibrary(['RPM_IMAGE'],
                     '${BUILDPATH}/xport_rpm_toc',
                     [XPORT_RPM_TOC_SRC])

if 'USES_ISLAND' in env:
  env.Append(CCFLAGS = "-G0")
    # Island functions don't support '-fstack-protector'
  if "-fstack-protector" in env['HEXAGON_STKPRO']:
    env.Replace(HEXAGON_STKPRO = "")
  if "-fstack-protector-strong" in env['HEXAGON_STKPRO']:
    env.Replace(HEXAGON_STKPRO = "")
  if env.has_key('USES_NO_STRIP_NO_ODM'):
    glink_urpm_lib = env.Library('${BUILDPATH}/glink_urpm', [XPORT_RPM_COMMON_SRC, GLINK_URPM_SRC])
  else:
    glink_urpm_lib = File(env.subst("${BUILDPATH}/glink_urpm${LIBSUFFIX}"))
  glink_urpm_tags= ['CORE_MODEM', 'CORE_QDSP6_SW']
  env.AddLibsToImage(glink_urpm_tags, glink_urpm_lib)
  env.AddIslandLibrary(glink_urpm_tags, glink_urpm_lib)
else:
  env.AddBinaryLibrary(['RPM_IMAGE', 'CORE_QDSP6_SW', 'CBSP_APPS_IMAGE', 'APPS_IMAGE', 'MODEM_PAGEONLY','MODEM_SENSORONLY'],
                       '${BUILDPATH}/xport_rpm_cmn',
                       [XPORT_RPM_COMMON_SRC])

#-------------------------------------------------------------------------------
# CleanPack (Remove) all remaining files for peripheral processors
#-------------------------------------------------------------------------------
PACK_OUT = env.FindFiles(['*.h', '*.c', '*.s'], SRCPATH)
# Don't include RPM in this list, because it already does we want automatically.
env.CleanPack(['CORE_QDSP6_SW'], PACK_OUT)

#-------------------------------------------------------------------------------
# RCINIT Task and Init Fields and Initialization
#-------------------------------------------------------------------------------
RCINIT_INIT_XPORT_RPM_INIT = {
  'sequence_group'             : 'RCINIT_GROUP_0',          # required    #Todo: using GROUP_1 for testing asin GROUP_0 there is some crash
  'init_name'                  : 'xport_rpm',               # required
  'init_function'              : 'xport_rpm_init',          # required
  'dependencies'               : ['smem','glink']      #Todo: Need to remove smem.. only added for testing
}

if 'USES_RCINIT' in env:
  RCINIT_IMG = ['CORE_QDSP6_SW', 'CBSP_APPS_IMAGE', 'APPS_IMAGE', 'MODEM_PAGEONLY','MODEM_SENSORONLY']
  env.AddRCInitFunc( RCINIT_IMG, RCINIT_INIT_XPORT_RPM_INIT )
