#===============================================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2013-2020 QUALCOMM Technologies Incorporated. All Rights Reserved
#
# Qualcomm Technologies Proprietary and Confidential.
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/core.mpss/3.10/systemdrivers/pmic/framework/build/pmic_framework.scons#7 $
# $DateTime: 2020/03/31 05:40:28 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 06/25/12   hs      Moved to core\systemdrivers.
# 03/09/12   hs      Added support for RPM.
# 04/23/11   prp     Created
#===============================================================================

Import('env')

LIB_NAME        = 'pmic_framework'
PM_PAGEONLY_LIB_NAME        = 'pmic_framework_pageonly'
IMAGE_SOURCES   = ['MODEM_MODEM','CORE_MODEM','MODEM_SENSORONLY','CORE_QDSP6_SW','SBL3_BOOT_IMAGE', 'PMIC_BOOT_DRIVER', 'RPM_IMAGE']
PM_PAGEONLY_IMAGE_SOURCES   = ['MODEM_PAGEONLY']

LIB_SRC         = 'src'
LIB_TEST        = 'test'


from glob import glob

env = env.Clone()

# Method to abort processing of this file, if not required for current air interface mode, etc
#if ( (USES_TEST_FLAG1 in env and USES_TEST_FLAG2 not in env) or USES_TEST_FLAG3 not in env)):
#   Return( )

#-------------------------------------------------------------------------------
# Source PATH:
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)


env.RequirePublicApi([
    'BUSES',
    'DAL',
    'DEBUGTOOLS',
    'HWENGINES',
    'KERNEL',
    'SERVICES',
    'SYSTEMDRIVERS',
    ],
    area='CORE')

env.RequireProtectedApi([
    'PMIC_APPLICATION',
    'PMIC_COMM',
    'PMIC_CONFIG',
    'PMIC_DRIVERS',
    'PMIC_DEVICES',
    'PMIC_FRAMEWORK',
    'PMIC_NPA',
    'PMIC_TARGET_RPM',
    'PMIC_TARGET_RPM_SBL1',
    'PMIC_TARGET_APPSPROC_SBL3',
    'PMIC_UTILS',
    'PMIC_TARGET',
    ])    

env.RequireRestrictedApi([        
	'SYSTEMDRIVERS_PMIC',
    ])

##################################################################################
############# uncomment this section if protected directory is added #############

#env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that AddBinaryLibrary can be launched
#LIB_SOURCES = []  #empy list

#if 'USES_NO_STRIP_NO_ODM' in env:

#        SOURCE_FILES = [ ]

#find all .c
#        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.c'))

#find all .cpp files
#        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))

#find all .s files
#        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.s'))


#        for filename in SOURCE_FILES:
#                LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that the pre-built library will be added to the list file
#env.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_protected',[
#    LIB_SOURCES,
#    ])

##################################################################################

LIB_SOURCES = [ ]  #empy list
PM_PAGEONLY_LIB_SOURCES = [ ]  #empy list

SOURCE_FILES = [ ]
PM_PAGEONLY_SOURCE_FILES = [ ]

#find all .c, .cpp files, .s files
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.s'))
PM_PAGEONLY_SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/pm_version.c'))
PM_PAGEONLY_SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/pm_device.c'))


if 'USES_PM_TEST' in env:
    #find all .c, .cpp files, .s files
    SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_TEST+'/*.c'))
    SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_TEST+'/*.cpp'))
    SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_TEST+'/*.s'))

    #define the macro for compilation of test code
    env.Append(CPPDEFINES = 'PM_TEST_FRAMEWORK_DRIVER')


for filename in PM_PAGEONLY_SOURCE_FILES:
    PM_PAGEONLY_LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))

for filename in SOURCE_FILES:
    LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


if PM_PAGEONLY_LIB_SOURCES:
    env.AddLibrary(PM_PAGEONLY_IMAGE_SOURCES, '${BUILDPATH}/'+PM_PAGEONLY_LIB_NAME,[
        PM_PAGEONLY_LIB_SOURCES,
    ])

if LIB_SOURCES:
    env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME,[
        LIB_SOURCES,
    ])

if 'USES_RCINIT' in env:
   RCINIT_IMG = ['CORE_MODEM','MODEM_SENSORONLY', 'CORE_QDSP6_SW']
   env.AddRCInitFunc(
    RCINIT_IMG,
    {
     'sequence_group'             : 'RCINIT_GROUP_0',                   # required
     'init_name'                  : 'pm',                               # required
     'init_function'              : 'pm_init',                          # required
     'dependencies'               : ['dalsys','smem_log','npa','rpm']
    })
	
if 'USES_RCINIT' in env:
   RCINIT_IMG = ['MODEM_PAGEONLY']
   env.AddRCInitFunc(
    RCINIT_IMG,
    {
     'sequence_group'             : 'RCINIT_GROUP_0',                   # required
     'init_name'                  : 'pm',                               # required
     'init_function'              : 'pm_device_setup',                  # required
     'dependencies'               : ['dalsys']
    })
