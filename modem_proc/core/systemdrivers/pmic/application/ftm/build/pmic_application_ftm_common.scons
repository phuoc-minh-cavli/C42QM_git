#===============================================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2011 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/core.mpss/3.10/systemdrivers/pmic/application/ftm/build/pmic_application_ftm_common.scons#2 $
# $DateTime: 2019/08/14 00:45:33 $ 
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#===============================================================================

Import('env')

LIB_NAME        = 'pmic_application_ftm'
IMAGE_SOURCES   = ['MODEM_MODEM','CORE_MODEM','MODEM_SENSORONLY','CORE_QDSP6_SW','SBL3_BOOT_IMAGE', 'PMIC_BOOT_DRIVER', 'MODEM_APPS']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'


from glob import glob

env = env.Clone()

# Method to abort processing of this file, if not required for current air interface mode, etc
#if ( (USES_TEST_FLAG1 in env and USES_TEST_FLAG2 not in env) or USES_TEST_FLAG3 not in env)):
#   Return( )

#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

    
env.RequireProtectedApi([        
    'PMIC_APPLICATION',
    'PMIC_COMM',
    'PMIC_CONFIG',
    'PMIC_DRIVERS',
    'PMIC_DEVICES',
    'PMIC_FRAMEWORK',
    'PMIC_NPA',
    'PMIC_TARGET_RPM',
    'PMIC_TARGET_RPM_SBL1',
    'PMIC_TARGET_APPSPROC_SBL3',
    'PMIC_UTILS',
    ])

env.RequirePublicApi([
    'BUSES',
    'DAL',
    'DEBUGTOOLS',
    'HWENGINES',
    'KERNEL',
    'SERVICES',
    'SYSTEMDRIVERS',
    ],
    area='CORE')

	#uncomment this section if src directory is added

LIB_SOURCES = [ ]  #empy list

SOURCE_FILES = [ ] 

#find all .c
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))

#find all .cpp files 
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))

#find all .s files
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.s'))


for filename in SOURCE_FILES:
        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


if LIB_SOURCES:
        env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME,[
        LIB_SOURCES,
        ])

#env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that AddBinaryLibrary can be launched
#LIB_SOURCES = []  #empy list


#SOURCE_FILES = [ ] 

#find all .c
#SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.c'))

#find all .cpp files 
#SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))

#find all .s files
#SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.s'))


#for filename in SOURCE_FILES:
#        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))

#PACK_FILES = env.FindFiles(['*.h', '*.xml', '*.c', '*.cpp', '*.s'], (SRCPATH + '/'+LIB_PROTECTED)) 
#env.CleanPack(IMAGE_SOURCES, PACK_FILES)

#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that the pre-built library will be added to the list file
#env.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_protected',[
#    LIB_SOURCES,
#    ])

if 'USES_RCINIT' in env:
   RCINIT_IMG = ['CORE_MODEM', 'CORE_QDSP6_SW']
   env.AddRCInitFunc(
    RCINIT_IMG,
    {
     'sequence_group'             : 'RCINIT_GROUP_0',                   # required
     'init_name'                  : 'ftm_pmic_diag',                    # required
     'init_function'              : 'ftm_pmic_diag_init',               # required
     'dependencies'               : ['dalsys','smem_log','npa','rpm']
    })
