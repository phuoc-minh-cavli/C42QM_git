#===============================================================================
#
# ADSPPM Build Script
#
# GENERAL DESCRIPTION
#    Builds the ADSPPM libraries for all target.
#
# Copyright (c) 2017 Qualcomm Technologies, Inc.
# All Rights Reserved.
# Qualcomm Technologies, Inc. Confidential and Proprietary.
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.mpss/3.10/power/adsppm/build/adsppm.scons#4 $
#  $DateTime: 2019/09/06 12:15:33 $
#  $Author: pwbldsvc $
#  $Change: 20452015 $
#
#===============================================================================
import glob, os
import fnmatch
import itertools
import subprocess

Import('env')
env = env.Clone()
env.Append(CFLAGS = " -Wno-error=unused-function")
#env.Append(CCFLAGS = " -O0")
#env.AddUsesFlags('USES_ADSPPM_TEST_SPD')
#env.AddUsesFlags('USES_ADSPPM_TEST_MPD')

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

COMMON_SRCPATH = SRCPATH + '/src/common'
TEST_SRCPATH = SRCPATH + '/src/test'

#-------------------------------------------------------------------------------
# CleanPack (Remove) all remaining files for adsppm unit test case
#-------------------------------------------------------------------------------
PACK_OUT = env.FindFiles(['*.h', '*.c', '*.s'], TEST_SRCPATH)
env.CleanPack(['CORE_QDSP6_SW'], PACK_OUT)

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
    'DAL',
    'BUSES',
    'DEBUGTOOLS',
    'DEBUGTRACE',
    'MPROC',
    'POWER',
    'SERVICES',
    'SYSTEMDRIVERS',
    'KERNEL', # needs to be last also contains wrong comdef.h
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)
env.RequireProtectedApi(['POWER_UTILS'])

env.RequirePublicApi(['TMD'], area='QMIMSGS')
env.RequirePublicApi(['ADSP_SYSMON'], area='performance')

env.PublishPrivateApi('ADSPPM', [
    '${BUILD_ROOT}/core/power/adsppm/inc',
    '${BUILD_ROOT}/core/power/adsppm/src/common',
    '${BUILD_ROOT}/core/power/adsppm/src/common/api/inc',
    '${BUILD_ROOT}/core/power/adsppm/src/common/api/src',
    '${BUILD_ROOT}/core/power/adsppm/src/common/asic/inc',
    '${BUILD_ROOT}/core/power/adsppm/src/common/asic/src',
    '${BUILD_ROOT}/core/power/adsppm/src/common/core/inc',
    '${BUILD_ROOT}/core/power/adsppm/src/common/core/src',
    '${BUILD_ROOT}/core/power/adsppm/src/common/hal/inc',
    '${BUILD_ROOT}/core/power/adsppm/src/common/hal/src',
    '${BUILD_ROOT}/core/power/adsppm/src/mpd',
    '${BUILD_ROOT}/core/power/adsppm/src/test',
    ]
)

#-------------------------------------------------------------------------------
# QDSS Tracer definitions
#-------------------------------------------------------------------------------
if 'USES_QDSS_SWE' in env:
    QDSS_IMG = ['QDSS_EN_IMG']
    EVENTS = [
        ['ADSPPM_CLK_SET','clk set,clkId=%d reqfreq=%d grantedfreq=%d'],
        ['ADSPPM_CLK_ENABLE', 'clk enable, clkid=%d'],
        ['ADSPPM_CLK_DISABLE', 'clk disable, clkid=%d'],
        ['ADSPPM_PWR_REQ', 'PWR Req, pwrDomain=%d'],
        ['ADSPPM_PWR_REL', 'PWR Rel, pwrDomain=%d'],
        ['ADSPPM_BW_REQ', 'BW req, master=%d, slave=%d, ib=%d, ab=%d'],
        ['ADSPPM_BW_REL', 'BW rel, mater=%d, slave=%d'],
        ['ADSPPM_DCG_ENABLE', 'DCG enable, clkId=%d'],
        ['ADSPPM_DCG_DISABLE', 'DCG disable, clkId=%d'],
        ['ADSPPM_LPASS_CORE_PWR', 'LPASS CORE POWER=%d'],
        ['ADSPPM_XPU_PROG', 'XPU prog=%d'],
        ['ADSPPM_MEM_PWR', 'MEMpower,memId=%d,power=%d'],
        ['ADSPPM_API_PWR_REQ', 'APIPower Req, clientId=%d'],
        ['ADSPPM_API_PWR_REL', 'APIPower Rel, clientId=%d'],
        ['ADSPPM_API_MIPS_REQ', 'APIMIPS req, clientId=%d, mipstotal=%d, mipsfloor=%d, codelocation=%d, reqoperation=%d'],
        ['ADSPPM_API_MIPS_REL', 'APIMIPS Rel clientId=%d'],
        ['ADSPPM_API_REG_REQ', 'APIReg Request, clientId=%d, master=%d, slave=%d'],
        ['ADSPPM_API_REG_REL', 'APIReg Release, clientId=%d'],
        ['ADSPPM_API_BW_REQ', 'APIBW Request, clientId =%d master=%d, slave=%d, BW=%d, percentage=%d'],
        ['ADSPPM_API_BW_REL', 'APIBW Release, clientId=%d'],
        ['ADSPPM_API_LATENCY_REQ', 'APILatency Request, clientId=%d, latency=%dus'],
        ['ADSPPM_API_LATENCY_REL', 'APILatency Release, clientId=%d'],
        ['ADSPPM_API_MEM_PWR_REQ', 'APIMEMPower Request, clientId=%d memId=%d, power=%d'],
        ['ADSPPM_API_MEM_PWR_REL', 'APIMEMPower Release, clientId=%d'],
    ]

    env.Append(CPPDEFINES=['ADSPPM_ENABLE_QDSS'])
    env.Append(CPPPATH = ['${BUILD_ROOT}/core/power/adsppm/build/${BUILDPATH}/'])
    env.SWEBuilder(['${BUILD_ROOT}/core/power/adsppm/build/${BUILDPATH}/adsppm_tracer_event_ids.h'], None)
    env.AddSWEInfo(QDSS_IMG, EVENTS)


# Map adsppm's diag message to the sleep category.
#-------------------------------------------------------------------------------
# Sources
#-------------------------------------------------------------------------------
MPD_ADSPPM_SNS_USER_SRC = [
    '${BUILDPATH}/src/mpd/qdi_client.c'
]

MPD_ADSPPM_AUD_USER_SRC = [
    '${BUILDPATH}/src/mpd/qdi_client.c'
]

MPD_ADSPPM_GUESTOS_SRC = [
    '${BUILDPATH}/src/mpd/qdi_srv.c',
    '${BUILDPATH}/src/mpd/adsppmcb.c',
    '${BUILDPATH}/src/mpd/client_id_list.c'
]

source_patterns = ['*.c', '*.cpp']
sources = []

for root, dirnames, filenames in os.walk(COMMON_SRCPATH):
    matches = itertools.chain(*[fnmatch.filter(filenames, pattern) for pattern in source_patterns])
    matches = ['${BUILDPATH}' + os.path.join(root, filename)[2:] for filename in matches]
    sources.extend(matches)

test_sources = []

for root, dirnames, filenames in os.walk(TEST_SRCPATH):
    matches = itertools.chain(*[fnmatch.filter(filenames, pattern) for pattern in source_patterns])
    matches = ['${BUILDPATH}' + os.path.join(root, filename)[2:] for filename in matches]
    test_sources.extend(matches)


if 'USES_ADSPPM_TEST_SPD' in env:
    sources.extend(test_sources)

if env.CheckAlias('devcfg_img'):
   env.Append(CFLAGS = ' -Wno-unused-function')


#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------
if 'USES_CORESLEEP_TOOL' in env:
    xml_dir = env['BUILD_ROOT'] + '/core/power/adsppm/src/common/hal/src/'

if 'USES_SENSOR_IMG' in env:
    # Library for the sensors user process
    if 'USES_ADSPPM_TEST_MPD' in env:
        MPD_ADSPPM_SNS_USER_SRC.extend(test_sources)
    RCINIT_IMG = ['CORE_QDSP6_SENSOR_SW']
    env.AddObject(RCINIT_IMG,[MPD_ADSPPM_SNS_USER_SRC])
    env.AddRCInitFunc(
        RCINIT_IMG,
        {
            'sequence_group' : 'RCINIT_GROUP_1', # required
            'init_name'      : 'adsppm_client', # required
            'init_function'  : 'MMPM_Init_Ext', # required
            'dependencies'   : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log']
        }
    )
    if 'USES_ADSPPM_TEST_MPD' in env:
        env.AddRCInitTask(
            RCINIT_IMG,
            {
                'sequence_group'      : 'RCINIT_GROUP_2', # required
                'thread_name'         : 'adsppm_test_mpd', # required
                'thread_entry'        : 'adsppmtest_main',
                'thread_type'         : 'RCINIT_TASK_QURTTASK',
                'stack_size_bytes'    : '8192',
                'priority_amss_order' : 'SHARED_DRIVER_SERVICE_PRI_ORDER',
                'cpu_affinity'        : 'REX_ANY_SMT_MASK',
                'dependencies'        : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log','qmi_fw','adsppm']
            }
        )
elif 'USES_AUDIO_IMG' in env:
    # Library in audio process
    if 'USES_ADSPPM_TEST_MPD' in env:
        MPD_ADSPPM_AUD_USER_SRC.extend(test_sources)
    RCINIT_IMG = ['CORE_QDSP6_AUDIO_SW']
    env.AddObject(RCINIT_IMG,[MPD_ADSPPM_AUD_USER_SRC])
    env.AddRCInitFunc(
        RCINIT_IMG,
        {
            'sequence_group' : 'RCINIT_GROUP_1', # required
            'init_name'      : 'adsppm_client', # required
            'init_function'  : 'MMPM_Init_Ext', # required
            'dependencies'   : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log']
        }
    )
    if 'USES_ADSPPM_TEST_MPD' in env:
        env.AddRCInitTask(
            RCINIT_IMG,
            {
                'sequence_group'      : 'RCINIT_GROUP_2', # required
                'thread_name'         : 'adsppm_test_mpd', # required
                'thread_entry'        : 'adsppmtest_main',
                'thread_type'         : 'RCINIT_TASK_QURTTASK',
                'stack_size_bytes'    : '8192',
                'priority_amss_order' : 'SHARED_DRIVER_SERVICE_PRI_ORDER',
                'cpu_affinity'        : 'REX_ANY_SMT_MASK',
                'dependencies'        : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log','qmi_fw','adsppm']
            }
        )
else:
    #if 'USES_QURTOS_IMG' in env:
    # Image built for Guest OS
    RCINIT_IMG = ['CORE_QDSP6_SW','MODEM_SENSORONLY']
    if 'USES_MPD' in env:
        env.AddObject(RCINIT_IMG,[MPD_ADSPPM_GUESTOS_SRC])
    env.AddLibrary(RCINIT_IMG,'${BUILDPATH}/adsppm',sources)
    env.AddRCInitFunc(
        RCINIT_IMG,
        {
            'sequence_group' : 'RCINIT_GROUP_2', # required
            'init_name'      : 'adsppm', # required
            'init_function'  : 'MMPM_Init_Ext', # required
            'dependencies'   : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log','rpm']
         })
    if env['MSM_ID'] in ['9205' ,'9607']:
       env.AddRCInitFunc( 
            RCINIT_IMG, 
            {
                  'sequence_group' : 'RCINIT_GROUP_0', # required
                  'init_name' : 'adsppm_ultaudioreset_grp0', # required
                  'init_function' : 'adsppm_ultaudio_reset', # required
                  'dependencies' : ['clk_regime','dalsys','icbarb']
            })
    if 'USES_MPD' in env:
        env.AddRCInitFunc(
            RCINIT_IMG,
            {
                'sequence_group' : 'RCINIT_GROUP_2', # required
                'init_name'      : 'adsppm_qdi', # required
                'init_function'  : 'QDI_adsppm_init', # required
                'dependencies'   : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log','adsppm']
            }
        )
    env.AddRCInitTask(
        RCINIT_IMG,
        {
            'sequence_group'      : 'RCINIT_GROUP_2', # required
            'thread_name'         : 'adsppm_asyncmgr', # required
            'thread_entry'        : 'AM_WorkLoopThread',
            'thread_type'         : 'RCINIT_TASK_QURTTASK',
            'stack_size_bytes'    : '4096',
            'priority_amss_order' : 'SHARED_DRIVER_SERVICE_PRI_ORDER',
            'cpu_affinity'        : 'REX_ANY_SMT_MASK',
            'dependencies'        : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log','adsppm']
        }
    )
    env.AddRCInitTask(
        RCINIT_IMG,
        {
            'sequence_group'      : 'RCINIT_GROUP_2', # required
            'thread_name'         : 'adsppm_cb', # required
            'thread_entry'        : 'AM_callBackThread',
            'thread_type'         : 'RCINIT_TASK_QURTTASK',
            'stack_size_bytes'    : '4096',
            'priority_amss_order' : 'SHARED_DRIVER_SERVICE_PRI_ORDER',
            'cpu_affinity'        : 'REX_ANY_SMT_MASK',
            'dependencies'        : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log','adsppm']
        }
    )
    if 'USES_ADSPPM_TEST_SPD' in env:
        env.AddRCInitTask(
            RCINIT_IMG,
            {
                'sequence_group'      : 'RCINIT_GROUP_3', # required
                'thread_name'         : 'adsppm_test_spd', # required
                'thread_entry'        : 'adsppmtest_main',
                'thread_type'         : 'RCINIT_TASK_QURTTASK',
                'stack_size_bytes'    : '8192',
                'priority_amss_order' : 'SHARED_DRIVER_SERVICE_PRI_ORDER',
                'cpu_affinity'        : 'REX_ANY_SMT_MASK',
                'dependencies'        : ['clk_regime','dalsys','npa','icbarb','sleep','smem_log','qmi_fw','adsppm']
            }
        )

#-------------------------------------------------------------------------------
# Device Configuration Sources
#-------------------------------------------------------------------------------
if 'USES_DEVCFG' in env or 'USES_DEVCFG_SENSORONLY' in env:
	DEVCFG_IMG = ['DAL_DEVCFG_IMG','DAL_DEVCFG_SENSORONLY_IMG']
	env.AddDevCfgInfo(DEVCFG_IMG,
    {
      '9205_xml' : ['${BUILD_ROOT}/core/power/adsppm/config/9205/adsppm_9205.xml',
                    '${BUILD_ROOT}/core/power/adsppm/config/9205/adsppm_configdata_9205.c'],
      '9607_xml' : ['${BUILD_ROOT}/core/power/adsppm/config/9607/adsppm_9607.xml',
                    '${BUILD_ROOT}/core/power/adsppm/config/9607/adsppm_configdata_9607.c']		    
    })

#-------------------------------------------------------------------------------
# Identify Target for Test Code (if test mode is enabled)
#-------------------------------------------------------------------------------
if ('USES_ADSPPM_TEST_SPD' in env) or ('USES_ADSPPM_TEST_MPD' in env):
    env.Append(CPPDEFINES = 'ADSPPM_TEST');
    if env['MSM_ID'] in ['9205','9607']:
        env.Append(CPPDEFINES = 'ADSPPM_TEST_8909');
    else:
        env.Append(CPPDEFINES = 'ADSPPM_TEST_NONE');

