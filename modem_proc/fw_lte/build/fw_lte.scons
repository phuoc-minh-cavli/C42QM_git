#===============================================================================
#
# Copyright (c) 2016 Qualcomm Technologies Incorporated.
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
#  $Header: //source/qcom/qct/modem/fw/components/fw_lte.mpss/rel/15.2/release/build/fw_lte.scons#1 $
#
#===============================================================================

# --------------------------------------------------------------------------- #
# Import SCons Environment                                                    #
# --------------------------------------------------------------------------- #
import os
Import('env')
from glob import glob
from os.path import join, split, exists, basename, abspath
from fnmatch import fnmatch

#---------------------------------------------------------------------------- #
# Return from fw_<tech> if both fw/<tech> and fw_<tech> exists                #
#---------------------------------------------------------------------------- #
path = env.subst('${INC_ROOT}/fw/lte/api')
curr_file_path = os.getcwd()
if (os.path.exists(path) and 'fw_lte' in curr_file_path) or 'USES_STANDALONE_FW' in env:
  Return()

# --------------------------------------------------------------------------- #
# Import SCons Environment                                                    #
# --------------------------------------------------------------------------- #
env = env.Clone()

if 'USES_EXCLUDE_LTE_FW' in env:
  Return()


#-------------------------------------------------------------------------------
# Necessary Public & Restricted API's
#-------------------------------------------------------------------------------
env.RequirePublicApi([
    'DAL',
    'DEBUGTOOLS',
    'MPROC',
    'SERVICES',
    'SYSTEMDRIVERS',
    'MEMORY',
    'KERNEL',          # needs to be last
    ], area='core')

env.RequirePublicApi(['MCS'], area='MCS')
env.RequirePublicApi(['LTE'], area='LTE')
env.RequirePublicApi(['COMMON'], area='FW')

#-------------------------------------------------------------------------------
# Autodetect UMID files
#-------------------------------------------------------------------------------
path,tech_folder = split(Dir('../').path)
if 'fw_' in tech_folder:
  api_folder = 'fw_lte/api/'
else:
  api_folder = 'fw/lte/api/'

api_path = env.subst('${INC_ROOT}/'+api_folder)

files = [ ]
for fname in glob(join(api_path, '*_msg.h')):
  env.PrintDebugInfo('fw', "lte : AddUMID: " + fname)
  files.append(fname)
if len(files) > 0:
  env.AddUMID('${BUILDPATH}/fw_lte.umid', files)

#-------------------------------------------------------------------------------
# Set up object path
#-------------------------------------------------------------------------------
# default:
#  internal build using normal buildpath
#  external build using normal buildpath
libname = 'fw_lte'
lib = libname + '.lib'
objname = 'lte_main'
obj = objname + '.o'
lte_sdm = 'fw_lte_sdm'
lte_sdm_lib = lte_sdm + '.lib'
path = env.subst(join('..','bin','${SHORT_BUILDPATH}'))
if 'USES_INTERNAL_BUILD' not in env and 'USES_CUST_1' not in env:
    lib = libname + '.ext.lib'
    obj = objname + '.ext.o'
    lte_sdm_lib = lte_sdm + '.ext.lib'

if 'USES_BUILD_SENSORONLY_IMAGE' in env:
    Return()
	
variant = 'MODEM_MODEM'
if 'USES_BUILD_PAGEONLY_IMAGE' in env or 'USES_PAGEONLY_IMAGE' in env:
    variant = 'MODEM_PAGEONLY'
    path += '_pageonly'

#find path, and corresponding binaries
if not exists(join(path,lib)):
    # This step only for eng builds
    # looks for fw libs if they are not in the default path
    env.PrintWarning('FW: searching for ' + libname + ' lib...')
    path = ''
    for dname, sdname, flist in os.walk(join('..','bin')):
        for fname in flist:
            if fnmatch(fname, libname + '*.lib'):
                # we found lib, obj must also be here
                path = dname
                lib = fname
                obj = objname + '.o'
                # obj must match lib extension
                if '.ext.' in lib:
                  obj = objname + '.ext.o'
                env.PrintWarning('FW: found ' + join(path, lib))
                break
        if path != '':
            break
    if path == '' or not exists(join(path, lib)) or not exists(join(path, obj)):
        # this is an error condition
        env.PrintError('FW: ' + lib + ' or ' + obj + ' NOT found!!!')
        Exit(1)

env.AddOEMObject([variant],  join(path, obj))
env.AddOEMLibrary([variant], join(path, lib))
env.AddOEMLibrary([variant], join(path, lte_sdm_lib))
#-------------------------------------------------------------------------------
# Set up link script path
#-------------------------------------------------------------------------------
#if not 'USES_MOB_Q6SIM' in env:
#  for lcs_file in glob(join(path,'*.lcs')):
#    env.AddLinkerFilePath(abspath(lcs_file))
