# -------------------------------------------------------------------------------- #
#                         S T U B S . S C O N S
#
# DESCRIPTION
#   SCons file for the GSS stubs
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
# Copyright (c) 2010-2012 Qualcomm Technologies Incorporated.
# Qualcomm Confidential and Proprietary. All Rights Reserved.
# Copyright (c) 2013 - 2015 Qualcomm Atheros, Inc.
# Qualcomm Atheros Confidential and Proprietary. All Rights Reserved. 
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
# $Header: //commercial/MPSS.CT.1.0/Main/modem_proc/stubs/build/stubs.scons#1 $
# $DateTime: 2018/06/28 09:07:59 $
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import the SCons environment
#--------------------------------------------------------------------------------
Import('env')
from glob import glob
from os.path import join, basename

#--------------------------------------------------------------------------------
# Only build this for APQ8026 target
#--------------------------------------------------------------------------------   
if 'USES_GNSS_SA' not in env:
    Return()
if 'USES_CGPS' not in env:
    env.CleanPack('CLEANPACK_TARGET', env.FindFiles('*', '..'))
    Return()

# Remove when top level -Wno-error is removed and all stubs warnings are cleared
if env['PRODUCT_LINE'].startswith("MPSS.AT"): 
    env.Append(HEXAGON_WARN = ' -Wno-error-high -Wno-error-medium -Wno-error-low ')

#-------------------------------------------------------------------------------
# Necessary Public and Restricted API's
#-------------------------------------------------------------------------------
stubs_public_api_list = [
  #Format: (<api_area>, <api_name>),
  ('COMMON', 'API'),
  ('CORE',   'DAL'),
  ('CORE',   'DEBUGTOOLS'),
  ('CORE',   'DIAG'),
  ('CORE',   'KERNEL'),
  ('CORE',   'MEMORY'),
  ('CORE',   'MPROC'),
  ('CORE',   'POWER'),
  ('CORE',   'SERVICES'),
  ('CORE',   'SYSTEMDRIVERS'),
  ('CORE',   'WIREDCONNECTIVITY'),
  ('FW',     'GERAN'),
  ('GERAN',  'GERAN'),
  ('MMCP',   'PUBLIC'),
  ('MPOWER', 'MPOWER'),
  ('MCS',    'MCS'),
  ('MMCP',   'MMCP'),
  ('RFA',    'CDMA'),
  ('RFA',    'COMMON'),
  ('RFA',    'GNSS'),
  ('RFA',    'GSM'),
  ('RFA',    'LM'),
  ('RFA',    'LTE'),
  ('RFA',    'MEAS'),
  ('RFA',    'WCDMA'),
  ('RFLM',    'RFLM'),
  ('UIM',    'PUBLIC'),
  ('UIM',    'UIM'),
]
for api_area,api_name in stubs_public_api_list:
    env.RequirePublicApi([api_name], area=api_area)

#============================STUB Restricted API==================================
env.PublishProtectedApi('STUBS',[
  '${STUBS_ROOT}/src',
])

env.RequireProtectedApi(['STUBS'])

#--------------------------------------------------------------------------------
# Setup source PATH
#--------------------------------------------------------------------------------
SRCPATH = "../src"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#--------------------------------------------------------------------------------
# Name of the subsystem to which this unit belongs
#--------------------------------------------------------------------------------
LIB_TARGET = '${BUILDPATH}/' + 'stubs'

#--------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#--------------------------------------------------------------------------------
env.Append(CPPDEFINES = ["MSG_BT_SSID_DFLT=MSG_SSID_STUBSM"])

#--------------------------------------------------------------------------------
# Images that this VU is added
#--------------------------------------------------------------------------------
IMAGES = ['MODEM_MODEM']

#--------------------------------------------------------------------------------
# Generate the library and add to an image
#--------------------------------------------------------------------------------
BINARY_LIB_SOURCES = ['${BUILDPATH}/' + basename(fname)
                      for fname in glob(join(env.subst(SRCPATH), '*.c'))]

#--------------------------------------------------------------------------------
# Ship our code as binary library and add it to the Modem image
#--------------------------------------------------------------------------------
env.AddBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_SOURCES)

# --------------------------------------------------------------------------- #
# Search for additional Units                                                 #
# --------------------------------------------------------------------------- #
env.LoadSoftwareUnits()
