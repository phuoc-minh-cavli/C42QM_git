#====include path optimized=====================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2011 - 2013 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/rfa.mpss/3.10/rf/mdsp/qdsp6_common/build/rfa_rf_mdsp_qdsp6_common.scons#2 $
# $DateTime: 2020/04/28 01:53:09 $ 
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 04/24/20   mp      Clade heap changes
# 09/11/13   dyc     Support policy for opt FTM boot
# 02/04/13   dyc     Updated qualifiers for pack.
# 09/07/12   jfc     Move rfa_fwsw task to group 3 to coincide with rfa task
# 08/15/12   shb     Added RFDEVICE_INTERFACE
# 07/13/12   jfc     Update env to load scons files recursively
# 07/05/12   jfc     Enable FWSW task
# 05/23/12   jfc     Add FWSW task
# 11/21/11   vb      Enabled RFC, RFD and WCDMA for compiling DAC cal changes 
# 09/25/11   vb      Support for DAC cal using different Irefs
# 09/08/11   vb      Added new interface for common FW memory
# 09/08/11   vb      Support for DAC Cal
# 04/23/11   prp     Created
#===============================================================================

Import('env')

# Load test units
env.LoadSoftwareUnits()

LIB_NAME        = 'rf_mdsp_qdsp6_common'
IMAGE_SOURCES   = ['MODEM_MODEM','MOB_RFA']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'


from glob import glob

env = env.Clone()

# Method to abort processing of this file, if not required for current air interface mode, etc
#if ( (USES_TEST_FLAG1 in env and USES_TEST_FLAG2 not in env) or USES_TEST_FLAG3 not in env)):
#   Return( )

#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

env.Append(CPPDEFINES = ['MSG_BT_SSID_DFLT=MSG_SSID_RF',]) 
env.RequirePublicApi([
        'RFLM',
        ],
        area='RFLM')

env.RequirePublicApi([
#    'APTTESTS',
#    'BOOT',
     'BUSES', 
     'DAL',
     'DEBUGTOOLS',
     'HAL',
#    'HWENGINES',
#    'IODEVICES',
     'KERNEL',
     'MPROC', 
     'POWER', 
#    'SECUREMSM', 
     'SERVICES',
     'STORAGE', 
     'SYSTEMDRIVERS', 
#     'HWIO'
#    'WIREDCONNECTIVITY',
    ],
    area='CORE')

env.RequirePublicApi([
    'ONEX',       
#    'DATA',       
#    'DATACOMMON', 
#    'DATAMODEM',  
#    'GERAN',      
#    'GPS',        
#    'HDR', 
#    'LTE',       
     'MCS',        
     'MMODE',      
     'NAS',        
#    'PBM',        
     'RFA',        
#    'UIM',        
     'UTILS',      
#    'WCDMA',      
#    'WMS',
    ],
    area='MODEM')

env.RequirePublicApi([
        'CLADEHEAP',
        ],
        area='PERF')
env.RequirePublicApi([
#    'APR',
#    'AUDIO',
#    'CVD',
     'MVS',
#    'MMUTILS',
    ],
    area='MULTIMEDIA')
    
env.RequireRestrictedApi([
    'RFDEVICE_INTERFACE',
#    'ONEX',
#    'DATA', 
#    'MODEM_DATA', 
#    'MODEM_DATACOMMON', 
#    'DATACOMMON',
     'FW', 
     'GERAN',
#    'GPS', 
#    'HDR', 
#    'LTE', 
     'MCS', 
#    'XSD', 
     'MMODE',
     'NAS', 
#    'PBM', 
     'RFA',
#    'UIM', 
     'UTILS', 
#    'WCDMA', 
#    'WMS', 
    ])


env.RequireProtectedApi([
#    'LM_COMMON_INC',
#    'LM_NIKEL_INC',
     'RFC_COMMON_INC',
#    'RFC_RF_CARD_INC',
     'RFC_TARGET_INC',
#    'RF_CDMA_INC',
     'RF_COMMON_INC',
     'RF_DEVICE_INC',
#    'RF_GNSS_INC',
#    'RF_GSM_INC',
     'RF_HAL_INC',
#    'RF_LTE_INC',
     'RF_MDSP_INC',
#    'RF_MEAS_INC',
     'RF_RFD_INC',
     'RF_RFNV_INC',
#    'RF_TASK_INC',
     'RF_WCDMA_INC',
    ])

env.RequireProtectedApi([
#    'LM_COMMON_SRC',
#    'RFC_COMMON_SRC',
#    'RFC_RF_CARD_SRC',
#    'RFC_TARGET_SRC',
#    'RF_CDMA_SRC',
#    'RF_COMMON_SRC',
#    'RF_GNSS_SRC',
#    'RF_GSM_SRC',
     'RF_HAL_SRC',
#    'RF_LTE_SRC',
#    'RF_MEAS_SRC',
#    'RF_RFD_SRC',
#    'RF_TASK_SRC',
     'RF_WCDMA_SRC',
    ])

env.RequireProtectedApi([
#    'LM_NIKEL_PROTECTED',
#    'RF_CDMA_PROTECTED',
#    'RF_COMMON_PROTECTED',
#    'RF_DEVICE_PROTECTED',
#    'RF_GNSS_PROTECTED',
#    'RF_GSM_PROTECTED',
     'RF_HAL_PROTECTED',
#    'RF_LTE_PROTECTED',
#    'RF_MDSP_PROTECTED',
#    'RF_MEAS_PROTECTED',
#    'RF_RFD_PROTECTED',
#    'RF_WCDMA_PROTECTED',
    ])





#uncomment this section if src directory is added

#LIB_SOURCES = [ ]  #empy list

#SOURCE_FILES = [ ] 

#find all .c
#SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))

#find all .cpp files 
#SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))

#find all .s files
#SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.s'))


#for filename in SOURCE_FILES:
#        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#if LIB_SOURCES:

#        env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME,[
#        LIB_SOURCES,
#        ])


env = env.Clone()


env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that AddBinaryLibrary can be launched
LIB_SOURCES = []  #empy list

if 'USES_NO_STRIP_NO_ODM' in env:

        SOURCE_FILES = [ ] 

        #find all .c
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.c'))

        #find all .cpp files 
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))

        #find all .s files
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.s'))


        for filename in SOURCE_FILES:
                LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that the pre-built library will be added to the list file
env.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_protected',[
    LIB_SOURCES,
    ], pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])



# RFCA task and init descriptors
#RCINIT_INIT_RFA_FWSW = {
# 'sequence_group'             : 'RCINIT_GROUP_5',
# 'init_name'                  : 'rfa_fwsw_task',                 
# #'init_function'             : 'example_rcinit_group_1',     
# #'dependencies'              : ['one,two,three'],            
#}

RCINIT_TASK_RFA_FWSW = {
 'thread_name'                : 'rfa_fwsw',           # required
 'sequence_group'             : 'RCINIT_GROUP_3',     # required
 'stack_size_bytes'           : '2048',               # required
 'priority_amss_order'        : 'SHARED_IST_PRI_ORDER',  # opt, 
 'thread_entry'               : 'rfa_fwsw_task',
 'policy_optin'               : ['default', 'ftm', ], # required  
 #'stack_name'                : 'example_stack',      # opt, 
 #'tcb_name'                  : 'example_tcb',        # opt, 
 #'cpu_affinity'              : 'REX_SMT_ANY_MASK'    # opt, 
}


# declare tasks - to be enabled later
if ('USES_RCINIT' in env):
    env.AddRCInitTask(IMAGE_SOURCES, RCINIT_TASK_RFA_FWSW)
#    env.AddRCInitFunc(IMAGE_SOURCES, RCINIT_INIT_RFA_FWSW)

