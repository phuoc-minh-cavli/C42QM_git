#====include path optimized=====================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2011-2014 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header:  $
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 12/02/15   ndb     Featurize NLIC/RFCA code to reduce the memory footprint for Lykan targets(MDM9607/MDM9606)
# 01/23/14   aki     Removed RFCA debug option as it ir run-time setting from now on
# 09/11/13   dyc     Support policy for opt FTM boot
# 06/10/13   aki     Mainlined RFCA
# 08/15/12   shb     Added RFDEVICE_INTERFACE
# 04/26/12   aki     Removed task init
# 02/17/12   aki     Add RFNV
# 12/20/11   aki     Do not build any RFCA if USES_RFCA is not defined
# 12/20/11   aki     Only add RFCA task if USES_RFCA is defined
# 10/25/11   aki     Created
#===============================================================================

Import('env')

if env.get('CHIPSET') in ('mdm9607','mdm9205'):
    Return()
	
	

# Enabled this to disable optimization in RFCA
# env.Replace(HEXAGONCC_OPT = "")

LIB_NAME        = 'rf_rfca'
IMAGE_SOURCES   = ['MODEM_MODEM','MOB_RFA']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'


from glob import glob

# Method to abort processing of this file, if not required for current air interface mode, etc
#if ( (USES_TEST_FLAG1 in env and USES_TEST_FLAG2 not in env) or USES_TEST_FLAG3 not in env)):
#   Return( )

#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

env.Append(CPPDEFINES = ['MSG_BT_SSID_DFLT=MSG_SSID_FTM',]) 
env.RequirePublicApi([
#    'APTTESTS',
#    'BOOT',
#    'BUSES', 
    'DAL',
    'DEBUGTOOLS',
#    'HAL',
#    'HWENGINES',
#    'IODEVICES',
    'KERNEL',
    'MPROC', 
#    'POWER', 
#    'SECUREMSM', 
    'SERVICES',
    'STORAGE', 
    'SYSTEMDRIVERS', 
#    'HWIO'
#    'WIREDCONNECTIVITY',
    ],
    area='CORE')

env.RequirePublicApi([
    'ONEX',       
#    'DATA',       
#    'DATACOMMON', 
#    'DATAMODEM',  
#    'GERAN',      
#    'GPS',        
    'HDR', 
#    'LTE',       
    'MCS',        
    'MMODE',      
#    'NAS',        
#    'PBM',        
#    'RFA',        
#    'UIM',        
#    'UTILS',      
#    'WCDMA',      
#    'WMS',
    ],
    area='MODEM')

env.RequirePublicApi([
#    'APR',
#    'AUDIO',
#    'CVD',
#    'MVS',
#    'MMUTILS',
    ],
    area='MULTIMEDIA')
    
env.RequireRestrictedApi([
    'RFDEVICE_INTERFACE',
    'ONEX',
#    'DATA', 
#    'MODEM_DATA', 
#    'MODEM_DATACOMMON', 
#    'DATACOMMON',
#    'FW', 
#    'GERAN',
#    'GPS', 
    'HDR', 
    'LTE', 
    'MCS', 
#    'XSD', 
    'MMODE',
    'NAS', 
#    'PBM', 
    'RFA',
#    'UIM', 
#    'UTILS', 
#    'WCDMA', 
#    'WMS', 
    ])


env.RequireProtectedApi([
#    'LM_COMMON_INC',
#    'LM_NIKEL_INC',
#    'RFC_COMMON_INC',
#    'RFC_RF_CARD_INC',
#    'RFC_TARGET_INC',
#    'RF_CDMA_INC',
    'RF_COMMON_INC',
#    'RF_DEVICE_INC',
#    'RF_GNSS_INC',
#    'RF_GSM_INC',
#    'RF_HAL_INC',
#    'RF_LTE_INC',
#    'RF_MDSP_INC',
#    'RF_MEAS_INC',
#    'RF_RFD_INC',
    'RF_RFNV_INC',
#    'RF_TASK_INC',
#    'RF_WCDMA_INC',
     'RF_RFCA_INC',
    ])

env.RequireProtectedApi([
#    'LM_COMMON_SRC',
#    'RFC_COMMON_SRC',
#    'RFC_RF_CARD_SRC',
#    'RFC_TARGET_SRC',
#    'RF_CDMA_SRC',
#    'RF_COMMON_SRC',
#    'RF_GNSS_SRC',
#    'RF_GSM_SRC',
#    'RF_HAL_SRC',
#    'RF_LTE_SRC',
#    'RF_MEAS_SRC',
#    'RF_RFD_SRC',
#    'RF_TASK_SRC',
#    'RF_WCDMA_SRC',
    ])

env.RequireProtectedApi([
#    'LM_NIKEL_PROTECTED',
#    'RF_CDMA_PROTECTED',
#    'RF_COMMON_PROTECTED',
#    'RF_DEVICE_PROTECTED',
#    'RF_GNSS_PROTECTED',
#    'RF_GSM_PROTECTED',
#    'RF_HAL_PROTECTED',
#    'RF_LTE_PROTECTED',
#    'RF_MDSP_PROTECTED',
#    'RF_MEAS_PROTECTED',
#    'RF_RFD_PROTECTED',
#    'RF_WCDMA_PROTECTED',
    ])




LIB_SOURCES = [ ]  #empy list

SOURCE_FILES = [ ] 

#find all .c
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))

#find all .cpp files 
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))

for filename in SOURCE_FILES:
        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME, [LIB_SOURCES])



# RFCA task descriptor

RCINIT_TASK_RFCA = {
 'thread_name'                : 'rfca',               # required
 'sequence_group'             : 'RCINIT_GROUP_5',     # required
 'stack_size_bytes'           : '16384',               # required
 'priority_amss_order'        : 'SHARED_FOREGROUND_PRI_ORDER',  # opt, managed in rcinit_task_prio.csv, image team owner
 'policy_optin'               : ['default', 'ftm', ], # required
 #'stack_name'                : 'example_stack',      # opt, not recommended
 #'thread_entry'              : 'example_task',       # opt, not recommended
 #'tcb_name'                  : 'example_tcb',        # opt, not recommended
 #'cpu_affinity'              : 'REX_SMT_ANY_MASK'    # opt, recommended not to use REX_SMT_COMMON_MASK
}

# declare tasks
#if ('USES_RCINIT' in env):
#    env.AddRCInitTask(IMAGE_SOURCES, RCINIT_TASK_RFCA)

# Load test units
env.LoadSoftwareUnits()
