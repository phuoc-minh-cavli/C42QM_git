#====include path optimized=====================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2011 - 2021 Qualcomm Technologies, Inc. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies, Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies, Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/rftech_gsm.mpss/2.10/build/modem_rfa_gsm.scons#3 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 08/19/21   aad     added Tuner support for CT 2.0
# 01/28/19   tik     Dynamic module loading changes for EXTPL builds
# 08/17/18   mpa     Disabling flag RFGSM_IP2_CAL 
# 06/18/18   MPA     Enabling flag RFGSM_IP2_CAL 
# 11/30/16   bp      CR_1095525: Skip QTUNER script creation for JO3.0.2
# 12/31/15   par     Disable compilation if FEATURE_GSM is not defined
# 12/22/14   tod     rfa - Enable medium compiler warnings
# 12/16/14   tod     - O2 compiler optimization on hexagon 6.4.04 and greater toolchains
# 11/04/14   dr      Enabling FEATURE_RFA_DIME_FED for TABASCO
# 10/20/14   chenh   Enabled compiler warings to errors
# 10/16/14   dej     Clean-up SCons and add support for TABASCO
# 09/11/14   ndb     Add 'USES_JOLOKIA_MODEM' for 'FEATURE_RF_HAS_QTUNER'
# 06/02/14   dr      Adding support for JOLOKIA
# 02/27/14	 kg      Treat warnings as errors
# 02/18/14	 ec	     Add code to allow compilation on DPM project
# 01/06/14   adk     Added support for antenna tuners
# 10/06/13   ra      Support RFLM CCS
# 10/01/13   ra      Temporary: create FEATURE_RFA_DIME_FED depending on runtime flag USES_RFA_DIME_FED
# 09/24/13   lp      Added FEATURE_QFE1520/1550 and enabled FEATURE_RF_HAS_QTUNER
#                    for Triton
# 07/29/13   pl      Add FEATURE_RF_ASDIV depending on if MODEM_ANTENNA_SWITCH_DIVERSITY is defined
# 07/10/13   aro     Published RF Factory API
# 06/20/13   ra      Disable QTuner for Bolt
# 10/30/12   sar     Created
#===============================================================================

Import ('env')

import os

if ( 'USES_GSM' not in env ):
  Return()

#usage:  ENV_UPDATE_RFA=CHIPSET,=mdm9x15,USES_NO_DEBUG,delete,USES_HI_SPEED,add
if ARGUMENTS.get('ENV_UPDATE_RFA'):

        env_update_string = ARGUMENTS.get('ENV_UPDATE_RFA')
        
        env_update_list = env_update_string.split(',')
        
        item_total = len(env_update_list)
        
        list_index = 0
        
        #note if list is not even number of items, last odd item is ignored
        while list_index < item_total-1:
                
                item            = env_update_list[list_index]  
                value           = env_update_list[list_index+1]
                list_index      += 2
                                
                if(value == 'add'):
                          env[str(item)] = 'yes'
                          print "adding",item,"to env"                                          
                          
                elif(value == 'delete'):
                          del env[str(item)]
                          print "deleting",item,"from env"
                
                else:
                        if(value[0] != '='):
                                print "missing leading = in",value
                                print "not updating ",item
                                
                        else:
                                value2 = value[1:len(value)]
                                env[str(item)] = value2
                                print "now setting",item,value

#end command line option processing
								
if 'USES_FTM_HWTC_DEBUG_ONLY_SECURITY_HOLE' in env:
                print "Add USES_FTM_HWTC"
                env.Replace(USES_FTM_HWTC = 'yes')
                print "Enable FEATURE_FTM_HWTC"
                env.Append(CPPDEFINES = ['FEATURE_FTM_HWTC'])
if ('USES_FEATURE_FSK_TX' in env ):
		env.Append(CPPDEFINES = ['RFGSM_FSK_ENABLE']) 
 
if 'USES_RFA_DIME_FED' in env:
        env.Append(CPPDEFINES = ['FEATURE_RFA_DIME_FED']) 
        
if env.PathExists('${INC_ROOT}/rfmodem_dimepm'):
        env.Append(CPPDEFINES = ['FEATURE_RFA_DIME_FED']) 

if env.PathExists('${INC_ROOT}/rfmodem_jolokia'):
        env.Append(CPPDEFINES = ['FEATURE_RFA_DIME_FED']) 

env.Append(CPPDEFINES = ['FEATURE_RF_HAS_QTUNER'])

if env.PathExists('${INC_ROOT}/rfmodem_tabasco'):
        env.Append(CPPDEFINES = ['FEATURE_RFA_DIME_FED']) 
#env.Append(CPPDEFINES = ['RFGSM_IP2_CAL'])
# Bolt Pre-Silicon  
if('USES_BOLT_1_0' in env):
  env.Append(CPPDEFINES = ['FEATURE_RF_BOLT_PRE_SILICON'])

#-------------------------------------------------------------------------------
# Enable warnings -> errors
#if 'USES_INTERNAL_BUILD' in env:
#   env = env.Clone(HEXAGONCC_WARN = "${HEXAGONCC_WARN} -Werror", 
#                   HEXAGONCXX_WARN = "${HEXAGONCCXX_WARN} -Werror")
#-------------------------------------------------------------------------------
# Remove this line and if statement once 6.4.04 toolchain has been released
if env['HEXAGON_RTOS_RELEASE'] >= '6.4.04':
   # Enable -O2 optimization
   env.Replace(HEXAGONCC_OPT = "${HEXAGON_OPT_2}")
#-------------------------------------------------------------------------------
if env.PathExists('${INC_ROOT}/rfa'):
    env.Replace(RF_ROOT = '${INC_ROOT}/rfa')
else:
    env.Replace(RF_ROOT = '${INC_ROOT}/modem/rfa')

env.Replace(RFTECH_GSM_ROOT = env.GetBuildPath(Dir('..')))

#The order of APIs in the rfa_public_api_list determines the order the paths are listed on the build command line.
#To optimize build times the API list is sorted in descending order of use.

rfa_public_api_list =[
#    ('CORE', 'SYSTEMDRIVERS'),
#    ('CORE', 'KERNEL'),
     ('RFA', 'COMMON'),
     ('CORE', 'DAL'),
     ('RFDEVICE_INTERFACE', 'RFDEVICE_INTERFACE'),
     ('RFA', 'CDMA'),
#    ('MMCP', 'PUBLIC'),
     ('MCS', 'MCS'),
     ('LTE', 'LTE'),
     ('MMCP', 'MMCP'),
     ('FW', 'RF'),
     ('FW', 'WCDMA'),
     ('FW', 'C2K'),
     ('FW_CCS', 'FW_CCS'),
     ('FW_COMMON', 'FW_COMMON'),
     ('FW_WCDMA', 'FW_WCDMA'),
     ('FW_C2K', 'FW_C2K'),
     ('RFA', 'MEAS'),
     ('CORE', 'DEBUGTOOLS'),
     ('GERAN', 'GERAN'),
#    ('GERAN_RFA', 'DEPRECATED'),
     ('RFA', 'GSM'),
     ('RFA', 'LM'),
     ('RFA', 'LTE'),
     ('FW', 'TARGET'),
     ('FW', 'GERAN'),
     ('FW_GERAN', 'FW_GERAN'),
     ('CORE', 'MPROC'),
     ('CORE', 'MEMORY'),
     ('CORE', 'SERVICES'),
     ('RFA', 'WCDMA'),
     ('CORE', 'POWER'),
     ('ONEX', 'PUBLIC'),
     ('RFNV', 'RFNV'),
     ('RFFACTORY', 'RFFACTORY'),
     ('RFDEVICE_WTR1605', 'RFDEVICE_WTR1605'),
     ('FW', 'LTE'),
     ('WCDMA', 'WCDMA'),
     ('FW', 'TDSCDMA'),
     ('FW_LTE', 'FW_LTE'),
     ('WCDMA', 'WCDMA'),
     ('FW_TDSCDMA', 'FW_TDSCDMA'),
     ('RFA', 'GNSS'),
     ('UTILS', 'OSYS'),
     ('AVS', 'MVS'),
     ('HDR', 'HDR'),
     ('TDSCDMA', 'TDSCDMA'),
     ('RFA', 'TDSCDMA'),
     ('ONEX', 'ONEX'),
     ('CORE', 'BUSES'),
     ('WCDMA', 'PUBLIC'),
     ('UIM', 'UIM'),
     ('CORE', 'STORAGE'),
     ('RFDEVICE_QFE1320', 'RFDEVICE_QFE1320'),
     ('UTILS', 'A2'),
     ('UIM', 'PUBLIC'),
     ('GPS', 'GPS'),
     ('RFDEVICE_WTR2605', 'RFDEVICE_WTR2605'),
     ('MCS', 'PUBLIC'),
     ('HDR', 'PUBLIC'),
     ('MPOWER', 'MPOWER'),
     ('TDSCDMA', 'PUBLIC'),
     ('RFDEVICE_WFR2600', 'RFDEVICE_WFR2600'),
     ('CORE', 'HWENGINES'),
     ('RFA_RF', 'TUNER'),
     ('QMIMSGS', 'RFRPE'),
     ('UTILS', 'COMMON'),] 

for api_area,api_name in rfa_public_api_list:
    env.RequirePublicApi([api_name], area=api_area)

env.RequireRestrictedApi (['RFTECH_GSM_VIOLATIONS'])

env.RequirePublicApi (['RFA',], area = 'RFA')

env.RequirePublicApi (['RFTECH_GSM',], area = 'RFTECH_GSM')

env.RequirePublicApi (['RFTECH_LTE',], area = 'RFTECH_LTE')

env.RequirePublicApi(['RFLM'],area='RFLM')

env.RequirePublicApi('DMM', area='MSF')

if 'USES_RFA_DIME_FED' in env:
        env.Append(CPPDEFINES = ['FEATURE_D3925_FED'])

# D3925 sepcific and needs to be cleaned up
if 'USES_RFA_D3925' in env:
        env.Append(CPPDEFINES = ['FEATURE_RFA_D3925'])

if ('USES_FEATURE_EXTERNAL_PAGING' in env ):
		env.Append(CPPDEFINES = ['FEATURE_RF_EXTPL_ENABLE'])

#----------------------------------------------------------------------------#
# Export Protected API to RFA folder. This will be visible only within
# RFA folder
#----------------------------------------------------------------------------#
env.PublishProtectedApi ('RFTECH_GSM_INC',[
     '${RFTECH_GSM_ROOT}/ftm/inc',
     '${RFTECH_GSM_ROOT}/hwtc/inc',
     '${RFTECH_GSM_ROOT}/rf/mc/inc',
     '${RFTECH_GSM_ROOT}/rf/nv/inc',
     '${RFTECH_GSM_ROOT}/rf/rfc/inc',
     '${RFTECH_GSM_ROOT}/qdsp6_gsm/inc',
     ])

env.PublishProtectedApi ('RFTECH_GSM_SRC',[
#    '${RFTECH_GSM_ROOT}/rf/gsm/ftm/src',
     '${RFTECH_GSM_ROOT}/rf/gsm/rf/core/src',
#    '${RFTECH_GSM_ROOT}/rf/gsm/rf/mc/src',
#    '${RFTECH_GSM_ROOT}/rf/gsm/rf/nv/src',
#    '${RFTECH_GSM_ROOT}/rf/gsm/rf/rfc/src',
     ])

env.PublishProtectedApi ('RFTECH_GSM_PROTECTED',[
     '${RFTECH_GSM_ROOT}/ftm/protected',
#    '${RFTECH_GSM_ROOT}/hwtc/protected',
     ])

env.RequireProtectedApi (['RFTECH_GSM_INC'])

env.RequireProtectedApi (['RFTECH_GSM_SRC']) 

env.RequireProtectedApi (['RFTECH_GSM_PROTECTED'])

#env.RequireProtectedApi (['RFC_TARGET_INC']) 

env.RequirePublicApi(['CCS','HAL'], area=env.get('RF_GLOBALS')['RFMODEM_AREA'])

env.LoadSoftwareUnits ()
