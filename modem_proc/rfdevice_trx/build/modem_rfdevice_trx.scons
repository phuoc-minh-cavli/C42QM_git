#====include path optimized=====================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2015 - 2020 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/rfdevice_trx.mpss/1.20/build/modem_rfdevice_trx.scons#2 $
# $DateTime: 2020/07/24 08:37:43 $
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 07/24/20   up       renamed FEATURE_RFA_DEVICE_GSM_FSK_TX to RFGSM_FSK_ENABLE
# 07/03/20   up       Added feature flag FEATURE_RFA_DEVICE_GSM_FSK_TX
# 07/02/19   up       Compilation error fix for LTE only build
# 03/05/19   sk       RF PAGE ONLY changes for NB/CATM
# 05/10/16   ssr      Updated SCons to include path for PERF: Heap_mgt inc folder
# 09/22/15    aks     Updated SCONS to query for label:RFTECH_GSM
# 04/20/15    hs      Initial version
#===============================================================================

Import('env')
env = env.Clone()

if 'MODEM_PAGEONLY' in env['BUILD_TAGS']:
    env.Append(CPPDEFINES = 'FEATURE_RF_LTE_PAGE_ONLY')
    if('USES_GSM' in env):
        del env['USES_GSM']
    build_tags = ['MODEM_MODEM', 'MOB_RFA', 'MOB_RFDEVICE']
    for tag in build_tags :
        env[tag] = True

import os

#usage:  ENV_UPDATE_RFA=CHIPSET,=mdm9x15,USES_NO_DEBUG,delete,USES_HI_SPEED,add
if ARGUMENTS.get('ENV_UPDATE_RFA'):
   
   env_update_string    = ARGUMENTS.get('ENV_UPDATE_RFA')
   env_update_list      = env_update_string.split(',')
   item_total           = len(env_update_list)
   list_index           = 0
   
   #note if list is not even number of items, last odd item is ignored
   while list_index < item_total-1:
                 
      item            = env_update_list[list_index]  
      value           = env_update_list[list_index+1]
      list_index      += 2
                                              
      if(value == 'add'):
         env[str(item)] = 'yes'
         print "adding",item,"to env"                                          
                
      elif(value == 'delete'):
         del env[str(item)]
         print "deleting",item,"from env"
      
      else:
         if(value[0] != '='):
            print "missing leading = in",value
            print "not updating ",item
                 
         else:
            value2 = value[1:len(value)]
            env[str(item)] = value2
            print "now setting",item,value



if env.PathExists('${INC_ROOT}/rfdevice_trx'):
    env.Replace(RFDEVICE_TRX_ROOT = '${INC_ROOT}/rfdevice_trx')
else:    
    env.Replace(RFDEVICE_TRX_ROOT = '${INC_ROOT}/modem/rfdevice_trx')




if env.PathExists('${BUILD_ROOT}/rfa'):
    env.Replace(RFA_ROOT = '${INC_ROOT}/rfa')
else:    
    env.Replace(RFA_ROOT = '${INC_ROOT}/modem/rfa')

if env.PathExists('${BUILD_ROOT}/rfmodem_thor'):
    env.RequirePublicApi(['RFMODEM_THOR'],area='RFMODEM_THOR')
else:
    env.RequirePublicApi(['RFMODEM_BOLT'],area='RFMODEM_BOLT')

env.RequirePublicApi([
        'KERNEL',
        'SYSTEMDRIVERS',
        'DAL',
        ],
        area='CORE')

env.RequirePublicApi([
        'COMMON',
        'RFA',
        ],
        area='RFA')

env.RequirePublicApi([
        'RF',
        ],
        area='FW')

env.RequirePublicApi([
        'FW_CCS',
        ],
        area='FW_CCS')

env.RequirePublicApi([
        'FW_COMMON',
        ],
        area='FW_COMMON')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='MMCP')

env.RequirePublicApi([
        'RFDEVICE_INTERFACE',
        ],
        area='RFDEVICE_INTERFACE')

env.RequirePublicApi([
        'CDMA',
        ],
        area='RFA')

env.RequirePublicApi([
        'MMCP',
        ],
        area='MMCP')

env.RequirePublicApi([
        'MCS',
        ],
        area='MCS')

env.RequirePublicApi([
        'GERAN',
        'WCDMA',
        ],
        area='FW')

env.RequirePublicApi([
        'FW_GERAN',
        ],
        area='FW_GERAN')

env.RequirePublicApi([
        'FW_WCDMA',
        ],
        area='FW_WCDMA')

env.RequirePublicApi([
        'SERVICES',
        ],
        area='CORE')

env.RequirePublicApi([
        'HEAP_MGT',
        ],
        area='PERF')		

env.RequirePublicApi([
        'MEAS',
        ],
        area='RFA')

env.RequirePublicApi([
        'LTE',
        ],
        area='LTE')

env.RequirePublicApi([
        'GSM',
        ],
        area='RFA')

env.RequirePublicApi([
        'DEBUGTOOLS',
        ],
        area='CORE')

env.RequirePublicApi([
        'GERAN',
        ],
        area='GERAN')

env.RequirePublicApi([
        'LM',
        'WCDMA',
        'LTE',
        ],
        area='RFA')

env.RequirePublicApi([
        'POWER',
        ],
        area='CORE')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='ONEX')

env.RequirePublicApi([
        'TARGET',
        ],
        area='FW')

env.RequirePublicApi([
        'FW_TARGET',
        ],
        area='FW_TARGET')

env.RequirePublicApi([
        'RFNV',
        ],
        area='RFNV')

env.RequirePublicApi([
        'MPROC',
        ],
        area='CORE')

env.RequirePublicApi([
        'GNSS',
        ],
        area='RFA')

env.RequirePublicApi([
        'LTE',
        ],
        area='FW')

env.RequirePublicApi([
        'FW_LTE',
        ],
        area='FW_LTE')

env.RequirePublicApi([
        'MEMORY',
        ],
        area='CORE')

env.RequirePublicApi([
        'TDSCDMA',
        ],
        area='RFA')

env.RequirePublicApi([
        'GPS',
        ],
        area='GPS')

env.RequirePublicApi([
        'RFDEVICE_TRX',
        ],
        area='RFDEVICE_TRX')


env.RequirePublicApi([
        'MYPS',
        ],
        area='MYPS')

env.RequirePublicApi(['RFLM'],area='RFLM')

env.RequirePublicApi('RFTECH_CDMA', area='RFTECH_CDMA')
env.RequirePublicApi('RFTECH_WCDMA', area='RFTECH_WCDMA')
env.RequirePublicApi('RFTECH_LTE', area='RFTECH_LTE')
env.RequirePublicApi('RFTECH_GSM', area='RFTECH_GSM')
env.RequirePublicApi(['RFMODEM_JOLOKIA'], area="RFMODEM_JOLOKIA")

env.RequireProtectedApi([
    'RF_COMMON_SRC',
    'RF_GSM_SRC',
    ])

env.RequireRestrictedApi(['VIOLATIONS'])

env.RequireProtectedApi(['RFDEVICE_TRX'])

env.RequireProtectedApi(['RFDEVICE_TRX_2'])


env.RequireRestrictedApi(['RFDEVICE'])

if 'NO_MODEM_FOLDER' in env or 'USES_NO_MODEM_FOLDER' in env:
        env.RequireRestrictedApi([ 'RFDEVICE_INTERFACE','RFDEVICE_NO_MODEM_FOLDER'])

#----------------------------------------------------------------------------#
# Export Protected API to RFA folder. This will be visible only within
# RFA folder
#----------------------------------------------------------------------------#

    
env.PublishProtectedApi( 'TRX_LIB_PROTECTED', [
    '${RFDEVICE_TRX_ROOT}/cdma/protected',    
    '${RFDEVICE_TRX_ROOT}/common/protected',
    '${RFDEVICE_TRX_ROOT}/wcdma/protected', 
    '${RFDEVICE_TRX_ROOT}/gsm/protected',
    '${RFDEVICE_TRX_ROOT}/lte/protected',
    '${RFDEVICE_TRX_ROOT}/tdscdma/protected'
    ])

env.PublishProtectedApi( 'RFDEVICE_INC', [
    '${RFDEVICE_TRX_ROOT}/cdma/inc',
    '${RFDEVICE_TRX_ROOT}/cdma/protected',
    '${RFDEVICE_TRX_ROOT}/common/inc',
    '${RFDEVICE_TRX_ROOT}/common/protected',
    '${RFDEVICE_TRX_ROOT}/gnss/inc',
    '${RFDEVICE_TRX_ROOT}/gnss/protected',
    '${RFDEVICE_TRX_ROOT}/gsm/inc',
    '${RFDEVICE_TRX_ROOT}/gsm/protected',
    '${RFDEVICE_TRX_ROOT}/lte/inc',
    '${RFDEVICE_TRX_ROOT}/lte/protected',
    '${RFDEVICE_TRX_ROOT}/meas/inc',
    '${RFDEVICE_TRX_ROOT}/meas/protected',
    '${RFDEVICE_TRX_ROOT}/wcdma/inc',
    '${RFDEVICE_TRX_ROOT}/wcdma/protected',
    '${RFDEVICE_TRX_ROOT}/tdscdma/inc',    
    '${RFDEVICE_TRX_ROOT}/tdscdma/protected',    
# Violations - needed for compile.
# rfdevice_cdma_interface.h     
# rfdevice_cmn_intf.h                 
# rfdevice_gnss_intf.h          
    '${INC_ROOT}/modem/rfa/device/rfdev_intf/inc',
# rfgnss_msm.h
    '${INC_ROOT}/modem/rfa/rf/hal/gnss/gen8a/inc',
# rfcommon_msg.h
# rfcommon_locks.h
    '${INC_ROOT}/modem/rfa/rf/common/rf/core/inc/',
# rf_cdma_state_types.h
#rf_cdma_state_types.h
#rf_cdma_wb_rxf.h
#rf_cdma_state_types.h
#rf_cdma_utils.h
    '${INC_ROOT}/modem/rfa/rf/cdma/common/rf/inc',
#rf_hal_sbi.h
    '${INC_ROOT}/modem/rfa/rf/hal/nikel/common/inc',
#rfcommon_nv_mm.h
    '${INC_ROOT}/modem/rfa/rf/common/rf/nv/inc',
#rfc_card.h
    '${INC_ROOT}/modem/rfa/rf/common/rf/rfc/inc',
#rfc_card_gsm.h
    '${INC_ROOT}/modem/rfa/rf/gsm/rf/rfc/inc',
#rfgsm_mdsp.h
    '${INC_ROOT}/modem/rfa/rf/mdsp/qdsp6_gsm/inc',
#rfcommon_msm.h
    '${INC_ROOT}/modem/rfa/rf/hal/nikel/common/inc',
#rfc_card_gsm.h
    '${INC_ROOT}/modem/rfa/rf/gsm/rf/rfc/inc',
#rfgsm_core_tx.h
    '${INC_ROOT}/modem/rfa/rf/gsm/rf/core/src',
#rfc_bsp.h
#    '${INC_ROOT}/modem/rfa/rfc/target/msm8930/inc',
#rfc_common.h
    '${INC_ROOT}/modem/rfa/rfc/common/inc',
#rfd_sbi.h
    '${INC_ROOT}/modem/rfa/rf/rfd/common/protected',
#rfgsm_nv_cmn.h
    '${INC_ROOT}/modem/rfa/rf/gsm/rf/nv/inc',
#rflte_core_util.h
    '${INC_ROOT}/modem/rfa/rf/lte/rf/core/inc',
#rfd_grfc.h
    '${INC_ROOT}/modem/rfa/rf/rfd/common/inc',
#rfd_grfc_modem.h
    '${INC_ROOT}/modem/rfa/rf/rfd/nikel/inc',
#rfd_grfc.h
    '${INC_ROOT}/modem/rfa/rf/rfd/common/inc',
#rfd_grfc_modem.h
    '${INC_ROOT}/modem/rfa/rf/rfd/nikel/inc',
#rf_task.h
    '${INC_ROOT}/modem/rfa/rf/task/common/inc',
#rflte_nv.h
    '${INC_ROOT}/modem/rfa/rf/lte/rf/nv/inc',
#rfc_card_lte.h
    '${INC_ROOT}/modem/rfa/rf/lte/rf/rfc/inc',
#rflte_mdsp.h
    '${INC_ROOT}/modem/rfa/rf/mdsp/qdsp6_lte/inc',
#rfc_card_lte.h
    '${INC_ROOT}/modem/rfa/rf/lte/rf/rfc/inc',
#rfc_card_wcdma.h
    '${INC_ROOT}/modem/rfa/rf/wcdma/rf/rfc/inc',
#rfm_internal.h
    '${INC_ROOT}/modem/rfa/rf/common/rf/mc/inc',
#rfwcdma_core_txplim.h
    '${INC_ROOT}/modem/rfa/rf/wcdma/rf/core/src',
#rfwcdma_mdsp.h
    '${INC_ROOT}/modem/rfa/rf/mdsp/qdsp6_wcdma/inc',
#rfnv_wcdma.h
    '${INC_ROOT}/modem/rfa/rf/wcdma/rf/nv/inc',
#rfa_variation.h
    '${INC_ROOT}/modem/rfa/variation/inc',
#rfa_local_defines.h
    '${INC_ROOT}/modem/rfa/cust/inc',
#rfc_card_tdscdma.h
    '${INC_ROOT}/modem/rfa/rf/tdscdma/rf/rfc/inc',
#rfnv_tdscdma.h
    '${INC_ROOT}/modem/rfa/rf/tdscdma/rf/nv/inc',
#rf_tdscdma_core_util.h
    '${INC_ROOT}/modem/rfa/rf/tdscdma/rf/core/inc',
#rf_buffer_intf.h
    '${INC_ROOT}/modem/rfa/rf/hal/common/inc',
#rf_buffer_intf.h
    '${INC_ROOT}/rfa/rf/hal/common/inc',
#### Below this - violations for DIME 
#rf_hal_sbi.h
    '${INC_ROOT}/modem/rfa/rf/hal/bus/inc',
#rfcommon_msm_cal.h
    '${INC_ROOT}/modem/rfa/rf/hal/msm/inc',  
#rfc_bsp.h
#    '${INC_ROOT}/modem/rfa/rfc/target/msm8974/inc',
#rfd_grfc.h
    '${INC_ROOT}/modem/rfa/rf/hal/bus/rfd/common/inc',
#rfd_grfc_modem.h
    '${INC_ROOT}/modem/rfa/rf/hal/bus/rfd/nikel/inc',
#rfcommon_mdsp_event_intf.h
    '${INC_ROOT}/modem/rfa/rf/mdsp/qdsp6_common/inc',
#rfcommon_msm.h
    '${INC_ROOT}/modem/rfa/rf/hal/dime/common/inc',
#rfnv_items.h
    '${INC_ROOT}/modem/rf/common/rf/nv/inc',
    ])
    

#rfc_bsp.h
# This will refer to 8974 folder till RFC support for MDM9x25 is provided.
if env.get('CHIPSET') in ('msm8974', 'mdm9x25', 'mdm9x35'):
  env.PublishProtectedApi( 'RFDEVICE_INC', [
    '${RFA_ROOT}/rfc/dime/target/msm8974/inc',
    ])
else:
  env.PublishProtectedApi( 'RFDEVICE_INC', [
    '${RFA_ROOT}/rfc/target/${CHIPSET}/inc',
    ])


#-------------------------------------------------------------------------------

# Enable debug flag to strip out internal debug APIs from customer builds
if 'USES_INTERNAL_BUILD' in env:
   env.Append(CPPDEFINES = ['FEATURE_RFA_DEVICE_DEBUG'])

if ('USES_FEATURE_FSK_TX' in env ):
    env.Append(CPPDEFINES = ['RFGSM_FSK_ENABLE'])

# Enable warnings -> errors
if 'USES_INTERNAL_BUILD' in env:
   env = env.Clone(HEXAGONCC_WARN = "${HEXAGONCC_WARN} -Werror", 
                   HEXAGONCXX_WARN = "${HEXAGONCCXX_WARN} -Werror")     

env.PublishPrivateApi( 'RFA_RF_VIOLATIONS', [
       '${INC_ROOT}/perf/heap_mgt/inc',
       '${INC_ROOT}/core/systemdrivers/clk/inc',
        '${INC_ROOT}/modem/tdscdma/l1/src',#for tdscdma nonsig ber
       '${INC_ROOT}/modem/geran/variation/inc',
       '${INC_ROOT}/modem/geran/cust/inc',
       '${INC_ROOT}/modem/hdr/variation/inc',
       '${INC_ROOT}/modem/hdr/cust/inc',
       '${INC_ROOT}/modem/mcs/variation/inc',
       '${INC_ROOT}/modem/mcs/cust/inc',
       '${INC_ROOT}/modem/mcs/hwio/inc',
       '${INC_ROOT}/modem/mcs/hwio/inc/msm8974',
       '${INC_ROOT}/modem/mmcp/variation/inc',
       '${INC_ROOT}/modem/mmcp/cust/inc',
       '${INC_ROOT}/modem/tdscdma/variation/inc',
       '${INC_ROOT}/modem/tdscdma/cust/inc',
       '${INC_ROOT}/modem/wcdma/variation/inc',
       '${INC_ROOT}/modem/wcdma/cust/inc',
  ])

env.LoadSoftwareUnits( ) 
