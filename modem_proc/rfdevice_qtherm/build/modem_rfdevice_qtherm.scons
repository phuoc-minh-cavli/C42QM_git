#====include path optimized=====================================================
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2014 Qualcomm Technologies, Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies, Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies, Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/rfdevice_qtherm.mpss/1.30/build/modem_rfdevice_qtherm.scons#1 $
# $DateTime: 2020/04/16 12:14:19 $ 
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 10/20/14   chenh   Enabled compiler warings to errors
# 10/16/14   dej     Clean-up SCons and add support for TABASCO
# 09/05/14   vv      Initial version
#===============================================================================

Import('env')
env = env.Clone()

import os
#-------------------------------------------------------------------------------
# Enable warnings -> errors
if 'USES_INTERNAL_BUILD' in env:
   env = env.Clone(HEXAGONCC_WARN = "${HEXAGONCC_WARN} -Werror", 
                   HEXAGONCXX_WARN = "${HEXAGONCCXX_WARN} -Werror")	
  
  
#usage:  ENV_UPDATE_RFA=CHIPSET,=mdm9x15,USES_NO_DEBUG,delete,USES_HI_SPEED,add
if ARGUMENTS.get('ENV_UPDATE_RFA'):
   
   env_update_string    = ARGUMENTS.get('ENV_UPDATE_RFA')
   env_update_list      = env_update_string.split(',')
   item_total           = len(env_update_list)
   list_index           = 0
   
   #note if list is not even number of items, last odd item is ignored
   while list_index < item_total-1:
                 
      item            = env_update_list[list_index]  
      value           = env_update_list[list_index+1]
      list_index      += 2
                                              
      if(value == 'add'):
         env[str(item)] = 'yes'
         print "adding",item,"to env"                                          
                
      elif(value == 'delete'):
         del env[str(item)]
         print "deleting",item,"from env"
      
      else:
         if(value[0] != '='):
            print "missing leading = in",value
            print "not updating ",item
                 
         else:
            value2 = value[1:len(value)]
            env[str(item)] = value2
            print "now setting",item,value



LIB_NAME        = 'modem_rfdevice_qtherm'
IMAGE_SOURCES   = ['MODEM_MODEM','MOB_RFA']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'


from glob import glob

env = env.Clone()

#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

env.Append(CPPDEFINES = ['MSG_BT_SSID_DFLT=MSG_SSID_RF',]) 


env.RequirePublicApi(['RFLM',],area='RFLM')

env.RequirePublicApi(['RFMODEM'],area=env.get('RF_GLOBALS')['RFMODEM_AREA'])

env.RequirePublicApi('QTF', area='MOB') # QTF comes from MOB area in no-modem-dir

env.RequirePublicApi([
        'SERVICES',
		'KERNEL',
		'DAL',
		'SYSTEMDRIVERS',
		'DEBUGTOOLS',
		'MPROC',
		'STORAGE',
        ],
        area='CORE')

env.RequirePublicApi([
        'MMCP',
        ],
        area='MMCP')

env.RequirePublicApi([
        'MCS',
        ],
        area='MCS')		

env.RequirePublicApi([
        'WCDMA',
		'GERAN',
		'RF',
		'COMMON'
        ],
        area='FW')		

env.RequirePublicApi([
        'RFDEVICE_QTHERM',
        ],
        area='RFDEVICE_QTHERM')

env.RequirePublicApi([
        'RFDEVICE_QFE3320',
        ],
        area='RFDEVICE_QFE3320')
		
env.RequirePublicApi([
        'RFDEVICE_QFE3335',
        ],
        area='RFDEVICE_QFE3335')
		
env.RequirePublicApi([
        'RFDEVICE_QFE3335FC',
        ],
        area='RFDEVICE_QFE3335FC')		

env.RequirePublicApi([
        'RFDEVICE_QFE3345',
        ],
        area='RFDEVICE_QFE3345')		
		
env.RequirePublicApi([
        'COMMON',
		'CDMA',		
        ],
        area='RFA')

env.RequirePublicApi([
        'RFDEVICE_INTERFACE',
        ],
        area='RFDEVICE_INTERFACE')		


env.RequirePublicApi([
        'GERAN',
        ],
        area='GERAN') 
		

env.RequireRestrictedApi([
	'RFDEVICE_QTHERM_VIOLATIONS',
    ])
	

LIB_SOURCES = [ ] 

SOURCE_FILES = [ ] 

#find all .c
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))

#find all .cpp files 
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))

#find all .s files
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.s'))


for filename in SOURCE_FILES:
        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


if LIB_SOURCES:

        env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME,[
        LIB_SOURCES,
        ])


env2 = env.Clone()

#env2.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that AddBinaryLibrary can be launched
LIB_SOURCES = []  #empy list

#force HY11 protected library to be rebuilt
if 'USES_FEATURE_RF_PACKBUILD_GENERATE_PROTECTED_LIBS' in env2:
	env2.Replace(USES_NO_STRIP_NO_ODM = 'yes')
	
if 'USES_NO_STRIP_NO_ODM' in env2:
        
                SOURCE_FILES = [ ] 
        
               #find all .c
                SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.c'))
        
               #find all .cpp files 
                SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))
        
               #find all .s files
                SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.s'))
        
        
                for filename in SOURCE_FILES:
                        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that the pre-built library will be added to the list file
env2.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_protected',[
    LIB_SOURCES,
    ], pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])

print SOURCE_FILES
	
#----------------------------------------------------------------------------#
# Export inc and protected directories within rfdevice_qtherm
#----------------------------------------------------------------------------#
env.PublishProtectedApi ('RFDEVICE_QTHERM_INC',[
     '${RFDEVICE_QTHERM_ROOT}/inc',
     '${RFDEVICE_QTHERM_ROOT}/protected',
     ])

env.RequireProtectedApi (['RFDEVICE_QTHERM_INC'])

env.LoadSoftwareUnits( )
