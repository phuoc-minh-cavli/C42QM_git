#pragma once
/*=============================================================================
  @file sns_fw_log.h

  Log packets generated by the Framework.

  Copyright (c) 2016-2018 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ===========================================================================*/

/*=============================================================================
  Include Files
  ===========================================================================*/

#include "sns_fw_sensor.h"
#include "sns_fw_sensor_instance.h"
#include "sns_rc.h"
#include "sns_request.h"
#include "sns_sensor.h"
#include "sns_sensor_event.h"
#include "sns_sensor_instance.h"
#include "sns_sensor_uid.h"
#include "sns_time.h"
#include "stddef.h"
#include "stdint.h"

/*=============================================================================
  Forward Declarations
  ===========================================================================*/

struct sns_fw_sensor_instance;
struct sns_sensor;
struct sns_sensor_instance;
struct sns_sensor_uid;
struct sns_fw_request;
struct sns_sensor_event;
struct sns_fw_data_stream;

/*=============================================================================
  Public Function Declarations
  ===========================================================================*/

/**
 * Publish a Sensor Instance API Event Log Packet
 *
 * @param[i] instance Sensor Instance generating the event
 * @param[i] sensor_uid UID of the sensor which received the request
 * @param[i] event Event payload
 *
 * @return
 * SNS_RC_SUCCESS Log is succesfully published
 * SNS_RC_FAILED Log creation / submission fails
 * SNS_RC_NOT_SUPPORTED Logging is disabled
 */
sns_rc sns_fw_log_sensor_inst_api_event(struct sns_sensor_instance *instance,
    struct sns_sensor_uid const *sensor_uid, struct sns_sensor_event *event);

/**
 * Publish a Sensor API Request Log Packet
 *
 * @param[i] sensor Sensor servicing the request
 * @param[i] req Request payload
 * @param[i] ts timestamp when request was received
 *
 * @return
 * SNS_RC_SUCCESS Log is succesfully published
 * SNS_RC_FAILED Log creation / submission fails
 * SNS_RC_NOT_SUPPORTED Logging is disabled
 */
sns_rc sns_fw_log_sensor_api_req(struct sns_sensor *sensor,
    struct sns_fw_request const *req, sns_time ts);

/**
 * Publish a Sensor API Event Log Packet
 *
 * @param[i] stream Data Stream on which event is generated
 * @param[i] event Event payload
 *
 * @return
 * SNS_RC_SUCCESS Log is succesfully published
 * SNS_RC_FAILED Log creation / submission fails
 * SNS_RC_NOT_SUPPORTED Logging is disabled
 */
sns_rc sns_fw_log_sensor_api_event(struct sns_fw_data_stream *stream,
    struct sns_sensor_event *event);

/**
 * Publish a Client API Request Log Packet
 *
 * @param[i] instance Client manager sensor Instance receiving the request
 * @param[i] src_sensor Source Sensor for which the request is intended
 * @param[i] sensor_uid ID of the Client Manager sensor generating the log
 * @param[i] client_id  ID of the client from whom request is received
 * @param[i] payload PB encoded payload of type
 *       sns_client_request_msg as defined in sns_client.proto
 * @param[i] payload_len length of the encoded payload
 *
 * @return
 * SNS_RC_SUCCESS Log is succesfully published
 * SNS_RC_FAILED Log creation / submission fails
 * SNS_RC_NOT_SUPPORTED Logging is disabled
 */
sns_rc sns_fw_log_client_api_req(struct sns_sensor_instance *instance,
  struct sns_sensor const *src_sensor, struct sns_sensor_uid const *sensor_uid, uint64_t client_id,
  void *payload, size_t payload_len);

/**
 * Publish a Client API Response Log Packet
 *
 * @param[i] instance Client manager sensor Instance sending the response
 * @param[i] src_sensor Source Sensor sending the response
 * @param[i] sensor_uid ID of the Client Manager sensor
 *       generating the log
 * @param[i] client_id  ID of the client to which response is being sent
 * @param[i] error The response error
 *
 * @return
 * SNS_RC_SUCCESS Log is succesfully published
 * SNS_RC_FAILED Log creation / submission fails
 * SNS_RC_NOT_SUPPORTED Logging is disabled
 */
sns_rc
sns_fw_log_client_api_resp(struct sns_sensor_instance *instance,
  struct sns_sensor const *src_sensor, struct sns_sensor_uid const *sensor_uid,
  uint64_t client_id, uint64_t error);

/**
 * Publish a Client API Indication Log Packet
 *
 * @param[i] instance Client manager sensor Instance sending the indication
 * @param[i] src_sensor Source sensor generating event
 * @param[i] sensor_uid ID of the Client Manager sensor
 *       generating the log
 * @param[i] client_id  ID of the client to which indication is  being sent
 * @param[i] payload PB encoded payload of type
 *       sns_client_event_msg as defined in sns_client.proto
 * @param[i] payload_len length of the encoded payload
 *
 * @return
 * SNS_RC_SUCCESS Log is succesfully published
 * SNS_RC_FAILED Log creation / submission fails
 * SNS_RC_NOT_SUPPORTED Logging is disabled
 */
sns_rc sns_fw_log_client_api_ind(struct sns_sensor_instance *instance,
  struct sns_sensor const *src_sensor, struct sns_sensor_uid const *sensor_uid,
  uint64_t client_id,
  void *payload, size_t payload_len);

/**
 * Publish a Sensor Instance Map Log Packet
 *
 * @param[i] instance of the sensor
 *
 * @return
 * SNS_RC_SUCCESS Log is succesfully published
 * SNS_RC_FAILED Log creation / submission fails
 * SNS_RC_NOT_SUPPORTED Logging is disabled
 */
sns_rc sns_fw_log_inst_map(struct sns_sensor_instance *instance);
