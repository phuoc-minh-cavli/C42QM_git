#pragma once
/*=============================================================================
  @file sns_fw_attribute_service.h

  Private Framework state for the Attribute Service.

  Copyright (c) 2016-2018 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ===========================================================================*/

/*=============================================================================
  Include Files
  ===========================================================================*/
#include <stdbool.h>
#include "sns_attribute_service.h"
#include "sns_isafe_list.h"
#include "sns_osa_lock.h"
#include "sns_sensor_uid.h"

/*=============================================================================
  Forward Declarations
  ===========================================================================*/

struct sns_sensor;
struct sns_fw_sensor;
struct sns_sensor_library;
struct sns_fw_request;
struct sns_attribute_info_big;

/*=============================================================================
  Type Definitions
  ===========================================================================*/

/** Whether events generated by or requests sent to this Sensor should
 * receive high priority for processing. */
typedef struct sns_attr_priority
{
  bool event_priority;
  bool req_priority;
} sns_attr_priority;

/**
 * Sensor-specific attribute information.  This data may only be modified
 * or accessed while holding the sensor_attributes_lock.
 */
typedef struct sns_attribute_info
{
  struct sns_attribute_info_big *attr_info;
  /* The following field values are determined strictly from Sensor-published
   * attributes, and are available to optimization purposes only. */

  /* Whether the Sensor has yet published that it is available for clients */
  bool available;
  /* Whether the sensor is a physical sensor; used by PWR Manager */
  bool is_physical_sensor;
  /* Whether events generated by or requests sent to this Sensor should
   * receive high priority for processing. */
  sns_attr_priority priority;
} sns_attribute_info;

typedef bool (*process_attribute_cb)(void *value, uint32_t value_len, void *arg);

/*=============================================================================
  Public Function Declarations
  ===========================================================================*/

/**
 * Handle an attribute request sent to some sensor.  Send an attribute event
 * back to the client.
 *
 * @param[i] sensor Sensor whose attributes should be sent
 * @param[i] req Any additional request configuration; data stream to sent event
 *
 * @return
 * SNS_RC_SUCCESS
 */
sns_rc sns_attr_svc_handle_req(struct sns_sensor *sensor,
    struct sns_fw_request *req);

/**
 * Initialize the attribute service; to be used only by the Service Manager.
 */
struct sns_fw_attribute_service* sns_attr_svc_init(void);

/* Callback function used in sns_attr_svc_sensor_foreach() */
typedef bool (*sns_attr_svc_sensor_foreach_func)
  (struct sns_attribute_info *attr_info, void *arg);

/**
 * For each sensor on the system, call func with arg.  No locks may be
 * acquired within the callback function.
 *
 * @param[i] func Function called for each known Sensor
 * @param[i] arg User-specified argument to be used in func callback
 *
 * @return False if func() returned false for a given sensor input
 */
bool sns_attr_svc_sensor_foreach(sns_attr_svc_sensor_foreach_func func, void *arg);

/**
 * Initialize the attribute service state for a particular Sensor.
 *
 * @return
 * SNS_RC_SUCCESS
 */
sns_rc sns_attr_svc_sensor_init(struct sns_fw_sensor *sensor);

/**
 * Deinitialize and free any state created within init_sensor.
 */
void sns_attr_svc_sensor_deinit(struct sns_fw_sensor *sensor);

/**
 * Look-up and return the Sensor vendor string.  As long as vendor_len > 0,
 * vendor will always be null-terminated.
 */
void sns_attr_info_get_vendor(struct sns_attribute_info const *attr_info,
    char *vendor, uint32_t vendor_len);

/**
 * Look-up and return the Sensor data type string.  As long as
 * data_type_len > 0, data_type will always be null-terminated.
 */
void sns_attr_info_get_data_type(struct sns_attribute_info const *attr_info,
    char *data_type, uint32_t data_type_len);

/**
 * Lookup and return the sensor priority flag.
 */
sns_attr_priority sns_attr_info_get_priority(struct sns_attribute_info const *attr_info);

/**
 * Lookup and return the sensor available flag.
 */
bool sns_attr_info_get_available(struct sns_attribute_info const *attr_info);

/**
 * Lookup and return whether this is a physical sensor.
 */
bool sns_attr_info_get_is_physical_sensor(struct sns_attribute_info const *attr_info);

/**
 * Lookup and return the Sensor UID.
 */
sns_sensor_uid sns_attr_info_get_suid(struct sns_attribute_info const *attr_info);

/**
 * Set the Sensor UID associated with this attribute information.
 */
void sns_attr_info_set_suid(struct sns_attribute_info *attr_info,
    sns_sensor_uid const *suid);

/**
 * Set the vendor associated with this attribute information.
 */
void sns_attr_info_set_vendor(struct sns_attribute_info *attr_info,
    char const *vendor);

/**
 * Lookup and return the sensor associated with these attributes.
 */
struct sns_fw_sensor* sns_attr_info_get_sensor(struct sns_attribute_info const *attr_info);

/**
 * Lookup and return the sensor associated with these attributes.
 */
struct sns_sensor_library* sns_attr_info_get_library(struct sns_attribute_info const *attr_info);

/**
 * get value of is_default flag from the sns_attribute_info
 */
bool sns_attr_info_get_default(struct sns_attribute_info const *attr_info);

/**
 * set value of is_default flag from the sns_attribute_info
 */
void sns_attr_info_set_default(struct sns_attribute_info *attr_info, bool val);

/**
 * Lookup given attribute_id and call the process_attribute_cb with the
 * encoded attribute value.
 *
 * @note No mutexes may be acquired within the callback function.
 */
bool sns_attr_info_process_attribute(struct sns_attribute_info *attr_info,
    uint32_t attribute_id, process_attribute_cb cb, void *cb_arg);
