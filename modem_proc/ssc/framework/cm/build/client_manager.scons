#===============================================================================
#
# QMI Client Manager
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2016-2019 by Qualcomm Technologies, Inc.
# All Rights Reserved.
# Confidential and Proprietary - Qualcomm Technologies, Inc.
#
#-------------------------------------------------------------------------------
#
#  $Id: //components/rel/ssc.slpi/5.1/framework/cm/build/client_manager.scons#2 $
#  $DateTime: 2019/05/18 23:41:41 $
#  $Change: 19237683 $
#
#===============================================================================
Import('env')
import inspect

#-------------------------------------------------------------------------------
# External dependencies
#-------------------------------------------------------------------------------
env.RequirePublicApi([ 'COMMON', 'QDSSC', 'SNS_CLIENT_API' ], area='QMIMSGS')

#-------------------------------------------------------------------------------
# Adds self
#-------------------------------------------------------------------------------

if "SNS_ISLAND_INCLUDE_CM" in env:
  sections = ['.text.island', '.data.island', '.rodata.island']
else:
  sections = []

if "SENSORS_DD_DEV_FLAG" in env:
  clean_pack_sections = ['*.c','*.h','*.idl','*.json']
else:
  clean_pack_sections = ['*.pb.c','*.pb.h','*.json']

is_binary_lib = True
if 'SENSORS_DD_DEV_FLAG' not in env:
  is_binary_lib = False

if 'USES_SSC_STATIC_LIB_BUILDER' in env:
  env.AddSSCSU(inspect.getfile(inspect.currentframe()),
             core_public_api = ['MPROC','DAL'],
             clean_pack_list = clean_pack_sections ,
             binary_lib = is_binary_lib,
             register_func_name = "sns_register_cm",
             island_sections = sections)

if 'USES_QDSS_SWE' in env:
  QDSS_IMG = ['QDSS_EN_IMG']
  events = [
            ['SNS_CM_FLUSH_DDR_INST_LOOP', 'Profile Point %d', 'F'],
            ['SNS_CM_FLUSH_DDR_REQ_LOOP', 'Profile Point %d', 'F'],
            ['SNS_CM_FLUSH_DDR_BATCH_BIN_LOOP', 'Profile Point %d', 'F'],
            ['SNS_CM_MALLOC_EVENT', 'Profile Point %d', 'F'],
            ['SNS_CM_BATCH_BIN_EVENT', 'Profile Point %d', 'F'],
            ['SNS_CM_HANDLE_AP_TRANSITION', 'Profile Point %d  Prev State %d Curr State %d', 'F'],
            ['SNS_CM_NOTIFY_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_HANDLE_CLNT_DISABLE_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_HANDLE_CLNT_DISCONNECT_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_SEND_ALL_DATA_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_CLNT_RESUME_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_HNDL_LOW_BATHC_MEM_FUNC', 'Profile Point %d Mem state %d', 'F'],
            ['SNS_CM_DECIDE_ISLAND_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_INSERT_EVENT_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_REMOVE_OLDEST_EVENT_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_DROP_OLDEST_BATCH_DATA_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_UPDATE_ALL_TIMERS_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_HNDL_TIMER_EVENT_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_STORE_EVENT_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_HANDLE_IND_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_INST_SET_CLNT_CFG_FUNC', 'Profile Point %d', 'F'],
            ['SNS_CM_LOW_MEM_THRSH1_SIG', 'Profile Point %d', 'F'],
            ['SNS_CM_LOW_MEM_THRSH2_SIG', 'Profile Point %d', 'F'],
            ['SNS_CM_BATCH_TIMER_SIG', 'Profile Point %d', 'F'],
            ['SNS_CM_QURT_SIG', 'Profile Point %d', 'F']
            ]
  env.AddSWEInfo(QDSS_IMG, events)
