#===============================================================================
#
# Test sensor
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2016-2017 by Qualcomm Technologies, Inc.
# All Rights Reserved.
# Confidential and Proprietary - Qualcomm Technologies, Inc.
#
#-------------------------------------------------------------------------------
#
#  $Id: //components/rel/ssc.slpi/5.1/sensors/test/build/sns_test.scons#1 $
#  $DateTime: 2019/04/24 05:02:39 $
#  $Change: 18986584 $
#
#===============================================================================
Import('env')
import os, inspect

ME = inspect.getfile(inspect.currentframe())
MY_ROOT = os.path.dirname(os.path.dirname(ME))

test_sensor_island_enable = False

if 'SNS_ISLAND_INCLUDE_TEST_SENSOR' in env:
  test_sensor_island_enable = True

#-------------------------------------------------------------------------------
# Adds self
#-------------------------------------------------------------------------------
if 'USES_SSC_STATIC_LIB_BUILDER' in env:
  env.AddSSCSU(ME,
               register_func_name = "sns_test_register",
               binary_lib = False,
               add_island_files = test_sensor_island_enable)

#-------------------------------------------------------------------------------
# test sensor configurations
#-------------------------------------------------------------------------------
test_sensors = [
  'SNS_TEST_ACCEL',
  'SNS_TEST_CMC',
  'SNS_TEST_DISTANCE_BOUND',
  'SNS_TEST_AMD',
  'SNS_TEST_FACING',
  'SNS_TEST_BASIC_GESTURES',
  'SNS_TEST_TILT',
  'SNS_TEST_WALK',
  'SNS_TEST_GYRO_CAL',
  'SNS_TEST_GYRO_ROT_MATRIX',
  'SNS_TEST_RESAMPLER',
  'SNS_TEST_GRAVITY',
  'SNS_TEST_SENSOR_TEMP',
  'SNS_TEST_GYRO',
  'SNS_TEST_PRESSURE',
  'SNS_TEST_MAG',
  'SNS_TEST_AMBIENT_LIGHT',
  'SNS_TEST_PROXIMITY',
  'SNS_TEST_HUMIDITY',
  'SNS_TEST_RGB',
  'SNS_TEST_UV',
  'SNS_TEST_HALL',
  'SNS_TEST_AMBIENT_TEMPERATURE',
  'SNS_TEST_GAME_RV',
  'SNS_TEST_HALL',
  'SNS_TEST_RMD',
  'SNS_TEST_SMD',
  'SNS_TEST_PSMD',
  'SNS_TEST_FMV',
  'SNS_TEST_GEOMAG_RV',
  'SNS_TEST_ROTV',
  'SNS_TEST_REMOTE_PROC_STATE',
  'SNS_TEST_OEM1',
  'SNS_TEST_DEVICE_ORIENT',
  'SNS_TEST_PEDOMETER',
  'SNS_TEST_BTE',
  'SNS_TEST_ASYNC_UART',
  'SNS_TEST_MULTISHAKE',
  'SNS_TEST_THRESHOLD' ,
  'SNS_TEST_CMD',
  'SNS_TEST_TTW',
]

for s in test_sensors:
  if s in env:
    env.Append(CPPDEFINES = [s])
    break

#-------------------------------------------------------------------------------
# Remove source files
#-------------------------------------------------------------------------------

files_to_remove = [
  'sns_test_amd.h',
  'sns_test_amd.c',
  'sns_test_amd_island.c',
  'sns_test_cmc.h',
  'sns_test_cmc.c',
  'sns_test_cmc_island.c',
  'sns_test_distance_bound.h',
  'sns_test_distance_bound.c',
  'sns_test_distance_bound_island.c',
  'sns_test_device_orient.h',
  'sns_test_device_orient.c',
  'sns_test_device_orient_island.c',
  'sns_test_gyro_cal.h',
  'sns_test_gyro_cal.c',
  'sns_test_gyro_cal_island.c',
  'sns_test_gyro_rot_matrix.h',
  'sns_test_gyro_rot_matrix.c',
  'sns_test_gyro_rot_matrix_island.c',
  'sns_test_resampler.h',
  'sns_test_resampler.c',
  'sns_test_resampler_island.c',
  'sns_test_gravity.h',
  'sns_test_gravity.c',
  'sns_test_gravity_island.c',
  'sns_test_psmd.h',
  'sns_test_psmd.c',
  'sns_test_psmd_island.c',
  'sns_test_tilt.h',
  'sns_test_tilt.c',
  'sns_test_tilt_island.c',
  'sns_test_walk.h',
  'sns_test_walk.c',
  'sns_test_walk_island.c',
  'sns_test_remote_proc_state.h',
  'sns_test_remote_proc_state.c',
  'sns_test_pedometer.h',
  'sns_test_pedometer.c',
  'sns_test_rotv.h',
  'sns_test_rotv.c',
  'sns_test_rotv_island.c',
  'sns_test_fmv.h',
  'sns_test_fmv.c',
  'sns_test_fmv_island.c',
  'sns_test_geomag_rv.h',
  'sns_test_geomag_rv.c',
  'sns_test_geomag_rv_island.c',
  'sns_test_basic_gestures.h',
  'sns_test_basic_gestures.c',
  'sns_test_basic_gestures_island.c',
  'sns_test_mag_cal.h',
  'sns_test_mag_cal.c',
  'sns_test_async_uart.h',
  'sns_test_async_uart.c',
  'sns_test_multishake.h',
  'sns_test_multishake.c',
  'sns_test_dpc.c',
  'sns_test_dpc.h',
  'sns_test_hall.c',
  'sns_test_hall.h',
  'sns_test_threshold.h',
  'sns_test_threshold.c',
  'sns_test_threshold_island.c',
  'sns_test_cmd.c',
  'sns_test_cmd_island.c',
  'sns_test_cmd.h',
  'sns_test_ttw.c',
  'sns_test_ttw_island.c',
  'sns_test_ttw.h',
]

if "SENSORS_DD_DEV_FLAG" in env:
  files_to_remove += [
    'sns_test_oem1.h',
    'sns_test_oem1.c',
  ]

REMOVE_FILES =  env.FindFiles(files_to_remove, MY_ROOT)

env.CleanPack(['SSC_BUILD_TAGS'], REMOVE_FILES)
#print '\n'.join(["%s" % i for i in REMOVE_FILES])
#print "-*-*-*-*-*-*-*-*-*-*-*-*"

