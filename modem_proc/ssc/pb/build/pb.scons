#===============================================================================
#
# Sensors (SSC) AU
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2016-2019 by Qualcomm Technologies, Inc.
# All Rights Reserved.
# Confidential and Proprietary - Qualcomm Technologies, Inc.
#
#-------------------------------------------------------------------------------
#
#  $Id: //components/rel/ssc.slpi/5.1/pb/build/pb.scons#2 $
#  $DateTime: 2019/08/13 18:26:08 $
#  $Change: 20195191 $
#
#===============================================================================
Import('env')
import json
import subprocess
import os, inspect
import platform

ME = inspect.getfile(inspect.currentframe())
MY_ROOT = os.path.dirname(os.path.dirname(ME))

#-------------------------------------------------------------------------------
# Protocol Buffer API files
#-------------------------------------------------------------------------------
PB_PATH = os.path.join(MY_ROOT, 'pb')
REMOVE_FILES  = []
REMOVE_FILES +=  env.FindFiles(['*.proto'], PB_PATH)
env.CleanPack(env['SSC_BUILD_TAGS'], REMOVE_FILES)
env.RequirePublicApi('SNS_API_INCLUDES', area='ssc_api')
PROTO_NAME = "SSC_PB"
PROTO_SRCFILES = []

if 'USES_SSC_PBGEN' in env:
  for proto_file in env.FindFiles(['*.proto'], PB_PATH):
    output = env.PBGen(str(proto_file))
    PROTO_SRCFILES += [output[1]]   # Just include the .c file

MY_PROTO_LIB = os.path.join('${BUILDPATH}', PROTO_NAME)

if 'SSC_TARGET_X86' in env['CPPDEFINES']:
  lib = env.AddLibrary(['SSC_SIM'], MY_PROTO_LIB, PROTO_SRCFILES)
else:
  proto_lib = env.AddBinaryLibrary(env['SSC_BUILD_TAGS'], MY_PROTO_LIB, PROTO_SRCFILES)
  env.Depends(proto_lib, PROTO_SRCFILES)
  if 'USES_MEMSEG' in env:
    env.TagLibraryForMemorySegment(env['SSC_BUILD_TAGS'], 'ssc', proto_lib)
  elif 'USES_ISLAND' in env:
    env.AddIslandLibrary(env['SSC_BUILD_TAGS'], proto_lib)

  
#------------------------------------------------------------------------------
# Scan subdirectories to find more /build folders
#------------------------------------------------------------------------------
env.LoadSoftwareUnits()
