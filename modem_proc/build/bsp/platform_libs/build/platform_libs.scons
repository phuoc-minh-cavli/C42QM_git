#===============================================================================
#
# Basic skeleton image script
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2015 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/build.mpss/2.2.8.1.c5.0.1/bsp/platform_libs/build/platform_libs.scons#2 $
#  $DateTime: 2019/02/15 15:23:57 $
#  $Change: 18345474 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
import os
Import('env')

#------------------------------------------------------------------------------
# Init image vars 
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Init aliases array.
# first alias (0th elemten in array) is always unique name, there should 
# never be two images with the same unique name
aliases = ['platform_libs', 'adsp_proc', 'adsp_images', 'adsp_mpd_images', 'adsp_core_images', 'adsp_mpd_core_images',
           'msm8974_SPD', 'mdm9x25_SPD', 'msm8x26_SPD',
           'msm8974_MPD', 'mdm9x25_MPD', 'msm8x26_MPD', 'apq8084_MPD', 'msm8962_MPD', 
		   'msm8974_hcbsp_MPD', 'msm8x26_hcbsp_MPD', 'msm8x10_MPD', 
		   'msm8974_hcbsp_SPD', 'msm8x26_hcbsp_SPD', 'msm8x10_SPD', 
		   'mapss','modem_audio_bringup']

#------------------------------------------------------------------------------
# Init environment variables
env.InitImageVars(
   alias_list=aliases,  # aliases list
   proc='qdsp6',      # proc (depending on tool chain arm, hexago, etc)
   config='adsp',
   plat='qurt',           # platform (l4, blast, foo, bar, etc)
#build_tags = ['BASIC_IMAGE_EXAMPLE'],
   build_tags = ['CORE_QDSP6_SW', 'BUILD_TEST_MODEM', 'QDSS_EN_IMG','AVS_ADSP','VIDEO_ADSP', 'QMIMSGS_ADSP' ],
   deprecated_build_tags = ['CBSP_QDSP6_SW_IMAGE'],
   tools = ['buildspec_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/doc_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/dnt_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/devcfg_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/cmm_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/swe_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/sleep_lpr_builder.py']
)

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
#import pdb; pdb.set_trace() 
if not env.CheckAlias():
   Return()

#---------------------------------------------------------------------------
# Load in CBSP uses and path variables
#---------------------------------------------------------------------------
env.InitBuildConfig()
env.Replace(USES_DEVCFG = 'yes')
env.Replace(DEVCONFIG_ASSOC_FLAG = 'DAL_DEVCFG_IMG')

if 'USES_MULTI_PD' in env:
   env.PrintInfo("The adsp platform libs are being built for Multi PD version")
   env.AddUsesFlags('USES_MPD')
   env.AddUsesFlags('USES_QURTOS_IMG') #this is the flag to be used for mpd builds to compile for guest os
   env.Append(CPPDEFINES="SENSOR_IMG_NAME=\\\"M${BUILD_ASIC}${BUILD_ID}${BUILD_VER}_SENSOR.pbn\\\"")
   env.Append(CPPDEFINES="AUDIO_IMG_NAME=\\\"M${BUILD_ASIC}${BUILD_ID}${BUILD_VER}_AUDIO.pbn\\\"")
   env.Append(CPPDEFINES=["MULTI_PD_BUILD"])
else:
   env.PrintInfo("The adsp platform libs are being built for Single PD version")

#if image wants to own "main": # image calls core_main to init cbsp
env.Append(CPPDEFINES=["COREMAIN_EXCLUDE_MAIN"])

#if ARGUMENTS.get("$SIM") == "1" or ARGUMENTS.get("$SIM") == "TRUE":
if ARGUMENTS.get('SIM') == "1" or ARGUMENTS.get('SIM') == "TRUE":
   env.PrintInfo("SIM is in the argument, build platform for SIM image")
   env.AddUsesFlags(['USES_STACK_PROTECTION_ENABLED','USES_AVS_TEST'])
else:
   env.PrintInfo("SIM is not in the argument, build platform for Target image")
   env.AddUsesFlags(['USES_STACK_PROTECTION_ENABLED','USES_ADSPPM_INTEGRATION_ENABLED', 'USES_FASTCV_ENABLED'])

#---------------------------------------------------------------------------
# Load in the tools-set init scripts
#---------------------------------------------------------------------------
env.LoadToolScript('platform_builders', toolpath = ['${BUILD_ROOT}/platform/build'])
#env.Replace(QDSP6_LIBDIR = "${COREBSP_ROOT}/kernel/qurt/install_again/ADSPv5MP/lib")
env.Replace(QDSP6_LIBDIR = "${COREBSP_ROOT}/kernel/qurt/install/modem${Q6VERSION}/lib")



#Add LPASS Image specific linker inputs here
env.LoadToolScript('hexagon', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])
#env.LoadToolScript('qdsp6_defs_adsp', toolpath = ['${BUILD_ROOT}/build/ms'])

env.Replace(QDSP6_RELEASE_LIB_DIR="${QDSP6_RELEASE_DIR}/dinkumware/lib/${Q6VERSION}/G0")

env.Append(CCFLAGS='-G8')
env.Append(CXXFLAGS='-G8')
env.Append(ASFLAGS='-G0')

if 'USES_STACK_PROTECTION_ENABLED' in env:
    env.Append(CFLAGS='-fstack-protector')

if 'USES_MALLOC_WRAPPER_ENABLED' in env:
    env.Append(CFLAGS='-DMALLOC_WRAPPER ')

if 'USES_ADSPPM_INTEGRATION_ENABLED' in env:
    if env.get('CHIPSET') == "msm8x26":
        env.Append(CFLAGS='-DADSPPM_INTEGRATION=1')
    elif env.get('CHIPSET') == "msm8x10":
        env.Append(CFLAGS='-DADSPPM_INTEGRATION=1')
    else:
        env.Append(CFLAGS='-DADSPPM_INTEGRATION=1')
else:
    env.Append(CFLAGS='-DADSPPM_INTEGRATION=0')      

#Append sim flag if building for sim 
if 'USES_AVS_TEST' in env:
    env.Append(CFLAGS='-DSIM')

#Enable full platform for everything but mdms and SIM builds
if 'USES_AVS_TEST' in env or env.get('CHIPSET').startswith('mdm') or env.get('CHIPSET') == "msm8916" or env.get('CHIPSET') == "msm8926" or env.get('CHIPSET') == "msm8936":
    env.AddUsesFlags('USES_PLATFORM_MINIMAL')
else:
    env.AddUsesFlags('USES_PLATFORM_FS')

# LTO support
env.InterceptAddLibraryCalls()

#---------------------------------------------------------------------------
# Libs/Objs
#---------------------------------------------------------------------------
image_libs = []
image_objs = []

#---------------------------------------------------------------------------
# Libraries Section
#---------------------------------------------------------------------------

# load Platform libs/objs build rules, but only if platform folder exists
if env['MSM_ID'] in ['8974', '8x26', '8092', '9x25', '8x10', '8084', '8962', '8926', '8916', '8936', '8909', '9609', '9x45', '9607', '9205']:
   expected_platform_dir = env['BUILD_ROOT'] + '/platform'
   if os.path.exists(expected_platform_dir):
      platform_au_items = env.LoadAreaSoftwareUnits('platform')
      image_libs.extend(platform_au_items ['LIBS'])
      image_objs.extend(platform_au_items ['OBJS'])
   else:
      print '\n\n*** Skippping PLATFORM.ADSP as dir [%s] was not found ***\n' % expected_platform_dir


image_units = [image_objs, image_libs]
#------------------------------------------------------------------------------
# Putting the image toghther
#------------------------------------------------------------------------------

if 'IMAGE_BUILD_LOCAL_FILES' in env:
   #-------------------------------------------------------------------------
   # Local Files
   #-------------------------------------------------------------------------
   
   # this is where local files are created, for example link scripts (lcs)
   # for qdsp6 like images, or scatter load files (scl) for amr like images.
   # for qdsp6 like images, or scatter load files (scl) for amr like images.
   local_items= []
   
   if 'USES_FEATURE_DYNAMIC_LOADING' in env:
       platform_sym_lst= env.RealPath('${SHORT_BUILDPATH}/PLATFORM_SYMS_${BUILD_ID}.txt')
       dlysm_list = env.DLExposeGenerateList([platform_sym_lst], None)
       local_items += dlysm_list
      
   image_units += local_items
if 'IMAGE_BUILD_LINK' in env:
   #-------------------------------------------------------------------------
   # Link image
   #-------------------------------------------------------------------------

   # this is where the rule to "link" is done.
   #image_elf = env.AddProgram("${SHORT_BUILDPATH}/${TARGET_NAME}", image_objs, LIBS=image_libs)
   
   # this is just to create something for testing
   image_elf = env.ListFileBuilder("${SHORT_BUILDPATH}/${TARGET_NAME}.txt", [image_objs, image_libs], 
         add_header=False, relative_path="${BUILD_ROOT}/build/ms", posix=True)
   
if 'IMAGE_BUILD_POST_LINK' in env:
   #-------------------------------------------------------------------------
   # Post process image
   #-------------------------------------------------------------------------
   
   # this is where any aditional rules after linking are done.

   #=========================================================================
   # Define targets needed 
   #
   image_units += [
      image_elf,
   ]

#=========================================================================
# Finish up...
env.BindAliasesToTargets(image_units)
