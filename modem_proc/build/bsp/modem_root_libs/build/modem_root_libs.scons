#===============================================================================
#
# Target-Level Build Script for Modem Processor
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2014 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 11/24/14   KKO     Created
#===============================================================================
import sys
import os
from glob import glob
from sets import Set

Import('env')

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
# alias first alias is always the target then the other possibles
aliases = ['modem_root_libs','modem_audio_bringup']

build_tags = ['CORE_QDSP6_SW', 'CORE_ROOT_PD', 'MODEM_MODEM', 'CORE_MODEM', 'MULTIMEDIA_QDSP6_SW', 'MULTIMEDIA_ROOT_PD', 'QDSS_EN_IMG', 'QMIMSGS_MPSS', 'CTA_APPS']

if os.path.exists(os.path.join(env.subst("${BUILD_ROOT}"), "build/manifest.xml")) or 'CRMSERVERNAME' in os.environ:
   build_tags.append('IMAGE_TREE_VERSION_AUTO_GENERATE')

# init environment variables
env.InitImageVars(
   alias_list=aliases,           # aliases
   proc='qdsp6',              # proc
   config='qdsp6_sw',                # config type, proc_name
   plat='qurt',
   build_tags = build_tags,
   deprecated_build_tags = ['CBSP_QDSP6_SW_IMAGE'],
   tools = ['buildspec_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/dnt_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/devcfg_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/cmm_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/swe_builder.py']
   )

if not env.CheckAlias():
   Return()

#---------------------------------------------------------------------------
# Load in CBSP uses and path variables
#---------------------------------------------------------------------------
env.InitBuildConfig()
#env.Replace(MBN_FILE="${BUILD_MS_ROOT}/bin/${SHORT_BUILDPATH}/dsp2")
env.Replace(USES_DEVCFG = True)
env.Replace(USES_MULTI_DEVCFG = True)
env.Replace(DEVCONFIG_ASSOC_FLAG = 'DAL_DEVCFG_IMG')
env.Append(USES_QDSS_SWE_MULTIPD = True)

 
#---------------------------------------------------------------------------
# root PD virtual address
#---------------------------------------------------------------------------
env.Replace(HEXAGON_IMAGE_ENTRY = '0xC0000000')

#---------------------------------------------------------------------------
# Load in the tools scripts
#---------------------------------------------------------------------------
env.LoadToolScript('hexagon', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])
env.LoadToolScript('qdsp6_defs', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])
env.LoadToolScript('sleep_lpr_builder', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])
env.LoadToolScript('build_utils', toolpath = ['${BUILD_ROOT}/build/scripts'])

#------------------------------------------------------------------------------
# Find the location of the config XML for CoreBSP.
#---------------------- --------------------------------------------------------
env.Replace(CONFIG_XML = env.FindConfigFiles('cust_config.xml')[0])

env.Append(CFLAGS = ARGUMENTS.get('T_CFLAGS', '') + ' ')
env.Append(LFLAGS = ARGUMENTS.get('T_LFLAGS', '') + ' ')

#---------------------------------------------------------------------------
# Proof of concept, need to find a correct location
#---------------------------------------------------------------------------

env.Append(CPPDEFINES=['MODEM_FW_NUM_PRIO=64'])

#---------------------------------------------------------------------------
# Enable Modem AU Attributes Parsing
#---------------------------------------------------------------------------
env.Replace( MODEM_AU_ATTRIB_FILE = env.FindConfigFiles('modem_task_stksz.csv')[0] )

#---------------------------------------------------------------------------
# If merging of constants is inhibited, re-enable it for memory savings.
# This is disabled in hexagon.py for legacy targets supporting paging.
#---------------------------------------------------------------------------
env.Replace(HEXAGON_LANIND = env.get('HEXAGON_LANIND', '').replace("-fno-merge-constants",""))

#---------------------------------------------------------------------------
# Load cleanpack script, if available
#---------------------------------------------------------------------------
if env.PathExists("../../../pack/build_cleanpack.py"):
   env.LoadToolScript("../../../pack/build_cleanpack.py")
env.LoadToolScript('platform_builders', toolpath = ['${BUILD_ROOT}/platform/build'])

env.AddUsesFlags('USES_RCINIT_PLAYBOOK') # MUST OCCUR BEFORE FIRST LoadAreaSoftwareUnits

# LTO support
env.InterceptAddLibraryCalls()

#---------------------------------------------------------------------------
# Libs/Objs
#---------------------------------------------------------------------------
modem_proc_img_libs = []
modem_proc_img_objs = []

#---------------------------------------------------------------------------
# Libraries Section
#---------------------------------------------------------------------------
def find_components (env):

   non_modem_lib_components = ['platform', 'qdsp6', 'hap','audio_avs', 'core', 'qmimsgs', 'apr']
   su_names_set = Set( env.GetAreaSoftwareUnitNames() )
   for su in non_modem_lib_components:
      su_names_set.discard( su )
   components = list( su_names_set )
   return components

components  = find_components(env)

build_tools = [
  '${BUILD_ROOT}/mcs/tools/build/stm1_builder.py',
  '${BUILD_ROOT}/mcs/tools/build/stm2_builder.py',
  '${BUILD_ROOT}/mcs/tools/build/msgr_builder.py',
]
for tool in build_tools:
  env.LoadToolScript(tool)


def add_umid(env, umid_file, umid_headers):
  if type(umid_headers) is not list:
	 umid_headers = [umid_headers]

  env.PrintDebugInfo('msgr', "add_umid: " + str(umid_headers))
  # Call the UMID builder to autogenerate the .umid file
  umid = env.UMID(source = umid_headers, target = umid_file)
  # Save a reference to the umid file
  env['UMID_ENV'].Append(UMIDS = umid)


if 'USES_MSGR' in env:
  # Save a pointer to the environment for gathering UMID's
  env.Replace(UMID_ENV = env)
  # Create a wrapper method for calling UMID builder and saving in environment
  env.AddMethod(add_umid, "AddUMID")
  

# Load Modem AU Attributes if specified
if 'MODEM_AU_ATTRIB_FILE' in env:
  files = env['MODEM_AU_ATTRIB_FILE']
  env.PrintDebugInfo('modemau', 'Modem Attrib Files: ' + str(files))
  # Make sure that files is a list
  if type(files) is not list:
	 files = [files]
  # Loop through each file
  for fname in files:
	 # Substitute to get the full path
	 fname = env.subst(fname)
	 env.PrintDebugInfo('modemau', "Loading attributes from: " + fname)
	 # Open the file
	 f = open(fname, "rb")
	 # Read all lines into a list
	 lines = f.readlines();
	 # Process each line in the file
	 for line in lines:
		# Strip off newline and split on commas
		line = line.strip()
		if line:  # Don't process blank lines
		   elems = line.strip().split(',')
		   key   = elems[0].upper()
		   value = elems[1]
		   # Add to the SCons environment
		   env[key] = value
	 f.close()

for component in components:
   au_items = env.LoadAreaSoftwareUnits(component)
   modem_proc_img_libs.extend(au_items['LIBS'])
   modem_proc_img_objs.extend(au_items['OBJS'])

#au_items = env.LoadAreaSoftwareUnits('audio_avs', filter_list=['pd']) 
#modem_proc_img_libs.extend(au_items['LIBS'])
image_units= [modem_proc_img_libs,modem_proc_img_objs]

image_name = env.get('IMAGE_NAME').lower()
env.SaveSWEListBuilder(['${BUILD_ROOT}/build/bsp/' + image_name + '/build/${SHORT_BUILDPATH}/sweevent_list.txt'],None)
env.SaveCoreSleepLPRListBuilder(['${BUILD_ROOT}/build/bsp/' + image_name + '/build/${SHORT_BUILDPATH}/sleep_LPR_list.txt'], None)


#--- RCINIT Playbook Extension, Library Specific Details ------------------- BEG

# ONLY WHEN DNT_BUILDER SCONS TOOL LOADED
if 'USES_RCINIT' in env and 'USES_RCINIT_PLAYBOOK' in env:
   env.AddRcinitPlaylistParams(build_tags,image_units)
#--- RCINIT Playbook Extension, Library Specific Details ------------------- END

def find_all_files(d):
   matches = []
   for root, dirnames, filenames in os.walk(d):
     for filename in filenames:
        matches.append(os.path.join(root, filename))
   return matches

if 'USES_BINARY_DIST' in env:
   # Use bindist dir plus our image subdir to load libs and objects
   bindistdir = env.subst('${BUILD_ROOT}/bindist/' + aliases[0])
   files = find_all_files(bindistdir)
   # Also load all files in the rootdir
   files += glob(env.subst('${BUILD_ROOT}/bindist/*'))
   for f in files:
      if os.path.isfile(f):
         f = f.replace(os.sep, '/')
         env.PrintDebugInfo('bindist', "Adding binary dist file: " + str(f))
         if f.endswith(env.subst('${LIBSUFFIX}')):
            modem_proc_img_libs.append(env.File(f))
         elif f.endswith(env.subst('${OBJSUFFIX}')):
            modem_proc_img_objs.append(env.File(f))
         else:
            env.PrintError("Unknown suffix adding binary dist files: " + str(f))


# --------------------------------------------------------------------------
# <edwinj> Process all UMIDs that have been added by above LoadAreaSoftwareUnits()
# --------------------------------------------------------------------------
if 'USES_MSGR' in env and 'UMIDS' in env:

  env.PrintDebugInfo('msgr', "UMIDS: " + str(env['UMIDS']))
  msgr_umid_h = '${BUILD_ROOT}/mcs/msgr/build/${BUILDPATH}/__msgr_global_umids.h'
  # Run the MSGR builder to generate the MSGR header file
  env.MSGR(source = env['UMIDS'], target = msgr_umid_h)


#------------------------------------------------------------------------------
# Init secure varables
#------------------------------------------------------------------------------
env.Replace(ENABLE_ENCRYPT = True)

  
if 'IMAGE_BUILD_LINK' in env:
   # this is  to generate lf file
   image_elf = env.ListFileBuilder("${SHORT_BUILDPATH}/${TARGET_NAME}.txt", [modem_proc_img_objs, modem_proc_img_libs], relative_path=None, posix=True)

if 'IMAGE_BUILD_POST_LINK' in env:
   image_units += [
      image_elf,
      # target_mbn,
   ]

#=========================================================================
# Finish up...
env.BindAliasesToTargets(image_units)
