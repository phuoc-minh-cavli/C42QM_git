#===============================================================================
#
# Target-Level Build Script for Modem Processor
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2011 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/build.mpss/2.2.8.1.c5.0.1/bsp/modem_proc_img/build/modem_proc.scons#3 $
#  $DateTime: 2018/11/13 11:23:53 $
#  $Change: 17610050 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
import sys
import os
from glob import glob
from sets import Set

Import('env')

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
# alias first alias is always the target then the other possibles
aliases = ['modem_proc', 'mpss']

build_tags = ['CORE_QDSP6_SW', 'MODEM_MODEM', 'CORE_MODEM', 'MULTIMEDIA_QDSP6_SW', 'QDSS_EN_IMG', 'QMIMSGS_MPSS', 'CTA_APPS']

if os.path.exists(os.path.join(env.subst("${BUILD_ROOT}"), "build/manifest.xml")) or 'CRMSERVERNAME' in os.environ:
   build_tags.append('IMAGE_TREE_VERSION_AUTO_GENERATE')
   build_tags.append('IMAGE_TREE_UUID_AUTO_GENERATE')

# init environment variables
env.InitImageVars(
   alias_list=aliases,           # aliases
   proc='qdsp6',              # proc
   config='qdsp6_sw',                # config type, proc_name
   plat='qurt',
#   buildpath="%s/${MSM_ID}/${BUILD_ID}" % aliases[0].lower(),
   target='MODEM_PROC_IMG_${BUILD_ID}',# target (elf, image file name)
   build_tags = build_tags,
   deprecated_build_tags = ['CBSP_QDSP6_SW_IMAGE'],
   tools = ['buildspec_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/dnt_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/devcfg_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/cmm_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/swe_builder.py']
   )

if not env.CheckAlias():
   Return()

#---------------------------------------------------------------------------
# Load in CBSP uses and path variables
#---------------------------------------------------------------------------
env.InitBuildConfig()
env.Replace(MBN_FILE="${BUILD_MS_ROOT}/bin/${SHORT_BUILDPATH}/dsp2")
env.Replace(USES_DEVCFG = 'yes')
env.Replace(USES_MULTI_DEVCFG = 'yes')

if env['MSM_ID'] in ['8994','9x45','8909','8952']:
  env.Replace(QURT_BUILD_CONFIG="modemv56")
elif env['MSM_ID'] in ['9205','9607']:
  env.Replace(QURT_BUILD_CONFIG="modemv67X_512")
elif env['MSM_ID'] in ['9x35','9609']:
  env.Replace(QURT_BUILD_CONFIG="modemv55")
else:
  print("-------------------------------------------------------------------------------")
  print("*** QuRT target could not be determined")
  print("-------------------------------------------------------------------------------")
  Exit(1)
  
if ('USES_FEATURE_DYNAMIC_LOADING_GLOBAL' in env and 'USES_INTERNAL_BUILD' in env) :
   env.Replace(USES_FEATURE_DYNAMIC_LOADING = 'yes')

#---------------------------------------------------------------------------
# Now that we know we need to build something, the first thing we need
# to do is add our image to BuildProducts.txt, so that tools can verify
# when our build is successful.  Make sure we append, so that we don't
# overwrite other images that have written to this file.
#---------------------------------------------------------------------------
#build_products_fn = env['TARGET_ROOT'] + "/BuildProducts.txt"
#if not env.GetOption('clean'):
#   fh = open(build_products_fn, "a")
#   fh.write (env.subst("./modem_proc/build/ms/bin/${SHORT_BUILDPATH}/dsp2.mbn")+"\n")
#   if 'USES_PIL' in env:
#      fh.write (env.subst("./modem_proc/build/ms/bin/${PIL_BUILDPATH}/modem.mdt")+"\n")
#      fh.write (env.subst("./modem_proc/build/ms/bin/${PIL_BUILDPATH}/modem.flist")+"\n")
#   fh.close()
#elif not env.GetOption('no_exec'):
#   if os.path.exists(build_products_fn):
#      os.remove(build_products_fn)

if 'USES_HEXAGON_IMAGE_ENTRY_OVERRIDE' in env:
  env.Replace(HEXAGON_IMAGE_ENTRY = '0xC0000000')
  
#---------------------------------------------------------------------------
# Load in the tools scripts.
#---------------------------------------------------------------------------
env.LoadToolScript('hexagon', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])
env.LoadToolScript('qdsp6_defs', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])
env.LoadToolScript('sleep_lpr_builder', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])
env.LoadToolScript('build_utils', toolpath = ['${BUILD_ROOT}/build/scripts'])

#------------------------------------------------------------------------------
# Find the location of the config XML for CoreBSP.
#---------------------- --------------------------------------------------------
env.Replace(CONFIG_XML = env.FindConfigFiles('cust_config.xml')[0])

env.Append(CFLAGS = ARGUMENTS.get('T_CFLAGS', '') + ' ')
env.Append(LFLAGS = ARGUMENTS.get('T_LFLAGS', '') + ' ')

# Tell the linker to look for it's config files in the $BUILDPATH directory
#linker_files_path = env.RealPath('$BUILDPATH').replace('\\', '/')
#env.Append(LFLAGS = "-L " + linker_files_path + ' ')
for config_path in env.FindConfigPaths():
   env.Append(LFLAGS = "-L " + config_path + ' ')

if env.has_key('USES_FEATURE_DYNAMIC_LOADING'):
   # Update linker flags for dynamic section
   env.Append(LINKFLAGS = "--force-dynamic --dynamic-linker= ")
   
   env.LoadToolScript('${BUILD_ROOT}/core/bsp/build/scripts/dlfs_version_builder.py')
   # Update link line flags for shared library to map version section to unique NOTE segement
   shlib_lcs_fpath = env.NormPath('${BUILD_ROOT}/core/bsp/build/scripts/shlib_add_version_segment.lcs', posix=True)
   env.Append(SHLINKFLAGS = '-T' + shlib_lcs_fpath )
   
elif ((env['CHIPSET'] in ['msm8x26']) or (env['CHIPSET'] in ['msm8x10'])):
   #Get all the libraries linked at level S3, remove libqurtcfs and add libdl
   QDSP6OBJ = env.get('QDSP6OBJS3')
   for lib in QDSP6OBJ:
      if 'libqurtcfs.a' in lib:
         QDSP6OBJ.remove(lib)
         break     
   QDSP6OBJ.append('${QDSP6_RELEASE_DIR}/qc/lib/${Q6VERSION}/G0/libdl.a') 
   env.Replace(QDSP6OBJS3 = QDSP6OBJ)
   # Update linker flags for dynamic section
   env.Append(LINKFLAGS = "--force-dynamic --dynamic-linker= ")

dealloc_cflags = env.get('CFLAGS')
if '-mno-dealloc_return' in dealloc_cflags:
   env.Replace(QDSP6_RELEASE_LIB_DIR = "${QDSP6_RELEASE_DIR}/no-dealloc_return-libs/dinkumware/lib/${Q6VERSION}")

#---------------------------------------------------------------------------
# Proof of concept, need to find a correct location
#---------------------------------------------------------------------------

if env['MSM_ID'] in ['8952']:
  env.Append(CPPDEFINES=['MODEM_FW_NUM_PRIO=64'])
else:
  env.Append(CPPDEFINES=['MODEM_FW_NUM_PRIO=75'])


#---------------------------------------------------------------------------
# Enable Modem AU Attributes Parsing
#---------------------------------------------------------------------------
env.Replace( MODEM_AU_ATTRIB_FILE = env.FindConfigFiles('modem_task_stksz.csv')[0] )

#---------------------------------------------------------------------------
# If merging of constants is inhibited, re-enable it for memory savings.
# This is disabled in hexagon.py for legacy targets supporting paging.
#---------------------------------------------------------------------------
env.Replace(HEXAGON_LANIND = env.get('HEXAGON_LANIND', '').replace("-fno-merge-constants",""))

#---------------------------------------------------------------------------
# Load cleanpack script, if available
#---------------------------------------------------------------------------
if env.PathExists("../../../pack/build_cleanpack.py"):
   env.LoadToolScript("../../../pack/build_cleanpack.py")

# LTO support
env.InterceptAddLibraryCalls()

#---------------------------------------------------------------------------
# Libs/Objs
#---------------------------------------------------------------------------
modem_proc_img_libs = []
modem_proc_img_objs = []

if env.has_key('USES_FEATURE_DYNAMIC_LOADING'):
  modem_proc_img_shlibs = []

#---------------------------------------------------------------------------
# Libraries Section
#---------------------------------------------------------------------------
def find_components (env):

   if 'USES_GNSS_SA' in env:
      if env['MSM_ID'] in ['8994']:
         # Bolt GPS-only builds.
         components = [
            'qmimsgs','core','mcs','mpower','utils',
            'gps','stubs','build'
         ]
      else:
         # DimePM GPS-only builds.
         components = [
            'qmimsgs','core','mcs','mpower','utils','fw',
            'gps','stubs','build'
         ]
      print "GPS-only build"
   else:
      non_modem_lib_components = [ 'audio_avs', 'platform' ]
      su_names_set = Set( env.GetAreaSoftwareUnitNames() )
      for su in non_modem_lib_components:
         su_names_set.discard( su )
      components = list( su_names_set )

   return components

components  = find_components(env)


if 'modem' not in components:

   build_tools = [
      '${BUILD_ROOT}/mcs/tools/build/stm1_builder.py',
      '${BUILD_ROOT}/mcs/tools/build/stm2_builder.py',
      '${BUILD_ROOT}/mcs/tools/build/msgr_builder.py',
   ]
   for tool in build_tools:
      env.LoadToolScript(tool)


   def add_umid(env, umid_file, umid_headers):
      if type(umid_headers) is not list:
         umid_headers = [umid_headers]

      env.PrintDebugInfo('msgr', "add_umid: " + str(umid_headers))
      # Call the UMID builder to autogenerate the .umid file
      umid = env.UMID(source = umid_headers, target = umid_file)
      # Save a reference to the umid file
      env['UMID_ENV'].Append(UMIDS = umid)


   if 'USES_MSGR' in env:
      # Save a pointer to the environment for gathering UMID's
      env.Replace(UMID_ENV = env)
      # Create a wrapper method for calling UMID builder and saving in environment
      env.AddMethod(add_umid, "AddUMID")
      

   # Load Modem AU Attributes if specified
   if 'MODEM_AU_ATTRIB_FILE' in env:
      files = env['MODEM_AU_ATTRIB_FILE']
      env.PrintDebugInfo('modemau', 'Modem Attrib Files: ' + str(files))
      # Make sure that files is a list
      if type(files) is not list:
         files = [files]
      # Loop through each file
      for fname in files:
         # Substitute to get the full path
         fname = env.subst(fname)
         env.PrintDebugInfo('modemau', "Loading attributes from: " + fname)
         # Open the file
         f = open(fname, "rb")
         # Read all lines into a list
         lines = f.readlines();
         # Process each line in the file
         for line in lines:
            # Strip off newline and split on commas
            line = line.strip()
            if line:  # Don't process blank lines
               elems = line.strip().split(',')
               key   = elems[0].upper()
               value = elems[1]
               # Add to the SCons environment
               env[key] = value
         f.close()


for component in components:
   au_items = env.LoadAreaSoftwareUnits(component)
   modem_proc_img_libs.extend(au_items['LIBS'])
   modem_proc_img_objs.extend(au_items['OBJS'])
   if env.has_key('USES_FEATURE_DYNAMIC_LOADING'):
      modem_proc_img_shlibs.extend(au_items['SHARED_LIBS'])

def find_all_files(d):
   matches = []
   for root, dirnames, filenames in os.walk(d):
     for filename in filenames:
        matches.append(os.path.join(root, filename))
   return matches

if 'USES_BINARY_DIST' in env:
   # Use bindist dir plus our image subdir to load libs and objects
   bindistdir = env.subst('${BUILD_ROOT}/bindist/' + aliases[0])
   files = find_all_files(bindistdir)
   # Also load all files in the rootdir
   files += glob(env.subst('${BUILD_ROOT}/bindist/*'))
   for f in files:
      if os.path.isfile(f):
         f = f.replace(os.sep, '/')
         env.PrintDebugInfo('bindist', "Adding binary dist file: " + str(f))
         if f.endswith(env.subst('${LIBSUFFIX}')):
            modem_proc_img_libs.append(env.File(f))
         elif f.endswith(env.subst('${OBJSUFFIX}')):
            modem_proc_img_objs.append(env.File(f))
         else:
            env.PrintError("Unknown suffix adding binary dist files: " + str(f))

if 'modem' not in components:
   # --------------------------------------------------------------------------
   # <edwinj> Process all UMIDs that have been added by above LoadAreaSoftwareUnits()
   # --------------------------------------------------------------------------
   if 'USES_MSGR' in env and 'UMIDS' in env:

      env.PrintDebugInfo('msgr', "UMIDS: " + str(env['UMIDS']))
      msgr_umid_h = '${BUILD_ROOT}/mcs/msgr/build/${BUILDPATH}/__msgr_global_umids.h'
      # Run the MSGR builder to generate the MSGR header file
      env.MSGR(source = env['UMIDS'], target = msgr_umid_h)


#------------------------------------------------------------------------------
# Init secure varables
#------------------------------------------------------------------------------
env.Replace(ENABLE_ENCRYPT = True)


#------------------------------------------------------------------------------
# Putting the image toghther
#------------------------------------------------------------------------------
image_units = [modem_proc_img_objs, modem_proc_img_libs]
if env.has_key('USES_FEATURE_DYNAMIC_LOADING'):
   image_units += [modem_proc_img_shlibs]

env.Append(ORIG_PREPEND = 'orig_')

#------------------------------------------------------------------------------
# Shared Library Versioning Support
#------------------------------------------------------------------------------
if env.has_key('USES_FEATURE_DYNAMIC_LOADING'):
   version_info_init_list_c  = env.AddSharedLibraryVersionList("${SHORT_BUILDPATH}/shlibs_version_info_init_list.c", modem_proc_img_shlibs)
   version_info_init_list_o  = env.AddObject(build_tags, version_info_init_list_c)
   modem_proc_img_objs.append(version_info_init_list_o)
  
if 'IMAGE_BUILD_LOCAL_FILES' in env:
   #-------------------------------------------------------------------------
   # Local Files
   #-------------------------------------------------------------------------
   if 'USES_LCS_FILE' in env:
      # Dynamically load lcs_builder
      env.LoadToolScript("${BUILD_SCRIPTS_ROOT}/lcs_builder.py")
      
      # Location and name of lcs file
      qurt_lcs = env.FindConfigFiles('${BUILD_ASIC}_QuRT_${TARGET_IMAGE}.lcs')[0]
      lcs_file = env.LcsBuilder("${BUILD_MS_ROOT}/${ORIG_PREPEND}${TARGET_NAME}.elf.lcs", qurt_lcs) 

      image_units += lcs_file
      
      if 'USES_CMMBUILDER' in env:
         cmmscripts = env.CMMGenerateFiles()
         image_units += cmmscripts
         
img_uuid_tag = 'IMAGE_TREE_UUID_AUTO_GENERATE'
if env.IsKeyEnable(img_uuid_tag):
   env.LoadToolScript('version_builder', toolpath = ['${BUILD_SCRIPTS_ROOT}'])
   oem_uuid_c = env.OEM_UUID_Builder(img_uuid_tag, '${SHORT_BUILDPATH}/oem_uuid.c', [modem_proc_img_objs, modem_proc_img_libs])
   oem_uuid_o = env.AddObject(img_uuid_tag, oem_uuid_c)
   image_units += oem_uuid_o
   modem_proc_img_objs.append(oem_uuid_o)

if 'IMAGE_BUILD_LINK' in env:
   #-------------------------------------------------------------------------
   # Link image
   #-------------------------------------------------------------------------
   if env.has_key('USES_FEATURE_DYNAMIC_LOADING'):
      image_elf = env.AddProgram("${BUILD_MS_ROOT}/${ORIG_PREPEND}${TARGET_NAME}", modem_proc_img_objs, LIBS=modem_proc_img_libs, SHARED_LIBS=modem_proc_img_shlibs)
   else:
      image_elf = env.AddProgram("${BUILD_MS_ROOT}/${ORIG_PREPEND}${TARGET_NAME}", modem_proc_img_objs, LIBS=modem_proc_img_libs)

   if 'USES_LCS_FILE' in env:
      # Add lcs dependency to elf file
      env.Depends(image_elf, lcs_file)


   #---------------------------------------------------------------------------
   # Use the MYPS_LINKER, if specified, for CR 340311
   #---------------------------------------------------------------------------
   if 'USES_MYPS_LINKER' in env:
      # find out where the myps tools are {{{
      myps_paths = [
        'perf/scripts',
      ]

      myps_paths = [
        os.path.abspath(
          os.path.join(*([
            env.subst('${BUILD_ROOT}')] +
            i.split('/')))) for i in myps_paths]

      for potential_myps_dir in myps_paths:
        if os.path.exists(potential_myps_dir):
          myps_dir = potential_myps_dir
          break
      # }}}

      # Find the necessary firmware coprocessor image
      fw_variant = 'QSAFA'
      if 'USES_EMULATION_PLATFORM' in env:
         fw_variant = 'QRAFA'
      coproc_fname = os.path.join(env.subst('${BUILD_ROOT}'), 'fw', 'bin', fw_variant, 'modem_coproc.' + fw_variant + '.image')

      # memory report generation? y/n?
      env.Append(MEMREPORT = ARGUMENTS.get('MEMREPORT', '0'))

      env.LoadToolScript(os.path.join(myps_dir, 'hook_pplk.py'))
      if os.path.exists(coproc_fname):
         image_elf = env.Pplk('${SHORT_BUILDPATH}/${TARGET_NAME}.elf', [image_elf, coproc_fname])
      else:
         image_elf = env.Pplk('${SHORT_BUILDPATH}/${TARGET_NAME}.elf', [image_elf, None])

if 'IMAGE_BUILD_POST_LINK' in env:
   #-------------------------------------------------------------------------
   # Add a dummy segment for dynamic footprints
   #-------------------------------------------------------------------------
   if 'USES_DUMMY_SEG' in env:
      if 'AddDummySegBuilder' not in env.get('BUILDERS'):
         env.LoadToolScript("${COREBSP_ROOT}/bsp/build/scripts/kernel_builders.py")
         
      # Copy the cust_config.xml file to the BUILDPATH directory
      cust_config = env.FindConfigFiles('cust_config.xml')[0]

      image_elf = env.AddDummySegBuilder("${BUILDPATH}/${TARGET_NAME}_patch",
         [image_elf, cust_config])
      
   #-------------------------------------------------------------------------
   # Install ELF, reloc files
   #-------------------------------------------------------------------------
   # copy elf and reloc to needed locations for AMSS tools to load on target
   install_target_elf = env.InstallAs(
      "${BUILD_MS_ROOT}/M${BUILD_ASIC}${BUILD_ID}${BUILD_VER}_NODEVCFG.elf", image_elf)

   if 'USES_ELF_TO_BLAST_EXTRACTOR' in env:
      #-------------------------------------------------------------------------
      # Run Elf To Blast Extractor (temp hack until code can move to modem_proc.scons
      #-------------------------------------------------------------------------
      env.LoadToolScript("${BUILD_ROOT}/tools/elf_to_blast_extractor/elf_to_blast_extractor_builder.py")

      address_map_files = env.ElfToBlastExtractorBuilder('${BUILDPATH}/symbol_to_addressmap.txt', install_target_elf)
      image_units += address_map_files

   # NOTE: The MBN creation and PIL splitting routines have been moved to devcfg_img.scons
   ##-------------------------------------------------------------------------
   ## Build env mbn files
   ##-------------------------------------------------------------------------
   #target_mbn = env.MbnBuilder("${SHORT_BUILDPATH}/${TARGET_NAME}", install_target_elf, IMAGE_TYPE='qdsp6sw',
   #   FLASH_TYPE=env['TARGET_FLASH_TYPE'])
   #
   #if 'USES_PIL' in env:
   #   #-------------------------------------------------------------------------
   #   # Split mbn file for PIL
   #   #-------------------------------------------------------------------------
   #   env.LoadToolScript("${BUILD_ROOT}/core/bsp/build/scripts/pil_splitter_builder.py")
   #
   #   # Commenting out some code until we have a chance to have all tools pull files from build\bsp\...
   #   # split_files = env.PilSplitterBuilder("${SHORT_BUILDPATH}/SPLITBINS_${QC_SHORT_BUILDPATH}/${PIL_SPLITTER_PREFIX}.mdt", target_mbn)
   #   # install_pil = env.Install("${BUILD_ROOT}/build/ms/bin/PIL_IMAGES", split_files[0].dir)
   #   # image_units += install_pil
   #
   #   split_files = env.PilSplitterBuilder('${BUILD_ROOT}/build/ms/bin/${PIL_BUILDPATH}/${PIL_SPLITTER_PREFIX}.mdt', target_mbn)
   #   image_units += split_files

   #=========================================================================
   # Define targets needed 
   #
   image_units += [
      install_target_elf,
      # target_mbn,
   ]

if env.has_key('USES_FEATURE_DYNAMIC_LOADING'):
   #-------------------------------------------------------------------------
   # Dynamic library MBN generation
   #-------------------------------------------------------------------------
   for shlib in modem_proc_img_shlibs :
      print "Generating mbn for dynamic shared library: ", shlib

      env.Replace(MBN_FILE=''.join(["${BUILD_MS_ROOT}/bin/${SHORT_BUILDPATH}/", shlib.name]))

      install_shlib_mbn = env.InstallAs(''.join(["${SHORT_BUILDPATH}/", shlib.name, '.debug']), shlib)
      target_shlib_mbn = env.MbnBuilder(''.join(["${SHORT_BUILDPATH}/", shlib.name, '.mbn']), 
                                        install_shlib_mbn, 
                                        IMAGE_TYPE='qdsp6sw', MBN_TYPE="elf", 
                                        FLASH_TYPE=env['TARGET_FLASH_TYPE'])
   
      image_units += [
         install_shlib_mbn,
         target_shlib_mbn,
      ]

#=========================================================================
# Finish up...
env.BindAliasesToTargets(image_units)

# This probably needs to go someplace else.
env.CMMBuilder(None, None)
