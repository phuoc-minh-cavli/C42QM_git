#===============================================================================
#
# Basic core_user_libs image scrip
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2014 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/build.mpss/2.2.8.1.c5.0.1/bsp/core_user_libs/build/core_user_libs.scons#1 $
#  $DateTime: 2018/10/05 13:57:21 $
#  $Change: 17304820 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
import os
Import('env')

#------------------------------------------------------------------------------
# Init image vars 
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Init aliases array.
# first alias (0th element in array) is always unique name, there should 
# never be two images with the same unique name
aliases = ['core_user_libs']
build_tags = ['CORE_USER_PD','MULTIMEDIA_USER_PD','CORE_QDSP6_AUDIO_PD']
build_tools = ['buildspec_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/dnt_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/devcfg_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/cmm_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/swe_builder.py']

#------------------------------------------------------------------------------
# init environment variables
env.InitImageVars(
   alias_list=aliases,                                               # aliases
   proc='qdsp6',                                                     # proc
   config='qdsp6_sw',                                                # config type, proc_name
   plat='qurt',
   build_tags = build_tags,     #build_tags
   tools = build_tools
   )

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
if not env.CheckAlias():
   Return()

#---------------------------------------------------------------------------
# Include PWRDB to the build via USES_PWRDB flag
#---------------------------------------------------------------------------
env.AddUsesFlags('USES_PWRDB')

#---------------------------------------------------------------------------
# Load in CBSP uses and path variables
#---------------------------------------------------------------------------
env.InitBuildConfig()
env.Replace(USES_AUDIO_PD = True)
env.Replace(USES_USER_PD = True)
env.Replace(USES_DEVCFG = True)
env.Replace(USES_MULTI_DEVCFG = True)
env.Replace(DEVCONFIG_ASSOC_FLAG = 'DAL_DEVCFG_AUDIO_PD_IMG')
env.Decider('timestamp-newer')
env.Append(USES_QDSS_SWE_MULTIPD = True)

 
# For diag
if 'USES_MPSS_MULTI_PD' in env:
   env.Append(CPPDEFINES=["DIAG_USERPD_TEMP"])

#if image wants to own "main": # image calls core_main to init cbsp
env.Append(CPPDEFINES=["COREMAIN_EXCLUDE_MAIN"])

#---------------------------------------------------------------------------
# Set the image entry for relocatable images for MPSS.DPM.X.X builds.
#---------------------------------------------------------------------------
if env['MSM_ID'] in ['8x10', '8916', '8936', '8994']:
   env.Replace(HEXAGON_IMAGE_ENTRY = '0xB0000000')
env.AddUsesFlags('USES_RCINIT_PLAYBOOK') # MUST OCCUR BEFORE FIRST LoadAreaSoftwareUnits
#---------------------------------------------------------------------------
# Load in the tools scripts
#---------------------------------------------------------------------------

env.Replace(CONFIG_XML = env.FindConfigFiles('cust_config.xml')[0])

env.LoadToolScript('hexagon', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])
env.LoadToolScript('qdsp6_defs', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])
env.LoadToolScript('sleep_lpr_builder', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])
env.LoadToolScript('build_utils', toolpath = ['${BUILD_ROOT}/build/scripts'])

env.Append(CFLAGS = ARGUMENTS.get('T_CFLAGS', '') + ' ')
env.Append(LFLAGS = ARGUMENTS.get('T_LFLAGS', '') + ' ')

env.Append(CPPDEFINES=['MODEM_FW_NUM_PRIO=75'])

# LTO support
env.InterceptAddLibraryCalls()

#---------------------------------------------------------------------------
# Libs/Objs
#---------------------------------------------------------------------------
image_libs = []
image_objs = []

#---------------------------------------------------------------------------
# Libraries Section
#---------------------------------------------------------------------------

# load au_name libs/objs build rules.

# load Core USER PD
au_name_items = env.LoadAreaSoftwareUnits('core')
image_libs.extend(au_name_items['LIBS'])
image_objs.extend(au_name_items['OBJS'])

image_units = [image_objs, image_libs]

image_name = env.get('IMAGE_NAME').lower()
env.SaveSWEListBuilder(['${BUILD_ROOT}/build/bsp/' + image_name + '/build/${SHORT_BUILDPATH}/sweevent_list.txt'],None)
env.SaveCoreSleepLPRListBuilder(['${BUILD_ROOT}/build/bsp/' + image_name + '/build/${SHORT_BUILDPATH}/sleep_LPR_list.txt'], None)

#--- RCINIT Playbook Extension, Library Specific Details ------------------- BEG

# ONLY WHEN DNT_BUILDER SCONS TOOL LOADED
if 'USES_RCINIT' in env and 'USES_RCINIT_PLAYBOOK' in env:
   env.AddRcinitPlaylistParams(build_tags,image_units)
#--- RCINIT Playbook Extension, Library Specific Details ------------------- END


#------------------------------------------------------------------------------
# Putting the image toghther
#------------------------------------------------------------------------------

if 'IMAGE_BUILD_LINK' in env:
   #-------------------------------------------------------------------------
   # Link image
   #-------------------------------------------------------------------------
   image_units = []
   
   # this is  to generate lf file
   image_elf = env.ListFileBuilder("${SHORT_BUILDPATH}/${TARGET_NAME}.txt", [image_objs, image_libs], relative_path="${BUILD_ROOT}/build/ms", posix=True)

if 'IMAGE_BUILD_POST_LINK' in env:
   #-------------------------------------------------------------------------
   # Post process image
   #-------------------------------------------------------------------------
   
   # this is where any aditional rules after linking are done.

   #=========================================================================
   # Define targets needed 
   #
   image_units += [
      image_elf,
   ]

#=========================================================================
# Finish up...
env.BindAliasesToTargets(image_units)