#===============================================================================
#
# Basic skeleton image scrip
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2014 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 11/24/14   KKO     Created
#===============================================================================

Import('env')
import os
#------------------------------------------------------------------------------
# Init image vars 
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Init aliases array.
# first alias (0th elemten in array) is always unique name, there should 
# never be two images with the same unique name
aliases = ['apr_user_libs']
build_tags = ['CORE_USER_PD','QMIMSGS_USER_PD','QMIMSGS_AUDIO_PD','QDSS_EN_IMG','CORE_QDSP6_AUDIO_PD']
build_tools = [
                '${BUILD_ROOT}/core/bsp/build/scripts/dnt_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/devcfg_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/cmm_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/swe_builder.py']
   
#------------------------------------------------------------------------------

env.InitImageVars(
   alias_list=aliases,        # aliases list
   proc='qdsp6',              # proc (depending on tool chain arm, hexago, etc)
   config='qdsp6_sw',
   plat='qurt',               # platform (l4, blast, foo, bar, etc)
   build_tags = build_tags,   #build_tags
   tools = build_tools
)

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
if not env.CheckAlias():
   Return()

#---------------------------------------------------------------------------
# Now that we know we need to build something, the first thing we need
# to do is add our image to BuildProducts.txt, so that tools can verify
# when our build is successful.  Make sure we append, so that we don't
# overwrite other images that have written to this file.
#---------------------------------------------------------------------------

#---------------------------------------------------------------------------
# Load in CBSP uses and path variables
#---------------------------------------------------------------------------
env.InitBuildConfig()
env.Replace(USES_AUDIO_PD = True)
env.Replace(USES_USER_PD = True)
env.Replace(USES_DEVCFG = True)
env.Replace(USES_MULTI_DEVCFG = True)
env.Replace(DEVCONFIG_ASSOC_FLAG = 'DAL_DEVCFG_AUDIO_PD_IMG')
env.Decider('timestamp-newer')

#if image wants to own "main": # image calls core_main to init cbsp
env.Append(CPPDEFINES=["COREMAIN_EXCLUDE_MAIN"])

env.Replace(HEXAGON_IMAGE_ENTRY = '0xB0000000')
   
# For diag
if 'USES_MPSS_MULTI_PD' in env:
   env.Append(CPPDEFINES=["DIAG_USERPD_TEMP"])
#---------------------------------------------------------------------------
# Set the config XML to the correct cust_config.xml in the config component.
#---------------------------------------------------------------------------
env.Replace(CONFIG_XML = env.FindConfigFiles('cust_config.xml')[0])

env.LoadToolScript('hexagon', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])
env.LoadToolScript('qdsp6_defs', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])
env.LoadToolScript('sleep_lpr_builder', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])
env.LoadToolScript('build_utils', toolpath = ['${BUILD_ROOT}/build/scripts'])

env.Append(CFLAGS = ARGUMENTS.get('T_CFLAGS', '') + ' ')
env.Append(LFLAGS = ARGUMENTS.get('T_LFLAGS', '') + ' ')

env.Append(CPPDEFINES=['MODEM_FW_NUM_PRIO=75'])
env.Replace(QDSP6_RELEASE_LIB_DIR="${QDSP6_RELEASE_DIR}/dinkumware/lib/${Q6VERSION}/G0")
env.AddUsesFlags('USES_RCINIT_PLAYBOOK') # MUST OCCUR BEFORE FIRST LoadAreaSoftwareUnits

# LTO support
env.InterceptAddLibraryCalls()

#---------------------------------------------------------------------------
# Libs/Objs
#---------------------------------------------------------------------------
image_libs = []
image_objs = []

#---------------------------------------------------------------------------
# Libraries Section
#---------------------------------------------------------------------------

# load APR User PD
au_name_items = env.LoadAreaSoftwareUnits('apr')
image_libs.extend(au_name_items['LIBS'])
image_objs.extend(au_name_items['OBJS'])

# load QMI User PD
au_name_items = env.LoadAreaSoftwareUnits('qmimsgs')
image_libs.extend(au_name_items['LIBS'])
image_objs.extend(au_name_items['OBJS'])

image_units = [image_objs, image_libs]

#--- RCINIT Playbook Extension, Library Specific Details ------------------- BEG

# ONLY WHEN DNT_BUILDER SCONS TOOL LOADED
if 'USES_RCINIT' in env and 'USES_RCINIT_PLAYBOOK' in env:
   env.AddRcinitPlaylistParams(build_tags,image_units)
#--- RCINIT Playbook Extension, Library Specific Details ------------------- END

#------------------------------------------------------------------------------
# Putting the image toghther
#------------------------------------------------------------------------------

if 'IMAGE_BUILD_LOCAL_FILES' in env:
   #-------------------------------------------------------------------------
   # Local Files
   #-------------------------------------------------------------------------
   
   # this is where local files are created, for example link scripts (lcs)
   # for qdsp6 like images, or scatter load files (scl) for amr like images.
   local_itmes= []
   
   image_units += local_itmes
      
if 'IMAGE_BUILD_LINK' in env:
   #-------------------------------------------------------------------------
   # Link image
   #-------------------------------------------------------------------------

   # this is where the rule to "link" is done.
   
   image_elf = env.ListFileBuilder("${SHORT_BUILDPATH}/${TARGET_NAME}.txt", [image_objs, image_libs], add_header=False, relative_path="${BUILD_ROOT}/build/ms", posix=True)
   
if 'IMAGE_BUILD_POST_LINK' in env:
   #-------------------------------------------------------------------------
   # Post process image
   #-------------------------------------------------------------------------
   
   # this is where any aditional rules after linking are done.

   #=========================================================================
   # Define targets needed 
   #
   image_units += [
      image_elf,
   ]

#=========================================================================
# Finish up...
env.BindAliasesToTargets(image_units)
