/*!
  @file lte_rrc_cre_conn_rel_during_suspend_test.cpp

  @brief


*/

/*===========================================================================

  Copyright (c) 2009 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.


$Header: //components/rel/lte.mpss/4.7.2/RRC/test_old/cre/lte_rrc_cre_conn_rel_during_suspend_test.cpp#1 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
12/27/10   da      Initial version
           
===========================================================================*/

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/
extern "C"
{
#include "lte_rrc_ext_msg.h"
#include "lte_rrc_int_msg.h"
#include "lte_rrc_utils.h"
#include "__lte_rrc_cre.h"
#include "lte_rrc_osys_asn1util.h"
#include "lte_static_rrc_mem_util.h"
#include "lte_rrc_cre.h"
#include "lte_rrc_crei.h"
#include "lte_rrc_sec.h"
#include "lte_mac_msg.h"
#include "lte_mac_rrc.h"
}

#include "TestFramework.h"
#include "lte_rrc_utf.h"
#include "lte_rrc_cre_test_common.h"
#include <tf_stub.h>


/*===========================================================================

                         INTERNAL VARIABLES

===========================================================================*/

//external messages generated by code under test
static uint32 ext_umid_list[] = 
{ 
  LTE_MAC_ACCESS_REQ,
  LTE_CPHY_CANCEL_CONN_REQ
};

extern "C"
{
  TF_PROTO_STUB(lte_errno_e, lte_rrc_csp_get_serving_cell_params, lte_rrc_cell_info_s*);
}

extern "C"
{
extern lte_rrc_cre_s lte_rrc_cre_data;
}

/*===========================================================================

                                UNIT TEST

===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCreConnRelDuringSuspendTest);

void LteRrcCreConnRelDuringSuspendTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CRE_SM, ext_umid_list, 2);
  lte_rrc_cre_test_stub_init();
}

void LteRrcCreConnRelDuringSuspendTest::Test()
{
  lte_rrc_conn_mode_failure_indi_s conn_mode_failure_ind;
  lte_rrc_cre_started_indi_s *cre_started_indi_ptr = NULL;
  lte_rrc_sib_abort_reqi_s* sib_abort_reqi_ptr = NULL;
  lte_rrc_cfg_reqi_s* cfg_req_msg_ptr = NULL;
  lte_rrc_cfg_cnfi_s cfg_cnfi_msg;
  lte_rrc_initiate_cell_sel_reqi_s *cel_sel_reqi_ptr = NULL;
  lte_rrc_conn_rel_started_indi_s rel_started_indi;
  lte_rrc_conn_establishment_started_indi_s est_started_indi;

  uint32 buf_len = 0;

  /* ---------------------------------------------------------------------- */
 
  TF_MSG("\nCRE IP Check failure and SRB1 resume failure test begins \n");

  /* Make sure CRE is in initial state on receiving a max re-transmission indication */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Setting the header for conn_mode_failure_ind */
  lte_rrc_init_default_hdr(&conn_mode_failure_ind.msg_hdr, LTE_RRC_CONN_MODE_FAILURE_INDI);
  conn_mode_failure_ind.conn_mode_failure_cause = LTE_RRC_CONN_MODE_FAILURE_CAUSE_HO;
  conn_mode_failure_ind.ho_failure_cause = LTE_RRC_HO_FAILURE_CAUSE_INVALID_CFG;
  lte_rrc_utf_send_msg((byte*)&conn_mode_failure_ind, sizeof(conn_mode_failure_ind));


  /* Catch SIB abort request */
  lte_rrc_utf_get_next_int_msg((byte **)&sib_abort_reqi_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_sib_abort_reqi_s) == buf_len);
  TF_ASSERT(LTE_RRC_SIB_ABORT_REQI == sib_abort_reqi_ptr->msg_hdr.id);

  /* Catch the Config request sent by CRE to LLC */
  lte_rrc_utf_get_next_int_msg((byte **)&cfg_req_msg_ptr,&buf_len);
  /* Make sure the Config request is valid */
  TF_ASSERT(sizeof(lte_rrc_cfg_reqi_s) == buf_len);
  TF_ASSERT(cfg_req_msg_ptr != NULL);
  TF_ASSERT(cfg_req_msg_ptr->num_cfg == 1);
  TF_ASSERT(cfg_req_msg_ptr->cfg_info[0].cfg_type == LTE_RRC_CFG_RLF);
  TF_ASSERT(cfg_req_msg_ptr->cfg_info[0].cfg_u.susp_cfg.revert_l2_config == FALSE);

  /* Catch the CRE started internal indication thrown by CRE */
  lte_rrc_utf_get_next_int_msg((byte **)&cre_started_indi_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_cre_started_indi_s) == buf_len);

  /* Assert that CRE is in WAIT_FOR_CFG_CNFI state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__WAIT_FOR_CFG_CNFI);
  TF_MSG("\nCRE cfg request sent to LLC and CRE Module in WAIT_FOR_CFG_CNFI state\n");

  
  /* Send connection release indi */
  lte_rrc_init_default_hdr(&rel_started_indi.msg_hdr, LTE_RRC_CONN_REL_STARTED_INDI);
  lte_rrc_utf_send_msg((byte*)&rel_started_indi, sizeof(rel_started_indi));
  lte_rrc_utf_wait_for_done();


  /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->conn_rel_during_suspend == TRUE);


  /* Make sure we clear it on next attempt to establish connection. */

  lte_rrc_init_default_hdr(&est_started_indi.msg_hdr, LTE_RRC_CONN_ESTABLISHMENT_STARTED_INDI);
  lte_rrc_utf_send_msg((byte*)&est_started_indi, sizeof(est_started_indi));
  lte_rrc_utf_wait_for_done();


  /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->conn_rel_during_suspend == FALSE);

  TF_MSG("\nCRE conn rel during suspend test end \n");
  lte_rrc_cre_test_free_sib_ptr();
  lte_rrc_utf_reset(); 

}

void LteRrcCreConnRelDuringSuspendTest::Teardown()
{
  lte_rrc_utf_teardown();
}



