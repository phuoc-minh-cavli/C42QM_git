/*!
  @file lte_rrc_cre_fc_shutdown_ind_test.cpp

  @brief
  Unit test code for CRE procedure that tests the handling of shutdown indication
  from flow control.

*/

/*===========================================================================

  Copyright (c) 2009 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.


$Header: //components/rel/lte.mpss/4.7.2/RRC/test_old/cre/lte_rrc_cre_fc_shutdown_ind_test.cpp#1 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
05/06/10   da     Initial Revision
           
===========================================================================*/

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/
extern "C"
{
#include "lte_rrc_ext_msg.h"
#include "lte_rrc_int_msg.h"
#include "lte_pdcp_msg.h"
#include "lte_rrc_utils.h"
#include "__lte_rrc_cre.h"
#include "lte_rrc_osys_asn1util.h"
#include "lte_static_rrc_mem_util.h"
#include "lte_rrc_cre.h"
#include "lte_fc.h"
}

#include "TestFramework.h"
#include "lte_rrc_utf.h"
#include "lte_rrc_cre_test_common.h"
#include <tf_stub.h>

//external messages generated by code under test
static uint32 ext_umid_list[] = 
{ 
  LTE_RRC_CONN_REL_IND
};


/*===========================================================================

                                UNIT TEST

===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCreFcShutdownIndTest);

void LteRrcCreFcShutdownIndTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CRE_SM, ext_umid_list, 1);
  lte_rrc_cre_test_stub_init();
}

void LteRrcCreFcShutdownIndTest::Test()
{
  lte_fc_shutdown_ind_s ind;
  lte_rrc_cre_started_indi_s *cre_started_indi_ptr = NULL;
  lte_rrc_initiate_conn_rel_indi_s *initiate_conn_rel_indi_ptr = NULL;

  uint32 buf_len = 0; uint32 decode_status = 0;

  /* ---------------------------------------------------------------------- */
 
  TF_MSG("\nCRE basic FC Shutdown test begins \n");

  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Setting the header for max re-transmission indication */
  lte_rrc_init_default_hdr(&ind.hdr,LTE_FC_SHUTDOWN_IND);
  lte_rrc_utf_send_msg((byte*)&ind, sizeof(ind));

  /* catch Initiation of RRC Connection release by CRE */
  lte_rrc_utf_get_next_int_msg((byte **)&initiate_conn_rel_indi_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_initiate_conn_rel_indi_s) == buf_len);

  /* For phase 1, assert that CRE is in INITIAL state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  TF_MSG("\nCRE basic FC Shutdown test ends \n");
  lte_rrc_utf_reset(); 

  /* ---------------------------------------------------------------------- */
}

void LteRrcCreFcShutdownIndTest::Teardown()
{
  lte_rrc_utf_teardown();
}



TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCrePDCPULConnRelInd);

void LteRrcCrePDCPULConnRelInd::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CRE_SM, ext_umid_list, 1);
  lte_rrc_cre_test_stub_init();
}

void LteRrcCrePDCPULConnRelInd::Test()
{
  lte_pdcpul_conn_rel_ind_msg_s ind;
  lte_rrc_cre_started_indi_s *cre_started_indi_ptr = NULL;
  lte_rrc_initiate_conn_rel_indi_s *initiate_conn_rel_indi_ptr = NULL;

  uint32 buf_len = 0; uint32 decode_status = 0;

  /* ---------------------------------------------------------------------- */
 
  TF_MSG("\nCRE basic PDCPUL Conn rel test begins \n");

  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Setting the header for PDCPUL Conn Rel indication */
  lte_rrc_init_default_hdr(&ind.hdr,LTE_PDCPUL_CONN_REL_IND);
  lte_rrc_utf_send_msg((byte*)&ind, sizeof(ind));
  
  /* catch Initiation of RRC Connection release by CRE */
  lte_rrc_utf_get_next_int_msg((byte **)&initiate_conn_rel_indi_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_initiate_conn_rel_indi_s) == buf_len);

  /* For phase 1, assert that CRE is in INITIAL state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  TF_MSG("\nCRE basic PDCPUL Conn rel test ends \n");
  lte_rrc_utf_reset(); 

  /* ---------------------------------------------------------------------- */
}

void LteRrcCrePDCPULConnRelInd::Teardown()
{
  lte_rrc_utf_teardown();
}


