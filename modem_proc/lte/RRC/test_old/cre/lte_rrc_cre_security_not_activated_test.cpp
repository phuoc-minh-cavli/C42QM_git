/*!
  @file lte_rrc_cre_sec_not_activated_test.cpp

  @brief
  Unit test code for CRE procedure that tests the handling of Random
  access problem indication when security is not yet activated.

*/

/*===========================================================================

  Copyright (c) 2009 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.


$Header: //source/qcom/qct/modem/lte/RRC/main/latest/test/cre/
lte_rrc_cre_sec_not_activated_test.cpp#5 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
06/11/09   mm     Initial Revision
           
===========================================================================*/

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/
extern "C"
{
#include "lte_rrc_ext_msg.h"
#include "lte_rrc_int_msg.h"
#include "lte_rrc_utils.h"
#include "__lte_rrc_cre.h"
#include "lte_rrc_osys_asn1util.h"
#include "lte_static_rrc_mem_util.h"
#include "lte_rrc_cre.h"
#include "lte_mac_ind.h"
#include "lte_mac_msg.h"
#include "lte_rrc_controller.h"
#include "lte_rrc_sec.h"
}

#include "TestFramework.h"
#include "lte_rrc_utf.h"
#include "lte_rrc_cre_test_common.h"
#include <tf_stub.h>

//external messages generated by code under test
static uint32 ext_umid_list[] = 
{ 
  LTE_RRC_CONN_REL_IND
};

/*===========================================================================

                         INTERNAL VARIABLES

===========================================================================*/

extern "C"
{
 TF_PROTO_STUB( boolean, lte_rrc_sec_security_is_configured, void);
}

/*===========================================================================

                         INTERNAL FUNCTIONS

===========================================================================*/

/*===========================================================================

  FUNCTION:  lte_rrc_cre_sec_inactive_test_is_sec_activated

===========================================================================*/
/*!
    @brief
    This function returns simulates the security module API that returns
    if security is activated.

    @return
    FALSE, to imply security is not activated

 */
/*=========================================================================*/
boolean lte_rrc_cre_sec_inactive_test_is_sec_activated
(
  void
)
{
  return FALSE;
}


/*===========================================================================

                                UNIT TEST

===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCreSecurityNotActivatedTest);

void LteRrcCreSecurityNotActivatedTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CRE_SM, ext_umid_list, 1);
  lte_rrc_cre_test_stub_init();
  TF_STUB(lte_rrc_sec_security_is_configured) = 
    lte_rrc_cre_sec_inactive_test_is_sec_activated;
}

void LteRrcCreSecurityNotActivatedTest::Test()
{
  lte_mac_random_access_problem_ind_msg_s access_prob_ind;
  lte_rrc_initiate_conn_rel_indi_s *initiate_conn_rel_indi_ptr = NULL;
  uint32 buf_len = 0; uint32 decode_status = 0;

  /* ---------------------------------------------------------------------- */
 
  TF_MSG("\nCRE security not activated test begins \n");

  /* Make sure CRE is in initial state on receiving a RLF indication */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Setting the header for Random access problem indication */
  lte_rrc_init_default_hdr(&access_prob_ind.hdr, LTE_MAC_RANDOM_ACCESS_PROBLEM_IND);
  access_prob_ind.access_reason = LTE_MAC_ACCESS_REASON_DL_DATA_ARRIVAL;
  lte_rrc_utf_send_msg((byte*)&access_prob_ind, sizeof(access_prob_ind));

  /* catch Initiation of RRC Connection release by CRE */
  lte_rrc_utf_get_next_int_msg((byte **)&initiate_conn_rel_indi_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_initiate_conn_rel_indi_s) == buf_len);

  /* Assert that CRE is in INITIAL state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  TF_MSG("\nCRE security not activated test ends \n");
  lte_rrc_utf_reset(); 

  /* ---------------------------------------------------------------------- */
}

void LteRrcCreSecurityNotActivatedTest::Teardown()
{
  lte_rrc_utf_teardown();
}



