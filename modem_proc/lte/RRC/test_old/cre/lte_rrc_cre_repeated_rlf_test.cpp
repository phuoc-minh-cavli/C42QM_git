/*!
  @file lte_rrc_cre_config_failure_and_cre_test.cpp

  @brief
  Unit test code for CRE procedure that tests the handling of config failure
  indication from Config procedure. Following this, the test verifies successful
  connection reestablishment. The test also checks the handling of RL_FAILURE_IND
  when HO Config is in progress. CRE should ignore this trigger.

*/

/*===========================================================================

  Copyright (c) 2009 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.


$Header: //source/qcom/qct/modem/lte/RRC/main/latest/test/cre/
lte_rrc_cre_config_failure_and_cre_test.cpp#1 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
04/24/09   mm     Changed the test to verify successful connection reestablishment
                  following reconfig failure with mobility.
02/10/09   da     Initial Revision
           
===========================================================================*/

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/
extern "C"
{
#include "lte_rrc_int_msg.h"
#include "__lte_rrc_cre.h"
#include "lte_rrc_utils.h"
#include "lte_static_rrc_mem_util.h"
#include "lte_rrc_osys_asn1util.h"
#include "lte_rrc_cre.h"
#include "lte_rrc_crei.h"
#include "lte_rrc_csp.h"
#include "lte_rrc_sib.h"
#include "lte_rrc_config.h"
#include "lte_rrc_sec.h"
#include "lte_mac_msg.h"
#include "lte_mac_ind.h"
#include "lte_mac_rrc.h"
}

#include "TestFramework.h"
#include "lte_rrc_utf.h"
#include "lte_rrc_cre_test_common.h"
#include <tf_stub.h>

/*===========================================================================

                   INTERNAL DEFINITIONS AND TYPES

===========================================================================*/
/*===========================================================================

                         INTERNAL VARIABLES

===========================================================================*/

//external messages generated by code under test
static uint32 ext_umid_list[] = 
{ 
  LTE_MAC_ACCESS_REQ
};

extern "C"
{
  TF_PROTO_STUB(lte_errno_e, lte_rrc_csp_get_serving_cell_params, lte_rrc_cell_info_s*);
  TF_PROTO_STUB(boolean, lte_rrc_get_camped_cell_info,lte_rrc_plmn_s *, lte_earfcn_t *, lte_phy_cell_id_t *,
                 lte_rrc_global_cell_id_t *, uint16 *);
  TF_PROTO_STUB(uint32, lte_get_current_time_since_power_up_secs, void);
  TF_PROTO_STUB(uint16, lte_rrc_get_rlf_window_size, void);
  TF_PROTO_STUB(boolean, lte_rrc_config_ho_in_progress, void);
 // TF_PROTO_STUB(boolean, lte_rrc_config_ho_to_eutra_in_progress, void);
}


/*===========================================================================

                                UNIT TEST

===========================================================================*/


void RlfandReestablish(lte_rrc_barring_type_e bar_type)
{
  lte_rrc_conn_mode_failure_indi_s config_failure_ind;
  lte_mac_random_access_problem_ind_msg_s access_prob_ind;
  lte_rrc_cre_started_indi_s *cre_started_indi_ptr = NULL;
  lte_rrc_sib_abort_reqi_s* sib_abort_reqi_ptr = NULL;
  lte_rrc_cfg_reqi_s* cfg_req_msg_ptr = NULL;
  lte_rrc_cfg_cnfi_s cfg_cnfi_msg;
  lte_rrc_initiate_cell_sel_reqi_s *cel_sel_reqi_ptr = NULL;
  lte_rrc_camped_indi_s camped_indi_msg;
  lte_mac_access_req_msg_s *mac_access_req_ptr = NULL;
  lte_mac_access_cnf_msg_s mac_access_cnf;
  lte_rrc_osys_UL_CCCH_Message *ul_ccch_msg_ptr = NULL;
  lte_rrc_osys_UL_DCCH_Message *ul_dcch_msg_ptr = NULL;
  lte_rrc_pdu_buf_s encoded_pdu;
  lte_rrc_mh_dlm_s mh_dlm;
  lte_rrc_send_ul_msg_reqi_s *ul_mh_msg_ptr = NULL;
  lte_rrc_cre_completed_indi_s *cre_completed_ind_ptr = NULL;
  lte_rrc_meas_cfg_reqi_s *meas_cfg_req_ptr = NULL;
  lte_rrc_dlm_processed_indi_s *dlm_processed_ind_ptr = NULL;
  uint64 crnti_integer_val = 0;
  uint32 buf_len = 0; int decode_status = 0;

  /* ---------------------------------------------------------------------- */
 
  TF_MSG("\nCRE Config failure and CRE test begins \n");

  /* Make sure CRE is in initial state on receiving a max re-transmission indication */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Setting the header for config failure indication */
  lte_rrc_init_default_hdr(&config_failure_ind.msg_hdr, LTE_RRC_CONN_MODE_FAILURE_INDI);
  config_failure_ind.conn_mode_failure_cause = LTE_RRC_CONN_MODE_FAILURE_CAUSE_HO;
  config_failure_ind.ho_failure_cause = LTE_RRC_HO_FAILURE_CAUSE_INVALID_CFG;
  lte_rrc_utf_send_msg((byte*)&config_failure_ind, sizeof(config_failure_ind));

  /* Catch SIB abort request */
  lte_rrc_utf_get_next_int_msg((byte **)&sib_abort_reqi_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_sib_abort_reqi_s) == buf_len);
  TF_ASSERT(LTE_RRC_SIB_ABORT_REQI == sib_abort_reqi_ptr->msg_hdr.id);

  /* Catch the Config request sent by CRE to LLC */
  lte_rrc_utf_get_next_int_msg((byte **)&cfg_req_msg_ptr,&buf_len);
  /* Make sure the Config request is valid */
  TF_ASSERT(sizeof(lte_rrc_cfg_reqi_s) == buf_len);
  TF_ASSERT(cfg_req_msg_ptr != NULL);
  TF_ASSERT(cfg_req_msg_ptr->num_cfg == 1);
  TF_ASSERT(cfg_req_msg_ptr->cfg_info[0].cfg_type == LTE_RRC_CFG_RLF);
  TF_ASSERT(cfg_req_msg_ptr->cfg_info[0].cfg_u.susp_cfg.revert_l2_config == FALSE);

  /* Catch the CRE started internal indication thrown by CRE */
  lte_rrc_utf_get_next_int_msg((byte **)&cre_started_indi_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_cre_started_indi_s) == buf_len);

  /* Assert that CRE is in WAIT_FOR_CFG_CNFI state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__WAIT_FOR_CFG_CNFI);
  TF_MSG("\nCRE cfg request sent to LLC and CRE Module in WAIT_FOR_CFG_CNFI state\n");

  /* Setting the header for internal RRC messages */
  lte_rrc_init_default_hdr(&cfg_cnfi_msg.msg_hdr, LTE_RRC_CFG_CNFI);
  /* Setting the fields in the CFG_CNFI sent by LLC */
  cfg_cnfi_msg.proc = LTE_RRC_PROC_CRE;
  cfg_cnfi_msg.status = E_SUCCESS;
  cfg_cnfi_msg.trans_id = 0;
  /* Send the CFG_CNFI to CRE module there by mimicing the action of LLC */
  lte_rrc_utf_send_msg((byte*)&cfg_cnfi_msg, sizeof(cfg_cnfi_msg));

  /* Catch the Initiate Cell selection message sent to CSP */
  lte_rrc_utf_get_next_int_msg((byte **)&cel_sel_reqi_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_initiate_cell_sel_reqi_s) == buf_len);
  TF_ASSERT(cel_sel_reqi_ptr != NULL);
  TF_ASSERT(cel_sel_reqi_ptr->cause == LTE_RRC_INITIATE_CELL_SEL_RL_FAILURE);
  if (bar_type == LTE_RRC_LONG_DURATION_BARRING)
  {
    TF_ASSERT(cel_sel_reqi_ptr->bar_type == LTE_RRC_LONG_DURATION_BARRING);
  }
  else if (bar_type == LTE_RRC_SHORT_DURATION_BARRING)
  {
    TF_ASSERT(cel_sel_reqi_ptr->bar_type == LTE_RRC_SHORT_DURATION_BARRING);
  }


  /* Assert that CRE is in WAIT_FOR_UE_TO_CAMP state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__WAIT_FOR_UE_TO_CAMP);
  TF_MSG("\nInititate Cell select request sent to CSP and "
         "CRE Module in WAIT_FOR_UE_TO_CAMP state\n");

  /* Setting the header for internal RRC messages */
  lte_rrc_init_default_hdr(&camped_indi_msg.msg_hdr, LTE_RRC_CAMPED_INDI);
  camped_indi_msg.reason = LTE_RRC_CAMPED_CELL_SELECTION_RLF;
  camped_indi_msg.camped_cell.freq = 10689;
  camped_indi_msg.camped_cell.phy_cell_id = 25;

  /* Send the CAMPED_INDI to CRE module there by mimicing the action of CSP */
  lte_rrc_utf_send_msg((byte*)&camped_indi_msg, sizeof(camped_indi_msg));

  TF_STUB(lte_rrc_csp_get_serving_cell_params) = lte_rrc_cre_test_csp_get_serving_cell_params;

  /* Catch the MAC_ACCESS_REQ message sent by CRE to MAC */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_access_req_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_mac_access_req_msg_s) == buf_len);
  TF_ASSERT(mac_access_req_ptr != NULL);
  TF_ASSERT(mac_access_req_ptr->access_info.
            access_reason == LTE_MAC_ACCESS_REASON_RADIO_FAILURE);
  TF_ASSERT(mac_access_req_ptr->access_info.raid == LTE_INVALID_RA_ID);
  TF_ASSERT(mac_access_req_ptr->access_info.raid_mask == LTE_INVALID_RA_ID_MASK);

  /* Decode the sent ReestablishmentRequest within the MAC_ACCESS_REQ */
  ul_ccch_msg_ptr = (lte_rrc_osys_UL_CCCH_Message *)
  lte_rrc_osys_asn1_decode_pdu(mac_access_req_ptr->access_info.msg_ptr, 
                               mac_access_req_ptr->access_info.msg_length,
                               UL_CCCH_Message,
                               &decode_status);
  TF_ASSERT(ul_ccch_msg_ptr != NULL);
  /* Make sure the Connection Reestablishment Request sent is valid */
  TF_ASSERT(ul_ccch_msg_ptr->message.t == T_lte_rrc_osys_UL_CCCH_MessageType_c1);
  TF_ASSERT(ul_ccch_msg_ptr->message.u.c1->t == T_lte_rrc_osys_UL_CCCH_MessageType_c1_rrcConnectionReestablishmentRequest);
  TF_ASSERT(ul_ccch_msg_ptr->message.u.c1->u.rrcConnectionReestablishmentRequest->
    criticalExtensions.t == T_lte_rrc_osys_RRCConnectionReestablishmentRequest_criticalExtensions_rrcConnectionReestablishmentRequest_r8);
  //TF_ASSERT(ul_ccch_msg_ptr->message.u.c1->u.rrcConnectionReestablishmentRequest->
  //          criticalExtensions.u.rrcConnectionReestablishmentRequest_r8->ue_Identity.
  //          physCellId == 501);
 // crnti_integer_val = lte_rrc_osys_asn1_bitstring_to_int(sizeof(uint64),&ul_ccch_msg_ptr->message.
   //                                                 u.c1->u.rrcConnectionReestablishmentRequest->
     //                                               criticalExtensions.u.rrcConnectionReestablishmentRequest_r8->
   //                                                 ue_Identity.c_RNTI);
  //TF_ASSERT(crnti_integer_val == 5);
 // TF_ASSERT(ul_ccch_msg_ptr->message.u.c1->u.rrcConnectionReestablishmentRequest->
   //   criticalExtensions.u.rrcConnectionReestablishmentRequest_r8->
  //    reestablishmentCause == lte_rrc_osys_ReestablishmentCause_handoverFailure);

  /* Assert that CRE is in WAIT_FOR_CONN_RE state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__WAIT_FOR_CONN_RE);
  TF_MSG("\nReestablishmentRequest sent and CRE Module in WAIT_FOR_CONN_RE state\n");

  /* Send ACCESS_CNF to indicate RACH succeeded */
  /* Setting the header for internal RRC messages */
  lte_rrc_init_default_hdr(&mac_access_cnf.hdr, LTE_MAC_ACCESS_CNF);
  mac_access_cnf.crnti_included = TRUE;
  mac_access_cnf.crnti = 10;
  /* Send the ACCESS_CNF to CRE module there by mimicing the action of MAC */
  lte_rrc_utf_send_msg((byte*)&mac_access_cnf, sizeof(mac_access_cnf));

  encoded_pdu.length = sizeof(cre_reestablishment_msg);
  encoded_pdu.value = cre_reestablishment_msg;

  lte_rrc_cre_test_pdu_buf.length = encoded_pdu.length;
  lte_rrc_cre_test_pdu_buf.value = encoded_pdu.value;
  
  /* Construct asn1 pdu to be sent to the CRE module after decoding the 
     encoded pdu*/
  lte_rrc_init_default_hdr(&mh_dlm.msg_hdr,
                           LTE_RRC_RRC_CONNECTION_REESTABLISHMENT_DLM);
   
  mh_dlm.dl_msg_ptr = 
    lte_rrc_osys_asn1_decode_pdu(encoded_pdu.value, encoded_pdu.length, DL_CCCH_Message, &decode_status);
  mh_dlm.pdu_num = lte_rrc_osys_DL_CCCH_Message_PDU;
  /* Send the MH DLM */
  lte_rrc_utf_send_msg((byte*)&mh_dlm, sizeof(mh_dlm));

  /* Catch the Config request sent by CRE to LLC */
  lte_rrc_utf_get_next_int_msg((byte **)&cfg_req_msg_ptr,&buf_len);
  /* Make sure the Config request is valid */
  TF_ASSERT(sizeof(lte_rrc_cfg_reqi_s) == buf_len);
  TF_ASSERT(cfg_req_msg_ptr != NULL);
  TF_ASSERT(cfg_req_msg_ptr->cfg_info[0].cfg_type == LTE_RRC_CFG_DED);

  /* Assert that CRE is in WAIT_FOR_CFG_CNFI state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__WAIT_FOR_CFG_CNFI);
  TF_MSG("\nCRE cfg request sent to LLC and CRE Module in WAIT_FOR_CFG_CNFI state\n");

  /* Setting the header for internal RRC messages */
  lte_rrc_init_default_hdr(&cfg_cnfi_msg.msg_hdr, LTE_RRC_CFG_CNFI);
  /* Setting the fields in the CFG_CNFI sent by LLC */
  cfg_cnfi_msg.proc = LTE_RRC_PROC_CRE;
  cfg_cnfi_msg.status = E_SUCCESS;
  cfg_cnfi_msg.trans_id = 0;
  /* Send the CFG_CNFI to CRE module there by mimicing the action of LLC */
  lte_rrc_utf_send_msg((byte*)&cfg_cnfi_msg, sizeof(cfg_cnfi_msg));

  /* Catch the ReestablishmentComplete sent by CRE to MH */
  lte_rrc_utf_get_next_int_msg((byte **)&ul_mh_msg_ptr,&buf_len);
  /* Make sure the UL MSG is valid */
  TF_ASSERT(sizeof(lte_rrc_send_ul_msg_reqi_s) == buf_len);
  TF_ASSERT(ul_mh_msg_ptr != NULL);
  TF_ASSERT(ul_mh_msg_ptr->ack_needed == FALSE);
  TF_ASSERT(ul_mh_msg_ptr->rb_id == LTE_RRC_DCCH_SRB1);

  /* Verify the contents of ReestablishmentComplete */
  ul_dcch_msg_ptr = (lte_rrc_osys_UL_DCCH_Message *)ul_mh_msg_ptr->ul_msg_ptr;
  TF_ASSERT(ul_dcch_msg_ptr != NULL);
  TF_ASSERT(ul_dcch_msg_ptr->message.t == T_lte_rrc_osys_UL_DCCH_MessageType_c1);
  TF_ASSERT(ul_dcch_msg_ptr->message.u.c1->t == 
                      T_lte_rrc_osys_UL_DCCH_MessageType_c1_rrcConnectionReestablishmentComplete);
  //TF_ASSERT(ul_dcch_msg_ptr->message.u.c1->u.rrcConnectionReestablishmentComplete->
  //rrc_TransactionIdentifier == 1);
  TF_ASSERT(ul_dcch_msg_ptr->message.u.c1->u.rrcConnectionReestablishmentComplete->
    criticalExtensions.t == T_lte_rrc_osys_RRCConnectionReestablishmentComplete_criticalExtensions_rrcConnectionReestablishmentComplete_r8);
  //TF_ASSERT(ul_dcch_msg_ptr->message.u.c1->u.rrcConnectionReestablishmentComplete->
  //  criticalExtensions.u.rrcConnectionReestablishmentComplete_r8->m.nonCriticalExtensionPresent == 0);

  /* Catch the MEAS_CFG_REQI sent by CRE to Meas module */
  lte_rrc_utf_get_next_int_msg((byte **)&meas_cfg_req_ptr,&buf_len);
  /* Make sure the MEAS_CFG_REQI is valid */
  TF_ASSERT(sizeof(lte_rrc_meas_cfg_reqi_s) == buf_len);
  TF_ASSERT(meas_cfg_req_ptr != NULL);
  //TF_ASSERT(meas_cfg_req_ptr->cell_id.phy_cell_id == 501);
  TF_ASSERT(meas_cfg_req_ptr->cause == LTE_RRC_MEAS_CFG_REQI_CAUSE_REAPPLY_CONFIG);

  /* Catch the CRE_COMPLETED_INDI sent by CRE to RRC modules */
  lte_rrc_utf_get_next_int_msg((byte **)&cre_completed_ind_ptr,&buf_len);
  /* Make sure the CRE_COMPLETED_INDI is valid */
  TF_ASSERT(sizeof(lte_rrc_cre_completed_indi_s) == buf_len);

  /* Assert that CRE is in INITIAL state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Set the stub function to return TRUE for HO_in_progress */
  TF_STUB(lte_rrc_config_ho_in_progress) = lte_rrc_cre_test_ho_in_progress;

  /* Setting the header for LTE_MAC_RANDOM_ACCESS_PROBLEM_IND */
  lte_rrc_init_default_hdr(&access_prob_ind.hdr,LTE_MAC_RANDOM_ACCESS_PROBLEM_IND);
  lte_rrc_utf_send_msg((byte*)&access_prob_ind, sizeof(access_prob_ind));
  lte_rrc_utf_wait_for_done();

  /* Catch the dlm processed indication message sent by Config to MH */
  lte_rrc_utf_get_next_int_msg((byte **)&dlm_processed_ind_ptr,&buf_len);
  /* Make sure the processed indication message is valid */
  TF_ASSERT(dlm_processed_ind_ptr->msg_hdr.id == LTE_RRC_DLM_PROCESSED_INDI);

  /* The CRE trigger should be ignored since HO Config is in progress. Assert 
    that CRE is still in INITIAL state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  lte_rrc_osys_asn1_free_pdu(ul_ccch_msg_ptr, lte_rrc_osys_UL_CCCH_Message_PDU);
  lte_rrc_osys_asn1_free_pdu(ul_dcch_msg_ptr, lte_rrc_osys_UL_DCCH_Message_PDU);
  lte_rrc_cre_test_free_sib_ptr();
  TF_MSG("\nCRE Config failure and CRE test ends \n");
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCreRepeatedRlfTest);

void LteRrcCreRepeatedRlfTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CRE_SM, ext_umid_list, 1);
  lte_rrc_cre_test_stub_init();
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info;
  TF_STUB(lte_rrc_get_rlf_window_size) = lte_rrc_test_stub_get_rlf_window_size;
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs;
}

void LteRrcCreRepeatedRlfTest::Test()
{
  lte_rrc_cre_s *i_ptr;
  i_ptr = (lte_rrc_cre_s *)stm_get_user_data(LTE_RRC_CRE_SM);
  /* 100 sec */
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 1);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].short_barring_used == 0);
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs_2;
  /* 120 sec */
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 2);
  /* 130 sec */
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs_3;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 3);
  /* 185 sec */
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs_4;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 2);
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 3);
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 4);
    RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 5);
  RlfandReestablish(LTE_RRC_SHORT_DURATION_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 6);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].short_barring_used > 0);
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info_2;
  /* 190 sec */
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs_5;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[1].rlf_count == 1);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 6);
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 1);
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 2);
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 3);
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 4);
    RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 5);
  RlfandReestablish(LTE_RRC_LONG_DURATION_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 6);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].short_barring_used > 0);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].cell_identity != 0);
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info_2;


  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[1].rlf_count == 2);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 6);
  /* 1100 sec */
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs_6;
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 1);
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 2);
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 3);
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 4);
    RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 5);
  RlfandReestablish(LTE_RRC_SHORT_DURATION_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 6);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].short_barring_used > 0);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].cell_identity != 0);


  lte_rrc_utf_reset(); 

  /* ---------------------------------------------------------------------- */
}

void LteRrcCreRepeatedRlfTest::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCreRepeatedRlfTest4Cells);

void LteRrcCreRepeatedRlfTest4Cells::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CRE_SM, ext_umid_list, 1);
  lte_rrc_cre_test_stub_init();
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info;
  TF_STUB(lte_rrc_get_rlf_window_size) = lte_rrc_test_stub_get_rlf_window_size;
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs;
}

void LteRrcCreRepeatedRlfTest4Cells::Test()
{
  lte_rrc_cre_s *i_ptr;
  /* 100 sec */
  i_ptr = (lte_rrc_cre_s *)stm_get_user_data(LTE_RRC_CRE_SM);
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 1);
  /* 120 sec */
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs_2;
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info_2;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[1].rlf_count == 1);
  /* 130 sec */
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs_3;
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info_3;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[2].rlf_count == 1);
  /* 185 sec */
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs_4;
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info_4;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 1);
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 2);
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info_2;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[1].rlf_count == 1);
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info_5;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[2].rlf_count == 1);
  lte_rrc_utf_reset(); 

  /* ---------------------------------------------------------------------- */
}

void LteRrcCreRepeatedRlfTest4Cells::Teardown()
{
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCreRepeatedRlfTestSlidingWindow);

void LteRrcCreRepeatedRlfTestSlidingWindow::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CRE_SM, ext_umid_list, 1);
  lte_rrc_cre_test_stub_init();
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info;
  TF_STUB(lte_rrc_get_rlf_window_size) = lte_rrc_test_stub_get_rlf_window_size;
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs;
}

void LteRrcCreRepeatedRlfTestSlidingWindow::Test()
{
  lte_rrc_cre_s *i_ptr;
  i_ptr = (lte_rrc_cre_s *)stm_get_user_data(LTE_RRC_CRE_SM);
  /* 100 sec */
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 1);
  /* 120 sec */
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs_2;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 2);
  /* 130 sec */
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs_3;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 3);
  /* 185 sec */
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs_4;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 2);
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs_5;
  RlfandReestablish(LTE_RRC_NO_BARRING);
  LTE_ASSERT(i_ptr->sd_ptr->rlf_cell_info[0].rlf_count == 3);
  lte_rrc_utf_reset(); 

  /* ---------------------------------------------------------------------- */
}

void LteRrcCreRepeatedRlfTestSlidingWindow::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCreRepeatedRlfTestDuringIRAT);

void LteRrcCreRepeatedRlfTestDuringIRAT::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CRE_SM, ext_umid_list, 1);
  lte_rrc_cre_test_stub_init();
  //TF_STUB(lte_rrc_config_ho_to_eutra_in_progress) = lte_rrc_config_test_ho_to_eutra_in_progress;
  TF_STUB(lte_rrc_get_camped_cell_info) = lte_rrc_test_stub_get_camped_cell_info;
  TF_STUB(lte_rrc_get_rlf_window_size) = lte_rrc_test_stub_get_rlf_window_size;
  TF_STUB(lte_get_current_time_since_power_up_secs) = lte_test_stub_get_current_time_since_power_up_secs;
}

void LteRrcCreRepeatedRlfTestDuringIRAT::Test()
{
  lte_rrc_cre_s *i_ptr;
  i_ptr = (lte_rrc_cre_s *)stm_get_user_data(LTE_RRC_CRE_SM);
  lte_rrc_conn_mode_failure_indi_s config_failure_ind;
  uint8 i=0;

    /* Setting the header for config failure indication */
  lte_rrc_init_default_hdr(&config_failure_ind.msg_hdr, LTE_RRC_CONN_MODE_FAILURE_INDI);
  config_failure_ind.conn_mode_failure_cause = LTE_RRC_CONN_MODE_FAILURE_CAUSE_HO;
  config_failure_ind.ho_failure_cause = LTE_RRC_HO_FAILURE_CAUSE_INVALID_CFG;
  for (i=0;i<11;i++)
  {
    lte_rrc_utf_send_msg((byte*)&config_failure_ind, sizeof(config_failure_ind));
  }
  
  lte_rrc_utf_reset(); 

  /* ---------------------------------------------------------------------- */
}

void LteRrcCreRepeatedRlfTestDuringIRAT::Teardown()
{
  lte_rrc_utf_teardown();
}
