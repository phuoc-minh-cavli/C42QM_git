/*!
  @file lte_rrc_cre_cdrx_collisiontest.cpp

  @brief
  Unit test code for CRE procedure that tests the handling of RLF indication 
  from ML1 (for CDRX Collision)

*/

/*===========================================================================

  Copyright (c) 2009 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.


$Header: //source/qcom/qct/modem/lte/RRC/main/latest/test/cre/
lte_rrc_cre_cdrx_collision_test.cpp#1 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
01/29/14   md     Initial Revision
           
===========================================================================*/

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/
extern "C"
{
#include "lte_rrc_int_msg.h"
#include "__lte_rrc_cre.h"
#include "lte_rrc_utils.h"
#include "lte_static_rrc_mem_util.h"
#include "lte_rrc_osys_asn1util.h"
#include "lte_rrc_cre.h"
#include "lte_rrc_csp.h"
#include "lte_rrc_crei.h"
#include "lte_rrc_sib.h"
#include "lte_rrc_config.h"
#include "lte_rrc_sec.h"
#include "lte_mac_msg.h"
#include "lte_mac_ind.h"
#include "lte_mac_rrc.h"
}
  
#include "TestFramework.h"
#include "lte_rrc_utf.h"
#include "lte_rrc_cre_test_common.h"
#include <tf_stub.h>

//external messages generated by code under test
static uint32 ext_umid_list[] = 
{ 
  LTE_MAC_ACCESS_REQ
};

extern "C"
{
extern lte_rrc_cre_s lte_rrc_cre_data;
}

extern "C"
{
  TF_PROTO_STUB(lte_errno_e, lte_rrc_csp_get_serving_cell_params, lte_rrc_cell_info_s*);
  TF_PROTO_STUB(boolean, lte_rrc_config_ho_in_progress, void);
}

/*===========================================================================

                   INTERNAL DEFINITIONS AND TYPES

===========================================================================*/
/*===========================================================================

                                UNIT TEST

===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCreDueToCdrxCollisionTest);

void LteRrcCreDueToCdrxCollisionTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CRE_SM, ext_umid_list, 1);
  lte_rrc_cre_test_stub_init();
  //lte_rrc_cre_data.sd_ptr->cdrx_collision_params.num_reest_thresh = 3;
}

void LteRrcCreDueToCdrxCollisionTest::Test()
{
  lte_cphy_rl_failure_ind_s rl_fail_ind;
  lte_rrc_sib_abort_reqi_s* sib_abort_reqi_ptr = NULL;
  uint32 buf_len = 0;
  lte_rrc_dlm_processed_indi_s *dlm_processed_ind_ptr = NULL;
  
  /* Make sure CRE is in initial state on receiving a RLF indication */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  rl_fail_ind.rlf_reason = LTE_CPHY_RLF_REASON_CDRX_COLLISION;
  lte_rrc_utf_send_msg((byte*)&rl_fail_ind, sizeof(rl_fail_ind));

  /* Catch SIB abort request */
  lte_rrc_utf_get_next_int_msg((byte **)&sib_abort_reqi_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_sib_abort_reqi_s) == buf_len);
  TF_ASSERT(LTE_RRC_SIB_ABORT_REQI == sib_abort_reqi_ptr->msg_hdr.id);

  /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->cdrx_collision_count == 1);

  lte_rrc_cre_test_reestablishment ();
  
  lte_rrc_utf_reset(); 

  /* ---------------------------------------------------------------------- */

}

void LteRrcCreDueToCdrxCollisionTest::Teardown()
{
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCreDueToMultiCdrxCollisionTest);

void LteRrcCreDueToMultiCdrxCollisionTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CRE_SM, ext_umid_list, 1);
  lte_rrc_cre_test_stub_init();
  //lte_rrc_cre_data.sd_ptr->cdrx_collision_params.num_reest_thresh = 3;
}

void LteRrcCreDueToMultiCdrxCollisionTest::Test()
{
  lte_cphy_rl_failure_ind_s rl_fail_ind;
  lte_rrc_sib_abort_reqi_s* sib_abort_reqi_ptr = NULL;
  uint32 buf_len = 0;
  lte_rrc_dlm_processed_indi_s *dlm_processed_ind_ptr = NULL;
  
  /* Make sure CRE is in initial state on receiving a RLF indication */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  rl_fail_ind.rlf_reason = LTE_CPHY_RLF_REASON_CDRX_COLLISION;
  lte_rrc_utf_send_msg((byte*)&rl_fail_ind, sizeof(rl_fail_ind));

  /* Catch SIB abort request */
  lte_rrc_utf_get_next_int_msg((byte **)&sib_abort_reqi_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_sib_abort_reqi_s) == buf_len);
  TF_ASSERT(LTE_RRC_SIB_ABORT_REQI == sib_abort_reqi_ptr->msg_hdr.id);

  /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->cdrx_collision_count == 1);

  lte_rrc_cre_test_reestablishment ();
  
  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  rl_fail_ind.rlf_reason = LTE_CPHY_RLF_REASON_CDRX_COLLISION;
  lte_rrc_utf_send_msg((byte*)&rl_fail_ind, sizeof(rl_fail_ind));

   /* Catch the dlm processed indication message sent by Config to MH */
  lte_rrc_utf_get_next_int_msg((byte **)&dlm_processed_ind_ptr,&buf_len);
  /* Make sure the processed indication message is valid */
  TF_ASSERT(dlm_processed_ind_ptr->msg_hdr.id == LTE_RRC_DLM_PROCESSED_INDI);

  /* Catch SIB abort request */
  lte_rrc_utf_get_next_int_msg((byte **)&sib_abort_reqi_ptr,&buf_len);
  TF_ASSERT(LTE_RRC_SIB_ABORT_REQI == sib_abort_reqi_ptr->msg_hdr.id);

   /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->cdrx_collision_count == 2);

  lte_rrc_cre_test_reestablishment ();

  /* Assert that CRE is in INITIAL state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);
  
  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  rl_fail_ind.rlf_reason = LTE_CPHY_RLF_REASON_CDRX_COLLISION;
  lte_rrc_utf_send_msg((byte*)&rl_fail_ind, sizeof(rl_fail_ind));

   /* Catch the dlm processed indication message sent by Config to MH */
  lte_rrc_utf_get_next_int_msg((byte **)&dlm_processed_ind_ptr,&buf_len);
  /* Make sure the processed indication message is valid */
  TF_ASSERT(dlm_processed_ind_ptr->msg_hdr.id == LTE_RRC_DLM_PROCESSED_INDI);

  /* Catch SIB abort request */
  lte_rrc_utf_get_next_int_msg((byte **)&sib_abort_reqi_ptr,&buf_len);
  TF_ASSERT(LTE_RRC_SIB_ABORT_REQI == sib_abort_reqi_ptr->msg_hdr.id);

  /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->cdrx_collision_count == 3);

  lte_rrc_cre_test_reestablishment ();

  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  rl_fail_ind.rlf_reason = LTE_CPHY_RLF_REASON_CDRX_COLLISION;
  lte_rrc_utf_send_msg((byte*)&rl_fail_ind, sizeof(rl_fail_ind));

   /* Catch the dlm processed indication message sent by Config to MH */
  lte_rrc_utf_get_next_int_msg((byte **)&dlm_processed_ind_ptr,&buf_len);
  /* Make sure the processed indication message is valid */
  TF_ASSERT(dlm_processed_ind_ptr->msg_hdr.id == LTE_RRC_DLM_PROCESSED_INDI);

  /* Assert that CRE is in INITIAL state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

    /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->cdrx_collision_count == 4);
 
  lte_rrc_utf_reset(); 

  /* ---------------------------------------------------------------------- */

}

void LteRrcCreDueToMultiCdrxCollisionTest::Teardown()
{
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCreCdrxCounterResetDuringIdleTest);

void LteRrcCreCdrxCounterResetDuringIdleTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CRE_SM, ext_umid_list, 1);
  lte_rrc_cre_test_stub_init();
  //lte_rrc_cre_data.sd_ptr->cdrx_collision_params.num_reest_thresh = 3;
}

void LteRrcCreCdrxCounterResetDuringIdleTest::Test()
{
  lte_cphy_rl_failure_ind_s rl_fail_ind;
  lte_rrc_sib_abort_reqi_s* sib_abort_reqi_ptr = NULL;
  uint32 buf_len = 0;
  lte_rrc_dlm_processed_indi_s *dlm_processed_ind_ptr = NULL;
  lte_rrc_conn_rel_started_indi_s rel_started_indi;
  
  /* Make sure CRE is in initial state on receiving a RLF indication */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  rl_fail_ind.rlf_reason = LTE_CPHY_RLF_REASON_CDRX_COLLISION;
  lte_rrc_utf_send_msg((byte*)&rl_fail_ind, sizeof(rl_fail_ind));

  /* Catch SIB abort request */
  lte_rrc_utf_get_next_int_msg((byte **)&sib_abort_reqi_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_sib_abort_reqi_s) == buf_len);
  TF_ASSERT(LTE_RRC_SIB_ABORT_REQI == sib_abort_reqi_ptr->msg_hdr.id);

  /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->cdrx_collision_count == 1);

  lte_rrc_cre_test_reestablishment ();
  
  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  rl_fail_ind.rlf_reason = LTE_CPHY_RLF_REASON_CDRX_COLLISION;
  lte_rrc_utf_send_msg((byte*)&rl_fail_ind, sizeof(rl_fail_ind));

   /* Catch the dlm processed indication message sent by Config to MH */
  lte_rrc_utf_get_next_int_msg((byte **)&dlm_processed_ind_ptr,&buf_len);
  /* Make sure the processed indication message is valid */
  TF_ASSERT(dlm_processed_ind_ptr->msg_hdr.id == LTE_RRC_DLM_PROCESSED_INDI);

  /* Catch SIB abort request */
  lte_rrc_utf_get_next_int_msg((byte **)&sib_abort_reqi_ptr,&buf_len);
  TF_ASSERT(LTE_RRC_SIB_ABORT_REQI == sib_abort_reqi_ptr->msg_hdr.id);

   /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->cdrx_collision_count == 2);

  lte_rrc_cre_test_reestablishment ();

  /* Assert that CRE is in INITIAL state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Send connection release indi */
  lte_rrc_init_default_hdr(&rel_started_indi.msg_hdr, LTE_RRC_CONN_REL_STARTED_INDI);
  lte_rrc_utf_send_msg((byte*)&rel_started_indi, sizeof(rel_started_indi));
  lte_rrc_utf_wait_for_done();

  /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->cdrx_collision_count == 0);

  /* Make sure CRE is in initial state on receiving a RLF indication */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  rl_fail_ind.rlf_reason = LTE_CPHY_RLF_REASON_CDRX_COLLISION;
  lte_rrc_utf_send_msg((byte*)&rl_fail_ind, sizeof(rl_fail_ind));
  lte_rrc_utf_wait_for_done();

  /* Catch the dlm processed indication message sent by Config to MH */
  lte_rrc_utf_get_next_int_msg((byte **)&dlm_processed_ind_ptr,&buf_len);
  /* Make sure the processed indication message is valid */
  TF_ASSERT(dlm_processed_ind_ptr->msg_hdr.id == LTE_RRC_DLM_PROCESSED_INDI);

  /* Catch SIB abort request */
  lte_rrc_utf_get_next_int_msg((byte **)&sib_abort_reqi_ptr,&buf_len);
  TF_ASSERT(LTE_RRC_SIB_ABORT_REQI == sib_abort_reqi_ptr->msg_hdr.id);

   /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->cdrx_collision_count == 1);

  lte_rrc_cre_test_reestablishment ();
  
  lte_rrc_utf_reset(); 

}

void LteRrcCreCdrxCounterResetDuringIdleTest::Teardown()
{
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCreDueToCdrxCollisionThenConnModeRlfTest);

void LteRrcCreDueToCdrxCollisionThenConnModeRlfTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CRE_SM, ext_umid_list, 1);
  lte_rrc_cre_test_stub_init();
  //lte_rrc_cre_data.sd_ptr->cdrx_collision_params.num_reest_thresh = 3;
}

void LteRrcCreDueToCdrxCollisionThenConnModeRlfTest::Test()
{
  lte_cphy_rl_failure_ind_s rl_fail_ind;
  lte_rrc_sib_abort_reqi_s* sib_abort_reqi_ptr = NULL;
  uint32 buf_len = 0;
  lte_rrc_dlm_processed_indi_s *dlm_processed_ind_ptr = NULL;
  
  /* Make sure CRE is in initial state on receiving a RLF indication */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  rl_fail_ind.rlf_reason = LTE_CPHY_RLF_REASON_CDRX_COLLISION;
  lte_rrc_utf_send_msg((byte*)&rl_fail_ind, sizeof(rl_fail_ind));

  /* Catch SIB abort request */
  lte_rrc_utf_get_next_int_msg((byte **)&sib_abort_reqi_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_sib_abort_reqi_s) == buf_len);
  TF_ASSERT(LTE_RRC_SIB_ABORT_REQI == sib_abort_reqi_ptr->msg_hdr.id);

  /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->cdrx_collision_count == 1);

  lte_rrc_cre_test_reestablishment ();

  /* Assert that CRE is in INITIAL state */
  TF_ASSERT(lte_rrc_cre_get_state() == LTE_RRC_CRE_SM__INITIAL);

  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  rl_fail_ind.rlf_reason = LTE_CPHY_RLF_REASON_NORMAL;
  lte_rrc_utf_send_msg((byte*)&rl_fail_ind, sizeof(rl_fail_ind));

  /* Catch the dlm processed indication message sent by Config to MH */
  lte_rrc_utf_get_next_int_msg((byte **)&dlm_processed_ind_ptr,&buf_len);
  /* Make sure the processed indication message is valid */
  TF_ASSERT(dlm_processed_ind_ptr->msg_hdr.id == LTE_RRC_DLM_PROCESSED_INDI);

  /* Catch SIB abort request */
  lte_rrc_utf_get_next_int_msg((byte **)&sib_abort_reqi_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_sib_abort_reqi_s) == buf_len);
  TF_ASSERT(LTE_RRC_SIB_ABORT_REQI == sib_abort_reqi_ptr->msg_hdr.id);

  /* check internal variable */
  TF_ASSERT(lte_rrc_cre_data.dd_ptr->cdrx_collision_count == 0);
 
  lte_rrc_utf_reset(); 

  /* ---------------------------------------------------------------------- */

}

void LteRrcCreDueToCdrxCollisionThenConnModeRlfTest::Teardown()
{
  lte_rrc_utf_teardown();
}




