/*!
  @file lte_rrc_plmn_search_limited_to_auto_search_test.cpp

  @brief
  Unit test code for taking PLMN_SEARCH to camped state.
  Controller is in Inactive state and there is nothing in the Acq DB. Band
  Scan is started

*/

/*===========================================================================

  Copyright (c) 2009 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

$Header: 

when       who     what, where, why
--------   ---     ----------------------------------------------------------
12/22/09   vatsac  Initial Revision
           
===========================================================================*/

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/

extern "C"
{
#include <lte_rrc_int_msg.h>
#include <lte_rrc_ext_msg.h>
#include <lte_cphy_msg.h>
#include <__lte_rrc_plmn_search.h>
#include <__lte_rrc_controller.h>
#include <lte_rrc_utils.h>
}

#include <TestFramework.h>
#include <lte_rrc_utf.h>
#include "lte_rrc_plmn_search_test_common.h"
#include "lte_rrc_test_integration_common.h"

//external messages generated by code under test
static uint32 ext_umid_list[] = 
{ 
  LTE_CPHY_BPLMN_START_REQ,
  LTE_CPHY_BPLMN_CELL_REQ,
  LTE_CPHY_BPLMN_STOP_REQ,
  LTE_RRC_PLMN_SEARCH_CNF
};

// Message structures
static lte_rrc_plmn_search_req_s search_req;
static lte_rrc_mode_change_cnfi_s mode_change_cnfi;
static lte_cphy_msg_bplmn_cell_cnf_s cell_cnf;
static lte_rrc_unsolicited_sib_indi_s unsolicited_sib_indi;
static lte_cphy_msg_bplmn_stop_cnf_s stop_cnf;
//static lte_cphy_msg_bplmn_complete_ind_s complete_ind;
//static lte_rrc_plmn_search_abort_req_s abort_req;
//static lte_rrc_stopped_indi_s stopped_indi;

//transaction ID to be returned from config request
#define LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID 7

/*===========================================================================

                                UNIT TEST

===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchTest);

void LteRrcPlmnSearchLimitedToAutoSearchTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
}

void LteRrcPlmnSearchLimitedToAutoSearchTest::Test()
{
  byte *buf_ptr;
  uint32 buf_len;
  lte_rrc_mode_change_reqi_s *mode_change_req_ptr;
  lte_cphy_msg_bplmn_start_req_s *start_req_ptr;
  lte_cphy_msg_bplmn_cell_req_s *cell_req_ptr;
  lte_rrc_plmn_search_cnf_s *search_cnf_ptr;
  lte_cphy_msg_bplmn_stop_req_s *stop_req_ptr;
  
  lte_rrc_osys_BCCH_DL_SCH_Message *sib1_pdu_ptr;
  lte_rrc_pdu_buf_s encoded_msg_ptr;

  int encode_status = 0;

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_plmn_search_test_construct_basic_sib1();

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  TF_MSG("Sending Service Req");
  msgr_init_hdr(&search_req.msg_hdr, MSGR_NAS_EMM, LTE_RRC_PLMN_SEARCH_REQ);
  search_req.trans_id = 1;
  search_req.network_select_mode = SYS_NETWORK_SELECTION_MODE_AUTOMATIC;
  search_req.search_type = SYS_SERVICE_SEARCH_BACKGROUND_AUTOMATIC;
  memset(&search_req.rat_pri_list,0,sizeof(search_req.rat_pri_list));
  search_req.rat_pri_list.num_items = 1;
  search_req.rat_pri_list.priority_list_info[0].acq_sys_mode = SYS_SYS_MODE_LTE;
  search_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_LTE_BAND1;
  search_req.plmn_rat_list.length = 1;
  search_req.plmn_rat_list.info[0].plmn.identity[0] = 0x21;
  search_req.plmn_rat_list.info[0].plmn.identity[1] = 0x63;
  search_req.plmn_rat_list.info[0].plmn.identity[2] = 0x54;
  search_req.plmn_rat_list.info[0].rat = SYS_RAT_LTE_RADIO_ACCESS;
  search_req.rplmn_info_is_valid = TRUE;
  search_req.rplmn.mcc[0] = 7;
  search_req.rplmn.mcc[1] = 8;
  search_req.rplmn.mcc[2] = 9;
  search_req.rplmn.num_mnc_digits = 3;
  search_req.rplmn.mnc[0] = 10;
  search_req.rplmn.mnc[1] = 11;
  search_req.rplmn.mnc[2] = 12;
  search_req.hplmn_info_is_valid = TRUE;
  search_req.hplmn.mcc[0] = 13;
  search_req.hplmn.mcc[1] = 14;
  search_req.hplmn.mcc[2] = 15;
  search_req.hplmn.num_mnc_digits = 3;
  search_req.hplmn.mnc[0] = 16;
  search_req.hplmn.mnc[1] = 17;
  search_req.hplmn.mnc[2] = 18;
  search_req.ehplmn_list.num_plmns = 1;
  search_req.ehplmn_list.plmn[0].mcc[0] = 19;
  search_req.ehplmn_list.plmn[0].mcc[1] = 20;
  search_req.ehplmn_list.plmn[0].mcc[2] = 21;
  search_req.ehplmn_list.plmn[0].num_mnc_digits = 3;
  search_req.ehplmn_list.plmn[0].mnc[0] = 22;
  search_req.ehplmn_list.plmn[0].mnc[1] = 23;
  search_req.ehplmn_list.plmn[0].mnc[2] = 24;
  memset(&search_req.eplmn_list,0,sizeof(search_req.eplmn_list));
  memset(&search_req.forbidden_ta_list,0,
         sizeof(search_req.forbidden_ta_list));
  lte_rrc_utf_send_msg((byte*)&search_req, sizeof(search_req));

  TF_MSG("Checking for LTE_RRC_MODE_CHANGE_REQI");
  lte_rrc_utf_get_next_int_msg(&buf_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_mode_change_reqi_s) == buf_len);
  mode_change_req_ptr = (lte_rrc_mode_change_reqi_s *)(void*) buf_ptr;
  TF_ASSERT(LTE_RRC_MODE_CHANGE_REQI == mode_change_req_ptr->msg_hdr.id);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Sending Mode Change Cnf");
  lte_rrc_init_default_hdr(&mode_change_cnfi.msg_hdr,LTE_RRC_MODE_CHANGE_CNFI);
  mode_change_cnfi.status = TRUE;
  lte_rrc_utf_send_msg((byte*)&mode_change_cnfi, sizeof(mode_change_cnfi));

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");
  lte_rrc_utf_get_next_ext_msg(&buf_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_cphy_msg_bplmn_start_req_s) == buf_len);
  start_req_ptr = (lte_cphy_msg_bplmn_start_req_s *)(void*) buf_ptr;
  TF_ASSERT(LTE_CPHY_BPLMN_START_REQ == start_req_ptr->msgr_hdr.id);
  TF_ASSERT(start_req_ptr->new_req == TRUE);
  TF_ASSERT(start_req_ptr->req_type == LTE_CPHY_BPLMN_TYPE_LTE_LTE);
  TF_ASSERT(start_req_ptr->start_now == TRUE);
  TF_ASSERT(start_req_ptr->num_chans == 0);
  TF_ASSERT(start_req_ptr->num_bands == 1);
  TF_ASSERT(start_req_ptr->bands[0] == SYS_SBAND_LTE_EUTRAN_BAND1);
  TF_ASSERT(start_req_ptr->num_black_freqs == 0);
  TF_ASSERT(start_req_ptr->irat_lte_plmn_time_allowed == LTE_CPHY_BPLMN_UNLIMITED_TIME);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

  TF_MSG("Get 1st SIB1");
  sib1_pdu_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message*)lte_rrc_plmn_search_test_get_sib1_pdu_ptr();
  TF_ASSERT(sib1_pdu_ptr != NULL);

  /* set PLMN mismatch */
  sib1_pdu_ptr->message.u.c1->u.systemInformationBlockType1->
      cellAccessRelatedInfo.plmn_IdentityList.elem->plmn_Identity.mcc.
      elem[0] = 2;

  encode_status = lte_rrc_osys_asn1_encode_pdu(sib1_pdu_ptr, &encoded_msg_ptr,
                               BCCH_DL_SCH_Message);

  TF_MSG("Sending LTE_RRC_UNSOLICITED_SIB_INDI");
  lte_rrc_init_default_hdr(&unsolicited_sib_indi.msg_hdr, LTE_RRC_UNSOLICITED_SIB_INDI);
  unsolicited_sib_indi.cell_id.freq = 1;
  unsolicited_sib_indi.cell_id.phy_cell_id = 1;
  memcpy(unsolicited_sib_indi.encoded_si, encoded_msg_ptr.value, encoded_msg_ptr.length);
  unsolicited_sib_indi.encoded_si_size = encoded_msg_ptr.length;
  lte_rrc_utf_send_msg((byte*)&unsolicited_sib_indi, sizeof(unsolicited_sib_indi));

  TF_MSG("Checking for LTE_CPHY_BPLMN_CELL_REQ");
  lte_rrc_utf_get_next_ext_msg(&buf_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_cphy_msg_bplmn_cell_req_s) == buf_len);
  cell_req_ptr = (lte_cphy_msg_bplmn_cell_req_s *)(void*) buf_ptr;
  TF_ASSERT(LTE_CPHY_BPLMN_CELL_REQ == cell_req_ptr->msgr_hdr.id);
  TF_ASSERT(cell_req_ptr->freq == 1);
  TF_ASSERT(cell_req_ptr->cell_id == 1);
  TF_ASSERT(cell_req_ptr->barred_status == LTE_CPHY_BPLMN_NOT_BARRED);
  TF_ASSERT(cell_req_ptr->cell_select_cfg.q_rxlevmin == -140);
  TF_ASSERT(cell_req_ptr->cell_select_cfg.q_rxlevmin_offset == 0);
  TF_ASSERT(cell_req_ptr->cell_select_cfg.p_max == LTE_DEFAULT_PMAX);

  TF_MSG("Sending LTE_CPHY_BPLMN_CELL_CNF");
  msgr_init_hdr(&cell_cnf.msgr_hdr, MSGR_LTE_CPHY, LTE_CPHY_BPLMN_CELL_CNF);
  cell_cnf.earfcn = 1; cell_cnf.freq = 1;
  cell_cnf.cell_id = 1;
  cell_cnf.bw = LTE_BW_NRB_100;
  cell_cnf.rsrp = -110; //LTE_RRC_CSP_HIGH_CELL_QUALITY_THRESHOLD;
  cell_cnf.srxlev_calculated = TRUE;
  cell_cnf.srxlev = 1;  cell_cnf.squal = 1;
  lte_rrc_utf_send_msg((byte*)&cell_cnf, sizeof(cell_cnf));

  TF_MSG("Get 2nd SIB1");
  sib1_pdu_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message*)lte_rrc_plmn_search_test_get_sib1_pdu_ptr();
  TF_ASSERT(sib1_pdu_ptr != NULL);

  /* set PLMN mismatch */
  sib1_pdu_ptr->message.u.c1->u.systemInformationBlockType1->
      cellAccessRelatedInfo.plmn_IdentityList.elem->plmn_Identity.mcc.
      elem[0] = 1;

  encode_status = lte_rrc_osys_asn1_encode_pdu(sib1_pdu_ptr, &encoded_msg_ptr,
                               BCCH_DL_SCH_Message);

  TF_MSG("Sending LTE_RRC_UNSOLICITED_SIB_INDI");
  lte_rrc_init_default_hdr(&unsolicited_sib_indi.msg_hdr, LTE_RRC_UNSOLICITED_SIB_INDI);
  unsolicited_sib_indi.cell_id.freq = 1;
  unsolicited_sib_indi.cell_id.phy_cell_id = 2;
  memcpy(unsolicited_sib_indi.encoded_si, encoded_msg_ptr.value, encoded_msg_ptr.length);
  unsolicited_sib_indi.encoded_si_size = encoded_msg_ptr.length;
  lte_rrc_utf_send_msg((byte*)&unsolicited_sib_indi, sizeof(unsolicited_sib_indi));

  TF_MSG("Checking for LTE_CPHY_BPLMN_CELL_REQ");
  lte_rrc_utf_get_next_ext_msg(&buf_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_cphy_msg_bplmn_cell_req_s) == buf_len);
  cell_req_ptr = (lte_cphy_msg_bplmn_cell_req_s *)(void*) buf_ptr;
  TF_ASSERT(LTE_CPHY_BPLMN_CELL_REQ == cell_req_ptr->msgr_hdr.id);
  TF_ASSERT(cell_req_ptr->freq == 1);
  TF_ASSERT(cell_req_ptr->cell_id == 2);
  TF_ASSERT(cell_req_ptr->barred_status == LTE_CPHY_BPLMN_NOT_BARRED);
  TF_ASSERT(cell_req_ptr->cell_select_cfg.q_rxlevmin == -140);
  TF_ASSERT(cell_req_ptr->cell_select_cfg.q_rxlevmin_offset == 0);
  TF_ASSERT(cell_req_ptr->cell_select_cfg.p_max == LTE_DEFAULT_PMAX);

  TF_MSG("Sending LTE_CPHY_BPLMN_CELL_CNF");
  msgr_init_hdr(&cell_cnf.msgr_hdr, MSGR_LTE_CPHY, LTE_CPHY_BPLMN_CELL_CNF);
  cell_cnf.earfcn = 1; cell_cnf.freq = 1;
  cell_cnf.cell_id = 2;
  cell_cnf.bw = LTE_BW_NRB_100;
  cell_cnf.rsrp = -110; //LTE_RRC_CSP_HIGH_CELL_QUALITY_THRESHOLD;
  cell_cnf.srxlev_calculated = TRUE;
  cell_cnf.srxlev = 1;  cell_cnf.squal = 1;
  lte_rrc_utf_send_msg((byte*)&cell_cnf, sizeof(cell_cnf));

  TF_MSG("Checking for LTE_CPHY_BPLMN_STOP_REQ");
  lte_rrc_utf_get_next_ext_msg(&buf_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_cphy_msg_bplmn_stop_req_s) == buf_len);
  stop_req_ptr = (lte_cphy_msg_bplmn_stop_req_s *)(void*) buf_ptr;
  TF_ASSERT(LTE_CPHY_BPLMN_STOP_REQ == stop_req_ptr->msgr_hdr.id);

  TF_MSG("Sending LTE_CPHY_BPLMN_STOP_CNF");
  msgr_init_hdr(&stop_cnf.msgr_hdr, MSGR_LTE_CPHY, LTE_CPHY_BPLMN_STOP_CNF);
  stop_cnf.status = TRUE;
  lte_rrc_utf_send_msg((byte*)&stop_cnf, sizeof(stop_cnf));

  TF_MSG("Checking for LTE_RRC_PLMN_SEARCH_CNF");
  lte_rrc_utf_get_next_ext_msg(&buf_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_plmn_search_cnf_s) == buf_len);
  search_cnf_ptr = (lte_rrc_plmn_search_cnf_s *)(void*) buf_ptr;
  TF_ASSERT(LTE_RRC_PLMN_SEARCH_CNF == search_cnf_ptr->msg_hdr.id);
  TF_ASSERT(search_cnf_ptr->trans_id == 1);
  TF_ASSERT(search_cnf_ptr->network_select_mode == SYS_NETWORK_SELECTION_MODE_AUTOMATIC);
  TF_ASSERT(search_cnf_ptr->search_type == SYS_SERVICE_SEARCH_BACKGROUND_AUTOMATIC);
  TF_ASSERT(search_cnf_ptr->status == LTE_RRC_PLMN_SEARCH_COMPLETED);
  TF_ASSERT(search_cnf_ptr->found_plmn_rat_list.length == 1);
  TF_ASSERT(search_cnf_ptr->found_plmn_rat_list.info[0].plmn.identity[0] == 0x21);
  TF_ASSERT(search_cnf_ptr->found_plmn_rat_list.info[0].plmn.identity[1] == 0x63);
  TF_ASSERT(search_cnf_ptr->found_plmn_rat_list.info[0].plmn.identity[2] == 0x54);
  TF_ASSERT(search_cnf_ptr->found_plmn_rat_list.info[0].rat == SYS_RAT_LTE_RADIO_ACCESS);
  TF_ASSERT(search_cnf_ptr->found_plmn_rat_list.info[0].plmn_service_capability == SYS_SRV_CAPABILITY_PS_SERVICE_ONLY);
  TF_ASSERT(search_cnf_ptr->found_plmn_rat_list.info[0].plmn_forbidden == FALSE);
  TF_ASSERT(search_cnf_ptr->found_plmn_rat_list.info[0].list_category == SYS_DETAILED_PLMN_LIST_CATEGORY_OTHER);
  TF_ASSERT(search_cnf_ptr->found_plmn_rat_list.info[0].signal_quality == SYS_SIGNAL_QUALITY_HIGH);
  //TF_ASSERT(search_cnf_ptr->found_plmn_rat_list.info[0].signal_strength == -110);
  TF_ASSERT(search_cnf_ptr->found_plmn_rat_list.info[0].signal_strength == 110);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_free_sib1_pdu();

  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchTest::Teardown()
{
  lte_rrc_utf_teardown();
}

void populate_plmn_search_req()
{
	lte_rrc_plmn_search_req_s* plmn_search_req;
	plmn_search_req = lte_rrc_test_get_plmn_search_req_ptr();
	
	plmn_search_req -> forbidden_ta_list.num_entries = 1;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].tac = 1;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mcc[0] = 9;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mcc[1] = 9;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mcc[2] = 9;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.num_mnc_digits = 3;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mnc[0] = 9;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mnc[1] = 9;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mnc[2] = 9;

}

void populate_plmn_search_req1()
{
	lte_rrc_plmn_search_req_s* plmn_search_req;
	plmn_search_req = lte_rrc_test_get_plmn_search_req_ptr();
	
	plmn_search_req -> forbidden_ta_list.num_entries = 0;

}

void populate_plmn_search_req_true1()
{
	lte_rrc_plmn_search_req_s* plmn_search_req;
	plmn_search_req = lte_rrc_test_get_plmn_search_req_ptr();
	
	plmn_search_req -> forbidden_ta_list.num_entries = 1;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].tac = 1;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mcc[0] = 1;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mcc[1] = 2;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mcc[2] = 3;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.num_mnc_digits = 3;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mnc[0] = 4;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mnc[1] = 5;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mnc[2] = 6;

	
	plmn_search_req ->plmn_rat_list.length = 2;
	plmn_search_req ->plmn_rat_list.info[1].plmn.identity[0] = 0x23;
	plmn_search_req ->plmn_rat_list.info[1].plmn.identity[1] = 0x63;
	plmn_search_req ->plmn_rat_list.info[1].plmn.identity[2] = 0x54;
	plmn_search_req ->plmn_rat_list.info[1].rat = SYS_RAT_LTE_RADIO_ACCESS;

}
void populate_plmn_search_req_true3()
{
	lte_rrc_plmn_search_req_s* plmn_search_req;
	plmn_search_req = lte_rrc_test_get_plmn_search_req_ptr();
	
	plmn_search_req -> search_type = SYS_SERVICE_SEARCH_BACKGROUND_AUTOMATIC; 

}

void populate_plmn_search_req_true4()
{
	lte_rrc_plmn_search_req_s* plmn_search_req;
	plmn_search_req = lte_rrc_test_get_plmn_search_req_ptr();

	plmn_search_req -> network_select_mode = SYS_NETWORK_SELECTION_MODE_MANUAL;
	plmn_search_req -> search_type = SYS_SERVICE_SEARCH_NONE;
	plmn_search_req ->plmn_rat_list.length = 0;
}
void populate_plmn_search_req_true2()
{
	lte_rrc_plmn_search_req_s* plmn_search_req;
	plmn_search_req = lte_rrc_test_get_plmn_search_req_ptr();
	
	plmn_search_req -> search_type = SYS_SERVICE_SEARCH_BACKGROUND_MANUAL; 
	plmn_search_req -> forbidden_ta_list.num_entries = 1;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].tac = 1;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mcc[0] = 1;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mcc[1] = 2;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mcc[2] = 3;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.num_mnc_digits = 3;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mnc[0] = 4;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mnc[1] = 5;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mnc[2] = 6;

	
	plmn_search_req ->plmn_rat_list.length = 2;
	plmn_search_req ->plmn_rat_list.info[1].plmn.identity[0] = 0x23;
	plmn_search_req ->plmn_rat_list.info[1].plmn.identity[1] = 0x63;
	plmn_search_req ->plmn_rat_list.info[1].plmn.identity[2] = 0x54;
	plmn_search_req ->plmn_rat_list.info[1].rat = SYS_RAT_LTE_RADIO_ACCESS;

}

	void populate_plmn_search_req_true()
{
	lte_rrc_plmn_search_req_s* plmn_search_req;
	plmn_search_req = lte_rrc_test_get_plmn_search_req_ptr();
	
	plmn_search_req -> forbidden_ta_list.num_entries = 1;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].tac = 1;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mcc[0] = 1;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mcc[1] = 2;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mcc[2] = 3;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.num_mnc_digits = 3;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mnc[0] = 4;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mnc[1] = 5;
	plmn_search_req -> forbidden_ta_list.tracking_area[0].plmn.mnc[2] = 6;

	
  plmn_search_req ->plmn_rat_list.info[0].plmn.identity[0] = 0x23;
  plmn_search_req ->plmn_rat_list.info[0].plmn.identity[1] = 0x63;
  plmn_search_req ->plmn_rat_list.info[0].plmn.identity[2] = 0x54;
  

}
void validate_plmn_srch_cnf(lte_rrc_utf_rrc2ext_msg_u* rrc_req_msg)
{
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.trans_id == 1);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.network_select_mode == SYS_NETWORK_SELECTION_MODE_AUTOMATIC);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.search_type == SYS_SERVICE_SEARCH_BACKGROUND_AUTOMATIC);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.status == LTE_RRC_PLMN_SEARCH_COMPLETED);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.length == 1);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn.identity[0] == 0x21);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn.identity[1] == 0x63);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn.identity[2] == 0x54);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].rat == SYS_RAT_LTE_RADIO_ACCESS);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn_service_capability == SYS_SRV_CAPABILITY_PS_SERVICE_ONLY);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn_forbidden == FALSE);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].list_category == SYS_DETAILED_PLMN_LIST_CATEGORY_OTHER);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].signal_quality == SYS_SIGNAL_QUALITY_HIGH);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].signal_strength == 110);
}
void validate_plmn_srch_cnf_6(lte_rrc_utf_rrc2ext_msg_u* rrc_req_msg)
{
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.trans_id == 1);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.network_select_mode == SYS_NETWORK_SELECTION_MODE_AUTOMATIC);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.search_type == SYS_SERVICE_SEARCH_BACKGROUND_MANUAL);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.status == LTE_RRC_PLMN_SEARCH_COMPLETED);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.length == 0);
}
void validate_plmn_srch_cnf_bplmn_complete_ind(lte_rrc_utf_rrc2ext_msg_u* rrc_req_msg)
{
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.trans_id == 1);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.network_select_mode == SYS_NETWORK_SELECTION_MODE_AUTOMATIC);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.search_type == SYS_SERVICE_SEARCH_BACKGROUND_AUTOMATIC);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.status == LTE_RRC_PLMN_SEARCH_COMPLETED);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.length == 2);
}
void validate_plmn_srch_cnf_2(lte_rrc_utf_rrc2ext_msg_u* rrc_req_msg)
{
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.trans_id == 1);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.network_select_mode == SYS_NETWORK_SELECTION_MODE_AUTOMATIC);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.search_type == SYS_SERVICE_SEARCH_BACKGROUND_AUTOMATIC);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.status == LTE_RRC_PLMN_SEARCH_COMPLETED);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.length == 1);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn.identity[0] == 0x23);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn.identity[1] == 0x63);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn.identity[2] == 0x54);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].rat == SYS_RAT_LTE_RADIO_ACCESS);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn_service_capability == SYS_SRV_CAPABILITY_PS_SERVICE_ONLY);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn_forbidden == FALSE);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].list_category == SYS_DETAILED_PLMN_LIST_CATEGORY_OTHER);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].signal_quality == SYS_SIGNAL_QUALITY_HIGH);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].signal_strength == 110);
}


void validate_plmn_srch_cnf_3(lte_rrc_utf_rrc2ext_msg_u* rrc_req_msg)
{
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.trans_id == 1);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.network_select_mode == SYS_NETWORK_SELECTION_MODE_AUTOMATIC);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.search_type == SYS_SERVICE_SEARCH_BACKGROUND_AUTOMATIC);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.status == LTE_RRC_PLMN_SEARCH_COMPLETED);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.length == 1);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn.identity[0] == 0x21);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn.identity[1] == 0x63);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn.identity[2] == 0x54);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].rat == SYS_RAT_LTE_RADIO_ACCESS);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn_service_capability == SYS_SRV_CAPABILITY_PS_SERVICE_ONLY);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].plmn_forbidden == FALSE);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].list_category == SYS_DETAILED_PLMN_LIST_CATEGORY_OTHER);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].signal_quality == SYS_SIGNAL_QUALITY_HIGH);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.info[0].signal_strength == 110);
}


void validate_plmn_srch_cnf_4(lte_rrc_utf_rrc2ext_msg_u* rrc_req_msg)
{
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.trans_id == 1);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.network_select_mode == SYS_NETWORK_SELECTION_MODE_AUTOMATIC);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.search_type == SYS_SERVICE_SEARCH_BACKGROUND_AUTOMATIC);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.status == LTE_RRC_PLMN_SEARCH_ABORT_CNF);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.length == 0);
}


void validate_plmn_srch_cnf_5(lte_rrc_utf_rrc2ext_msg_u* rrc_req_msg)
{
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.trans_id == 1);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.network_select_mode == SYS_NETWORK_SELECTION_MODE_AUTOMATIC);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.search_type == SYS_SERVICE_SEARCH_BACKGROUND_MANUAL);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.status == LTE_RRC_PLMN_SEARCH_ABORT_CNF);
	TF_ASSERT(rrc_req_msg ->lte_rrc_plmn_search_cnf.found_plmn_rat_list.length == 0);
}

void validate_bplmn_start_req(lte_rrc_utf_rrc2ext_msg_u* rrc_req_msg)
{
	TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.new_req == TRUE);
	TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.req_type == LTE_CPHY_BPLMN_TYPE_LTE_LTE);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.start_now == TRUE);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.num_chans == 0);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.num_bands == 1);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.bands[0] == SYS_SBAND_LTE_EUTRAN_BAND1);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.num_black_freqs == 0);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.irat_lte_plmn_time_allowed == LTE_CPHY_BPLMN_UNLIMITED_TIME);
}

void validate_bplmn_start_req1(lte_rrc_utf_rrc2ext_msg_u* rrc_req_msg)
{
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.new_req == TRUE);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.req_type == LTE_CPHY_BPLMN_TYPE_LTE_LTE);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.start_now == TRUE);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.num_chans == 1);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.num_bands == 1);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.chans[0].chan == 1);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.chans[0].bw == LTE_BW_NRB_100);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.bands[0] == SYS_SBAND_LTE_EUTRAN_BAND1);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.num_black_freqs == 0);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_start_req.irat_lte_plmn_time_allowed == LTE_CPHY_BPLMN_UNLIMITED_TIME);
}

void validate_bplmn_cell_req(lte_rrc_utf_rrc2ext_msg_u* rrc_req_msg)
{
	TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_cell_req.barred_status == LTE_CPHY_BPLMN_NOT_BARRED);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_cell_req.cell_select_cfg.q_rxlevmin == -140);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_cell_req.cell_select_cfg.q_rxlevmin_offset == 0);
 TF_ASSERT(rrc_req_msg->lte_cphy_msg_bplmn_cell_req.cell_select_cfg.p_max == LTE_DEFAULT_PMAX);

}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchForbiddenTest);

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTest::Test()
{
  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_utf_check_no_more_msgs();

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req1, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

  lte_rrc_test_common_set_sib1_indi_tac(1);
  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x999999);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

    lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);


  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__INITIAL);

   lte_rrc_utf_check_no_more_msgs();

  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTest::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}



TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTest);

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTest::Test()
{

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


 
  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

 
  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf_2, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  
  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__INITIAL);

 
 

  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTest::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}


void populate_sib_indi()
{
	lte_rrc_test_common_set_sib1_indi_tac(5);
 lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);

}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTest1);

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTest1::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTest1::Test()
{

  //In this test case, FTA list has PLMN A TAC-1. We test 
  // SIB_INDI having PLMN A TAC-1 which should be ignored.
  //Next when SIB_INDI has PLMN A TAC-5, it should NOT be ignored

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, TRUE, NULL);

  
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf_3, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_utf_wait_for_done();


  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__INITIAL);


  

  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTest1::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTest2);

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTest2::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTest2::Test()
{

  //In this test case, FTA list has PLMN A TAC-1. We test 
  // SIB_INDI having PLMN A TAC-1 which should be ignored.
  //Next when SIB_INDI has PLMN A TAC-5, it should NOT be ignored

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, TRUE, NULL);

  
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
  lte_rrc_test_integration_common_send_umid (LTE_CPHY_BPLMN_STOP_CNF, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf_3, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_utf_wait_for_done();


  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__INITIAL);




  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTest2::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}



TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearch2);

void LteRrcPlmnSearchLimitedToAutoSearch2::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearch2::Test()
{
  TF_MSG("Start of test");
  TF_MSG("INCORRECT CONTROLLER STATE TEST CASE");
  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


 lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__CONNECTED);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

   TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_utf_wait_for_done();



  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearch2::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchAbortModeChange);

void LteRrcPlmnSearchLimitedToAutoSearchAbortModeChange::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}


void LteRrcPlmnSearchLimitedToAutoSearchAbortModeChange::Test()
{

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);


  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf_4, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);


  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortModeChange::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchReqModeChange);

void LteRrcPlmnSearchLimitedToAutoSearchReqModeChange::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}


void LteRrcPlmnSearchLimitedToAutoSearchReqModeChange::Test()
{

  TF_MSG("Start of test");
  uint8 i =0;
  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  for (i=0; i<8; i++) {
	  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

	  lte_rrc_utf_wait_for_done();

	  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
	  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
				LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  }

  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchReqModeChange::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchAbortWT_SIB1S_AND_CELL_SELECT);

void LteRrcPlmnSearchLimitedToAutoSearchAbortWT_SIB1S_AND_CELL_SELECT::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortWT_SIB1S_AND_CELL_SELECT::Test()
{

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
 
  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

    lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
	lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

   lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortWT_SIB1S_AND_CELL_SELECT::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchAbortWT_SIB1S_AND_CELL_SELECTLoop);

void LteRrcPlmnSearchLimitedToAutoSearchAbortWT_SIB1S_AND_CELL_SELECTLoop::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortWT_SIB1S_AND_CELL_SELECTLoop::Test()
{

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
 
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
  
  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SEARCH_STOP_CNF);

  
  lte_rrc_test_integration_common_send_umid (LTE_RRC_STOPPED_INDI, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

    TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortWT_SIB1S_AND_CELL_SELECTLoop::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchStoppedIndiWT_MODE_CHANGE_CNF);

void LteRrcPlmnSearchLimitedToAutoSearchStoppedIndiWT_MODE_CHANGE_CNF::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}


void LteRrcPlmnSearchLimitedToAutoSearchStoppedIndiWT_MODE_CHANGE_CNF::Test()
{

  TF_MSG("Start of test");
  uint16 i;

  for (i=0; i< 10; i++) {
	  TF_MSG("Checking for INITIAL state");
	  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

	  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

	  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

	  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

	  

	  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

	  lte_rrc_utf_wait_for_done();

	  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
	  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
				LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);


	  lte_rrc_test_integration_common_send_umid (LTE_RRC_STOPPED_INDI, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
	  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

	  lte_rrc_utf_wait_for_done();

	  TF_MSG("Checking for INITIAL state");
	  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
				LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  }

  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchStoppedIndiWT_MODE_CHANGE_CNF::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}



TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchStoppedIndiWT_SIB1S_AND_CELL_SELECT);

void LteRrcPlmnSearchLimitedToAutoSearchStoppedIndiWT_SIB1S_AND_CELL_SELECT::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchStoppedIndiWT_SIB1S_AND_CELL_SELECT::Test()
{

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_STOPPED_INDI, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchStoppedIndiWT_SIB1S_AND_CELL_SELECT::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}



TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchSystemUpdateWT_MODE_CHANGE_CNF);

void LteRrcPlmnSearchLimitedToAutoSearchSystemUpdateWT_MODE_CHANGE_CNF::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}


void LteRrcPlmnSearchLimitedToAutoSearchSystemUpdateWT_MODE_CHANGE_CNF::Test()
{

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);


  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);


  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchSystemUpdateWT_MODE_CHANGE_CNF::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchAbortModeChangeLoop);

void LteRrcPlmnSearchLimitedToAutoSearchAbortModeChangeLoop::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}


void LteRrcPlmnSearchLimitedToAutoSearchAbortModeChangeLoop::Test()
{

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);


  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
 

  TF_MSG("after SENDING bplmn stop cnf");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf_4, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);


  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  TF_MSG("START OF SECOND ITERATION");
  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  TF_MSG("BEFORE SENDING 2ND PLMN SEARCH ABORT REQ");

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);



  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortModeChangeLoop::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}




TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTestNeg);

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTestNeg::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTestNeg::Test()
{

	lte_cphy_msg_bplmn_cell_cnf_s cell_cnf;
  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
 

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

 
  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, TRUE, NULL);

  TF_MSG("CHECKING FOR BPLMN_STOP_REQ");
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  TF_MSG("SENDING PLMN_SEARCH_REQ");
  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  TF_MSG("CHECKING FOR PLMN_SEARCH_CNF");
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  TF_MSG("SENDING BPLMN_STOP_CNF TO RRC");
  lte_rrc_test_integration_common_send_umid (LTE_CPHY_BPLMN_STOP_CNF, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__INITIAL);


  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueTestNeg::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}





TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchStoppedIndiWT_SEARCH_STOP_CNF);

void LteRrcPlmnSearchLimitedToAutoSearchStoppedIndiWT_SEARCH_STOP_CNF::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchStoppedIndiWT_SEARCH_STOP_CNF::Test()
{

	lte_cphy_msg_bplmn_cell_cnf_s cell_cnf;
  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
 

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

 
  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, TRUE, NULL);

  TF_MSG("CHECKING FOR BPLMN_STOP_REQ");
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  TF_MSG("SENDING PLMN_SEARCH_REQ");
  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  TF_MSG("CHECKING FOR PLMN_SEARCH_CNF");
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_STOPPED_INDI, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__INITIAL);


  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchStoppedIndiWT_SEARCH_STOP_CNF::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchAbortReqWT_SEARCH_STOP_CNF);

void LteRrcPlmnSearchLimitedToAutoSearchAbortReqWT_SEARCH_STOP_CNF::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortReqWT_SEARCH_STOP_CNF::Test()
{

	lte_cphy_msg_bplmn_cell_cnf_s cell_cnf;
  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
 

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, TRUE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  TF_MSG("SENDING PLMN_ABORT_REQ");
  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  TF_MSG("SENDING PLMN_STOP_CNF TO RRC");
  lte_rrc_test_integration_common_send_umid (LTE_CPHY_BPLMN_STOP_CNF, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);



  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortReqWT_SEARCH_STOP_CNF::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}





TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchAbortReqSearchReqWT_SEARCH_STOP_CNF);

void LteRrcPlmnSearchLimitedToAutoSearchAbortReqSearchReqWT_SEARCH_STOP_CNF::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortReqSearchReqWT_SEARCH_STOP_CNF::Test()
{

	lte_cphy_msg_bplmn_cell_cnf_s cell_cnf;
  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
 

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, TRUE, NULL);

  TF_MSG("VERIFY STOP REQ. DO NOT SEND STOP CNF YET TO REMAIN IN STATE WT_SEARCH_STOP_CNF");
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  TF_MSG("SEND ABORT_REQ FROM NAS TO RRC");
  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  TF_MSG("SENDING PLMN_SEARCH_REQ");
  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  TF_MSG("ML1 SENDING BPLMN_STOP_CNF FOR PREVIOUSLY ISSUES BPLMN STOP REQ");
  lte_rrc_test_integration_common_send_umid (LTE_CPHY_BPLMN_STOP_CNF, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

/*
  msgr_init_hdr(&cell_cnf.msgr_hdr, MSGR_LTE_CPHY, LTE_CPHY_BPLMN_CELL_CNF);
  cell_cnf.earfcn = cell[LTE_RRC_TEST_CELL_3].earfcn; cell_cnf.freq = cell[LTE_RRC_TEST_CELL_3].earfcn;
  cell_cnf.cell_id = cell[LTE_RRC_TEST_CELL_3].phys_cell_id;
  cell_cnf.bw = LTE_BW_NRB_100;
  cell_cnf.rsrp = -110; //LTE_RRC_CSP_HIGH_CELL_QUALITY_THRESHOLD;
  cell_cnf.srxlev_calculated = TRUE;
  cell_cnf.srxlev = 1;  cell_cnf.squal = 1;
  lte_rrc_utf_send_msg((byte*)&cell_cnf, sizeof(cell_cnf));
*/


  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortReqSearchReqWT_SEARCH_STOP_CNF::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}







TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchAbortReqSearchReqWT_SIB1S_AND_CELL_SELECT);

void LteRrcPlmnSearchLimitedToAutoSearchAbortReqSearchReqWT_SIB1S_AND_CELL_SELECT::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortReqSearchReqWT_SIB1S_AND_CELL_SELECT::Test()
{

	lte_cphy_msg_bplmn_cell_cnf_s cell_cnf;
  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
 

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, FALSE, NULL);


  TF_MSG("SEND ABORT_REQ FROM NAS TO RRC");
  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  TF_MSG("ML1 SENDING BPLMN_STOP_CNF FOR PREVIOUSLY ISSUES BPLMN STOP REQ");
  lte_rrc_test_integration_common_send_umid (LTE_CPHY_BPLMN_STOP_CNF, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
  
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL); 
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, FALSE, NULL);

  msgr_init_hdr(&cell_cnf.msgr_hdr, MSGR_LTE_CPHY, LTE_CPHY_BPLMN_CELL_CNF); 
  cell_cnf.earfcn = cell[LTE_RRC_TEST_CELL_3].earfcn; cell_cnf.freq = cell[LTE_RRC_TEST_CELL_3].earfcn; 
  cell_cnf.cell_id = cell[LTE_RRC_TEST_CELL_3].phys_cell_id; 
  cell_cnf.bw = LTE_BW_NRB_100; 
  cell_cnf.rsrp = -110; //LTE_RRC_CSP_HIGH_CELL_QUALITY_THRESHOLD;
  cell_cnf.srxlev_calculated = TRUE; 
  cell_cnf.srxlev = 1;  cell_cnf.squal = 1; 
  lte_rrc_utf_send_msg((byte *)&cell_cnf, sizeof(cell_cnf)); 

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);


  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortReqSearchReqWT_SIB1S_AND_CELL_SELECT::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchAbortReqCheckSerchCnf);

void LteRrcPlmnSearchLimitedToAutoSearchAbortReqCheckSerchCnf::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortReqCheckSerchCnf::Test()
{

	lte_cphy_msg_bplmn_cell_cnf_s cell_cnf;
  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
 

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

 // lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, FALSE, NULL);

  TF_MSG("VERIFY STOP REQ. DO NOT SEND STOP CNF YET TO REMAIN IN STATE WT_SEARCH_STOP_CNF");
 // 

  TF_MSG("SEND ABORT_REQ FROM NAS TO RRC");
  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  TF_MSG("SENDING PLMN_SEARCH_REQ");
  //lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

    msgr_init_hdr(&cell_cnf.msgr_hdr, MSGR_LTE_CPHY, LTE_CPHY_BPLMN_CELL_CNF);
  cell_cnf.earfcn = cell[LTE_RRC_TEST_CELL_3].earfcn; cell_cnf.freq = cell[LTE_RRC_TEST_CELL_3].earfcn;
  cell_cnf.cell_id = cell[LTE_RRC_TEST_CELL_3].phys_cell_id;
  cell_cnf.bw = LTE_BW_NRB_100;
  cell_cnf.rsrp = -110; //LTE_RRC_CSP_HIGH_CELL_QUALITY_THRESHOLD;
  cell_cnf.srxlev_calculated = FALSE;
  cell_cnf.srxlev = 1;  cell_cnf.squal = 1;
  lte_rrc_utf_send_msg((byte*)&cell_cnf, sizeof(cell_cnf));


  msgr_init_hdr(&cell_cnf.msgr_hdr, MSGR_LTE_CPHY, LTE_CPHY_BPLMN_CELL_CNF);
cell_cnf.earfcn = cell[LTE_RRC_TEST_CELL_3].earfcn; cell_cnf.freq = cell[LTE_RRC_TEST_CELL_3].earfcn;
cell_cnf.cell_id = cell[LTE_RRC_TEST_CELL_3].phys_cell_id;
cell_cnf.bw = LTE_BW_NRB_100;
cell_cnf.rsrp = -120; //LTE_RRC_CSP_HIGH_CELL_QUALITY_THRESHOLD;
cell_cnf.srxlev_calculated = TRUE;
cell_cnf.srxlev = 1;  cell_cnf.squal = 1;
lte_rrc_utf_send_msg((byte*)&cell_cnf, sizeof(cell_cnf));

 lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__INITIAL);


  lte_rrc_utf_check_no_more_msgs();
  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortReqCheckSerchCnf::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}



TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueCompleteIndiAbort);

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueCompleteIndiAbort::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueCompleteIndiAbort::Test()
{

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  //lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


 
  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

 
  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

    lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_CPHY_BPLMN_COMPLETE_IND, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueCompleteIndiAbort::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}




TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueCompleteIndiAbort2);

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueCompleteIndiAbort2::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueCompleteIndiAbort2::Test()
{

	lte_cphy_msg_bplmn_cell_cnf_s cell_cnf;
	TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  //lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


 
  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

 
  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, FALSE, NULL);

    lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

  msgr_init_hdr(&cell_cnf.msgr_hdr, MSGR_LTE_CPHY, LTE_CPHY_BPLMN_CELL_CNF);
cell_cnf.earfcn = cell[LTE_RRC_TEST_CELL_3].earfcn; cell_cnf.freq = cell[LTE_RRC_TEST_CELL_3].earfcn;
cell_cnf.cell_id = cell[LTE_RRC_TEST_CELL_3].phys_cell_id;
cell_cnf.bw = LTE_BW_NRB_100;
cell_cnf.rsrp = -110; //LTE_RRC_CSP_HIGH_CELL_QUALITY_THRESHOLD;
cell_cnf.srxlev_calculated = TRUE;
cell_cnf.srxlev = 1;  cell_cnf.squal = 1;
lte_rrc_utf_send_msg((byte*)&cell_cnf, sizeof(cell_cnf));


  lte_rrc_test_integration_common_send_umid (LTE_CPHY_BPLMN_COMPLETE_IND, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();
  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__INITIAL);


  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueCompleteIndiAbort2::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}



TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchManualSearch);

void LteRrcPlmnSearchLimitedToAutoSearchManualSearch::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchManualSearch::Test()
{
  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_utf_check_no_more_msgs();

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true2, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

  lte_rrc_test_common_set_sib1_indi_tac(1);
  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x999999);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

    lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);


  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__INITIAL);

   lte_rrc_utf_check_no_more_msgs();
   lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true3, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

   lte_rrc_utf_wait_for_done();

   TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
   TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			 LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

   TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

   lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

   lte_rrc_utf_wait_for_done();

   TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
   TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			 LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

   lte_rrc_test_common_set_sib1_indi_tac(1);
   lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x999999);
   lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

   lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

   lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
   lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

   lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

   lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

   lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, TRUE, NULL);


   lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

   lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

	 lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);


   lte_rrc_utf_wait_for_done();

   TF_MSG("Checking for INITIAL state");
   TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			 LTE_RRC_PLMN_SEARCH_SM__INITIAL);

	lte_rrc_utf_check_no_more_msgs();


  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchManualSearch::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}



TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchManualSearch2);

void LteRrcPlmnSearchLimitedToAutoSearchManualSearch2::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchManualSearch2::Test()
{
  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_utf_check_no_more_msgs();


  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true2, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

  lte_rrc_test_common_set_sib1_indi_tac(1);
  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x999999);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_CPHY_BPLMN_COMPLETE_IND, NULL, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf_6, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

    lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__INITIAL);

   lte_rrc_utf_check_no_more_msgs();
}
void LteRrcPlmnSearchLimitedToAutoSearchManualSearch2::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}




TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToManualAbort);

void LteRrcPlmnSearchLimitedToManualAbort::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToManualAbort::Test()
{
lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true2, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf_5, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true3, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

/*
  //----------------------------------------------------------
  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

  lte_rrc_test_common_set_sib1_indi_tac(1);
  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x999999);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

    lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);


  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__INITIAL);
*/
//   lte_rrc_utf_check_no_more_msgs();

  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToManualAbort::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueCompleteIndi);

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueCompleteIndi::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueCompleteIndi::Test()
{

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


 
  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_tac(1);
  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_CPHY_BPLMN_COMPLETE_IND, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  //Add a validation check below once Girish/Raghu confirm the expected behavior in this scenario
  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf_bplmn_complete_ind, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_utf_wait_for_done();


  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcPlmnSearchLimitedToAutoSearchForbiddenTrueCompleteIndi::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToManualAbort2);

void LteRrcPlmnSearchLimitedToManualAbort2::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToManualAbort2::Test()
{
lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true2, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);


   lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
  lte_rrc_test_integration_verify_req_send_cnf (&validate_plmn_srch_cnf_5, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNFI, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);
  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
			LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true3, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_utf_wait_for_done();

//  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
//  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
//			LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);


}

void LteRrcPlmnSearchLimitedToManualAbort2::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}





TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchAbortManualSearchWT_SIB1S_AND_CELL_SELECT);

void LteRrcPlmnSearchLimitedToAutoSearchAbortManualSearchWT_SIB1S_AND_CELL_SELECT::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortManualSearchWT_SIB1S_AND_CELL_SELECT::Test()
{

	lte_cphy_msg_bplmn_cell_cnf_s cell_cnf;
  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
 

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, FALSE, NULL);


  TF_MSG("SEND ABORT_REQ FROM NAS TO RRC");
  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true4, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);



  lte_rrc_utf_wait_for_done();


  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_4, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_4, FALSE, NULL);

msgr_init_hdr(&cell_cnf.msgr_hdr, MSGR_LTE_CPHY, LTE_CPHY_BPLMN_CELL_CNF); 
cell_cnf.earfcn = cell[LTE_RRC_TEST_CELL_3].earfcn; cell_cnf.freq = cell[LTE_RRC_TEST_CELL_3].earfcn; 
cell_cnf.cell_id = cell[LTE_RRC_TEST_CELL_3].phys_cell_id; 
cell_cnf.bw = LTE_BW_NRB_100; 
cell_cnf.rsrp = -110; //LTE_RRC_CSP_HIGH_CELL_QUALITY_THRESHOLD;
cell_cnf.srxlev_calculated = TRUE; 
cell_cnf.srxlev = 1;  cell_cnf.squal = 1; 
lte_rrc_utf_send_msg((byte *)&cell_cnf, sizeof(cell_cnf)); 

	  lte_rrc_test_integration_common_send_umid (LTE_CPHY_BPLMN_COMPLETE_IND, NULL, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
	  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);


  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortManualSearchWT_SIB1S_AND_CELL_SELECT::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}




TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchAbortManualSearchWT_SIB1S_AND_CELL_SELECT2);

void LteRrcPlmnSearchLimitedToAutoSearchAbortManualSearchWT_SIB1S_AND_CELL_SELECT2::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortManualSearchWT_SIB1S_AND_CELL_SELECT2::Test()
{

	lte_cphy_msg_bplmn_cell_cnf_s cell_cnf;
  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
 

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, FALSE, NULL);


  TF_MSG("SEND ABORT_REQ FROM NAS TO RRC");
  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_ABORT_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  

  lte_rrc_utf_wait_for_done();


  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_4, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_4, FALSE, NULL);

msgr_init_hdr(&cell_cnf.msgr_hdr, MSGR_LTE_CPHY, LTE_CPHY_BPLMN_CELL_CNF); 
cell_cnf.earfcn = cell[LTE_RRC_TEST_CELL_3].earfcn; cell_cnf.freq = cell[LTE_RRC_TEST_CELL_3].earfcn; 
cell_cnf.cell_id = cell[LTE_RRC_TEST_CELL_3].phys_cell_id; 
cell_cnf.bw = LTE_BW_NRB_100; 
cell_cnf.rsrp = -110; //LTE_RRC_CSP_HIGH_CELL_QUALITY_THRESHOLD;
cell_cnf.srxlev_calculated = TRUE; 
cell_cnf.srxlev = 1;  cell_cnf.squal = 1; 
lte_rrc_utf_send_msg((byte *)&cell_cnf, sizeof(cell_cnf)); 
//lte_rrc_test_integration_common_send_umid (LTE_CPHY_BPLMN_COMPLETE_IND, NULL, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
	  
lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true4, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);
	  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);


  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortManualSearchWT_SIB1S_AND_CELL_SELECT2::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}




TF_DEFINE_TEST_CASE(COMPONENT, LteRrcPlmnSearchLimitedToAutoSearchAbortManualSearchWT_SIB1S_AND_CELL_SELECT3);

void LteRrcPlmnSearchLimitedToAutoSearchAbortManualSearchWT_SIB1S_AND_CELL_SELECT3::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_PLMN_SEARCH_SM,ext_umid_list,4);
  lte_rrc_plmn_search_test_stub_init();
  lte_rrc_test_integration_common_init_all( UNIT );
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortManualSearchWT_SIB1S_AND_CELL_SELECT3::Test()
{

	lte_cphy_msg_bplmn_cell_cnf_s cell_cnf;
  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == LTE_RRC_PLMN_SEARCH_SM__INITIAL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  lte_rrc_plmn_search_test_stub_controller_set_access_class(8);

  lte_rrc_utf_set_sync_cfg_reqi_params(LTE_RRC_PLMN_SEARCH_TEST_CFG_TRANS_ID);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true1, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
 

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_MODE_CHANGE_CNF);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_PLMN_SEARCH_REQ, &populate_plmn_search_req_true4, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_MODE_CHANGE_REQI, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_plmn_search_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__IDLE_NOT_CAMPED);

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_start_req, LTE_CPHY_BPLMN_START_REQ, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_wait_for_done();

  lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_RRC_PLMN_SEARCH_CNF, LTE_RRC_TEST_MAX_CELL, FALSE, NULL);

  TF_MSG("Checking for WT_SIB1S_AND_CELL_SELECT state");
  TF_ASSERT(stm_get_state(LTE_RRC_PLMN_SEARCH_SM) == 
            LTE_RRC_PLMN_SEARCH_SM__WT_SIB1S_AND_CELL_SELECT);


  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x223456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_0, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x123456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_1, LTE_RRC_TEST_SIB_UPDATE_0, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_1, TRUE, NULL);

  lte_rrc_test_common_set_sib1_indi_plmn_mcc_mnc(0x323456);
  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, NULL, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_SYSTEM_UPDATE_REQ, NULL, LTE_RRC_TEST_MAX_CELL, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);

  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_2, TRUE, NULL);

  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_3, FALSE, NULL);


 

  lte_rrc_utf_wait_for_done();


  lte_rrc_test_integration_common_send_umid (LTE_RRC_UNSOLICITED_SIB_INDI, &populate_sib_indi, LTE_RRC_TEST_CELL_4, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);


  lte_rrc_test_integration_verify_req_send_cnf (&validate_bplmn_cell_req, LTE_CPHY_BPLMN_CELL_REQ, LTE_RRC_TEST_CELL_4, FALSE, NULL);

msgr_init_hdr(&cell_cnf.msgr_hdr, MSGR_LTE_CPHY, LTE_CPHY_BPLMN_CELL_CNF); 
cell_cnf.earfcn = cell[LTE_RRC_TEST_CELL_3].earfcn; cell_cnf.freq = cell[LTE_RRC_TEST_CELL_3].earfcn; 
cell_cnf.cell_id = cell[LTE_RRC_TEST_CELL_3].phys_cell_id; 
cell_cnf.bw = LTE_BW_NRB_100; 
cell_cnf.rsrp = 110; //LTE_RRC_CSP_HIGH_CELL_QUALITY_THRESHOLD;
cell_cnf.srxlev_calculated = TRUE; 
cell_cnf.srxlev = 1;  cell_cnf.squal = 1; 
lte_rrc_utf_send_msg((byte *)&cell_cnf, sizeof(cell_cnf)); 
lte_rrc_test_integration_common_send_umid (LTE_CPHY_BPLMN_COMPLETE_IND, NULL, LTE_RRC_TEST_CELL_3, LTE_RRC_TEST_MAX_SIB_UPDATE, 0, FALSE);
//	lte_rrc_test_integration_verify_req_send_cnf (NULL, LTE_CPHY_BPLMN_STOP_REQ, LTE_RRC_TEST_MAX_CELL, TRUE, NULL);	  
	  lte_rrc_utf_wait_for_done();


  TF_MSG("End of test");
}

void LteRrcPlmnSearchLimitedToAutoSearchAbortManualSearchWT_SIB1S_AND_CELL_SELECT3::Teardown()
{
	lte_rrc_test_integration_common_deinit_all();
	lte_rrc_utf_teardown();
}

