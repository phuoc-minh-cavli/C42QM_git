/*!
  @file lte_rrc_csp_basic_deactivate_test.cpp

  @brief
  Unit test code for processing Deactivate request

*/

/*===========================================================================

  Copyright (c) 2008 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

$Header: 

when       who     what, where, why
--------   ---     ----------------------------------------------------------
11/18/09   fhu     replaced lte_cphy_sap.h by lte_cphy_msg.h
10/10/08   sureshs Initial Revision
           
===========================================================================*/

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/

extern "C"
{
#include <lte_rrc_int_msg.h>
#include <lte_rrc_ext_msg.h>
#include <lte_cphy_msg.h>
#include <__lte_rrc_csp.h>
#include <lte_rrc_utils.h>
#include <__lte_rrc_controller.h>
}

#include <TestFramework.h>
#include <lte_rrc_utf.h>
#include "lte_rrc_csp_test_common.h"

//external messages generated by code under test
static uint32 ext_umid_list[] = 
{ 
  LTE_RRC_DEACTIVATE_CNF
  //LTE_RRC_BARRING_UPDATE_IND
};

//message structures
static lte_rrc_deactivate_req_s deact_req;
static lte_rrc_mode_change_cnfi_s mode_change_cnf;
static lte_rrc_stopped_indi_s stopped_ind;

/*===========================================================================

                                UNIT TEST

===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcCspBasicDeactivateTest);

void LteRrcCspBasicDeactivateTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CSP_SM,ext_umid_list,1);
}

void LteRrcCspBasicDeactivateTest::Test()
{
  byte *buf_ptr;
  uint32 buf_len;
  lte_rrc_mode_change_reqi_s *mode_change_req_ptr;
  lte_rrc_deactivate_cnf_s *deact_cnf_ptr; 

  TF_MSG("Start of test");

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_CSP_SM) == LTE_RRC_CSP_SM__INITIAL);

  lte_rrc_csp_test_stub_controller_set_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

  TF_MSG("Sending Deactivate Req");
  msgr_init_hdr(&deact_req.msg_hdr,MSGR_NAS_EMM,LTE_RRC_DEACTIVATE_REQ);
  deact_req.deactivate_reason = SYS_STOP_MODE_REASON_MODE_CHANGE;
  lte_rrc_utf_send_msg((byte*)&deact_req, sizeof(deact_req));

  TF_MSG("Checking for LTE_RRC_MODE_CHANGE_REQI");
  lte_rrc_utf_get_next_int_msg(&buf_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_mode_change_reqi_s) == buf_len);
  mode_change_req_ptr = (lte_rrc_mode_change_reqi_s *)(void*) buf_ptr;
  TF_ASSERT(LTE_RRC_MODE_CHANGE_REQI == mode_change_req_ptr->msg_hdr.id);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for WT_MODE_CHANGE_CNF state");
  TF_ASSERT(stm_get_state(LTE_RRC_CSP_SM) == 
            LTE_RRC_CSP_SM__WT_MODE_CHANGE_CNF);

  TF_MSG("Sending LTE Stopped indication");
  lte_rrc_init_default_hdr(&stopped_ind.msg_hdr,LTE_RRC_STOPPED_INDI);
  lte_rrc_utf_send_msg((byte*)&stopped_ind, sizeof(stopped_ind));

  TF_MSG("Sending Mode Change Cnf");
  lte_rrc_init_default_hdr(&mode_change_cnf.msg_hdr,LTE_RRC_MODE_CHANGE_CNFI);
  mode_change_cnf.mode = LTE_RRC_MODE_CHANGE_DEACTIVATE;  mode_change_cnf.status = TRUE;
  lte_rrc_utf_send_msg((byte*)&mode_change_cnf, sizeof(mode_change_cnf));

 // lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);
  TF_MSG("Checking for LTE_RRC_DEACTIVATE_CNF");
  lte_rrc_utf_get_next_ext_msg(&buf_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_deactivate_cnf_s) == buf_len);
  deact_cnf_ptr = (lte_rrc_deactivate_cnf_s *)(void*) buf_ptr;
  TF_ASSERT(LTE_RRC_DEACTIVATE_CNF == deact_cnf_ptr->msg_hdr.id);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INITIAL state");
  TF_ASSERT(stm_get_state(LTE_RRC_CSP_SM) == LTE_RRC_CSP_SM__INITIAL);

  TF_MSG("End of test");
}

void LteRrcCspBasicDeactivateTest::Teardown()
{
  lte_rrc_utf_teardown();
}

