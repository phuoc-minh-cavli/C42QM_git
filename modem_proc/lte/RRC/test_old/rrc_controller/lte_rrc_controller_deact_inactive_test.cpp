/*!
  @file lte_rrc_controller_deact_inactive_test.cpp

  @brief
  Unit test code for basic RRC controller state transitions. Take it from
  Inactive -> Inactive by deactivating it.

*/

/*===========================================================================

  Copyright (c) 2008 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

$Header: 

when       who     what, where, why
--------   ---     ----------------------------------------------------------
11/18/09   fhu     replaced lte_cphy_sap.h by lte_cphy_msg.h
09/12/08   sureshs Streamlined header file includes
09/04/08   sureshs Initial Revision
           
===========================================================================*/

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/
extern "C"
{
#include <lte_rrc_int_msg.h>
#include <lte_rrc_controller.h>
#include <lte_rrc_utils.h>
#include <lte_cphy_msg.h>
}

#include <TestFramework.h>
#include <lte_rrc_utf.h>

//external messages generated by code under test
static uint32 ext_umid_list[] = 
{ 
  LTE_CPHY_STOP_REQ
};

//message structures
static lte_rrc_mode_change_reqi_s mc_req;

/*===========================================================================

                                UNIT TEST

===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcControllerDeactInactiveTest);

void LteRrcControllerDeactInactiveTest::Setup()
{
  lte_rrc_utf_setup(LTE_RRC_CONTROLLER_SM, ext_umid_list, 1);
}

void LteRrcControllerDeactInactiveTest::Test()
{
  byte *buf_ptr;
  uint32 buf_len;
  lte_rrc_mode_change_cnfi_s *mc_cnf_ptr;

  TF_MSG("Start of test");

  TF_MSG("Checking for INACTIVE state");
  TF_ASSERT(lte_rrc_controller_get_state() == LTE_RRC_CONTROLLER_SM__INACTIVE);

  TF_MSG("Sending Mode Change Req to Dectivate");
  lte_rrc_init_default_hdr(&mc_req.msg_hdr,LTE_RRC_MODE_CHANGE_REQI);
  mc_req.dest_scenario = LTE_RRC_ACTIVATED_DUE_TO_NAS_REQUEST; /* don't care */
  mc_req.mode = LTE_RRC_MODE_CHANGE_DEACTIVATE;
  lte_rrc_utf_send_msg((byte*)&mc_req, sizeof(mc_req));

  TF_MSG("Checking for LTE_RRC_MODE_CHANGE_CNFI");
  lte_rrc_utf_get_next_int_msg(&buf_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_mode_change_cnfi_s) == buf_len);
  mc_cnf_ptr = (lte_rrc_mode_change_cnfi_s *)(void*) buf_ptr;
  TF_ASSERT(LTE_RRC_MODE_CHANGE_CNFI == mc_cnf_ptr->msg_hdr.id);
  TF_ASSERT(TRUE == mc_cnf_ptr->status);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Checking for INACTIVE state");
  TF_ASSERT(lte_rrc_controller_get_state() == LTE_RRC_CONTROLLER_SM__INACTIVE);

  TF_MSG("End of test");
}

void LteRrcControllerDeactInactiveTest::Teardown()
{
  lte_rrc_utf_teardown();
}

