/*!
  @file lte_rrc_test_embms.cpp

  @brief
  Integration test code for eMBMS.

*/

/*===========================================================================

  Copyright (c) 2009 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

$Header: //source/qcom/qct/modem/lte/RRC/main/latest/test/integration/handover/lte_rrc_test_embms.cpp

when       who     what, where, why
--------   ---     ----------------------------------------------------------
10/13/11   mm      Initial Revision

===========================================================================*/

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/

#ifdef FEATURE_LTE_EMBMS
extern "C"
{
#include "lte_rrc_ext_msg.h"
#include "lte_rrc_int_msg.h"
#include "lte_cphy_msg.h"
#include "lte_mac_msg.h"
#include "lte_mac_rrc.h"
#include "lte_mac_ind.h"
#include "lte_rlc_msg.h"
#include "lte_rlc_rrc.h"
#include "lte_pdcp_msg.h"
#include "lte_rrc_utils.h"
#include "lte_rrc_osys_asn1util.h"
#include "dsm_item.h"
#include "dsm_init.h"
#include "lte_rrc_csp.h"
#include "lte_rrc_utils.h"
#include "lte_rrc_cepi.h"
#include "lte_rrc_measi.h"
#include "lte_rrc_mhi.h"
#include "lte.h"
#ifdef FEATURE_LTE_TO_WCDMA
#include "wcdma_rrc_msg.h"
#endif
#include "lte_rrc_esmgri.h"
#include "lte_rrc_irat_to_1x_mgri.h"
}

#include "TestFramework.h"
#include "lte_rrc_utf.h"
#include "lte_rrc_test_integration.h"
#include "lte_rrc_test_cell_select_basic.h"
#include "lte_rrc_test_conn_setup_basic.h"
#include "lte_rrc_test_integration_ota_msg.h"
#include "lte_rrc_test_sib_cell_db.h"
#include "lte_rrc_test_handover.h"
#include "lte_rrc_test_reestablishment.h"
#include "lte_rrc_test_sec_config_basic.h"
#include "lte_rrc_sec_test_common.h"
#include "lte_rrc_test_resel_from_lte_common.h"
#include "lte_rrc_test_reselection_success1.h"
#include "lte_rrc_llc_test_common.h"
#include "lte_rrc_test_mobility_from_lte_common.h"
#include "lte_rrc_test_from_lte_common.h"
#include "lte_rrc_test_redir_from_lte_common.h"
#include "lte_rrc_test_to_lte_common.h"
#include <tf_stub.h>
#include "lte_rrc_test_handover_to_lte_common.h"
#include "lte_rrc_test_mobility_from_lte_common.h"
#include "lte_rrc_test_to_lte_common.h"


extern "C"
{
  TF_PROTO_STUB(uint8, lte_rrc_cap_get_fgi_bit, uint8);
}

DECLARE_LTE_RRC_TEST_SIB2_13_MSG;

/*===========================================================================

                   INTERNAL DEFINITIONS AND TYPES

===========================================================================*/

#define LTE_RRC_TEST_DEFAULT_OOS_TMR 5120

/*! @brief Typedef of variables internal to module lte_rrc_test_handover.cpp
*/
typedef struct
{
  int   internal_var;  /*!< My internal variable */
  void *internal_ptr;  /*!< My internal pointer */

} lte_rrc_test_embms_s;


extern "C"
{
  TF_PROTO_STUB(uint8, lte_rrc_cap_get_fgi_bit, uint8);
  TF_PROTO_STUB(boolean, lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc,
    lte_cphy_tdd_cfg_param_s*, lte_cphy_common_cfg_req_param_s*);
  extern lte_rrc_esmgr_s lte_rrc_esmgr_data;
}

extern void LteRrcTestReselFromLteToWReselectionFailure__Test();

/*===========================================================================

                         INTERNAL VARIABLES

===========================================================================*/

/*! @brief Variables internal to module lte_rrc_test_embms.cpp
*/
STATIC lte_rrc_test_embms_s lte_rrc_test_embms;

uint32 lte_rrc_test_embms_umid_list[] = LTE_RRC_TEST_INTEGRATION_UMID_LIST;

boolean test_sib13_not_read = FALSE;
boolean test_sib2_with_no_mbsfn = FALSE;
boolean test_mcch_tmr_expiry = FALSE;
boolean test_srvc_ind = FALSE;
boolean test_cfg_reqi_for_sib_upd = FALSE;
boolean lte_rrc_test_embms_tdd_collision_detected = FALSE;

extern boolean re_est_test_oos_warn_ind;
extern boolean cell_select_test_sib2_with_no_mbsfn;


/*===========================================================================
                      eMBMS - Paging message
===========================================================================*/
/*
TypicalSiUpdate1:value PCCH-Message ::=
{
  message c1 : paging :
      {
        systemInfoModification true
      }
}
*/
static uint8 lte_rrc_test_default_siupdate_msg1[] =
{
  0x20,
};


/*===========================================================================
                      eMBMS - SIB 13 message
===========================================================================*/
/*
SIB13:value BCCH-DL-SCH-Message ::=
{
  message c1 : systemInformation :
      {
        criticalExtensions systemInformation-r8 :
          {
            sib-TypeAndInfo
            {
              sib13-v920 :
                {
                  mbsfn-AreaInfoList-r9
                  {
                    {
                      mbsfn-AreaId-r9 100,
                      non-MBSFNregionLength s2,
                      notificationIndicator-r9 1,
                      mcch-Config-r9
                      {
                        mcch-RepetitionPeriod-r9 rf128,
                        mcch-Offset-r9 4,
                        mcch-ModificationPeriod-r9 rf1024,
                        sf-AllocInfo-r9 '111111'B,
                        signallingMCS-r9 n7
                      }
                    },
                    {
                      mbsfn-AreaId-r9 101,
                      non-MBSFNregionLength s1,
                      notificationIndicator-r9 7,
                      mcch-Config-r9
                      {
                        mcch-RepetitionPeriod-r9 rf256,
                        mcch-Offset-r9 7,
                        mcch-ModificationPeriod-r9 rf512,
                        sf-AllocInfo-r9 '111100'B,
                        signallingMCS-r9 n19
                      }
                    }
                  },
                  notificationConfig-r9
                  {
                    notificationRepetitionCoeff-r9 n4,
                    notificationOffset-r9 5,
                    notificationSF-Index-r9 5
                  }
                }
            }
          }
      }
}
*/

static uint8 lte_rrc_test_embms_sib13_msg1[] =
{
  0x00, 0x40, 0x84, 0x84, 0xC9, 0x32, 0x7F, 0x4C, 0xAF, 0xBB, 0xCE, 0xB0, 0x00
};

/*===========================================================================
                      eMBMS - MCCH message
===========================================================================*/
/*
value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
  {
    commonSF-Alloc-r9
    {

      {
        radioframeAllocationPeriod n1,
        radioframeAllocationOffset 0,
        subframeAllocation oneFrame : '111111'B
      }
    },
    commonSF-AllocPeriod-r9 rf32,
    pmch-InfoList-r9
    {

      {
        pmch-Config-r9
        {
          sf-AllocEnd-r9 191,
          dataMCS-r9 7,
          mch-SchedulingPeriod-r9 rf32
        },
        mbms-SessionInfoList-r9
        {

          {
            tmgi-r9
            {
              plmn-Id-r9 explicitValue-r9 :
              {
                mcc
                {
                  0,
                  0,
                  1
                },
                mnc
                {
                  0,
                  1
                }
              },
              serviceId-r9 '000001'H
            },
            sessionId-r9 '01'H,
            logicalChannelIdentity-r9 2
          },

          {
            tmgi-r9
            {
              plmn-Id-r9 explicitValue-r9 :
              {
                mcc
                {
                  0,
                  0,
                  1
                },
                mnc
                {
                  0,
                  1
                }
              },
              serviceId-r9 '000000'H
            },
            sessionId-r9 '00'H,
            logicalChannelIdentity-r9 1
          }
        }
      }
    }
  }
}
*/

static uint8 lte_rrc_test_embms_mcch_msg1[] =
{
  0x00, 0x0F, 0xD8, 0x82, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x10,
  0x11, 0x38, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02
};

/*
Invalid_mcch_msg:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '000000'B
          }
        },
        commonSF-AllocPeriod-r9 rf32,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000001'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 2
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}
*/

static uint8 lte_rrc_test_embms_mcch_msg_invalid[] =
{
  0x00, 0x00, 0x18, 0x82, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x10,
  0x11, 0x38, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02
};

/*
Invalid_mcch_msg:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation fourFrames : '00000000 00000000 00000000'B
          }
        },
        commonSF-AllocPeriod-r9 rf32,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000001'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 2
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}

*/

static uint8 lte_rrc_test_embms_mcch_msg_invalid1[] =
{
  0x00, 0x10, 0x00, 0x00, 0x06, 0x20, 0xBF, 0x3A, 0x13, 0x80, 0x08, 0x04, 0x00,
  0x00, 0x04, 0x04, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x80
};

/*

MCCH_PDU_SAMPLE:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf32,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 0,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000001'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 2
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          },
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 0,
              mch-SchedulingPeriod-r9 rf8
            },
            mbms-SessionInfoList-r9
            {
            }
          }
        }
      }
}

*/

static uint8 lte_rrc_test_embms_mcch_msg_SFallocEnd_invalid[] =
{
    0x00,0x0F,0xD9,0x02,0xFC,0x08,0x4E,0x00,0x20,0x10,0x00,0x00,0x10,0x11,
    0x38,0x00,0x80,0x40,0x00,0x00,0x00,0x02,0x0B,0xF0,0x00,0x00
};



/*
MCCH_msg:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf32,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000002'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 2
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          },
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 180,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf16
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000001'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}
*/


static uint8 lte_rrc_test_embms_mcch_mod_msg[] =
{
  0x00, 0x0F, 0xD9, 0x02, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x20,
  0x11, 0x38, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02, 0x0B, 0x43, 0x90, 0xB8,
  0x00, 0x80, 0x40, 0x00, 0x00, 0x40, 0x42,
};

/*
value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf64,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000001'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 2
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}
*/
static uint8 lte_rrc_test_embms_mcch_msg1_1[] =
{
  0x00, 0x0F, 0xE0, 0x82, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x10,
  0x11, 0x38, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02
};

/*
mcch:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf64,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000002'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 3
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}
*/
static uint8 lte_rrc_test_embms_mcch_msg2[] =
{
  0x00, 0x0F, 0xE0, 0x82, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x20,
  0x11, 0xB8, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02
};

/*
integration_test_mcch_3:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf64,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000003'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 4
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}
*/
static uint8 lte_rrc_test_embms_mcch_msg3[] =
{
  0x00, 0x0F, 0xE0, 0x82, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x30,
  0x12, 0x38, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02
};

/*
integration_test_mcch_3:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf64,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000004'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 5
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}
*/
static uint8 lte_rrc_test_embms_mcch_msg4[] =
{
  0x00, 0x0F, 0xE0, 0x82, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x40,
  0x12, 0xB8, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02
};

/*
integration_test_mcch_3:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf64,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000005'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 6
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}
*/
static uint8 lte_rrc_test_embms_mcch_msg5[] =
{
  0x00, 0x0F, 0xE0, 0x82, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x50,
  0x13, 0x38, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02
};

/*
integration_test_mcch_3:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf64,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000006'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 7
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}
*/
static uint8 lte_rrc_test_embms_mcch_msg6[] =
{
  0x00, 0x0F, 0xE0, 0x82, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x60,
  0x13, 0xB8, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02
};

/*
integration_test_mcch_3:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf64,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000007'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 8
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}
*/
static uint8 lte_rrc_test_embms_mcch_msg7[] =
{
  0x00, 0x0F, 0xE0, 0x82, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x70,
  0x14, 0x38, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02
};

/*
integration_test_mcch_3:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf64,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000008'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 9
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}
*/
static uint8 lte_rrc_test_embms_mcch_msg8[] =
{
  0x00, 0x0F, 0xE0, 0x82, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x80,
  0x14, 0xB8, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02
};

/*
integration_test_mcch_3:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf64,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 191,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000009'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 10
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}
*/
static uint8 lte_rrc_test_embms_mcch_msg9[] =
{
  0x00, 0x0F, 0xE0, 0x82, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x90,
  0x15, 0x38, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02
};

/*
Reconfig:value DL-DCCH-Message ::=
{
  message c1 : rrcConnectionReconfiguration :
      {
        rrc-TransactionIdentifier 1,
        criticalExtensions c1 : rrcConnectionReconfiguration-r8 :
            {
              measConfig
              {
                measObjectToAddModList
                {
                  {
                    measObjectId 1,
                    measObject measObjectEUTRA :
                      {
                        carrierFreq 1,
                        allowedMeasBandwidth mbw25,
                        presenceAntennaPort1 FALSE,
                        neighCellConfig '00'B
                      }
                  }
                }
              },
              mobilityControlInfo
              {
                targetPhysCellId 498,
                carrierFreq
                {
                  dl-CarrierFreq 1
                },
                carrierBandwidth
                {
                  dl-Bandwidth n25,
                  ul-Bandwidth n6
                },
                t304 ms150,
                newUE-Identity '00000001 00000000'B,
                radioResourceConfigCommon
                {
                  rach-ConfigCommon
                  {
                    preambleInfo
                    {
                      numberOfRA-Preambles n36,
                      preamblesGroupAConfig
                      {
                        sizeOfRA-PreamblesGroupA n24,
                        messageSizeGroupA b56,
                        messagePowerOffsetGroupB minusinfinity
                      }
                    },
                    powerRampingParameters
                    {
                      powerRampingStep dB2,
                      preambleInitialReceivedTargetPower dBm-120
                    },
                    ra-SupervisionInfo
                    {
                      preambleTransMax n5,
                      ra-ResponseWindowSize sf4,
                      mac-ContentionResolutionTimer sf32
                    },
                    maxHARQ-Msg3Tx 3
                  },
                  prach-Config
                  {
                    rootSequenceIndex 5,
                    prach-ConfigInfo
                    {
                      prach-ConfigIndex 1,
                      highSpeedFlag TRUE,
                      zeroCorrelationZoneConfig 1,
                      prach-FreqOffset 0
                    }
                  },
                  pdsch-ConfigCommon
                  {
                    referenceSignalPower 0,
                    p-b 2
                  },
                  pusch-ConfigCommon
                  {
                    pusch-ConfigBasic
                    {
                      n-SB 1,
                      hoppingMode intraAndInterSubFrame,
                      pusch-HoppingOffset 0,
                      enable64QAM FALSE
                    },
                    ul-ReferenceSignalsPUSCH
                    {
                      groupHoppingEnabled TRUE,
                      groupAssignmentPUSCH 2,
                      sequenceHoppingEnabled TRUE,
                      cyclicShift 0
                    }
                  },
                  phich-Config
                  {
                    phich-Duration extended,
                    phich-Resource one
                  },
                  pucch-ConfigCommon
                  {
                    deltaPUCCH-Shift ds3,
                    nRB-CQI 2,
                    nCS-AN 6,
                    n1PUCCH-AN 2
                  },
                  soundingRS-UL-ConfigCommon setup :
                    {
                      srs-BandwidthConfig bw2,
                      srs-SubframeConfig sc2,
                      ackNackSRS-SimultaneousTransmission TRUE
                    },
                  uplinkPowerControlCommon
                  {
                    p0-NominalPUSCH 5,
                    alpha al05,
                    p0-NominalPUCCH -100,
                    deltaFList-PUCCH
                    {
                      deltaF-PUCCH-Format1 deltaF-2,
                      deltaF-PUCCH-Format1b deltaF1,
                      deltaF-PUCCH-Format2 deltaF-2,
                      deltaF-PUCCH-Format2a deltaF-2,
                      deltaF-PUCCH-Format2b deltaF-2
                    },
                    deltaPreambleMsg3 3
                  },
                  antennaInfoCommon
                  {
                    antennaPortsCount an1
                  },
                  p-Max 1,
                  tdd-Config
                  {
                    subframeAssignment sa2,
                    specialSubframePatterns ssp0
                  },
                  ul-CyclicPrefixLength len1
                },
                rach-ConfigDedicated
                {
                  ra-PreambleIndex 1,
                  ra-PRACH-MaskIndex 1
                }
              },
              radioResourceConfigDedicated
              {
                srb-ToAddModList
                {
                  {
                    srb-Identity 1,
                    rlc-Config defaultValue : NULL
                  }
                },
                drb-ToAddModList
                {
                  {
                    drb-Identity 3,
                    pdcp-Config
                    {
                      rlc-AM
                      {
                        statusReportRequired TRUE
                      },
                      headerCompression notUsed : NULL
                    }
                  }
                }
              },
              securityConfigHO
              {
                handoverType intraLTE :
                  {
                    securityAlgorithmConfig
                    {
                      cipheringAlgorithm eea0,
                      integrityProtAlgorithm eia1
                    },
                    keyChangeIndicator FALSE,
                    nextHopChainingCount 0
                  }
              }
            }
      }
}

*/

byte lte_rrc_test_embms_handover_msg[] =
{
  0x22, 0x1B, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xDF, 0x90, 0x00, 0x06,
  0x44, 0x80, 0x40, 0x1F, 0xF6, 0x0A, 0x04, 0x09, 0x35, 0x01, 0x41, 0x88, 0x07,
  0x91, 0x00, 0x8A, 0x34, 0x0B, 0x00, 0x29, 0x16, 0x0D, 0x6C, 0x00, 0x83, 0xE8, 0x00, 0x8B, 0x02, 0x40, 0x81, 0x14, 0x40, 0x40,

};



/*
MCCH:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf32,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 25,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 plmn-Index-r9 : 1,
                  serviceId-r9 '000002'H
                },
                logicalChannelIdentity-r9 20
              }
            }
          },
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 55,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf16
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 plmn-Index-r9 : 1,
                  serviceId-r9 '0000FF'H
                },
                logicalChannelIdentity-r9 0
              }
            }
          },
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 95,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000001'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 2
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          }
        }
      }
}
*/

static uint8 lte_rrc_test_embms_mcch_with_3_pmch_msg[] =
{
  0x00, 0x0F, 0xD9, 0x80, 0x64, 0xE8, 0x20, 0x00, 0x00, 0x01, 0x50, 0x06, 0xE7,
  0x21, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x5F, 0x3A, 0x13, 0x80, 0x08, 0x04, 0x00,
  0x00, 0x04, 0x04, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x80,
};

/*
MCCH:value MCCH-Message ::=
{
  message c1 : mbsfnAreaConfiguration-r9 :
      {
        commonSF-Alloc-r9
        {
          {
            radioframeAllocationPeriod n1,
            radioframeAllocationOffset 0,
            subframeAllocation oneFrame : '111111'B
          }
        },
        commonSF-AllocPeriod-r9 rf32,
        pmch-InfoList-r9
        {
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 50,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf32
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000001'H
                },
                sessionId-r9 '01'H,
                logicalChannelIdentity-r9 2
              },
              {
                tmgi-r9
                {
                  plmn-Id-r9 explicitValue-r9 :
                    {
                      mcc
                      {
                        0,
                        0,
                        1
                      },
                      mnc
                      {
                        0,
                        1
                      }
                    },
                  serviceId-r9 '000000'H
                },
                sessionId-r9 '00'H,
                logicalChannelIdentity-r9 1
              }
            }
          },
          {
            pmch-Config-r9
            {
              sf-AllocEnd-r9 100,
              dataMCS-r9 7,
              mch-SchedulingPeriod-r9 rf16
            },
            mbms-SessionInfoList-r9
            {
              {
                tmgi-r9
                {
                  plmn-Id-r9 plmn-Index-r9 : 1,
                  serviceId-r9 '0000FF'H
                },
                logicalChannelIdentity-r9 0
              }
            }
          }
        }
      }
}
*/


static uint8 lte_rrc_test_embms_mcch_sfalloc_mod_msg[] =
{
  0x00, 0x0F, 0xD9, 0x00, 0xC8, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x10, 0x11,
  0x38, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02, 0x06, 0x43, 0x90, 0x80, 0x00, 0x01,
  0xFE, 0x00
};

/*
Reconfig:value DL-DCCH-Message ::=
{
  message c1 : rrcConnectionReconfiguration :
      {
        rrc-TransactionIdentifier 1,
        criticalExtensions c1 : rrcConnectionReconfiguration-r8 :
            {
              measConfig
              {
                measObjectToAddModList
                {
                  {
                    measObjectId 5,
                    measObject measObjectCDMA2000 :
                      {
                        cdma2000-Type typeHRPD,
                        carrierFreq
                        {
                          bandClass bc0,
                          arfcn 1000
                        },
                        cellForWhichToReportCGI 500
                      }
                  }
                },
                reportConfigToAddModList
                {
                  {
                    reportConfigId 5,
                    reportConfig reportConfigInterRAT :
                      {
                        triggerType periodical :
                          {
                            purpose reportCGI
                          },
                        maxReportCells 1,
                        reportInterval min1,
                        reportAmount r1
                      }
                  }
                },
                measIdToAddModList
                {
                  {
                    measId 5,
                    measObjectId 5,
                    reportConfigId 5
                  }
                },
                quantityConfig
                {
                  quantityConfigCDMA2000
                  {
                    measQuantityCDMA2000 pilotStrength
                  }
                }
              }
            }
      }
}
*/

static uint8 lte_rrc_test_irat_cgi_msg[] =
{
  0x22, 0x10, 0x15, 0x80, 0x08, 0xC1, 0x80, 0xFA, 0x3E, 0x80, 0x25, 0x84, 0x00,
  0x10, 0x84, 0x08
};

/*
reest:value DL-CCCH-Message ::=
{
  message c1 : rrcConnectionReestablishment :
      {
        rrc-TransactionIdentifier 1,
        criticalExtensions c1 : rrcConnectionReestablishment-r8 :
            {
              radioResourceConfigDedicated
              {
                srb-ToAddModList
                {
                  {
                    srb-Identity 1,
                    rlc-Config explicitValue : am :
                        {
                          ul-AM-RLC
                          {
                            t-PollRetransmit ms15,
                            pollPDU p32,
                            pollByte kB100,
                            maxRetxThreshold t3
                          },
                          dl-AM-RLC
                          {
                            t-Reordering ms0,
                            t-StatusProhibit ms0
                          }
                        },
                    logicalChannelConfig defaultValue : NULL
                  }
                },
                mac-MainConfig explicitValue :
                  {
                    timeAlignmentTimerDedicated sf1920
                  },
                sps-Config
                {
                  sps-ConfigDL setup :
                    {
                      semiPersistSchedIntervalDL sf20,
                      numberOfConfSPS-Processes 1,
                      n1-PUCCH-AN-PersistentList
                      {
                        2
                      }
                    }
                },
                physicalConfigDedicated
                {
                  antennaInfo explicitValue :
                    {
                      transmissionMode tm1,
                      ue-TransmitAntennaSelection setup : openLoop
                    }
                }
              },
              nextHopChainingCount 2
            }
      }
}
*/

byte lte_rrc_test_reest_msg[] = {0x08, 0x13, 0x98, 0x02, 0x66, 0x80, 0x04, 0x0D,
  0x42, 0x00, 0x04, 0x00, 0x81, 0xA0};

byte lte_rrc_test_embms_mcch_msg_4tmgi[] = {0x00, 0x0F, 0xD8, 0x82, 0xFC, 0xE8, 0x8E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x20, 0x11, 0x38, 0x00, 0x80, 0x40, 0x00, 0x00, 0x40, 0x42, 0xE0, 0x02, 0x01,
0x00, 0x00, 0x03, 0x01, 0x1B, 0x80, 0x08, 0x04, 0x00, 0x00, 0x10, 0x04, 0x80,};

byte lte_rrc_test_embms_mcch_msg_2tmgi[] = {0x00, 0x0F, 0xD8, 0x82, 0xFC, 0xE8, 0x4E, 0x00, 0x20, 0x10, 0x00, 0x00, 0x10, 0x10, 0xB8, 0x00, 0x80, 0x40, 0x00, 0x00, 0xC0, 0x46};


uint8 lte_rrc_test_sib2_withmbsfn_no_sib13[] = \
{ \
  0x00, 0x00, 0x9F, 0x02, 0x18, 0x14, 0x48, 0x00, 0x00, 0x00, 0x01, 0x78, 0x00, \
  0x00, 0x00, 0x02, 0x00, 0x0C, 0x00, 0xFC, 0x36, 0x00, 0x10, 0xE2, 0x00, 0xC0, \
  0x01, 0x68, 0x02, 0x6F, 0x00, \
};

/*===========================================================================

                                FUNCTIONS

===========================================================================*/

boolean lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc
(
  lte_cphy_tdd_cfg_param_s *tdd_cfg,
  lte_cphy_common_cfg_req_param_s *cfg_req
)
{
  return (!lte_rrc_test_embms_tdd_collision_detected);
}

void LteRrcTestEmbmsCphyCommonCfg__Test
(
  lte_cphy_common_cfg_mask_t cfg_mask
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == cfg_mask);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}

void LteRrcTestEmbmsMacCfg__Test
(
  void
)
{
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);
  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTestEmbmsRlcCfg__Test
(
  void
)
{
  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);
  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;
  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}


void* LteRrceMBMSSib15Construct__Test
(
  uint16 *intra_data,
  uint16 *inter_data,
  uint16 *mfbi_data
)
{
  lte_rrc_osys_BCCH_DL_SCH_Message *bcch_msg;
  lte_rrc_osys_SystemInformationBlockType15_r11 *sib15_ptr;
  int decode_status;
  uint32 inter_idx = 0;
  uint32 intra_idx = 0;
  uint32 mfbi_idx = 0;

  bcch_msg = (lte_rrc_osys_BCCH_DL_SCH_Message*)lte_rrc_asn1_osys_IE_malloc(sizeof(lte_rrc_osys_BCCH_DL_SCH_Message));
  bcch_msg->message.t = T_lte_rrc_osys_BCCH_DL_SCH_MessageType_c1;
  bcch_msg->message.u.c1 = (lte_rrc_osys_BCCH_DL_SCH_MessageType_c1*)lte_rrc_asn1_osys_IE_malloc(sizeof(lte_rrc_osys_BCCH_DL_SCH_MessageType_c1));
  bcch_msg->message.u.c1->t = T_lte_rrc_osys_BCCH_DL_SCH_MessageType_c1_systemInformation;
  bcch_msg->message.u.c1->u.systemInformation = (lte_rrc_osys_SystemInformation*)lte_rrc_asn1_osys_IE_malloc(sizeof(lte_rrc_osys_SystemInformation));
  bcch_msg->message.u.c1->u.systemInformation->criticalExtensions.t =
            T_lte_rrc_osys_SystemInformation_criticalExtensions_systemInformation_r8;
  bcch_msg->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8 = (lte_rrc_osys_SystemInformation_r8_IEs*)
    lte_rrc_asn1_osys_IE_malloc(sizeof(lte_rrc_osys_SystemInformation_r8_IEs));
  bcch_msg->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->m.nonCriticalExtensionPresent = 0;
  bcch_msg->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem = (lte_rrc_osys_SystemInformation_r8_IEs_sib_TypeAndInfo_element*)
    lte_rrc_asn1_osys_IE_malloc(sizeof(lte_rrc_osys_SystemInformation_r8_IEs_sib_TypeAndInfo_element));
  bcch_msg->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.n = 1;
  bcch_msg->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem[0].t = T_lte_rrc_osys_SystemInformation_r8_IEs_sib_TypeAndInfo_element_sib15_v1130;

  bcch_msg->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem[0].u.sib15_v1130 = (lte_rrc_osys_SystemInformationBlockType15_r11*)
    lte_rrc_asn1_osys_IE_malloc(sizeof(lte_rrc_osys_SystemInformationBlockType15_r11));

  sib15_ptr = bcch_msg->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem[0].u.sib15_v1130;

  if (intra_data != NULL)
  {
    sib15_ptr->m.mbms_SAI_IntraFreq_r11Present = 1;
    sib15_ptr->mbms_SAI_IntraFreq_r11.n = intra_data[intra_idx++];
    sib15_ptr->mbms_SAI_IntraFreq_r11.elem = (lte_rrc_osys_MBMS_SAI_r11*)lte_rrc_asn1_osys_IE_malloc(sizeof(lte_rrc_osys_MBMS_SAI_r11) *
                                                 sib15_ptr->mbms_SAI_IntraFreq_r11.n);

    for (int i = 0; i < sib15_ptr->mbms_SAI_IntraFreq_r11.n; i++)
    {
      sib15_ptr->mbms_SAI_IntraFreq_r11.elem[i] = intra_data[intra_idx++];
    }
  }
  else
  {
    sib15_ptr->m.mbms_SAI_IntraFreq_r11Present = 0;
  }

  if (inter_data != NULL)
  {
    sib15_ptr->m.mbms_SAI_InterFreqList_r11Present = 1;
    sib15_ptr->mbms_SAI_InterFreqList_r11.n = inter_data[inter_idx++];
    sib15_ptr->mbms_SAI_InterFreqList_r11.elem = (lte_rrc_osys_MBMS_SAI_InterFreq_r11*)lte_rrc_asn1_osys_IE_malloc(sizeof(lte_rrc_osys_MBMS_SAI_InterFreq_r11) *
                                                 sib15_ptr->mbms_SAI_InterFreqList_r11.n);

    for (int i = 0; i < sib15_ptr->mbms_SAI_InterFreqList_r11.n; i++)
    {
      sib15_ptr->mbms_SAI_InterFreqList_r11.elem[i].dl_CarrierFreq_r11 = inter_data[inter_idx++];
      sib15_ptr->mbms_SAI_InterFreqList_r11.elem[i].mbms_SAI_List_r11.n = inter_data[inter_idx++];
      sib15_ptr->mbms_SAI_InterFreqList_r11.elem[i].mbms_SAI_List_r11.elem = (lte_rrc_osys_MBMS_SAI_r11*)lte_rrc_asn1_osys_IE_malloc(sizeof(lte_rrc_osys_MBMS_SAI_r11) *
                                                                             sib15_ptr->mbms_SAI_InterFreqList_r11.elem[i].mbms_SAI_List_r11.n);

      for (int j = 0; j < sib15_ptr->mbms_SAI_InterFreqList_r11.elem[i].mbms_SAI_List_r11.n; j++)
      {
        sib15_ptr->mbms_SAI_InterFreqList_r11.elem[i].mbms_SAI_List_r11.elem[j] = inter_data[inter_idx++];
      }
    }
  }
  else
  {
    sib15_ptr->m.mbms_SAI_InterFreqList_r11Present = 0;
  }

  if (mfbi_data != NULL)
  {
    sib15_ptr->m._v2ExtPresent = 1;
    sib15_ptr->m.mbms_SAI_InterFreqList_v1140Present = 1;
    sib15_ptr->mbms_SAI_InterFreqList_v1140.n = mfbi_data[mfbi_idx++];
    sib15_ptr->mbms_SAI_InterFreqList_v1140.elem = (lte_rrc_osys_MBMS_SAI_InterFreq_v1140*)lte_rrc_asn1_osys_IE_malloc(sizeof(lte_rrc_osys_MBMS_SAI_InterFreq_v1140) *
                                                    sib15_ptr->mbms_SAI_InterFreqList_v1140.n);

    for (int i = 0; i < sib15_ptr->mbms_SAI_InterFreqList_v1140.n; i++)
    {
      sib15_ptr->mbms_SAI_InterFreqList_v1140.elem[i].m.multiBandInfoList_r11Present = mfbi_data[mfbi_idx++];

      if (sib15_ptr->mbms_SAI_InterFreqList_v1140.elem[i].m.multiBandInfoList_r11Present)
      {
        sib15_ptr->mbms_SAI_InterFreqList_v1140.elem[i].multiBandInfoList_r11.n = mfbi_data[mfbi_idx++];
        sib15_ptr->mbms_SAI_InterFreqList_v1140.elem[i].multiBandInfoList_r11.elem = (lte_rrc_osys_FreqBandIndicator_r11*)lte_rrc_asn1_osys_IE_malloc(sizeof(lte_rrc_osys_FreqBandIndicator_r11) *
                                                                                      sib15_ptr->mbms_SAI_InterFreqList_v1140.elem[i].multiBandInfoList_r11.n);

        for (int j = 0; j < sib15_ptr->mbms_SAI_InterFreqList_v1140.elem[i].multiBandInfoList_r11.n; j++)
        {
          sib15_ptr->mbms_SAI_InterFreqList_v1140.elem[i].multiBandInfoList_r11.elem[j] = mfbi_data[mfbi_idx++];
        }
      }
    }
  }
  else
  {
    sib15_ptr->m.mbms_SAI_InterFreqList_v1140Present = 0;
  }

  //lte_rrc_esmgr_test_common_data.sib15_ptr = bcch_msg->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem[0].u.sib15_v1130;
  //lte_rrc_esmgr_test_common_data.bcch_dl_sch_sib15_ptr = bcch_msg;

  return (bcch_msg);

}


void LteRrceMBMSEnable__Test
(
  void
)
{
  lte_rrc_embms_enable_req_s enable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&enable_req.msg_hdr, LTE_RRC_EMBMS_ENABLE_REQ);
  status = msgr_send(&enable_req.msg_hdr, sizeof(enable_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("Sent LTE_RRC_EMBMS_ENABLE_REQ \n");

  lte_rrc_utf_wait_for_done();

  /* Get eMBMS coverage status indication*/
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == TRUE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");
}

void LteRrceMBMSEnableGeneric__Test
(
  boolean embms_in_coverage
)
{
  lte_rrc_embms_enable_req_s enable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&enable_req.msg_hdr, LTE_RRC_EMBMS_ENABLE_REQ);
  status = msgr_send(&enable_req.msg_hdr, sizeof(enable_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("Sent LTE_RRC_EMBMS_ENABLE_REQ \n");

  lte_rrc_utf_wait_for_done();

  /* Get eMBMS coverage status indication*/
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == TRUE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == embms_in_coverage);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");
}

void LteRrceMBMSGetCovIndi
(
  lte_rrc_embms_coverage_status_e cov_status
)
{
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  uint32 buf_len = 0;

    lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
    TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
    TF_ASSERT(cov_ind_ptr->coverage_status == cov_status);
    TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");
}


void LteRrceMBMSEnableMultiBand__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index,
  uint16 *intra_data,
  uint16 *inter_data,
  uint16 *mfbi_data
)
{
  lte_rrc_embms_enable_req_s enable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *sai_list_indi;
  lte_rrc_osys_BCCH_DL_SCH_Message *decoded_msg_ptr;

  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint32 buf_len;
  lte_errno_e status;

  uint8 *sib1_ptr = NULL;
  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;

  uint16 sib1_size;
  uint16 sib13_size;
  uint16 sib15_size;

  lte_rrc_osys_BCCH_DL_SCH_Message *sib15_msg_ptr;
  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;

  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&enable_req.msg_hdr, LTE_RRC_EMBMS_ENABLE_REQ);
  status = msgr_send(&enable_req.msg_hdr, sizeof(enable_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("Sent LTE_RRC_EMBMS_ENABLE_REQ \n");

  lte_rrc_utf_wait_for_done();

  /* Get eMBMS coverage status indication*/
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == TRUE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  if (cell_index == LTE_RRC_TEST_CELL_29 || cell_index == LTE_RRC_TEST_CELL_30 ||
      cell_index == LTE_RRC_TEST_CELL_38 || cell_index == LTE_RRC_TEST_CELL_28)
  {
    TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_AVAILABLE);
  }
  else
  {
    TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  }
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 32;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  if (cell_index == LTE_RRC_TEST_CELL_29 || cell_index == LTE_RRC_TEST_CELL_30)
  {
    // Prepare bcch_dl_data_ind to send SIB1 to RRC
    msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

    sib13_ptr = (cell[cell_index].sibs_ptr[group_index])->sib13_ptr;
    sib13_size = (cell[cell_index].sibs_ptr[group_index])->sib13_size;

    TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
                           sib13_size,
                           DSM_DS_SMALL_ITEM_POOL) == sib13_size);
    TF_ASSERT(dsm_ptr_sib13 != NULL);

    att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
    msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

    bcch_dl_data_ind.freq = cell[cell_index].earfcn;
    bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
    bcch_dl_data_ind.sfn.sys_fn = 32;

    // Send bcch_dl_data_ind to RRC
    status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
    TF_ASSERT(status == E_SUCCESS);

    // We expect a sib_sched_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
    TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
    TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
    TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  }

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  if (mfbi_data != NULL)
  {
    sib15_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message*)LteRrceMBMSSib15Construct__Test(intra_data, inter_data, mfbi_data);
  }
  else
  {
    sib15_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message*)LteRrceMBMSSib15Construct__Test(intra_data, inter_data, NULL);
  }

  encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib15_msg_ptr,
                                               &encoded_pdu,
                                               BCCH_DL_SCH_Message);

  TF_ASSERT(encode_status == 0);
  //free the constructed SIB15

  sib15_ptr = encoded_pdu.value;
  sib15_size = encoded_pdu.length;

#if 0
  for (int i =0; i < encoded_pdu.length; i++)
  {
    TF_MSG("SIB15 byte[%d]: %x", i, encoded_pdu.value[i]);
  }
#endif

  decoded_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message *)lte_rrc_osys_asn1_decode_pdu(encoded_pdu.value,
                                                                     encoded_pdu.length,
                                                                     BCCH_DL_SCH_Message,
                                                                     &decode_status);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 36;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  if (cell_index != LTE_RRC_TEST_CELL_38)
  {
    // We expect a sib_sched_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&sai_list_indi, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_rrc_embms_avail_sai_list_ind_s));
    TF_ASSERT(sai_list_indi->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

    msgr_attach_struct_type *att_ptr;
    dsm_item_type *rx_dsm_ptr;
    uint16 length;
    unsigned char byte_str[256];
    uint16 byte_str_len;

    att_ptr = msgr_get_attach(&sai_list_indi->msg_hdr, 0);
    msgr_get_dsm_attach(att_ptr, &rx_dsm_ptr);
    TF_ASSERT(rx_dsm_ptr != NULL);

    length = dsm_length_packet(rx_dsm_ptr);

    byte_str_len = dsm_pullup(&rx_dsm_ptr, byte_str, (uint16) length);


    if (cell_index != LTE_RRC_TEST_CELL_28 && cell_index != LTE_RRC_TEST_CELL_29 && cell_index != LTE_RRC_TEST_CELL_30)
    {
      /* Receive the coverage state ind thrown on receiving the enable req */
      lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
      TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
      TF_ASSERT(cov_ind_ptr->coverage_status == TRUE);
      TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");
    }
  }
}

void LteRrceMBMSEnableMultiBandSibTimeout__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index,
  uint16 *intra_data,
  uint16 *inter_data,
  boolean read_sib13,
  boolean read_sib15
)
{
  lte_rrc_embms_enable_req_s enable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *sai_list_indi;

  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint32 buf_len;
  lte_errno_e status;

  uint8 *sib1_ptr = NULL;
  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;

  uint16 sib1_size;
  uint16 sib13_size;
  uint16 sib15_size;

  lte_rrc_osys_BCCH_DL_SCH_Message *sib15_msg_ptr;
  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;

  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&enable_req.msg_hdr, LTE_RRC_EMBMS_ENABLE_REQ);
  status = msgr_send(&enable_req.msg_hdr, sizeof(enable_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("Sent LTE_RRC_EMBMS_ENABLE_REQ \n");

  lte_rrc_utf_wait_for_done();

  /* Get eMBMS coverage status indication*/
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == TRUE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  if (cell_index == LTE_RRC_TEST_CELL_29 || cell_index == LTE_RRC_TEST_CELL_30)
  {
    TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_AVAILABLE);
  }
  else
  {
    TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  }
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 32;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  if ((cell_index == LTE_RRC_TEST_CELL_29 || cell_index == LTE_RRC_TEST_CELL_30) &&
      (read_sib13 == TRUE))
  {
    // Prepare bcch_dl_data_ind to send SIB1 to RRC
    msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

    sib13_ptr = (cell[cell_index].sibs_ptr[group_index])->sib13_ptr;
    sib13_size = (cell[cell_index].sibs_ptr[group_index])->sib13_size;

    TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
                           sib13_size,
                           DSM_DS_SMALL_ITEM_POOL) == sib13_size);
    TF_ASSERT(dsm_ptr_sib13 != NULL);

    att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
    msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

    bcch_dl_data_ind.freq = cell[cell_index].earfcn;
    bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
    bcch_dl_data_ind.sfn.sys_fn = 32;

    // Send bcch_dl_data_ind to RRC
    status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
    TF_ASSERT(status == E_SUCCESS);

    // We expect a sib_sched_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
    TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
    TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
    TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  }

  if (read_sib15)
  {
    // Prepare bcch_dl_data_ind to send SIB1 to RRC
    msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

    sib15_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message*)LteRrceMBMSSib15Construct__Test(intra_data, inter_data, NULL);

    encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib15_msg_ptr,
                                                 &encoded_pdu,
                                                 BCCH_DL_SCH_Message);

    TF_ASSERT(encode_status == 0);
    //free the constructed SIB15

    sib15_ptr = encoded_pdu.value;
    sib15_size = encoded_pdu.length;

    TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                           sib15_size,
                           DSM_DS_SMALL_ITEM_POOL) == sib15_size);
    TF_ASSERT(dsm_ptr_sib15 != NULL);

    att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
    msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

    bcch_dl_data_ind.freq = cell[cell_index].earfcn;
    bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
    bcch_dl_data_ind.sfn.sys_fn = 36;

    // Send bcch_dl_data_ind to RRC
    status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
    TF_ASSERT(status == E_SUCCESS);

    // We expect a sib_sched_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
    TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
    TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
    TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  }

  if (read_sib15 == FALSE || read_sib13 == FALSE)
  {
    //sleep till sib timeout
    TF_SLEEP(2000);

    // We expect a sib_sched_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
    TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
    TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
    TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  }

  if (read_sib15)
  {
    // We expect a sib_sched_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&sai_list_indi, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_rrc_embms_avail_sai_list_ind_s));
    TF_ASSERT(sai_list_indi->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

    msgr_attach_struct_type *att_ptr;
    dsm_item_type *rx_dsm_ptr;
    uint16 length;
    unsigned char byte_str[256];
    uint16 byte_str_len;

    att_ptr = msgr_get_attach(&sai_list_indi->msg_hdr, 0);
    msgr_get_dsm_attach(att_ptr, &rx_dsm_ptr);
    TF_ASSERT(rx_dsm_ptr != NULL);

    length = dsm_length_packet(rx_dsm_ptr);

    byte_str_len = dsm_pullup(&rx_dsm_ptr, byte_str, (uint16) length);

    if (cell_index != LTE_RRC_TEST_CELL_29 && cell_index != LTE_RRC_TEST_CELL_30 && cell_index != LTE_RRC_TEST_CELL_31)
    {
      /* Receive the coverage state ind thrown on receiving the enable req */
      lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
      TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
      TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_AVAILABLE);
      TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");
    }
  }
}

void LteRrceMBMSEnableOnNoneMBMSCell__Test
(
  void
)
{
  lte_rrc_embms_enable_req_s enable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&enable_req.msg_hdr, LTE_RRC_EMBMS_ENABLE_REQ);
  status = msgr_send(&enable_req.msg_hdr, sizeof(enable_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("Sent LTE_RRC_EMBMS_ENABLE_REQ \n");

  lte_rrc_utf_wait_for_done();

  /* Get eMBMS coverage status indication*/
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == TRUE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");
}

void LteRrceMBMSDisable__Test()
{
  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");

  lte_rrc_utf_wait_for_done();

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrceMBMSGetAvailTmgiList
(
  uint8 num_avail_services
)
{
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  uint32 buf_len = 0;

  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  //TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == num_avail_services);
}

void LteRrcTesteMBMSActivate__Test
(
  void
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 1;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);


  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrceMBMSGetAvailTmgiList(2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);
}

void LteRrcSendeMBMSActivateReqForService1
(
  void
)
{
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.debug_trace_id = 20;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 1;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;
  act_tmgi_req.num_sai_to_search = 0;
  act_tmgi_req.num_earfcn_to_search = 0;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();
}

void LteRrcSendeMBMSActivateReqForService0
(
  void
)
{
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.debug_trace_id = 20;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 0;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 0;
  act_tmgi_req.num_earfcn_to_search = 0;
  act_tmgi_req.num_sai_to_search = 0;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();
}

void LteRrcTesteMBMSActTwoSvcInSameArea__Test
(
  void
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 1;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;
  act_tmgi_req.num_earfcn_to_search = 0;
  act_tmgi_req.num_sai_to_search = 0;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);


  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrceMBMSGetAvailTmgiList(2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);

  /***************************************************************************/

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 0;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 0;
  act_tmgi_req.num_earfcn_to_search = 0;
  act_tmgi_req.num_sai_to_search = 0;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

   // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].mrb_id == 37);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 37);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 0);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 2);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[1].mrb_id == 37);

}

void LteRrcSendeMBMSActivateReqForService1WithNoASL
(
  void
)
{
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.debug_trace_id = 20;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 1;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;
  act_tmgi_req.num_sai_to_search = 0;
  act_tmgi_req.num_earfcn_to_search = 1;
  act_tmgi_req.earfcn_list[0] = 350;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();
}

void LteRrcTesteMBMSAvailSaiListInd
(
  void
)
{
  lte_rrc_embms_avail_sai_list_ind_s *sai_list_indi;
  uint32 buf_len;
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sai_list_indi, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_embms_avail_sai_list_ind_s));
  TF_ASSERT(sai_list_indi->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  msgr_attach_struct_type *att_ptr;
  dsm_item_type *rx_dsm_ptr;
  uint16 length;
  unsigned char byte_str[256];
  uint16 byte_str_len;

  att_ptr = msgr_get_attach(&sai_list_indi->msg_hdr, 0);
  msgr_get_dsm_attach(att_ptr, &rx_dsm_ptr);
  TF_ASSERT(rx_dsm_ptr != NULL);

  length = dsm_length_packet(rx_dsm_ptr);

  byte_str_len = dsm_pullup(&rx_dsm_ptr, byte_str, (uint16) length);
}

void LteRrcTesteMBMSMbmsInterestIndULMessage
(
  boolean freq_valid,
  uint16 freq
)
{
  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;
  lte_errno_e status;
  uint32 buf_len;
  lte_rrc_osys_UL_DCCH_Message *ul_dcch_msg_ptr;
  lte_rrc_osys_MBMSInterestIndication_r11 *mbms_interest_ind_ptr;
  lte_rrc_osys_MBMSInterestIndication_r11_IEs *interest_ind_ptr;
  int decode_status;

  // We expect a ConnectionReconfigurationComplete OTA message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_sdu_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_sdu_req_msg_s));
  TF_ASSERT(pdcpul_sdu_req->hdr.id == LTE_PDCPUL_SDU_REQ);

  TF_ASSERT(pdcpul_sdu_req->rb_cfg_idx == 33);

  msgr_attach_struct_type *att_ptr;
  dsm_item_type *rx_dsm_ptr;
  uint16 length;
  unsigned char byte_str[256];
  uint16 byte_str_len;

  att_ptr = msgr_get_attach(&pdcpul_sdu_req->hdr, 0);
  msgr_get_dsm_attach(att_ptr, &rx_dsm_ptr);
  TF_ASSERT(rx_dsm_ptr != NULL);
  length = dsm_length_packet(rx_dsm_ptr);
  byte_str_len = dsm_pullup(&rx_dsm_ptr, byte_str, (uint16) length);

  ul_dcch_msg_ptr = (lte_rrc_osys_UL_DCCH_Message *)lte_rrc_osys_asn1_decode_pdu((void*) byte_str,
                     byte_str_len,
                     UL_DCCH_Message,
                     &decode_status);
  TF_ASSERT(decode_status == 0);

  TF_ASSERT(ul_dcch_msg_ptr->message.t == T_lte_rrc_osys_UL_DCCH_MessageType_messageClassExtension);
  TF_ASSERT(ul_dcch_msg_ptr->message.u.messageClassExtension->t == T_lte_rrc_osys_UL_DCCH_MessageType_messageClassExtension_c2);
  TF_ASSERT(ul_dcch_msg_ptr->message.u.messageClassExtension->u.c2->t == T_lte_rrc_osys_UL_DCCH_MessageType_messageClassExtension_c2_mbmsInterestIndication_r11);
  mbms_interest_ind_ptr = ul_dcch_msg_ptr->message.u.messageClassExtension->u.c2->u.mbmsInterestIndication_r11;
  TF_ASSERT(mbms_interest_ind_ptr->criticalExtensions.t == T_lte_rrc_osys_MBMSInterestIndication_r11_criticalExtensions_c1);
  TF_ASSERT(mbms_interest_ind_ptr->criticalExtensions.u.c1->t == T_lte_rrc_osys_MBMSInterestIndication_r11_criticalExtensions_c1_interestIndication_r11);
  interest_ind_ptr = mbms_interest_ind_ptr->criticalExtensions.u.c1->u.interestIndication_r11;

  //TF_ASSERT(interest_ind_ptr->m.mbms_Priority_r11Present == 0);
  //TF_ASSERT(interest_ind_ptr->m.mbms_FreqList_r11Present == freq_valid);

  if (freq_valid)
  {
    TF_ASSERT(interest_ind_ptr->mbms_FreqList_r11.n == 1);
    TF_ASSERT(interest_ind_ptr->mbms_FreqList_r11.elem[0] == freq);
  }

  // Prepare pdcpul_sdu_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_sdu_cnf.hdr, LTE_PDCPUL_SDU_CNF);

  pdcpul_sdu_cnf.num_nack_muid = 0;
  pdcpul_sdu_cnf.num_maybe_muid = 0;
  pdcpul_sdu_cnf.num_ack_muid = 1;
  pdcpul_sdu_cnf.ack_muid[0] = pdcpul_sdu_req->mu_id;

  //Decode and check for freq signalled

  // Send pdcpul_sdu_cnf to RRC
  status = msgr_send(&pdcpul_sdu_cnf.hdr, sizeof(pdcpul_sdu_cnf));
  TF_ASSERT(status == E_SUCCESS);

}

void LteRrcSendeMBMSActivateReqForServiceWithSai
(
  uint8 service_id,
  uint8 num_sai,
  uint16 *sai_list
)
{
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;
  lte_cphy_best_mbms_neigh_freq_cnf_s best_neigh_cnf;
  lte_cphy_best_mbms_neigh_freq_req_s *best_neigh_req;
  lte_errno_e status;
  uint32 buf_len;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.debug_trace_id = 20;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = service_id;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;
  act_tmgi_req.num_sai_to_search = num_sai;
  act_tmgi_req.num_earfcn_to_search = 0;
  LTE_RRC_MEMCPY(act_tmgi_req.sai_list, sizeof(uint16) * num_sai, sai_list, sizeof(uint16) * num_sai);

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);
  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");
  lte_rrc_utf_wait_for_done();

}

void LteRrcSendeMBMSActivateReqForServiceWithSaiEarfcn
(
  uint8 service_id,
  uint8 num_sai,
  uint16 *sai_list,
  uint8 num_earfcn,
  lte_earfcn_t *earfcn_list,
  boolean idle_meas_cfg
)
{
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;
  lte_cphy_best_mbms_neigh_freq_cnf_s best_neigh_cnf;
  lte_cphy_best_mbms_neigh_freq_req_s *best_neigh_req;
  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;
  lte_errno_e status;
  uint32 buf_len;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.debug_trace_id = 20;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = service_id;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;
  act_tmgi_req.num_sai_to_search = num_sai;
  act_tmgi_req.num_earfcn_to_search = num_earfcn;

  LTE_RRC_MEMCPY(act_tmgi_req.sai_list, sizeof(uint16) * num_sai, sai_list, sizeof(uint16) * num_sai);

  LTE_RRC_MEMCPY(act_tmgi_req.earfcn_list, sizeof(lte_earfcn_t) * num_earfcn, earfcn_list, sizeof(lte_earfcn_t) * num_earfcn);

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);
  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");
  lte_rrc_utf_wait_for_done();

  if (idle_meas_cfg)
  {
    // ---------------------------------------------
    // We expect meas sm to have thrown the idle meas cfg req
    lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
    TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
    lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
    idle_meas_cfg_cnf.status = E_SUCCESS;
    status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  }

}

void LteRrcTesteMBMSActSvcLowerLyr_Test
(
  lte_rrc_test_cell_e cell_index,
  boolean test_mbms_intrst_ind,
  boolean freq_valid,
  uint16 freq
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  if (test_mbms_intrst_ind)
  {
    LteRrcTesteMBMSMbmsInterestIndULMessage(freq_valid, freq);
  }

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  if (test_srvc_ind == TRUE)
  {
    LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  }

  if (test_mcch_tmr_expiry == TRUE)
  {
    return;
  }

  if (test_cfg_reqi_for_sib_upd == TRUE)
  {
    // We expect a common_cfg_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.
              cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

    if (test_mbms_intrst_ind)
    {
      LteRrcTesteMBMSMbmsInterestIndULMessage(freq_valid, freq);
    }

    // Prepare common_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

    common_cfg_cnf.status = E_SUCCESS;
    common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

    // Send common_cfg_cnf to RRC
    status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);
  }

  TF_SLEEP(100);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  if (cell_index == LTE_RRC_TEST_CELL_29)
  {
    TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg_4tmgi, sizeof(lte_rrc_test_embms_mcch_msg_4tmgi),
                           DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg_4tmgi));
  }
  else
  {
    TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg_2tmgi, sizeof(lte_rrc_test_embms_mcch_msg_2tmgi),
                           DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg_2tmgi));
  }

  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  if (cell_index == LTE_RRC_TEST_CELL_29)
  {
    mcch_pdu_ind.area_id = 1;
  }
  else
  {
    mcch_pdu_ind.area_id = 0;
  }

  mcch_pdu_ind.dl_cell_frequency = cell[cell_index].earfcn;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTesteMBMSDeactSvcLowerLyr_Test
(
  lte_rrc_test_cell_e cell_index
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTesteMBMSActivateCnfForServiceWithSai
(
  uint8 service_id,
  boolean sai_found,
  lte_embms_status_e cnf_status
)
{
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_cphy_best_mbms_neigh_freq_cnf_s best_neigh_cnf;
  lte_cphy_best_mbms_neigh_freq_req_s *best_neigh_req;
  lte_errno_e status;
  uint32 buf_len;

  if (sai_found)
  {
    /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
    lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
    TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
    TF_ASSERT(act_tmgi_cnf_ptr->act_status == cnf_status);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == service_id);

    /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
    lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
    TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
    TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  }
  else
  {
    /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
    lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
    TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
    TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_FREQ_CONFLICT);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == service_id);
  }
}

void LteRrcTesteMBMSActivateCnfForServiceWithSaiEarfcn
(
  uint8 service_id,
  boolean earfcn_found,
  lte_embms_status_e cnf_status
)
{
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_cphy_best_mbms_neigh_freq_cnf_s best_neigh_cnf;
  lte_cphy_best_mbms_neigh_freq_req_s *best_neigh_req;
  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;
  lte_errno_e status;
  uint32 buf_len;

  if (earfcn_found)
  {
    /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
    lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
    TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
    TF_ASSERT(act_tmgi_cnf_ptr->act_status == cnf_status);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == service_id);

    /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
    lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
    TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
    TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

    if (cnf_status != LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE)
    {
    // ---------------------------------------------
    // We expect meas sm to have thrown the idle meas cfg req
    lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
    TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
    lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
    idle_meas_cfg_cnf.status = E_SUCCESS;
    status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  }
  }
  else
  {
    /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
    lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
    TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
    TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_FREQ_CONFLICT);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == service_id);
  }
}

void LteRrcTesteMBMSMbmsBestNeighReqCnf
(
  uint8 num_req_freq,
  uint16 *req_freq,
  uint8 num_cnf_freq,
  uint16 *cnf_freq
)
{
  lte_cphy_best_mbms_neigh_freq_cnf_s best_neigh_cnf;
  lte_cphy_best_mbms_neigh_freq_req_s *best_neigh_req;
  lte_errno_e status;
  uint32 buf_len, i;

  /* Receive the LTE_CPHY_BEST_MBMS_NEIGH_FREQ_REQ */
  lte_rrc_utf_get_next_ext_msg((byte **)&best_neigh_req,&buf_len);
  TF_ASSERT(best_neigh_req->msgr_hdr.id == LTE_CPHY_BEST_MBMS_NEIGH_FREQ_REQ);
  TF_ASSERT(best_neigh_req->num_freq == num_req_freq);
  for (i = 0; i < num_req_freq; i++)
  {
    TF_ASSERT(best_neigh_req->freq[i] == req_freq[i]);
  }

  // Prepare pdcpul_sdu_cnf to send to RRC
  lte_rrc_init_default_hdr(&best_neigh_cnf.msgr_hdr, LTE_CPHY_BEST_MBMS_NEIGH_FREQ_CNF);
  best_neigh_cnf.num_freq = num_cnf_freq;
  for (i = 0; i < num_cnf_freq; i++)
  {
    best_neigh_cnf.freq[i] = cnf_freq[i];
  }

  // Send pdcpul_sdu_cnf to RRC
  status = msgr_send(&best_neigh_cnf.msgr_hdr, sizeof(best_neigh_cnf));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcSendeMBMSActivateReqWithSAIForService
(
  uint8 service_id,
  uint8 session_id,
  uint16 sai_1,
  uint16 sai_2
)
{
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.debug_trace_id = 20;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = service_id;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = session_id;
  act_tmgi_req.num_sai_to_search = 2;
  act_tmgi_req.num_earfcn_to_search = 0;
  act_tmgi_req.sai_list[0] = sai_1;
  act_tmgi_req.sai_list[1] = sai_2;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();
}

void LteRrcSendeMBMSActivateReqForInVenueService
(
  uint8 service_id,
  uint8 session_id,
  uint16 sai
)
{
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.debug_trace_id = 20;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = service_id;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = session_id;
  act_tmgi_req.num_sai_to_search = 1;
  act_tmgi_req.sai_list[0] = sai;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();
}

void LteRrcSendeMBMSActService0DeactService1Req
(
  void
)
{
  lte_rrc_embms_act_deact_tmgi_req_s act_deact_tmgi_req;
  lte_errno_e status;

  /* Send request to act/deact TMGI */
  lte_rrc_init_default_hdr(&act_deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_DEACT_TMGI_REQ);

  /* Fill in the act session info */
  act_deact_tmgi_req.debug_trace_id = 20;
  act_deact_tmgi_req.act_session_info.tmgi.plmn_id.identity[0] = 0;
  act_deact_tmgi_req.act_session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_deact_tmgi_req.act_session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_deact_tmgi_req.act_session_info.tmgi.service_id[0] = 0;
  act_deact_tmgi_req.act_session_info.tmgi.service_id[1] = 0;
  act_deact_tmgi_req.act_session_info.tmgi.service_id[2] = 0;
  act_deact_tmgi_req.act_session_info.session_id_present = TRUE;
  act_deact_tmgi_req.act_session_info.session_id = 0;

  /* Fill in the deact session info */
  act_deact_tmgi_req.deact_session_info.tmgi.plmn_id.identity[0] = 0;
  act_deact_tmgi_req.deact_session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_deact_tmgi_req.deact_session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_deact_tmgi_req.deact_session_info.tmgi.service_id[0] = 0;
  act_deact_tmgi_req.deact_session_info.tmgi.service_id[1] = 0;
  act_deact_tmgi_req.deact_session_info.tmgi.service_id[2] = 1;
  act_deact_tmgi_req.deact_session_info.session_id_present = TRUE;
  act_deact_tmgi_req.deact_session_info.session_id = 1;

  status = msgr_send(&act_deact_tmgi_req.msg_hdr, sizeof(act_deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_DEACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();
}

void LteRrcTestMCCHSetup
(
  void
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  //TF_ASSERT(common_cfg_req->common_cfg_param.
  //          cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);



  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTestMCCHSetupGeneric
(
  lte_cphy_mbsfn_area_monitor_pattern_e monitor_pattern
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == monitor_pattern);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);



  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}


void LteRrcTestMCCHRelease
(
  uint8 area_id
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == area_id);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}


void LteRrcTestMCCHSetupForTwoAreas
(
  void
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  //TF_ASSERT(common_cfg_req->common_cfg_param.
  //          cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_ONE);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}


void LteRrcTestMTCHSetupArea0PMCH1LC2
(
  boolean test_oos,
  boolean rlc_cfg_changed
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  if (test_oos)
  {
    /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
    lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
    /* Make sure the message is valid */
    TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
    TF_ASSERT(oos_warn_ind_ptr != NULL);
    TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
    TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
    TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);
  }

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  //TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
  //                                                        LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Only if RLC config has changed req will be sent
  if (rlc_cfg_changed)
  {
    // ---------------------------------------------
    // We expect a rlcdl_cfg_req message from RRC for MTCH setup
    lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
    TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
    TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

    // Prepare rlcdl_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

    rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

    // Send rlcdl_cfg_cnf to RRC
    status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);
  }
}

void LteRrcTestMTCHSetupAreaForHO
(
  boolean test_oos,
  boolean rlc_cfg_changed
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  if (test_oos)
  {
    /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
    lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
    /* Make sure the message is valid */
    TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
    TF_ASSERT(oos_warn_ind_ptr != NULL);
    TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
    TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
    TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);
  }

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg2));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency == 1);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id == 498);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 0);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}

void LteRrcTestMTCHSetupArea0PMCHInvalidSubframeAllocationOneFrame
(
  boolean test_oos,
  boolean rlc_cfg_changed
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  if (test_oos)
  {
    /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
    lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
    /* Make sure the message is valid */
    TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
    TF_ASSERT(oos_warn_ind_ptr != NULL);
    TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
    TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
    TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);
  }

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg_invalid, sizeof(lte_rrc_test_embms_mcch_msg_invalid),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg_invalid));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG_NO_ACTION);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG_NO_ACTION);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NONE);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == 0);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);

}

void LteRrcTestMTCHSetupArea0PMCHInvalidSubframeAllocationFourFrame
(
  boolean test_oos,
  boolean rlc_cfg_changed
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  if (test_oos)
  {
    /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
    lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
    /* Make sure the message is valid */
    TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
    TF_ASSERT(oos_warn_ind_ptr != NULL);
    TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
    TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
    TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);
  }

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg_invalid1, sizeof(lte_rrc_test_embms_mcch_msg_invalid1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg_invalid1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG_NO_ACTION);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG_NO_ACTION);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NONE);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == 0);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}

void LteRrcTestMTCHSetupArea0PMCH1LC2With3PMCHs
(
  void
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_with_3_pmch_msg, sizeof(lte_rrc_test_embms_mcch_with_3_pmch_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_with_3_pmch_msg));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 3);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            sf_alloc_start == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            sf_alloc_end == 25);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[1].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[1].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_16RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[1].cfg.
            sf_alloc_start == 26);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[1].cfg.
            sf_alloc_end == 55);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[2].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[2].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[2].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[2].cfg.
            sf_alloc_start == 56);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[2].cfg.
            sf_alloc_end == 95);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 3);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
    // We expect a rlcdl_cfg_req message from RRC for MTCH setup
    lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
    TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
    TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 3);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

    // Prepare rlcdl_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

    rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

    // Send rlcdl_cfg_cnf to RRC
    status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTestMTCHSetupArea0Service1In2Areas
(
  boolean test_oos
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  if (test_oos)
  {
    /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
    lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
    /* Make sure the message is valid */
    TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
    TF_ASSERT(oos_warn_ind_ptr != NULL);
    TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
    TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
    TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
    TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);
  }

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // After OOS if MCCH did not change, then RLC config req will not be sent
  if (test_oos == FALSE)
  {
    // ---------------------------------------------
    // We expect a rlcdl_cfg_req message from RRC for MTCH setup
    lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
    TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
    TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

    // Prepare rlcdl_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

    rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

    // Send rlcdl_cfg_cnf to RRC
    status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);
  }
}

void LteRrcTestMTCHSetup
(
  uint8 area_id,
  uint8 pmch_id,
  uint8 lc_id
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == area_id);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[pmch_id - 1].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[pmch_id - 1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[pmch_id - 1].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == area_id);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == pmch_id);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == lc_id);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == area_id);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == pmch_id);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == lc_id);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}

void LteRrcTestMacCfgCnfForMTCHSetup
(
  void
)
{
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);
  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTestMTCHSetupGeneric
(
  uint8 area_id,
  uint8 pmch_id,
  uint8 lc_id,
  boolean test_rlc_cfg,
  lte_cphy_mbsfn_area_monitor_pattern_e mcch_monitor_pattern
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == mcch_monitor_pattern);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == area_id);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[pmch_id - 1].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[pmch_id - 1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[pmch_id - 1].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == area_id);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == pmch_id);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == lc_id);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  if (test_rlc_cfg)
  {
    // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == area_id);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == pmch_id);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == lc_id);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
  }

}

void LteRrcTestReleaseAllMTCH
(
  uint8 num_mtch_released
)
{

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0, i = 0;
  lte_errno_e status;

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RELEASE_ALL);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE_ALL);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == num_mtch_released);

  for (i = 0; i < num_mtch_released; i++)
  {
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[i] == i);
  }

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}

void LteRrcTestSendMCCHPDU
(
  lte_mbsfn_area_id_t area_id,
  lte_earfcn_t freq,
  uint16 sfn,
  uint8 *pdu_ptr,
  uint16 msg_size
)
{

  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_errno_e status;

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, pdu_ptr, msg_size, DSM_DS_SMALL_ITEM_POOL) == msg_size);
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  /* Populate MCCH PDU info */
  mcch_pdu_ind.area_id = area_id;
  mcch_pdu_ind.dl_cell_frequency = freq;
  mcch_pdu_ind.sfn.sys_fn = sfn;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTestMTCHSetupForService0MTCHReleaseForService1
(
  void
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].mrb_id == 37);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}


void LteRrcTestSendMCCHPDUAfterOOSForArea0
(
  void
)
{

  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_errno_e status;

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTestSendMCCHPDUAfterOOSForArea1
(
  void
)
{

  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_errno_e status;

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg2));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 1;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTestSendMCCHPDUWithSFAllocModForArea0
(
  void
)
{

  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_errno_e status;

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_sfalloc_mod_msg, sizeof(lte_rrc_test_embms_mcch_sfalloc_mod_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_sfalloc_mod_msg));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTestMTCHSetupArea0PMCH2LC1
(
  boolean test_ucast_oos,
  boolean test_mult_areas
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  if (test_ucast_oos)
  {
    /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
    lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
    /* Make sure the message is valid */
    TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
    TF_ASSERT(oos_warn_ind_ptr != NULL);
    TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
    TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
    TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 0);
  }

  LteRrcTestSendMCCHPDUAfterOOSForArea0();

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  if (test_ucast_oos)
  {
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  }
  else
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  }

  // If testing multiple areas
  if (test_mult_areas)
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
              cfg_action == LTE_L1_CONFIG);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  }
  else
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
              cfg_action == LTE_L1_CONFIG);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  }
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // For mcast oos, get the OOS warning for OOS cleared
  if (test_ucast_oos == FALSE)
  {
    /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
    lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
    /* Make sure the message is valid */
    TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
    TF_ASSERT(oos_warn_ind_ptr != NULL);
    TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
    TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
    TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 0);
  }

  if (test_ucast_oos)
  {
    // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  // If testing multiple areas
  if (test_mult_areas)
  {
    TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);
      TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
      TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
      TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);
  }
  else
  {
    TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
      TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
      TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);
    }


  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;


  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
  }


  if (test_mult_areas == FALSE)
  {
    // ---------------------------------------------
    /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
    lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
    /* Make sure the message is valid */
    TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
    TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
    TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
    TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 2);
  }

}

void LteRrcTestMTCHSetupAreaSfAllocModification
(
  void
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcTestSendMCCHPDUWithSFAllocModForArea0();

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 3);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg.sf_alloc_start == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg.sf_alloc_end == 50);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[1].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[1].
            cfg.sf_alloc_start == 51);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[1].
            cfg.sf_alloc_end == 100);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[2].
            cfg_action == LTE_L1_DECONFIG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 0);

  // ---------------------------------------------
  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 3);

  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);


  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);
  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}

void LteRrcTestActTMGICnfiAndActListIndForService1
(
  void
)
{
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  uint32 buf_len = 0;

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);
}

void LteRrcTestActTMGICnfiAndActListIndForServiceHO
(
  void
)
{
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  uint32 buf_len = 0;

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_TMGI_NOT_FOUND);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 35);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /*lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);*/
}


void LteRrcTestActTMGICnfiForInvalidSubframeAllocation
(
  void
)
{
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  uint32 buf_len = 0;

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_UNKNOWN);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);
}


void LteRrcTestSubsequentActTMGICnfiAndActListInd
(
  lte_rb_id_t mrb_id,
  byte service_id
)
{
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  uint32 buf_len = 0;

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == mrb_id);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == service_id);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 2);
}

void LteRrcTestActDeactTMGICnfiAndActListIndForService0
(
  void
)
{
  lte_rrc_embms_act_deact_tmgi_cnf_s *act_deact_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  uint32 buf_len = 0;

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_DEACT_TMGI_CNF);
  TF_ASSERT(act_deact_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_deact_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_deact_tmgi_cnf_ptr->act_bearer_info.mrb_id == 37);
  TF_ASSERT(act_deact_tmgi_cnf_ptr->act_bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_deact_tmgi_cnf_ptr->act_bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_deact_tmgi_cnf_ptr->act_bearer_info.session_info.tmgi.service_id[2] == 0);

  TF_ASSERT(act_deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_deact_tmgi_cnf_ptr->deact_bearer_info.mrb_id == 36);
  TF_ASSERT(act_deact_tmgi_cnf_ptr->deact_bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_deact_tmgi_cnf_ptr->deact_bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_deact_tmgi_cnf_ptr->deact_bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 37);
}

void LteRrcSendeMBMSDeactivateReqForService1
(
  void
)
{
  lte_rrc_embms_deact_tmgi_req_s deact_tmgi_req;
  lte_errno_e status;

  /* Send request to deactivate TMGI */
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);

  /* Fill in the session info */
  deact_tmgi_req.debug_trace_id = 25;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = 1;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();
}

void LteRrcSendeMBMSDeactivateReqForService1__WithCnf
(
  void
)
{
  lte_rrc_embms_deact_tmgi_req_s deact_tmgi_req;
  lte_errno_e status;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  /* Send request to deactivate TMGI */
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);

  /* Fill in the session info */
  deact_tmgi_req.debug_trace_id = 25;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = 1;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  //TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
  //          monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);
}

void LteRrcSendeMBMSDeactivateReqForService0
(
  void
)
{
  lte_rrc_embms_deact_tmgi_req_s deact_tmgi_req;
  lte_errno_e status;

  /* Send request to deactivate TMGI */
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);

  /* Fill in the session info */
  deact_tmgi_req.debug_trace_id = 25;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = 0;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = 0;

  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();
}

void LteRrcSendeMBMSDeactivateReqForService
(
  uint8 service_id
)
{
  lte_rrc_embms_deact_tmgi_req_s deact_tmgi_req;
  lte_errno_e status;

  /* Send request to deactivate TMGI */
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);

  /* Fill in the session info */
  deact_tmgi_req.debug_trace_id = 25;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = service_id;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();
}

void LteRrcTesteMBMSDeactivateCnfForService
(
  uint8 service_id
)
{
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  uint32 buf_len = 0;

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == service_id);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_SLEEP(100);
}

void LteRrcTesteMBMSActGuardTmrExpiry
(
  void
)
{
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  uint32 buf_len = 0;

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
}

void LteRrcTestMTCHRelease
(
  lte_rb_id_t mrb_id,
  byte service_id
)
{

  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == mrb_id);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == service_id);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
}


void LteRrcTestMTCHAndMCCHReleaseArea0PMCH1LC2
(
  void
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s)) ;
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RELEASE_ALL_EMBMBS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE_ALL_EMBMBS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}


void LteRrcTestDeactTMGICnfiAndActListIndForService1
(
  void
)
{
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  uint32 buf_len = 0;

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);
}


void LteRrcSendDisableReqTestCovStateAndStatusChange__Test
(
  void
)
{
  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_errno_e status;
  uint32 buf_len = 0;

  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");
  lte_rrc_utf_wait_for_done();

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");
}

void LteRrcTesteMBMSEnableDisableActDeact__Test
(
  uint8 i
)
{
  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_deact_tmgi_req_s deact_tmgi_req;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 1;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  /* First time activation, no cached MCCH */
  if (i == 0)
  {
    // We expect a common_cfg_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.
              cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              area_id == 0);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              cfg_action == LTE_L1_CONFIG);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
              mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);


    // Prepare common_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

    common_cfg_cnf.status = E_SUCCESS;
    common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

    // Send common_cfg_cnf to RRC
    status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);

    /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
    msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

    TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                           DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
    TF_ASSERT(dsm_ptr_mcch != NULL);

    att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
    msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

    mcch_pdu_ind.area_id = 0;
    mcch_pdu_ind.dl_cell_frequency = 1;
    mcch_pdu_ind.sfn.sys_fn = 65;

    // Send mcch_pdu_ind to RRC
    status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
    TF_ASSERT(status == E_SUCCESS);

    // We expect a common_cfg_req message from RRC for MTCH config
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                            LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
              cfg_action == LTE_L1_CONFIG);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
              schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

    // Prepare common_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

    common_cfg_cnf.status = E_SUCCESS;
    common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

    // Send common_cfg_cnf to RRC
    status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);

    // ---------------------------------------------
    // We expect a mac_cfg_req message from RRC for MTCH setup
    lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
    TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

    TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
    TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
    TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
    TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
    TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
    TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

    // Prepare mac_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

    mac_cfg_cnf.status = E_SUCCESS;

    // Send mac_cfg_cnf to RRC
    status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);

    // ---------------------------------------------
    // We expect a rlcdl_cfg_req message from RRC for MTCH setup
    lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
    TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
    TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

    // Prepare rlcdl_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

    rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

    // Send rlcdl_cfg_cnf to RRC
    status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);

    LteRrceMBMSGetAvailTmgiList(2);

    /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
    lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
    TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
    TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

    /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
    lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
    TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
    TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

    TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
    TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);
  }
  /* Cached MCCH present in MCCH DB */
  else
  {
    // We expect a common_cfg_req message from RRC for MTCH config
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                            LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
              cfg_action == LTE_L1_CONFIG);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
              schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

    // Prepare common_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

    common_cfg_cnf.status = E_SUCCESS;
    common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

    // Send common_cfg_cnf to RRC
    status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);

    LteRrceMBMSGetAvailTmgiList(2);

    // ---------------------------------------------
    // We expect a mac_cfg_req message from RRC for MTCH setup
    lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
    TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

    TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
    TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
    TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
    TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
    TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
    TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

    // Prepare mac_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

    mac_cfg_cnf.status = E_SUCCESS;

    // Send mac_cfg_cnf to RRC
    status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);

    // ---------------------------------------------
    // We expect a rlcdl_cfg_req message from RRC for MTCH setup
    lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
    TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
    TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

    // Prepare rlcdl_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

    rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

    // Send rlcdl_cfg_cnf to RRC
    status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);

    /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
    lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
    TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
    TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
    TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

    /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
    lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
    TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
    TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

    TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
    TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);

    /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
    msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

    TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                           DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
    TF_ASSERT(dsm_ptr_mcch != NULL);

    att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
    msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

    mcch_pdu_ind.area_id = 0;
    mcch_pdu_ind.dl_cell_frequency = 1;
    mcch_pdu_ind.sfn.sys_fn = 65 + 10*i;

    // Send mcch_pdu_ind to RRC
    status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
    TF_ASSERT(status == E_SUCCESS);

    // We expect a common_cfg_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.
              cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              area_id == 0);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              cfg_action == LTE_L1_CONFIG);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
              mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);

    // Prepare common_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

    common_cfg_cnf.status = E_SUCCESS;
    common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

    // Send common_cfg_cnf to RRC
    status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);
  }

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);

  /* Fill in the session info */
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = 1;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");

  lte_rrc_utf_wait_for_done();

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSDisableAfterActivate__Test
(
  void
)
{

  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_errno_e status;
  uint32 buf_len = 0;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);

  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  /* Send a Disable req to RRC */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");

  lte_rrc_utf_wait_for_done();

  LteRrcTestMTCHAndMCCHReleaseArea0PMCH1LC2();

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_OUT_OF_COVERAGE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // ---------------------------------------------
  // We expect LTE_RRC_EMBMS_STATUS_CHANGE_IND
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSDisableDuringActivate__Test
(
  void
)
{
  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_errno_e status;
  uint32 buf_len = 0;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  /* Send a Disable req to RRC */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");

  lte_rrc_utf_wait_for_done();

  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_UNKNOWN);

  LteRrcTestMCCHRelease(0);

  LteRrceMBMSGetAvailTmgiList(0);

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // ---------------------------------------------
  // We expect LTE_RRC_EMBMS_STATUS_CHANGE_IND
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSDisableDuringActivateWhenOneTMGIActive__Test
(
  void
)
{
  lte_rrc_embms_enable_req_s enable_req;
  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_errno_e status;
  uint32 buf_len = 0;

  // Activate one service
  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);

  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  LteRrcSendeMBMSActivateReqForService0();

  /* Send a Disable req to RRC */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_UNKNOWN);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s)) ;
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RELEASE_ALL_EMBMBS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE_ALL_EMBMBS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[1] == 1);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_OUT_OF_COVERAGE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // ---------------------------------------------
  // We expect LTE_RRC_EMBMS_STATUS_CHANGE_IND
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSDisableDuringDeactivate__Test
(
  void
)
{
  lte_rrc_stopped_indi_s stopped_indi;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_deactivate_req_s  deactivate_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

  lte_rrc_embms_enable_req_s enable_req;
  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;


  lte_cphy_stop_cnf_s       cphy_stop_cnf;

  lte_rrc_deactivate_cnf_s *deactivate_cnf;
  lte_cphy_stop_req_s      *cphy_stop_req;
  lte_mac_stop_req_msg_s *mac_stop_req;
  lte_mac_stop_cnf_msg_s  mac_stop_cnf;

  lte_rlc_stop_req_s *rlc_stop_req_ptr;
  lte_pdcp_stop_req_msg_s *pdcp_stop_req_ptr;

  lte_rlc_stop_cnf_s rlc_stop_cnf;
  lte_pdcp_stop_cnf_msg_s pdcp_stop_cnf;


  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);

  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Verify handling of Deactivate TMGI req
  LteRrcSendeMBMSDeactivateReqForService1();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);


  /* Send a Disable req to RRC */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");

  lte_rrc_utf_wait_for_done();

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // ---------------------------------------------
  // We expect LTE_RRC_EMBMS_STATUS_CHANGE_IND
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&enable_req.msg_hdr, LTE_RRC_EMBMS_ENABLE_REQ);
  status = msgr_send(&enable_req.msg_hdr, sizeof(enable_req));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect LTE_RRC_EMBMS_STATUS_CHANGE_IND
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == TRUE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // ---------------------------------------------
  // Prepare deactivate_req to send to RRC
  lte_rrc_init_default_hdr(&deactivate_req.msg_hdr, LTE_RRC_DEACTIVATE_REQ);
  deactivate_req.deactivate_reason = SYS_STOP_MODE_REASON_IRAT;

  // Send deactivate_req to RRC
  status = msgr_send(&deactivate_req.msg_hdr, sizeof(lte_rrc_deactivate_req_s));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();
  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  /* Verify the stop requests to L1/L2 */
 // LteRrcTestReselFromLteReselSuccess__Test();


  // ---------------------------------------------

  // Prepare deactivate_req to send to RRC
  lte_rrc_init_default_hdr(&deactivate_req.msg_hdr, LTE_RRC_DEACTIVATE_REQ);
  deactivate_req.deactivate_reason = SYS_STOP_MODE_REASON_IRAT;

  // Send deactivate_req to RRC
  status = msgr_send(&deactivate_req.msg_hdr, sizeof(lte_rrc_deactivate_req_s));
  TF_ASSERT(status == E_SUCCESS);

 // lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
  TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPUL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
  TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPDL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
  TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCUL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
  TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCDL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_stop_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_mac_stop_req_msg_s));
  TF_ASSERT(mac_stop_req->hdr.id == LTE_MAC_STOP_REQ);


  // First we expect LTE RRC to stop ML1
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_stop_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_stop_req_s));
  TF_ASSERT(cphy_stop_req->msgr_hdr.id == LTE_CPHY_STOP_REQ);

  // After successfully stopping ML1, send back back confimration
  lte_rrc_init_default_hdr(&cphy_stop_cnf.msgr_hdr, LTE_CPHY_STOP_CNF);
  cphy_stop_cnf.status = E_SUCCESS;

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr, LTE_PDCPUL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr, LTE_PDCPDL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr, LTE_RLCUL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr, LTE_RLCDL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare MAC_stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_stop_cnf.hdr, LTE_MAC_STOP_CNF);
  mac_stop_cnf.status = E_SUCCESS;

  // Send MAC_stop_cnf to RRC
  status = msgr_send(&mac_stop_cnf.hdr, sizeof(mac_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send cphy_stop_cnf to RRC
  status = msgr_send(&cphy_stop_cnf.msgr_hdr, sizeof(cphy_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a deactivate_cnf message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&deactivate_cnf, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_deactivate_cnf_s));
  TF_ASSERT(deactivate_cnf->msg_hdr.id == LTE_RRC_DEACTIVATE_CNF);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSDisableDuringDeactivateWhenOneTMGIActive__Test
(
  void
)
{
  lte_rrc_stopped_indi_s stopped_indi;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_deactivate_req_s  deactivate_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcTesteMBMSActTwoSvcInSameArea__Test();

  // Verify handling of Deactivate TMGI req
  LteRrcSendeMBMSDeactivateReqForService1();

  /* Send a Disable req to RRC */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");

  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RELEASE_ALL_EMBMBS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE_ALL_EMBMBS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_OUT_OF_COVERAGE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // ---------------------------------------------
  // We expect LTE_RRC_EMBMS_STATUS_CHANGE_IND
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  // ---------------------------------------------
  // Prepare deactivate_req to send to RRC
  lte_rrc_init_default_hdr(&deactivate_req.msg_hdr, LTE_RRC_DEACTIVATE_REQ);
  deactivate_req.deactivate_reason = SYS_STOP_MODE_REASON_IRAT;

  // Send deactivate_req to RRC
  status = msgr_send(&deactivate_req.msg_hdr, sizeof(lte_rrc_deactivate_req_s));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  /* Verify the stop requests to L1/L2 */
  LteRrcTestReselFromLteReselSuccess__Test();

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSHO__Test
(
  lte_rrc_test_cell_e src_cell,
  lte_rrc_test_cell_e target_cell,
  lte_rrc_test_sib_update_e group_index
)
{

  lte_pdcpdl_sdu_ind_msg_s pdcpdl_sdu_ind;
  dsm_item_type *dsm_ptr_cr1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_cr1;         /* Message attachment pointer */

  lte_cphy_handover_req_s *ho_req = NULL;
  lte_cphy_handover_cnf_s ho_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rlcul_cfg_req_s *rlcul_cfg_req;
  lte_rlc_cfg_cnf_s rlcul_cfg_cnf;

  lte_pdcpul_recfg_prep_req_msg_s *pdcpul_prep_req = NULL;
  lte_pdcpul_recfg_prep_cnf_msg_s pdcpul_prep_cnf;

  lte_pdcpul_cfg_req_msg_s *pdcpul_cfg_req;
  lte_pdcpul_cfg_cnf_msg_s pdcpul_cfg_cnf;

  lte_pdcpdl_cfg_req_msg_s *pdcpdl_cfg_req;
  lte_pdcpdl_cfg_cnf_msg_s pdcpdl_cfg_cnf;

  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req;

  lte_mac_access_req_msg_s *mac_access_req = NULL;
  lte_mac_access_cnf_msg_s mac_access_cnf;

  lte_mac_access_abort_req_msg_s *mac_access_abort_req_ptr = NULL;
  lte_mac_access_abort_cnf_msg_s mac_access_abort_cnf_msg;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;

  lte_cphy_conn_meas_cfg_req_s *cphy_meas_cfg_req;
  lte_cphy_conn_meas_cfg_cnf_s cphy_meas_cfg_cnf;

  lte_rrc_active_eps_bearer_update_ind_s *active_bearer_update;
  lte_rrc_config_completed_ind_s *config_completed_ind_ptr = NULL;

  lte_rrc_service_ind_s *svc_ind;

  lte_rrc_ul_data_req_s nas_data_req;
  lte_rrc_ul_data_cnf_s *nas_data_cnf;

  lte_cphy_conn_meas_report_ind_s cphy_meas_report_ind;

  uint32 buf_len;
  lte_errno_e status;

  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  // ---------------------------------------------
  // Prepare pdcpdl_sdu_ind to send ConnectionReconfiguration with Mobility unfi OTA msg to RRC

  msgr_init_hdr_attach(&pdcpdl_sdu_ind.hdr, MSGR_LTE_PDCPDL, LTE_PDCPDL_SDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_cr1,lte_rrc_test_embms_handover_msg ,
                         sizeof(lte_rrc_test_embms_handover_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_handover_msg));
  TF_ASSERT(dsm_ptr_cr1 != NULL);

  att_ptr_cr1 = msgr_get_attach(&pdcpdl_sdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_cr1, dsm_ptr_cr1);

  pdcpdl_sdu_ind.rb_cfg_idx = 33;                                 // Sent on SRB2

  // Send pdcpdl_sdu_ind to RRC
  status = msgr_send(&pdcpdl_sdu_ind.hdr, sizeof(pdcpdl_sdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a pdcpul_recfg_prep_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpul_prep_req,&buf_len);

  TF_ASSERT(sizeof(lte_pdcpul_recfg_prep_req_msg_s) == buf_len);
  TF_ASSERT(pdcpul_prep_req->hdr.id == LTE_PDCPUL_RECFG_PREP_REQ);
  TF_ASSERT(pdcpul_prep_req->cfg_reason == LTE_L2_CFG_HO);
  TF_ASSERT(pdcpul_prep_req->num_released_rb == 0);

  // Send the pdcpul_prep_cnf message back to RRC
  lte_rrc_init_default_hdr(&pdcpul_prep_cnf.hdr,LTE_PDCPUL_RECFG_PREP_CNF);
  /* Setting the fields in the LTE_PDCPUL_RECFG_PREP_CNF sent by PDCP */
  pdcpul_prep_cnf.status = E_SUCCESS;
  /* Send the LTE_PDCPUL_RECFG_PREP_CNF to LLC there by mimicing the action of PDCP */
  status = msgr_send(&pdcpul_prep_cnf.hdr, sizeof(pdcpul_prep_cnf));
  TF_ASSERT(status == E_SUCCESS);

	/* HO should result in ueinfo report collection*/
  lteRrcTestRLFUeInfoReqRsp__test(LTE_CPHY_UEINFO_RPT_MASK_MAX,FALSE);

  //-----------------------------------------------
  /* Catch the ACCESS_ABORT_REQ to MAC */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_access_abort_req_ptr,&buf_len);
  /* Make sure the ACCESS_ABORT_REQ is valid */
  TF_ASSERT(sizeof(lte_mac_access_abort_req_msg_s) == buf_len);

  /* Send ACCESS_ABORT_CNF to Config */
  /* Setting the header for internal RRC messages */
  lte_rrc_init_default_hdr(&mac_access_abort_cnf_msg.hdr,LTE_MAC_ACCESS_ABORT_CNF);
  mac_access_abort_cnf_msg.status = E_SUCCESS;
  status = msgr_send(&mac_access_abort_cnf_msg.hdr, sizeof(mac_access_abort_cnf_msg));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a cphy_handover_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&ho_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_handover_req_s));
  TF_ASSERT(ho_req->msgr_hdr.id == LTE_CPHY_HANDOVER_REQ);

  TF_ASSERT(ho_req->source_cell_info.phy_cell_id == cell[src_cell].phys_cell_id);
  TF_ASSERT(ho_req->source_cell_info.dl_cell_frequency == cell[src_cell].earfcn);
  TF_ASSERT(ho_req->ho_target_cell_info.target_cell_id == cell[target_cell].phys_cell_id);
  TF_ASSERT(ho_req->ho_target_cell_info.dl_cell_frequency == cell[target_cell].earfcn);
  TF_ASSERT(ho_req->ho_target_cell_info.dl_bandwidth == LTE_BW_NRB_25);

  TF_ASSERT(ho_req->common_mobility_cfg_param.cfg_mask ==
            (LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_UL_FREQ_CFG |
             LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_PDSCH_CFG |
             LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_PUCCH_CFG |
             LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_PUSCH_CFG |
             LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_SRS_CFG |
             LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_UL_POWER_CTRL |
             LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_PHICH_CFG |
             LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_ANTENNA_CFG |
             LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_UL_CYCLIC_PREFIX_LENGTH |
             LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_P_MAX |
             LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_NCELL_CFG));

  TF_ASSERT(ho_req->common_mobility_cfg_param.ul_freq_cfg.add_spectrum_emission == 1);
  TF_ASSERT(ho_req->common_mobility_cfg_param.ul_freq_cfg.ul_cell_frequency == 18001);
  TF_ASSERT(ho_req->common_mobility_cfg_param.ul_freq_cfg.ul_bandwidth == LTE_BW_NRB_25);

  TF_ASSERT(ho_req->common_mobility_cfg_param.pdsch_cfg_common.pb == LTE_L1_PB2);

  TF_ASSERT(ho_req->common_mobility_cfg_param.pucch_cfg_common.n_rb_cqi == 2);

  TF_ASSERT(ho_req->common_mobility_cfg_param.pusch_cfg_common.hopping_mode == LTE_L1_INTER_INTRA_SUB_FRAME_HOPPING);

  TF_ASSERT(ho_req->common_mobility_cfg_param.srs_cfg_common.enable == TRUE);

  TF_ASSERT(ho_req->common_mobility_cfg_param.ul_power_ctrl_common.alpha == LTE_L1_UL_POWER_CTRL_ALPHA_05);

  TF_ASSERT(ho_req->common_mobility_cfg_param.antenna_cfg_common.antenna_ports_count == LTE_L1_ANTENNA_INFO_PORTS_COUNT_1);

  TF_ASSERT(ho_req->common_mobility_cfg_param.phich_cfg.phich_duration == LTE_L1_PHICH_DURATION_EXTENDED);

  TF_ASSERT(ho_req->dedicated_cfg_param.cfg_mask == LTE_CPHY_DEDICATED_CFG_MASK_BIT_UE_RELATED_CFG);

  TF_ASSERT(ho_req->dedicated_cfg_param.ue_related_cfg.crnti == 0x100);

  // Prepare cphy_handover_cnf to send to RRC
  lte_rrc_init_default_hdr(&ho_cnf.msgr_hdr,LTE_CPHY_HANDOVER_CNF);

  ho_cnf.com_mob_parm_validity = (LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_UL_FREQ_CFG |
                                  LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_PDSCH_CFG |
                                  LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_PUCCH_CFG |
                                  LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_PUSCH_CFG |
                                  LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_SRS_CFG |
                                  LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_UL_POWER_CTRL |
                                  LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_PHICH_CFG |
                                  LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_ANTENNA_CFG |
                                  LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_UL_CYCLIC_PREFIX_LENGTH |
                                  LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_P_MAX |
                                  LTE_CPHY_COMMON_MOBILITY_CFG_MASK_BIT_NCELL_CFG) ;

  ho_cnf.dedicated_parm_validity = LTE_CPHY_DEDICATED_CFG_MASK_BIT_UE_RELATED_CFG ;
  ho_cnf.status = E_SUCCESS;

  // Send the cphy_handover_cnf to RRC
  status = msgr_send(&ho_cnf.msgr_hdr, sizeof(ho_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
  // Prepare nas_data_req to send to RRC - DT is expected to block this
  lte_rrc_init_default_hdr(&nas_data_req.msg_hdr, LTE_RRC_UL_DATA_REQ);
  nas_data_req.trans_id = 5;
  nas_data_req.priority = LTE_RRC_UL_NAS_MSG_PRIORITY_LOW;
  nas_data_req.cnf_is_reqd = TRUE;
  // Send nas_data_req to RRC
  status = msgr_send(&nas_data_req.msg_hdr, sizeof(nas_data_req));
  TF_ASSERT(status == E_SUCCESS);
  // ---------------------------------------------
  // Send a measureent report to RRC  - MH is expected to block this and not send it out
  lte_rrc_init_default_hdr(&cphy_meas_report_ind.msgr_hdr, LTE_CPHY_MEAS_REPORT_IND);
  cphy_meas_report_ind.meas_id = 1;
  cphy_meas_report_ind.auto_delete_meas_id = FALSE;
  cphy_meas_report_ind.serving_rsrp = 97;
  cphy_meas_report_ind.serving_rsrq = 34;
  cphy_meas_report_ind.neigh_results.size = 0;
  // Send cphy_conn_meas_report_ind to RRC
  status = msgr_send(&cphy_meas_report_ind.msgr_hdr, sizeof(lte_cphy_conn_meas_report_ind_s));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_cfg_req,&buf_len);
  TF_ASSERT(sizeof(lte_mac_cfg_req_msg_s) == buf_len);
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == (LTE_MAC_RACH_CFG_BM |
                                                      LTE_MAC_C_RNTI_CFG_BM));
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_HO);
  TF_ASSERT(mac_cfg_req->cfg_data.crnti_cfg == 0x100);

  TF_ASSERT(mac_cfg_req->cfg_data.rach_cfg->l1_rach.log_root_seq_index == 5);
  TF_ASSERT(mac_cfg_req->cfg_data.rach_cfg->preamble_initial_power == -120);

  // Send the mac_cfg_cnf message back to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr,LTE_MAC_CFG_CNF);
  mac_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte **)&rlcdl_cfg_req,&buf_len);
  TF_ASSERT(sizeof(lte_rlcdl_cfg_req_s) == buf_len);
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);

  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_HO);
  TF_ASSERT(rlcdl_cfg_req->num_modified_rb == 1);
  TF_ASSERT(rlcdl_cfg_req->modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(rlcdl_cfg_req->modified_rb[0].action == LTE_RLC_RB_ACTION_MODIFY);
  TF_ASSERT(rlcdl_cfg_req->num_released_rb == 0);

  // Send rlc_cfg_cnf_msg message back to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr,LTE_RLCDL_CFG_CNF);
  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcul_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte **)&rlcul_cfg_req,&buf_len);
  TF_ASSERT(sizeof(lte_rlcul_cfg_req_s) == buf_len);
  TF_ASSERT(rlcul_cfg_req->msg_hdr.id == LTE_RLCUL_CFG_REQ);

  TF_ASSERT(rlcul_cfg_req->cfg_reason == LTE_L2_CFG_HO);
  TF_ASSERT(rlcul_cfg_req->num_modified_rb == 2);
  TF_ASSERT(rlcul_cfg_req->modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(rlcul_cfg_req->modified_rb[0].action == LTE_RLC_RB_ACTION_MODIFY);
  TF_ASSERT(rlcul_cfg_req->modified_rb[1].action == LTE_RLC_RB_ACTION_MODIFY);
  TF_ASSERT(rlcul_cfg_req->modified_rb[1].rb_cfg_idx == 3);
  TF_ASSERT(rlcul_cfg_req->rb_cfg_base_ptr[33].cfg.am_cfg.t_poll_retransmit == 45);
  TF_ASSERT(rlcul_cfg_req->rb_cfg_base_ptr[3].pdcp_status_required = TRUE);

  // Send rlc_cfg_cnf message back to RRC
  lte_rrc_init_default_hdr(&rlcul_cfg_cnf.msg_hdr,LTE_RLCUL_CFG_CNF);
  rlcul_cfg_cnf.cfg_status = E_SUCCESS;
  status = msgr_send(&rlcul_cfg_cnf.msg_hdr, sizeof(rlcul_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a pdcpdl_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpdl_cfg_req,&buf_len);
  TF_ASSERT(sizeof(lte_pdcpdl_cfg_req_msg_s) == buf_len);
  TF_ASSERT(pdcpdl_cfg_req->hdr.id == LTE_PDCPDL_CFG_REQ);

  TF_ASSERT(pdcpdl_cfg_req->cfg_reason == LTE_L2_CFG_HO);
  TF_ASSERT(pdcpdl_cfg_req->num_add_modified_rb == 1);
  TF_ASSERT(pdcpdl_cfg_req->add_modified_rb[0].cfg_act == LTE_PDCP_CFG_ACT_MODIFIED);
  TF_ASSERT(pdcpdl_cfg_req->add_modified_rb[0].rb_cfg_idx == 3);
  TF_ASSERT(pdcpdl_cfg_req->num_released_rb == 0);

  TF_ASSERT(TRUE == pdcpdl_cfg_req->security_cfg_valid);
  LteRrcTestVerifySecConfigHandover2(&(pdcpdl_cfg_req->security_cfg));


  // send pdcp_cfg_cnf message back to RRC
  lte_rrc_init_default_hdr(&pdcpdl_cfg_cnf.hdr,LTE_PDCPDL_CFG_CNF);
  pdcpdl_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&pdcpdl_cfg_cnf.hdr, sizeof(pdcpdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a pdcpul_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpul_cfg_req,&buf_len);
  TF_ASSERT(sizeof(lte_pdcpul_cfg_req_msg_s) == buf_len);
  TF_ASSERT(pdcpul_cfg_req->hdr.id == LTE_PDCPUL_CFG_REQ);

  TF_ASSERT(pdcpul_cfg_req->cfg_reason == LTE_L2_CFG_HO);
  TF_ASSERT(pdcpul_cfg_req->num_add_modified_rb == 1);
  TF_ASSERT(pdcpul_cfg_req->add_modified_rb[0].cfg_act == LTE_PDCP_CFG_ACT_MODIFIED);
  TF_ASSERT(pdcpul_cfg_req->add_modified_rb[0].rb_cfg_idx == 3);
  TF_ASSERT(pdcpul_cfg_req->num_released_rb == 0);

  TF_ASSERT(TRUE == pdcpul_cfg_req->security_cfg_valid);
  LteRrcTestVerifySecConfigHandover2(&(pdcpul_cfg_req->security_cfg));

  //Send pdcp_cfg_cnf message back to RRC
  lte_rrc_init_default_hdr(&pdcpul_cfg_cnf.hdr,LTE_PDCPUL_CFG_CNF);
  pdcpul_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&pdcpul_cfg_cnf.hdr, sizeof(pdcpul_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a cphy_conn_meas_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_conn_meas_cfg_req_s));
  TF_ASSERT(cphy_meas_cfg_req->msgr_hdr.id == LTE_CPHY_CONN_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.phy_cell_id == cell[LTE_RRC_TEST_CELL_2].phys_cell_id);
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.dl_cell_frequency == cell[LTE_RRC_TEST_CELL_2].earfcn);

  // Verify valid and mod bitmasks
  TF_ASSERT(cphy_meas_cfg_req->meas_obj_valid_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req->meas_id_valid_bitmask == 0);
  TF_ASSERT(cphy_meas_cfg_req->report_cfg_valid_bitmask == 0);
  TF_ASSERT(cphy_meas_cfg_req->meas_obj_mod_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req->meas_id_mod_bitmask == 0);
  TF_ASSERT(cphy_meas_cfg_req->report_cfg_mod_bitmask == 0);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[0].type == LTE_CPHY_MEAS_OBJ_TYPE_EUTRA);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[0].obj_info.eutra.carrier_freq == 1);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[0].obj_info.eutra.meas_bandwidth == LTE_CPHY_MEAS_BANDWIDTH_25);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[0].obj_info.eutra.freq_offset == 0);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[0].obj_info.eutra.neigh_cells.active_bitmask == 0);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[0].obj_info.eutra.blacklisted_cells.active_bitmask == 0);

  // Prepare cphy_conn_meas_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_meas_cfg_cnf.msgr_hdr, LTE_CPHY_CONN_MEAS_CFG_CNF);
  cphy_meas_cfg_cnf.status = E_SUCCESS;

  // Send cphy_conn_meas_cnf to RRC
  status = msgr_send(&cphy_meas_cfg_cnf.msgr_hdr, sizeof(lte_cphy_conn_meas_cfg_cnf_s));
  TF_ASSERT(status == E_SUCCESS);


  // We expect a ConnectionReconfigurationComplete OTA message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_sdu_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_sdu_req_msg_s));
  TF_ASSERT(pdcpul_sdu_req->hdr.id == LTE_PDCPUL_SDU_REQ);

  TF_ASSERT(pdcpul_sdu_req->rb_cfg_idx == 33);

  /*Make sure that the Integrity protect flag is set to TRUE*/
  TF_ASSERT(TRUE == pdcpul_sdu_req->integrity_protect);

  /*Make sure that the Cipher flag is set to TRUE*/
  TF_ASSERT(TRUE == pdcpul_sdu_req->cipher);

  // ---------------------------------------------
  // We expect a mac_access_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_access_req,&buf_len);
  TF_ASSERT(sizeof(lte_mac_access_req_msg_s) == buf_len);
  TF_ASSERT(mac_access_req->hdr.id == LTE_MAC_ACCESS_REQ);
  TF_ASSERT(mac_access_req->access_info.access_reason == LTE_MAC_ACCESS_REASON_HAND_OVER);
  TF_ASSERT(mac_access_req->access_info.raid == 1);
  TF_ASSERT(mac_access_req->access_info.raid_mask == 1);

  LteRrcTestSendMCCHPDU(0, 1, 65, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2));

}


void LteRrcTesteMBMSMCCHRelAfterHO__Test
(
  void
)
{

  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_errno_e status;
  uint32 buf_len = 0;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  // Trigger HO here
  LteRrcTesteMBMSHO__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_SIB_UPDATE_0);

  /* Send a Disable req to RRC */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");

  lte_rrc_utf_wait_for_done();

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_UNKNOWN);

  LteRrcTestMCCHRelease(0);
  LteRrceMBMSGetAvailTmgiList(0);
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // ---------------------------------------------
  // We expect LTE_RRC_EMBMS_STATUS_CHANGE_IND
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

}


void LteRrcTesteMBMSInvalidSubFrameAllocationOneFrame__Test
(
  void
)
{

  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_errno_e status;
  uint32 buf_len = 0;
  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCHInvalidSubframeAllocationOneFrame(FALSE, TRUE);

  LteRrcTestActTMGICnfiForInvalidSubframeAllocation();

}

void LteRrcTesteMBMSInvalidSubFrameAllocationFourFrame__Test
(
  void
)
{

  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_errno_e status;
  uint32 buf_len = 0;
  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCHInvalidSubframeAllocationFourFrame(FALSE, TRUE);

  LteRrcTestActTMGICnfiForInvalidSubframeAllocation();

}

void LteRrcTesteMBMSLTEStoppedAfterActivate__Test
(
  void
)
{
  lte_rrc_stopped_indi_s stopped_indi;
  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_deactivate_req_s  deactivate_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  lte_cphy_stop_cnf_s       cphy_stop_cnf;

  lte_rrc_deactivate_cnf_s *deactivate_cnf;
  lte_cphy_stop_req_s      *cphy_stop_req;
  lte_mac_stop_req_msg_s *mac_stop_req;
  lte_mac_stop_cnf_msg_s  mac_stop_cnf;

  lte_rlc_stop_req_s *rlc_stop_req_ptr;
  lte_pdcp_stop_req_msg_s *pdcp_stop_req_ptr;

  lte_rlc_stop_cnf_s rlc_stop_cnf;
  lte_pdcp_stop_cnf_msg_s pdcp_stop_cnf;


  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);

  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // ---------------------------------------------
  // Prepare deactivate_req to send to RRC
  lte_rrc_init_default_hdr(&deactivate_req.msg_hdr, LTE_RRC_DEACTIVATE_REQ);
  deactivate_req.deactivate_reason = SYS_STOP_MODE_REASON_IRAT;

  // Send deactivate_req to RRC
  status = msgr_send(&deactivate_req.msg_hdr, sizeof(lte_rrc_deactivate_req_s));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RELEASE_ALL);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_LTE_STOPPED);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // We expect LTE_RRC_EMBMS_COVERAGE_STATE_IND thrown because of LTE being stopped
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE_ALL);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Verify the stop requests to L1/L2 */
//  LteRrcTestReselFromLteReselSuccess__Test();


  // ---------------------------------------------

  // Prepare deactivate_req to send to RRC
  lte_rrc_init_default_hdr(&deactivate_req.msg_hdr, LTE_RRC_DEACTIVATE_REQ);
  deactivate_req.deactivate_reason = SYS_STOP_MODE_REASON_IRAT;

  // Send deactivate_req to RRC
  status = msgr_send(&deactivate_req.msg_hdr, sizeof(lte_rrc_deactivate_req_s));
  TF_ASSERT(status == E_SUCCESS);

  //lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
  TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPUL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
  TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPDL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
  TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCUL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
  TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCDL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_stop_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_mac_stop_req_msg_s));
  TF_ASSERT(mac_stop_req->hdr.id == LTE_MAC_STOP_REQ);


  // First we expect LTE RRC to stop ML1
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_stop_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_stop_req_s));
  TF_ASSERT(cphy_stop_req->msgr_hdr.id == LTE_CPHY_STOP_REQ);

  // After successfully stopping ML1, send back back confimration
  lte_rrc_init_default_hdr(&cphy_stop_cnf.msgr_hdr, LTE_CPHY_STOP_CNF);
  cphy_stop_cnf.status = E_SUCCESS;

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr, LTE_PDCPUL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr, LTE_PDCPDL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr, LTE_RLCUL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr, LTE_RLCDL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare MAC_stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_stop_cnf.hdr, LTE_MAC_STOP_CNF);
  mac_stop_cnf.status = E_SUCCESS;

  // Send MAC_stop_cnf to RRC
  status = msgr_send(&mac_stop_cnf.hdr, sizeof(mac_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send cphy_stop_cnf to RRC
  status = msgr_send(&cphy_stop_cnf.msgr_hdr, sizeof(cphy_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a deactivate_cnf message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&deactivate_cnf, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_deactivate_cnf_s));
  TF_ASSERT(deactivate_cnf->msg_hdr.id == LTE_RRC_DEACTIVATE_CNF);

  // Verify handling of Activate TMGI req after LTE is stopped
  LteRrcSendeMBMSActivateReqForService1();

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_UCAST_OOS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);

  // Verify handling of Activate TMGI req after LTE is stopped
  LteRrcSendeMBMSDeactivateReqForService1();

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->debug_trace_id == 25);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS_ALREADY_DONE);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  // Test eMBMS disable handling
  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");

  lte_rrc_utf_wait_for_done();

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTestDeactivateWheneMBMSEnabled__Test()
{
  lte_rrc_deactivate_req_s  deactivate_req;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_cphy_stop_cnf_s       cphy_stop_cnf;
  uint32                    buf_len;
  lte_errno_e               status;
  lte_rrc_deactivate_cnf_s *deactivate_cnf;
  lte_cphy_stop_req_s      *cphy_stop_req;
  lte_mac_stop_req_msg_s *mac_stop_req;
  lte_mac_stop_cnf_msg_s  mac_stop_cnf;

  lte_rlc_stop_req_s *rlc_stop_req_ptr;
  lte_pdcp_stop_req_msg_s *pdcp_stop_req_ptr;

  lte_rlc_stop_cnf_s rlc_stop_cnf;
  lte_pdcp_stop_cnf_msg_s pdcp_stop_cnf;

  // ---------------------------------------------

  // Prepare deactivate_req to send to RRC
  lte_rrc_init_default_hdr(&deactivate_req.msg_hdr, LTE_RRC_DEACTIVATE_REQ);
  deactivate_req.deactivate_reason = SYS_STOP_MODE_REASON_IRAT;

  // Send deactivate_req to RRC
  status = msgr_send(&deactivate_req.msg_hdr, sizeof(lte_rrc_deactivate_req_s));
  TF_ASSERT(status == E_SUCCESS);
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);
  // We expect LTE_RRC_EMBMS_COVERAGE_STATE_IND thrown because of LTE being stopped
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  lte_rrc_utf_get_next_ext_msg((byte **)&pdcp_stop_req_ptr,&buf_len);
  TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
  TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPUL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
  TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPDL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
  TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCUL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
  TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCDL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_stop_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_mac_stop_req_msg_s));
  TF_ASSERT(mac_stop_req->hdr.id == LTE_MAC_STOP_REQ);


  // First we expect LTE RRC to stop ML1
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_stop_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_stop_req_s));
  TF_ASSERT(cphy_stop_req->msgr_hdr.id == LTE_CPHY_STOP_REQ);

  // After successfully stopping ML1, send back back confimration
  lte_rrc_init_default_hdr(&cphy_stop_cnf.msgr_hdr, LTE_CPHY_STOP_CNF);
  cphy_stop_cnf.status = E_SUCCESS;

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr, LTE_PDCPUL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr, LTE_PDCPDL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr, LTE_RLCUL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr, LTE_RLCDL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare MAC_stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_stop_cnf.hdr, LTE_MAC_STOP_CNF);
  mac_stop_cnf.status = E_SUCCESS;

  // Send MAC_stop_cnf to RRC
  status = msgr_send(&mac_stop_cnf.hdr, sizeof(mac_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send cphy_stop_cnf to RRC
  status = msgr_send(&cphy_stop_cnf.msgr_hdr, sizeof(cphy_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a deactivate_cnf message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&deactivate_cnf, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_deactivate_cnf_s));
  TF_ASSERT(deactivate_cnf->msg_hdr.id == LTE_RRC_DEACTIVATE_CNF);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();

}/* LteRrcTestDeactivateWheneMBMSEnabled__Test */

void LteRrcTesteMBMSCombinedActDeact__Test
(
  void
)
{

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  LteRrcSendeMBMSActService0DeactService1Req();

  LteRrcTestMTCHSetupForService0MTCHReleaseForService1();

  LteRrcTestActDeactTMGICnfiAndActListIndForService0();

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActInConnModeWithNoSIB15__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{


  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib13_size;
  uint8 *sib13_ptr = NULL;

  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;
  lte_errno_e status;
  uint32 buf_len;

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  LteRrcSendeMBMSActivateReqForService1();

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 ));

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13));

  // ---------------------------------------------
  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_100;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;

  mib_ind.freq = cell[cell_index].earfcn;
  mib_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  mib_ind.sfn = 15;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB13));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB13 to RRC

  sib13_ptr = (cell[cell_index].sibs_ptr[group_index])->sib13_ptr;
  sib13_size = (cell[cell_index].sibs_ptr[group_index])->sib13_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
                         sib13_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib13_size);
  TF_ASSERT(dsm_ptr_sib13 != NULL);

  att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  LteRrcTestMCCHSetup();

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(0, 1, 2);

  LteRrceMBMSGetAvailTmgiList(2);

  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Release the unicast bearers
  LteRrcTestConnectionRelease1__Test(cell_index, FALSE);

  // Verify ConnToIdle steps
  LteRrcTestCampingAndLowerLayerConfigConnToIdleGeneric__Test(cell_index, group_index);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));

}

void LteRrcTesteMBMSConnModeLTEStoppedAfterActivate__Test
(
  lte_rrc_test_cell_e cell_index
)
{
  lte_rrc_embms_enable_req_s enable_req;
  lte_rrc_stopped_indi_s stopped_indi;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_deactivate_req_s  deactivate_req;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  lte_pdcpul_cfg_req_msg_s *pdcpul_cfg_req;
  lte_pdcpul_cfg_cnf_msg_s pdcpul_cfg_cnf;

  lte_pdcpdl_cfg_req_msg_s *pdcpdl_cfg_req;
  lte_pdcpdl_cfg_cnf_msg_s pdcpdl_cfg_cnf;

  lte_cphy_stop_cnf_s       cphy_stop_cnf;

  lte_rrc_deactivate_cnf_s *deactivate_cnf;
  lte_cphy_stop_req_s      *cphy_stop_req;
  lte_mac_stop_req_msg_s *mac_stop_req;
  lte_mac_stop_cnf_msg_s  mac_stop_cnf;

  lte_rlc_stop_req_s *rlc_stop_req_ptr;
  lte_pdcp_stop_req_msg_s *pdcp_stop_req_ptr;

  lte_rlc_stop_cnf_s rlc_stop_cnf;
  lte_pdcp_stop_cnf_msg_s pdcp_stop_cnf;

  lte_rrc_conn_rel_ind_s *conn_rel_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&enable_req.msg_hdr, LTE_RRC_EMBMS_ENABLE_REQ);
  status = msgr_send(&enable_req.msg_hdr, sizeof(enable_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("Sent LTE_RRC_EMBMS_ENABLE_REQ \n");

  lte_rrc_utf_wait_for_done();

  /* Get eMBMS coverage status indication*/
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == TRUE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 1;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);


  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrceMBMSGetAvailTmgiList(2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // ---------------------------------------------
  // Prepare deactivate_req to send to RRC
  lte_rrc_init_default_hdr(&deactivate_req.msg_hdr, LTE_RRC_DEACTIVATE_REQ);
  deactivate_req.deactivate_reason = SYS_STOP_MODE_REASON_ALT_SCAN;

  // Send deactivate_req to RRC
  status = msgr_send(&deactivate_req.msg_hdr, sizeof(lte_rrc_deactivate_req_s));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  // Test Connection Release
  LteRrcTestConnectionRelease4__Test(cell_index, LTE_RRC_CONN_REL_RLF);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RELEASE_ALL);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);
  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_LTE_STOPPED);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // We expect LTE_RRC_EMBMS_COVERAGE_STATE_IND thrown because of LTE being stopped
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE_ALL);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Verify the stop requests to L1/L2 */
//  LteRrcTestReselFromLteReselSuccess__Test();


  // ---------------------------------------------

  // Prepare deactivate_req to send to RRC
  lte_rrc_init_default_hdr(&deactivate_req.msg_hdr, LTE_RRC_DEACTIVATE_REQ);
  deactivate_req.deactivate_reason = SYS_STOP_MODE_REASON_IRAT;

  // Send deactivate_req to RRC
  status = msgr_send(&deactivate_req.msg_hdr, sizeof(lte_rrc_deactivate_req_s));
  TF_ASSERT(status == E_SUCCESS);



  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
  TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPUL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
  TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPDL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
  TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCUL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
  TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCDL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_stop_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_mac_stop_req_msg_s));
  TF_ASSERT(mac_stop_req->hdr.id == LTE_MAC_STOP_REQ);


  // First we expect LTE RRC to stop ML1
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_stop_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_stop_req_s));
  TF_ASSERT(cphy_stop_req->msgr_hdr.id == LTE_CPHY_STOP_REQ);

  // After successfully stopping ML1, send back back confimration
  lte_rrc_init_default_hdr(&cphy_stop_cnf.msgr_hdr, LTE_CPHY_STOP_CNF);
  cphy_stop_cnf.status = E_SUCCESS;

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr, LTE_PDCPUL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr, LTE_PDCPDL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr, LTE_RLCUL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr, LTE_RLCDL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare MAC_stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_stop_cnf.hdr, LTE_MAC_STOP_CNF);
  mac_stop_cnf.status = E_SUCCESS;

  // Send MAC_stop_cnf to RRC
  status = msgr_send(&mac_stop_cnf.hdr, sizeof(mac_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send cphy_stop_cnf to RRC
  status = msgr_send(&cphy_stop_cnf.msgr_hdr, sizeof(cphy_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a deactivate_cnf message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&deactivate_cnf, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_deactivate_cnf_s));
  TF_ASSERT(deactivate_cnf->msg_hdr.id == LTE_RRC_DEACTIVATE_CNF);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSCfgCnfDuringMcchSetupFailure__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_oos_ind_s oos_ind;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  uint32 buf_len = 0;
  lte_errno_e status;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */


 /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.debug_trace_id = 20;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 1;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  /*------------------------MCCH SETUP----------------------*/
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);



  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();
  /*------------------------MCCH SETUP ENDS----------------------*/

  /*Prepare MCCH PDU indication with invalid data.*/

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg_SFallocEnd_invalid, sizeof(lte_rrc_test_embms_mcch_msg_SFallocEnd_invalid),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg_SFallocEnd_invalid));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);
  TF_MSG("PDU SENT");
  lte_rrc_utf_wait_for_done();

 // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);
  common_cfg_cnf.status = E_SUCCESS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status != LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);

  LteRrceMBMSGetAvailTmgiList(2);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSCfgCnfDuringMcchReleaseFailure__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rlcul_cfg_req_s *rlcul_cfg_req;
  lte_rlc_cfg_cnf_s rlcul_cfg_cnf;

  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

  lte_cphy_rl_failure_ind_s rl_fail_ind;
  lte_rrc_service_ind_s *service_ind_ptr = NULL;


  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s)) ;
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);

  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  status = msgr_send(&rl_fail_ind.msg_hdr, sizeof(rl_fail_ind));
  LTE_ASSERT(status == E_SUCCESS);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_CANCELED;
  common_cfg_cnf.common_cfg_validity = common_cfg_req->common_cfg_param.cfg_mask ;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);


  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

    // ---------------------------------------------
    // We expect a rlcdl_cfg_req message from RRC for MTCH setup
    lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
    TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
    TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);

    // Prepare rlcdl_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

    rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

    // Send rlcdl_cfg_cnf to RRC
    status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);

    /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");


  /* Test the RLF configuration steps at LLC prior to Cell Selection */
  LteRrcTestRLFConfigPriorToCellSelectionGeneric__Test();

  // ---------------------------------------------

  /* At this point, CRE should then initiate cell selection with CSP which causes
    CSP to send service_ind message, indicating NO SERVICE, to NAS
  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_SSAC_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);*/

  // We expect a service_ind message, indicating NO SERVICE from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind_ptr->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind_ptr != NULL);
  TF_ASSERT(service_ind_ptr->svc_status == LTE_RRC_SVC_STATUS_NOT_AVAILABLE);

}

void LteRrcTesteMBMSUcastOOSDuringActivate__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_oos_ind_s oos_ind;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();


  // ---------------------------------------------
  // Prepare oos_ind to send to RRC
  lte_rrc_init_default_hdr(&oos_ind.msgr_hdr, LTE_CPHY_OOS_IND);
  oos_ind.oos_reason = LTE_CPHY_OOS_REASON_NORMAL;
  oos_ind.serv_cell_info.dl_cell_frequency = 1;
  oos_ind.serv_cell_info.phy_cell_id = 500;

  // Send oos_ind to RRC
  status = msgr_send(&oos_ind.msgr_hdr, sizeof(oos_ind));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  // Test the CPHY abort, followed by No service to NAS
  LteRrcTestCPHYAbortandNoService__Test(FALSE);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_UCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 0);

  // Test subsequent service request and camping
  LteRrcTestServiceRequestBandScanSuccess4__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionOnSameCellAfterOOSEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s)) ;
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU for Area0
  LteRrcTestSendMCCHPDUAfterOOSForArea0();

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to tear down MTCH / MCCH in area 1
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to tear down MTCH / MCCH in area 1
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSDeactivateDuringUcastOOS__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_oos_ind_s oos_ind;
  lte_cphy_abort_req_s *cphy_abort_req_ptr = NULL;
  lte_cphy_abort_cnf_s cphy_abort_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_deactivate_req_s  deactivate_req;
  lte_rrc_service_ind_s *service_ind_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Deactivate service 1
  LteRrcSendeMBMSDeactivateReqForService1();

  LteRrcTestEmbmsCphyCommonCfg__Test((LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                      LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  // ---------------------------------------------
  // Prepare oos_ind to send to RRC
  lte_rrc_init_default_hdr(&oos_ind.msgr_hdr, LTE_CPHY_OOS_IND);
  oos_ind.oos_reason = LTE_CPHY_OOS_REASON_NORMAL;
  oos_ind.serv_cell_info.dl_cell_frequency = 1;
  oos_ind.serv_cell_info.phy_cell_id = 500;

  // Send oos_ind to RRC
  status = msgr_send(&oos_ind.msgr_hdr, sizeof(oos_ind));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // ---------------------------------------------
  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // We expect a service_ind message, indicating NO SERVICE from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind_ptr->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind_ptr != NULL);
  TF_ASSERT(service_ind_ptr->svc_status == LTE_RRC_SVC_STATUS_NOT_AVAILABLE);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  /* Catch the CPHY_ABORT_REQ sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&cphy_abort_req_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_cphy_abort_req_s) == buf_len);
  TF_ASSERT(cphy_abort_req_ptr != NULL);
  TF_ASSERT(cphy_abort_req_ptr->msgr_hdr.id == LTE_CPHY_ABORT_REQ);

  // Prepare cphy_abort_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_abort_cnf.msgr_hdr, LTE_CPHY_ABORT_CNF);
  cphy_abort_cnf.status = E_SUCCESS;
  // Send cphy_abort_cnf to RRC
  status = msgr_send(&cphy_abort_cnf.msgr_hdr, sizeof(cphy_abort_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // Test subsequent service request and camping
  LteRrcTestServiceRequestBandScanSuccess4__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionOnSameCellAfterOOSEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSMcastOOSRecoverySuccess__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2With3PMCHs();
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Let MCCH timer expire
  TF_SLEEP(10000);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to tear down MTCH / MCCH in area 1
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_MCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);

  // Let part of T_OOS timer elapse
  TF_SLEEP(3000);

  /* Verify MCCH reading and reconfguration of PMCH based on the new MCCH PDU */
  LteRrcTestMTCHSetupAreaSfAllocModification();

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSMcastOOSRecoveryFailure__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Let MCCH timer expire
  TF_SLEEP(10000);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to tear down MTCH / MCCH in area 1
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_MCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);

  // Let T_OOS timer elapse
  TF_SLEEP(LTE_RRC_TEST_DEFAULT_OOS_TMR);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to tear down MTCH / MCCH in area 1
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 2);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the DEACT_TMGI_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);

  TF_MSG("Received msg id 0x%x", deact_tmgi_ind_ptr->msg_hdr.id);

  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_deact_tmgi_ind_s) == buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr != NULL);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_OUT_OF_COVERAGE);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].mrb_id == 36);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSMcastOOSandUnicastOOS__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_oos_ind_s oos_ind;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Let MCCH timer expire
  TF_SLEEP(10000);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to tear down MTCH / MCCH in area 1
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_MCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);

  LteRrcSendeMBMSActivateReqForService0();

  lte_rrc_utf_wait_for_done();

  // Prepare oos_ind to send to RRC
  lte_rrc_init_default_hdr(&oos_ind.msgr_hdr, LTE_CPHY_OOS_IND);
  oos_ind.oos_reason = LTE_CPHY_OOS_REASON_NORMAL;
  oos_ind.serv_cell_info.dl_cell_frequency = 1;
  oos_ind.serv_cell_info.phy_cell_id = 500;

  // Send oos_ind to RRC
  status = msgr_send(&oos_ind.msgr_hdr, sizeof(oos_ind));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  // Test the CPHY abort, followed by No service to NAS
  LteRrcTestCPHYAbortandNoService__Test(FALSE);

  // ---------------------------------------------
  /* Catch the DEACT_TMGI_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);

  TF_MSG("Received msg id 0x%x", deact_tmgi_ind_ptr->msg_hdr.id);

  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_deact_tmgi_ind_s) == buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr != NULL);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_SESSION_END);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].mrb_id == 36);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_UCAST_OOS);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSMcastOOSRecoveryPartialSuccess__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // Let MCCH tmr expire on Area 0
  TF_SLEEP(5140);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to monitor MCCH for Area 1 in ALL_OCCASIONS
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_MCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 37);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 2);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.session_id_present == TRUE);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.session_id == 1);

  // Let MCCH tmr expire on Area 1
  TF_SLEEP(100);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to monitor MCCH for Area 1 in ALL_OCCASIONS
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_MCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 3);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.session_id_present == TRUE);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.session_id == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].mrb_id == 37);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.tmgi.service_id[2] == 2);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.session_id_present == TRUE);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.session_id == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[2].mrb_id == 38);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[2].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[2].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[2].session_info.tmgi.service_id[2] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[2].session_info.session_id_present == TRUE);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[2].session_info.session_id == 0);

  // Send MCCH PDU for Area1
  LteRrcTestSendMCCHPDUAfterOOSForArea1();

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to tear down MTCH / MCCH in area 1
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_MCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 2);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.session_id_present == TRUE);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.session_id == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].mrb_id == 38);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.tmgi.service_id[2] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.session_id_present == TRUE);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.session_id == 0);

  // Expire T_OOS for Area 0
  TF_SLEEP(LTE_RRC_TEST_DEFAULT_OOS_TMR);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to tear down MTCH / MCCH in area 1
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 4);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[1] == 2);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the DEACT_TMGI_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);

  TF_MSG("Received msg id 0x%x", deact_tmgi_ind_ptr->msg_hdr.id);

  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_deact_tmgi_ind_s) == buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr != NULL);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_OUT_OF_COVERAGE);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 2);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].mrb_id == 36);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[2] == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[1].mrb_id == 38);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[1].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[1].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[1].session_info.tmgi.service_id[2] == 0);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 37);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSUcastOOSRecoverySuccessDiffCell__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_oos_ind_s oos_ind;
  lte_cphy_abort_req_s *cphy_abort_req_ptr = NULL;
  lte_cphy_abort_cnf_s cphy_abort_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_deactivate_req_s  deactivate_req;
  lte_rrc_service_ind_s *service_ind_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  uint32 buf_len = 0;
  lte_errno_e status;
  lte_cphy_common_cfg_mask_t common_cfg_mask;

  // Prepare oos_ind to send to RRC
  lte_rrc_init_default_hdr(&oos_ind.msgr_hdr, LTE_CPHY_OOS_IND);
  oos_ind.oos_reason = LTE_CPHY_OOS_REASON_NORMAL;
  oos_ind.serv_cell_info.dl_cell_frequency = 1;
  oos_ind.serv_cell_info.phy_cell_id = 500;

  // Send oos_ind to RRC
  status = msgr_send(&oos_ind.msgr_hdr, sizeof(oos_ind));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  // Test the CPHY abort, followed by No service to NAS
  LteRrcTestCPHYAbortandNoService__Test(FALSE);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_UCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);

  // Test subsequent service request and camping
  LteRrcTestServiceRequestBandScanSuccess4__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test3(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfig6__Test(LTE_RRC_TEST_CELL_13);

  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 0);
}

void LteRrcTesteMBMSUcastOOSRecoverySuccess__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_oos_ind_s oos_ind;
  lte_cphy_abort_req_s *cphy_abort_req_ptr = NULL;
  lte_cphy_abort_cnf_s cphy_abort_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_deactivate_req_s  deactivate_req;
  lte_rrc_service_ind_s *service_ind_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // ---------------------------------------------
  // Prepare oos_ind to send to RRC
  lte_rrc_init_default_hdr(&oos_ind.msgr_hdr, LTE_CPHY_OOS_IND);
  oos_ind.oos_reason = LTE_CPHY_OOS_REASON_NORMAL;
  oos_ind.serv_cell_info.dl_cell_frequency = 1;
  oos_ind.serv_cell_info.phy_cell_id = 500;

  // Send oos_ind to RRC
  status = msgr_send(&oos_ind.msgr_hdr, sizeof(oos_ind));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  // Test the CPHY abort, followed by No service to NAS
  LteRrcTestCPHYAbortandNoService__Test(FALSE);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_UCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);

  // Test subsequent service request and camping
  LteRrcTestServiceRequestBandScanSuccess4__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionOnSameCellAfterOOSEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  /* Verify SIB13 reading and setting up of MCCH */
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 0);

    // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrcTestSendMCCHPDUAfterOOSForArea0();

  /* Verify SIB13 reading and setting up of MCCH */
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 2);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActivateDuringUcastOOSCamping__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_oos_ind_s oos_ind;
  lte_cphy_abort_req_s *cphy_abort_req_ptr = NULL;
  lte_cphy_abort_cnf_s cphy_abort_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_deactivate_req_s  deactivate_req;
  lte_rrc_service_ind_s *service_ind_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;

  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size;

  lte_rrc_osys_BCCH_DL_SCH_Message *sib1_msg_ptr;
  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;
  boolean band_is_valid;

  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // ---------------------------------------------
  // Prepare oos_ind to send to RRC
  lte_rrc_init_default_hdr(&oos_ind.msgr_hdr, LTE_CPHY_OOS_IND);
  oos_ind.oos_reason = LTE_CPHY_OOS_REASON_NORMAL;
  oos_ind.serv_cell_info.dl_cell_frequency = 1;
  oos_ind.serv_cell_info.phy_cell_id = 500;

  // Send oos_ind to RRC
  status = msgr_send(&oos_ind.msgr_hdr, sizeof(oos_ind));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  // Test the CPHY abort, followed by No service to NAS
  LteRrcTestCPHYAbortandNoService__Test(FALSE);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_UCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);

  // Test subsequent service request and camping
  LteRrcTestServiceRequestBandScanSuccess4__Test(cell_index);

  lte_rrc_csp_test_set_max_num_acq_retries(1);

  // ---------------------------------------------

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask ==
            (LTE_CPHY_SIB_MASK_BIT_MIB | LTE_CPHY_SIB_MASK_BIT_SIB1));

  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == LTE_CPHY_NULL_SFN);

  LteRrcSendeMBMSActivateReqForService0();

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_UCAST_OOS);

  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_100;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;

  mib_ind.freq = LTE_RRC_TEST_EARFCN;
  mib_ind.phy_cell_id = LTE_RRC_TEST_PHY_CELL_ID;

  mib_ind.freq = cell[cell_index].earfcn;
  mib_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  mib_ind.sfn = 1;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1));

  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == 64);

  TF_ASSERT(sib_sched_req->num_si_msgs == 0);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[group_index])->sib1_size;

  sib1_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message *)
  lte_rrc_osys_asn1_decode_pdu(sib1_ptr,
                               sib1_size,
                               BCCH_DL_SCH_Message,
                               &decode_status);


  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->cellAccessRelatedInfo.
    csg_Indication = 0;
  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->freqBandIndicator = (lte_rrc_get_band_from_dl_earfcn(cell[cell_index].earfcn,&band_is_valid))+1;
  encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib1_msg_ptr,
                                               &encoded_pdu,
                                               BCCH_DL_SCH_Message);
  sib1_ptr = encoded_pdu.value;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  // Telling L1 to stop sending any more si msgs for this mod period
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13));

  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == 128);


  TF_ASSERT(sib_sched_req->si_window_length == LTE_CPHY_SI_WINDOW_LENGTH_MS_10);
  TF_ASSERT(sib_sched_req->num_si_msgs == 1);
  TF_ASSERT(sib_sched_req->si_msg_info[0].si_periodicity == LTE_CPHY_SI_PERIODICITY_RF_8);
  TF_ASSERT(sib_sched_req->si_msg_info[0].sib_map_bitmask == (LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                              LTE_CPHY_SIB_MASK_BIT_SIB13));
  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 0);

    // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrcTestSendMCCHPDUAfterOOSForArea0();

  /* Verify SIB13 reading and setting up of MCCH */
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 2);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSUcastOOSRecoveryFailure__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_oos_ind_s oos_ind;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // ---------------------------------------------
  // Prepare oos_ind to send to RRC
  lte_rrc_init_default_hdr(&oos_ind.msgr_hdr, LTE_CPHY_OOS_IND);
  oos_ind.oos_reason = LTE_CPHY_OOS_REASON_NORMAL;
  oos_ind.serv_cell_info.dl_cell_frequency = 1;
  oos_ind.serv_cell_info.phy_cell_id = 500;

  // Send oos_ind to RRC
  status = msgr_send(&oos_ind.msgr_hdr, sizeof(oos_ind));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  // Test the CPHY abort, followed by No service to NAS
  LteRrcTestCPHYAbortandNoService__Test(FALSE);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_UCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);

  // Expire T_OOS
  TF_SLEEP(LTE_RRC_TEST_DEFAULT_OOS_TMR);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the DEACT_TMGI_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);

  TF_MSG("Received msg id 0x%x", deact_tmgi_ind_ptr->msg_hdr.id);

  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_deact_tmgi_ind_s) == buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr != NULL);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_OUT_OF_COVERAGE);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].mrb_id == 36);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSUcastOOSRecoveryPartialSuccess__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_oos_ind_s oos_ind;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // ---------------------------------------------
  // Prepare oos_ind to send to RRC
  lte_rrc_init_default_hdr(&oos_ind.msgr_hdr, LTE_CPHY_OOS_IND);
  oos_ind.oos_reason = LTE_CPHY_OOS_REASON_NORMAL;
  oos_ind.serv_cell_info.dl_cell_frequency = 1;
  oos_ind.serv_cell_info.phy_cell_id = 500;

  // Send oos_ind to RRC
  status = msgr_send(&oos_ind.msgr_hdr, sizeof(oos_ind));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  // Test the CPHY abort, followed by No service to NAS
  LteRrcTestCPHYAbortandNoService__Test(FALSE);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_UCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 2);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.session_id_present == TRUE);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.session_id == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].mrb_id == 37);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.tmgi.service_id[2] == 2);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.session_id_present == TRUE);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[1].session_info.session_id == 1);

  // Test subsequent service request and camping
  LteRrcTestServiceRequestBandScanSuccess4__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionOnSameCellAfterOOSEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  /* Verify SIB13 reading and setting up of MCCH */
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
            LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_ONE);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 0);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].lc_id == 3);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrcTestSendMCCHPDUAfterOOSForArea0();

  /* Verify SIB13 reading and setting up of MCCH */
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].lc_id == 3);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Expire part of T_OOS
  TF_SLEEP(3000);

  // Send MCCH PDU for Area0
  LteRrcTestSendMCCHPDUAfterOOSForArea0();

  // Expire remaining of T_OOS and the time that would cause MCCH timer expiry on Area 1
  TF_SLEEP(3000);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to tear down MTCH / MCCH in area 1
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_MCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 37);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 2);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.session_id_present == TRUE);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.session_id == 1);

  // Send MCCH PDU for Area0
  LteRrcTestSendMCCHPDUAfterOOSForArea0();

  // Expire T_OOS
  TF_SLEEP(LTE_RRC_TEST_DEFAULT_OOS_TMR);


  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_MCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 37);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to tear down MTCH / MCCH in area 1
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_DECONFIG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 4);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 1);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the DEACT_TMGI_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);

  TF_MSG("Received msg id 0x%x", deact_tmgi_ind_ptr->msg_hdr.id);

  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_deact_tmgi_ind_s) == buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr != NULL);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_OUT_OF_COVERAGE);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].mrb_id == 37);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_ind_ptr->deact_info_list[0].session_info.tmgi.service_id[2] == 2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSSib2Update__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index,
  boolean embms_is_enabled
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_mac_rrc_dl_data_ind_s pcch_dl_data_ind;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib2 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib2;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_paging = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_paging;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint8 *sib2_ptr = NULL;
  uint16 sib1_size, sib2_size;

  lte_rrc_osys_BCCH_DL_SCH_Message *sib1_msg_ptr;

  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;

  uint32 buf_len = 0;
  lte_errno_e status;

  /***********************************************************************/

  // Prepare pcch_dl_data_ind to send Paging OTA msg to RRC
  msgr_init_hdr_attach(&pcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_PCCH_DL_DATA_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_paging, lte_rrc_test_default_siupdate_msg1,
                         sizeof(lte_rrc_test_default_siupdate_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_default_siupdate_msg1));
  TF_ASSERT(dsm_ptr_paging != NULL);

  att_ptr_paging = msgr_get_attach(&pcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_paging, dsm_ptr_paging);

  pcch_dl_data_ind.freq = cell[cell_index].earfcn;
  pcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  pcch_dl_data_ind.sfn.sys_fn = 70;

  // Send pcch_dl_data_ind to RRC
  status = msgr_send(&pcch_dl_data_ind.hdr, sizeof(pcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  if (embms_is_enabled)
  {
    TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB  |
                                                       LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                       LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                       LTE_CPHY_SIB_MASK_BIT_SIB13));
  }

  // Mod period sfn is (mod period coeff * default paging cycle) = 32
  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == 128);

  if (embms_is_enabled == FALSE)
  {
    LteRrceMBMSEnableGeneric__Test(TRUE);
  }

  // Ignoring si_window_length, num_si_msgs, si_msg_info

  // ---------------------------------------------
  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_100;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;

  mib_ind.freq = cell[cell_index].earfcn;
  mib_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  mib_ind.sfn = 128;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  if (embms_is_enabled)
  {
    TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_RRC_SIB1_BITMASK |
                                                       LTE_RRC_SIB2_BITMASK |
                                                       LTE_RRC_SIB13_BITMASK));
    TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_RRC_MIB_BITMASK |
                                                       LTE_RRC_SIB1_BITMASK |
                                                       LTE_RRC_SIB2_BITMASK |
                                                       LTE_RRC_SIB13_BITMASK));
  }

  // Mod period sfn is (mod period coeff * default paging cycle) = 64
  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == 256);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[group_index])->sib1_size;

  sib1_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message *)
  lte_rrc_osys_asn1_decode_pdu(sib1_ptr,
                               sib1_size,
                               BCCH_DL_SCH_Message,
                               &decode_status);

  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->cellAccessRelatedInfo.
    csg_Indication = 0;
  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->freqBandIndicator = 1;
  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->systemInfoValueTag = 1;
  lte_rrc_osys_asn1_int_to_bitstring(0, &sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->
                                cellAccessRelatedInfo.cellIdentity);
  encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib1_msg_ptr,
                                               &encoded_pdu,
                                               BCCH_DL_SCH_Message);
  sib1_ptr = encoded_pdu.value;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 128;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  if (embms_is_enabled)
  {
    TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                       LTE_CPHY_SIB_MASK_BIT_SIB13));
    TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                       LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                       LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                       LTE_CPHY_SIB_MASK_BIT_SIB13 ));
  }

  // Mod period sfn is (mod period coeff * default paging cycle) = 32
  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == 256);

  TF_ASSERT(sib_sched_req->si_window_length == LTE_CPHY_SI_WINDOW_LENGTH_MS_10);
  //TF_ASSERT(sib_sched_req->num_si_msgs == 2);

  // Prepare bcch_dl_data_ind to send SIB2 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib2_ptr = (cell[cell_index].sibs_ptr[group_index])->sib2_ptr;
  sib2_size = (cell[cell_index].sibs_ptr[group_index])->sib2_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib2, lte_rrc_test_sib2_withmbsfn_no_sib13,
                         sizeof(lte_rrc_test_sib2_withmbsfn_no_sib13),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_sib2_withmbsfn_no_sib13));
  TF_ASSERT(dsm_ptr_sib2 != NULL);

  att_ptr_sib2 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib2, dsm_ptr_sib2);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 128;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  if(embms_is_enabled)
  {
    TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB13));
    TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                       LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                       LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                       LTE_CPHY_SIB_MASK_BIT_SIB13 ));
  }

  // Mod period sfn is (mod period coeff * default paging cycle) = 32
  //TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == 256);

  TF_ASSERT(sib_sched_req->si_window_length == LTE_CPHY_SI_WINDOW_LENGTH_MS_10);
  TF_ASSERT(sib_sched_req->num_si_msgs == 2);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
/*
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (//LTE_CPHY_COMMON_CFG_MASK_BIT_UL_FREQ_CFG |
                                                          //LTE_CPHY_COMMON_CFG_MASK_BIT_PDSCH_CFG |
                                                          //LTE_CPHY_COMMON_CFG_MASK_BIT_PUCCH_CFG |
                                                          //LTE_CPHY_COMMON_CFG_MASK_BIT_PUSCH_CFG |
                                                          //LTE_CPHY_COMMON_CFG_MASK_BIT_SRS_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_UL_POWER_CTRL |
                                                          //LTE_CPHY_COMMON_CFG_MASK_BIT_UL_CYCLIC_PREFIX_LENGTH |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_PCCH_CFG));
                                                          //LTE_CPHY_COMMON_CFG_MASK_BIT_CELL_SELECT_CFG |
                                                          //LTE_CPHY_COMMON_CFG_MASK_BIT_TMR_AND_CONST_PARAM ));
*/
/*
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_cfg.num_mbms_allocations == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_cfg.mbsfn_alloacation[0].allocation_period == LTE_L1_MBSFN_ALLOCATION_PERIOD_2);

*/
  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = (LTE_CPHY_COMMON_CFG_MASK_BIT_UL_FREQ_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_PDSCH_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_PUCCH_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_PUSCH_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_SRS_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_UL_POWER_CTRL |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_UL_CYCLIC_PREFIX_LENGTH |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_CELL_SELECT_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_TMR_AND_CONST_PARAM );

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);

  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.cfg_mask ==
                                                  (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG));

  TF_ASSERT(dedicated_cfg_req->is_default_cfg == TRUE);


  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pdsch_cfg_dedicated.pa == LTE_L1_PA_DB_0);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pucch_cfg_dedicated.ack_nak_repetition_enable == FALSE);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pusch_cfg_dedicated.delta_offset_ack_index == 10);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.ulsch_cfg.max_harq_tx == 5);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RECFG);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == (LTE_MAC_DL_CFG_BM |
                                                  LTE_MAC_RACH_CFG_BM |
                                                  LTE_MAC_UL_CFG_BM));

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTesteMBMSSib13Update__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;
  lte_rrc_service_ind_s *service_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib13 = NULL;           /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;        /* Message attachment pointer */

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint8 *sib13_ptr = NULL;
  uint16 sib13_size;

  uint32 buf_len = 0;
  lte_errno_e status;

  // Prepare bcch_dl_data_ind to send SIB13 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib13_ptr = (cell[cell_index].sibs_ptr[group_index])->sib13_ptr;
  sib13_size = (cell[cell_index].sibs_ptr[group_index])->sib13_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
                         sib13_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib13_size);
  TF_ASSERT(dsm_ptr_sib13 != NULL);

  att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 130;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // ---------------------------------------------
  // We expect a service_ind message, indicating SERVICE AVAILABLE from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind_ptr->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind_ptr != NULL);
  TF_ASSERT(service_ind_ptr->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_64RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /***********************************************************************/

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG | LTE_CPHY_COMMON_CFG_MASK_BIT_PCCH_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_64RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Get avail_tmgi_list_indi*/
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_MSG("\nESMGR: Rcvd LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND \n");
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 2);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSSib13Update__Test2
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;
  lte_rrc_service_ind_s *service_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib13 = NULL;           /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;        /* Message attachment pointer */

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint8 *sib13_ptr = NULL;
  uint16 sib13_size;

  uint32 buf_len = 0;
  lte_errno_e status;

  // Prepare bcch_dl_data_ind to send SIB13 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib13_ptr = (cell[cell_index].sibs_ptr[group_index])->sib13_ptr;
  sib13_size = (cell[cell_index].sibs_ptr[group_index])->sib13_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
                         sib13_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib13_size);
  TF_ASSERT(dsm_ptr_sib13 != NULL);

  att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 130;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // ---------------------------------------------
  // We expect a service_ind message, indicating NO SERVICE from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind_ptr->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind_ptr != NULL);
  TF_ASSERT(service_ind_ptr->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  // Mod period sfn is (mod period coeff * default paging cycle) = 32
  //TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == 256);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_64RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /***********************************************************************/

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1_1, sizeof(lte_rrc_test_embms_mcch_msg1_1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1_1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                            LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].
            subfn_allocation_period == LTE_L1_MBSFN_COMMON_SF_ALLOC_PERIOD_64RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}


void LteRrcTesteMBMSSib13Update__Test3
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;
  lte_rrc_service_ind_s *service_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib13 = NULL;           /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;        /* Message attachment pointer */

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size;

  lte_rrc_osys_BCCH_DL_SCH_Message *sib1_msg_ptr;

  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;

  uint8 *sib13_ptr = NULL;
  uint16 sib13_size;

  uint32 buf_len = 0;
  lte_errno_e status;

  // Prepare bcch_dl_data_ind to send SIB13 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib13_ptr = (cell[cell_index].sibs_ptr[group_index])->sib13_ptr;
  sib13_size = (cell[cell_index].sibs_ptr[group_index])->sib13_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
                         sib13_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib13_size);
  TF_ASSERT(dsm_ptr_sib13 != NULL);

  att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 130;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // ---------------------------------------------
  // We expect a service_ind message, indicating NO SERVICE from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind_ptr->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind_ptr != NULL);
  TF_ASSERT(service_ind_ptr->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  lte_rrc_utf_wait_for_done();

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[LTE_RRC_TEST_SIB_UPDATE_1])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[LTE_RRC_TEST_SIB_UPDATE_1])->sib1_size;

  sib1_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message *)
  lte_rrc_osys_asn1_decode_pdu(sib1_ptr,
                               sib1_size,
                               BCCH_DL_SCH_Message,
                               &decode_status);

  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->cellAccessRelatedInfo.
    csg_Indication = 0;
  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->freqBandIndicator = 1;
  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->systemInfoValueTag = 1;
  lte_rrc_osys_asn1_int_to_bitstring(0, &sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->
                                cellAccessRelatedInfo.cellIdentity);
  encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib1_msg_ptr,
                                               &encoded_pdu,
                                               BCCH_DL_SCH_Message);
  sib1_ptr = encoded_pdu.value;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 140;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // Mod period sfn is (mod period coeff * default paging cycle) = 32
  //TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == 256);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_64RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /***********************************************************************/

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1_1, sizeof(lte_rrc_test_embms_mcch_msg1_1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1_1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                            LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].
            subfn_allocation_period == LTE_L1_MBSFN_COMMON_SF_ALLOC_PERIOD_64RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}


void LteRrcTesteMBMSMCastOOSPartSuccessActService0InArea0__Test
(
  void
)
{
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  /***************************************************************************/

  /* Send request to activate Service 0 */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 0;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 0;
  act_tmgi_req.num_earfcn_to_search = 0;
  act_tmgi_req.num_sai_to_search = 0;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 3);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].lc_id == 3);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[2].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[2].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[2].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[2].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[2].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[2].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[2].mrb_id == 38);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 38);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 0);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 3);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[1].mrb_id == 37);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[2].mrb_id == 38);

}


void LteRrcTesteMBMSDeactTwoSvcInSameArea__Test
(
  void
)
{
  lte_rrc_embms_deact_tmgi_req_s deact_tmgi_req;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  /***************************************************************************/

  /* Send request to Deactivate TMGI */
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);

  /* Fill in the session info */
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = 1;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);

  /**************************************************************************/

  /* Send request to deactivate TMGI */
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);

  /* Fill in the session info */
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = 0;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = 0;

  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 1);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 37);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 0);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);
}

void LteRrcTesteMBMSActTwoSvcInTwoAreas__Test
(
  boolean skip_secnd_time_mcch
)
{
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 1;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;
  act_tmgi_req.num_earfcn_to_search = 0;
  act_tmgi_req.num_sai_to_search = 0;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_ONE);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);


  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg2));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 1;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 66;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_DECONFIG);


  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrceMBMSGetAvailTmgiList(2);

  /***************************************************************************/

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 2;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;
  act_tmgi_req.num_earfcn_to_search = 0;
  act_tmgi_req.num_sai_to_search = 0;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].
            subfn_allocation_period == LTE_L1_MBSFN_COMMON_SF_ALLOC_PERIOD_64RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].lc_id == 3);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].area_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].lc_id == 3);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].mrb_id == 37);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 37);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 2);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[1].mrb_id == 37);

  if (!skip_secnd_time_mcch)
  {
    /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
    msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

    dsm_ptr_mcch = NULL;
    TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2),
                           DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg2));
    TF_ASSERT(dsm_ptr_mcch != NULL);

    att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
    msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

    mcch_pdu_ind.area_id = 1;
    mcch_pdu_ind.dl_cell_frequency = 1;
    mcch_pdu_ind.sfn.sys_fn = 70;

    // Send mcch_pdu_ind to RRC
    status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
    TF_ASSERT(status == E_SUCCESS);

    lte_rrc_utf_wait_for_done();

    // We expect a common_cfg_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.
              cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
              area_id == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
              cfg_action == LTE_L1_CONFIG);

    // Prepare common_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

    common_cfg_cnf.status = E_SUCCESS;
    common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

    // Send common_cfg_cnf to RRC
    status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);
  }
}


void LteRrcTesteMBMSDeactTwoSvcInTwoAreas__Test
(
  void
)
{
  lte_rrc_embms_deact_tmgi_req_s deact_tmgi_req;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;


  /***************************************************************************/

  /* Send request to deactivate TMGI */
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);

  /* Fill in the session info */
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = 1;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);

  /**************************************************************************/

  /* Send request to deactivate TMGI */
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);

  /* Fill in the session info */
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = 2;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 1);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 37);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);
}

void LteRrcTesteMBMSSendAllMcchPdus__Test
(
  void
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;
  uint8 i;

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg2));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 1;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 66;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg3));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 2;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 67;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg4, sizeof(lte_rrc_test_embms_mcch_msg4),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg4));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 3;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 68;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg5, sizeof(lte_rrc_test_embms_mcch_msg5),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg5));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 4;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 69;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg6, sizeof(lte_rrc_test_embms_mcch_msg6),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg6));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 5;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 70;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg7, sizeof(lte_rrc_test_embms_mcch_msg7),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg7));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 6;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 71;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg8, sizeof(lte_rrc_test_embms_mcch_msg8),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg8));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 7;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 72;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTesteMBMSGetAllMcchPdus__Test
(
  void
)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;
  uint8 i;

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg2));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 1;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 66;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg3));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 2;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 67;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg4, sizeof(lte_rrc_test_embms_mcch_msg4),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg4));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 3;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 68;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg5, sizeof(lte_rrc_test_embms_mcch_msg5),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg5));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 4;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 69;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg6, sizeof(lte_rrc_test_embms_mcch_msg6),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg6));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 5;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 70;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg7, sizeof(lte_rrc_test_embms_mcch_msg7),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg7));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 6;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 71;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  dsm_ptr_mcch = NULL;
  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg8, sizeof(lte_rrc_test_embms_mcch_msg8),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg8));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 7;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 72;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);

  for (i = 1; i < 8; i++)
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[i].
              area_id == i);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[i].
              cfg_action == LTE_L1_DECONFIG);
  }

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcTesteMBMSActSvc__Test
(
  uint8 mcch_index,
  unsigned char *mcch_msg,
  uint16 msg_size,
  uint8 enter_time
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = (mcch_index + 1);
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  if ((enter_time == 0) && (mcch_index == 0))
  {
    // We expect a common_cfg_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.
              cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[mcch_index].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[mcch_index].
              area_id == mcch_index);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[mcch_index].
              cfg_action == LTE_L1_CONFIG);


    // Prepare common_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

    common_cfg_cnf.status = E_SUCCESS;
    common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

    // Send common_cfg_cnf to RRC
    status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);

    /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
    msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

    TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, mcch_msg, msg_size,
                           DSM_DS_SMALL_ITEM_POOL) == msg_size);
    TF_ASSERT(dsm_ptr_mcch != NULL);

    att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
    msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

    mcch_pdu_ind.area_id = mcch_index;
    mcch_pdu_ind.dl_cell_frequency = 1;
    mcch_pdu_ind.sfn.sys_fn = 65 + mcch_index*10;

    // Send mcch_pdu_ind to RRC
    status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
    TF_ASSERT(status == E_SUCCESS);
  }

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  /*
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
 */
  if((enter_time == 0) && (mcch_index == 0))
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[mcch_index].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  }
  else
  {
    //TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == mcch_index + 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[mcch_index].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  }

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == (mcch_index + 1));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[mcch_index].area_id == mcch_index);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[mcch_index].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[mcch_index].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[mcch_index].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[mcch_index].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  if (enter_time != 0 && mcch_index == 0)
  {
    LteRrceMBMSGetAvailTmgiList(16);
  }
  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == (mcch_index + 1));
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[mcch_index].area_id == mcch_index);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[mcch_index].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[mcch_index].lc_id == mcch_index + 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == mcch_index);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[mcch_index].area_id == mcch_index);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[mcch_index].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[mcch_index].lc_id == (mcch_index + 2));
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[mcch_index].mrb_id == (mcch_index + 36));

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == (mcch_index + 36));
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == (mcch_index + 1));

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == (mcch_index + 1));
  TF_ASSERT(tmgi_list_ind_ptr->session_info[mcch_index].mrb_id == (mcch_index + 36));

  if (enter_time != 0 && mcch_index == 0)
  {
    LteRrcTesteMBMSSendAllMcchPdus__Test();

    /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
    msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

    dsm_ptr_mcch = NULL;
    TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, mcch_msg, msg_size,
                           DSM_DS_SMALL_ITEM_POOL) == msg_size);
    TF_ASSERT(dsm_ptr_mcch != NULL);

    att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
    msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

    mcch_pdu_ind.area_id = mcch_index;
    mcch_pdu_ind.dl_cell_frequency = 1;
    mcch_pdu_ind.sfn.sys_fn = 66 + mcch_index*10;

    // Send mcch_pdu_ind to RRC
    status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
    TF_ASSERT(status == E_SUCCESS);

    // We expect a common_cfg_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.
              cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
    //TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == mcch_index + 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[mcch_index].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[mcch_index].
              area_id == mcch_index);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[mcch_index].
              cfg_action == LTE_L1_CONFIG);

    // Prepare common_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

    common_cfg_cnf.status = E_SUCCESS;
    common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

    // Send common_cfg_cnf to RRC
    status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);
    // We expect a common_cfg_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.
              cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
    /*TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == mcch_index + 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[mcch_index].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);*/
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[mcch_index].
              area_id == mcch_index);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[mcch_index].
              cfg_action == LTE_L1_CONFIG);

    // Prepare common_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

    common_cfg_cnf.status = E_SUCCESS;
    common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

    // Send common_cfg_cnf to RRC
    status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);
  }
}

void LteRrcTesteMBMSActSvcExceedMax__Test
(
  void
)
{
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 9;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_MAX_TMGI_ALREADY_ACTIVE);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 9);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSMCCHWaitTimerExpDuringBPLMN__Test()
{
  lte_pdcpdl_sdu_ind_msg_s pdcpdl_sdu_ind;
  dsm_item_type *dsm_ptr_cr1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_cr1;         /* Message attachment pointer */
  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;

  lte_cphy_conn_meas_cfg_req_s *cphy_meas_cfg_req;
  lte_cphy_conn_meas_cfg_cnf_s  cphy_meas_cfg_cnf;
  lte_cphy_irat_cgi_start_ind_s cphy_irat_cgi_start_ind;
  lte_cphy_suspend_req_s *cphy_susp_req_ptr = NULL;
  lte_cphy_suspend_cnf_s  cphy_susp_cnf;
  lte_cphy_resume_req_s *cphy_res_req_ptr = NULL;
  lte_cphy_resume_cnf_s  cphy_res_cnf;
  lte_cphy_serv_cell_meas_req_s *serv_cell_meas_req_ptr = NULL;
  lte_cphy_serv_cell_meas_cnf_s  serv_cell_meas_cnf;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

#ifndef LTE_DO_IRAT_COMPILE_OUT
  hdrcp_lte_get_cgi_req_msg_t *get_cgi_req_ptr = NULL;
  hdrcp_msg_req_u *abort_cgi_req_ptr = NULL;
  hdrcp_lte_get_cgi_rsp_msg_t  get_cgi_rsp;
#endif
  uint32 buf_len;
  lte_errno_e status;

  // At this point, send an enable req
  LteRrceMBMSEnable__Test();

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  // ---------------------------------------------

  // Prepare pdcpdl_sdu_ind to send ConnectionReconfiguration with Meas OTA msg to RRC
  msgr_init_hdr_attach(&pdcpdl_sdu_ind.hdr, MSGR_LTE_PDCPDL, LTE_PDCPDL_SDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_cr1, lte_rrc_test_irat_cgi_msg,
                         sizeof(lte_rrc_test_irat_cgi_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_irat_cgi_msg));
  TF_ASSERT(dsm_ptr_cr1 != NULL);

  att_ptr_cr1 = msgr_get_attach(&pdcpdl_sdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_cr1, dsm_ptr_cr1);

  pdcpdl_sdu_ind.rb_cfg_idx = 33;                                 // Sent on SRB2

  // Send pdcpdl_sdu_ind to RRC
  status = msgr_send(&pdcpdl_sdu_ind.hdr, sizeof(pdcpdl_sdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a cphy_conn_meas_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_conn_meas_cfg_req_s));
  TF_ASSERT(cphy_meas_cfg_req->msgr_hdr.id == LTE_CPHY_CONN_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.phy_cell_id == cell[LTE_RRC_TEST_CELL_0].phys_cell_id);
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.dl_cell_frequency == cell[LTE_RRC_TEST_CELL_0].earfcn);


  // Prepare cphy_conn_meas_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_meas_cfg_cnf.msgr_hdr, LTE_CPHY_CONN_MEAS_CFG_CNF);
  cphy_meas_cfg_cnf.status = E_SUCCESS;

  // Send cphy_conn_meas_cnf to RRC
  status = msgr_send(&cphy_meas_cfg_cnf.msgr_hdr, sizeof(lte_cphy_conn_meas_cfg_cnf_s));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a ConnectionReconfigurationComplete OTA message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_sdu_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_sdu_req_msg_s));
  TF_ASSERT(pdcpul_sdu_req->hdr.id == LTE_PDCPUL_SDU_REQ);

  TF_ASSERT(pdcpul_sdu_req->rb_cfg_idx == 33);

  // Prepare pdcpul_sdu_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_sdu_cnf.hdr, LTE_PDCPUL_SDU_CNF);

  pdcpul_sdu_cnf.num_nack_muid = 0;
  pdcpul_sdu_cnf.num_maybe_muid = 0;
  pdcpul_sdu_cnf.num_ack_muid = 1;
  pdcpul_sdu_cnf.ack_muid[0] = pdcpul_sdu_req->mu_id;

  // Send pdcpul_sdu_cnf to RRC
  status = msgr_send(&pdcpul_sdu_cnf.hdr, sizeof(pdcpul_sdu_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------

  // Send LTE_CPHY_IRAT_CGI_START_IND to RRC
  lte_rrc_init_default_hdr(&cphy_irat_cgi_start_ind.msgr_hdr, LTE_CPHY_IRAT_CGI_START_IND);
  cphy_irat_cgi_start_ind.time_avail_for_irat_cgi = 1500;

  // Send cphy_irat_cgi_start_ind to RRC
  status = msgr_send(&cphy_irat_cgi_start_ind.msgr_hdr, sizeof(cphy_irat_cgi_start_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect LTE_CPHY_SUSPEND_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_susp_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_suspend_req_s));
  TF_ASSERT(cphy_susp_req_ptr->msgr_hdr.id == LTE_CPHY_SUSPEND_REQ);
  TF_ASSERT(cphy_susp_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_SUSPEND_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_susp_cnf.msgr_hdr, LTE_CPHY_SUSPEND_CNF);
  cphy_susp_cnf.status = E_SUCCESS;
  cphy_susp_cnf.suspend_cause = LTE_CPHY_IRAT_CGI;
  cphy_susp_cnf.cdma_time_info.cdma_sys_time = 500000;
  cphy_susp_cnf.cdma_time_info.lte_ostmr = 7500;

  // Send cphy_susp_req_cnf to RRC
  status = msgr_send(&cphy_susp_cnf.msgr_hdr, sizeof(cphy_susp_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
#ifndef LTE_DO_IRAT_COMPILE_OUT
  // We expect HDR_CP_LTE_GET_CGI_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&get_cgi_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(hdrcp_lte_get_cgi_req_msg_t));
  TF_ASSERT(get_cgi_req_ptr->hdr.id == HDR_CP_LTE_GET_CGI_REQ);
  TF_ASSERT(get_cgi_req_ptr->sys_info.band == SYS_BAND_BC0);
  TF_ASSERT(get_cgi_req_ptr->sys_info.chan_num == 1000);
  TF_ASSERT(get_cgi_req_ptr->cdma_sys_time == 500000);
  TF_ASSERT(get_cgi_req_ptr->lte_ostmr == 7500);
  TF_ASSERT(get_cgi_req_ptr->pilot_pn == 500);
  TF_ASSERT(get_cgi_req_ptr->time_available_for_cgi == 1465);


  TF_SLEEP(6000);

  // We expect HDR_CP_LTE_ABORT_CGI_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&abort_cgi_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(hdrcp_msg_req_u));
  TF_ASSERT(abort_cgi_req_ptr->hdr.id == HDR_CP_LTE_ABORT_CGI_REQ);

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  lte_rrc_init_default_hdr(&get_cgi_rsp.hdr, HDR_CP_LTE_GET_CGI_RSP);
  get_cgi_rsp.sys_info.band = SYS_BAND_BC0;
  get_cgi_rsp.sys_info.chan_num = 1000;
  get_cgi_rsp.pilot_pn = 500;
  // Indicate CGI info was not acquired
  get_cgi_rsp.cgi_info_included = FALSE;

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  status = msgr_send(&get_cgi_rsp.hdr, sizeof(get_cgi_rsp));
  TF_ASSERT(status == E_SUCCESS);
#endif

  // ---------------------------------------------
  // LTE stack should be resumed immediately
  // We expect LTE_CPHY_RESUME_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_res_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_resume_req_s));
  TF_ASSERT(cphy_res_req_ptr->msgr_hdr.id == LTE_CPHY_RESUME_REQ);
  TF_ASSERT(cphy_res_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_RESUME_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_res_cnf.msgr_hdr, LTE_CPHY_RESUME_CNF);
  cphy_res_cnf.status = E_SUCCESS;
  status = msgr_send(&cphy_res_cnf.msgr_hdr, sizeof(cphy_res_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // After LTE stack is resumed, MCCH WAIT_TMR should be handled
  LteRrcTestMCCHRelease(0);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->status != E_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 35);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSMCCHWaitTimerExpDuringIratBPLMN__Test()
{
  lte_rrc_plmn_search_req_s search_req;
  lte_cphy_msg_bplmn_start_req_s *start_req_ptr;
  lte_irat_abort_plmn_srch_req_s *abort_plmn_req_ptr;
  lte_irat_abort_plmn_srch_rsp_s abort_plmn_rsp;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_rrc_plmn_search_cnf_s *cnf_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // At this point, send an enable req
  LteRrceMBMSEnable__Test();

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestPlmnSearchStart__Test();
  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_LTE);

  // Verify Intra-LTE PLMN search
  LteRrcTestToLteCommonSendSIB1(LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestToLteCommonVerifyBPLMNCellReq(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCellCnf(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCompleteInd(LTE_CPHY_BPLMN_ALL_DONE);

  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_IRAT);

  // Send time available indication from ML1
  LteRrcTestPlmnSearchFromLteSendTimeAvailInd();

  // Verify that LTE stack has been suspended
  TF_MSG("IRAT Integration: Verify request to suspend");
  LteRrcTestPlmnSearchVerifyReqToSuspend();

  // Send suspend confirmation.
  TF_MSG("IRAT Integration: Verifying Suspend request to ML1");
  LteRrcTestPlmnSearchSendML1SuspendCnf();

  // Wait for IRAT PLMN Search to be sent to W stack
  TF_MSG("IRAT Integration: Verify request to target RAT");
  LteRrcTestPlmnSearchVerifyReqToTargetRAT(LTE_RRC_TEST_IRAT_W);

  TF_SLEEP(6000);

  TF_MSG("IRAT Integration: Send response from target RAT");
  LteRrcTestPlmnSearchSendResponseFromTargetRAT(LTE_RRC_TEST_IRAT_W);

  // Since the IRAT PLMN search failed, LTE RRC should try to resume ML1
  LteRrcTestPlmnSearchVerifyReqToResume();

  // Simulate ML1 resume success!!
  LteRrcTestPlmnSearchSendML1ResumeCnf(E_SUCCESS);

  LteRrcTestPlmnSearchFromLteVerifySkipReq();

  // After LTE stack is resumed, MCCH WAIT_TMR should be handled
  LteRrcTestMCCHRelease(0);

  LteRrceMBMSGetAvailTmgiList(2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->status != E_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 35);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTestPlmnSearchStartAutomatic__Test(void)
{
    lte_rrc_plmn_search_req_s search_req;
    lte_cphy_msg_bplmn_start_req_s *start_req_ptr;
    lte_errno_e status;
    uint32 buf_len;

    TF_MSG("Sending Service Req");
    msgr_init_hdr(&search_req.msg_hdr, MSGR_NAS_EMM, LTE_RRC_PLMN_SEARCH_REQ);
    search_req.trans_id = 1;
    search_req.network_select_mode = SYS_NETWORK_SELECTION_MODE_AUTOMATIC;
    search_req.search_type = SYS_SERVICE_SEARCH_BACKGROUND_AUTOMATIC;
    memset(&search_req.rat_pri_list,0,sizeof(search_req.rat_pri_list));
    search_req.rat_pri_list.num_items = 3;
    search_req.rat_pri_list.priority_list_info[0].acq_sys_mode = SYS_SYS_MODE_LTE;
    search_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_LTE_BAND1;
    search_req.rat_pri_list.priority_list_info[1].acq_sys_mode = SYS_SYS_MODE_WCDMA;
    search_req.rat_pri_list.priority_list_info[1].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_WCDMA_V_850;
    search_req.rat_pri_list.priority_list_info[2].acq_sys_mode = SYS_SYS_MODE_GSM;
    search_req.rat_pri_list.priority_list_info[2].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_GSM_850;
    search_req.plmn_rat_list.length = 2;
    search_req.plmn_rat_list.info[0].plmn.identity[0] = 0x21;
    search_req.plmn_rat_list.info[0].plmn.identity[1] = 0x63;
    search_req.plmn_rat_list.info[0].plmn.identity[2] = 0x54;
    search_req.plmn_rat_list.info[0].rat = SYS_RAT_LTE_RADIO_ACCESS;
    search_req.plmn_rat_list.info[1].plmn.identity[0] = 0x21;
    search_req.plmn_rat_list.info[1].plmn.identity[1] = 0x63;
    search_req.plmn_rat_list.info[1].plmn.identity[2] = 0x54;
    search_req.plmn_rat_list.info[1].rat = SYS_RAT_UMTS_RADIO_ACCESS;
    search_req.rplmn_info_is_valid = TRUE;
    search_req.rplmn.mcc[0] = 7;
    search_req.rplmn.mcc[1] = 8;
    search_req.rplmn.mcc[2] = 9;
    search_req.rplmn.num_mnc_digits = 3;
    search_req.rplmn.mnc[0] = 10;
    search_req.rplmn.mnc[1] = 11;
    search_req.rplmn.mnc[2] = 12;
    search_req.hplmn_info_is_valid = TRUE;
    search_req.hplmn.mcc[0] = 13;
    search_req.hplmn.mcc[1] = 14;
    search_req.hplmn.mcc[2] = 15;
    search_req.hplmn.num_mnc_digits = 3;
    search_req.hplmn.mnc[0] = 16;
    search_req.hplmn.mnc[1] = 17;
    search_req.hplmn.mnc[2] = 18;
    search_req.ehplmn_list.num_plmns = 1;
    search_req.ehplmn_list.plmn[0].mcc[0] = 19;
    search_req.ehplmn_list.plmn[0].mcc[1] = 20;
    search_req.ehplmn_list.plmn[0].mcc[2] = 21;
    search_req.ehplmn_list.plmn[0].num_mnc_digits = 3;
    search_req.ehplmn_list.plmn[0].mnc[0] = 22;
    search_req.ehplmn_list.plmn[0].mnc[1] = 23;
    search_req.ehplmn_list.plmn[0].mnc[2] = 24;
    memset(&search_req.eplmn_list,0,sizeof(search_req.eplmn_list));
    memset(&search_req.forbidden_ta_list,0,
           sizeof(search_req.forbidden_ta_list));
    memset(&search_req.mcc_mode_band_filter,0,sizeof(search_req.mcc_mode_band_filter));

    // Send plmn_search_req to RRC
    status = msgr_send(&search_req.msg_hdr, sizeof(search_req));
    TF_ASSERT(status == E_SUCCESS);


}


void LteRrcTestPlmnSearchStartManualLTEOnly__Test(void)
{
    lte_rrc_plmn_search_req_s search_req;
    lte_cphy_msg_bplmn_start_req_s *start_req_ptr;
    lte_errno_e status;
    uint32 buf_len;

    TF_MSG("Sending Service Req");
    msgr_init_hdr(&search_req.msg_hdr, MSGR_NAS_EMM, LTE_RRC_PLMN_SEARCH_REQ);
    search_req.trans_id = 1;
    search_req.network_select_mode = SYS_NETWORK_SELECTION_MODE_MANUAL;
    search_req.search_type = SYS_SERVICE_SEARCH_NONE;
    memset(&search_req.rat_pri_list,0,sizeof(search_req.rat_pri_list));
    search_req.rat_pri_list.num_items = 3;
    search_req.rat_pri_list.priority_list_info[0].acq_sys_mode = SYS_SYS_MODE_LTE;
    search_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_LTE_BAND1;
    search_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_LTE_BAND2;
    search_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_LTE_BAND4;
    search_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_LTE_BAND5;
    search_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_LTE_BAND8;
    search_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_LTE_BAND12;
    search_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_LTE_BAND17;
    search_req.rat_pri_list.priority_list_info[1].acq_sys_mode = SYS_SYS_MODE_CDMA;
    search_req.rat_pri_list.priority_list_info[1].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_BC1;
    search_req.plmn_rat_list.length = 0;
    search_req.rplmn_info_is_valid = TRUE;
    search_req.rplmn.mcc[0] = 7;
    search_req.rplmn.mcc[1] = 8;
    search_req.rplmn.mcc[2] = 9;
    search_req.rplmn.num_mnc_digits = 3;
    search_req.rplmn.mnc[0] = 10;
    search_req.rplmn.mnc[1] = 11;
    search_req.rplmn.mnc[2] = 12;
    search_req.hplmn_info_is_valid = TRUE;
    search_req.hplmn.mcc[0] = 13;
    search_req.hplmn.mcc[1] = 14;
    search_req.hplmn.mcc[2] = 15;
    search_req.hplmn.num_mnc_digits = 3;
    search_req.hplmn.mnc[0] = 16;
    search_req.hplmn.mnc[1] = 17;
    search_req.hplmn.mnc[2] = 18;
    search_req.ehplmn_list.num_plmns = 1;
    search_req.ehplmn_list.plmn[0].mcc[0] = 19;
    search_req.ehplmn_list.plmn[0].mcc[1] = 20;
    search_req.ehplmn_list.plmn[0].mcc[2] = 21;
    search_req.ehplmn_list.plmn[0].num_mnc_digits = 3;
    search_req.ehplmn_list.plmn[0].mnc[0] = 22;
    search_req.ehplmn_list.plmn[0].mnc[1] = 23;
    search_req.ehplmn_list.plmn[0].mnc[2] = 24;
    memset(&search_req.eplmn_list,0,sizeof(search_req.eplmn_list));
    memset(&search_req.forbidden_ta_list,0,
           sizeof(search_req.forbidden_ta_list));
    memset(&search_req.mcc_mode_band_filter,0,
			   sizeof(search_req.mcc_mode_band_filter));

    // Send plmn_search_req to RRC
    status = msgr_send(&search_req.msg_hdr, sizeof(search_req));
    TF_ASSERT(status == E_SUCCESS);


}

void LteRrcTesteMBMSMCCHWaitTimerExpDuringIratBPLMNAutomatic__Test()
{
  lte_rrc_plmn_search_req_s search_req;
  lte_cphy_msg_bplmn_start_req_s *start_req_ptr;
  lte_irat_abort_plmn_srch_req_s *abort_plmn_req_ptr = NULL;
  lte_irat_abort_plmn_srch_rsp_s abort_rsp;
  lte_irat_plmn_srch_req_s *search_req_ptr;
  lte_irat_plmn_srch_rsp_s search_cnf;
  lte_rrc_plmn_search_cnf_s *search_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_cphy_msg_bplmn_stop_req_s *stop_req_ptr;

  lte_cphy_stop_cnf_s stop_cnf;

  lte_cphy_abort_cnf_s abort_cnf_s;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_resume_cnf_s     resume_cnf;

  uint32 buf_len;
  lte_errno_e status;
  byte *buf_ptr;

  // At this point, send an enable req
  LteRrceMBMSEnable__Test();

  LteRrcTestPlmnSearchStartAutomatic__Test();

  TF_MSG("Checking for LTE_CPHY_BPLMN_START_REQ");
  lte_rrc_utf_get_next_ext_msg(&buf_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_cphy_msg_bplmn_start_req_s) == buf_len);
  start_req_ptr = (lte_cphy_msg_bplmn_start_req_s *)(void*) buf_ptr;
  TF_ASSERT(LTE_CPHY_BPLMN_START_REQ == start_req_ptr->msgr_hdr.id);
  TF_ASSERT(start_req_ptr->new_req == TRUE);
  TF_ASSERT(start_req_ptr->req_type == LTE_CPHY_BPLMN_TYPE_LTE_LTE);
  TF_ASSERT(start_req_ptr->num_chans == 1);
  TF_ASSERT(start_req_ptr->num_bands == 1);
  TF_ASSERT(start_req_ptr->priority == LTE_CPHY_BPLMN_PRIORITY_LOW);

  // Verify Intra-LTE PLMN search
  LteRrcTestToLteCommonSendSIB1(LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestToLteCommonVerifyBPLMNCellReq(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCellCnf(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCompleteInd(LTE_CPHY_BPLMN_ALL_DONE);

  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_IRAT);

  // Send time available indication from ML1
  LteRrcTestPlmnSearchFromLteSendTimeAvailInd();

  // Verify that LTE stack has been suspended
  TF_MSG("IRAT Integration: Verify request to suspend");
  LteRrcTestPlmnSearchVerifyReqToSuspend();

  // Send suspend confirmation.
  TF_MSG("IRAT Integration: Verifying Suspend request to ML1");
  LteRrcTestPlmnSearchSendML1SuspendCnf();

  // Wait for IRAT PLMN Search to be sent to W stack
  TF_MSG("IRAT Integration: Verify request to target RAT");
  TF_MSG ( "IRAT Integration: Waiting for WCDMA_RRC_LTE_PLMN_SRCH_REQ" );
  lte_rrc_utf_get_next_ext_msg((byte**)&search_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_irat_plmn_srch_req_s));
  TF_ASSERT(WCDMA_RRC_LTE_PLMN_SRCH_REQ == search_req_ptr->msg_hdr.id);

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestPlmnSearchVerifySuspendIndToTargetRAT(LTE_RRC_TEST_IRAT_W);

  TF_MSG("IRAT Integration: Send response from target RAT");
  LteRrcTestPlmnSearchSendSuspendIndResponseFromTargetRAT(LTE_RRC_TEST_IRAT_W);

  LteRrcTestPlmnSearchVerifyReqToResume();

  // Simulate ML1 resume success!!
  LteRrcTestPlmnSearchSendML1ResumeCnf(E_SUCCESS);

  LteRrcTestPlmnSearchFromLteVerifySkipReq();

  // After LTE stack is resumed, MCCH WAIT_TMR should be handled
  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSMCCHWaitTimerExpDuringManualLTEPLMN__Test()
{
  lte_rrc_plmn_search_req_s search_req;
  lte_cphy_msg_bplmn_start_req_s *start_req_ptr;
  lte_irat_abort_plmn_srch_req_s *abort_plmn_req_ptr;
  lte_irat_abort_plmn_srch_rsp_s abort_plmn_rsp;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_cphy_msg_bplmn_complete_ind_s complete_ind;
  lte_rrc_plmn_search_cnf_s *search_cnf_ptr;

  uint32 buf_len;
  lte_errno_e status;
  byte *buf_ptr;

  // At this point, send an enable req
  LteRrceMBMSEnable__Test();
  LteRrcSendeMBMSActivateReqForService1();
  LteRrcTestMCCHSetup();

  LteRrcTestPlmnSearchStartManualLTEOnly__Test();
  //Verify Start Req
  lte_rrc_utf_get_next_ext_msg((byte**)&start_req_ptr,&buf_len);
  TF_ASSERT ( sizeof (lte_cphy_msg_bplmn_start_req_s) == buf_len );
  TF_ASSERT ( LTE_CPHY_BPLMN_START_REQ == start_req_ptr->msgr_hdr.id );

  TF_SLEEP(6000);

  // Verify Intra-LTE PLMN search
  LteRrcTestToLteCommonSendSIB1(LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestMCCHRelease(0);

  LteRrcTestToLteCommonVerifyBPLMNCellReq(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCellCnf(LTE_RRC_TEST_CELL_2);

  TF_MSG ( "IRAT Integration: Sending LTE_CPHY_BPLMN_COMPLETE_IND" );

  // Prepare complete ind to send to RRC
  lte_rrc_init_default_hdr(&complete_ind.msgr_hdr, LTE_CPHY_BPLMN_COMPLETE_IND);
   complete_ind.status = LTE_CPHY_BPLMN_ALL_DONE;
   complete_ind.srv_cell_avail = TRUE;
   complete_ind.srv_cell_meas.earfcn = 1;
   complete_ind.srv_cell_meas.cell_id = 500;

  // Send search request to RRC
  status = msgr_send(&complete_ind.msgr_hdr, sizeof(complete_ind));
  TF_ASSERT(status == E_SUCCESS);

  //LteRrcTestToLteCommonSendBPLMNCompleteInd(LTE_CPHY_BPLMN_ALL_DONE);
  LteRrceMBMSGetAvailTmgiList(2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->status != E_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 35);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);


  // We expect a plmn_search_cnf message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&search_cnf_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_plmn_search_cnf_s));
  TF_ASSERT(LTE_RRC_PLMN_SEARCH_CNF == search_cnf_ptr->msg_hdr.id);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcMcchWtTimerExpDuringAcqBeforeTMGIAct__Test(lte_rrc_test_cell_e cell_index)
{

  lte_rrc_service_req_s service_req;
  lte_cphy_abort_req_s *cphy_abort_req_ptr = NULL;
  lte_cphy_abort_cnf_s cphy_abort_cnf;
  lte_cphy_system_scan_req_s  *cphy_system_scan_req_ptr = NULL;
  lte_cphy_system_scan_cnf_s cphy_scan_cnf;
  lte_cphy_acq_req_s *cphy_acq_req_ptr = NULL;
  lte_cphy_acq_cnf_s cphy_acq_cnf;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_cphy_msg_bplmn_complete_ind_s complete_ind;
  lte_rrc_plmn_search_cnf_s *search_cnf_ptr;

  uint32 buf_len;
  lte_errno_e status;
  byte *buf_ptr;

  // At this point, send an enable req and activate a service
  LteRrceMBMSEnable__Test();
  LteRrcSendeMBMSActivateReqForService1();
  LteRrcTestMCCHSetup();

  // Prepare service req to send to RRC
  lte_rrc_csp_set_iterative_band_scan_enabled(FALSE);
  memset(&service_req, 0, sizeof(lte_rrc_service_req_s));
  lte_rrc_init_default_hdr(&service_req.msg_hdr, LTE_RRC_SERVICE_REQ);

  service_req.trans_id = 1;
  service_req.network_select_mode = SYS_NETWORK_SELECTION_MODE_AUTOMATIC;

  service_req.req_plmn_info_is_valid = TRUE;
  service_req.req_plmn.mcc[0] = LTE_RRC_TEST_PLMN_MCC_0;
  service_req.req_plmn.mcc[1] = LTE_RRC_TEST_PLMN_MCC_1;
  service_req.req_plmn.mcc[2] = LTE_RRC_TEST_PLMN_MCC_2;

  service_req.req_plmn.num_mnc_digits = 3;
  service_req.req_plmn.mnc[0] = LTE_RRC_TEST_PLMN_MNC_0;
  service_req.req_plmn.mnc[1] = LTE_RRC_TEST_PLMN_MNC_1;
  service_req.req_plmn.mnc[2] = LTE_RRC_TEST_PLMN_MNC_2;

  service_req.rplmn_info_is_valid = TRUE;
  service_req.rplmn.mcc[0] = LTE_RRC_TEST_PLMN_MCC_0;
  service_req.rplmn.mcc[1] = LTE_RRC_TEST_PLMN_MCC_1;
  service_req.rplmn.mcc[2] = LTE_RRC_TEST_PLMN_MCC_2;

  service_req.rplmn.num_mnc_digits = 3;
  service_req.rplmn.mnc[0] = LTE_RRC_TEST_PLMN_MNC_0;
  service_req.rplmn.mnc[1] = LTE_RRC_TEST_PLMN_MNC_1;
  service_req.rplmn.mnc[2] = LTE_RRC_TEST_PLMN_MNC_2;

  service_req.hplmn_info_is_valid = FALSE;
  memset(&service_req.ehplmn_list,0,sizeof(service_req.ehplmn_list));

  memset(&service_req.forbidden_ta_list,0,
         sizeof(service_req.forbidden_ta_list));
  memset(&service_req.eplmn_list,0,sizeof(service_req.eplmn_list));

  service_req.eplmn_list.num_plmns = 2;
  service_req.eplmn_list.plmn[0].mcc[0] = LTE_RRC_TEST_PLMN_MCC_0;
  service_req.eplmn_list.plmn[0].mcc[1] = LTE_RRC_TEST_PLMN_MCC_1;
  service_req.eplmn_list.plmn[0].mcc[2] = LTE_RRC_TEST_PLMN_MCC_2;

  service_req.eplmn_list.plmn[0].num_mnc_digits = 3;
  service_req.eplmn_list.plmn[0].mnc[0] = LTE_RRC_TEST_PLMN_MNC_0;
  service_req.eplmn_list.plmn[0].mnc[1] = LTE_RRC_TEST_PLMN_MNC_1;
  service_req.eplmn_list.plmn[0].mnc[2] = LTE_RRC_TEST_PLMN_MNC_2;

  service_req.eplmn_list.plmn[1].mcc[0] = 1;
  service_req.eplmn_list.plmn[1].mcc[1] = 2;
  service_req.eplmn_list.plmn[1].mcc[2] = 3;

  service_req.eplmn_list.plmn[1].num_mnc_digits = 3;
  service_req.eplmn_list.plmn[1].mnc[0] = 5;
  service_req.eplmn_list.plmn[1].mnc[1] = 6;
  service_req.eplmn_list.plmn[1].mnc[2] = 7;


  memset(&service_req.rat_pri_list,0,sizeof(service_req.rat_pri_list));
  service_req.rat_pri_list.num_items = 6;
  service_req.rat_pri_list.priority_list_info[0].acq_sys_mode = SYS_SYS_MODE_LTE;
  service_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= (SYS_BAND_MASK_LTE_BAND1 |
                                                              SYS_BAND_MASK_LTE_BAND2 |
                                                              SYS_BAND_MASK_LTE_BAND13 |
                                                              SYS_BAND_MASK_LTE_BAND17 |
                                                              SYS_BAND_MASK_LTE_BAND25);
  service_req.rat_pri_list.priority_list_info[0].bst_band_cap.lte_band_cap.bits_1_64 |=
      service_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64;
  service_req.rat_pri_list.priority_list_info[0].bst_rat_acq_required = TRUE;
  service_req.rat_pri_list.priority_list_info[1].acq_sys_mode = SYS_SYS_MODE_HDR;
  service_req.rat_pri_list.priority_list_info[1].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_BC0_A;
  service_req.rat_pri_list.priority_list_info[1].band_cap.lte_band_cap.bits_1_64 |= (SYS_BAND_MASK_BC0 |
                                                              SYS_BAND_MASK_BC1 |
                                                              SYS_BAND_MASK_BC3 |
                                                              SYS_BAND_MASK_BC12 |
                                                              SYS_BAND_MASK_BC17);
  service_req.rat_pri_list.priority_list_info[2].acq_sys_mode = SYS_SYS_MODE_CDMA;
  service_req.rat_pri_list.priority_list_info[2].band_cap.lte_band_cap.bits_1_64 |= (SYS_BAND_MASK_BC0 |
                                                              SYS_BAND_MASK_BC1 |
                                                              SYS_BAND_MASK_BC3 |
                                                              SYS_BAND_MASK_BC4 |
                                                              SYS_BAND_MASK_BC12 |
                                                              SYS_BAND_MASK_BC16 |
                                                              SYS_BAND_MASK_BC17);
  service_req.rat_pri_list.priority_list_info[3].acq_sys_mode = SYS_SYS_MODE_WCDMA;
  service_req.rat_pri_list.priority_list_info[3].band_cap.lte_band_cap.bits_1_64 |= (SYS_BAND_MASK_WCDMA_II_PCS_1900 |
                                                              SYS_BAND_MASK_WCDMA_I_IMT_2000);

  service_req.rat_pri_list.priority_list_info[4].acq_sys_mode = SYS_SYS_MODE_GSM;
  service_req.rat_pri_list.priority_list_info[4].band_cap.lte_band_cap.bits_1_64 = (SYS_BAND_MASK_GSM_DCS_1800 |
                                                             SYS_BAND_MASK_GSM_PCS_1900 |
                                                             SYS_BAND_MASK_GSM_850 |
                                                             SYS_BAND_MASK_GSM_PGSM_900 |
                                                             SYS_BAND_MASK_GSM_EGSM_900);

  service_req.rat_pri_list.priority_list_info[5].acq_sys_mode = SYS_SYS_MODE_TDS;
  service_req.rat_pri_list.priority_list_info[5].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_TDS_BANDA;

  service_req.rat_pri_list.scan_type.use_timer = FALSE;
  service_req.rat_pri_list.scan_type.new_scan = TRUE;
  service_req.rat_pri_list.priority_list_info[0].acq_sys_time_interval = 0;

  service_req.use_timer = FALSE;
  service_req.scan_is_new = TRUE;
  service_req.lte_scan_time = 0;

  // Send service req to RRC
  status = msgr_send(&service_req.msg_hdr, sizeof(service_req));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a cphy_abort_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_abort_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_abort_req_s));
  TF_ASSERT(cphy_abort_req_ptr != NULL);
  TF_ASSERT(cphy_abort_req_ptr->msgr_hdr.id == LTE_CPHY_ABORT_REQ);

  // Prepare cphy_abort_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_abort_cnf.msgr_hdr, LTE_CPHY_ABORT_CNF);
  cphy_abort_cnf.status = E_SUCCESS;
  // Send cphy_abort_cnf to RRC
  status = msgr_send(&cphy_abort_cnf.msgr_hdr, sizeof(cphy_abort_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a system scan message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_system_scan_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_system_scan_req_s));
  TF_ASSERT(cphy_system_scan_req_ptr != NULL);
  TF_ASSERT(cphy_system_scan_req_ptr->msgr_hdr.id == LTE_CPHY_SYSTEM_SCAN_REQ);

  // Prepare cphy_scan_cnf_msg to send to RRC
  lte_rrc_init_default_hdr(&cphy_scan_cnf.msgr_hdr, LTE_CPHY_SYSTEM_SCAN_CNF);
  cphy_scan_cnf.trans_id = cphy_system_scan_req_ptr->trans_id;
  cphy_scan_cnf.sys_scan_results.num_systems = 1;
  cphy_scan_cnf.sys_scan_results.system[0].system.band = SYS_SBAND_LTE_EUTRAN_BAND1;
  cphy_scan_cnf.sys_scan_results.system[0].system.bandwidth = LTE_BW_NRB_6;
  cphy_scan_cnf.sys_scan_results.system[0].system.earfcn = cell[cell_index].earfcn;
  cphy_scan_cnf.sys_scan_results.system[0].energy = -60;

  //Send cphy_scan_cnf_msg to RRC
  status = msgr_send(&cphy_scan_cnf.msgr_hdr, sizeof(cphy_scan_cnf));
  LTE_ASSERT(status == E_SUCCESS);

 // ---------------------------------------------

  // We expect a ACQ_REQ message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_acq_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_acq_req_s));
  TF_ASSERT(cphy_acq_req_ptr != NULL);
  TF_ASSERT(cphy_acq_req_ptr->msgr_hdr.id == LTE_CPHY_ACQ_REQ);
  TF_ASSERT(cphy_acq_req_ptr->band == SYS_SBAND_LTE_EUTRAN_BAND1);
  TF_ASSERT(cphy_acq_req_ptr->earfcn == cell[cell_index].earfcn);

  // Let MCCH timer expires
  TF_SLEEP(10240);

  LteRrceMBMSGetAvailTmgiList(2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status != LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 35);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcMcchWtTimerExpDuringAcq__Test(lte_rrc_test_cell_e cell_index)
{

  lte_rrc_service_req_s service_req;
  lte_cphy_abort_req_s *cphy_abort_req_ptr = NULL;
  lte_cphy_abort_cnf_s cphy_abort_cnf;
  lte_cphy_system_scan_req_s  *cphy_system_scan_req_ptr = NULL;
  lte_cphy_system_scan_cnf_s cphy_scan_cnf;
  lte_cphy_acq_req_s *cphy_acq_req_ptr = NULL;
  lte_cphy_acq_cnf_s cphy_acq_cnf;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_cphy_msg_bplmn_complete_ind_s complete_ind;
  lte_rrc_plmn_search_cnf_s *search_cnf_ptr;

  uint32 buf_len;
  lte_errno_e status;
  byte *buf_ptr;

  // At this point, send an enable req and activate a service
  LteRrceMBMSEnable__Test();
  LteRrcSendeMBMSActivateReqForService1();
  LteRrcTestMCCHSetup();

  // Prepare service req to send to RRC
  lte_rrc_csp_set_iterative_band_scan_enabled(FALSE);
  memset(&service_req, 0, sizeof(lte_rrc_service_req_s));
  lte_rrc_init_default_hdr(&service_req.msg_hdr, LTE_RRC_SERVICE_REQ);

  service_req.trans_id = 1;
  service_req.network_select_mode = SYS_NETWORK_SELECTION_MODE_AUTOMATIC;

  service_req.req_plmn_info_is_valid = TRUE;
  service_req.req_plmn.mcc[0] = LTE_RRC_TEST_PLMN_MCC_0;
  service_req.req_plmn.mcc[1] = LTE_RRC_TEST_PLMN_MCC_1;
  service_req.req_plmn.mcc[2] = LTE_RRC_TEST_PLMN_MCC_2;

  service_req.req_plmn.num_mnc_digits = 3;
  service_req.req_plmn.mnc[0] = LTE_RRC_TEST_PLMN_MNC_0;
  service_req.req_plmn.mnc[1] = LTE_RRC_TEST_PLMN_MNC_1;
  service_req.req_plmn.mnc[2] = LTE_RRC_TEST_PLMN_MNC_2;

  service_req.rplmn_info_is_valid = TRUE;
  service_req.rplmn.mcc[0] = LTE_RRC_TEST_PLMN_MCC_0;
  service_req.rplmn.mcc[1] = LTE_RRC_TEST_PLMN_MCC_1;
  service_req.rplmn.mcc[2] = LTE_RRC_TEST_PLMN_MCC_2;

  service_req.rplmn.num_mnc_digits = 3;
  service_req.rplmn.mnc[0] = LTE_RRC_TEST_PLMN_MNC_0;
  service_req.rplmn.mnc[1] = LTE_RRC_TEST_PLMN_MNC_1;
  service_req.rplmn.mnc[2] = LTE_RRC_TEST_PLMN_MNC_2;

  service_req.hplmn_info_is_valid = FALSE;
  memset(&service_req.ehplmn_list,0,sizeof(service_req.ehplmn_list));

  memset(&service_req.forbidden_ta_list,0,
         sizeof(service_req.forbidden_ta_list));
  memset(&service_req.eplmn_list,0,sizeof(service_req.eplmn_list));

  service_req.eplmn_list.num_plmns = 2;
  service_req.eplmn_list.plmn[0].mcc[0] = LTE_RRC_TEST_PLMN_MCC_0;
  service_req.eplmn_list.plmn[0].mcc[1] = LTE_RRC_TEST_PLMN_MCC_1;
  service_req.eplmn_list.plmn[0].mcc[2] = LTE_RRC_TEST_PLMN_MCC_2;

  service_req.eplmn_list.plmn[0].num_mnc_digits = 3;
  service_req.eplmn_list.plmn[0].mnc[0] = LTE_RRC_TEST_PLMN_MNC_0;
  service_req.eplmn_list.plmn[0].mnc[1] = LTE_RRC_TEST_PLMN_MNC_1;
  service_req.eplmn_list.plmn[0].mnc[2] = LTE_RRC_TEST_PLMN_MNC_2;

  service_req.eplmn_list.plmn[1].mcc[0] = 1;
  service_req.eplmn_list.plmn[1].mcc[1] = 2;
  service_req.eplmn_list.plmn[1].mcc[2] = 3;

  service_req.eplmn_list.plmn[1].num_mnc_digits = 3;
  service_req.eplmn_list.plmn[1].mnc[0] = 5;
  service_req.eplmn_list.plmn[1].mnc[1] = 6;
  service_req.eplmn_list.plmn[1].mnc[2] = 7;


  memset(&service_req.rat_pri_list,0,sizeof(service_req.rat_pri_list));
  service_req.rat_pri_list.num_items = 6;
  service_req.rat_pri_list.priority_list_info[0].acq_sys_mode = SYS_SYS_MODE_LTE;
  service_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= (SYS_BAND_MASK_LTE_BAND1 |
                                                              SYS_BAND_MASK_LTE_BAND2 |
                                                              SYS_BAND_MASK_LTE_BAND13 |
                                                              SYS_BAND_MASK_LTE_BAND17 |
                                                              SYS_BAND_MASK_LTE_BAND25);
  service_req.rat_pri_list.priority_list_info[0].bst_band_cap.lte_band_cap.bits_1_64 |=
      service_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64;
  service_req.rat_pri_list.priority_list_info[0].bst_rat_acq_required = TRUE;
  service_req.rat_pri_list.priority_list_info[1].acq_sys_mode = SYS_SYS_MODE_HDR;
  service_req.rat_pri_list.priority_list_info[1].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_BC0_A;
  service_req.rat_pri_list.priority_list_info[1].band_cap.lte_band_cap.bits_1_64 |= (SYS_BAND_MASK_BC0 |
                                                              SYS_BAND_MASK_BC1 |
                                                              SYS_BAND_MASK_BC3 |
                                                              SYS_BAND_MASK_BC12 |
                                                              SYS_BAND_MASK_BC17);
  service_req.rat_pri_list.priority_list_info[2].acq_sys_mode = SYS_SYS_MODE_CDMA;
  service_req.rat_pri_list.priority_list_info[2].band_cap.lte_band_cap.bits_1_64 |= (SYS_BAND_MASK_BC0 |
                                                              SYS_BAND_MASK_BC1 |
                                                              SYS_BAND_MASK_BC3 |
                                                              SYS_BAND_MASK_BC4 |
                                                              SYS_BAND_MASK_BC12 |
                                                              SYS_BAND_MASK_BC16 |
                                                              SYS_BAND_MASK_BC17);
  service_req.rat_pri_list.priority_list_info[3].acq_sys_mode = SYS_SYS_MODE_WCDMA;
  service_req.rat_pri_list.priority_list_info[3].band_cap.lte_band_cap.bits_1_64 |= (SYS_BAND_MASK_WCDMA_II_PCS_1900 |
                                                              SYS_BAND_MASK_WCDMA_I_IMT_2000);

  service_req.rat_pri_list.priority_list_info[4].acq_sys_mode = SYS_SYS_MODE_GSM;
  service_req.rat_pri_list.priority_list_info[4].band_cap.lte_band_cap.bits_1_64 = (SYS_BAND_MASK_GSM_DCS_1800 |
                                                             SYS_BAND_MASK_GSM_PCS_1900 |
                                                             SYS_BAND_MASK_GSM_850 |
                                                             SYS_BAND_MASK_GSM_PGSM_900 |
                                                             SYS_BAND_MASK_GSM_EGSM_900);

  service_req.rat_pri_list.priority_list_info[5].acq_sys_mode = SYS_SYS_MODE_TDS;
  service_req.rat_pri_list.priority_list_info[5].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_TDS_BANDA;

  service_req.rat_pri_list.scan_type.use_timer = FALSE;
  service_req.rat_pri_list.scan_type.new_scan = TRUE;
  service_req.rat_pri_list.priority_list_info[0].acq_sys_time_interval = 0;

  service_req.use_timer = FALSE;
  service_req.scan_is_new = TRUE;
  service_req.lte_scan_time = 0;

  // Send service req to RRC
  status = msgr_send(&service_req.msg_hdr, sizeof(service_req));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a cphy_abort_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_abort_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_abort_req_s));
  TF_ASSERT(cphy_abort_req_ptr != NULL);
  TF_ASSERT(cphy_abort_req_ptr->msgr_hdr.id == LTE_CPHY_ABORT_REQ);

  // Prepare cphy_abort_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_abort_cnf.msgr_hdr, LTE_CPHY_ABORT_CNF);
  cphy_abort_cnf.status = E_SUCCESS;
  // Send cphy_abort_cnf to RRC
  status = msgr_send(&cphy_abort_cnf.msgr_hdr, sizeof(cphy_abort_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a system scan message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_system_scan_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_system_scan_req_s));
  TF_ASSERT(cphy_system_scan_req_ptr != NULL);
  TF_ASSERT(cphy_system_scan_req_ptr->msgr_hdr.id == LTE_CPHY_SYSTEM_SCAN_REQ);

  // Prepare cphy_scan_cnf_msg to send to RRC
  lte_rrc_init_default_hdr(&cphy_scan_cnf.msgr_hdr, LTE_CPHY_SYSTEM_SCAN_CNF);
  cphy_scan_cnf.trans_id = cphy_system_scan_req_ptr->trans_id;
  cphy_scan_cnf.sys_scan_results.num_systems = 1;
  cphy_scan_cnf.sys_scan_results.system[0].system.band = SYS_SBAND_LTE_EUTRAN_BAND1;
  cphy_scan_cnf.sys_scan_results.system[0].system.bandwidth = LTE_BW_NRB_6;
  cphy_scan_cnf.sys_scan_results.system[0].system.earfcn = cell[cell_index].earfcn;
  cphy_scan_cnf.sys_scan_results.system[0].energy = -60;

  //Send cphy_scan_cnf_msg to RRC
  status = msgr_send(&cphy_scan_cnf.msgr_hdr, sizeof(cphy_scan_cnf));
  LTE_ASSERT(status == E_SUCCESS);

 // ---------------------------------------------

  // We expect a ACQ_REQ message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_acq_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_acq_req_s));
  TF_ASSERT(cphy_acq_req_ptr != NULL);
  TF_ASSERT(cphy_acq_req_ptr->msgr_hdr.id == LTE_CPHY_ACQ_REQ);
  TF_ASSERT(cphy_acq_req_ptr->band == SYS_SBAND_LTE_EUTRAN_BAND1);
  TF_ASSERT(cphy_acq_req_ptr->earfcn == cell[cell_index].earfcn);

  // Let MCCH timer expires
  TF_SLEEP(10240);

  LteRrceMBMSGetAvailTmgiList(2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status != LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 35);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcMcchWtTimerExpDuringAcqWhenTMGIActive__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{

  lte_rrc_service_req_s service_req;
  lte_cphy_abort_req_s *cphy_abort_req_ptr = NULL;
  lte_cphy_abort_cnf_s cphy_abort_cnf;
  lte_cphy_system_scan_req_s  *cphy_system_scan_req_ptr = NULL;
  lte_cphy_system_scan_cnf_s cphy_scan_cnf;
  lte_cphy_acq_req_s *cphy_acq_req_ptr = NULL;
  lte_cphy_acq_cnf_s cphy_acq_cnf;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_cphy_msg_bplmn_complete_ind_s complete_ind;
  lte_rrc_plmn_search_cnf_s *search_cnf_ptr;

  lte_rrc_embms_avail_sai_list_ind_s *sai_list_indi;
  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  uint32 buf_len;
  lte_errno_e status;
  byte *buf_ptr;

  // At this point, send an enable req and activate a service
  LteRrceMBMSEnable__Test();
  LteRrcSendeMBMSActivateReqForService1();
  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);

  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Prepare service req to send to RRC
  lte_rrc_csp_set_iterative_band_scan_enabled(FALSE);
  memset(&service_req, 0, sizeof(lte_rrc_service_req_s));
  lte_rrc_init_default_hdr(&service_req.msg_hdr, LTE_RRC_SERVICE_REQ);

  service_req.trans_id = 1;
  service_req.network_select_mode = SYS_NETWORK_SELECTION_MODE_AUTOMATIC;

  service_req.req_plmn_info_is_valid = TRUE;
  service_req.req_plmn.mcc[0] = LTE_RRC_TEST_PLMN_MCC_0;
  service_req.req_plmn.mcc[1] = LTE_RRC_TEST_PLMN_MCC_1;
  service_req.req_plmn.mcc[2] = LTE_RRC_TEST_PLMN_MCC_2;

  service_req.req_plmn.num_mnc_digits = 3;
  service_req.req_plmn.mnc[0] = LTE_RRC_TEST_PLMN_MNC_0;
  service_req.req_plmn.mnc[1] = LTE_RRC_TEST_PLMN_MNC_1;
  service_req.req_plmn.mnc[2] = LTE_RRC_TEST_PLMN_MNC_2;

  service_req.rplmn_info_is_valid = TRUE;
  service_req.rplmn.mcc[0] = LTE_RRC_TEST_PLMN_MCC_0;
  service_req.rplmn.mcc[1] = LTE_RRC_TEST_PLMN_MCC_1;
  service_req.rplmn.mcc[2] = LTE_RRC_TEST_PLMN_MCC_2;

  service_req.rplmn.num_mnc_digits = 3;
  service_req.rplmn.mnc[0] = LTE_RRC_TEST_PLMN_MNC_0;
  service_req.rplmn.mnc[1] = LTE_RRC_TEST_PLMN_MNC_1;
  service_req.rplmn.mnc[2] = LTE_RRC_TEST_PLMN_MNC_2;

  service_req.hplmn_info_is_valid = FALSE;
  memset(&service_req.ehplmn_list,0,sizeof(service_req.ehplmn_list));

  memset(&service_req.forbidden_ta_list,0,
         sizeof(service_req.forbidden_ta_list));
  memset(&service_req.eplmn_list,0,sizeof(service_req.eplmn_list));

  service_req.eplmn_list.num_plmns = 2;
  service_req.eplmn_list.plmn[0].mcc[0] = LTE_RRC_TEST_PLMN_MCC_0;
  service_req.eplmn_list.plmn[0].mcc[1] = LTE_RRC_TEST_PLMN_MCC_1;
  service_req.eplmn_list.plmn[0].mcc[2] = LTE_RRC_TEST_PLMN_MCC_2;

  service_req.eplmn_list.plmn[0].num_mnc_digits = 3;
  service_req.eplmn_list.plmn[0].mnc[0] = LTE_RRC_TEST_PLMN_MNC_0;
  service_req.eplmn_list.plmn[0].mnc[1] = LTE_RRC_TEST_PLMN_MNC_1;
  service_req.eplmn_list.plmn[0].mnc[2] = LTE_RRC_TEST_PLMN_MNC_2;

  service_req.eplmn_list.plmn[1].mcc[0] = 1;
  service_req.eplmn_list.plmn[1].mcc[1] = 2;
  service_req.eplmn_list.plmn[1].mcc[2] = 3;

  service_req.eplmn_list.plmn[1].num_mnc_digits = 3;
  service_req.eplmn_list.plmn[1].mnc[0] = 5;
  service_req.eplmn_list.plmn[1].mnc[1] = 6;
  service_req.eplmn_list.plmn[1].mnc[2] = 7;


  memset(&service_req.rat_pri_list,0,sizeof(service_req.rat_pri_list));
  service_req.rat_pri_list.num_items = 6;
  service_req.rat_pri_list.priority_list_info[0].acq_sys_mode = SYS_SYS_MODE_LTE;
  service_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= (SYS_BAND_MASK_LTE_BAND1 |
                                                              SYS_BAND_MASK_LTE_BAND2 |
                                                              SYS_BAND_MASK_LTE_BAND13 |
                                                              SYS_BAND_MASK_LTE_BAND17 |
                                                              SYS_BAND_MASK_LTE_BAND25);
  service_req.rat_pri_list.priority_list_info[0].bst_band_cap.lte_band_cap.bits_1_64 |=
      service_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64;
  service_req.rat_pri_list.priority_list_info[0].bst_rat_acq_required = TRUE;
  service_req.rat_pri_list.priority_list_info[1].acq_sys_mode = SYS_SYS_MODE_HDR;
  service_req.rat_pri_list.priority_list_info[1].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_BC0_A;
  service_req.rat_pri_list.priority_list_info[1].band_cap.lte_band_cap.bits_1_64 |= (SYS_BAND_MASK_BC0 |
                                                              SYS_BAND_MASK_BC1 |
                                                              SYS_BAND_MASK_BC3 |
                                                              SYS_BAND_MASK_BC12 |
                                                              SYS_BAND_MASK_BC17);
  service_req.rat_pri_list.priority_list_info[2].acq_sys_mode = SYS_SYS_MODE_CDMA;
  service_req.rat_pri_list.priority_list_info[2].band_cap.lte_band_cap.bits_1_64 |= (SYS_BAND_MASK_BC0 |
                                                              SYS_BAND_MASK_BC1 |
                                                              SYS_BAND_MASK_BC3 |
                                                              SYS_BAND_MASK_BC4 |
                                                              SYS_BAND_MASK_BC12 |
                                                              SYS_BAND_MASK_BC16 |
                                                              SYS_BAND_MASK_BC17);
  service_req.rat_pri_list.priority_list_info[3].acq_sys_mode = SYS_SYS_MODE_WCDMA;
  service_req.rat_pri_list.priority_list_info[3].band_cap.lte_band_cap.bits_1_64 |= (SYS_BAND_MASK_WCDMA_II_PCS_1900 |
                                                              SYS_BAND_MASK_WCDMA_I_IMT_2000);

  service_req.rat_pri_list.priority_list_info[4].acq_sys_mode = SYS_SYS_MODE_GSM;
  service_req.rat_pri_list.priority_list_info[4].band_cap.lte_band_cap.bits_1_64 = (SYS_BAND_MASK_GSM_DCS_1800 |
                                                             SYS_BAND_MASK_GSM_PCS_1900 |
                                                             SYS_BAND_MASK_GSM_850 |
                                                             SYS_BAND_MASK_GSM_PGSM_900 |
                                                             SYS_BAND_MASK_GSM_EGSM_900);

  service_req.rat_pri_list.priority_list_info[5].acq_sys_mode = SYS_SYS_MODE_TDS;
  service_req.rat_pri_list.priority_list_info[5].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_TDS_BANDA;

  service_req.rat_pri_list.scan_type.use_timer = FALSE;
  service_req.rat_pri_list.scan_type.new_scan = TRUE;
  service_req.rat_pri_list.priority_list_info[0].acq_sys_time_interval = 0;

  service_req.use_timer = FALSE;
  service_req.scan_is_new = TRUE;
  service_req.lte_scan_time = 0;
  service_req.csg_id = SYS_CSG_ID_INVALID;

  // Send service req to RRC
  status = msgr_send(&service_req.msg_hdr, sizeof(service_req));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a cphy_abort_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_abort_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_abort_req_s));
  TF_ASSERT(cphy_abort_req_ptr != NULL);
  TF_ASSERT(cphy_abort_req_ptr->msgr_hdr.id == LTE_CPHY_ABORT_REQ);

  // Prepare cphy_abort_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_abort_cnf.msgr_hdr, LTE_CPHY_ABORT_CNF);
  cphy_abort_cnf.status = E_SUCCESS;
  // Send cphy_abort_cnf to RRC
  status = msgr_send(&cphy_abort_cnf.msgr_hdr, sizeof(cphy_abort_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a system scan message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_system_scan_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_system_scan_req_s));
  TF_ASSERT(cphy_system_scan_req_ptr != NULL);
  TF_ASSERT(cphy_system_scan_req_ptr->msgr_hdr.id == LTE_CPHY_SYSTEM_SCAN_REQ);

  // Prepare cphy_scan_cnf_msg to send to RRC
  lte_rrc_init_default_hdr(&cphy_scan_cnf.msgr_hdr, LTE_CPHY_SYSTEM_SCAN_CNF);
  cphy_scan_cnf.trans_id = cphy_system_scan_req_ptr->trans_id;
  cphy_scan_cnf.sys_scan_results.num_systems = 1;
  cphy_scan_cnf.sys_scan_results.system[0].system.band = SYS_SBAND_LTE_EUTRAN_BAND1;
  cphy_scan_cnf.sys_scan_results.system[0].system.bandwidth = LTE_BW_NRB_6;
  cphy_scan_cnf.sys_scan_results.system[0].system.earfcn = cell[cell_index].earfcn;
  cphy_scan_cnf.sys_scan_results.system[0].energy = -60;

  //Send cphy_scan_cnf_msg to RRC
  status = msgr_send(&cphy_scan_cnf.msgr_hdr, sizeof(cphy_scan_cnf));
  LTE_ASSERT(status == E_SUCCESS);

 // ---------------------------------------------

  // We expect a ACQ_REQ message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_acq_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_acq_req_s));
  TF_ASSERT(cphy_acq_req_ptr != NULL);
  TF_ASSERT(cphy_acq_req_ptr->msgr_hdr.id == LTE_CPHY_ACQ_REQ);
  TF_ASSERT(cphy_acq_req_ptr->band == SYS_SBAND_LTE_EUTRAN_BAND1);
  TF_ASSERT(cphy_acq_req_ptr->earfcn == cell[cell_index].earfcn);

  // Let MCCH timer expires
  TF_SLEEP(10240);

  // Let RRC handle MCCH timer expiry
  lte_rrc_utf_wait_for_done();

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_MCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);

  // Prepare cphy_acq_cnf_msg to send to RRC
  lte_rrc_init_default_hdr(&cphy_acq_cnf.msgr_hdr, LTE_CPHY_ACQ_CNF);
  cphy_acq_cnf.trans_id = cphy_acq_req_ptr->trans_id;
  cphy_acq_cnf.status = E_SUCCESS;
  cphy_acq_cnf.band = SYS_SBAND_LTE_EUTRAN_BAND1;
  cphy_acq_cnf.earfcn = cell[cell_index].earfcn;
  cphy_acq_cnf.acquired_cell.cp = LTE_L1_CP_MODE_NORMAL;
  memset(&cphy_acq_cnf.acquired_cell.mib,0,sizeof(cphy_acq_cnf.acquired_cell.mib));
  cphy_acq_cnf.acquired_cell.mib.dl_bandwidth = LTE_BW_NRB_6;
  cphy_acq_cnf.acquired_cell.phy_cell_id = cell[cell_index].phys_cell_id;
  uint64 short_maci = 0;

  //Send cphy_acq_cnf_msg to RRC
  status = msgr_send(&cphy_acq_cnf.msgr_hdr, sizeof(cphy_acq_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  LteRrcTestSICollectionAfterCampingEmbms__Test(cell_index, group_index, TRUE, FALSE);

  /* Verify SIB13 reading and setting up of MCCH */
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sai_list_indi, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_embms_avail_sai_list_ind_s));
  TF_ASSERT(sai_list_indi->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
    // We expect meas sm to have thrown the idle meas cfg req
    lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
    TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
    lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
    idle_meas_cfg_cnf.status = E_SUCCESS;
    status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcMtchResetupAfterServReq__Test(lte_rrc_test_cell_e cell_index,
                                         lte_rrc_test_sib_update_e group_index)
{

  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  uint32 buf_len;
  lte_errno_e status;
  byte *buf_ptr;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  // At this point, send an enable req and activate a service
  LteRrceMBMSEnable__Test();
  LteRrcSendeMBMSActivateReqForService1();
  LteRrcTestMCCHSetup();
  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Send Service Req
  LteRrcTestServiceRequestBandScanInIdleCamped__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionOnSameCellAfterOOSEMBMS__Test(cell_index, group_index);

  // Let RRC to camp on the same cell where we were
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test MCCH reconfiguration after SIB updated indi is received
  LteRrcTestMTCHSetupGeneric(0,1,2,false,LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  LteRrcTestSendMCCHPDUAfterOOSForArea0();

  /* Verify SIB13 reading and setting up of MCCH */
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 2);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActivateAfterHORachFailure__Test(void)
{

  lte_rrc_service_req_s service_req;
  lte_rrc_service_ind_s *service_ind_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  lte_cphy_system_scan_req_s  *cphy_system_scan_req_ptr = NULL;
  lte_cphy_system_scan_cnf_s cphy_scan_cnf;
  lte_cphy_acq_req_s *cphy_acq_req_ptr = NULL;
  lte_cphy_acq_cnf_s cphy_acq_cnf;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_cphy_dedicated_cfg_req_s *cphy_cfg_req_ptr = NULL;
  lte_cphy_dedicated_cfg_cnf_s cphy_cfg_cnf;

  lte_cphy_conn_meas_cfg_req_s *cphy_meas_cfg_req_ptr = NULL;
  lte_cphy_conn_meas_cfg_cnf_s cphy_meas_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;

  lte_mac_access_req_msg_s *mac_access_req_ptr = NULL;
  lte_mac_access_cnf_msg_s mac_access_cnf;

  dsm_item_type *dsm_ptr_cre1 = NULL, *dsm_ptr_cr1 = NULL; /* DSM pointers */
  msgr_attach_struct_type *att_ptr_cre1; /* Message attachment pointers */

  lte_mac_cfg_req_msg_s *mac_cfg_req_ptr = NULL;
  lte_mac_rrc_dl_data_ind_s ccch_dl_data_ind;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req_ptr = NULL;
  lte_rlc_cfg_cnf_s rlc_cfg_cnf;
  lte_rlcul_cfg_req_s *rlcul_cfg_req_ptr = NULL;

  lte_pdcpdl_cfg_req_msg_s *pdcpdl_cfg_req_ptr = NULL;
  lte_pdcpdl_cfg_cnf_msg_s pdcpdl_cfg_cnf;
  lte_pdcpul_cfg_req_msg_s *pdcpul_cfg_req_ptr = NULL;
  lte_pdcpul_cfg_cnf_msg_s pdcpul_cfg_cnf;
  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req_ptr = NULL;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  uint32 buf_len;
  lte_errno_e status;


  LteRrcTestRLFConfigPriorToCellSelectionGeneric__Test();
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // We expect a service_ind message, indicating NO SERVICE from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind_ptr->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind_ptr != NULL);
  TF_ASSERT(service_ind_ptr->svc_status == LTE_RRC_SVC_STATUS_NOT_AVAILABLE);

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_UCAST_OOS);


  // ---------------------------------------------

  // Prepare service req to send to RRC
  lte_rrc_csp_set_iterative_band_scan_enabled(FALSE);
  memset(&service_req, 0, sizeof(lte_rrc_service_req_s));
  lte_rrc_init_default_hdr(&service_req.msg_hdr, LTE_RRC_SERVICE_REQ);

  service_req.trans_id = 1;
  service_req.network_select_mode = SYS_NETWORK_SELECTION_MODE_AUTOMATIC;

  service_req.req_plmn_info_is_valid = TRUE;
  service_req.req_plmn.mcc[0] = LTE_RRC_TEST_PLMN_MCC_0;
  service_req.req_plmn.mcc[1] = LTE_RRC_TEST_PLMN_MCC_1;
  service_req.req_plmn.mcc[2] = LTE_RRC_TEST_PLMN_MCC_2;

  service_req.req_plmn.num_mnc_digits = 3;
  service_req.req_plmn.mnc[0] = LTE_RRC_TEST_PLMN_MNC_0;
  service_req.req_plmn.mnc[1] = LTE_RRC_TEST_PLMN_MNC_1;
  service_req.req_plmn.mnc[2] = LTE_RRC_TEST_PLMN_MNC_2;

  service_req.rplmn_info_is_valid = FALSE;
  service_req.hplmn_info_is_valid = FALSE;
  memset(&service_req.ehplmn_list,0,sizeof(service_req.ehplmn_list));

  memset(&service_req.forbidden_ta_list,0,
         sizeof(service_req.forbidden_ta_list));

  memset(&service_req.eplmn_list,0,sizeof(service_req.eplmn_list));

  memset(&service_req.rat_pri_list,0,sizeof(service_req.rat_pri_list));
  service_req.rat_pri_list.num_items = 1;
  service_req.rat_pri_list.priority_list_info[0].acq_sys_mode = SYS_SYS_MODE_LTE;
  service_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_LTE_BAND1;
  service_req.rat_pri_list.priority_list_info[0].bst_band_cap.lte_band_cap.bits_1_64 |= service_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64;
  service_req.rat_pri_list.priority_list_info[0].bst_rat_acq_required = TRUE;

  service_req.rat_pri_list.scan_type.use_timer = FALSE;
  service_req.rat_pri_list.scan_type.new_scan = TRUE;
  service_req.rat_pri_list.priority_list_info[0].acq_sys_time_interval = 0;

  service_req.use_timer = FALSE;
  service_req.scan_is_new = TRUE;
  service_req.lte_scan_time = 0;
  service_req.csg_id = SYS_CSG_ID_INVALID;

  // Send service req to RRC
  status = msgr_send(&service_req.msg_hdr, sizeof(service_req));
  TF_ASSERT(status == E_SUCCESS);

   // ---------------------------------------------

  // We expect a system scan message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_system_scan_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_system_scan_req_s));
  TF_ASSERT(cphy_system_scan_req_ptr != NULL);
  TF_ASSERT(cphy_system_scan_req_ptr->msgr_hdr.id == LTE_CPHY_SYSTEM_SCAN_REQ);

  // Prepare cphy_scan_cnf_msg to send to RRC
  lte_rrc_init_default_hdr(&cphy_scan_cnf.msgr_hdr, LTE_CPHY_SYSTEM_SCAN_CNF);
  cphy_scan_cnf.trans_id = cphy_system_scan_req_ptr->trans_id;
  cphy_scan_cnf.sys_scan_results.num_systems = 1;
  cphy_scan_cnf.sys_scan_results.system[0].system.band = SYS_SBAND_LTE_EUTRAN_BAND1;
  cphy_scan_cnf.sys_scan_results.system[0].system.bandwidth = LTE_BW_NRB_6;
  cphy_scan_cnf.sys_scan_results.system[0].system.earfcn = cell[cell_index].earfcn;
  cphy_scan_cnf.sys_scan_results.system[0].energy = -60;

  //Send cphy_scan_cnf_msg to RRC
  status = msgr_send(&cphy_scan_cnf.msgr_hdr, sizeof(cphy_scan_cnf));
  LTE_ASSERT(status == E_SUCCESS);

 // ---------------------------------------------

  // We expect a ACQ_REQ message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_acq_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_acq_req_s));
  TF_ASSERT(cphy_acq_req_ptr != NULL);
  TF_ASSERT(cphy_acq_req_ptr->msgr_hdr.id == LTE_CPHY_ACQ_REQ);
  TF_ASSERT(cphy_acq_req_ptr->band == SYS_SBAND_LTE_EUTRAN_BAND1);
  TF_ASSERT(cphy_acq_req_ptr->earfcn == cell[cell_index].earfcn);

  // Prepare cphy_acq_cnf_msg to send to RRC
  lte_rrc_init_default_hdr(&cphy_acq_cnf.msgr_hdr, LTE_CPHY_ACQ_CNF);
  cphy_acq_cnf.trans_id = cphy_acq_req_ptr->trans_id;
  cphy_acq_cnf.status = E_SUCCESS;
  cphy_acq_cnf.band = SYS_SBAND_LTE_EUTRAN_BAND1;
  cphy_acq_cnf.earfcn = cell[cell_index].earfcn;
  cphy_acq_cnf.acquired_cell.cp = LTE_L1_CP_MODE_NORMAL;
  memset(&cphy_acq_cnf.acquired_cell.mib,0,sizeof(cphy_acq_cnf.acquired_cell.mib));
  cphy_acq_cnf.acquired_cell.mib.dl_bandwidth = LTE_BW_NRB_6;
  cphy_acq_cnf.acquired_cell.phy_cell_id = cell[cell_index].phys_cell_id;
  uint64 short_maci = 0;

  //Send cphy_acq_cnf_msg to RRC
  status = msgr_send(&cphy_acq_cnf.msgr_hdr, sizeof(cphy_acq_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionOnSameCellAfterOOSEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestConnectedCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // ---------------------------------------------
  /* Catch the MAC_ACCESS_REQ message sent by CRE to MAC, containing
    the ReestablishmentRequest */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_access_req_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_mac_access_req_msg_s) == buf_len);

  // Now activate service 1
  LteRrcSendeMBMSActivateReqForService0();

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req_ptr->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req_ptr->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[1].area_id == 0);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[1].pmch_id == 1);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[1].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req_ptr->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 1);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.mrb_cfg_base_ptr[1].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.mrb_cfg_base_ptr[1].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.mrb_cfg_base_ptr[1].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.mrb_cfg_base_ptr[1].mrb_id == 37);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlc_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrcTestSubsequentActTMGICnfiAndActListInd(37, 0);

  /* Send ACCESS_CNF to indicate RACH succeeded */
  /* Setting the header for internal RRC messages */
  lte_rrc_init_default_hdr(&mac_access_cnf.hdr, LTE_MAC_ACCESS_CNF);
  mac_access_cnf.crnti_included = TRUE;
  mac_access_cnf.crnti = 10;
  /* Send the ACCESS_CNF to CRE module there by mimicing the action of MAC */
  status = msgr_send(&mac_access_cnf.hdr, sizeof(mac_access_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Now send Reestablishment message as LTE_MAC_RRC_CCCH_DL_DATA_IND */

  // Prepare ccch_dl_data_ind to send Reestablishment message to RRC
  msgr_init_hdr_attach(&ccch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_CCCH_DL_DATA_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_cre1, lte_rrc_test_reest_msg,
                         sizeof(lte_rrc_test_reest_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_reest_msg));
  TF_ASSERT(dsm_ptr_cre1 != NULL);

  att_ptr_cre1 = msgr_get_attach(&ccch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_cre1, dsm_ptr_cre1);

  ccch_dl_data_ind.freq = cell[cell_index].earfcn;
  ccch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  ccch_dl_data_ind.sfn.sys_fn = 5;

  // Send ccch_dl_data_ind to RRC
  status = msgr_send(&ccch_dl_data_ind.hdr, sizeof(ccch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Once CRE receives the Reestablishment message, it should send CFG_REQI to
    LLC to resume SRB1 */

  /* Catch the CPHY Config request sent by LLC to CPHY */
  lte_rrc_utf_get_next_ext_msg((byte **)&cphy_cfg_req_ptr,&buf_len);
  /* Make sure the CPHY Config request is valid */
  TF_ASSERT(sizeof(lte_cphy_dedicated_cfg_req_s) == buf_len);
  TF_ASSERT(cphy_cfg_req_ptr != NULL);

  /* Construct and send the lte_cphy_dedicated_cfg_cnf message back to LLC */
  lte_rrc_init_default_hdr(&cphy_cfg_cnf.msgr_hdr,LTE_CPHY_DEDICATED_CFG_CNF);
  /* Setting the fields in the LTE_CPHY_DEDICATED_CFG_CNF sent by CPHY, The bits
    set in dedicated_cfg_validity field reflect the channel config that were set
    in the llc_conn_setup_msg in the lte_rrc_llc_ota_msg.h */
  cphy_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG |
             LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG |
             LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG);
  cphy_cfg_cnf.status = E_SUCCESS;

  /* Send the LTE_CPHY_DEDICATED_CFG_CNF to LLC there by mimicing the action of CPHY */
  status = msgr_send(&cphy_cfg_cnf.msgr_hdr, sizeof(cphy_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the MAC Config request sent by LLC to MAC */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_cfg_req_ptr,&buf_len);
  /* Make sure the CPHY Config request is valid */
  TF_ASSERT(sizeof(lte_mac_cfg_req_msg_s) == buf_len);
  TF_ASSERT(mac_cfg_req_ptr != NULL);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_type == LTE_L2_CFG_RECFG);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.lc_info_cfg.num_addmod_lc == 1);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.lc_info_cfg.addmod_lc_list[0] == 1);

  /* Construct and send the lte_mac_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr,LTE_MAC_CFG_CNF);
  /* Setting the fields in the LTE_MAC_CFG_CNF sent by MAC */
  mac_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_MAC_CFG_CNF to LLC there by mimicing the action of MAC */
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the RLCDL Config request sent by LLC to RLCDL */
  lte_rrc_utf_get_next_ext_msg((byte **)&rlcdl_cfg_req_ptr,&buf_len);
  /* Make sure the RLCDL Config request is valid */
  TF_ASSERT(sizeof(lte_rlcdl_cfg_req_s) == buf_len);
  TF_ASSERT(rlcdl_cfg_req_ptr != NULL);
  TF_ASSERT(rlcdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(rlcdl_cfg_req_ptr->num_modified_rb == 1);
  TF_ASSERT(rlcdl_cfg_req_ptr->modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(rlcdl_cfg_req_ptr->modified_rb[0].action == LTE_RLC_RB_ACTION_MODIFY);

  /* Construct and send the lte_rlc_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr,LTE_RLCDL_CFG_CNF);
  /* Setting the fields in the LTE_RLC_CFG_CNF sent by RLCDL */
  rlc_cfg_cnf.cfg_status = E_SUCCESS;
  /* Send the LTE_RLC_CFG_CNF to LLC there by mimicing the action of RLCDL */
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the RLCUL Config request sent by LLC to RLCUL */
  lte_rrc_utf_get_next_ext_msg((byte **)&rlcul_cfg_req_ptr,&buf_len);
  /* Make sure the RLCUL Config request is valid */
  TF_ASSERT(sizeof(lte_rlcul_cfg_req_s) == buf_len);
  TF_ASSERT(rlcul_cfg_req_ptr != NULL);
  TF_ASSERT(rlcul_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(rlcul_cfg_req_ptr->num_modified_rb == 1);
  TF_ASSERT(rlcul_cfg_req_ptr->modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(rlcul_cfg_req_ptr->modified_rb[0].action == LTE_RLC_RB_ACTION_MODIFY);

  /* Construct and send the lte_rlc_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr,LTE_RLCUL_CFG_CNF);
  /* Setting the fields in the LTE_RLC_CFG_CNF sent by RLCUL */
  rlc_cfg_cnf.cfg_status = E_SUCCESS;
  /* Send the LTE_RLC_CFG_CNF to LLC there by mimicing the action of RLCUL */
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the PDCPDL Config request sent by LLC to PDCPDL */
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpdl_cfg_req_ptr,&buf_len);
  /* Make sure the PDCPDL Config request is valid */
  TF_ASSERT(sizeof(lte_pdcpdl_cfg_req_msg_s) == buf_len);
  TF_ASSERT(pdcpdl_cfg_req_ptr != NULL);
  TF_ASSERT(pdcpdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(pdcpdl_cfg_req_ptr->num_add_modified_rb == 1);
  TF_ASSERT(pdcpdl_cfg_req_ptr->add_modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(pdcpdl_cfg_req_ptr->add_modified_rb[0].cfg_act == LTE_PDCP_CFG_ACT_MODIFIED_RESUME);
  TF_ASSERT(TRUE == pdcpdl_cfg_req_ptr->security_cfg_valid);

  /* Construct and send the lte_pdcpdl_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&pdcpdl_cfg_cnf.hdr,LTE_PDCPDL_CFG_CNF);
  /* Setting the fields in the LTE_PDCPDL_CFG_CNF sent by PDCPDL */
  pdcpdl_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_PDCPDL_CFG_CNF to LLC there by mimicing the action of PDCPDL */
  status = msgr_send(&pdcpdl_cfg_cnf.hdr, sizeof(pdcpdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the PDCPUL Config request sent by LLC to PDCPUL */
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpul_cfg_req_ptr,&buf_len);
  /* Make sure the PDCPUL Config request is valid */
  TF_ASSERT(sizeof(lte_pdcpul_cfg_req_msg_s) == buf_len);
  TF_ASSERT(pdcpul_cfg_req_ptr != NULL);
  TF_ASSERT(pdcpul_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(pdcpul_cfg_req_ptr->num_released_rb == 0);
  TF_ASSERT(pdcpul_cfg_req_ptr->add_modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(pdcpul_cfg_req_ptr->add_modified_rb[0].cfg_act == LTE_PDCP_CFG_ACT_MODIFIED_RESUME);
  TF_ASSERT(TRUE == pdcpul_cfg_req_ptr->security_cfg_valid);

  /* Construct and send the lte_pdcpul_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&pdcpul_cfg_cnf.hdr,LTE_PDCPUL_CFG_CNF);
  /* Setting the fields in the LTE_PDCPUL_CFG_CNF sent by PDCPUL */
  pdcpul_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_PDCPUL_CFG_CNF to LLC there by mimicing the action of PDCPUL */
  status = msgr_send(&pdcpul_cfg_cnf.hdr, sizeof(pdcpul_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the LTE_PDCPUL_SDU_REQ sent by MH */
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpul_sdu_req_ptr,&buf_len);
  TF_ASSERT(pdcpul_sdu_req_ptr != NULL);
  TF_ASSERT(pdcpul_sdu_req_ptr->hdr.id == LTE_PDCPUL_SDU_REQ);
  TF_ASSERT(pdcpul_sdu_req_ptr->rb_cfg_idx == 33);

   /*Make sure that the Integrity protect flag is set to TRUE*/
  TF_ASSERT(TRUE == pdcpul_sdu_req_ptr->integrity_protect);

  /*Make sure that the Cipher flag is set to TRUE*/
  TF_ASSERT(TRUE == pdcpul_sdu_req_ptr->cipher);


  // Prepare pdcpul_sdu_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_sdu_cnf.hdr, LTE_PDCPUL_SDU_CNF);

  pdcpul_sdu_cnf.num_nack_muid = 0;
  pdcpul_sdu_cnf.num_maybe_muid = 0;
  pdcpul_sdu_cnf.num_ack_muid = 1;
  pdcpul_sdu_cnf.ack_muid[0] = pdcpul_sdu_req_ptr->mu_id;

  // Send pdcpul_sdu_cnf to RRC
  status = msgr_send(&pdcpul_sdu_cnf.hdr, sizeof(pdcpul_sdu_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the LTE_CPHY_CONN_MEAS_CFG_REQ sent by Meas module */
  lte_rrc_utf_get_next_ext_msg((byte **)&cphy_meas_cfg_req_ptr,&buf_len);
  TF_ASSERT(cphy_meas_cfg_req_ptr != NULL);
  TF_ASSERT(cphy_meas_cfg_req_ptr->msgr_hdr.id == LTE_CPHY_CONN_MEAS_CFG_REQ);

  TF_ASSERT(cphy_meas_cfg_req_ptr->meas_id_valid_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req_ptr->meas_id_mod_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req_ptr->meas_obj_valid_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req_ptr->meas_obj_mod_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req_ptr->report_cfg_valid_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req_ptr->report_cfg_mod_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req_ptr->other_mod_bitmask == 11);

  /* Construct and send the cphy_meas_cfg_cnf message back to CRE */
  lte_rrc_init_default_hdr(&cphy_meas_cfg_cnf.msgr_hdr,LTE_CPHY_CONN_MEAS_CFG_CNF);
  /* Setting the fields in the LTE_CPHY_CONN_MEAS_CFG_CNF sent by ML1 */
  cphy_meas_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_PDCPUL_CFG_CNF to LLC there by mimicing the action of PDCPUL */
  status = msgr_send(&cphy_meas_cfg_cnf.msgr_hdr, sizeof(cphy_meas_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* ---------------------------------------------------------------------- */
  /* Test the handling of first reconfiguration message after reestablishment */
  /* ---------------------------------------------------------------------- */
  LteRrcTestFirstReconfigAfterCRE__Test();
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // We expect a service_ind message, indicating SERVICE AVAILABLE from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind_ptr, &buf_len);

  //TF_ASSERT(service_ind->trans_id == 1);
  TF_ASSERT(service_ind_ptr != NULL);
  TF_ASSERT(service_ind_ptr->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);

  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind_ptr->msg_hdr.id == LTE_RRC_SERVICE_IND);

  // ---------------------------------------------

  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  TF_ASSERT(idle_drx_cfg_req->serving_cell_info.dl_cell_frequency == LTE_RRC_TEST_EARFCN);
  TF_ASSERT(idle_drx_cfg_req->serving_cell_info.phy_cell_id == LTE_RRC_TEST_PHY_CELL_ID);

  TF_ASSERT(idle_drx_cfg_req->idle_drx_param.nb == LTE_L1_NB_ONET);
  TF_ASSERT(idle_drx_cfg_req->idle_drx_param.paging_cycle == 320);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActivateDuringRLFCellSelection__Test(void)
{

  lte_rrc_service_req_s service_req;
  lte_rrc_service_ind_s *service_ind_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  lte_cphy_abort_req_s *cphy_abort_req_ptr = NULL;
  lte_cphy_abort_cnf_s cphy_abort_cnf;
  lte_pdcpul_recfg_prep_req_msg_s *pdcpul_prep_req_ptr = NULL;
  lte_pdcpul_recfg_prep_cnf_msg_s pdcpul_prep_cnf;

  lte_mac_access_abort_req_msg_s *mac_access_abort_req_ptr = NULL;
  lte_mac_access_abort_cnf_msg_s mac_access_abort_cnf_msg;

  lte_cphy_system_scan_req_s  *cphy_system_scan_req_ptr = NULL;
  lte_cphy_system_scan_cnf_s cphy_scan_cnf;
  lte_cphy_acq_req_s *cphy_acq_req_ptr = NULL;
  lte_cphy_acq_cnf_s cphy_acq_cnf;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_cphy_dedicated_cfg_req_s *cphy_cfg_req_ptr = NULL;
  lte_cphy_dedicated_cfg_cnf_s cphy_cfg_cnf;
  lte_cphy_rl_failure_ind_s rl_fail_ind;

  lte_cphy_conn_meas_cfg_req_s *cphy_meas_cfg_req_ptr = NULL;
  lte_cphy_conn_meas_cfg_cnf_s cphy_meas_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;

  lte_mac_access_req_msg_s *mac_access_req_ptr = NULL;
  lte_mac_access_cnf_msg_s mac_access_cnf;

  dsm_item_type *dsm_ptr_cre1 = NULL, *dsm_ptr_cr1 = NULL; /* DSM pointers */
  msgr_attach_struct_type *att_ptr_cre1; /* Message attachment pointers */

  lte_mac_cfg_req_msg_s *mac_cfg_req_ptr = NULL;
  lte_mac_rrc_dl_data_ind_s ccch_dl_data_ind;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req_ptr = NULL;
  lte_rlc_cfg_cnf_s rlc_cfg_cnf;
  lte_rlcul_cfg_req_s *rlcul_cfg_req_ptr = NULL;

  lte_pdcpdl_cfg_req_msg_s *pdcpdl_cfg_req_ptr = NULL;
  lte_pdcpdl_cfg_cnf_msg_s pdcpdl_cfg_cnf;
  lte_pdcpul_cfg_req_msg_s *pdcpul_cfg_req_ptr = NULL;
  lte_pdcpul_cfg_cnf_msg_s pdcpul_cfg_cnf;
  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req_ptr = NULL;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  uint32 buf_len;
  lte_errno_e status;

  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  rl_fail_ind.rlf_reason = LTE_CPHY_RLF_REASON_NORMAL;
  status = msgr_send(&rl_fail_ind.msg_hdr, sizeof(rl_fail_ind));
  LTE_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  lteRrcTestRLFUeInfoReqRsp__test(LTE_CPHY_UEINFO_RPT_MASK_MAX,FALSE);

 // ---------------------------------------------
  /* The RLF trigger should cause CRE to send CFG_REQI to LLC to start
    RLF related processing. LLC should abort ML1, send CFG_REQ to L2 and
    suspend active RBs */
  // We expect a pdcpul_recfg_prep_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_prep_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_recfg_prep_req_msg_s));
  TF_ASSERT(pdcpul_prep_req_ptr != NULL);
  TF_ASSERT(pdcpul_prep_req_ptr->hdr.id == LTE_PDCPUL_RECFG_PREP_REQ);
  TF_ASSERT(pdcpul_prep_req_ptr->cfg_reason == LTE_L2_CFG_RADIO_FAILURE);

  // Prepare pdcpul_recfg_prep_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_prep_cnf.hdr, LTE_PDCPUL_RECFG_PREP_CNF);
  pdcpul_prep_cnf.status = E_SUCCESS;
  // Send pdcpul_prep_req_cnf to RRC
  status = msgr_send(&pdcpul_prep_cnf.hdr, sizeof(pdcpul_prep_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the ACCESS_ABORT_REQ to MAC */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_access_abort_req_ptr,&buf_len);
  /* Make sure the ACCESS_ABORT_REQ is valid */
  TF_ASSERT(sizeof(lte_mac_access_abort_req_msg_s) == buf_len);

  /* Send ACCESS_ABORT_CNF to Config */
  /* Setting the header for internal RRC messages */
  lte_rrc_init_default_hdr(&mac_access_abort_cnf_msg.hdr,LTE_MAC_ACCESS_ABORT_CNF);
  mac_access_abort_cnf_msg.status = E_SUCCESS;
  status = msgr_send(&mac_access_abort_cnf_msg.hdr, sizeof(mac_access_abort_cnf_msg));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a cphy_abort_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_abort_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_abort_req_s));
  TF_ASSERT(cphy_abort_req_ptr != NULL);
  TF_ASSERT(cphy_abort_req_ptr->msgr_hdr.id == LTE_CPHY_ABORT_REQ);

  // Trigger RLF during cell selection
  LteRrcSendeMBMSActivateReqForService0();

  // Prepare cphy_abort_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_abort_cnf.msgr_hdr, LTE_CPHY_ABORT_CNF);
  cphy_abort_cnf.status = E_SUCCESS;
  // Send cphy_abort_cnf to RRC
  status = msgr_send(&cphy_abort_cnf.msgr_hdr, sizeof(cphy_abort_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req_ptr != NULL);
  TF_ASSERT(mac_cfg_req_ptr->hdr.id == LTE_MAC_CFG_REQ);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_type == LTE_L2_CFG_RADIO_FAILURE);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);
  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a rlcdl_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req_ptr != NULL);
  TF_ASSERT(rlcdl_cfg_req_ptr->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RADIO_FAILURE);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);
  rlc_cfg_cnf.cfg_status = E_SUCCESS;
  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a rlcul_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcul_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcul_cfg_req_s));
  TF_ASSERT(rlcul_cfg_req_ptr != NULL);
  TF_ASSERT(rlcul_cfg_req_ptr->msg_hdr.id == LTE_RLCUL_CFG_REQ);
  TF_ASSERT(rlcul_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RADIO_FAILURE);

  // Prepare rlcul_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr, LTE_RLCUL_CFG_CNF);
  rlc_cfg_cnf.cfg_status = E_SUCCESS;
  // Send rlcul_cfg_cnf to RRC
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a pdcpdl_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpdl_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpdl_cfg_req_msg_s));
  TF_ASSERT(pdcpdl_cfg_req_ptr != NULL);
  TF_ASSERT(pdcpdl_cfg_req_ptr->hdr.id == LTE_PDCPDL_CFG_REQ);
  TF_ASSERT(pdcpdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RADIO_FAILURE);

  /*Verify the security configuration after re-establishment*/
  TF_ASSERT(TRUE == pdcpdl_cfg_req_ptr->security_cfg_valid);

  // Prepare pdcpdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpdl_cfg_cnf.hdr, LTE_PDCPDL_CFG_CNF);
  pdcpdl_cfg_cnf.status = E_SUCCESS;
  // Send pdcpdl_cfg_cnf to RRC
  status = msgr_send(&pdcpdl_cfg_cnf.hdr, sizeof(pdcpdl_cfg_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a pdcpul_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_cfg_req_msg_s));
  TF_ASSERT(pdcpul_cfg_req_ptr != NULL);
  TF_ASSERT(pdcpul_cfg_req_ptr->hdr.id == LTE_PDCPUL_CFG_REQ);
  TF_ASSERT(pdcpul_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RADIO_FAILURE);

  /*Verify the security configuration after re-establishment*/
  TF_ASSERT(TRUE == pdcpul_cfg_req_ptr->security_cfg_valid);

  // Prepare pdcpul_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_cfg_cnf.hdr, LTE_PDCPUL_CFG_CNF);
  pdcpul_cfg_cnf.status = E_SUCCESS;
  // Send pdcpul_cfg_cnf to RRC
  status = msgr_send(&pdcpul_cfg_cnf.hdr, sizeof(pdcpul_cfg_cnf));
  LTE_ASSERT(status == E_SUCCESS);
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // We expect a service_ind message, indicating NO SERVICE from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind_ptr->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind_ptr != NULL);
  TF_ASSERT(service_ind_ptr->svc_status == LTE_RRC_SVC_STATUS_NOT_AVAILABLE);

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_UCAST_OOS);


  // ---------------------------------------------

  // Prepare service req to send to RRC
  lte_rrc_csp_set_iterative_band_scan_enabled(FALSE);
  memset(&service_req, 0, sizeof(lte_rrc_service_req_s));
  lte_rrc_init_default_hdr(&service_req.msg_hdr, LTE_RRC_SERVICE_REQ);

  service_req.trans_id = 1;
  service_req.network_select_mode = SYS_NETWORK_SELECTION_MODE_AUTOMATIC;

  service_req.req_plmn_info_is_valid = TRUE;
  service_req.req_plmn.mcc[0] = LTE_RRC_TEST_PLMN_MCC_0;
  service_req.req_plmn.mcc[1] = LTE_RRC_TEST_PLMN_MCC_1;
  service_req.req_plmn.mcc[2] = LTE_RRC_TEST_PLMN_MCC_2;

  service_req.req_plmn.num_mnc_digits = 3;
  service_req.req_plmn.mnc[0] = LTE_RRC_TEST_PLMN_MNC_0;
  service_req.req_plmn.mnc[1] = LTE_RRC_TEST_PLMN_MNC_1;
  service_req.req_plmn.mnc[2] = LTE_RRC_TEST_PLMN_MNC_2;

  service_req.rplmn_info_is_valid = FALSE;
  service_req.hplmn_info_is_valid = FALSE;
  memset(&service_req.ehplmn_list,0,sizeof(service_req.ehplmn_list));

  memset(&service_req.forbidden_ta_list,0,
         sizeof(service_req.forbidden_ta_list));

  memset(&service_req.eplmn_list,0,sizeof(service_req.eplmn_list));

  memset(&service_req.rat_pri_list,0,sizeof(service_req.rat_pri_list));
  service_req.rat_pri_list.num_items = 1;
  service_req.rat_pri_list.priority_list_info[0].acq_sys_mode = SYS_SYS_MODE_LTE;
  service_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_LTE_BAND1;
  service_req.rat_pri_list.priority_list_info[0].bst_band_cap.lte_band_cap.bits_1_64 |= service_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64;
  service_req.rat_pri_list.priority_list_info[0].bst_rat_acq_required = TRUE;

  service_req.rat_pri_list.scan_type.use_timer = FALSE;
  service_req.rat_pri_list.scan_type.new_scan = TRUE;
  service_req.rat_pri_list.priority_list_info[0].acq_sys_time_interval = 0;

  service_req.use_timer = FALSE;
  service_req.scan_is_new = TRUE;
  service_req.lte_scan_time = 0;
  service_req.csg_id = SYS_CSG_ID_INVALID;

  // Send service req to RRC
  status = msgr_send(&service_req.msg_hdr, sizeof(service_req));
  TF_ASSERT(status == E_SUCCESS);

   // ---------------------------------------------

  // We expect a system scan message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_system_scan_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_system_scan_req_s));
  TF_ASSERT(cphy_system_scan_req_ptr != NULL);
  TF_ASSERT(cphy_system_scan_req_ptr->msgr_hdr.id == LTE_CPHY_SYSTEM_SCAN_REQ);

  // Prepare cphy_scan_cnf_msg to send to RRC
  lte_rrc_init_default_hdr(&cphy_scan_cnf.msgr_hdr, LTE_CPHY_SYSTEM_SCAN_CNF);
  cphy_scan_cnf.trans_id = cphy_system_scan_req_ptr->trans_id;
  cphy_scan_cnf.sys_scan_results.num_systems = 1;
  cphy_scan_cnf.sys_scan_results.system[0].system.band = SYS_SBAND_LTE_EUTRAN_BAND1;
  cphy_scan_cnf.sys_scan_results.system[0].system.bandwidth = LTE_BW_NRB_6;
  cphy_scan_cnf.sys_scan_results.system[0].system.earfcn = cell[cell_index].earfcn;
  cphy_scan_cnf.sys_scan_results.system[0].energy = -60;

  //Send cphy_scan_cnf_msg to RRC
  status = msgr_send(&cphy_scan_cnf.msgr_hdr, sizeof(cphy_scan_cnf));
  LTE_ASSERT(status == E_SUCCESS);

 // ---------------------------------------------

  // We expect a ACQ_REQ message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_acq_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_acq_req_s));
  TF_ASSERT(cphy_acq_req_ptr != NULL);
  TF_ASSERT(cphy_acq_req_ptr->msgr_hdr.id == LTE_CPHY_ACQ_REQ);
  TF_ASSERT(cphy_acq_req_ptr->band == SYS_SBAND_LTE_EUTRAN_BAND1);
  TF_ASSERT(cphy_acq_req_ptr->earfcn == cell[cell_index].earfcn);

  // Prepare cphy_acq_cnf_msg to send to RRC
  lte_rrc_init_default_hdr(&cphy_acq_cnf.msgr_hdr, LTE_CPHY_ACQ_CNF);
  cphy_acq_cnf.trans_id = cphy_acq_req_ptr->trans_id;
  cphy_acq_cnf.status = E_SUCCESS;
  cphy_acq_cnf.band = SYS_SBAND_LTE_EUTRAN_BAND1;
  cphy_acq_cnf.earfcn = cell[cell_index].earfcn;
  cphy_acq_cnf.acquired_cell.cp = LTE_L1_CP_MODE_NORMAL;
  memset(&cphy_acq_cnf.acquired_cell.mib,0,sizeof(cphy_acq_cnf.acquired_cell.mib));
  cphy_acq_cnf.acquired_cell.mib.dl_bandwidth = LTE_BW_NRB_6;
  cphy_acq_cnf.acquired_cell.phy_cell_id = cell[cell_index].phys_cell_id;
  uint64 short_maci = 0;

  //Send cphy_acq_cnf_msg to RRC
  status = msgr_send(&cphy_acq_cnf.msgr_hdr, sizeof(cphy_acq_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionOnSameCellAfterOOSEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestConnectedCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // ---------------------------------------------
  /* Catch the MAC_ACCESS_REQ message sent by CRE to MAC, containing
    the ReestablishmentRequest */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_access_req_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_mac_access_req_msg_s) == buf_len);

  // Now activate service 1
  LteRrcSendeMBMSActivateReqForService0();

  LteRrcTestMCCHSetup();

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);

    // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req_ptr->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[1].area_id == 0);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[1].pmch_id == 1);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.embms_cfg.active_lc_list[1].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req_ptr->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 1);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.mrb_cfg_base_ptr[1].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.mrb_cfg_base_ptr[1].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.mrb_cfg_base_ptr[1].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req_ptr->embms_cfg.mrb_cfg_base_ptr[1].mrb_id == 37);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlc_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrcTestSubsequentActTMGICnfiAndActListInd(37, 0);

  /* Send ACCESS_CNF to indicate RACH succeeded */
  /* Setting the header for internal RRC messages */
  lte_rrc_init_default_hdr(&mac_access_cnf.hdr, LTE_MAC_ACCESS_CNF);
  mac_access_cnf.crnti_included = TRUE;
  mac_access_cnf.crnti = 10;
  /* Send the ACCESS_CNF to CRE module there by mimicing the action of MAC */
  status = msgr_send(&mac_access_cnf.hdr, sizeof(mac_access_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Now send Reestablishment message as LTE_MAC_RRC_CCCH_DL_DATA_IND */

  // Prepare ccch_dl_data_ind to send Reestablishment message to RRC
  msgr_init_hdr_attach(&ccch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_CCCH_DL_DATA_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_cre1, lte_rrc_test_reest_msg,
                         sizeof(lte_rrc_test_reest_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_reest_msg));
  TF_ASSERT(dsm_ptr_cre1 != NULL);

  att_ptr_cre1 = msgr_get_attach(&ccch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_cre1, dsm_ptr_cre1);

  ccch_dl_data_ind.freq = cell[cell_index].earfcn;
  ccch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  ccch_dl_data_ind.sfn.sys_fn = 5;

  // Send ccch_dl_data_ind to RRC
  status = msgr_send(&ccch_dl_data_ind.hdr, sizeof(ccch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Once CRE receives the Reestablishment message, it should send CFG_REQI to
    LLC to resume SRB1 */

  /* Catch the CPHY Config request sent by LLC to CPHY */
  lte_rrc_utf_get_next_ext_msg((byte **)&cphy_cfg_req_ptr,&buf_len);
  /* Make sure the CPHY Config request is valid */
  TF_ASSERT(sizeof(lte_cphy_dedicated_cfg_req_s) == buf_len);
  TF_ASSERT(cphy_cfg_req_ptr != NULL);

  /* Construct and send the lte_cphy_dedicated_cfg_cnf message back to LLC */
  lte_rrc_init_default_hdr(&cphy_cfg_cnf.msgr_hdr,LTE_CPHY_DEDICATED_CFG_CNF);
  /* Setting the fields in the LTE_CPHY_DEDICATED_CFG_CNF sent by CPHY, The bits
    set in dedicated_cfg_validity field reflect the channel config that were set
    in the llc_conn_setup_msg in the lte_rrc_llc_ota_msg.h */
  cphy_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG |
             LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG |
             LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG);
  cphy_cfg_cnf.status = E_SUCCESS;

  /* Send the LTE_CPHY_DEDICATED_CFG_CNF to LLC there by mimicing the action of CPHY */
  status = msgr_send(&cphy_cfg_cnf.msgr_hdr, sizeof(cphy_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the MAC Config request sent by LLC to MAC */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_cfg_req_ptr,&buf_len);
  /* Make sure the CPHY Config request is valid */
  TF_ASSERT(sizeof(lte_mac_cfg_req_msg_s) == buf_len);
  TF_ASSERT(mac_cfg_req_ptr != NULL);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_type == LTE_L2_CFG_RECFG);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.lc_info_cfg.num_addmod_lc == 1);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.lc_info_cfg.addmod_lc_list[0] == 1);

  /* Construct and send the lte_mac_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr,LTE_MAC_CFG_CNF);
  /* Setting the fields in the LTE_MAC_CFG_CNF sent by MAC */
  mac_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_MAC_CFG_CNF to LLC there by mimicing the action of MAC */
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the RLCDL Config request sent by LLC to RLCDL */
  lte_rrc_utf_get_next_ext_msg((byte **)&rlcdl_cfg_req_ptr,&buf_len);
  /* Make sure the RLCDL Config request is valid */
  TF_ASSERT(sizeof(lte_rlcdl_cfg_req_s) == buf_len);
  TF_ASSERT(rlcdl_cfg_req_ptr != NULL);
  TF_ASSERT(rlcdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(rlcdl_cfg_req_ptr->num_modified_rb == 1);
  TF_ASSERT(rlcdl_cfg_req_ptr->modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(rlcdl_cfg_req_ptr->modified_rb[0].action == LTE_RLC_RB_ACTION_MODIFY);

  /* Construct and send the lte_rlc_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr,LTE_RLCDL_CFG_CNF);
  /* Setting the fields in the LTE_RLC_CFG_CNF sent by RLCDL */
  rlc_cfg_cnf.cfg_status = E_SUCCESS;
  /* Send the LTE_RLC_CFG_CNF to LLC there by mimicing the action of RLCDL */
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the RLCUL Config request sent by LLC to RLCUL */
  lte_rrc_utf_get_next_ext_msg((byte **)&rlcul_cfg_req_ptr,&buf_len);
  /* Make sure the RLCUL Config request is valid */
  TF_ASSERT(sizeof(lte_rlcul_cfg_req_s) == buf_len);
  TF_ASSERT(rlcul_cfg_req_ptr != NULL);
  TF_ASSERT(rlcul_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(rlcul_cfg_req_ptr->num_modified_rb == 1);
  TF_ASSERT(rlcul_cfg_req_ptr->modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(rlcul_cfg_req_ptr->modified_rb[0].action == LTE_RLC_RB_ACTION_MODIFY);

  /* Construct and send the lte_rlc_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr,LTE_RLCUL_CFG_CNF);
  /* Setting the fields in the LTE_RLC_CFG_CNF sent by RLCUL */
  rlc_cfg_cnf.cfg_status = E_SUCCESS;
  /* Send the LTE_RLC_CFG_CNF to LLC there by mimicing the action of RLCUL */
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the PDCPDL Config request sent by LLC to PDCPDL */
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpdl_cfg_req_ptr,&buf_len);
  /* Make sure the PDCPDL Config request is valid */
  TF_ASSERT(sizeof(lte_pdcpdl_cfg_req_msg_s) == buf_len);
  TF_ASSERT(pdcpdl_cfg_req_ptr != NULL);
  TF_ASSERT(pdcpdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(pdcpdl_cfg_req_ptr->num_add_modified_rb == 1);
  TF_ASSERT(pdcpdl_cfg_req_ptr->add_modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(pdcpdl_cfg_req_ptr->add_modified_rb[0].cfg_act == LTE_PDCP_CFG_ACT_MODIFIED_RESUME);
  TF_ASSERT(TRUE == pdcpdl_cfg_req_ptr->security_cfg_valid);

  /* Construct and send the lte_pdcpdl_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&pdcpdl_cfg_cnf.hdr,LTE_PDCPDL_CFG_CNF);
  /* Setting the fields in the LTE_PDCPDL_CFG_CNF sent by PDCPDL */
  pdcpdl_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_PDCPDL_CFG_CNF to LLC there by mimicing the action of PDCPDL */
  status = msgr_send(&pdcpdl_cfg_cnf.hdr, sizeof(pdcpdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the PDCPUL Config request sent by LLC to PDCPUL */
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpul_cfg_req_ptr,&buf_len);
  /* Make sure the PDCPUL Config request is valid */
  TF_ASSERT(sizeof(lte_pdcpul_cfg_req_msg_s) == buf_len);
  TF_ASSERT(pdcpul_cfg_req_ptr != NULL);
  TF_ASSERT(pdcpul_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(pdcpul_cfg_req_ptr->num_released_rb == 0);
  TF_ASSERT(pdcpul_cfg_req_ptr->add_modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(pdcpul_cfg_req_ptr->add_modified_rb[0].cfg_act == LTE_PDCP_CFG_ACT_MODIFIED_RESUME);
  TF_ASSERT(TRUE == pdcpul_cfg_req_ptr->security_cfg_valid);

  /* Construct and send the lte_pdcpul_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&pdcpul_cfg_cnf.hdr,LTE_PDCPUL_CFG_CNF);
  /* Setting the fields in the LTE_PDCPUL_CFG_CNF sent by PDCPUL */
  pdcpul_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_PDCPUL_CFG_CNF to LLC there by mimicing the action of PDCPUL */
  status = msgr_send(&pdcpul_cfg_cnf.hdr, sizeof(pdcpul_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the LTE_PDCPUL_SDU_REQ sent by MH */
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpul_sdu_req_ptr,&buf_len);
  TF_ASSERT(pdcpul_sdu_req_ptr != NULL);
  TF_ASSERT(pdcpul_sdu_req_ptr->hdr.id == LTE_PDCPUL_SDU_REQ);
  TF_ASSERT(pdcpul_sdu_req_ptr->rb_cfg_idx == 33);

   /*Make sure that the Integrity protect flag is set to TRUE*/
  TF_ASSERT(TRUE == pdcpul_sdu_req_ptr->integrity_protect);

  /*Make sure that the Cipher flag is set to TRUE*/
  TF_ASSERT(TRUE == pdcpul_sdu_req_ptr->cipher);


  // Prepare pdcpul_sdu_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_sdu_cnf.hdr, LTE_PDCPUL_SDU_CNF);

  pdcpul_sdu_cnf.num_nack_muid = 0;
  pdcpul_sdu_cnf.num_maybe_muid = 0;
  pdcpul_sdu_cnf.num_ack_muid = 1;
  pdcpul_sdu_cnf.ack_muid[0] = pdcpul_sdu_req_ptr->mu_id;

  // Send pdcpul_sdu_cnf to RRC
  status = msgr_send(&pdcpul_sdu_cnf.hdr, sizeof(pdcpul_sdu_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the LTE_CPHY_CONN_MEAS_CFG_REQ sent by Meas module */
  lte_rrc_utf_get_next_ext_msg((byte **)&cphy_meas_cfg_req_ptr,&buf_len);
  TF_ASSERT(cphy_meas_cfg_req_ptr != NULL);
  TF_ASSERT(cphy_meas_cfg_req_ptr->msgr_hdr.id == LTE_CPHY_CONN_MEAS_CFG_REQ);

  TF_ASSERT(cphy_meas_cfg_req_ptr->meas_id_valid_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req_ptr->meas_id_mod_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req_ptr->meas_obj_valid_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req_ptr->meas_obj_mod_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req_ptr->report_cfg_valid_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req_ptr->report_cfg_mod_bitmask == 1);
  TF_ASSERT(cphy_meas_cfg_req_ptr->other_mod_bitmask == 11);

  /* Construct and send the cphy_meas_cfg_cnf message back to CRE */
  lte_rrc_init_default_hdr(&cphy_meas_cfg_cnf.msgr_hdr,LTE_CPHY_CONN_MEAS_CFG_CNF);
  /* Setting the fields in the LTE_CPHY_CONN_MEAS_CFG_CNF sent by ML1 */
  cphy_meas_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_PDCPUL_CFG_CNF to LLC there by mimicing the action of PDCPUL */
  status = msgr_send(&cphy_meas_cfg_cnf.msgr_hdr, sizeof(cphy_meas_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* ---------------------------------------------------------------------- */
  /* Test the handling of first reconfiguration message after reestablishment */
  /* ---------------------------------------------------------------------- */
  LteRrcTestFirstReconfigAfterCRE__Test();
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // We expect a service_ind message, indicating SERVICE AVAILABLE from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind_ptr, &buf_len);

  //TF_ASSERT(service_ind->trans_id == 1);
  TF_ASSERT(service_ind_ptr != NULL);
  TF_ASSERT(service_ind_ptr->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);

  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind_ptr->msg_hdr.id == LTE_RRC_SERVICE_IND);

  // ---------------------------------------------

  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  TF_ASSERT(idle_drx_cfg_req->serving_cell_info.dl_cell_frequency == LTE_RRC_TEST_EARFCN);
  TF_ASSERT(idle_drx_cfg_req->serving_cell_info.phy_cell_id == LTE_RRC_TEST_PHY_CELL_ID);

  TF_ASSERT(idle_drx_cfg_req->idle_drx_param.nb == LTE_L1_NB_ONET);
  TF_ASSERT(idle_drx_cfg_req->idle_drx_param.paging_cycle == 320);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSRelHandlingDuringRlf__Test(void)
{

  lte_rrc_service_req_s service_req;
  lte_pdcpdl_sdu_ind_msg_s pdcpdl_sdu_ind;
  msgr_attach_struct_type *att_ptr_cr1; /* Message attachment pointers */
  lte_rrc_service_ind_s *service_ind_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  lte_cphy_abort_req_s *cphy_abort_req_ptr = NULL;
  lte_cphy_abort_cnf_s cphy_abort_cnf;
  lte_pdcpul_recfg_prep_req_msg_s *pdcpul_prep_req_ptr = NULL;
  lte_pdcpul_recfg_prep_cnf_msg_s pdcpul_prep_cnf;

  lte_mac_access_abort_req_msg_s *mac_access_abort_req_ptr = NULL;
  lte_mac_access_abort_cnf_msg_s mac_access_abort_cnf_msg;

  lte_cphy_system_scan_req_s  *cphy_system_scan_req_ptr = NULL;
  lte_cphy_system_scan_cnf_s cphy_scan_cnf;
  lte_cphy_acq_req_s *cphy_acq_req_ptr = NULL;
  lte_cphy_acq_cnf_s cphy_acq_cnf;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_cphy_dedicated_cfg_req_s *cphy_cfg_req_ptr = NULL;
  lte_cphy_dedicated_cfg_cnf_s cphy_cfg_cnf;
  lte_cphy_rl_failure_ind_s rl_fail_ind;

  lte_cphy_conn_meas_cfg_req_s *cphy_meas_cfg_req_ptr = NULL;
  lte_cphy_conn_meas_cfg_cnf_s cphy_meas_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_rrc_ul_data_cnf_s *nas_data_cnf;

  lte_mac_access_req_msg_s *mac_access_req_ptr = NULL;
  lte_mac_access_cnf_msg_s mac_access_cnf;

  dsm_item_type *dsm_ptr_cre1 = NULL, *dsm_ptr_cr1 = NULL; /* DSM pointers */
  msgr_attach_struct_type *att_ptr_cre1; /* Message attachment pointers */

  lte_mac_cfg_req_msg_s *mac_cfg_req_ptr = NULL;
  lte_mac_rrc_dl_data_ind_s ccch_dl_data_ind;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req_ptr = NULL;
  lte_rlc_cfg_cnf_s rlc_cfg_cnf;
  lte_rlcul_cfg_req_s *rlcul_cfg_req_ptr = NULL;

  lte_pdcpdl_cfg_req_msg_s *pdcpdl_cfg_req_ptr = NULL;
  lte_pdcpdl_cfg_cnf_msg_s pdcpdl_cfg_cnf;
  lte_pdcpul_cfg_req_msg_s *pdcpul_cfg_req_ptr = NULL;
  lte_pdcpul_cfg_cnf_msg_s pdcpul_cfg_cnf;
  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req_ptr = NULL;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;

  lte_rrc_osys_UL_CCCH_Message *ul_ccch_msg_ptr = NULL;

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  uint32 buf_len;
  lte_errno_e status;

  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size;

  lte_rrc_osys_BCCH_DL_SCH_Message *sib1_msg_ptr;
  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;
  boolean band_is_valid;

  /* Setting the header for RLF indication */
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  rl_fail_ind.rlf_reason = LTE_CPHY_RLF_REASON_NORMAL;
  status = msgr_send(&rl_fail_ind.msg_hdr, sizeof(rl_fail_ind));
  LTE_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  lteRrcTestRLFUeInfoReqRsp__test(LTE_CPHY_UEINFO_RPT_MASK_MAX,FALSE);

 // ---------------------------------------------
  /* The RLF trigger should cause CRE to send CFG_REQI to LLC to start
    RLF related processing. LLC should abort ML1, send CFG_REQ to L2 and
    suspend active RBs */
  // We expect a pdcpul_recfg_prep_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_prep_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_recfg_prep_req_msg_s));
  TF_ASSERT(pdcpul_prep_req_ptr != NULL);
  TF_ASSERT(pdcpul_prep_req_ptr->hdr.id == LTE_PDCPUL_RECFG_PREP_REQ);
  TF_ASSERT(pdcpul_prep_req_ptr->cfg_reason == LTE_L2_CFG_RADIO_FAILURE);

  // Prepare pdcpul_recfg_prep_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_prep_cnf.hdr, LTE_PDCPUL_RECFG_PREP_CNF);
  pdcpul_prep_cnf.status = E_SUCCESS;
  // Send pdcpul_prep_req_cnf to RRC
  status = msgr_send(&pdcpul_prep_cnf.hdr, sizeof(pdcpul_prep_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the ACCESS_ABORT_REQ to MAC */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_access_abort_req_ptr,&buf_len);
  /* Make sure the ACCESS_ABORT_REQ is valid */
  TF_ASSERT(sizeof(lte_mac_access_abort_req_msg_s) == buf_len);

  /* Send ACCESS_ABORT_CNF to Config */
  /* Setting the header for internal RRC messages */
  lte_rrc_init_default_hdr(&mac_access_abort_cnf_msg.hdr,LTE_MAC_ACCESS_ABORT_CNF);
  mac_access_abort_cnf_msg.status = E_SUCCESS;
  status = msgr_send(&mac_access_abort_cnf_msg.hdr, sizeof(mac_access_abort_cnf_msg));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a cphy_abort_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_abort_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_abort_req_s));
  TF_ASSERT(cphy_abort_req_ptr != NULL);
  TF_ASSERT(cphy_abort_req_ptr->msgr_hdr.id == LTE_CPHY_ABORT_REQ);

  // Send CFG_REQI for EMP Release, that would get pended
  /* Send a Disable req to RRC */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");

  lte_rrc_utf_wait_for_done();

  // Prepare cphy_abort_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_abort_cnf.msgr_hdr, LTE_CPHY_ABORT_CNF);
  cphy_abort_cnf.status = E_SUCCESS;
  // Send cphy_abort_cnf to RRC
  status = msgr_send(&cphy_abort_cnf.msgr_hdr, sizeof(cphy_abort_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req_ptr != NULL);
  TF_ASSERT(mac_cfg_req_ptr->hdr.id == LTE_MAC_CFG_REQ);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_type == LTE_L2_CFG_RADIO_FAILURE);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);
  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a rlcdl_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req_ptr != NULL);
  TF_ASSERT(rlcdl_cfg_req_ptr->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RADIO_FAILURE);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);
  rlc_cfg_cnf.cfg_status = E_SUCCESS;
  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a rlcul_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcul_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcul_cfg_req_s));
  TF_ASSERT(rlcul_cfg_req_ptr != NULL);
  TF_ASSERT(rlcul_cfg_req_ptr->msg_hdr.id == LTE_RLCUL_CFG_REQ);
  TF_ASSERT(rlcul_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RADIO_FAILURE);

  // Prepare rlcul_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr, LTE_RLCUL_CFG_CNF);
  rlc_cfg_cnf.cfg_status = E_SUCCESS;
  // Send rlcul_cfg_cnf to RRC
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a pdcpdl_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpdl_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpdl_cfg_req_msg_s));
  TF_ASSERT(pdcpdl_cfg_req_ptr != NULL);
  TF_ASSERT(pdcpdl_cfg_req_ptr->hdr.id == LTE_PDCPDL_CFG_REQ);
  TF_ASSERT(pdcpdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RADIO_FAILURE);

  /*Verify the security configuration after re-establishment*/
  TF_ASSERT(TRUE == pdcpdl_cfg_req_ptr->security_cfg_valid);

  // Prepare pdcpdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpdl_cfg_cnf.hdr, LTE_PDCPDL_CFG_CNF);
  pdcpdl_cfg_cnf.status = E_SUCCESS;
  // Send pdcpdl_cfg_cnf to RRC
  status = msgr_send(&pdcpdl_cfg_cnf.hdr, sizeof(pdcpdl_cfg_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a pdcpul_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_cfg_req_msg_s));
  TF_ASSERT(pdcpul_cfg_req_ptr != NULL);
  TF_ASSERT(pdcpul_cfg_req_ptr->hdr.id == LTE_PDCPUL_CFG_REQ);
  TF_ASSERT(pdcpul_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RADIO_FAILURE);

  /*Verify the security configuration after re-establishment*/
  TF_ASSERT(TRUE == pdcpul_cfg_req_ptr->security_cfg_valid);

  // Prepare pdcpul_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_cfg_cnf.hdr, LTE_PDCPUL_CFG_CNF);
  pdcpul_cfg_cnf.status = E_SUCCESS;
  // Send pdcpul_cfg_cnf to RRC
  status = msgr_send(&pdcpul_cfg_cnf.hdr, sizeof(pdcpul_cfg_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // We expect a service_ind message, indicating NO SERVICE from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind_ptr->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind_ptr != NULL);
  TF_ASSERT(service_ind_ptr->svc_status == LTE_RRC_SVC_STATUS_NOT_AVAILABLE);

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req_ptr != NULL);
  TF_ASSERT(mac_cfg_req_ptr->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);
  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a rlcdl_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req_ptr != NULL);
  TF_ASSERT(rlcdl_cfg_req_ptr->msg_hdr.id == LTE_RLCDL_CFG_REQ);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);
  rlc_cfg_cnf.cfg_status = E_SUCCESS;
  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

    lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
    TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
    TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
    TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

    // ---------------------------------------------
    // We expect LTE_RRC_EMBMS_STATUS_CHANGE_IND
    lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
    TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
    TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
    TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");


  // ---------------------------------------------

  // Prepare service req to send to RRC
  lte_rrc_csp_set_iterative_band_scan_enabled(FALSE);
  memset(&service_req, 0, sizeof(lte_rrc_service_req_s));
  lte_rrc_init_default_hdr(&service_req.msg_hdr, LTE_RRC_SERVICE_REQ);

  service_req.trans_id = 1;
  service_req.network_select_mode = SYS_NETWORK_SELECTION_MODE_AUTOMATIC;

  service_req.req_plmn_info_is_valid = TRUE;
  service_req.req_plmn.mcc[0] = LTE_RRC_TEST_PLMN_MCC_0;
  service_req.req_plmn.mcc[1] = LTE_RRC_TEST_PLMN_MCC_1;
  service_req.req_plmn.mcc[2] = LTE_RRC_TEST_PLMN_MCC_2;

  service_req.req_plmn.num_mnc_digits = 3;
  service_req.req_plmn.mnc[0] = LTE_RRC_TEST_PLMN_MNC_0;
  service_req.req_plmn.mnc[1] = LTE_RRC_TEST_PLMN_MNC_1;
  service_req.req_plmn.mnc[2] = LTE_RRC_TEST_PLMN_MNC_2;

  service_req.rplmn_info_is_valid = FALSE;
  service_req.hplmn_info_is_valid = FALSE;
  memset(&service_req.ehplmn_list,0,sizeof(service_req.ehplmn_list));

  memset(&service_req.forbidden_ta_list,0,
         sizeof(service_req.forbidden_ta_list));

  memset(&service_req.eplmn_list,0,sizeof(service_req.eplmn_list));

  memset(&service_req.rat_pri_list,0,sizeof(service_req.rat_pri_list));
  service_req.rat_pri_list.num_items = 1;
  service_req.rat_pri_list.priority_list_info[0].acq_sys_mode = SYS_SYS_MODE_LTE;
  service_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64 |= SYS_BAND_MASK_LTE_BAND1;
  service_req.rat_pri_list.priority_list_info[0].bst_band_cap.lte_band_cap.bits_1_64 |= service_req.rat_pri_list.priority_list_info[0].band_cap.lte_band_cap.bits_1_64;
  service_req.rat_pri_list.priority_list_info[0].bst_rat_acq_required = TRUE;

  service_req.rat_pri_list.scan_type.use_timer = FALSE;
  service_req.rat_pri_list.scan_type.new_scan = TRUE;
  service_req.rat_pri_list.priority_list_info[0].acq_sys_time_interval = 0;

  service_req.use_timer = FALSE;
  service_req.scan_is_new = TRUE;
  service_req.lte_scan_time = 0;
  service_req.csg_id = SYS_CSG_ID_INVALID;

  // Send service req to RRC
  status = msgr_send(&service_req.msg_hdr, sizeof(service_req));
  TF_ASSERT(status == E_SUCCESS);

   // ---------------------------------------------

  // We expect a system scan message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_system_scan_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_system_scan_req_s));
  TF_ASSERT(cphy_system_scan_req_ptr != NULL);
  TF_ASSERT(cphy_system_scan_req_ptr->msgr_hdr.id == LTE_CPHY_SYSTEM_SCAN_REQ);

  // Prepare cphy_scan_cnf_msg to send to RRC
  lte_rrc_init_default_hdr(&cphy_scan_cnf.msgr_hdr, LTE_CPHY_SYSTEM_SCAN_CNF);
  cphy_scan_cnf.trans_id = cphy_system_scan_req_ptr->trans_id;
  cphy_scan_cnf.sys_scan_results.num_systems = 1;
  cphy_scan_cnf.sys_scan_results.system[0].system.band = SYS_SBAND_LTE_EUTRAN_BAND1;
  cphy_scan_cnf.sys_scan_results.system[0].system.bandwidth = LTE_BW_NRB_6;
  cphy_scan_cnf.sys_scan_results.system[0].system.earfcn = cell[cell_index].earfcn;
  cphy_scan_cnf.sys_scan_results.system[0].energy = -60;

  //Send cphy_scan_cnf_msg to RRC
  status = msgr_send(&cphy_scan_cnf.msgr_hdr, sizeof(cphy_scan_cnf));
  LTE_ASSERT(status == E_SUCCESS);

 // ---------------------------------------------

  // We expect a ACQ_REQ message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_acq_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_acq_req_s));
  TF_ASSERT(cphy_acq_req_ptr != NULL);
  TF_ASSERT(cphy_acq_req_ptr->msgr_hdr.id == LTE_CPHY_ACQ_REQ);
  TF_ASSERT(cphy_acq_req_ptr->band == SYS_SBAND_LTE_EUTRAN_BAND1);
  TF_ASSERT(cphy_acq_req_ptr->earfcn == cell[cell_index].earfcn);

  // Prepare cphy_acq_cnf_msg to send to RRC
  lte_rrc_init_default_hdr(&cphy_acq_cnf.msgr_hdr, LTE_CPHY_ACQ_CNF);
  cphy_acq_cnf.trans_id = cphy_acq_req_ptr->trans_id;
  cphy_acq_cnf.status = E_SUCCESS;
  cphy_acq_cnf.band = SYS_SBAND_LTE_EUTRAN_BAND1;
  cphy_acq_cnf.earfcn = cell[cell_index].earfcn;
  cphy_acq_cnf.acquired_cell.cp = LTE_L1_CP_MODE_NORMAL;
  memset(&cphy_acq_cnf.acquired_cell.mib,0,sizeof(cphy_acq_cnf.acquired_cell.mib));
  cphy_acq_cnf.acquired_cell.mib.dl_bandwidth = LTE_BW_NRB_6;
  cphy_acq_cnf.acquired_cell.phy_cell_id = cell[cell_index].phys_cell_id;
  uint64 short_maci = 0;
  byte lte_rrc_test_reconfig_mac_msg[] = {0x22, 0x02, 0x04, 0x04};

  //Send cphy_acq_cnf_msg to RRC
  status = msgr_send(&cphy_acq_cnf.msgr_hdr, sizeof(cphy_acq_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask ==
            (LTE_CPHY_SIB_MASK_BIT_MIB | LTE_CPHY_SIB_MASK_BIT_SIB1));

  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == LTE_CPHY_NULL_SFN);

  // Ignoring next_mod_prd_sib_mask, si_window_length, num_si_msgs, si_msg_info

  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_100;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;

  mib_ind.freq = LTE_RRC_TEST_EARFCN;
  mib_ind.phy_cell_id = LTE_RRC_TEST_PHY_CELL_ID;

  mib_ind.freq = cell[cell_index].earfcn;
  mib_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  mib_ind.sfn = 1;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1));

  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == 64);

  TF_ASSERT(sib_sched_req->num_si_msgs == 0);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[group_index])->sib1_size;

  sib1_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message *)
  lte_rrc_osys_asn1_decode_pdu(sib1_ptr,
                               sib1_size,
                               BCCH_DL_SCH_Message,
                               &decode_status);


  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->cellAccessRelatedInfo.
    csg_Indication = 0;
  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->freqBandIndicator = (lte_rrc_get_band_from_dl_earfcn(cell[cell_index].earfcn,&band_is_valid))+1;
  encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib1_msg_ptr,
                                               &encoded_pdu,
                                               BCCH_DL_SCH_Message);
  sib1_ptr = encoded_pdu.value;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  // Telling L1 to stop sending any more si msgs for this mod period
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2));

  // Get RRC to camped state
  LteRrcTestConnectedCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

    // ---------------------------------------------

  /* Once CRE gets CAMPED_INDI from CSP, it should stop timer T311 and send
    ReestablishmentRequest in RACH */
  /* Catch the MAC_ACCESS_REQ message sent by CRE to MAC, containing
    the ReestablishmentRequest */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_access_req_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_mac_access_req_msg_s) == buf_len);
  TF_ASSERT(mac_access_req_ptr != NULL);
  TF_ASSERT(mac_access_req_ptr->access_info.
            access_reason == LTE_MAC_ACCESS_REASON_RADIO_FAILURE);
  TF_ASSERT(mac_access_req_ptr->access_info.raid == LTE_INVALID_RA_ID);
  TF_ASSERT(mac_access_req_ptr->access_info.raid_mask == LTE_INVALID_RA_ID_MASK);

  /* Decode the sent ReestablishmentRequest within the MAC_ACCESS_REQ */
  ul_ccch_msg_ptr = (lte_rrc_osys_UL_CCCH_Message *)lte_rrc_osys_asn1_decode_pdu(mac_access_req_ptr->access_info.msg_ptr,
                               mac_access_req_ptr->access_info.msg_length,
                               UL_CCCH_Message,
                               &decode_status);
  TF_ASSERT(ul_ccch_msg_ptr != NULL);
  /* Make sure the Connection Reestablishment Request sent is valid */
  TF_ASSERT(ul_ccch_msg_ptr->message.t == T_lte_rrc_osys_UL_CCCH_MessageType_c1);
  TF_ASSERT(ul_ccch_msg_ptr->message.u.c1->t == T_lte_rrc_osys_UL_CCCH_MessageType_c1_rrcConnectionReestablishmentRequest);
  TF_ASSERT(ul_ccch_msg_ptr->message.u.c1->u.rrcConnectionReestablishmentRequest->
    criticalExtensions.t == T_lte_rrc_osys_RRCConnectionReestablishmentRequest_criticalExtensions_rrcConnectionReestablishmentRequest_r8);

  short_maci = lte_rrc_osys_asn1_bitstring_to_int(sizeof(uint32), &ul_ccch_msg_ptr->message.
                                             u.c1->u.rrcConnectionReestablishmentRequest->
                                             criticalExtensions.u.rrcConnectionReestablishmentRequest_r8->
                                             ue_Identity.shortMAC_I);


  /* Send ACCESS_CNF to indicate RACH succeeded */
  /* Setting the header for internal RRC messages */
  lte_rrc_init_default_hdr(&mac_access_cnf.hdr, LTE_MAC_ACCESS_CNF);
  mac_access_cnf.crnti_included = TRUE;
  mac_access_cnf.crnti = 10;
  /* Send the ACCESS_CNF to CRE module there by mimicing the action of MAC */
  status = msgr_send(&mac_access_cnf.hdr, sizeof(mac_access_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Now send Reestablishment message as LTE_MAC_RRC_CCCH_DL_DATA_IND */

  uint8 reest_msg[] = {0x08, 0x12, 0x98, 0x02, 0x66, 0x80, 0x04, 0x0c, 0x01, 0x03, 0x40,};

  // Prepare ccch_dl_data_ind to send Reestablishment message to RRC
  msgr_init_hdr_attach(&ccch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_CCCH_DL_DATA_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_cre1, reest_msg,
                         sizeof(reest_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(reest_msg));
  TF_ASSERT(dsm_ptr_cre1 != NULL);

  att_ptr_cre1 = msgr_get_attach(&ccch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_cre1, dsm_ptr_cre1);

  ccch_dl_data_ind.freq = cell[cell_index].earfcn;
  ccch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  ccch_dl_data_ind.sfn.sys_fn = 5;

  // Send ccch_dl_data_ind to RRC
  status = msgr_send(&ccch_dl_data_ind.hdr, sizeof(ccch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Once CRE receives the Reestablishment message, it should send CFG_REQI to
    LLC to resume SRB1 */

  /* Catch the CPHY Config request sent by LLC to CPHY */
  lte_rrc_utf_get_next_ext_msg((byte **)&cphy_cfg_req_ptr,&buf_len);
  /* Make sure the CPHY Config request is valid */
  TF_ASSERT(sizeof(lte_cphy_dedicated_cfg_req_s) == buf_len);
  TF_ASSERT(cphy_cfg_req_ptr != NULL);

  /* Construct and send the lte_cphy_dedicated_cfg_cnf message back to LLC */
  lte_rrc_init_default_hdr(&cphy_cfg_cnf.msgr_hdr,LTE_CPHY_DEDICATED_CFG_CNF);
  /* Setting the fields in the LTE_CPHY_DEDICATED_CFG_CNF sent by CPHY, The bits
    set in dedicated_cfg_validity field reflect the channel config that were set
    in the llc_conn_setup_msg in the lte_rrc_llc_ota_msg.h */
  cphy_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG |
             LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG |
             LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG);
  cphy_cfg_cnf.status = E_SUCCESS;

  /* Send the LTE_CPHY_DEDICATED_CFG_CNF to LLC there by mimicing the action of CPHY */
  status = msgr_send(&cphy_cfg_cnf.msgr_hdr, sizeof(cphy_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the MAC Config request sent by LLC to MAC */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_cfg_req_ptr,&buf_len);
  /* Make sure the CPHY Config request is valid */
  TF_ASSERT(sizeof(lte_mac_cfg_req_msg_s) == buf_len);
  TF_ASSERT(mac_cfg_req_ptr != NULL);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_type == LTE_L2_CFG_RECFG);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.lc_info_cfg.num_addmod_lc == 1);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.lc_info_cfg.addmod_lc_list[0] == 1);

  /* Construct and send the lte_mac_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr,LTE_MAC_CFG_CNF);
  /* Setting the fields in the LTE_MAC_CFG_CNF sent by MAC */
  mac_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_MAC_CFG_CNF to LLC there by mimicing the action of MAC */
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the RLCDL Config request sent by LLC to RLCDL */
  lte_rrc_utf_get_next_ext_msg((byte **)&rlcdl_cfg_req_ptr,&buf_len);
  /* Make sure the RLCDL Config request is valid */
  TF_ASSERT(sizeof(lte_rlcdl_cfg_req_s) == buf_len);
  TF_ASSERT(rlcdl_cfg_req_ptr != NULL);
  TF_ASSERT(rlcdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(rlcdl_cfg_req_ptr->num_modified_rb == 1);
  TF_ASSERT(rlcdl_cfg_req_ptr->modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(rlcdl_cfg_req_ptr->modified_rb[0].action == LTE_RLC_RB_ACTION_MODIFY);

  /* Construct and send the lte_rlc_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr,LTE_RLCDL_CFG_CNF);
  /* Setting the fields in the LTE_RLC_CFG_CNF sent by RLCDL */
  rlc_cfg_cnf.cfg_status = E_SUCCESS;
  /* Send the LTE_RLC_CFG_CNF to LLC there by mimicing the action of RLCDL */
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the RLCUL Config request sent by LLC to RLCUL */
  lte_rrc_utf_get_next_ext_msg((byte **)&rlcul_cfg_req_ptr,&buf_len);
  /* Make sure the RLCUL Config request is valid */
  TF_ASSERT(sizeof(lte_rlcul_cfg_req_s) == buf_len);
  TF_ASSERT(rlcul_cfg_req_ptr != NULL);
  TF_ASSERT(rlcul_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(rlcul_cfg_req_ptr->num_modified_rb == 1);
  TF_ASSERT(rlcul_cfg_req_ptr->modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(rlcul_cfg_req_ptr->modified_rb[0].action == LTE_RLC_RB_ACTION_MODIFY);

  /* Construct and send the lte_rlc_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&rlc_cfg_cnf.msg_hdr,LTE_RLCUL_CFG_CNF);
  /* Setting the fields in the LTE_RLC_CFG_CNF sent by RLCUL */
  rlc_cfg_cnf.cfg_status = E_SUCCESS;
  /* Send the LTE_RLC_CFG_CNF to LLC there by mimicing the action of RLCUL */
  status = msgr_send(&rlc_cfg_cnf.msg_hdr, sizeof(rlc_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the PDCPDL Config request sent by LLC to PDCPDL */
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpdl_cfg_req_ptr,&buf_len);
  /* Make sure the PDCPDL Config request is valid */
  TF_ASSERT(sizeof(lte_pdcpdl_cfg_req_msg_s) == buf_len);
  TF_ASSERT(pdcpdl_cfg_req_ptr != NULL);
  TF_ASSERT(pdcpdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(pdcpdl_cfg_req_ptr->num_add_modified_rb == 1);
  TF_ASSERT(pdcpdl_cfg_req_ptr->add_modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(pdcpdl_cfg_req_ptr->add_modified_rb[0].cfg_act == LTE_PDCP_CFG_ACT_MODIFIED_RESUME);

  /* Construct and send the lte_pdcpdl_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&pdcpdl_cfg_cnf.hdr,LTE_PDCPDL_CFG_CNF);
  /* Setting the fields in the LTE_PDCPDL_CFG_CNF sent by PDCPDL */
  pdcpdl_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_PDCPDL_CFG_CNF to LLC there by mimicing the action of PDCPDL */
  status = msgr_send(&pdcpdl_cfg_cnf.hdr, sizeof(pdcpdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the PDCPUL Config request sent by LLC to PDCPUL */
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpul_cfg_req_ptr,&buf_len);
  /* Make sure the PDCPUL Config request is valid */
  TF_ASSERT(sizeof(lte_pdcpul_cfg_req_msg_s) == buf_len);
  TF_ASSERT(pdcpul_cfg_req_ptr != NULL);
  TF_ASSERT(pdcpul_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(pdcpul_cfg_req_ptr->num_released_rb == 0);
  TF_ASSERT(pdcpul_cfg_req_ptr->add_modified_rb[0].rb_cfg_idx == 33);
  TF_ASSERT(pdcpul_cfg_req_ptr->add_modified_rb[0].cfg_act == LTE_PDCP_CFG_ACT_MODIFIED_RESUME);

  TF_ASSERT(TRUE == pdcpul_cfg_req_ptr->security_cfg_valid);
  /*The A2 index here is 1*/
  //LteRrcTestVerifySecConfigReestablishment1(&(pdcpul_cfg_req_ptr->security_cfg),index);

  /* Construct and send the lte_pdcpul_cfg_cnf_msg message back to LLC */
  lte_rrc_init_default_hdr(&pdcpul_cfg_cnf.hdr,LTE_PDCPUL_CFG_CNF);
  /* Setting the fields in the LTE_PDCPUL_CFG_CNF sent by PDCPUL */
  pdcpul_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_PDCPUL_CFG_CNF to LLC there by mimicing the action of PDCPUL */
  status = msgr_send(&pdcpul_cfg_cnf.hdr, sizeof(pdcpul_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  /* Catch the LTE_PDCPUL_SDU_REQ sent by MH */
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpul_sdu_req_ptr,&buf_len);
  TF_ASSERT(pdcpul_sdu_req_ptr != NULL);
  TF_ASSERT(pdcpul_sdu_req_ptr->hdr.id == LTE_PDCPUL_SDU_REQ);

   /*Make sure that the Integrity protect flag is set to TRUE*/
  TF_ASSERT(TRUE == pdcpul_sdu_req_ptr->integrity_protect);

  /*Make sure that the Cipher flag is set to TRUE*/
  TF_ASSERT(TRUE == pdcpul_sdu_req_ptr->cipher);

  /* ---------------------------------------------------------------------- */
  /* Test the handling of first reconfiguration message after reestablishment */
  /* ---------------------------------------------------------------------- */

  // Prepare pdcpdl_sdu_ind to send ConnectionReconfiguration OTA message to RRC
  msgr_init_hdr_attach(&pdcpdl_sdu_ind.hdr, MSGR_LTE_PDCPDL, LTE_PDCPDL_SDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_cr1, lte_rrc_test_reconfig_mac_msg,
                         sizeof(lte_rrc_test_reconfig_mac_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_reconfig_mac_msg));
  TF_ASSERT(dsm_ptr_cr1 != NULL);

  att_ptr_cr1 = msgr_get_attach(&pdcpdl_sdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_cr1, dsm_ptr_cr1);

  pdcpdl_sdu_ind.rb_cfg_idx = 33;                                 // Sent on SRB1

  // Send pdcpdl_sdu_ind to RRC
  status = msgr_send(&pdcpdl_sdu_ind.hdr, sizeof(pdcpdl_sdu_ind));
  TF_ASSERT(status == E_SUCCESS);

    /* Catch the LTE_CPHY_CONN_MEAS_CFG_REQ sent by Meas module */
    lte_rrc_utf_get_next_ext_msg((byte **)&cphy_meas_cfg_req_ptr,&buf_len);
    TF_ASSERT(cphy_meas_cfg_req_ptr != NULL);
    TF_ASSERT(cphy_meas_cfg_req_ptr->msgr_hdr.id == LTE_CPHY_CONN_MEAS_CFG_REQ);

    /* Construct and send the cphy_meas_cfg_cnf message back to CRE */
    lte_rrc_init_default_hdr(&cphy_meas_cfg_cnf.msgr_hdr,LTE_CPHY_CONN_MEAS_CFG_CNF);
    /* Setting the fields in the LTE_CPHY_CONN_MEAS_CFG_CNF sent by ML1 */
    cphy_meas_cfg_cnf.status = E_SUCCESS;
    /* Send the LTE_PDCPUL_CFG_CNF to LLC there by mimicing the action of PDCPUL */
    status = msgr_send(&cphy_meas_cfg_cnf.msgr_hdr, sizeof(cphy_meas_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);

  /*--------------------------------------------------------------------------
                              MAC Request Handling Test
  ---------------------------------------------------------------------------*/
  /* Catch the MAC Config request sent by LLC to MAC */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_cfg_req_ptr,&buf_len);
  /* Make sure the MAC Config request is valid */
  TF_ASSERT(sizeof(lte_mac_cfg_req_msg_s) == buf_len);
  TF_ASSERT(mac_cfg_req_ptr != NULL);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_bitmask == LTE_MAC_DL_CFG_BM);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.cfg_type == LTE_L2_CFG_RECFG);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.dl_cfg->ta_timer_cfg_included == TRUE);
  TF_ASSERT(mac_cfg_req_ptr->cfg_data.dl_cfg->ta_timer == 2560);

  /* Construct and send the mac_cfg_cnf message back to LLC */
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr,LTE_MAC_CFG_CNF);
  /* Setting the fields in the LTE_MAC_CFG_CNF sent by MAC */
  mac_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_MAC_CFG_CNF to LLC there by mimicing the action of MAC */
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
  /*--------------------------------------------------------------------------
                              PDCP DL Request Handling Test
  ---------------------------------------------------------------------------*/
  /* Catch the PDCPDL Config request sent by LLC to PDCPDL*/
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpdl_cfg_req_ptr,&buf_len);
  /* Make sure the PDCPDL Config request is valid */
  TF_ASSERT(sizeof(lte_pdcpdl_cfg_req_msg_s) == buf_len);
  TF_ASSERT(pdcpdl_cfg_req_ptr != NULL);

  TF_ASSERT(pdcpdl_cfg_req_ptr->cfg_reason == LTE_L2_CFG_RECFG);
  TF_ASSERT(pdcpdl_cfg_req_ptr->num_add_modified_rb == 2);
  TF_ASSERT(pdcpdl_cfg_req_ptr->num_released_rb == 0);
  TF_ASSERT(pdcpdl_cfg_req_ptr->add_modified_rb[0].rb_cfg_idx == 34);
  TF_ASSERT(pdcpdl_cfg_req_ptr->add_modified_rb[0].
            cfg_act == LTE_PDCP_CFG_ACT_MODIFIED_RESUME);
  TF_ASSERT(pdcpdl_cfg_req_ptr->add_modified_rb[1].rb_cfg_idx == 3);
  TF_ASSERT(pdcpdl_cfg_req_ptr->add_modified_rb[1].
            cfg_act == LTE_PDCP_CFG_ACT_MODIFIED_RESUME);

  TF_ASSERT(pdcpdl_cfg_req_ptr->rb_cfg_base_ptr[34].rb_id == 2);
  TF_ASSERT(pdcpdl_cfg_req_ptr->rb_cfg_base_ptr[34].rb_cfg_idx == 34);
  TF_ASSERT(pdcpdl_cfg_req_ptr->rb_cfg_base_ptr[34].rb_mode == LTE_RB_RLC_MODE_AM);
  TF_ASSERT(pdcpdl_cfg_req_ptr->rb_cfg_base_ptr[34].rb_type == LTE_RB_TYPE_SRB);
  TF_ASSERT(pdcpdl_cfg_req_ptr->rb_cfg_base_ptr[34].status_report == FALSE);

  TF_ASSERT(pdcpdl_cfg_req_ptr->rb_cfg_base_ptr[3].eps_id == 3);
  TF_ASSERT(pdcpdl_cfg_req_ptr->rb_cfg_base_ptr[3].rb_id == 3);
  TF_ASSERT(pdcpdl_cfg_req_ptr->rb_cfg_base_ptr[3].rb_cfg_idx == 3);
  TF_ASSERT(pdcpdl_cfg_req_ptr->rb_cfg_base_ptr[3].rb_mode == LTE_RB_RLC_MODE_AM);
  TF_ASSERT(pdcpdl_cfg_req_ptr->rb_cfg_base_ptr[3].rb_type == LTE_RB_TYPE_DRB);

  /* Construct and send the pdcpdl_cfg_cnf message back to LLC */
  lte_rrc_init_default_hdr(&pdcpdl_cfg_cnf.hdr,LTE_PDCPDL_CFG_CNF);
  /* Setting the fields in the LTE_PDCPDL_CFG_CNF sent by PDCPDL */
  pdcpdl_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_PDCPDL_CFG_CNF to LLC there by mimicing the action of PDCPDL */
  status = msgr_send(&pdcpdl_cfg_cnf.hdr, sizeof(pdcpdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
  /*--------------------------------------------------------------------------
                              PDCP UL Request Handling Test
  ---------------------------------------------------------------------------*/
  /* Catch the PDCPUL Config request sent by LLC to PDCPUL*/
  lte_rrc_utf_get_next_ext_msg((byte **)&pdcpul_cfg_req_ptr,&buf_len);
  /* Make sure the PDCPUL Config request is valid */
  TF_ASSERT(sizeof(lte_pdcpul_cfg_req_msg_s) == buf_len);
  TF_ASSERT(pdcpul_cfg_req_ptr != NULL);

  TF_ASSERT(pdcpul_cfg_req_ptr->num_add_modified_rb == 2);
  TF_ASSERT(pdcpul_cfg_req_ptr->num_released_rb == 0);
  TF_ASSERT(pdcpul_cfg_req_ptr->add_modified_rb[0].rb_cfg_idx == 34);
  TF_ASSERT(pdcpul_cfg_req_ptr->add_modified_rb[0].
            cfg_act == LTE_PDCP_CFG_ACT_MODIFIED_RESUME);
  TF_ASSERT(pdcpul_cfg_req_ptr->add_modified_rb[1].rb_cfg_idx == 3);
  TF_ASSERT(pdcpul_cfg_req_ptr->add_modified_rb[1].
            cfg_act == LTE_PDCP_CFG_ACT_MODIFIED_RESUME);

  TF_ASSERT(pdcpul_cfg_req_ptr->rb_cfg_base_ptr[34].rb_id == 2);
  TF_ASSERT(pdcpul_cfg_req_ptr->rb_cfg_base_ptr[34].rb_cfg_idx == 34);
  TF_ASSERT(pdcpul_cfg_req_ptr->rb_cfg_base_ptr[34].rb_mode == LTE_RB_RLC_MODE_AM);
  TF_ASSERT(pdcpul_cfg_req_ptr->rb_cfg_base_ptr[34].rb_type == LTE_RB_TYPE_SRB);

  TF_ASSERT(pdcpul_cfg_req_ptr->rb_cfg_base_ptr[3].eps_id == 3);
  TF_ASSERT(pdcpul_cfg_req_ptr->rb_cfg_base_ptr[3].rb_id == 3);
  TF_ASSERT(pdcpul_cfg_req_ptr->rb_cfg_base_ptr[3].rb_cfg_idx == 3);
  TF_ASSERT(pdcpul_cfg_req_ptr->rb_cfg_base_ptr[3].rb_mode == LTE_RB_RLC_MODE_AM);
  TF_ASSERT(pdcpul_cfg_req_ptr->rb_cfg_base_ptr[3].rb_type == LTE_RB_TYPE_DRB);

  /* Construct and send the lte_pdcp_cfg_cnf message back to LLC */
  lte_rrc_init_default_hdr(&pdcpul_cfg_cnf.hdr,LTE_PDCPUL_CFG_CNF);
  /* Setting the fields in the LTE_PDCPUL_CFG_CNF sent by PDCPUL */
  pdcpul_cfg_cnf.status = E_SUCCESS;
  /* Send the LTE_PDCPUL_CFG_CNF to LLC there by mimicing the action of PDCPUL */
  status = msgr_send(&pdcpul_cfg_cnf.hdr, sizeof(pdcpul_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a ConnectionReconfigurationComplete OTA message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_sdu_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_sdu_req_msg_s));
  TF_ASSERT(pdcpul_sdu_req_ptr->hdr.id == LTE_PDCPUL_SDU_REQ);

  TF_ASSERT(pdcpul_sdu_req_ptr->rb_cfg_idx == 33);
 /*Make sure that the Integrity protect flag is set to TRUE*/
  TF_ASSERT(TRUE == pdcpul_sdu_req_ptr->integrity_protect);

  /*Make sure that the Cipher flag is set to TRUE*/
  TF_ASSERT(TRUE == pdcpul_sdu_req_ptr->cipher);

  // ---------------------------------------------

  // Prepare pdcpul_sdu_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_sdu_cnf.hdr, LTE_PDCPUL_SDU_CNF);

  pdcpul_sdu_cnf.num_nack_muid = 0;
  pdcpul_sdu_cnf.num_maybe_muid = 0;
  pdcpul_sdu_cnf.num_ack_muid = 1;
  pdcpul_sdu_cnf.ack_muid[0] = pdcpul_sdu_req_ptr->mu_id;

  // Send pdcpul_sdu_cnf to RRC
  status = msgr_send(&pdcpul_sdu_cnf.hdr, sizeof(pdcpul_sdu_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // We expect a service_ind message, indicating SERVICE AVAILABLE from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind_ptr, &buf_len);

  //TF_ASSERT(service_ind->trans_id == 1);
  TF_ASSERT(service_ind_ptr != NULL);
  TF_ASSERT(service_ind_ptr->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);

  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind_ptr->msg_hdr.id == LTE_RRC_SERVICE_IND);

  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();

}


void LteRrcTesteMBMSMCCHWaitTimerExpDuringIRATCGI__Test()
{
  lte_pdcpdl_sdu_ind_msg_s pdcpdl_sdu_ind;
  dsm_item_type *dsm_ptr_cr1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_cr1;         /* Message attachment pointer */
  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;

  lte_cphy_conn_meas_cfg_req_s *cphy_meas_cfg_req;
  lte_cphy_conn_meas_cfg_cnf_s  cphy_meas_cfg_cnf;
  lte_cphy_irat_cgi_start_ind_s cphy_irat_cgi_start_ind;
  lte_cphy_suspend_req_s *cphy_susp_req_ptr = NULL;
  lte_cphy_suspend_cnf_s  cphy_susp_cnf;
  lte_cphy_resume_req_s *cphy_res_req_ptr = NULL;
  lte_cphy_resume_cnf_s  cphy_res_cnf;
  lte_cphy_serv_cell_meas_req_s *serv_cell_meas_req_ptr = NULL;
  lte_cphy_serv_cell_meas_cnf_s  serv_cell_meas_cnf;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

#ifndef LTE_DO_IRAT_COMPILE_OUT
  hdrcp_lte_get_cgi_req_msg_t *get_cgi_req_ptr = NULL;
  hdrcp_msg_req_u *abort_cgi_req_ptr = NULL;
  hdrcp_lte_get_cgi_rsp_msg_t  get_cgi_rsp;
#endif
  uint32 buf_len;
  lte_errno_e status;

  // At this point, send an enable req
  LteRrceMBMSEnable__Test();

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  // ---------------------------------------------

  // Prepare pdcpdl_sdu_ind to send ConnectionReconfiguration with Meas OTA msg to RRC
  msgr_init_hdr_attach(&pdcpdl_sdu_ind.hdr, MSGR_LTE_PDCPDL, LTE_PDCPDL_SDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_cr1, lte_rrc_test_irat_cgi_msg,
                         sizeof(lte_rrc_test_irat_cgi_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_irat_cgi_msg));
  TF_ASSERT(dsm_ptr_cr1 != NULL);

  att_ptr_cr1 = msgr_get_attach(&pdcpdl_sdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_cr1, dsm_ptr_cr1);

  pdcpdl_sdu_ind.rb_cfg_idx = 33;                                 // Sent on SRB2

  // Send pdcpdl_sdu_ind to RRC
  status = msgr_send(&pdcpdl_sdu_ind.hdr, sizeof(pdcpdl_sdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a cphy_conn_meas_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_conn_meas_cfg_req_s));
  TF_ASSERT(cphy_meas_cfg_req->msgr_hdr.id == LTE_CPHY_CONN_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.phy_cell_id == cell[LTE_RRC_TEST_CELL_0].phys_cell_id);
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.dl_cell_frequency == cell[LTE_RRC_TEST_CELL_0].earfcn);


  // Prepare cphy_conn_meas_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_meas_cfg_cnf.msgr_hdr, LTE_CPHY_CONN_MEAS_CFG_CNF);
  cphy_meas_cfg_cnf.status = E_SUCCESS;

  // Send cphy_conn_meas_cnf to RRC
  status = msgr_send(&cphy_meas_cfg_cnf.msgr_hdr, sizeof(lte_cphy_conn_meas_cfg_cnf_s));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a ConnectionReconfigurationComplete OTA message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_sdu_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_sdu_req_msg_s));
  TF_ASSERT(pdcpul_sdu_req->hdr.id == LTE_PDCPUL_SDU_REQ);

  TF_ASSERT(pdcpul_sdu_req->rb_cfg_idx == 33);

  // Prepare pdcpul_sdu_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_sdu_cnf.hdr, LTE_PDCPUL_SDU_CNF);

  pdcpul_sdu_cnf.num_nack_muid = 0;
  pdcpul_sdu_cnf.num_maybe_muid = 0;
  pdcpul_sdu_cnf.num_ack_muid = 1;
  pdcpul_sdu_cnf.ack_muid[0] = pdcpul_sdu_req->mu_id;

  // Send pdcpul_sdu_cnf to RRC
  status = msgr_send(&pdcpul_sdu_cnf.hdr, sizeof(pdcpul_sdu_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------

  // Send LTE_CPHY_IRAT_CGI_START_IND to RRC
  lte_rrc_init_default_hdr(&cphy_irat_cgi_start_ind.msgr_hdr, LTE_CPHY_IRAT_CGI_START_IND);
  cphy_irat_cgi_start_ind.time_avail_for_irat_cgi = 1500;

  // Send cphy_irat_cgi_start_ind to RRC
  status = msgr_send(&cphy_irat_cgi_start_ind.msgr_hdr, sizeof(cphy_irat_cgi_start_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect LTE_CPHY_SUSPEND_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_susp_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_suspend_req_s));
  TF_ASSERT(cphy_susp_req_ptr->msgr_hdr.id == LTE_CPHY_SUSPEND_REQ);
  TF_ASSERT(cphy_susp_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_SUSPEND_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_susp_cnf.msgr_hdr, LTE_CPHY_SUSPEND_CNF);
  cphy_susp_cnf.status = E_SUCCESS;
  cphy_susp_cnf.suspend_cause = LTE_CPHY_IRAT_CGI;
  cphy_susp_cnf.cdma_time_info.cdma_sys_time = 500000;
  cphy_susp_cnf.cdma_time_info.lte_ostmr = 7500;

  // Send cphy_susp_req_cnf to RRC
  status = msgr_send(&cphy_susp_cnf.msgr_hdr, sizeof(cphy_susp_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
#ifndef LTE_DO_IRAT_COMPILE_OUT
  // We expect HDR_CP_LTE_GET_CGI_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&get_cgi_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(hdrcp_lte_get_cgi_req_msg_t));
  TF_ASSERT(get_cgi_req_ptr->hdr.id == HDR_CP_LTE_GET_CGI_REQ);
  TF_ASSERT(get_cgi_req_ptr->sys_info.band == SYS_BAND_BC0);
  TF_ASSERT(get_cgi_req_ptr->sys_info.chan_num == 1000);
  TF_ASSERT(get_cgi_req_ptr->cdma_sys_time == 500000);
  TF_ASSERT(get_cgi_req_ptr->lte_ostmr == 7500);
  TF_ASSERT(get_cgi_req_ptr->pilot_pn == 500);
  TF_ASSERT(get_cgi_req_ptr->time_available_for_cgi == 1465);


  TF_SLEEP(6000);

  // We expect HDR_CP_LTE_ABORT_CGI_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&abort_cgi_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(hdrcp_msg_req_u));
  TF_ASSERT(abort_cgi_req_ptr->hdr.id == HDR_CP_LTE_ABORT_CGI_REQ);

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  lte_rrc_init_default_hdr(&get_cgi_rsp.hdr, HDR_CP_LTE_GET_CGI_RSP);
  get_cgi_rsp.sys_info.band = SYS_BAND_BC0;
  get_cgi_rsp.sys_info.chan_num = 1000;
  get_cgi_rsp.pilot_pn = 500;
  // Indicate CGI info was not acquired
  get_cgi_rsp.cgi_info_included = FALSE;

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  status = msgr_send(&get_cgi_rsp.hdr, sizeof(get_cgi_rsp));
  TF_ASSERT(status == E_SUCCESS);
#endif
  // ---------------------------------------------
  // LTE stack should be resumed immediately
  // We expect LTE_CPHY_RESUME_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_res_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_resume_req_s));
  TF_ASSERT(cphy_res_req_ptr->msgr_hdr.id == LTE_CPHY_RESUME_REQ);
  TF_ASSERT(cphy_res_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_RESUME_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_res_cnf.msgr_hdr, LTE_CPHY_RESUME_CNF);
  cphy_res_cnf.status = E_SUCCESS;
  status = msgr_send(&cphy_res_cnf.msgr_hdr, sizeof(cphy_res_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // After LTE stack is resumed, MCCH WAIT_TMR should be handled
  LteRrcTestMCCHRelease(0);

  LteRrceMBMSGetAvailTmgiList(2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->status != E_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 35);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSMCCHWaitTimerExpDuringMLSuspend__Test()
{
  lte_pdcpdl_sdu_ind_msg_s pdcpdl_sdu_ind;
  dsm_item_type *dsm_ptr_cr1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_cr1;         /* Message attachment pointer */
  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;

  lte_cphy_conn_meas_cfg_req_s *cphy_meas_cfg_req;
  lte_cphy_conn_meas_cfg_cnf_s  cphy_meas_cfg_cnf;
  lte_cphy_irat_cgi_start_ind_s cphy_irat_cgi_start_ind;
  lte_cphy_suspend_req_s *cphy_susp_req_ptr = NULL;
  lte_cphy_suspend_cnf_s  cphy_susp_cnf;
  lte_cphy_resume_req_s *cphy_res_req_ptr = NULL;
  lte_cphy_resume_cnf_s  cphy_res_cnf;
  lte_cphy_serv_cell_meas_req_s *serv_cell_meas_req_ptr = NULL;
  lte_cphy_serv_cell_meas_cnf_s  serv_cell_meas_cnf;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

#ifndef LTE_DO_IRAT_COMPILE_OUT
  hdrcp_lte_get_cgi_req_msg_t *get_cgi_req_ptr = NULL;
  hdrcp_msg_req_u *abort_cgi_req_ptr = NULL;
  hdrcp_lte_get_cgi_rsp_msg_t  get_cgi_rsp;
#endif
  uint32 buf_len;
  lte_errno_e status;

  // At this point, send an enable req
  LteRrceMBMSEnable__Test();

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  // ---------------------------------------------

  // Prepare pdcpdl_sdu_ind to send ConnectionReconfiguration with Meas OTA msg to RRC
  msgr_init_hdr_attach(&pdcpdl_sdu_ind.hdr, MSGR_LTE_PDCPDL, LTE_PDCPDL_SDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_cr1, lte_rrc_test_irat_cgi_msg,
                         sizeof(lte_rrc_test_irat_cgi_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_irat_cgi_msg));
  TF_ASSERT(dsm_ptr_cr1 != NULL);

  att_ptr_cr1 = msgr_get_attach(&pdcpdl_sdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_cr1, dsm_ptr_cr1);

  pdcpdl_sdu_ind.rb_cfg_idx = 33;                                 // Sent on SRB2

  // Send pdcpdl_sdu_ind to RRC
  status = msgr_send(&pdcpdl_sdu_ind.hdr, sizeof(pdcpdl_sdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a cphy_conn_meas_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_conn_meas_cfg_req_s));
  TF_ASSERT(cphy_meas_cfg_req->msgr_hdr.id == LTE_CPHY_CONN_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.phy_cell_id == cell[LTE_RRC_TEST_CELL_0].phys_cell_id);
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.dl_cell_frequency == cell[LTE_RRC_TEST_CELL_0].earfcn);


  // Prepare cphy_conn_meas_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_meas_cfg_cnf.msgr_hdr, LTE_CPHY_CONN_MEAS_CFG_CNF);
  cphy_meas_cfg_cnf.status = E_SUCCESS;

  // Send cphy_conn_meas_cnf to RRC
  status = msgr_send(&cphy_meas_cfg_cnf.msgr_hdr, sizeof(lte_cphy_conn_meas_cfg_cnf_s));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a ConnectionReconfigurationComplete OTA message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_sdu_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_sdu_req_msg_s));
  TF_ASSERT(pdcpul_sdu_req->hdr.id == LTE_PDCPUL_SDU_REQ);

  TF_ASSERT(pdcpul_sdu_req->rb_cfg_idx == 33);

  // Prepare pdcpul_sdu_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_sdu_cnf.hdr, LTE_PDCPUL_SDU_CNF);

  pdcpul_sdu_cnf.num_nack_muid = 0;
  pdcpul_sdu_cnf.num_maybe_muid = 0;
  pdcpul_sdu_cnf.num_ack_muid = 1;
  pdcpul_sdu_cnf.ack_muid[0] = pdcpul_sdu_req->mu_id;

  // Send pdcpul_sdu_cnf to RRC
  status = msgr_send(&pdcpul_sdu_cnf.hdr, sizeof(pdcpul_sdu_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------

  // Send LTE_CPHY_IRAT_CGI_START_IND to RRC
  lte_rrc_init_default_hdr(&cphy_irat_cgi_start_ind.msgr_hdr, LTE_CPHY_IRAT_CGI_START_IND);
  cphy_irat_cgi_start_ind.time_avail_for_irat_cgi = 1500;

  // Send cphy_irat_cgi_start_ind to RRC
  status = msgr_send(&cphy_irat_cgi_start_ind.msgr_hdr, sizeof(cphy_irat_cgi_start_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect LTE_CPHY_SUSPEND_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_susp_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_suspend_req_s));
  TF_ASSERT(cphy_susp_req_ptr->msgr_hdr.id == LTE_CPHY_SUSPEND_REQ);
  TF_ASSERT(cphy_susp_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_SUSPEND_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_susp_cnf.msgr_hdr, LTE_CPHY_SUSPEND_CNF);
  cphy_susp_cnf.status = E_SUCCESS;
  cphy_susp_cnf.suspend_cause = LTE_CPHY_IRAT_CGI;
  cphy_susp_cnf.cdma_time_info.cdma_sys_time = 500000;
  cphy_susp_cnf.cdma_time_info.lte_ostmr = 7500;

  // Send cphy_susp_req_cnf to RRC
  status = msgr_send(&cphy_susp_cnf.msgr_hdr, sizeof(cphy_susp_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
#ifndef LTE_DO_IRAT_COMPILE_OUT
  // We expect HDR_CP_LTE_GET_CGI_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&get_cgi_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(hdrcp_lte_get_cgi_req_msg_t));
  TF_ASSERT(get_cgi_req_ptr->hdr.id == HDR_CP_LTE_GET_CGI_REQ);
  TF_ASSERT(get_cgi_req_ptr->sys_info.band == SYS_BAND_BC0);
  TF_ASSERT(get_cgi_req_ptr->sys_info.chan_num == 1000);
  TF_ASSERT(get_cgi_req_ptr->cdma_sys_time == 500000);
  TF_ASSERT(get_cgi_req_ptr->lte_ostmr == 7500);
  TF_ASSERT(get_cgi_req_ptr->pilot_pn == 500);
  TF_ASSERT(get_cgi_req_ptr->time_available_for_cgi == 1465);


  TF_SLEEP(6000);

  // We expect HDR_CP_LTE_ABORT_CGI_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&abort_cgi_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(hdrcp_msg_req_u));
  TF_ASSERT(abort_cgi_req_ptr->hdr.id == HDR_CP_LTE_ABORT_CGI_REQ);

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  lte_rrc_init_default_hdr(&get_cgi_rsp.hdr, HDR_CP_LTE_GET_CGI_RSP);
  get_cgi_rsp.sys_info.band = SYS_BAND_BC0;
  get_cgi_rsp.sys_info.chan_num = 1000;
  get_cgi_rsp.pilot_pn = 500;
  // Indicate CGI info was not acquired
  get_cgi_rsp.cgi_info_included = FALSE;

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  status = msgr_send(&get_cgi_rsp.hdr, sizeof(get_cgi_rsp));
  TF_ASSERT(status == E_SUCCESS);
#endif
  // ---------------------------------------------
  // LTE stack should be resumed immediately
  // We expect LTE_CPHY_RESUME_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_res_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_resume_req_s));
  TF_ASSERT(cphy_res_req_ptr->msgr_hdr.id == LTE_CPHY_RESUME_REQ);
  TF_ASSERT(cphy_res_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_RESUME_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_res_cnf.msgr_hdr, LTE_CPHY_RESUME_CNF);
  cphy_res_cnf.status = E_SUCCESS;
  status = msgr_send(&cphy_res_cnf.msgr_hdr, sizeof(cphy_res_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // After LTE stack is resumed, MCCH WAIT_TMR should be handled
  LteRrcTestMCCHRelease(0);

  LteRrceMBMSGetAvailTmgiList(2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->status != E_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 35);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSDeactService__Test
(
  uint8 service_id,
  uint8 session_id,
  uint8 area_id,
  uint8 pmch_id
)
{

  lte_rrc_embms_deact_tmgi_req_s deact_tmgi_req;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);

  /* Fill in the session info */
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = service_id;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = session_id;

  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == area_id);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[pmch_id - 1].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[pmch_id - 1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == service_id);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);
}

void LteRrcTesteMBMSDeactSvc__Test
(
  uint8 svc_index
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_req_s deact_tmgi_req;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);

  /* Fill in the session info */
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = 1 + svc_index;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == (8 - svc_index));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == (8 - svc_index));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == svc_index);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == (7 - svc_index));

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == svc_index);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36 + svc_index);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == svc_index + 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == (7 - svc_index));

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSOutofCoverage__Test
(
  boolean test_cov_status,
  boolean first_time_camping,
  boolean idle_meas
)
{
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */

  uint8 *sib3_ptr = NULL;
  uint16 sib3_size;

  uint32 buf_len = 0;
  lte_errno_e status;

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_2;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  if (first_time_camping == FALSE)
  {
    // ---------------------------------------------
    // We expect meas sm to have thrown the idle meas cfg req
    lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
    TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Verify cell info
    TF_ASSERT(idle_meas_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
    TF_ASSERT(idle_meas_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

    // Verify reselection common info
    TF_ASSERT(idle_meas_cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                          LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                          LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                          LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));

    TF_ASSERT(idle_meas_cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

    // Send the cnf msg back to meas
    lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
    idle_meas_cfg_cnf.status = E_SUCCESS;
    status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  }

  if ((test_cov_status) && (first_time_camping))
  {
    // We expect LTE_RRC_EMBMS_COVERAGE_STATE_IND thrown because of out of coverage
    lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
    TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
    TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
    TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");
  }
#if 0
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
#endif

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RELEASE_ALL_EMBMBS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  if ((test_cov_status) && (!first_time_camping))
  {
    // We expect LTE_RRC_EMBMS_COVERAGE_STATE_IND thrown because of out of coverage
    lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
    TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
    TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
    TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");
  }

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE_ALL_EMBMBS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  if (first_time_camping)
  {

    // Prepare bcch_dl_data_ind to send SIB3 to RRC
    msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

    sib3_ptr = (cell[cell_index].sibs_ptr[group_index])->sib3_ptr;
    sib3_size = (cell[cell_index].sibs_ptr[group_index])->sib3_size;

    TF_ASSERT(dsm_pushdown(&dsm_ptr_sib3, sib3_ptr,
                           sib3_size,
                           DSM_DS_SMALL_ITEM_POOL) == sib3_size);
    TF_ASSERT(dsm_ptr_sib3 != NULL);

    att_ptr_sib3 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
    msgr_set_dsm_attach(att_ptr_sib3, dsm_ptr_sib3);

    bcch_dl_data_ind.freq = cell[cell_index].earfcn;
    bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
    bcch_dl_data_ind.sfn.sys_fn = 20;

    // Send bcch_dl_data_ind to RRC
    status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
    TF_ASSERT(status == E_SUCCESS);

    // We expect a sib_sched_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
    TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

    TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
    TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  }

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  if (first_time_camping)
  {
    // ---------------------------------------------
    // We expect meas sm to have thrown the idle meas cfg req
    lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
    TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Verify cell info
    TF_ASSERT(idle_meas_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
    TF_ASSERT(idle_meas_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

    // Verify reselection common info
    TF_ASSERT(idle_meas_cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                          LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                          LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                          LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));

    // Send the cnf msg back to meas
    lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
    idle_meas_cfg_cnf.status = E_SUCCESS;
    status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  }

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_OUT_OF_COVERAGE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  if(idle_meas)
  {
  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(idle_meas_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(idle_meas_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(idle_meas_cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  }
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSOutofCoverageConnMode__Test
(
  boolean test_cov_status,
  boolean first_time_camping
)
{
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */

  uint8 *sib3_ptr = NULL;
  uint16 sib3_size;

  uint32 buf_len = 0;
  lte_errno_e status;

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_2;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  if ((test_cov_status) && (first_time_camping))
  {
    // We expect LTE_RRC_EMBMS_COVERAGE_STATE_IND thrown because of out of coverage
    lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
    TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
    TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
    TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");
  }
#if 0
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
#endif

  if ((test_cov_status) && (!first_time_camping))
  {
    // We expect LTE_RRC_EMBMS_COVERAGE_STATE_IND thrown because of out of coverage
    lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
    TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
    TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
    TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");
  }

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RELEASE_ALL_EMBMBS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE_ALL_EMBMBS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_OUT_OF_COVERAGE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSSib13UpdateFromCellResel__Test
(
  void
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Get avail_tmgi_list_indi*/
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_MSG("\nESMGR: Rcvd LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND \n");
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 2);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSMCastOOSOnRetainedAreaBeforeSIBUpdatedOnTargetCell__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index

)
{

  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */
  uint8 *sib3_ptr = NULL;
  uint16 sib3_size;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;

  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Let most part of MCCH timer expire
  TF_SLEEP(9500);

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Let remaining MCCH timer expire
  TF_SLEEP(100);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to tear down MTCH / MCCH in area 1
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_MCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].session_info.tmgi.service_id[2] == 0);

  // Send SIBs after camping and delay sending SIB3
  LteRrcTestSICollectionAfterCampingEmbmsDelaySIB3__Test(tgt_cell_index, group_index, TRUE, FALSE, TRUE);

  // ---------------------------------------------
  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to tear down MTCH / MCCH in area 1
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrcTesteMBMSAvailSaiListInd();
/*

*/
  // Prepare bcch_dl_data_ind to send SIB3 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib3_ptr = (cell[tgt_cell_index].sibs_ptr[group_index])->sib3_ptr;
  sib3_size = (cell[tgt_cell_index].sibs_ptr[group_index])->sib3_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib3, sib3_ptr,
                         sib3_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib3_size);
  TF_ASSERT(dsm_ptr_sib3 != NULL);

  att_ptr_sib3 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib3, dsm_ptr_sib3);

  bcch_dl_data_ind.freq = cell[tgt_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[tgt_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

    // We expect meas sm to have thrown the idle meas cfg req to bump priority of serving freq
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(idle_meas_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(idle_meas_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2));

  // Verify MTCH setup for service 0
  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTestServiceTerminatesAfterCellResel__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  // Cell info should match the src cell
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_32RF);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);
  // Cell info should match the tgt cell
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg2));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 1;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                         LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_SESSION_END);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  /* Get avail_tmgi_list_indi*/
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_MSG("\nESMGR: Rcvd LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND \n");
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 2);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTestReselServiceContinuesAfterCellResel__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);

  if (src_cell_index == LTE_RRC_TEST_CELL_9)
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              area_id == 0);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
              area_id == 1);
  }
  else
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              area_id == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
              area_id == 0);
  }

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  // Cell info should match the src cell
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_32RF);


  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);
  // Cell info should match the tgt cell
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg2));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  if (src_cell_index == LTE_RRC_TEST_CELL_9)
  {
    mcch_pdu_ind.area_id = 1;
  }
  else
  {
    mcch_pdu_ind.area_id = 0;
  }

  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                         LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);

  if (src_cell_index == LTE_RRC_TEST_CELL_9)
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 1);
  }
  else
  {

    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 0);
  }

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);

  if (src_cell_index == LTE_RRC_TEST_CELL_9)
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 1);
  }
  else
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 1);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 0);
  }

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);

  if (src_cell_index == LTE_RRC_TEST_CELL_9)
  {
    TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  }
  else
  {
    TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  }

  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);

  if (src_cell_index == LTE_RRC_TEST_CELL_9)
  {
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 1);
  }
  else
  {
    TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  }
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Get avail_tmgi_list_indi*/
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_MSG("\nESMGR: Rcvd LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND \n");
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 2);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTestServiceTerminatesAfterCellReselMCCHReleaseOnly__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index
)
{
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  // Cell info should match the src cell

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);
  // Cell info should match the tgt cell
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg2));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 1;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

 // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Get avail_tmgi_list_indi*/
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_MSG("\nESMGR: Rcvd LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND \n");
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 2);

   /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_TMGI_NOT_FOUND);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 35);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSSib13UpdateFromOOS__Test
(
  void
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_64RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG|LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            mod_period == LTE_L1_MBSFN_MCCH_MOD_PERIOD_512RF);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].mcch_schdl_cfg.
            rep_period == LTE_L1_MBSFN_MCCH_REP_PERIOD_64RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Get avail_tmgi_list_indi*/
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_MSG("\nESMGR: Rcvd LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND \n");
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 2);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSActivateDuringIRATCGI__Test()
{
  lte_pdcpdl_sdu_ind_msg_s pdcpdl_sdu_ind;
  dsm_item_type *dsm_ptr_cr1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_cr1;         /* Message attachment pointer */
  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;

  lte_cphy_conn_meas_cfg_req_s *cphy_meas_cfg_req;
  lte_cphy_conn_meas_cfg_cnf_s  cphy_meas_cfg_cnf;
  lte_cphy_irat_cgi_start_ind_s cphy_irat_cgi_start_ind;
  lte_cphy_suspend_req_s *cphy_susp_req_ptr = NULL;
  lte_cphy_suspend_cnf_s  cphy_susp_cnf;
  lte_cphy_resume_req_s *cphy_res_req_ptr = NULL;
  lte_cphy_resume_cnf_s  cphy_res_cnf;
  lte_cphy_serv_cell_meas_req_s *serv_cell_meas_req_ptr = NULL;
  lte_cphy_serv_cell_meas_cnf_s  serv_cell_meas_cnf;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

#ifndef LTE_DO_IRAT_COMPILE_OUT
  hdrcp_lte_get_cgi_req_msg_t *get_cgi_req_ptr = NULL;
  hdrcp_msg_req_u *abort_cgi_req_ptr = NULL;
  hdrcp_lte_get_cgi_rsp_msg_t  get_cgi_rsp;
#endif
  uint32 buf_len;
  lte_errno_e status;

  // ---------------------------------------------

  // Prepare pdcpdl_sdu_ind to send ConnectionReconfiguration with Meas OTA msg to RRC
  msgr_init_hdr_attach(&pdcpdl_sdu_ind.hdr, MSGR_LTE_PDCPDL, LTE_PDCPDL_SDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_cr1, lte_rrc_test_irat_cgi_msg,
                         sizeof(lte_rrc_test_irat_cgi_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_irat_cgi_msg));
  TF_ASSERT(dsm_ptr_cr1 != NULL);

  att_ptr_cr1 = msgr_get_attach(&pdcpdl_sdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_cr1, dsm_ptr_cr1);

  pdcpdl_sdu_ind.rb_cfg_idx = 33;                                 // Sent on SRB2

  // Send pdcpdl_sdu_ind to RRC
  status = msgr_send(&pdcpdl_sdu_ind.hdr, sizeof(pdcpdl_sdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a cphy_conn_meas_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_conn_meas_cfg_req_s));
  TF_ASSERT(cphy_meas_cfg_req->msgr_hdr.id == LTE_CPHY_CONN_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.phy_cell_id == cell[LTE_RRC_TEST_CELL_0].phys_cell_id);
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.dl_cell_frequency == cell[LTE_RRC_TEST_CELL_0].earfcn);

  // Verify valid and mod bitmasks
  TF_ASSERT(cphy_meas_cfg_req->meas_obj_valid_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->meas_id_valid_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->report_cfg_valid_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->meas_obj_mod_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->meas_id_mod_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->report_cfg_mod_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->other_mod_bitmask == 0x1);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].type == LTE_CPHY_MEAS_OBJ_TYPE_CDMA);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.cdma_type == LTE_CPHY_CDMA_OBJTYPE_HRPD);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.channel.band == SYS_BAND_BC0);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.channel.chan_num == 1000);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.cgi_cell_included == TRUE);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.report_cgi_cell_id == 500);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->report_cfg_list[4].trig_cfg.
            type == LTE_CPHY_MEAS_REPORT_CFG_TRIG_TYPE_PERIODIC);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->report_cfg_list[4].trig_cfg.data.periodical.
            purpose == LTE_CPHY_MEAS_REPORT_CFG_PERIODICAL_TYPE_CGI);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_id_list[4].meas_obj_id == 5);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_id_list[4].report_cfg_id == 5);

  // Prepare cphy_conn_meas_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_meas_cfg_cnf.msgr_hdr, LTE_CPHY_CONN_MEAS_CFG_CNF);
  cphy_meas_cfg_cnf.status = E_SUCCESS;

  // Send cphy_conn_meas_cnf to RRC
  status = msgr_send(&cphy_meas_cfg_cnf.msgr_hdr, sizeof(lte_cphy_conn_meas_cfg_cnf_s));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a ConnectionReconfigurationComplete OTA message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_sdu_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_sdu_req_msg_s));
  TF_ASSERT(pdcpul_sdu_req->hdr.id == LTE_PDCPUL_SDU_REQ);

  TF_ASSERT(pdcpul_sdu_req->rb_cfg_idx == 33);

  // Prepare pdcpul_sdu_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_sdu_cnf.hdr, LTE_PDCPUL_SDU_CNF);

  pdcpul_sdu_cnf.num_nack_muid = 0;
  pdcpul_sdu_cnf.num_maybe_muid = 0;
  pdcpul_sdu_cnf.num_ack_muid = 1;
  pdcpul_sdu_cnf.ack_muid[0] = pdcpul_sdu_req->mu_id;

  // Send pdcpul_sdu_cnf to RRC
  status = msgr_send(&pdcpul_sdu_cnf.hdr, sizeof(pdcpul_sdu_cnf));
  TF_ASSERT(status == E_SUCCESS);
  // ---------------------------------------------

  // Send LTE_CPHY_IRAT_CGI_START_IND to RRC
  lte_rrc_init_default_hdr(&cphy_irat_cgi_start_ind.msgr_hdr, LTE_CPHY_IRAT_CGI_START_IND);
  cphy_irat_cgi_start_ind.time_avail_for_irat_cgi = 1500;

  // Send cphy_irat_cgi_start_ind to RRC
  status = msgr_send(&cphy_irat_cgi_start_ind.msgr_hdr, sizeof(cphy_irat_cgi_start_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect LTE_CPHY_SUSPEND_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_susp_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_suspend_req_s));
  TF_ASSERT(cphy_susp_req_ptr->msgr_hdr.id == LTE_CPHY_SUSPEND_REQ);
  TF_ASSERT(cphy_susp_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_SUSPEND_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_susp_cnf.msgr_hdr, LTE_CPHY_SUSPEND_CNF);
  cphy_susp_cnf.status = E_SUCCESS;
  cphy_susp_cnf.suspend_cause = LTE_CPHY_IRAT_CGI;
  cphy_susp_cnf.cdma_time_info.cdma_sys_time = 500000;
  cphy_susp_cnf.cdma_time_info.lte_ostmr = 7500;

  // Send cphy_susp_req_cnf to RRC
  status = msgr_send(&cphy_susp_cnf.msgr_hdr, sizeof(cphy_susp_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
#ifndef LTE_DO_IRAT_COMPILE_OUT
  // We expect HDR_CP_LTE_GET_CGI_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&get_cgi_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(hdrcp_lte_get_cgi_req_msg_t));
  TF_ASSERT(get_cgi_req_ptr->hdr.id == HDR_CP_LTE_GET_CGI_REQ);
  TF_ASSERT(get_cgi_req_ptr->sys_info.band == SYS_BAND_BC0);
  TF_ASSERT(get_cgi_req_ptr->sys_info.chan_num == 1000);
  TF_ASSERT(get_cgi_req_ptr->cdma_sys_time == 500000);
  TF_ASSERT(get_cgi_req_ptr->lte_ostmr == 7500);
  TF_ASSERT(get_cgi_req_ptr->pilot_pn == 500);
  TF_ASSERT(get_cgi_req_ptr->time_available_for_cgi == 1465);

  // At this point, send an enable / Activate TMGI req
  LteRrceMBMSEnable__Test();

  LteRrcSendeMBMSActivateReqForService1();

  // We expect HDR_CP_LTE_ABORT_CGI_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&abort_cgi_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(hdrcp_msg_req_u));
  TF_ASSERT(abort_cgi_req_ptr->hdr.id == HDR_CP_LTE_ABORT_CGI_REQ);

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  lte_rrc_init_default_hdr(&get_cgi_rsp.hdr, HDR_CP_LTE_GET_CGI_RSP);
  get_cgi_rsp.sys_info.band = SYS_BAND_BC0;
  get_cgi_rsp.sys_info.chan_num = 1000;
  get_cgi_rsp.pilot_pn = 500;
  // Indicate CGI info was not acquired
  get_cgi_rsp.cgi_info_included = FALSE;

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  status = msgr_send(&get_cgi_rsp.hdr, sizeof(get_cgi_rsp));
  TF_ASSERT(status == E_SUCCESS);
#endif
  // ---------------------------------------------
  // LTE stack should be resumed immediately
  // We expect LTE_CPHY_RESUME_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_res_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_resume_req_s));
  TF_ASSERT(cphy_res_req_ptr->msgr_hdr.id == LTE_CPHY_RESUME_REQ);
  TF_ASSERT(cphy_res_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_RESUME_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_res_cnf.msgr_hdr, LTE_CPHY_RESUME_CNF);
  cphy_res_cnf.status = E_SUCCESS;
  status = msgr_send(&cphy_res_cnf.msgr_hdr, sizeof(cphy_res_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // After LTE stack is resumed, Activate TMGI req should be handled
  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSDisableDuringIRATCGI__Test()
{
  lte_pdcpdl_sdu_ind_msg_s pdcpdl_sdu_ind;
  dsm_item_type *dsm_ptr_cr1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_cr1;         /* Message attachment pointer */
  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;

  lte_cphy_conn_meas_cfg_req_s *cphy_meas_cfg_req;
  lte_cphy_conn_meas_cfg_cnf_s  cphy_meas_cfg_cnf;
  lte_cphy_irat_cgi_start_ind_s cphy_irat_cgi_start_ind;
  lte_cphy_suspend_req_s *cphy_susp_req_ptr = NULL;
  lte_cphy_suspend_cnf_s  cphy_susp_cnf;
  lte_cphy_resume_req_s *cphy_res_req_ptr = NULL;
  lte_cphy_resume_cnf_s  cphy_res_cnf;
  lte_cphy_serv_cell_meas_req_s *serv_cell_meas_req_ptr = NULL;
  lte_cphy_serv_cell_meas_cnf_s  serv_cell_meas_cnf;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_disable_req_s disable_req;

#ifndef LTE_DO_IRAT_COMPILE_OUT
  hdrcp_lte_get_cgi_req_msg_t *get_cgi_req_ptr = NULL;
  hdrcp_msg_req_u *abort_cgi_req_ptr = NULL;
  hdrcp_lte_get_cgi_rsp_msg_t  get_cgi_rsp;
#endif
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;


  // send an enable / Activate TMGI req
  LteRrceMBMSEnable__Test();

  LteRrcSendeMBMSActivateReqForService1();

  // Verify Activate TMGI req handling
  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // ---------------------------------------------

  // Send CGI configuration
  msgr_init_hdr_attach(&pdcpdl_sdu_ind.hdr, MSGR_LTE_PDCPDL, LTE_PDCPDL_SDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_cr1, lte_rrc_test_irat_cgi_msg,
                         sizeof(lte_rrc_test_irat_cgi_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_irat_cgi_msg));
  TF_ASSERT(dsm_ptr_cr1 != NULL);

  att_ptr_cr1 = msgr_get_attach(&pdcpdl_sdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_cr1, dsm_ptr_cr1);

  pdcpdl_sdu_ind.rb_cfg_idx = 33;                                 // Sent on SRB2

  // Send pdcpdl_sdu_ind to RRC
  status = msgr_send(&pdcpdl_sdu_ind.hdr, sizeof(pdcpdl_sdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a cphy_conn_meas_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_conn_meas_cfg_req_s));
  TF_ASSERT(cphy_meas_cfg_req->msgr_hdr.id == LTE_CPHY_CONN_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.phy_cell_id == cell[LTE_RRC_TEST_CELL_0].phys_cell_id);
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.dl_cell_frequency == cell[LTE_RRC_TEST_CELL_0].earfcn);

  // Verify valid and mod bitmasks
  TF_ASSERT(cphy_meas_cfg_req->meas_obj_valid_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->meas_id_valid_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->report_cfg_valid_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->meas_obj_mod_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->meas_id_mod_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->report_cfg_mod_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->other_mod_bitmask == 0x1);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].type == LTE_CPHY_MEAS_OBJ_TYPE_CDMA);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.cdma_type == LTE_CPHY_CDMA_OBJTYPE_HRPD);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.channel.band == SYS_BAND_BC0);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.channel.chan_num == 1000);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.cgi_cell_included == TRUE);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.report_cgi_cell_id == 500);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->report_cfg_list[4].trig_cfg.
            type == LTE_CPHY_MEAS_REPORT_CFG_TRIG_TYPE_PERIODIC);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->report_cfg_list[4].trig_cfg.data.periodical.
            purpose == LTE_CPHY_MEAS_REPORT_CFG_PERIODICAL_TYPE_CGI);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_id_list[4].meas_obj_id == 5);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_id_list[4].report_cfg_id == 5);

  // Prepare cphy_conn_meas_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_meas_cfg_cnf.msgr_hdr, LTE_CPHY_CONN_MEAS_CFG_CNF);
  cphy_meas_cfg_cnf.status = E_SUCCESS;

  // Send cphy_conn_meas_cnf to RRC
  status = msgr_send(&cphy_meas_cfg_cnf.msgr_hdr, sizeof(lte_cphy_conn_meas_cfg_cnf_s));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a ConnectionReconfigurationComplete OTA message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_sdu_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_sdu_req_msg_s));
  TF_ASSERT(pdcpul_sdu_req->hdr.id == LTE_PDCPUL_SDU_REQ);

  TF_ASSERT(pdcpul_sdu_req->rb_cfg_idx == 33);

  // Prepare pdcpul_sdu_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_sdu_cnf.hdr, LTE_PDCPUL_SDU_CNF);

  pdcpul_sdu_cnf.num_nack_muid = 0;
  pdcpul_sdu_cnf.num_maybe_muid = 0;
  pdcpul_sdu_cnf.num_ack_muid = 1;
  pdcpul_sdu_cnf.ack_muid[0] = pdcpul_sdu_req->mu_id;

  // Send pdcpul_sdu_cnf to RRC
  status = msgr_send(&pdcpul_sdu_cnf.hdr, sizeof(pdcpul_sdu_cnf));
  TF_ASSERT(status == E_SUCCESS);
  // ---------------------------------------------

  // Send LTE_CPHY_IRAT_CGI_START_IND to RRC
  lte_rrc_init_default_hdr(&cphy_irat_cgi_start_ind.msgr_hdr, LTE_CPHY_IRAT_CGI_START_IND);
  cphy_irat_cgi_start_ind.time_avail_for_irat_cgi = 1500;

  // Send cphy_irat_cgi_start_ind to RRC
  status = msgr_send(&cphy_irat_cgi_start_ind.msgr_hdr, sizeof(cphy_irat_cgi_start_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect LTE_CPHY_SUSPEND_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_susp_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_suspend_req_s));
  TF_ASSERT(cphy_susp_req_ptr->msgr_hdr.id == LTE_CPHY_SUSPEND_REQ);
  TF_ASSERT(cphy_susp_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_SUSPEND_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_susp_cnf.msgr_hdr, LTE_CPHY_SUSPEND_CNF);
  cphy_susp_cnf.status = E_SUCCESS;
  cphy_susp_cnf.suspend_cause = LTE_CPHY_IRAT_CGI;
  cphy_susp_cnf.cdma_time_info.cdma_sys_time = 500000;
  cphy_susp_cnf.cdma_time_info.lte_ostmr = 7500;

  // Send cphy_susp_req_cnf to RRC
  status = msgr_send(&cphy_susp_cnf.msgr_hdr, sizeof(cphy_susp_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
#ifndef LTE_DO_IRAT_COMPILE_OUT
  // We expect HDR_CP_LTE_GET_CGI_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&get_cgi_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(hdrcp_lte_get_cgi_req_msg_t));
  TF_ASSERT(get_cgi_req_ptr->hdr.id == HDR_CP_LTE_GET_CGI_REQ);
  TF_ASSERT(get_cgi_req_ptr->sys_info.band == SYS_BAND_BC0);
  TF_ASSERT(get_cgi_req_ptr->sys_info.chan_num == 1000);
  TF_ASSERT(get_cgi_req_ptr->cdma_sys_time == 500000);
  TF_ASSERT(get_cgi_req_ptr->lte_ostmr == 7500);
  TF_ASSERT(get_cgi_req_ptr->pilot_pn == 500);
  TF_ASSERT(get_cgi_req_ptr->time_available_for_cgi == 1465);

  /* At this point, send a Disable req to RRC that should get pended */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");
  lte_rrc_utf_wait_for_done();

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  lte_rrc_init_default_hdr(&get_cgi_rsp.hdr, HDR_CP_LTE_GET_CGI_RSP);
  get_cgi_rsp.sys_info.band = SYS_BAND_BC0;
  get_cgi_rsp.sys_info.chan_num = 1000;
  get_cgi_rsp.pilot_pn = 500;
  // Indicate CGI info was not acquired
  get_cgi_rsp.cgi_info_included = FALSE;

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  status = msgr_send(&get_cgi_rsp.hdr, sizeof(get_cgi_rsp));
  TF_ASSERT(status == E_SUCCESS);
#endif
  // ---------------------------------------------
  // LTE stack should be resumed immediately
  // We expect LTE_CPHY_RESUME_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_res_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_resume_req_s));
  TF_ASSERT(cphy_res_req_ptr->msgr_hdr.id == LTE_CPHY_RESUME_REQ);
  TF_ASSERT(cphy_res_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_RESUME_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_res_cnf.msgr_hdr, LTE_CPHY_RESUME_CNF);
  cphy_res_cnf.status = E_SUCCESS;
  status = msgr_send(&cphy_res_cnf.msgr_hdr, sizeof(cphy_res_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrcTestMTCHAndMCCHReleaseArea0PMCH1LC2();

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_OUT_OF_COVERAGE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // ---------------------------------------------
  // We expect LTE_RRC_EMBMS_STATUS_CHANGE_IND
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

// This test the Inter MBSFN area mobility handling
void LteRrcTesteMBMSInterMBSFNAreaMobility__Test1
(
  void
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  uint8 i;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);

  for (i = 0; i < LTE_EMBMS_MAX_MBSFN_AREA; i++)
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[i].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[i].
              cfg_action == LTE_L1_CONFIG);
  }

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[3].area_id == 9);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[4].area_id == 10);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[5].area_id == 11);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[6].area_id == 12);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[7].area_id == 13);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  // Send MCCH PDU in area 8 containing old service in area 0
  LteRrcTestSendMCCHPDU(8, 5, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask ==
            (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
             LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg.pmch_id == 1);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 8);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 8);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 5, 75, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3));
  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 5, 85, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2));
  // Send MCCH PDU in area 9
  LteRrcTestSendMCCHPDU(9, 5, 95, lte_rrc_test_embms_mcch_msg4, sizeof(lte_rrc_test_embms_mcch_msg4));
  // Send MCCH PDU in area 10
  LteRrcTestSendMCCHPDU(10, 5, 105, lte_rrc_test_embms_mcch_msg5, sizeof(lte_rrc_test_embms_mcch_msg5));
  // Send MCCH PDU in area 11
  LteRrcTestSendMCCHPDU(11, 5, 115, lte_rrc_test_embms_mcch_msg6, sizeof(lte_rrc_test_embms_mcch_msg6));
  // Send MCCH PDU in area 12
  LteRrcTestSendMCCHPDU(12, 5, 125, lte_rrc_test_embms_mcch_msg7, sizeof(lte_rrc_test_embms_mcch_msg7));
  // Send MCCH PDU in area 13
  LteRrcTestSendMCCHPDU(13, 5, 135, lte_rrc_test_embms_mcch_msg8, sizeof(lte_rrc_test_embms_mcch_msg8));

  //************************************************

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask ==
            (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[3].area_id == 9);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[3].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[4].area_id == 10);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[4].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[5].area_id == 11);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[5].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[6].area_id == 12);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[6].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[7].area_id == 13);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[7].
          cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 16);

  lte_rrc_utf_check_no_more_msgs();
}

// This test the Inter MBSFN area mobility handling

void LteRrcTesteMBMSInterMBSFNAreaMobility__Test3
(
  void
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  uint8 i;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);

  for (i = 0; i < LTE_EMBMS_MAX_MBSFN_AREA; i++)
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[i].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[i].
              cfg_action == LTE_L1_CONFIG);
  }

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[3].area_id == 9);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[4].area_id == 10);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[5].area_id == 11);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[6].area_id == 12);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[7].area_id == 13);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  // Send MCCH PDU in area 8 containing old service in area 0
  LteRrcTestSendMCCHPDU(8, 5, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask ==
            (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
             LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg.pmch_id == 1);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG);

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 8);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 8);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 5, 75, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3));
  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 5, 85, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2));
  // Send MCCH PDU in area 9
  LteRrcTestSendMCCHPDU(9, 5, 95, lte_rrc_test_embms_mcch_msg4, sizeof(lte_rrc_test_embms_mcch_msg4));
  // Send MCCH PDU in area 10
  LteRrcTestSendMCCHPDU(10, 5, 105, lte_rrc_test_embms_mcch_msg5, sizeof(lte_rrc_test_embms_mcch_msg5));
  // Send MCCH PDU in area 11
  LteRrcTestSendMCCHPDU(11, 5, 115, lte_rrc_test_embms_mcch_msg6, sizeof(lte_rrc_test_embms_mcch_msg6));
  // Send MCCH PDU in area 12
  LteRrcTestSendMCCHPDU(12, 5, 125, lte_rrc_test_embms_mcch_msg7, sizeof(lte_rrc_test_embms_mcch_msg7));
  // Send MCCH PDU in area 13
  LteRrcTestSendMCCHPDU(13, 5, 135, lte_rrc_test_embms_mcch_msg8, sizeof(lte_rrc_test_embms_mcch_msg8));

  //************************************************

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[3].area_id == 9);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[3].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[4].area_id == 10);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[4].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[5].area_id == 11);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[5].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[6].area_id == 12);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[6].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[7].area_id == 13);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[7].
          cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 16);

  /*Send Deactivate Request*/
  LteRrcSendeMBMSDeactivateReqForService1();
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSInterMBSFNAreaMobilityPDURcvdFromOldAreaB4Release__Test()
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  uint8 i;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);

  for (i = 0; i < LTE_EMBMS_MAX_MBSFN_AREA; i++)
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[i].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[i].
              cfg_action == LTE_L1_CONFIG);
  }

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[3].area_id == 9);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[4].area_id == 10);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[5].area_id == 11);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[6].area_id == 12);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[7].area_id == 13);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  // Send MCCH PDU in area 2 (old area) containing old service, which is not present in sib13 after reselection
  LteRrcTestSendMCCHPDU(2, 5, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  lte_rrc_utf_wait_for_done();
  // Send MCCH PDU in area 8 containing old service in area 2
  LteRrcTestSendMCCHPDU(8, 5, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
             LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg.pmch_id == 1);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG);

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 8);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 8);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 5, 75, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3));
  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 5, 85, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2));
  // Send MCCH PDU in area 9
  LteRrcTestSendMCCHPDU(9, 5, 95, lte_rrc_test_embms_mcch_msg4, sizeof(lte_rrc_test_embms_mcch_msg4));
  // Send MCCH PDU in area 10
  LteRrcTestSendMCCHPDU(10, 5, 105, lte_rrc_test_embms_mcch_msg5, sizeof(lte_rrc_test_embms_mcch_msg5));
  // Send MCCH PDU in area 11
  LteRrcTestSendMCCHPDU(11, 5, 115, lte_rrc_test_embms_mcch_msg6, sizeof(lte_rrc_test_embms_mcch_msg6));
  // Send MCCH PDU in area 12
  LteRrcTestSendMCCHPDU(12, 5, 125, lte_rrc_test_embms_mcch_msg7, sizeof(lte_rrc_test_embms_mcch_msg7));
  // Send MCCH PDU in area 13
  LteRrcTestSendMCCHPDU(13, 5, 135, lte_rrc_test_embms_mcch_msg8, sizeof(lte_rrc_test_embms_mcch_msg8));

  //************************************************

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask ==
            (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[3].area_id == 9);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[3].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[4].area_id == 10);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[4].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[5].area_id == 11);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[5].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[6].area_id == 12);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[6].
          cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[7].area_id == 13);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[7].
          cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 16);

  /*Send Deactivate Request*/
  LteRrcSendeMBMSDeactivateReqForService1();
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == ((LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                           LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG)));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSActSvc__Test2
(
  void
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 3;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].area_id == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].lc_id == 4);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].area_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].lc_id == 4);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].mrb_id == 37);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 37);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 3);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 2);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[1].mrb_id == 37);
}

// This test the Inter MBSFN area mobility handling
void LteRrcTesteMBMSInterMBSFNAreaMobility__Test2
(
  void
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  uint8 i;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                         LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 9);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            area_id == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_DECONFIG);

  for (i = 2; i < 9; i++)
  {
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[i].
              monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
    TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[i].
              cfg_action == LTE_L1_CONFIG);
  }

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[3].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[4].area_id == 9);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[5].area_id == 10);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[6].area_id == 11);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[7].area_id == 12);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[8].area_id == 13);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 2);
  //TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 2);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  // Send MCCH PDU in area 0 containing old service
  LteRrcTestSendMCCHPDU(0, 5, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask ==
            (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
             LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  //TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg.pmch_id == 1);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 5, 75, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2));
  // Send MCCH PDU in area 8
  LteRrcTestSendMCCHPDU(8, 5, 85, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3));

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask ==
            (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
             LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 3);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[2].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[2].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[2].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[2].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[2].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[2].pmch[0].
            cfg.pmch_id == 1);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG);

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].area_id == 8);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].lc_id == 4);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].area_id == 8);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].lc_id == 4);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  // Send MCCH PDU in area 9
  LteRrcTestSendMCCHPDU(9, 5, 95, lte_rrc_test_embms_mcch_msg4, sizeof(lte_rrc_test_embms_mcch_msg4));
  // Send MCCH PDU in area 10
  LteRrcTestSendMCCHPDU(10, 5, 105, lte_rrc_test_embms_mcch_msg5, sizeof(lte_rrc_test_embms_mcch_msg5));
  // Send MCCH PDU in area 11
  LteRrcTestSendMCCHPDU(11, 5, 115, lte_rrc_test_embms_mcch_msg6, sizeof(lte_rrc_test_embms_mcch_msg6));
  // Send MCCH PDU in area 12
  LteRrcTestSendMCCHPDU(12, 5, 125, lte_rrc_test_embms_mcch_msg7, sizeof(lte_rrc_test_embms_mcch_msg7));
  // Send MCCH PDU in area 13
  LteRrcTestSendMCCHPDU(13, 5, 135, lte_rrc_test_embms_mcch_msg8, sizeof(lte_rrc_test_embms_mcch_msg8));

  //************************************************

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask ==
            (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 7);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[2].area_id == 9);


  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_list_ind_ptr->num_available_embms_sessions == 16);

  /*Send Deactivate Request*/
  lte_rrc_embms_deact_tmgi_req_s deact_tmgi_req;

  /* Send request to deactivate TMGI */
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);

  /* Fill in the session info */
  deact_tmgi_req.debug_trace_id = 25;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = 3;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = 1;

  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");
  lte_rrc_utf_wait_for_done();

  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 8);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].
          cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 1);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 37);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 3);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSInterMBSFNAreaMobilityActivateBeforePDU__Test()
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  uint32 buf_len = 0;
  lte_errno_e status;

  uint8 i;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // LteRrcSendeMBMSActivateReqForService1();
   lte_rrc_embms_act_tmgi_req_s act_tmgi_req;


  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.debug_trace_id = 20;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 0;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 0;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  //************************************************
  // Send MCCH PDU in area 1 containing old service in area 0
  LteRrcTestSendMCCHPDU(1, 5, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask ==
            (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
             LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 1);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrceMBMSGetAvailTmgiList(2);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 0);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSInterMBSFNAreaMobilityTwotoOneAreaUlDlSubfrmCollision__Test()
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  uint32 buf_len = 0;
  lte_errno_e status;

  uint8 i;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 1);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  // Send MCCH PDU in area 0 (old cell) containing old service in area 0
  //Just to check what happens onreceving PDU from older area
  LteRrcTestSendMCCHPDU(0, 5, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // Send MCCH PDU in area 1 containing old service in area 0
  LteRrcTestSendMCCHPDU(1, 5, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask ==
            (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
             LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrceMBMSGetAvailTmgiList(2);

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.debug_trace_id = 20;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 0;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 0;
  act_tmgi_req.num_earfcn_to_search = 0;
  act_tmgi_req.num_sai_to_search = 0;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
            LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG);
  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
            LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 37);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 0);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 2);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSInterMBSFNAreaMobilityTwotoOneArea__Test()
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  uint32 buf_len = 0;
  lte_errno_e status;

  uint8 i;

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].area_id == 1);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  //************************************************
  // Send MCCH PDU in area 0 (old cell) containing old service in area 0
  //Just to check what happens onreceving PDU from older area
  LteRrcTestSendMCCHPDU(0, 5, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // Send MCCH PDU in area 1 containing old service in area 0
  LteRrcTestSendMCCHPDU(1, 5, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask ==
            (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
             LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrceMBMSGetAvailTmgiList(2);

  /* Send request to activate TMGI */
  lte_rrc_init_default_hdr(&act_tmgi_req.msg_hdr, LTE_RRC_EMBMS_ACT_TMGI_REQ);

  /* Fill in the session info */
  act_tmgi_req.debug_trace_id = 20;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  act_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  act_tmgi_req.session_info.tmgi.service_id[0] = 0;
  act_tmgi_req.session_info.tmgi.service_id[1] = 0;
  act_tmgi_req.session_info.tmgi.service_id[2] = 0;
  act_tmgi_req.session_info.session_id_present = TRUE;
  act_tmgi_req.session_info.session_id = 0;

  status = msgr_send(&act_tmgi_req.msg_hdr, sizeof(act_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_ACT_TMGI_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
            LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 37);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 0);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 2);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == 36);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSDeactivateDuringIRATCGI__Test()
{
  lte_pdcpdl_sdu_ind_msg_s pdcpdl_sdu_ind;
  dsm_item_type *dsm_ptr_cr1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_cr1;         /* Message attachment pointer */
  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;

  lte_cphy_conn_meas_cfg_req_s *cphy_meas_cfg_req;
  lte_cphy_conn_meas_cfg_cnf_s  cphy_meas_cfg_cnf;
  lte_cphy_irat_cgi_start_ind_s cphy_irat_cgi_start_ind;
  lte_cphy_suspend_req_s *cphy_susp_req_ptr = NULL;
  lte_cphy_suspend_cnf_s  cphy_susp_cnf;
  lte_cphy_resume_req_s *cphy_res_req_ptr = NULL;
  lte_cphy_resume_cnf_s  cphy_res_cnf;
  lte_cphy_serv_cell_meas_req_s *serv_cell_meas_req_ptr = NULL;
  lte_cphy_serv_cell_meas_cnf_s  serv_cell_meas_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

#ifndef LTE_DO_IRAT_COMPILE_OUT
  hdrcp_lte_get_cgi_req_msg_t *get_cgi_req_ptr = NULL;
  hdrcp_lte_get_cgi_rsp_msg_t  get_cgi_rsp;
#endif
  uint32 buf_len;
  lte_errno_e status;

  // At this point, send an enable / Activate TMGI req
  LteRrceMBMSEnable__Test();

  // Activate a service
  LteRrcSendeMBMSActivateReqForService1();

  // After LTE stack is resumed, Activate TMGI req should be handled
  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // ---------------------------------------------

  // Prepare pdcpdl_sdu_ind to send ConnectionReconfiguration with Meas OTA msg to RRC
  msgr_init_hdr_attach(&pdcpdl_sdu_ind.hdr, MSGR_LTE_PDCPDL, LTE_PDCPDL_SDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_cr1, lte_rrc_test_irat_cgi_msg,
                         sizeof(lte_rrc_test_irat_cgi_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_irat_cgi_msg));
  TF_ASSERT(dsm_ptr_cr1 != NULL);

  att_ptr_cr1 = msgr_get_attach(&pdcpdl_sdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_cr1, dsm_ptr_cr1);

  pdcpdl_sdu_ind.rb_cfg_idx = 33;                                 // Sent on SRB2

  // Send pdcpdl_sdu_ind to RRC
  status = msgr_send(&pdcpdl_sdu_ind.hdr, sizeof(pdcpdl_sdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a cphy_conn_meas_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_conn_meas_cfg_req_s));
  TF_ASSERT(cphy_meas_cfg_req->msgr_hdr.id == LTE_CPHY_CONN_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.phy_cell_id == cell[LTE_RRC_TEST_CELL_0].phys_cell_id);
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.dl_cell_frequency == cell[LTE_RRC_TEST_CELL_0].earfcn);

  // Verify valid and mod bitmasks
  TF_ASSERT(cphy_meas_cfg_req->meas_obj_valid_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->meas_id_valid_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->report_cfg_valid_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->meas_obj_mod_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->meas_id_mod_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->report_cfg_mod_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->other_mod_bitmask == 0x1);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].type == LTE_CPHY_MEAS_OBJ_TYPE_CDMA);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.cdma_type == LTE_CPHY_CDMA_OBJTYPE_HRPD);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.channel.band == SYS_BAND_BC0);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.channel.chan_num == 1000);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.cgi_cell_included == TRUE);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.report_cgi_cell_id == 500);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->report_cfg_list[4].trig_cfg.
            type == LTE_CPHY_MEAS_REPORT_CFG_TRIG_TYPE_PERIODIC);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->report_cfg_list[4].trig_cfg.data.periodical.
            purpose == LTE_CPHY_MEAS_REPORT_CFG_PERIODICAL_TYPE_CGI);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_id_list[4].meas_obj_id == 5);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_id_list[4].report_cfg_id == 5);

  // Prepare cphy_conn_meas_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_meas_cfg_cnf.msgr_hdr, LTE_CPHY_CONN_MEAS_CFG_CNF);
  cphy_meas_cfg_cnf.status = E_SUCCESS;

  // Send cphy_conn_meas_cnf to RRC
  status = msgr_send(&cphy_meas_cfg_cnf.msgr_hdr, sizeof(lte_cphy_conn_meas_cfg_cnf_s));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a ConnectionReconfigurationComplete OTA message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_sdu_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_sdu_req_msg_s));
  TF_ASSERT(pdcpul_sdu_req->hdr.id == LTE_PDCPUL_SDU_REQ);

  TF_ASSERT(pdcpul_sdu_req->rb_cfg_idx == 33);

  // Prepare pdcpul_sdu_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_sdu_cnf.hdr, LTE_PDCPUL_SDU_CNF);

  pdcpul_sdu_cnf.num_nack_muid = 0;
  pdcpul_sdu_cnf.num_maybe_muid = 0;
  pdcpul_sdu_cnf.num_ack_muid = 1;
  pdcpul_sdu_cnf.ack_muid[0] = pdcpul_sdu_req->mu_id;

  // Send pdcpul_sdu_cnf to RRC
  status = msgr_send(&pdcpul_sdu_cnf.hdr, sizeof(pdcpul_sdu_cnf));
  TF_ASSERT(status == E_SUCCESS);
  // ---------------------------------------------

  // Send LTE_CPHY_IRAT_CGI_START_IND to RRC
  lte_rrc_init_default_hdr(&cphy_irat_cgi_start_ind.msgr_hdr, LTE_CPHY_IRAT_CGI_START_IND);
  cphy_irat_cgi_start_ind.time_avail_for_irat_cgi = 1500;

  // Send cphy_irat_cgi_start_ind to RRC
  status = msgr_send(&cphy_irat_cgi_start_ind.msgr_hdr, sizeof(cphy_irat_cgi_start_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect LTE_CPHY_SUSPEND_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_susp_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_suspend_req_s));
  TF_ASSERT(cphy_susp_req_ptr->msgr_hdr.id == LTE_CPHY_SUSPEND_REQ);
  TF_ASSERT(cphy_susp_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_SUSPEND_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_susp_cnf.msgr_hdr, LTE_CPHY_SUSPEND_CNF);
  cphy_susp_cnf.status = E_SUCCESS;
  cphy_susp_cnf.suspend_cause = LTE_CPHY_IRAT_CGI;
  cphy_susp_cnf.cdma_time_info.cdma_sys_time = 500000;
  cphy_susp_cnf.cdma_time_info.lte_ostmr = 7500;

  // Send cphy_susp_req_cnf to RRC
  status = msgr_send(&cphy_susp_cnf.msgr_hdr, sizeof(cphy_susp_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
#ifndef LTE_DO_IRAT_COMPILE_OUT
  // We expect HDR_CP_LTE_GET_CGI_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&get_cgi_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(hdrcp_lte_get_cgi_req_msg_t));
  TF_ASSERT(get_cgi_req_ptr->hdr.id == HDR_CP_LTE_GET_CGI_REQ);
  TF_ASSERT(get_cgi_req_ptr->sys_info.band == SYS_BAND_BC0);
  TF_ASSERT(get_cgi_req_ptr->sys_info.chan_num == 1000);
  TF_ASSERT(get_cgi_req_ptr->cdma_sys_time == 500000);
  TF_ASSERT(get_cgi_req_ptr->lte_ostmr == 7500);
  TF_ASSERT(get_cgi_req_ptr->pilot_pn == 500);
  TF_ASSERT(get_cgi_req_ptr->time_available_for_cgi == 1465);

  // Send an Deactivate TMGI req
  LteRrcSendeMBMSDeactivateReqForService1();

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  lte_rrc_init_default_hdr(&get_cgi_rsp.hdr, HDR_CP_LTE_GET_CGI_RSP);
  get_cgi_rsp.sys_info.band = SYS_BAND_BC0;
  get_cgi_rsp.sys_info.chan_num = 1000;
  get_cgi_rsp.pilot_pn = 500;
  // Indicate CGI info was not acquired
  get_cgi_rsp.cgi_info_included = FALSE;

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  status = msgr_send(&get_cgi_rsp.hdr, sizeof(get_cgi_rsp));
  TF_ASSERT(status == E_SUCCESS);
#endif
  // ---------------------------------------------
  // LTE stack should be resumed immediately
  // We expect LTE_CPHY_RESUME_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_res_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_resume_req_s));
  TF_ASSERT(cphy_res_req_ptr->msgr_hdr.id == LTE_CPHY_RESUME_REQ);
  TF_ASSERT(cphy_res_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_RESUME_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_res_cnf.msgr_hdr, LTE_CPHY_RESUME_CNF);
  cphy_res_cnf.status = E_SUCCESS;
  status = msgr_send(&cphy_res_cnf.msgr_hdr, sizeof(cphy_res_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSAvailTMGIReqDuringIRATCGI__Test()
{
  lte_pdcpdl_sdu_ind_msg_s pdcpdl_sdu_ind;
  dsm_item_type *dsm_ptr_cr1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_cr1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  lte_pdcpul_sdu_req_msg_s *pdcpul_sdu_req;
  lte_pdcpul_sdu_cnf_msg_s pdcpul_sdu_cnf;

  lte_cphy_conn_meas_cfg_req_s *cphy_meas_cfg_req;
  lte_cphy_conn_meas_cfg_cnf_s  cphy_meas_cfg_cnf;
  lte_cphy_irat_cgi_start_ind_s cphy_irat_cgi_start_ind;
  lte_cphy_suspend_req_s *cphy_susp_req_ptr = NULL;
  lte_cphy_suspend_cnf_s  cphy_susp_cnf;
  lte_cphy_resume_req_s *cphy_res_req_ptr = NULL;
  lte_cphy_resume_cnf_s  cphy_res_cnf;
  lte_cphy_serv_cell_meas_req_s *serv_cell_meas_req_ptr = NULL;
  lte_cphy_serv_cell_meas_cnf_s  serv_cell_meas_cnf;

  lte_rrc_embms_avail_tmgi_list_req_s avail_tmgi_req;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_ind_ptr = NULL;

#ifndef LTE_DO_IRAT_COMPILE_OUT
  hdrcp_lte_get_cgi_req_msg_t *get_cgi_req_ptr = NULL;
  hdrcp_msg_req_u *abort_cgi_req_ptr = NULL;
  hdrcp_lte_get_cgi_rsp_msg_t  get_cgi_rsp;
#endif
  dsm_item_type *dsm_ptr=NULL;
  msgr_attach_struct_type *att_ptr = NULL;
  uint8 num_attach = 0;
  uint32 dsm_size = 0;
  lte_rrc_embms_session_info_s session_info[2];

  uint32 buf_len;
  lte_errno_e status;

  // ---------------------------------------------

  // Prepare pdcpdl_sdu_ind to send ConnectionReconfiguration with Meas OTA msg to RRC
  msgr_init_hdr_attach(&pdcpdl_sdu_ind.hdr, MSGR_LTE_PDCPDL, LTE_PDCPDL_SDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_cr1, lte_rrc_test_irat_cgi_msg,
                         sizeof(lte_rrc_test_irat_cgi_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_irat_cgi_msg));
  TF_ASSERT(dsm_ptr_cr1 != NULL);

  att_ptr_cr1 = msgr_get_attach(&pdcpdl_sdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_cr1, dsm_ptr_cr1);

  pdcpdl_sdu_ind.rb_cfg_idx = 33;                                 // Sent on SRB2

  // Send pdcpdl_sdu_ind to RRC
  status = msgr_send(&pdcpdl_sdu_ind.hdr, sizeof(pdcpdl_sdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a cphy_conn_meas_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_conn_meas_cfg_req_s));
  TF_ASSERT(cphy_meas_cfg_req->msgr_hdr.id == LTE_CPHY_CONN_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.phy_cell_id == cell[LTE_RRC_TEST_CELL_0].phys_cell_id);
  TF_ASSERT(cphy_meas_cfg_req->serving_cell_info.dl_cell_frequency == cell[LTE_RRC_TEST_CELL_0].earfcn);

  // Verify valid and mod bitmasks
  TF_ASSERT(cphy_meas_cfg_req->meas_obj_valid_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->meas_id_valid_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->report_cfg_valid_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->meas_obj_mod_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->meas_id_mod_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->report_cfg_mod_bitmask == 0x10);
  TF_ASSERT(cphy_meas_cfg_req->other_mod_bitmask == 0x1);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].type == LTE_CPHY_MEAS_OBJ_TYPE_CDMA);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.cdma_type == LTE_CPHY_CDMA_OBJTYPE_HRPD);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.channel.band == SYS_BAND_BC0);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.channel.chan_num == 1000);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.cgi_cell_included == TRUE);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_obj_list[4].obj_info.cdma.report_cgi_cell_id == 500);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->report_cfg_list[4].trig_cfg.
            type == LTE_CPHY_MEAS_REPORT_CFG_TRIG_TYPE_PERIODIC);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->report_cfg_list[4].trig_cfg.data.periodical.
            purpose == LTE_CPHY_MEAS_REPORT_CFG_PERIODICAL_TYPE_CGI);

  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_id_list[4].meas_obj_id == 5);
  TF_ASSERT(cphy_meas_cfg_req->meas_cfg_ptr->meas_id_list[4].report_cfg_id == 5);

  // Prepare cphy_conn_meas_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_meas_cfg_cnf.msgr_hdr, LTE_CPHY_CONN_MEAS_CFG_CNF);
  cphy_meas_cfg_cnf.status = E_SUCCESS;

  // Send cphy_conn_meas_cnf to RRC
  status = msgr_send(&cphy_meas_cfg_cnf.msgr_hdr, sizeof(lte_cphy_conn_meas_cfg_cnf_s));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a ConnectionReconfigurationComplete OTA message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_sdu_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_sdu_req_msg_s));
  TF_ASSERT(pdcpul_sdu_req->hdr.id == LTE_PDCPUL_SDU_REQ);

  TF_ASSERT(pdcpul_sdu_req->rb_cfg_idx == 33);

  // Prepare pdcpul_sdu_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_sdu_cnf.hdr, LTE_PDCPUL_SDU_CNF);

  pdcpul_sdu_cnf.num_nack_muid = 0;
  pdcpul_sdu_cnf.num_maybe_muid = 0;
  pdcpul_sdu_cnf.num_ack_muid = 1;
  pdcpul_sdu_cnf.ack_muid[0] = pdcpul_sdu_req->mu_id;

  // Send pdcpul_sdu_cnf to RRC
  status = msgr_send(&pdcpul_sdu_cnf.hdr, sizeof(pdcpul_sdu_cnf));
  TF_ASSERT(status == E_SUCCESS);
  // ---------------------------------------------

  // Send LTE_CPHY_IRAT_CGI_START_IND to RRC
  lte_rrc_init_default_hdr(&cphy_irat_cgi_start_ind.msgr_hdr, LTE_CPHY_IRAT_CGI_START_IND);
  cphy_irat_cgi_start_ind.time_avail_for_irat_cgi = 1500;

  // Send cphy_irat_cgi_start_ind to RRC
  status = msgr_send(&cphy_irat_cgi_start_ind.msgr_hdr, sizeof(cphy_irat_cgi_start_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect LTE_CPHY_SUSPEND_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_susp_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_suspend_req_s));
  TF_ASSERT(cphy_susp_req_ptr->msgr_hdr.id == LTE_CPHY_SUSPEND_REQ);
  TF_ASSERT(cphy_susp_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_SUSPEND_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_susp_cnf.msgr_hdr, LTE_CPHY_SUSPEND_CNF);
  cphy_susp_cnf.status = E_SUCCESS;
  cphy_susp_cnf.suspend_cause = LTE_CPHY_IRAT_CGI;
  cphy_susp_cnf.cdma_time_info.cdma_sys_time = 500000;
  cphy_susp_cnf.cdma_time_info.lte_ostmr = 7500;

  // Send cphy_susp_req_cnf to RRC
  status = msgr_send(&cphy_susp_cnf.msgr_hdr, sizeof(cphy_susp_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
#ifndef LTE_DO_IRAT_COMPILE_OUT
  // We expect HDR_CP_LTE_GET_CGI_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&get_cgi_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(hdrcp_lte_get_cgi_req_msg_t));
  TF_ASSERT(get_cgi_req_ptr->hdr.id == HDR_CP_LTE_GET_CGI_REQ);
  TF_ASSERT(get_cgi_req_ptr->sys_info.band == SYS_BAND_BC0);
  TF_ASSERT(get_cgi_req_ptr->sys_info.chan_num == 1000);
  TF_ASSERT(get_cgi_req_ptr->cdma_sys_time == 500000);
  TF_ASSERT(get_cgi_req_ptr->lte_ostmr == 7500);
  TF_ASSERT(get_cgi_req_ptr->pilot_pn == 500);
  TF_ASSERT(get_cgi_req_ptr->time_available_for_cgi == 1465);

  // At this point, send an enable / Activate TMGI req
  LteRrceMBMSEnable__Test();

  /* Send avail tmgi list req */
  lte_rrc_init_default_hdr(&avail_tmgi_req.msg_hdr, LTE_RRC_EMBMS_AVAIL_TMGI_LIST_REQ);
  status = msgr_send(&avail_tmgi_req.msg_hdr, sizeof(avail_tmgi_req));
  lte_rrc_utf_wait_for_done();

  // We expect HDR_CP_LTE_ABORT_CGI_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&abort_cgi_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(hdrcp_msg_req_u));
  TF_ASSERT(abort_cgi_req_ptr->hdr.id == HDR_CP_LTE_ABORT_CGI_REQ);

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  lte_rrc_init_default_hdr(&get_cgi_rsp.hdr, HDR_CP_LTE_GET_CGI_RSP);
  get_cgi_rsp.sys_info.band = SYS_BAND_BC0;
  get_cgi_rsp.sys_info.chan_num = 1000;
  get_cgi_rsp.pilot_pn = 500;
  // Indicate CGI info was not acquired
  get_cgi_rsp.cgi_info_included = FALSE;

  // Send HDR_CP_LTE_GET_CGI_RSP to RRC
  status = msgr_send(&get_cgi_rsp.hdr, sizeof(get_cgi_rsp));
  TF_ASSERT(status == E_SUCCESS);
#endif
  // ---------------------------------------------
  // LTE stack should be resumed immediately
  // We expect LTE_CPHY_RESUME_REQ from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_res_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_resume_req_s));
  TF_ASSERT(cphy_res_req_ptr->msgr_hdr.id == LTE_CPHY_RESUME_REQ);
  TF_ASSERT(cphy_res_req_ptr->cause == LTE_CPHY_IRAT_CGI);

  // Send LTE_CPHY_RESUME_CNF to RRC
  lte_rrc_init_default_hdr(&cphy_res_cnf.msgr_hdr, LTE_CPHY_RESUME_CNF);
  cphy_res_cnf.status = E_SUCCESS;
  status = msgr_send(&cphy_res_cnf.msgr_hdr, sizeof(cphy_res_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // After LTE stack is resumed, Available TMGI list req should be handled
  LteRrcTestMCCHSetup();

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  LteRrcTestMCCHRelease(0);

  /* We expect avail tmgi list ind */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(avail_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_ind_ptr->num_available_embms_sessions == 2);

  /* Verify the DSM contents*/
  num_attach = msgr_get_num_attach((msgr_hdr_struct_type *)(avail_tmgi_ind_ptr));
  TF_ASSERT(1 == num_attach);

  att_ptr = msgr_get_attach((msgr_hdr_struct_type *)(avail_tmgi_ind_ptr), 0);
  msgr_get_dsm_attach(att_ptr, &dsm_ptr);
  TF_ASSERT(dsm_ptr != NULL);
  dsm_size = dsm_length_packet(dsm_ptr);
  TF_ASSERT(dsm_size > 0);

  TF_ASSERT(dsm_size == ((avail_tmgi_ind_ptr->num_available_embms_sessions *
                          dsm_pullup(&dsm_ptr,
                                     &session_info,
                                     (uint16)sizeof(lte_rrc_embms_session_info_s)))));

  TF_ASSERT(session_info[0].tmgi.plmn_id.identity[0] == 0);
  TF_ASSERT(session_info[0].tmgi.plmn_id.identity[1] == 0xF1);
  TF_ASSERT(session_info[0].tmgi.plmn_id.identity[2] == 0x10);
  TF_ASSERT(session_info[0].tmgi.service_id[0] == 0);
  TF_ASSERT(session_info[0].tmgi.service_id[1] == 0);
  TF_ASSERT(session_info[0].tmgi.service_id[2] == 0);
  TF_ASSERT(session_info[0].session_id == 0);
  TF_ASSERT(session_info[0].session_id_present == 1);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSActivateDuringIRATBPLMNSrch__Test()
{
  lte_rrc_plmn_search_req_s search_req;
  lte_cphy_msg_bplmn_start_req_s *start_req_ptr;
  lte_irat_abort_plmn_srch_req_s *abort_plmn_req_ptr;
  lte_irat_abort_plmn_srch_rsp_s abort_plmn_rsp;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  LteRrcTestPlmnSearchStart__Test();
  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_LTE);

  // Verify Intra-LTE PLMN search
  LteRrcTestToLteCommonSendSIB1(LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestToLteCommonVerifyBPLMNCellReq(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCellCnf(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCompleteInd(LTE_CPHY_BPLMN_ALL_DONE);

  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_IRAT);

  // Send time available indication from ML1
  LteRrcTestPlmnSearchFromLteSendTimeAvailInd();

  // Verify that LTE stack has been suspended
  TF_MSG("IRAT Integration: Verify request to suspend");
  LteRrcTestPlmnSearchVerifyReqToSuspend();

  // Send suspend confirmation.
  TF_MSG("IRAT Integration: Verifying Suspend request to ML1");
  LteRrcTestPlmnSearchSendML1SuspendCnf();

  // Wait for IRAT PLMN Search to be sent to W stack
  TF_MSG("IRAT Integration: Verify request to target RAT");
  LteRrcTestPlmnSearchVerifyReqToTargetRAT(LTE_RRC_TEST_IRAT_W);

  // At this point, send an enable / Activate TMGI req
  LteRrceMBMSEnable__Test();

  LteRrcSendeMBMSActivateReqForService1();

  TF_MSG("IRAT Integration: Send response from target RAT");
  LteRrcTestPlmnSearchSendResponseFromTargetRAT(LTE_RRC_TEST_IRAT_W);

  // Since the IRAT PLMN search failed, LTE RRC should try to resume ML1
  LteRrcTestPlmnSearchVerifyReqToResume();

  // Simulate ML1 resume success!!
  LteRrcTestPlmnSearchSendML1ResumeCnf(E_SUCCESS);

  LteRrcTestPlmnSearchFromLteVerifySkipReq();

  // After LTE stack is resumed, Activate TMGI req should be handled
  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSDeactivateDuringIRATBPLMNSrch__Test()
{

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Send an enable / Activate TMGI req
  LteRrceMBMSEnable__Test();

  // Activate a service
  LteRrcSendeMBMSActivateReqForService1();

  // After LTE stack is resumed, Activate TMGI req should be handled
  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  LteRrcTestPlmnSearchStart__Test();
  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_LTE);

  // Verify Intra-LTE PLMN search
  LteRrcTestToLteCommonSendSIB1(LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestToLteCommonVerifyBPLMNCellReq(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCellCnf(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCompleteInd(LTE_CPHY_BPLMN_ALL_DONE);

  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_IRAT);

  // Send time available indication from ML1
  LteRrcTestPlmnSearchFromLteSendTimeAvailInd();

  // Verify that LTE stack has been suspended
  TF_MSG("IRAT Integration: Verify request to suspend");
  LteRrcTestPlmnSearchVerifyReqToSuspend();

  // Send suspend confirmation.
  TF_MSG("IRAT Integration: Verifying Suspend request to ML1");
  LteRrcTestPlmnSearchSendML1SuspendCnf();

  // Wait for IRAT PLMN Search to be sent to W stack
  TF_MSG("IRAT Integration: Verify request to target RAT");
  LteRrcTestPlmnSearchVerifyReqToTargetRAT(LTE_RRC_TEST_IRAT_W);

  // Send a Deactivate TMGI req that should get pended
  LteRrcSendeMBMSDeactivateReqForService1();

  TF_MSG("IRAT Integration: Send response from target RAT");
  LteRrcTestPlmnSearchSendResponseFromTargetRAT(LTE_RRC_TEST_IRAT_W);

  // Since the IRAT PLMN search failed, LTE RRC should try to resume ML1
  LteRrcTestPlmnSearchVerifyReqToResume();

  // Simulate ML1 resume success!!
  LteRrcTestPlmnSearchSendML1ResumeCnf(E_SUCCESS);

  LteRrcTestPlmnSearchFromLteVerifySkipReq();

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSDisableDuringIRATBPLMNSrch__Test()
{

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Send an enable / Activate TMGI req
  LteRrceMBMSEnable__Test();

  // Activate a service
  LteRrcSendeMBMSActivateReqForService1();

  // After LTE stack is resumed, Activate TMGI req should be handled
  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  LteRrcTestPlmnSearchStart__Test();
  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_LTE);

  // Verify Intra-LTE PLMN search
  LteRrcTestToLteCommonSendSIB1(LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestToLteCommonVerifyBPLMNCellReq(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCellCnf(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCompleteInd(LTE_CPHY_BPLMN_ALL_DONE);

  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_IRAT);

  // Send time available indication from ML1
  LteRrcTestPlmnSearchFromLteSendTimeAvailInd();

  // Verify that LTE stack has been suspended
  TF_MSG("IRAT Integration: Verify request to suspend");
  LteRrcTestPlmnSearchVerifyReqToSuspend();

  // Send suspend confirmation.
  TF_MSG("IRAT Integration: Verifying Suspend request to ML1");
  LteRrcTestPlmnSearchSendML1SuspendCnf();

  // Wait for IRAT PLMN Search to be sent to W stack
  TF_MSG("IRAT Integration: Verify request to target RAT");
  LteRrcTestPlmnSearchVerifyReqToTargetRAT(LTE_RRC_TEST_IRAT_W);

  /* At this point, send a Disable req to RRC that should get pended */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");
  lte_rrc_utf_wait_for_done();

  TF_MSG("IRAT Integration: Send response from target RAT");
  LteRrcTestPlmnSearchSendResponseFromTargetRAT(LTE_RRC_TEST_IRAT_W);

  // Since the IRAT PLMN search failed, LTE RRC should try to resume ML1
  LteRrcTestPlmnSearchVerifyReqToResume();

  // Simulate ML1 resume success!!
  LteRrcTestPlmnSearchSendML1ResumeCnf(E_SUCCESS);

  LteRrcTestPlmnSearchFromLteVerifySkipReq();

  LteRrcTestMTCHAndMCCHReleaseArea0PMCH1LC2();

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_OUT_OF_COVERAGE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // ---------------------------------------------
  // We expect LTE_RRC_EMBMS_STATUS_CHANGE_IND
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSDeactivateDisableDuringIRATBPLMNSrch__Test()
{

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_req_s act_tmgi_req;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Send an enable / Activate TMGI req
  LteRrceMBMSEnable__Test();

  // Activate a service
  LteRrcSendeMBMSActivateReqForService1();

  // After LTE stack is resumed, Activate TMGI req should be handled
  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  LteRrcTestPlmnSearchStart__Test();
  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_LTE);

  // Verify Intra-LTE PLMN search
  LteRrcTestToLteCommonSendSIB1(LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestToLteCommonVerifyBPLMNCellReq(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCellCnf(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCompleteInd(LTE_CPHY_BPLMN_ALL_DONE);

  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_IRAT);

  // Send time available indication from ML1
  LteRrcTestPlmnSearchFromLteSendTimeAvailInd();

  // Verify that LTE stack has been suspended
  TF_MSG("IRAT Integration: Verify request to suspend");
  LteRrcTestPlmnSearchVerifyReqToSuspend();

  // Send suspend confirmation.
  TF_MSG("IRAT Integration: Verifying Suspend request to ML1");
  LteRrcTestPlmnSearchSendML1SuspendCnf();

  // Wait for IRAT PLMN Search to be sent to W stack
  TF_MSG("IRAT Integration: Verify request to target RAT");
  LteRrcTestPlmnSearchVerifyReqToTargetRAT(LTE_RRC_TEST_IRAT_W);

  // Send a Deactivate TMGI req that should get pended
  LteRrcSendeMBMSDeactivateReqForService1();

  /* At this point, send a Disable req to RRC that should get pended */
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");
  lte_rrc_utf_wait_for_done();

  TF_MSG("IRAT Integration: Send response from target RAT");
  LteRrcTestPlmnSearchSendResponseFromTargetRAT(LTE_RRC_TEST_IRAT_W);

  // Since the IRAT PLMN search failed, LTE RRC should try to resume ML1
  LteRrcTestPlmnSearchVerifyReqToResume();

  // Simulate ML1 resume success!!
  LteRrcTestPlmnSearchSendML1ResumeCnf(E_SUCCESS);

  LteRrcTestPlmnSearchFromLteVerifySkipReq();

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect LTE_RRC_EMBMS_COVERAGE_STATE_IND
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // ---------------------------------------------
  // We expect LTE_RRC_EMBMS_STATUS_CHANGE_IND
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}


void LteRrcTesteMBMSAvailTMGIReqDuringIRATBPLMNSrch__Test()
{

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_avail_tmgi_list_req_s avail_tmgi_req;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  LteRrcTestPlmnSearchStart__Test();
  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_LTE);

  // Verify Intra-LTE PLMN search
  LteRrcTestToLteCommonSendSIB1(LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestToLteCommonVerifyBPLMNCellReq(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCellCnf(LTE_RRC_TEST_CELL_2);
  LteRrcTestToLteCommonSendBPLMNCompleteInd(LTE_CPHY_BPLMN_ALL_DONE);

  LteRrcTestPlmnSearchFromLteVerifyStartReq(LTE_CPHY_BPLMN_TYPE_LTE_IRAT);

  // Send time available indication from ML1
  LteRrcTestPlmnSearchFromLteSendTimeAvailInd();

  // Verify that LTE stack has been suspended
  TF_MSG("IRAT Integration: Verify request to suspend");
  LteRrcTestPlmnSearchVerifyReqToSuspend();

  // Send suspend confirmation.
  TF_MSG("IRAT Integration: Verifying Suspend request to ML1");
  LteRrcTestPlmnSearchSendML1SuspendCnf();

  // Wait for IRAT PLMN Search to be sent to W stack
  TF_MSG("IRAT Integration: Verify request to target RAT");
  LteRrcTestPlmnSearchVerifyReqToTargetRAT(LTE_RRC_TEST_IRAT_W);

  // Send an enable / Available TMGI req
  LteRrceMBMSEnable__Test();

  /* Send avail tmgi list req */
  lte_rrc_init_default_hdr(&avail_tmgi_req.msg_hdr, LTE_RRC_EMBMS_AVAIL_TMGI_LIST_REQ);
  status = msgr_send(&avail_tmgi_req.msg_hdr, sizeof(avail_tmgi_req));
  lte_rrc_utf_wait_for_done();

  TF_MSG("IRAT Integration: Send response from target RAT");
  LteRrcTestPlmnSearchSendResponseFromTargetRAT(LTE_RRC_TEST_IRAT_W);

  // Since the IRAT PLMN search failed, LTE RRC should try to resume ML1
  LteRrcTestPlmnSearchVerifyReqToResume();

  // Simulate ML1 resume success!!
  LteRrcTestPlmnSearchSendML1ResumeCnf(E_SUCCESS);

  LteRrcTestPlmnSearchFromLteVerifySkipReq();

  // After LTE stack is resumed, Available TMGI req should be handled
  LteRrcTestMCCHSetup();

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  LteRrcTestMCCHRelease(0);

  /* We expect avail tmgi list ind */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(avail_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
  TF_ASSERT(avail_tmgi_ind_ptr->num_available_embms_sessions == 2);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTestEMBMSDuringRedirFromLteToDoSuccess__Test
(
   void
)
{
    lte_rrc_deactivate_req_s deactivate_req;
    lte_rrc_deactivate_cnf_s *deactivate_cnf;
    lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
    lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
    lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

    uint32 buf_len;
    lte_errno_e status;

    // ---------------------------------------------

    // Prepare deactivate_req to send to RRC
    lte_rrc_init_default_hdr(&deactivate_req.msg_hdr, LTE_RRC_DEACTIVATE_REQ);
    deactivate_req.deactivate_reason = SYS_STOP_MODE_REASON_IRAT;

    // Send deactivate_req to RRC
    status = msgr_send(&deactivate_req.msg_hdr, sizeof(lte_rrc_deactivate_req_s));
    TF_ASSERT(status == E_SUCCESS);

    lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

    lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
    TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
    TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
    TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_LTE_STOPPED);
    TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

    /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
    lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
    TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
    TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);
    TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

    lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
    TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
    TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
    TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

    // We expect a deactivate_cnf message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&deactivate_cnf, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_rrc_deactivate_cnf_s));
    TF_ASSERT(deactivate_cnf->msg_hdr.id == LTE_RRC_DEACTIVATE_CNF);

    // Make sure RRC does not throw any more messages
    lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTestEMBMSConfigReqDuringConnRelease__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_rrc_conn_abort_req_s conn_abort_req;
  lte_rrc_conn_rel_ind_s *conn_rel_ind;

  lte_cphy_con_release_req_s *cphy_conn_rel_req;
  lte_cphy_con_release_cnf_s cphy_conn_rel_cnf;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_access_abort_req_msg_s *mac_access_abort_req;
  lte_mac_access_abort_cnf_msg_s mac_access_abort_cnf;

  lte_pdcpul_recfg_prep_req_msg_s *pdcpul_prep_req;
  lte_pdcpul_recfg_prep_cnf_msg_s pdcpul_prep_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rlcul_cfg_req_s *rlcul_cfg_req;
  lte_rlc_cfg_cnf_s rlcul_cfg_cnf;

  lte_pdcpul_cfg_req_msg_s *pdcpul_cfg_req;
  lte_pdcpul_cfg_cnf_msg_s pdcpul_cfg_cnf;

  lte_pdcpdl_cfg_req_msg_s *pdcpdl_cfg_req;
  lte_pdcpdl_cfg_cnf_msg_s pdcpdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  lte_rrc_csp_test_set_max_num_acq_retries(1);

  /* Send Conn Abort Req to RRC*/
  lte_rrc_init_default_hdr(&conn_abort_req.msg_hdr, LTE_RRC_CONN_ABORT_REQ);
  conn_abort_req.cause = LTE_RRC_CONN_ABORT_CAUSE_NORMAL;
  conn_abort_req.earfcn = cell[cell_index].earfcn;
  conn_abort_req.phy_cell_id = cell[cell_index].phys_cell_id;
  conn_abort_req.cell_barring_is_reqd = FALSE;
  // Send conn_abort_req to RRC
  status = msgr_send(&conn_abort_req.msg_hdr, sizeof(conn_abort_req));
  TF_ASSERT(status == E_SUCCESS);

  // Let RRC handle Conn Abort Request
  lte_rrc_utf_wait_for_done();

  //Connection Release processing
  // We expect a pdcpul_recfg_prep_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_prep_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_recfg_prep_req_msg_s));
  TF_ASSERT(pdcpul_prep_req->hdr.id == LTE_PDCPUL_RECFG_PREP_REQ);

  TF_ASSERT(pdcpul_prep_req->cfg_reason == LTE_L2_CFG_RELEASE);
  TF_ASSERT(pdcpul_prep_req->num_released_rb == 3);
  TF_ASSERT(pdcpul_prep_req->released_rb_cfg_idx[0] == 33);
  TF_ASSERT(pdcpul_prep_req->released_rb_cfg_idx[1] == 34);
  TF_ASSERT(pdcpul_prep_req->released_rb_cfg_idx[2] == 3);

  // Prepare pdcpul_recfg_prep_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_prep_cnf.hdr, LTE_PDCPUL_RECFG_PREP_CNF);

  pdcpul_prep_cnf.status = E_SUCCESS;

  // Send pdcpul_prep_req_cnf to RRC
  status = msgr_send(&pdcpul_prep_cnf.hdr, sizeof(pdcpul_prep_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the ACCESS_ABORT_REQ to MAC */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_access_abort_req,&buf_len);
  /* Make sure the ACCESS_ABORT_REQ is valid */
  TF_ASSERT(sizeof(lte_mac_access_abort_req_msg_s) == buf_len);

  /* Send ACCESS_ABORT_CNF to Config */
  /* Setting the header for internal RRC messages */
  lte_rrc_init_default_hdr(&mac_access_abort_cnf.hdr,LTE_MAC_ACCESS_ABORT_CNF);
  mac_access_abort_cnf.status = E_SUCCESS;
  status = msgr_send(&mac_access_abort_cnf.hdr, sizeof(mac_access_abort_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a cphy_con_release_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_conn_rel_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_con_release_req_s));
  TF_ASSERT(cphy_conn_rel_req->msgr_hdr.id == LTE_CPHY_CON_RELEASE_REQ);
  TF_ASSERT(cphy_conn_rel_req->cell_info.phy_cell_id ==
            cell[cell_index].phys_cell_id);
  TF_ASSERT(cphy_conn_rel_req->cell_info.dl_cell_frequency ==
            cell[cell_index].earfcn);

  // Send MCCH PDU
  LteRrcTestSendMCCHPDUAfterOOSForArea0();
  lte_rrc_utf_wait_for_done();

  // Prepare cphy_con_release_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_conn_rel_cnf.msgr_hdr, LTE_CPHY_CON_RELEASE_CNF);

  cphy_conn_rel_cnf.status = E_SUCCESS;

  // Send cphy_con_release_cnf to RRC
  status = msgr_send(&cphy_conn_rel_cnf.msgr_hdr, sizeof(cphy_conn_rel_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RELEASE);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_LC_INFO_CFG_BM);

  TF_ASSERT(mac_cfg_req->cfg_data.lc_info_cfg.num_deleted_lc == 3);
  TF_ASSERT(mac_cfg_req->cfg_data.lc_info_cfg.num_addmod_lc == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.lc_info_cfg.deleted_lc_list[0] == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.lc_info_cfg.deleted_lc_list[1] == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.lc_info_cfg.deleted_lc_list[2] == 10);

   // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a rlcdl_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);

  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE);
  TF_ASSERT(rlcdl_cfg_req->num_released_rb == 3);
  TF_ASSERT(rlcdl_cfg_req->num_modified_rb == 0);
  TF_ASSERT(rlcdl_cfg_req->released_rb_cfg_idx[0] == 33);
  TF_ASSERT(rlcdl_cfg_req->released_rb_cfg_idx[1] == 34);
  TF_ASSERT(rlcdl_cfg_req->released_rb_cfg_idx[2] == 3);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------

  // We expect a rlcul_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcul_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcul_cfg_req_s));
  TF_ASSERT(rlcul_cfg_req->msg_hdr.id == LTE_RLCUL_CFG_REQ);

  TF_ASSERT(rlcul_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE);
  TF_ASSERT(rlcul_cfg_req->num_released_rb == 3);
  TF_ASSERT(rlcul_cfg_req->num_modified_rb == 0);
  TF_ASSERT(rlcul_cfg_req->released_rb_cfg_idx[0] == 33);
  TF_ASSERT(rlcul_cfg_req->released_rb_cfg_idx[1] == 34);
  TF_ASSERT(rlcul_cfg_req->released_rb_cfg_idx[2] == 3);

  // Prepare rlcul_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcul_cfg_cnf.msg_hdr, LTE_RLCUL_CFG_CNF);

  rlcul_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcul_cfg_cnf to RRC
  status = msgr_send(&rlcul_cfg_cnf.msg_hdr, sizeof(rlcul_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a pdcpdl_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpdl_cfg_req_msg_s));
  TF_ASSERT(pdcpdl_cfg_req->hdr.id == LTE_PDCPDL_CFG_REQ);

  TF_ASSERT(pdcpdl_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE);
  TF_ASSERT(pdcpdl_cfg_req->num_released_rb == 3);
  TF_ASSERT(pdcpdl_cfg_req->num_add_modified_rb == 0);
  TF_ASSERT(pdcpdl_cfg_req->released_rb_cfg_idx[0] == 33);
  TF_ASSERT(pdcpdl_cfg_req->released_rb_cfg_idx[1] == 34);
  TF_ASSERT(pdcpdl_cfg_req->released_rb_cfg_idx[2] == 3);

  // Prepare pdcpdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpdl_cfg_cnf.hdr, LTE_PDCPDL_CFG_CNF);

  pdcpdl_cfg_cnf.status = E_SUCCESS;

  // Send pdcpdl_cfg_cnf to RRC
  status = msgr_send(&pdcpdl_cfg_cnf.hdr, sizeof(pdcpdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a pdcpul_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_cfg_req_msg_s));
  TF_ASSERT(pdcpul_cfg_req->hdr.id == LTE_PDCPUL_CFG_REQ);

  TF_ASSERT(pdcpul_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE);
  TF_ASSERT(pdcpul_cfg_req->num_released_rb == 3);
  TF_ASSERT(pdcpul_cfg_req->num_add_modified_rb == 0);
  TF_ASSERT(pdcpul_cfg_req->released_rb_cfg_idx[0] == 33);
  TF_ASSERT(pdcpul_cfg_req->released_rb_cfg_idx[1] == 34);
  TF_ASSERT(pdcpul_cfg_req->released_rb_cfg_idx[2] == 3);

  // Prepare pdcpul_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_cfg_cnf.hdr, LTE_PDCPUL_CFG_CNF);

  pdcpul_cfg_cnf.status = E_SUCCESS;

  // Send pdcpul_cfg_cnf to RRC
  status = msgr_send(&pdcpul_cfg_cnf.hdr, sizeof(pdcpul_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a conn_rel_ind message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&conn_rel_ind, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rrc_conn_rel_ind_s));
  TF_ASSERT(conn_rel_ind->msg_hdr.id == LTE_RRC_CONN_REL_IND);

  TF_ASSERT(conn_rel_ind->rel_reason == LTE_RRC_CONN_REL_ABORTED);
  TF_ASSERT(conn_rel_ind->load_balancing_tau_is_reqd == FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigConnToIdleGeneric__Test(cell_index, group_index);

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC to monitor MCCH for Area 1 in ALL_OCCASIONS
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
              cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  // Send Deactivate for Service 1
  LteRrcSendeMBMSDeactivateReqForService1();

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
             LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_NO_MONITOR);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

}

void LteRrcTestSibCollectionPriorToCampingEMBMSForConnToIdleTrans__Test(lte_rrc_test_cell_e cell_index,
                                                      lte_rrc_test_sib_update_e group_index)
{
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;
  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_rrc_service_ind_s *service_ind;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib2_13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib2_13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */

  uint32 buf_len;
  lte_errno_e status;

  uint8 *sib1_ptr = NULL, *sib3_ptr = NULL;
  uint8 *sib2_13_ptr = NULL;

  uint16 sib1_size, sib3_size;
  uint16 sib2_13_size;

  lte_rrc_osys_BCCH_DL_SCH_Message *sib1_msg_ptr;
  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;
  boolean band_is_valid;

  dsm_item_type *dsm_ptr_sib5 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib5;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib5_ptr = NULL;
  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;
  uint16 sib5_size, sib13_size, sib15_size;

  lte_rrc_csp_test_set_max_num_acq_retries(1);

  // ---------------------------------------------

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask ==
            (LTE_CPHY_SIB_MASK_BIT_MIB | LTE_CPHY_SIB_MASK_BIT_SIB1));

  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == LTE_CPHY_NULL_SFN);

  // Ignoring next_mod_prd_sib_mask, si_window_length, num_si_msgs, si_msg_info

  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_100;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;

  mib_ind.freq = LTE_RRC_TEST_EARFCN;
  mib_ind.phy_cell_id = LTE_RRC_TEST_PHY_CELL_ID;

  mib_ind.freq = cell[cell_index].earfcn;
  mib_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  mib_ind.sfn = 1;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1));

  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == 64);

  TF_ASSERT(sib_sched_req->num_si_msgs == 0);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[group_index])->sib1_size;

  sib1_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message *)
  lte_rrc_osys_asn1_decode_pdu(sib1_ptr,
                               sib1_size,
                               BCCH_DL_SCH_Message,
                               &decode_status);


  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->cellAccessRelatedInfo.
    csg_Indication = 0;
  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->freqBandIndicator = (lte_rrc_get_band_from_dl_earfcn(cell[cell_index].earfcn,&band_is_valid))+1;

  encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib1_msg_ptr,
                                               &encoded_pdu,
                                               BCCH_DL_SCH_Message);
  sib1_ptr = encoded_pdu.value;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  // Telling L1 to stop sending any more si msgs for this mod period
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // Prepare bcch_dl_data_ind to send SI with SIB2 and SIB13 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib2_13_ptr = (cell[cell_index].sibs_ptr[group_index])->sib2_ptr;
  sib2_13_size =(cell[cell_index].sibs_ptr[group_index])->sib2_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib2_13, sib2_13_ptr,
                         sib2_13_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib2_13_size);

  TF_ASSERT(dsm_ptr_sib2_13 != NULL);

  att_ptr_sib2_13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib2_13, dsm_ptr_sib2_13);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 3;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  // Telling L1 to stop sending any more si msgs for this mod period
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // ---------------------------------------------
  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);
  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[cell_index].phys_cell_id);
  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);
  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);

    // We expect a common_cfg_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
              cell[cell_index].phys_cell_id);
    TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
              cell[cell_index].earfcn);
    // Prepare common_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);
    common_cfg_cnf.status = E_SUCCESS;
    common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;
    // Send common_cfg_cnf to RRC
    status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);

    // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);

  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);
  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);
  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = LTE_CPHY_DEDICATED_CFG_CURRENT_VALID_MASK_BITS;
  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);
  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);
  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);
  // We expect a sib_sched_req message from RRC
  // Telling L1 to stop sending any more si msgs for this mod period
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);
  // We expect a service_ind message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);

}

void LteRrcTestEMBMSDisabledDuringConnToIdleTransistion__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_rrc_conn_abort_req_s conn_abort_req;
  lte_rrc_conn_rel_ind_s *conn_rel_ind;

  lte_rrc_embms_disable_req_s disable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_req_s deact_tmgi_req;

  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;

  lte_cphy_con_release_req_s *cphy_conn_rel_req;
  lte_cphy_con_release_cnf_s cphy_conn_rel_cnf;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;

  lte_mac_access_abort_req_msg_s *mac_access_abort_req;
  lte_mac_access_abort_cnf_msg_s mac_access_abort_cnf;

  lte_pdcpul_recfg_prep_req_msg_s *pdcpul_prep_req;
  lte_pdcpul_recfg_prep_cnf_msg_s pdcpul_prep_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rrc_service_ind_s *service_ind;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rlcul_cfg_req_s *rlcul_cfg_req;
  lte_rlc_cfg_cnf_s rlcul_cfg_cnf;

  lte_pdcpul_cfg_req_msg_s *pdcpul_cfg_req;
  lte_pdcpul_cfg_cnf_msg_s pdcpul_cfg_cnf;

  lte_pdcpdl_cfg_req_msg_s *pdcpdl_cfg_req;
  lte_pdcpdl_cfg_cnf_msg_s pdcpdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  lte_rrc_csp_test_set_max_num_acq_retries(1);


  /* Send Conn Abort Req to RRC*/
  lte_rrc_init_default_hdr(&conn_abort_req.msg_hdr, LTE_RRC_CONN_ABORT_REQ);
  conn_abort_req.cause = LTE_RRC_CONN_ABORT_CAUSE_NORMAL;
  conn_abort_req.earfcn = cell[cell_index].earfcn;
  conn_abort_req.phy_cell_id = cell[cell_index].phys_cell_id;
  conn_abort_req.cell_barring_is_reqd = FALSE;
  // Send conn_abort_req to RRC
  status = msgr_send(&conn_abort_req.msg_hdr, sizeof(conn_abort_req));
  TF_ASSERT(status == E_SUCCESS);

  // Let RRC handle Conn Abort Request
  lte_rrc_utf_wait_for_done();

  //Connection Release processing
  // We expect a pdcpul_recfg_prep_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_prep_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_recfg_prep_req_msg_s));
  TF_ASSERT(pdcpul_prep_req->hdr.id == LTE_PDCPUL_RECFG_PREP_REQ);

  TF_ASSERT(pdcpul_prep_req->cfg_reason == LTE_L2_CFG_RELEASE);
  TF_ASSERT(pdcpul_prep_req->num_released_rb == 3);
  TF_ASSERT(pdcpul_prep_req->released_rb_cfg_idx[0] == 33);
  TF_ASSERT(pdcpul_prep_req->released_rb_cfg_idx[1] == 34);
  TF_ASSERT(pdcpul_prep_req->released_rb_cfg_idx[2] == 3);

  // Prepare pdcpul_recfg_prep_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_prep_cnf.hdr, LTE_PDCPUL_RECFG_PREP_CNF);

  pdcpul_prep_cnf.status = E_SUCCESS;

  // Send pdcpul_prep_req_cnf to RRC
  status = msgr_send(&pdcpul_prep_cnf.hdr, sizeof(pdcpul_prep_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the ACCESS_ABORT_REQ to MAC */
  lte_rrc_utf_get_next_ext_msg((byte **)&mac_access_abort_req,&buf_len);
  /* Make sure the ACCESS_ABORT_REQ is valid */
  TF_ASSERT(sizeof(lte_mac_access_abort_req_msg_s) == buf_len);

  /* Send ACCESS_ABORT_CNF to Config */
  /* Setting the header for internal RRC messages */
  lte_rrc_init_default_hdr(&mac_access_abort_cnf.hdr,LTE_MAC_ACCESS_ABORT_CNF);
  mac_access_abort_cnf.status = E_SUCCESS;
  status = msgr_send(&mac_access_abort_cnf.hdr, sizeof(mac_access_abort_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a cphy_con_release_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_conn_rel_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_con_release_req_s));
  TF_ASSERT(cphy_conn_rel_req->msgr_hdr.id == LTE_CPHY_CON_RELEASE_REQ);
  TF_ASSERT(cphy_conn_rel_req->cell_info.phy_cell_id ==
            cell[cell_index].phys_cell_id);
  TF_ASSERT(cphy_conn_rel_req->cell_info.dl_cell_frequency ==
            cell[cell_index].earfcn);

  lte_rrc_utf_wait_for_done();

  // Prepare cphy_con_release_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_conn_rel_cnf.msgr_hdr, LTE_CPHY_CON_RELEASE_CNF);

  cphy_conn_rel_cnf.status = E_SUCCESS;

  // Send cphy_con_release_cnf to RRC
  status = msgr_send(&cphy_conn_rel_cnf.msgr_hdr, sizeof(cphy_conn_rel_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RELEASE);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_LC_INFO_CFG_BM);

  TF_ASSERT(mac_cfg_req->cfg_data.lc_info_cfg.num_deleted_lc == 3);
  TF_ASSERT(mac_cfg_req->cfg_data.lc_info_cfg.num_addmod_lc == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.lc_info_cfg.deleted_lc_list[0] == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.lc_info_cfg.deleted_lc_list[1] == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.lc_info_cfg.deleted_lc_list[2] == 10);

   // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a rlcdl_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);

  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE);
  TF_ASSERT(rlcdl_cfg_req->num_released_rb == 3);
  TF_ASSERT(rlcdl_cfg_req->num_modified_rb == 0);
  TF_ASSERT(rlcdl_cfg_req->released_rb_cfg_idx[0] == 33);
  TF_ASSERT(rlcdl_cfg_req->released_rb_cfg_idx[1] == 34);
  TF_ASSERT(rlcdl_cfg_req->released_rb_cfg_idx[2] == 3);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------

  // We expect a rlcul_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcul_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcul_cfg_req_s));
  TF_ASSERT(rlcul_cfg_req->msg_hdr.id == LTE_RLCUL_CFG_REQ);

  TF_ASSERT(rlcul_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE);
  TF_ASSERT(rlcul_cfg_req->num_released_rb == 3);
  TF_ASSERT(rlcul_cfg_req->num_modified_rb == 0);
  TF_ASSERT(rlcul_cfg_req->released_rb_cfg_idx[0] == 33);
  TF_ASSERT(rlcul_cfg_req->released_rb_cfg_idx[1] == 34);
  TF_ASSERT(rlcul_cfg_req->released_rb_cfg_idx[2] == 3);

  // Prepare rlcul_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcul_cfg_cnf.msg_hdr, LTE_RLCUL_CFG_CNF);

  rlcul_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcul_cfg_cnf to RRC
  status = msgr_send(&rlcul_cfg_cnf.msg_hdr, sizeof(rlcul_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a pdcpdl_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpdl_cfg_req_msg_s));
  TF_ASSERT(pdcpdl_cfg_req->hdr.id == LTE_PDCPDL_CFG_REQ);

  TF_ASSERT(pdcpdl_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE);
  TF_ASSERT(pdcpdl_cfg_req->num_released_rb == 3);
  TF_ASSERT(pdcpdl_cfg_req->num_add_modified_rb == 0);
  TF_ASSERT(pdcpdl_cfg_req->released_rb_cfg_idx[0] == 33);
  TF_ASSERT(pdcpdl_cfg_req->released_rb_cfg_idx[1] == 34);
  TF_ASSERT(pdcpdl_cfg_req->released_rb_cfg_idx[2] == 3);

  // Prepare pdcpdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpdl_cfg_cnf.hdr, LTE_PDCPDL_CFG_CNF);

  pdcpdl_cfg_cnf.status = E_SUCCESS;

  // Send pdcpdl_cfg_cnf to RRC
  status = msgr_send(&pdcpdl_cfg_cnf.hdr, sizeof(pdcpdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a pdcpul_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcpul_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_pdcpul_cfg_req_msg_s));
  TF_ASSERT(pdcpul_cfg_req->hdr.id == LTE_PDCPUL_CFG_REQ);

  TF_ASSERT(pdcpul_cfg_req->cfg_reason == LTE_L2_CFG_RELEASE);
  TF_ASSERT(pdcpul_cfg_req->num_released_rb == 3);
  TF_ASSERT(pdcpul_cfg_req->num_add_modified_rb == 0);
  TF_ASSERT(pdcpul_cfg_req->released_rb_cfg_idx[0] == 33);
  TF_ASSERT(pdcpul_cfg_req->released_rb_cfg_idx[1] == 34);
  TF_ASSERT(pdcpul_cfg_req->released_rb_cfg_idx[2] == 3);

  // Prepare pdcpul_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcpul_cfg_cnf.hdr, LTE_PDCPUL_CFG_CNF);

  pdcpul_cfg_cnf.status = E_SUCCESS;

  // Send pdcpul_cfg_cnf to RRC
  status = msgr_send(&pdcpul_cfg_cnf.hdr, sizeof(pdcpul_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a conn_rel_ind message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&conn_rel_ind, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rrc_conn_rel_ind_s));
  TF_ASSERT(conn_rel_ind->msg_hdr.id == LTE_RRC_CONN_REL_IND);

  TF_ASSERT(conn_rel_ind->rel_reason == LTE_RRC_CONN_REL_ABORTED);
  TF_ASSERT(conn_rel_ind->load_balancing_tau_is_reqd == FALSE);

  /* At this point sent Deactivate TMGI REQ*/
  lte_rrc_init_default_hdr(&deact_tmgi_req.msg_hdr, LTE_RRC_EMBMS_DEACT_TMGI_REQ);
  /* Fill in the session info */
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[0] = 0;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[1] = 0xF1;
  deact_tmgi_req.session_info.tmgi.plmn_id.identity[2] = 0x10;
  deact_tmgi_req.session_info.tmgi.service_id[0] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[1] = 0;
  deact_tmgi_req.session_info.tmgi.service_id[2] = 0;
  deact_tmgi_req.session_info.session_id_present = TRUE;
  deact_tmgi_req.session_info.session_id = 0;
  status = msgr_send(&deact_tmgi_req.msg_hdr, sizeof(deact_tmgi_req));
  TF_ASSERT(status == E_SUCCESS);
  TF_MSG("ESMGR: Sent LTE_RRC_EMBMS_DEACT_TMGI_REQ \n");
  lte_rrc_utf_wait_for_done();

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[cell_index].phys_cell_id;

  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = (LTE_CPHY_COMMON_CFG_MASK_BIT_UL_FREQ_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_PDSCH_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_PUCCH_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_PUSCH_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_SRS_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_UL_POWER_CTRL |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_UL_CYCLIC_PREFIX_LENGTH);

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

  //Setting the header for  RRC messages
  lte_rrc_init_default_hdr(&disable_req.msg_hdr, LTE_RRC_EMBMS_DISABLE_REQ);
  status = msgr_send(&disable_req.msg_hdr, sizeof(disable_req));
  TF_MSG("Sent LTE_RRC_EMBMS_DISABLE_REQ");
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req != NULL);
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = (LTE_CPHY_COMMON_CFG_MASK_BIT_UL_FREQ_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_PDSCH_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_PUCCH_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_PUSCH_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_SRS_CFG |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_UL_POWER_CTRL |
                                        LTE_CPHY_COMMON_CFG_MASK_BIT_UL_CYCLIC_PREFIX_LENGTH);

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_UNKNOWN);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == FALSE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req != NULL);
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);
  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);
  mac_cfg_cnf.status = E_SUCCESS;
  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req != NULL);
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);
  // --------------------------------------------
  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

   // We expect a service_ind message from RRC
   lte_rrc_utf_get_next_ext_msg((byte**)&service_ind, &buf_len);
   //TF_ASSERT(service_ind->trans_id == 1);
   TF_ASSERT(service_ind != NULL);
   TF_ASSERT(service_ind->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);
   TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
   TF_ASSERT(service_ind->msg_hdr.id == LTE_RRC_SERVICE_IND);

}



void LteRrcTestDeactivateAfterCPHYAbort__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rlcul_cfg_req_s *rlcul_cfg_req;
  lte_rlc_cfg_cnf_s rlcul_cfg_cnf;

  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_cnf_s *deact_tmgi_cnf_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Send Deactivate for Service 1
  LteRrcSendeMBMSDeactivateReqForService1();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s)) ;
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // No req should be sent to ML1 since it is aborted already
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 0);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_DEACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_CNF);
  TF_ASSERT(deact_tmgi_cnf_ptr->deact_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(deact_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);

}

void LteRrcTesteMBMSActWithSAIOnServing__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_sib_update_e group_index,
  boolean test_deactivate
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;

  lte_cphy_mbsfn_signal_strength_req_s *cphy_sig_strgth_req_ptr = NULL;
  lte_cphy_mbsfn_signal_strength_cnf_s cphy_sig_strgth_cnf;
  lte_rrc_embms_signal_strength_report_req_s sig_strgth_rep_req;
  lte_rrc_embms_signal_strength_report_cnf_s *sig_strgth_rep_cnf_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib13_size, sib15_size;
  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5));

  /* Send Activate req with SAI for service 0 */
  LteRrcSendeMBMSActivateReqWithSAIForService(0, 0, 0, 3);

  // We expect meas sm to have thrown the idle meas cfg req to bump priority of serving freq
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[src_cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_100;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;

  mib_ind.freq = cell[src_cell_index].earfcn;
  mib_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  mib_ind.sfn = 15;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  /* Send avail tmgi list req */
  lte_rrc_init_default_hdr(&sig_strgth_rep_req.msg_hdr, LTE_RRC_EMBMS_SIGNAL_STRENGTH_REQ);
  sig_strgth_rep_req.debug_trace_id = LTE_RRC_ESMGR_UNUSED_DEBUG_TRACE_ID;
  status = msgr_send(&sig_strgth_rep_req.msg_hdr, sizeof(sig_strgth_rep_req));
  lte_rrc_utf_wait_for_done();
  lte_rrc_utf_check_no_more_msgs();

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB13 to RRC

  sib13_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib13_ptr;
  sib13_size = (cell[src_cell_index].sibs_ptr[group_index])->sib13_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
                         sib13_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib13_size);
  TF_ASSERT(dsm_ptr_sib13 != NULL);

  att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB15 to RRC

  sib15_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib15_ptr;
  sib15_size = (cell[src_cell_index].sibs_ptr[group_index])->sib15_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_sig_strgth_req_ptr, &buf_len);
  TF_ASSERT(cphy_sig_strgth_req_ptr->msgr_hdr.id == LTE_CPHY_MBSFN_SIGNAL_STRENGTH_REQ);
  TF_ASSERT(cphy_sig_strgth_req_ptr->snr_param_present == TRUE);
  TF_ASSERT(cphy_sig_strgth_req_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(cphy_sig_strgth_req_ptr->snr_param[0].area_id == 0);
  TF_ASSERT(cphy_sig_strgth_req_ptr->snr_param[0].non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(cphy_sig_strgth_req_ptr->snr_param[0].mcs == LTE_L1_MBSFN_SIGNALLING_MCS_N7);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cphy_sig_strgth_cnf.msgr_hdr, LTE_CPHY_MBSFN_SIGNAL_STRENGTH_CNF);
  cphy_sig_strgth_cnf.num_mbsfn_areas = 1;
  cphy_sig_strgth_cnf.mbsfn_area_signal_strength[0].area_id = 0;
  cphy_sig_strgth_cnf.mbsfn_area_signal_strength[0].snr = 5;
  cphy_sig_strgth_cnf.mbsfn_area_signal_strength[0].signal_level = 2;
  cphy_sig_strgth_cnf.mbsfn_area_signal_strength[0].excess_snr = 5;
  status = msgr_send(&cphy_sig_strgth_cnf.msgr_hdr, sizeof(cphy_sig_strgth_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_SIGNAL_STRENGTH_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&sig_strgth_rep_cnf_ptr,&buf_len);
  TF_ASSERT(sig_strgth_rep_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_SIGNAL_STRENGTH_CNF);
  TF_ASSERT(sig_strgth_rep_cnf_ptr->num_mbsfn_areas == 1);

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(0, 1, 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  if (test_deactivate)
  {
    // Verify deactivation of service 0
    LteRrcTesteMBMSDeactService__Test(0, 0, 0, 1);

    TF_SLEEP(200);

    TF_SLEEP(5000);

    // ---------------------------------------------
    // We expect meas sm to have thrown the idle meas cfg req to bump down priority of neighbor freqs
    lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
    TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Verify cell info
    TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
    TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

    // Verify reselection common info
    TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                          LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                          LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                          LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                          LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
    TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7);
    TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
    TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
    TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6);
    TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
    TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);
    TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
    TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3);

    // Send the cnf msg back to meas
    lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
    cfg_cnf.status = E_SUCCESS;
    status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);
  }
}

void LteRrcTesteMBMSSIBCollectionAfterEnable__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib13_size, sib15_size;
  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3));

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[src_cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_100;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;

  mib_ind.freq = cell[src_cell_index].earfcn;
  mib_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  mib_ind.sfn = 15;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB13 to RRC

  sib13_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib13_ptr;
  sib13_size = (cell[src_cell_index].sibs_ptr[group_index])->sib13_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
                         sib13_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib13_size);
  TF_ASSERT(dsm_ptr_sib13 != NULL);

  att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB15 to RRC

  sib15_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib15_ptr;
  sib15_size = (cell[src_cell_index].sibs_ptr[group_index])->sib15_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

}

void LteRrcTesteMBMSActWithSAIOnNeighbor__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib13_size, sib15_size;
  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;


  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5));

  /* Send Activate req with SAI for service 2 */
  LteRrcSendeMBMSActivateReqWithSAIForService(2, 1, 3, 4);

  // We expect meas sm to have thrown the idle meas cfg req to bump priority of serving freq
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[src_cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_100;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;

  mib_ind.freq = cell[src_cell_index].earfcn;
  mib_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  mib_ind.sfn = 15;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB13 to RRC

  sib13_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib13_ptr;
  sib13_size = (cell[src_cell_index].sibs_ptr[group_index])->sib13_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
                         sib13_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib13_size);
  TF_ASSERT(dsm_ptr_sib13 != NULL);

  att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB15 to RRC

  sib15_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib15_ptr;
  sib15_size = (cell[src_cell_index].sibs_ptr[group_index])->sib15_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // MCCH should be released for the MBSFN area in source cell
  LteRrcTestMCCHRelease(0);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2));

  // Verify MTCH setup for service 2
  LteRrcTestMTCHSetup(1, 1, 3);
}

void LteRrcTesteMBMSActInVServOnNeighWhenRcvingNationalOnServ__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib13_size, sib15_size;
  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  /* Send Activate req with SAI for service 2 */
  LteRrcSendeMBMSActivateReqForInVenueService(2, 1, 3);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 2);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == LTE_MIN_MTCH_RB_ID);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].session_info.tmgi.service_id[2] == 0);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[1].mrb_id == LTE_MIN_MTCH_RB_ID);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[1].session_info.tmgi.service_id[2] == 2);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // We expect meas sm to have thrown the idle meas cfg req to bump priority of serving freq
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2));

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].lc_id == 3);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[1].rb_cfg_idx == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[1].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].area_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].lc_id == 3);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].mrb_id == 37);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}

void LteRrcTesteMBMSActInVServOnNeighWhenRcvingNationalOnServFailure__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib13_size, sib15_size;
  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  /* Send Activate req with SAI for service 2 */
  LteRrcSendeMBMSActivateReqForInVenueService(2, 1, 3);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 2);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].mrb_id == LTE_MIN_MTCH_RB_ID);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[0].session_info.tmgi.service_id[2] == 0);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[1].mrb_id == LTE_MIN_MTCH_RB_ID);
  TF_ASSERT(tmgi_list_ind_ptr->session_info[1].session_info.tmgi.service_id[2] == 2);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // We expect meas sm to have thrown the idle meas cfg req to bump priority of serving freq
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_SESSION_NOT_FOUND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSActInVServOnNeighWhenSIB13TimesoutOnNeigh__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_cphy_abort_req_s *cphy_abort_req;
  lte_cphy_abort_cnf_s cphy_abort_cnf;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_service_ind_s *service_ind;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib2 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib2;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib5 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib5;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib2_size, sib3_size, sib5_size, sib15_size;
  uint8 *sib2_ptr = NULL, *sib3_ptr = NULL, *sib5_ptr = NULL, *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (0));

  /* Send Activate req with SAI for service 0 */
  LteRrcSendeMBMSActivateReqWithSAIForService(0, 0, 1, 2);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // We expect meas sm to have thrown the idle meas cfg req to bump priority of serving freq
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[src_cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SI containing SIB2/SIB13 to RRC

  sib2_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib2_ptr;
  sib2_size = (cell[src_cell_index].sibs_ptr[group_index])->sib2_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib2, sib2_ptr,
                         sib2_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib2_size);
  TF_ASSERT(dsm_ptr_sib2 != NULL);

  att_ptr_sib2 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib2, dsm_ptr_sib2);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB15));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB15 to RRC

  sib15_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib15_ptr;
  sib15_size = (cell[src_cell_index].sibs_ptr[group_index])->sib15_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  // Verify MCCH reconfiguration
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2));


  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  /* Send Activate req with SAI for service 1 */
  LteRrcSendeMBMSActivateReqWithSAIForService(1, 1, 0, 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 2);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, TRUE);

  // Let SIB13 timeout
  TF_SLEEP(650);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC for aborting SIB reading
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[tgt_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  // ---------------------------------------------
  // We expect a cphy_abort_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_abort_req, &buf_len);

  TF_ASSERT(cphy_abort_req != NULL);
  TF_ASSERT(cphy_abort_req->msgr_hdr.id == LTE_CPHY_ABORT_REQ);

  // Prepare cphy_abort_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_abort_cnf.msgr_hdr, LTE_CPHY_ABORT_CNF);
  cphy_abort_cnf.status = E_SUCCESS;
  // Send cphy_abort_cnf to RRC
  status = msgr_send(&cphy_abort_cnf.msgr_hdr, sizeof(cphy_abort_cnf));
  LTE_ASSERT(status == E_SUCCESS);
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // ---------------------------------------------

  // We expect a service_ind message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind, &buf_len);

  TF_ASSERT(service_ind->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind->svc_status == LTE_RRC_SVC_STATUS_NOT_AVAILABLE);

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_UCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 2);

  // Send Service req
  LteRrcTestServiceRequestBandScanSuccess4__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, TRUE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);
  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC for aborting SIB reading
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Verify MCCH reconfiguration
  // We expect a common_cfg_req message from RRC for MCCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

   /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 0);

  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2));

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);
  TF_ASSERT(idle_meas_cfg_req->meas_cfg.
              requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(idle_meas_cfg_req->meas_cfg.
              disabled_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_WCDMA |
                                       LTE_CPHY_IDLE_MEAS_CFG_MASK_TDSCDMA |
                                       LTE_CPHY_IDLE_MEAS_CFG_MASK_GSM |
                                       LTE_CPHY_IDLE_MEAS_CFG_MASK_CDMA));

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSReselWithinCFLAndServiceContinuity__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib13_size, sib15_size;
  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 450, 65, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2));

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].lc_id == 3);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSReselOutsideCFLAndInVServiceDeact__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib13_size, sib15_size;
  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, TRUE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[tgt_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1));

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);


  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.
            cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
             LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            cfg_action == LTE_L1_CONFIG);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_released_mrb == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[0] == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.released_mrb_cfg_idx[1] == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_ASSERT(deact_tmgi_ind_ptr->num_tmgi_deactivated == 1);
  TF_ASSERT(deact_tmgi_ind_ptr->reason == LTE_RRC_EMBMS_DEACT_SESSION_END);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActWithSAIWhenSIB2SIB13InSameSI__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib2 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib2;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib5 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib5;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib2_size, sib3_size, sib5_size, sib15_size;
  uint8 *sib2_ptr = NULL, *sib3_ptr = NULL, *sib5_ptr = NULL, *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (0));

  /* Send Activate req with SAI for service 1 */
  LteRrcSendeMBMSActivateReqWithSAIForService(1, 1, 0, 1);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // We expect meas sm to have thrown the idle meas cfg req to bump priority of serving freq
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[src_cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SI containing SIB2/SIB13 to RRC

  sib2_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib2_ptr;
  sib2_size = (cell[src_cell_index].sibs_ptr[group_index])->sib2_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib2, sib2_ptr,
                         sib2_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib2_size);
  TF_ASSERT(dsm_ptr_sib2 != NULL);

  att_ptr_sib2 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib2, dsm_ptr_sib2);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB15));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB15 to RRC

  sib15_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib15_ptr;
  sib15_size = (cell[src_cell_index].sibs_ptr[group_index])->sib15_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  // Verify MCCH reconfiguration
  LteRrcTestMCCHSetup();

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2));

  // MCCH should be released for the MBSFN area in source cell
  LteRrcTestMCCHRelease(1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms2__Test(tgt_cell_index, group_index, TRUE, FALSE);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(0, 1, 2);
}

void LteRrcTesteMBMSActOnNeighbotInSIB15ButNotInSIB5__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib2 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib2;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib5 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib5;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib2_size, sib3_size, sib5_size, sib15_size;
  uint8 *sib2_ptr = NULL, *sib3_ptr = NULL, *sib5_ptr = NULL, *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (0));

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[src_cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SI containing SIB2/SIB13 to RRC

  sib2_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib2_ptr;
  sib2_size = (cell[src_cell_index].sibs_ptr[group_index])->sib2_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib2, sib2_ptr,
                         sib2_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib2_size);
  TF_ASSERT(dsm_ptr_sib2 != NULL);

  att_ptr_sib2 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib2, dsm_ptr_sib2);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB15));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB15 to RRC

  sib15_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib15_ptr;
  sib15_size = (cell[src_cell_index].sibs_ptr[group_index])->sib15_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  /* Send Activate req with SAI for service 1 */
  LteRrcSendeMBMSActivateReqWithSAIForService(5, 1, 5, 6);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_FREQ_CONFLICT);

  /* Send Activate req with SAI for service 1 */
  LteRrcSendeMBMSActivateReqWithSAIForService(1, 1, 0, 7);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);

  // We expect meas sm to have thrown the idle meas cfg req to bump priority of serving freq
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 5);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_0, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms3__Test(tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_0, TRUE, FALSE);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(0, 1, 2);
}

void LteRrcTesteMBMSServFreqInCFLButNoSIB13OnServCell__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;

  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib2 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib2;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib5 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib5;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib2_size, sib3_size, sib5_size, sib15_size;
  uint8 *sib2_ptr = NULL, *sib3_ptr = NULL, *sib5_ptr = NULL, *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (0));

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[src_cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB15));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB15 to RRC

  sib15_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib15_ptr;
  sib15_size = (cell[src_cell_index].sibs_ptr[group_index])->sib15_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  /* Send Activate req with SAI for service 1 */
  LteRrcSendeMBMSActivateReqWithSAIForService(1, 1, 0, 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);

  // We expect meas sm to have thrown the idle meas cfg req to bump priority of serving freq
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_0, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_0, TRUE, FALSE);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 250, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);
  TF_ASSERT(idle_meas_cfg_req->meas_cfg.
            requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ  |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(idle_meas_cfg_req->meas_cfg.
            disabled_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_WCDMA |
                                       LTE_CPHY_IDLE_MEAS_CFG_MASK_TDSCDMA |
                                       LTE_CPHY_IDLE_MEAS_CFG_MASK_GSM |
                                       LTE_CPHY_IDLE_MEAS_CFG_MASK_CDMA));

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(1, 1, 2);
}

void LteRrcTesteMBMSActOnNeighborWhenCampedOnCellWithSIB15Only__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib2 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib2;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib5 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib5;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib2_size, sib3_size, sib5_size, sib15_size;
  uint8 *sib2_ptr = NULL, *sib3_ptr = NULL, *sib5_ptr = NULL, *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;


  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (0));

  /* Send Activate req with SAI for service 1 */
  LteRrcSendeMBMSActivateReqWithSAIForService(1, 1, 0, 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF with failure*/
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);

  // We expect meas sm to have thrown the idle meas cfg req to bump priority of serving freq
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[src_cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB15));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB15 to RRC

  sib15_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib15_ptr;
  sib15_size = (cell[src_cell_index].sibs_ptr[group_index])->sib15_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // We expect meas sm to have thrown the idle meas cfg req to bump priority of serving freq
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);


  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(0, 1, 2);
}

void LteRrcTesteMBMSActandReselToCellWithSIB2MBSFNCfg__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib2 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib2;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib5 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib5;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib2_size, sib3_size, sib5_size, sib15_size;
  uint8 *sib2_ptr = NULL, *sib3_ptr = NULL, *sib5_ptr = NULL, *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;


  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (0));

  /* Send Activate req with SAI for service 1 */
  LteRrcSendeMBMSActivateReqWithSAIForService(1, 1, 0, 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);
  TF_ASSERT(idle_meas_cfg_req->meas_cfg.
              requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(idle_meas_cfg_req->meas_cfg.
              disabled_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_WCDMA |
                                       LTE_CPHY_IDLE_MEAS_CFG_MASK_TDSCDMA |
                                       LTE_CPHY_IDLE_MEAS_CFG_MASK_GSM |
                                       LTE_CPHY_IDLE_MEAS_CFG_MASK_CDMA));

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[src_cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB15));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB15 to RRC

  sib15_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib15_ptr;
  sib15_size = (cell[src_cell_index].sibs_ptr[group_index])->sib15_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);
  TF_ASSERT(idle_meas_cfg_req->meas_cfg.
              requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(idle_meas_cfg_req->meas_cfg.
              disabled_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_WCDMA |
                                       LTE_CPHY_IDLE_MEAS_CFG_MASK_TDSCDMA |
                                       LTE_CPHY_IDLE_MEAS_CFG_MASK_GSM |
                                       LTE_CPHY_IDLE_MEAS_CFG_MASK_CDMA));

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_1);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_1);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_1, TRUE, FALSE);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(0, 1, 2);

  LteRrceMBMSGetAvailTmgiList(2);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSPendPrioChangeIndDuringResel__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestCampingAndLowerLayerConfigPrioChangeIndiDuringResel__Test(src_cell_index, tgt_cell_index, group_index);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSActandReselToCellWithSIB15Only__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;


  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(tgt_cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 and SIB15 on the target cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Sleep for 10s to let MCCH timer expire
  TF_SLEEP(10000);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_MCAST_OOS);
  TF_ASSERT(oos_warn_ind_ptr->num_sessions_affected == 1);
  TF_ASSERT(oos_warn_ind_ptr->affected_session_info[0].mrb_id == 36);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(tgt_cell_index, src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(src_cell_index, LTE_RRC_TEST_SIB_UPDATE_0);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, LTE_RRC_TEST_SIB_UPDATE_0, TRUE, FALSE);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1_1, sizeof(lte_rrc_test_embms_mcch_msg1_1));

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  /* Catch the OOS_WARN_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);
  TF_ASSERT(oos_warn_ind_ptr->reason == LTE_RRC_EMBMS_WARN_REASON_OOS_CLEARED);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActduringReselToCellWithnoSIB113SIB15__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCamping1__Test(tgt_cell_index, group_index);

  LteRrcSendeMBMSActivateReqForService0();

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[tgt_cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[tgt_cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------

  // We expect a sib_sched_req message from RRC
  // Telling L1 to stop sending any more si msgs for this mod period
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(sib_sched_req != NULL);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[tgt_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_UNKNOWN);

  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActduringReselToCellWithrequestedSAI__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  /* Send Activate req with SAI for service 3 */
  LteRrcSendeMBMSActivateReqWithSAIForService(3, 1, 3, 4);

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[tgt_cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);


  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[tgt_cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3));

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(1, 1, 4);

  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActduringReselToCellWithoutrequestedSAI__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  /* Send Activate req with SAI for service 3 */
  LteRrcSendeMBMSActivateReqWithSAIForService(1, 0, 0, 1);

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[tgt_cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[tgt_cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[src_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[src_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  // Verify MCCH setup
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3));

  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);


  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActduringReselToCellWithoutrequestedSAI1__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[tgt_cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[tgt_cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Send Activate req with SAI for service 3 */
  LteRrcSendeMBMSActivateReqWithSAIForService(1, 0, 0, 1);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Verify MCCH setup
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms3__Test(tgt_cell_index, group_index, TRUE, FALSE);

  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3));

  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);


  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActduringReselToCellWithNoeMBMS__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCamping3__Test(tgt_cell_index, group_index);

  /* Send Activate req with SAI for service 3 */
  LteRrcSendeMBMSActivateReqWithSAIForService(1, 1, 0, 1);
  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[tgt_cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

    // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[src_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[src_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[tgt_cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

    // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH release
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActduringReselToCellWithNoeMBMS1__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCamping3__Test(tgt_cell_index, group_index);

  // Send MCCH PDU in area 1 containing old service in area 0
  LteRrcTestSendMCCHPDU(0, 1, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[tgt_cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[src_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[src_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[tgt_cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

    // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH release
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActduringReselToCellWithNoeMBMS2__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib2 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib2;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size;

  lte_rrc_osys_BCCH_DL_SCH_Message *sib1_msg_ptr;

  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;
  boolean band_is_valid;

  lte_rrc_csp_test_set_max_num_acq_retries(1);

  // ---------------------------------------------

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req != NULL);
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[tgt_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask ==
            (LTE_CPHY_SIB_MASK_BIT_MIB | LTE_CPHY_SIB_MASK_BIT_SIB1));

  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == LTE_CPHY_NULL_SFN);

  // Ignoring next_mod_prd_sib_mask, si_window_length, num_si_msgs, si_msg_info

  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_25;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;
  mib_ind.freq = cell[tgt_cell_index].earfcn;
  mib_ind.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  mib_ind.sfn = 1;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req != NULL);
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[tgt_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1));

  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == 64);

  TF_ASSERT(sib_sched_req->num_si_msgs == 0);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[tgt_cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[tgt_cell_index].sibs_ptr[group_index])->sib1_size;

  sib1_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message *)
  lte_rrc_osys_asn1_decode_pdu(sib1_ptr,
                               sib1_size,
                               BCCH_DL_SCH_Message,
                               &decode_status);
  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->cellAccessRelatedInfo.
  csg_Indication = 0;
  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->freqBandIndicator = (lte_rrc_get_band_from_dl_earfcn(cell[tgt_cell_index].earfcn,&band_is_valid))+1;
  encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib1_msg_ptr,
                                               &encoded_pdu,
                                               BCCH_DL_SCH_Message);
  sib1_ptr = encoded_pdu.value;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[tgt_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req != NULL);
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[tgt_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB4));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB4));

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[tgt_cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[tgt_cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Send MCCH PDU in area 1 containing old service in area 0
  LteRrcTestSendMCCHPDU(0, 1, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_UNKNOWN);

  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);

  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActduringReselToCellWithNoeMBMS3__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  uint32 buf_len;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCamping3__Test(tgt_cell_index, group_index);

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[tgt_cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[tgt_cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

    // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH release
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActivatebeforeReselToCellWithoutrequestedSAI__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  /* Send Activate req with SAI for service 1 */
  LteRrcSendeMBMSActivateReqWithSAIForService(1, 0, 0, 1);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[src_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[src_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[tgt_cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[tgt_cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));

  TF_SLEEP(7000);

  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);


  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActbeforeReselToCellWithrequestedSAI__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  /* Send Activate req with SAI for service 3 */
  LteRrcSendeMBMSActivateReqWithSAIForService(3, 1, 3, 4);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // ---------------------------------------------
  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);


  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);
  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[tgt_cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[tgt_cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3));

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(1, 1, 4);

  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSReselToCellWithInvalidMbsfnCfg__Test
(
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;
  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */

  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;

  uint8 *sib3_ptr;
  uint16 sib3_size;

  uint32 buf_len;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband1__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[tgt_cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[tgt_cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[tgt_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  // ---------------------------------------------
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 0);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActivateafterReselToCellWithrequestedSAI__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[tgt_cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[tgt_cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[tgt_cell_index].phys_cell_id;
  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);


  // ---------------------------------------------
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms3__Test(tgt_cell_index, group_index, TRUE, FALSE);

  /* Send Activate req with SAI for service 3 */
  LteRrcSendeMBMSActivateReqWithSAIForService(3, 1, 3, 4);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3));

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(1, 1, 4);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActandReselToCellWithSIB15OnlyTimeout__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  uint32 buf_len;
  lte_errno_e status;


  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(tgt_cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetupDuringeMBMSSIBReading__Test(tgt_cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Let SIB timeout happen for SIB15
  TF_SLEEP(650);


  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[tgt_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  // Make sure existing service gets deactivated
  LteRrcTesteMBMSOutofCoverageConnMode__Test(FALSE, TRUE);

  // Check no more messages are thrown
  lte_rrc_utf_check_no_more_msgs();

}

void LteRrcTesteMBMSActDuringConnToIdleCamping__Test(lte_rrc_test_cell_e cell_index,
                                                     lte_rrc_test_sib_update_e group_index)
{
  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_rrc_service_ind_s *service_ind;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;

  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  lte_rrc_csp_test_set_max_num_acq_retries(1);

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[cell_index].phys_cell_id);

  /* Send Activate req with SAI for service 0 */
  LteRrcSendeMBMSActivateReqWithSAIForService(0, 0, 0, 3);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[cell_index].phys_cell_id;

  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req != NULL);
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[cell_index].earfcn);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == ref_common_cfg_mask);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = ref_common_cfg_mask;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);

  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.cfg_mask ==
                                                  (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG));

  TF_ASSERT(dedicated_cfg_req->is_default_cfg == TRUE);


  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pdsch_cfg_dedicated.pa == LTE_L1_PA_DB_0);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pucch_cfg_dedicated.ack_nak_repetition_enable == FALSE);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pusch_cfg_dedicated.delta_offset_ack_index == 10);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.ulsch_cfg.max_harq_tx == 5);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req != NULL);
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RECFG);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == (LTE_MAC_RACH_CFG_BM | LTE_MAC_DL_CFG_BM | LTE_MAC_UL_CFG_BM));

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req != NULL);
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // We expect a service_ind message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind, &buf_len);
  TF_ASSERT(service_ind->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
   // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  LteRrcTestMCCHSetupGeneric(LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

}

void LteRrcTesteMBMSActDuringConnToIdleCamping1__Test(lte_rrc_test_cell_e cell_index,
                                                     lte_rrc_test_sib_update_e group_index)
{
  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_rrc_service_ind_s *service_ind;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;

  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  uint8 *sib13_ptr = NULL;
  uint16 sib13_size;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  uint32 buf_len;
  lte_errno_e status;

  lte_rrc_csp_test_set_max_num_acq_retries(1);

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[cell_index].phys_cell_id);

  /* Send Activate req with SAI for service 0 */
  LteRrcSendeMBMSActivateReqWithSAIForService(0, 0, 0, 3);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[cell_index].phys_cell_id;

  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req != NULL);
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[cell_index].earfcn);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == ref_common_cfg_mask);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = ref_common_cfg_mask;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);

  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.cfg_mask ==
                                                  (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG));

  TF_ASSERT(dedicated_cfg_req->is_default_cfg == TRUE);


  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pdsch_cfg_dedicated.pa == LTE_L1_PA_DB_0);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pucch_cfg_dedicated.ack_nak_repetition_enable == FALSE);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pusch_cfg_dedicated.delta_offset_ack_index == 10);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.ulsch_cfg.max_harq_tx == 5);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req != NULL);
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RECFG);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == (LTE_MAC_RACH_CFG_BM | LTE_MAC_DL_CFG_BM | LTE_MAC_UL_CFG_BM));

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req != NULL);
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // We expect a service_ind message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind, &buf_len);
  TF_ASSERT(service_ind->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB13 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib13_ptr = (cell[cell_index].sibs_ptr[group_index])->sib13_ptr;
  sib13_size = (cell[cell_index].sibs_ptr[group_index])->sib13_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
						 sib13_size,
						 DSM_DS_SMALL_ITEM_POOL) == sib13_size);
  TF_ASSERT(dsm_ptr_sib13 != NULL);

  att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB5));

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

}

void LteRrcTesteMBMSActDuringConnToIdleCampingNoneMBMSCell__Test(lte_rrc_test_cell_e cell_index,
                                                                 lte_rrc_test_sib_update_e group_index)
{
  lte_cphy_abort_req_s *cphy_abort_req_ptr = NULL;
  lte_cphy_abort_cnf_s cphy_abort_cnf;
  lte_cphy_acq_req_s *acq_req;
  lte_cphy_acq_cnf_s acq_cnf;
  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_rrc_service_ind_s *service_ind;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  lte_rrc_csp_test_set_max_num_acq_retries(1);

  // ---------------------------------------------
  // We expect a cphy_abort_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_abort_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_abort_req_s));
  TF_ASSERT(cphy_abort_req_ptr != NULL);
  TF_ASSERT(cphy_abort_req_ptr->msgr_hdr.id == LTE_CPHY_ABORT_REQ);

  // Prepare cphy_abort_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_abort_cnf.msgr_hdr, LTE_CPHY_ABORT_CNF);
  cphy_abort_cnf.status = E_SUCCESS;
  // Send cphy_abort_cnf to RRC
  status = msgr_send(&cphy_abort_cnf.msgr_hdr, sizeof(cphy_abort_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a acq_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&acq_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_acq_req_s));
  TF_ASSERT(acq_req->msgr_hdr.id == LTE_CPHY_ACQ_REQ);

  // Prepare acq_cnf to send to RRC
  lte_rrc_init_default_hdr(&acq_cnf.msgr_hdr, LTE_CPHY_ACQ_CNF);

  acq_cnf.trans_id = acq_req->trans_id;
  acq_cnf.status = E_SUCCESS;
  acq_cnf.band = acq_req->band;
  acq_cnf.earfcn = acq_req->earfcn;
  //acq_cnf.acquired_cell.phy_cell_id = LTE_RRC_TEST_PHY_CELL_ID;
  acq_cnf.acquired_cell.phy_cell_id = cell[cell_index].phys_cell_id;
  acq_cnf.acquired_cell.mib.num_tx_antennas = 1;
  acq_cnf.acquired_cell.mib.dl_bandwidth = LTE_BW_NRB_100;
  acq_cnf.acquired_cell.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  acq_cnf.acquired_cell.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;
  acq_cnf.acquired_cell.cp = LTE_L1_CP_MODE_NORMAL;

  // Send acq_cnf to RRC
  status = msgr_send(&acq_cnf.msgr_hdr, sizeof(acq_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCamping1__Test(cell_index, group_index);

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[cell_index].phys_cell_id);

  /* Send Activate req with SAI for service 0 */
  LteRrcSendeMBMSActivateReqWithSAIForService(0, 0, 0, 3);

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[cell_index].phys_cell_id;

  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req != NULL);
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[cell_index].earfcn);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == ref_common_cfg_mask);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = ref_common_cfg_mask;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);

  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.cfg_mask ==
                                                  (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG));

  TF_ASSERT(dedicated_cfg_req->is_default_cfg == TRUE);


  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pdsch_cfg_dedicated.pa == LTE_L1_PA_DB_0);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pucch_cfg_dedicated.ack_nak_repetition_enable == FALSE);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pusch_cfg_dedicated.delta_offset_ack_index == 10);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.ulsch_cfg.max_harq_tx == 5);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req != NULL);
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RECFG);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == (LTE_MAC_RACH_CFG_BM | LTE_MAC_DL_CFG_BM | LTE_MAC_UL_CFG_BM));

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req != NULL);
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // ---------------------------------------------
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // We expect a service_ind message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_MCAST_OOC);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);

}


void LteRrcTesteMBMSActDuringConnToIdleCampingNoneMBMSCell__Test1(lte_rrc_test_cell_e cell_index,
                                                                 lte_rrc_test_sib_update_e group_index)
{
  lte_cphy_abort_req_s *cphy_abort_req_ptr = NULL;
  lte_cphy_abort_cnf_s cphy_abort_cnf;
  lte_cphy_acq_req_s *acq_req;
  lte_cphy_acq_cnf_s acq_cnf;
  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_cell_select_cnf_s cell_select_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_cphy_dedicated_cfg_req_s *dedicated_cfg_req;
  lte_cphy_dedicated_cfg_cnf_s dedicated_cfg_cnf;
  lte_rrc_service_ind_s *service_ind;
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_enable_req_s enable_req;

  uint32 buf_len;
  lte_errno_e status;

  lte_rrc_csp_test_set_max_num_acq_retries(1);

  // ---------------------------------------------
  // We expect a cphy_abort_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_abort_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_abort_req_s));
  TF_ASSERT(cphy_abort_req_ptr != NULL);
  TF_ASSERT(cphy_abort_req_ptr->msgr_hdr.id == LTE_CPHY_ABORT_REQ);

  // Prepare cphy_abort_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_abort_cnf.msgr_hdr, LTE_CPHY_ABORT_CNF);
  cphy_abort_cnf.status = E_SUCCESS;
  // Send cphy_abort_cnf to RRC
  status = msgr_send(&cphy_abort_cnf.msgr_hdr, sizeof(cphy_abort_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a acq_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&acq_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_acq_req_s));
  TF_ASSERT(acq_req->msgr_hdr.id == LTE_CPHY_ACQ_REQ);

  // Prepare acq_cnf to send to RRC
  lte_rrc_init_default_hdr(&acq_cnf.msgr_hdr, LTE_CPHY_ACQ_CNF);

  acq_cnf.trans_id = acq_req->trans_id;
  acq_cnf.status = E_SUCCESS;
  acq_cnf.band = acq_req->band;
  acq_cnf.earfcn = acq_req->earfcn;
  //acq_cnf.acquired_cell.phy_cell_id = LTE_RRC_TEST_PHY_CELL_ID;
  acq_cnf.acquired_cell.phy_cell_id = cell[cell_index].phys_cell_id;
  acq_cnf.acquired_cell.mib.num_tx_antennas = 1;
  acq_cnf.acquired_cell.mib.dl_bandwidth = LTE_BW_NRB_100;
  acq_cnf.acquired_cell.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  acq_cnf.acquired_cell.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;
  acq_cnf.acquired_cell.cp = LTE_L1_CP_MODE_NORMAL;

  // Send acq_cnf to RRC
  status = msgr_send(&acq_cnf.msgr_hdr, sizeof(acq_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCamping2__Test(cell_index, group_index);

  // ---------------------------------------------

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);

  TF_ASSERT(cell_select_req->band == lte_rrc_test_band_requested);
  TF_ASSERT(cell_select_req->earfcn == cell[cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // Enable eMBMS and test the enable handling
  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&enable_req.msg_hdr, LTE_RRC_EMBMS_ENABLE_REQ);
  status = msgr_send(&enable_req.msg_hdr, sizeof(enable_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("Sent LTE_RRC_EMBMS_ENABLE_REQ \n");

  /* Get eMBMS coverage status indication*/
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == TRUE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // Prepare cell_select_cnf to send to RRC
  lte_rrc_init_default_hdr(&cell_select_cnf.msgr_hdr, LTE_CPHY_CELL_SELECT_CNF);

  cell_select_cnf.status = E_SUCCESS;
  cell_select_cnf.band = lte_rrc_test_band_requested;
  cell_select_cnf.earfcn = cell[cell_index].earfcn;
  cell_select_cnf.phy_cell_id = cell[cell_index].phys_cell_id;

  // Send cell_select_cnf to RRC
  status = msgr_send(&cell_select_cnf.msgr_hdr, sizeof(cell_select_cnf));
  TF_ASSERT(status == E_SUCCESS);


  // ---------------------------------------------
  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req != NULL);
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[cell_index].earfcn);

  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == ref_common_cfg_mask);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = ref_common_cfg_mask;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a dedicated_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&dedicated_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_dedicated_cfg_req_s));
  TF_ASSERT(dedicated_cfg_req != NULL);
  TF_ASSERT(dedicated_cfg_req->msgr_hdr.id == LTE_CPHY_DEDICATED_CFG_REQ);

  TF_ASSERT(dedicated_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(dedicated_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.cfg_mask ==
                                                  (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                                   LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG));

  TF_ASSERT(dedicated_cfg_req->is_default_cfg == TRUE);


  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pdsch_cfg_dedicated.pa == LTE_L1_PA_DB_0);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pucch_cfg_dedicated.ack_nak_repetition_enable == FALSE);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.pusch_cfg_dedicated.delta_offset_ack_index == 10);

  TF_ASSERT(dedicated_cfg_req->dedicated_cfg_param.ulsch_cfg.max_harq_tx == 5);

  // Prepare dedicated_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&dedicated_cfg_cnf.msgr_hdr, LTE_CPHY_DEDICATED_CFG_CNF);

  dedicated_cfg_cnf.status = E_SUCCESS;
  dedicated_cfg_cnf.dedicated_cfg_validity = (LTE_CPHY_DEDICATED_CFG_MASK_BIT_PDSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUCCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PUSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SRS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_UL_POWER_CTRL  |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_CQI_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_DRX_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ANTENNA_CFG    |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUSCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_TPC_PDCCH_CFG_PUCCH |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SCHEDULING_REQ |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_ULSCH_CFG      |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_SPS_CFG        |
                                              LTE_CPHY_DEDICATED_CFG_MASK_BIT_PHR_CFG);

  // Send dedicated_cfg_cnf to RRC
  status = msgr_send(&dedicated_cfg_cnf.msgr_hdr, sizeof(dedicated_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a mac_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req != NULL);
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_RECFG);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == (LTE_MAC_RACH_CFG_BM | LTE_MAC_DL_CFG_BM | LTE_MAC_UL_CFG_BM));

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a idle_drx_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req != NULL);
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  // ---------------------------------------------

  // ---------------------------------------------
  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, cell_index, FALSE, NULL);

  // We expect a service_ind message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);
}


void LteRrcTesteMBMSActDuringRedirFailandOOS__Test(lte_rrc_test_cell_e cell_index,
                                                   lte_rrc_test_sib_update_e group_index)
{
  lte_cphy_abort_req_s *cphy_abort_req_ptr = NULL;
  lte_cphy_abort_cnf_s cphy_abort_cnf;

  lte_cphy_system_scan_req_s *ss_req;
  lte_cphy_system_scan_cnf_s ss_cnf;

  lte_cphy_acq_req_s *acq_req;
  lte_cphy_acq_cnf_s acq_cnf;
  lte_rrc_service_ind_s *service_ind;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  lte_rrc_csp_test_set_max_num_acq_retries(1);

  // ---------------------------------------------
  // We expect a cphy_abort_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_abort_req_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_abort_req_s));
  TF_ASSERT(cphy_abort_req_ptr != NULL);
  TF_ASSERT(cphy_abort_req_ptr->msgr_hdr.id == LTE_CPHY_ABORT_REQ);

  // Prepare cphy_abort_cnf to send to RRC
  lte_rrc_init_default_hdr(&cphy_abort_cnf.msgr_hdr, LTE_CPHY_ABORT_CNF);
  cphy_abort_cnf.status = E_SUCCESS;
  // Send cphy_abort_cnf to RRC
  status = msgr_send(&cphy_abort_cnf.msgr_hdr, sizeof(cphy_abort_cnf));
  LTE_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------

  // We expect a acq_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&acq_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_acq_req_s));
  TF_ASSERT(acq_req->msgr_hdr.id == LTE_CPHY_ACQ_REQ);

  /* Send Activate req with SAI for service 0 */
  LteRrcSendeMBMSActivateReqWithSAIForService(0, 0, 0, 3);

  // Prepare acq_cnf to send to RRC
  lte_rrc_init_default_hdr(&acq_cnf.msgr_hdr, LTE_CPHY_ACQ_CNF);

  acq_cnf.trans_id = acq_req->trans_id;
  acq_cnf.status = E_FAILURE;
  acq_cnf.band = acq_req->band;
  acq_cnf.earfcn = acq_req->earfcn;

  // Send acq_cnf to RRC
  status = msgr_send(&acq_cnf.msgr_hdr, sizeof(acq_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a band_scan_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&ss_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_system_scan_req_s));
  TF_ASSERT(ss_req->msgr_hdr.id == LTE_CPHY_SYSTEM_SCAN_REQ);

  lte_rrc_init_default_hdr(&ss_cnf.msgr_hdr, LTE_CPHY_SYSTEM_SCAN_CNF);
  ss_cnf.trans_id = ss_req->trans_id;
  ss_cnf.sys_scan_results.num_systems = 0;

  status = msgr_send(&ss_cnf.msgr_hdr, sizeof(ss_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_UCAST_OOS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);

  // ---------------------------------------------
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  // We expect a service_ind message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&service_ind, &buf_len);

  //TF_ASSERT(service_ind->trans_id == 1);
  TF_ASSERT(service_ind != NULL);
  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(service_ind->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(service_ind->svc_status == LTE_RRC_SVC_STATUS_NOT_AVAILABLE);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSSignalStrengthReqOnEnable__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;

  lte_cphy_mbsfn_signal_strength_req_s *cphy_sig_strgth_req_ptr = NULL;
  lte_cphy_mbsfn_signal_strength_cnf_s cphy_sig_strgth_cnf;
  lte_rrc_embms_signal_strength_report_req_s sig_strgth_rep_req, *signal_strength_req_ptr = NULL;
  lte_rrc_embms_signal_strength_report_cnf_s *sig_strgth_rep_cnf_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib13_size, sib15_size;
  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;


  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 ));

  /* Send avail tmgi list req */
  lte_rrc_init_default_hdr(&sig_strgth_rep_req.msg_hdr, LTE_RRC_EMBMS_SIGNAL_STRENGTH_REQ);
  sig_strgth_rep_req.debug_trace_id = LTE_RRC_ESMGR_UNUSED_DEBUG_TRACE_ID;
  status = msgr_send(&sig_strgth_rep_req.msg_hdr, sizeof(sig_strgth_rep_req));
  lte_rrc_utf_wait_for_done();

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));


  /* Send Activate req with SAI for service 0 */
  LteRrcSendeMBMSActivateReqWithSAIForService(0, 0, 0, 3);

  // ---------------------------------------------
  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_100;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;

  mib_ind.freq = cell[cell_index].earfcn;
  mib_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  mib_ind.sfn = 15;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB13 to RRC

  sib13_ptr = (cell[cell_index].sibs_ptr[group_index])->sib13_ptr;
  sib13_size = (cell[cell_index].sibs_ptr[group_index])->sib13_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
                         sib13_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib13_size);
  TF_ASSERT(dsm_ptr_sib13 != NULL);

  att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB15 to RRC

  sib15_ptr = (cell[cell_index].sibs_ptr[group_index])->sib15_ptr;
  sib15_size = (cell[cell_index].sibs_ptr[group_index])->sib15_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_sig_strgth_req_ptr, &buf_len);
  TF_ASSERT(cphy_sig_strgth_req_ptr->msgr_hdr.id == LTE_CPHY_MBSFN_SIGNAL_STRENGTH_REQ);
  TF_ASSERT(cphy_sig_strgth_req_ptr->snr_param_present == TRUE);
  TF_ASSERT(cphy_sig_strgth_req_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(cphy_sig_strgth_req_ptr->snr_param[0].area_id == 0);
  TF_ASSERT(cphy_sig_strgth_req_ptr->snr_param[0].non_mbsfn_symbols == LTE_L1_NON_MBSFN_SYMBOL_TWO);
  TF_ASSERT(cphy_sig_strgth_req_ptr->snr_param[0].mcs == LTE_L1_MBSFN_SIGNALLING_MCS_N7);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cphy_sig_strgth_cnf.msgr_hdr, LTE_CPHY_MBSFN_SIGNAL_STRENGTH_CNF);
  cphy_sig_strgth_cnf.num_mbsfn_areas = 1;
  cphy_sig_strgth_cnf.mbsfn_area_signal_strength[0].area_id = 0;
  cphy_sig_strgth_cnf.mbsfn_area_signal_strength[0].snr = 5;
  cphy_sig_strgth_cnf.mbsfn_area_signal_strength[0].signal_level = 2;
  cphy_sig_strgth_cnf.mbsfn_area_signal_strength[0].excess_snr = 5;
  status = msgr_send(&cphy_sig_strgth_cnf.msgr_hdr, sizeof(cphy_sig_strgth_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_SIGNAL_STRENGTH_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&sig_strgth_rep_cnf_ptr,&buf_len);
  TF_ASSERT(sig_strgth_rep_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_SIGNAL_STRENGTH_CNF);
  TF_ASSERT(sig_strgth_rep_cnf_ptr->num_mbsfn_areas == 1);

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(0, 1, 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
}

void LteRrcTesteMBMSTestSIBReqForeMBMSSIBs
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{

  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_irat_cdma_system_time_chg_req_s *sys_time_chg_req_ptr;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size;

  uint32 buf_len;
  lte_errno_e status;

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask ==(LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5));

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask ==(LTE_CPHY_SIB_MASK_BIT_MIB |
                                                    LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                    LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                    LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                    LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                    LTE_CPHY_SIB_MASK_BIT_SIB13));
}

void LteRrcTesteMBMSActWithEmptyASLAFL
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{

  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint8 *sib1_ptr = NULL, *sib3_ptr = NULL, *sib5_ptr = NULL, *sib13_ptr = NULL;
  uint16 sib1_size, sib3_size, sib5_size, sib13_size;

  uint32 buf_len;
  lte_errno_e status;

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(0, 1, 2);

  LteRrceMBMSGetAvailTmgiList(0);

  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // We expect a sib_sched_req message from RRC to stop SIB reading
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->serving_cell_info.phy_cell_id ==
            cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(common_cfg_req->serving_cell_info.dl_cell_frequency ==
            cell[tgt_cell_index].earfcn);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[1].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 2);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_DECONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].area_id == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].num_pmch == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[1].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_check_no_more_msgs();
}
void LteRrcTesteMBMSLteRrcTesteMBMSMultipleActInWaitingOnNeighbor__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib2 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib2;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib5 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib5;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib2_size, sib3_size, sib5_size, sib15_size;
  uint8 *sib2_ptr = NULL, *sib3_ptr = NULL, *sib5_ptr = NULL, *sib15_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;


  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (0));

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[src_cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB15));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB15 to RRC

  sib15_ptr = (cell[src_cell_index].sibs_ptr[group_index])->sib15_ptr;
  sib15_size = (cell[src_cell_index].sibs_ptr[group_index])->sib15_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[src_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[src_cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  /* Send Activate req with SAI for service 1 */
  LteRrcSendeMBMSActivateReqWithSAIForService(1, 1, 0, 1);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // We expect meas sm to have thrown the idle meas cfg req to bump priority of serving freq
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[src_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 2);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 400);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Send Activate req with SAI for service 0 */
  LteRrcSendeMBMSActivateReqWithSAIForService(0, 0, 0, 3);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);

  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == LTE_MIN_MTCH_RB_ID);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 2);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Verify reselection common info
  TF_ASSERT(cfg_req->meas_cfg.requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_INTER_FREQ |
                                                        LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->num_freq == 3);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].dl_carrier_freq == 300);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[0].cell_resel_priority == 6 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].dl_carrier_freq == 350);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[1].cell_resel_priority == 0);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].dl_carrier_freq == 450);
  TF_ASSERT(cfg_req->meas_cfg.inter_freq_info_ptr->freq_list[2].cell_resel_priority == 3 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 0
  LteRrcTestSendMCCHPDU(0, 400, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  // Verify MTCH setup for service 1
  LteRrcTestMTCHSetup(0, 1, 2);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG));

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Verify MTCH setup for service 0
  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[1].lc_id == 1);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].lc_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[1].mrb_id == 37);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}

void LteRrcTesteMBMSActivateBeforeSIB4Decode__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;
  lte_cphy_blacklisted_csg_pci_range_ind_s *indi;

  uint8 *sib4_ptr = NULL;
  uint16 sib4_size;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;

  dsm_item_type *dsm_ptr_sib4 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib4;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a sib_sched_req message from RRC to stop SIB reading on source cell
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(tgt_cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate TMGI
  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Prepare bcch_dl_data_ind to send SI with SIB4 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib4_ptr = (cell[tgt_cell_index].sibs_ptr[group_index])->sib4_ptr;
  sib4_size =(cell[tgt_cell_index].sibs_ptr[group_index])->sib4_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib4, sib4_ptr,
                         sib4_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib4_size);

  TF_ASSERT(dsm_ptr_sib4 != NULL);

  att_ptr_sib4 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib4, dsm_ptr_sib4);

  bcch_dl_data_ind.freq = cell[tgt_cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[tgt_cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 3;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // Telling L1 to stop sending any more si msgs for this mod period
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[tgt_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[tgt_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);
  TF_ASSERT(idle_meas_cfg_req->meas_cfg.
            requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(idle_meas_cfg_req->meas_cfg.serving_freq_info_ptr->cell_resel_priority
            == 7 + LTE_RRC_MEAS_EMBMS_RESEL_PRIO_OFFSET);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));

}

void LteRrcTesteMBMSSetCommonCfgMask
(
  void
)
{
  lte_cphy_common_cfg_mask_t common_cfg_mask;
  common_cfg_mask =
  	(
     LTE_CPHY_COMMON_CFG_MASK_BIT_UL_FREQ_CFG |
     LTE_CPHY_COMMON_CFG_MASK_BIT_PDSCH_CFG |
     LTE_CPHY_COMMON_CFG_MASK_BIT_PUCCH_CFG |
     LTE_CPHY_COMMON_CFG_MASK_BIT_PUSCH_CFG |
     //LTE_CPHY_COMMON_CFG_MASK_BIT_SRS_CFG |
     LTE_CPHY_COMMON_CFG_MASK_BIT_UL_POWER_CTRL |
     //LTE_CPHY_COMMON_CFG_MASK_BIT_DRX_CFG |
     LTE_CPHY_COMMON_CFG_MASK_BIT_UL_CYCLIC_PREFIX_LENGTH |
     LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_CFG |
     LTE_CPHY_COMMON_CFG_MASK_BIT_CELL_SELECT_CFG |
     LTE_CPHY_COMMON_CFG_MASK_BIT_TMR_AND_CONST_PARAM |
    LTE_CPHY_COMMON_CFG_MASK_BIT_PCCH_CFG
    );
  lte_rrc_llc_test_init_cphy_common_cfg_mask_for_verif(common_cfg_mask);
}

void LteRrcTestSibCollectionAfterHandoverEmbmsMultiBand__Test(lte_rrc_test_cell_e cell_index,
                                                                                lte_rrc_test_sib_update_e group_index)
{
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib2 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib2;         /* Message attachment pointer */

  uint32 buf_len;
  lte_errno_e status;

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size;

  uint8 *sib2_ptr = NULL;
  uint16 sib2_size;

  lte_rrc_osys_BCCH_DL_SCH_Message *sib1_msg_ptr;
  lte_rrc_osys_BCCH_DL_SCH_Message *sib2_msg_ptr;

  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;

  lte_rrc_csp_test_set_max_num_acq_retries(1);

  // ---------------------------------------------

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask ==
            (LTE_CPHY_SIB_MASK_BIT_MIB | LTE_CPHY_SIB_MASK_BIT_SIB1));

  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == LTE_CPHY_NULL_SFN);

  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_100;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;
  mib_ind.freq = cell[cell_index].earfcn;
  mib_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  mib_ind.sfn = 1;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask ==
            (LTE_CPHY_SIB_MASK_BIT_SIB1));

  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask ==
            (LTE_CPHY_SIB_MASK_BIT_MIB | LTE_CPHY_SIB_MASK_BIT_SIB1));

  TF_ASSERT(sib_sched_req->mod_period_boundary_sfn == 64);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[group_index])->sib1_size;

  sib1_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message *)
  lte_rrc_osys_asn1_decode_pdu(sib1_ptr,
                               sib1_size,
                               BCCH_DL_SCH_Message,
                               &decode_status);

  lte_rrc_osys_asn1_int_to_bitstring(cell[cell_index].phys_cell_id, &sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->
    cellAccessRelatedInfo.cellIdentity);

  if (test_sib13_not_read == TRUE)
  {
    sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->schedulingInfoList.elem[1].si_Periodicity = lte_rrc_osys_SchedulingInfo_si_Periodicity_rf512;
  }

  encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib1_msg_ptr,
                                               &encoded_pdu,
                                               BCCH_DL_SCH_Message);
  sib1_ptr = encoded_pdu.value;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // Prepare bcch_dl_data_ind to send SIB2 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  if (cell_index == LTE_RRC_TEST_CELL_18)
  {
    sib2_ptr = lte_rrc_test_sib2_13_msg;
    sib2_size = sizeof(lte_rrc_test_sib2_13_msg);
  }
  else
  {
    sib2_ptr = (cell[cell_index].sibs_ptr[group_index])->sib2_ptr;
    sib2_size = (cell[cell_index].sibs_ptr[group_index])->sib2_size;
  }

  sib2_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message *)
  lte_rrc_osys_asn1_decode_pdu(sib2_ptr,
                               sib2_size,
                               BCCH_DL_SCH_Message,
                               &decode_status);

  if (test_sib2_with_no_mbsfn == TRUE)
  {
    sib2_msg_ptr->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem[0].u.sib2->m.mbsfn_SubframeConfigListPresent = 0;
    sib2_msg_ptr->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem[0].u.sib2->freqInfo.m.ul_BandwidthPresent = 0;
  }

  if (cell_index == LTE_RRC_TEST_CELL_29)
  {
    sib2_msg_ptr->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem[0].u.sib2->freqInfo.m.ul_CarrierFreqPresent = 1;
    sib2_msg_ptr->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem[0].u.sib2->freqInfo.ul_CarrierFreq = 18300;
  }
  else if (cell_index == LTE_RRC_TEST_CELL_28)
  {
    sib2_msg_ptr->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem[0].u.sib2->freqInfo.m.ul_CarrierFreqPresent = 1;
    sib2_msg_ptr->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem[0].u.sib2->freqInfo.ul_CarrierFreq = 18200;
  }
  else
  {
    sib2_msg_ptr->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem[0].u.sib2->freqInfo.m.ul_CarrierFreqPresent = 1;
    sib2_msg_ptr->message.u.c1->u.systemInformation->criticalExtensions.u.systemInformation_r8->sib_TypeAndInfo.elem[0].u.sib2->freqInfo.ul_CarrierFreq = 18400;
  }
  encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib2_msg_ptr,
                                               &encoded_pdu,
                                               BCCH_DL_SCH_Message);
  sib2_ptr = encoded_pdu.value;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib2, sib2_ptr,
                         sib2_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib2_size);

  TF_ASSERT(dsm_ptr_sib2 != NULL);

  att_ptr_sib2 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib2, dsm_ptr_sib2);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 3;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

}

void LteRrcTestEmbmsSibCollectionMultiBand__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index,
  uint16 *intra_data,
  uint16 *inter_data,
  uint16 *mfbi_data
)
{
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */

  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;

  uint16 sib13_size;
  uint16 sib15_size;

  lte_rrc_osys_BCCH_DL_SCH_Message *sib15_msg_ptr;
  lte_rrc_osys_BCCH_DL_SCH_Message *sib13_msg_ptr;

  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;

  uint32 buf_len;
  lte_errno_e status;

  if (cell_index == LTE_RRC_TEST_CELL_29 ||
      cell_index == LTE_RRC_TEST_CELL_30 ||
      cell_index == LTE_RRC_TEST_CELL_31)
  {
    // Prepare bcch_dl_data_ind to send SIB1 to RRC
    msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

    sib13_ptr = (cell[cell_index].sibs_ptr[group_index])->sib13_ptr;
    sib13_size = (cell[cell_index].sibs_ptr[group_index])->sib13_size;

    TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
                           sib13_size,
                           DSM_DS_SMALL_ITEM_POOL) == sib13_size);
    TF_ASSERT(dsm_ptr_sib13 != NULL);

    att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
    msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

    bcch_dl_data_ind.freq = cell[cell_index].earfcn;
    bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
    bcch_dl_data_ind.sfn.sys_fn = 4;

    // Send bcch_dl_data_ind to RRC
    status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
    TF_ASSERT(status == E_SUCCESS);

    // We expect a sib_sched_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
    TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
    TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
    TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  }

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  if (mfbi_data != NULL)
  {
    sib15_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message*)LteRrceMBMSSib15Construct__Test(intra_data,
      inter_data, mfbi_data);
  }
  else
  {
    sib15_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message*)LteRrceMBMSSib15Construct__Test(intra_data,
      inter_data, NULL);
  }

  encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib15_msg_ptr,
                                               &encoded_pdu,
                                               BCCH_DL_SCH_Message);

  TF_ASSERT(encode_status == 0);
  //free the constructed SIB15

  sib15_ptr = encoded_pdu.value;
  sib15_size = encoded_pdu.length;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                         sib15_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 4;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
}

void LteRrcTestEmbmsSibUpdateMultiBand__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index,
  uint16 *intra_data,
  uint16 *inter_data,
  boolean read_sib13,
  boolean read_sib15,
  boolean sib_read_error
)
{
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */
  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */
  uint8 *sib13_ptr = NULL;
  uint8 *sib15_ptr = NULL;
  uint16 sib13_size;
  uint16 sib15_size;
  lte_rrc_osys_BCCH_DL_SCH_Message *sib15_msg_ptr;
  lte_rrc_osys_BCCH_DL_SCH_Message *sib13_msg_ptr;
  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;
  uint32 buf_len;
  lte_errno_e status;
  lte_mac_rrc_dl_data_ind_s pcch_dl_data_ind;
  dsm_item_type *dsm_ptr_paging = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_paging;         /* Message attachment pointer */
  lte_cphy_mib_ind_s mib_ind;
  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */
  dsm_item_type *dsm_ptr_sib2 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib2;         /* Message attachment pointer */
  uint8 *sib1_ptr = NULL;
  uint16 sib1_size;
  uint8 *sib2_ptr = NULL;
  uint16 sib2_size;
  lte_rrc_osys_BCCH_DL_SCH_Message *sib1_msg_ptr;
  lte_rrc_osys_BCCH_DL_SCH_Message *sib2_msg_ptr;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;


  // Prepare pcch_dl_data_ind to send Paging OTA msg to RRC
  msgr_init_hdr_attach(&pcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_PCCH_DL_DATA_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_paging, lte_rrc_test_default_siupdate_msg1,
                         sizeof(lte_rrc_test_default_siupdate_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_default_siupdate_msg1));

  TF_ASSERT(dsm_ptr_paging != NULL);

  att_ptr_paging = msgr_get_attach(&pcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_paging, dsm_ptr_paging);

  pcch_dl_data_ind.freq = cell[cell_index].earfcn;
  pcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  pcch_dl_data_ind.sfn.sys_fn = 32;

  // Send pcch_dl_data_ind to RRC
  status = msgr_send(&pcch_dl_data_ind.hdr, sizeof(pcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // ---------------------------------------------
  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_100;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;

  mib_ind.freq = cell[cell_index].earfcn;
  mib_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  mib_ind.sfn = 128;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[group_index])->sib1_size;

  sib1_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message *)
  lte_rrc_osys_asn1_decode_pdu(sib1_ptr,
                               sib1_size,
                               BCCH_DL_SCH_Message,
                               &decode_status);

  lte_rrc_osys_asn1_int_to_bitstring(cell[cell_index].phys_cell_id, &sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->
    cellAccessRelatedInfo.cellIdentity);
  sib1_msg_ptr->message.u.c1->u.systemInformationBlockType1->systemInfoValueTag = 1;
  encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib1_msg_ptr,
                                               &encoded_pdu,
                                               BCCH_DL_SCH_Message);
  sib1_ptr = encoded_pdu.value;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 128;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // Prepare bcch_dl_data_ind to send SIB2 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib2_ptr = (cell[cell_index].sibs_ptr[group_index])->sib2_ptr;
  sib2_size = (cell[cell_index].sibs_ptr[group_index])->sib2_size;

  sib2_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message *)
  lte_rrc_osys_asn1_decode_pdu(sib2_ptr,
                               sib2_size,
                               BCCH_DL_SCH_Message,
                               &decode_status);

  encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib2_msg_ptr,
                                               &encoded_pdu,
                                               BCCH_DL_SCH_Message);
  sib2_ptr = encoded_pdu.value;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib2, sib2_ptr,
                         sib2_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib2_size);

  TF_ASSERT(dsm_ptr_sib2 != NULL);

  att_ptr_sib2 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib2, dsm_ptr_sib2);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 130;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);


  // We expect a service indication message from RRC
  lte_rrc_service_ind_s *svc_ind;
  lte_rrc_utf_get_next_ext_msg((byte**)&svc_ind, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rrc_service_ind_s));
  TF_ASSERT(svc_ind->msg_hdr.id == LTE_RRC_SERVICE_IND);
  TF_ASSERT(svc_ind->svc_status == LTE_RRC_SVC_STATUS_AVAILABLE);
  TF_ASSERT(svc_ind->camped_svc_info.earfcn == cell[cell_index].earfcn);
  TF_ASSERT(svc_ind->camped_svc_info.phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(svc_ind->camped_svc_info.tac == 0);

  //Handle Cfg Req here
  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a idle_drx_cfg_req message from RRC
  lte_cphy_idle_drx_cfg_req_s *idle_drx_cfg_req;
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_drx_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_drx_cfg_req_s));
  TF_ASSERT(idle_drx_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_DRX_CFG_REQ);

  TF_ASSERT(idle_drx_cfg_req->serving_cell_info.dl_cell_frequency == cell[cell_index].earfcn);
  TF_ASSERT(idle_drx_cfg_req->serving_cell_info.phy_cell_id == cell[cell_index].phys_cell_id);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);


  if ((cell_index == LTE_RRC_TEST_CELL_29 ||
       cell_index == LTE_RRC_TEST_CELL_30 ||
       cell_index == LTE_RRC_TEST_CELL_31) &&
      read_sib13)
  {
    // Prepare bcch_dl_data_ind to send SIB1 to RRC
    msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

    sib13_ptr = (cell[cell_index].sibs_ptr[group_index])->sib13_ptr;
    sib13_size = (cell[cell_index].sibs_ptr[group_index])->sib13_size;

    TF_ASSERT(dsm_pushdown(&dsm_ptr_sib13, sib13_ptr,
                           sib13_size,
                           DSM_DS_SMALL_ITEM_POOL) == sib13_size);
    TF_ASSERT(dsm_ptr_sib13 != NULL);

    att_ptr_sib13 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
    msgr_set_dsm_attach(att_ptr_sib13, dsm_ptr_sib13);

    bcch_dl_data_ind.freq = cell[cell_index].earfcn;
    bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
    bcch_dl_data_ind.sfn.sys_fn = 132;

    // Send bcch_dl_data_ind to RRC
    status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
    TF_ASSERT(status == E_SUCCESS);

    // We expect a sib_sched_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
    TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
    TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
    TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
}

  if (read_sib15)
{
    // Prepare bcch_dl_data_ind to send SIB1 to RRC
    msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

    sib15_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message*)LteRrceMBMSSib15Construct__Test(intra_data,
      inter_data, NULL);

    encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib15_msg_ptr,
                                                 &encoded_pdu,
                                                 BCCH_DL_SCH_Message);

    TF_ASSERT(encode_status == 0);
    //free the constructed SIB15

    sib15_ptr = encoded_pdu.value;
    sib15_size = encoded_pdu.length;

    TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
                           sib15_size,
                           DSM_DS_SMALL_ITEM_POOL) == sib15_size);
    TF_ASSERT(dsm_ptr_sib15 != NULL);

    att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
    msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

    bcch_dl_data_ind.freq = cell[cell_index].earfcn;
    bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
    bcch_dl_data_ind.sfn.sys_fn = 4;

    // Send bcch_dl_data_ind to RRC
    status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
    TF_ASSERT(status == E_SUCCESS);

    // We expect a sib_sched_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
    TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
    TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
    TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  }

  if (!read_sib15 || !read_sib13)
  {
    TF_SLEEP(2000);

    if (!sib_read_error)
    {
      // We expect a sib_sched_req message from RRC
      lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
      TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
      TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
      TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
      TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
    }
    else
    {
      //Test RLF
      // We expect a sib_sched_req message from RRC
      lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

      TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
      TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

      TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
      TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
    }
  }
}


void LteRrcEmbmsMbmsInterestIndProc427_Test
(
  lte_rrc_test_cell_e cell_index
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE,0);

  lte_rrc_embms_avail_sai_list_ind_s *sai_list_indi;
  lte_rrc_utf_get_next_ext_msg((byte**)&sai_list_indi, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_embms_avail_sai_list_ind_s));
  TF_ASSERT(sai_list_indi->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  msgr_attach_struct_type *att_ptr;
  dsm_item_type *rx_dsm_ptr;
  uint16 length;
  unsigned char byte_str[256];
  uint16 byte_str_len;

  att_ptr = msgr_get_attach(&sai_list_indi->msg_hdr, 0);
  msgr_get_dsm_attach(att_ptr, &rx_dsm_ptr);
  TF_ASSERT(rx_dsm_ptr != NULL);

  length = dsm_length_packet(rx_dsm_ptr);

  byte_str_len = dsm_pullup(&rx_dsm_ptr, byte_str, (uint16) length);

  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);

  TF_SLEEP(5500);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");
}

void LteRrcEmbmsMbmsInterestIndProc428_1_Test
(
  lte_rrc_test_cell_e cell_index
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  //For cells with SIB13
  if (cell_index == LTE_RRC_TEST_CELL_29 ||
      cell_index == LTE_RRC_TEST_CELL_30 ||
      cell_index == LTE_RRC_TEST_CELL_31)
  {
    // We expect a common_cfg_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.
              cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  }

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE,400);

  lte_rrc_embms_avail_sai_list_ind_s *sai_list_indi;
  lte_rrc_utf_get_next_ext_msg((byte**)&sai_list_indi, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_embms_avail_sai_list_ind_s));
  TF_ASSERT(sai_list_indi->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  msgr_attach_struct_type *att_ptr;
  dsm_item_type *rx_dsm_ptr;
  uint16 length;
  unsigned char byte_str[256];
  uint16 byte_str_len;

  att_ptr = msgr_get_attach(&sai_list_indi->msg_hdr, 0);
  msgr_get_dsm_attach(att_ptr, &rx_dsm_ptr);
  TF_ASSERT(rx_dsm_ptr != NULL);

  length = dsm_length_packet(rx_dsm_ptr);

  byte_str_len = dsm_pullup(&rx_dsm_ptr, byte_str, (uint16) length);

  // Send common_cfg_cnf to RRC
  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg_2tmgi, sizeof(lte_rrc_test_embms_mcch_msg_2tmgi),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg_2tmgi));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = cell[cell_index].earfcn;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

    // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}

void LteRrcEmbmsMbmsInterestIndProc428_2_Test
(
  lte_rrc_test_cell_e cell_index
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  //For cells with SIB13
  if (cell_index == LTE_RRC_TEST_CELL_29 ||
      cell_index == LTE_RRC_TEST_CELL_30 ||
      cell_index == LTE_RRC_TEST_CELL_31)
  {
    // We expect a common_cfg_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.
              cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  }

  //LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE,300);

  lte_rrc_embms_avail_sai_list_ind_s *sai_list_indi;
  lte_rrc_utf_get_next_ext_msg((byte**)&sai_list_indi, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_embms_avail_sai_list_ind_s));
  TF_ASSERT(sai_list_indi->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  msgr_attach_struct_type *att_ptr;
  dsm_item_type *rx_dsm_ptr;
  uint16 length;
  unsigned char byte_str[256];
  uint16 byte_str_len;

  att_ptr = msgr_get_attach(&sai_list_indi->msg_hdr, 0);
  msgr_get_dsm_attach(att_ptr, &rx_dsm_ptr);
  TF_ASSERT(rx_dsm_ptr != NULL);

  length = dsm_length_packet(rx_dsm_ptr);

  byte_str_len = dsm_pullup(&rx_dsm_ptr, byte_str, (uint16) length);

  // Send common_cfg_cnf to RRC
  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg_4tmgi, sizeof(lte_rrc_test_embms_mcch_msg_4tmgi),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg_4tmgi));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 1;
  mcch_pdu_ind.dl_cell_frequency = cell[cell_index].earfcn;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

   // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

}

void LteRrcEmbmsMbmsInterestIndProc429_Test
(
  lte_rrc_test_cell_e cell_index
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  lte_rrc_embms_avail_sai_list_ind_s *sai_list_indi;
  lte_rrc_utf_get_next_ext_msg((byte**)&sai_list_indi, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_embms_avail_sai_list_ind_s));
  TF_ASSERT(sai_list_indi->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  msgr_attach_struct_type *att_ptr;
  dsm_item_type *rx_dsm_ptr;
  uint16 length;
  unsigned char byte_str[256];
  uint16 byte_str_len;

  att_ptr = msgr_get_attach(&sai_list_indi->msg_hdr, 0);
  msgr_get_dsm_attach(att_ptr, &rx_dsm_ptr);
  TF_ASSERT(rx_dsm_ptr != NULL);

  length = dsm_length_packet(rx_dsm_ptr);

  byte_str_len = dsm_pullup(&rx_dsm_ptr, byte_str, (uint16) length);

  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);

  TF_SLEEP(5500);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_get_next_ext_msg((byte **)&deact_tmgi_ind_ptr,&buf_len);
  TF_ASSERT(deact_tmgi_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_DEACT_TMGI_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_DEACT_TMGI_IND");

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  TF_SLEEP(100);

  TF_SLEEP(lte_rrc_esmgr_data.sd_ptr->clear_cfl_wait_tmr_value);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE,0);
}

void LteRrcTestSib5CollectionAfterCamping__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;

  dsm_item_type *dsm_ptr_sib5 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib5;         /* Message attachment pointer */

  uint32 buf_len;
  lte_errno_e status;

  uint8 *sib5_ptr = NULL;
  uint16 sib5_size;

  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;

  // Prepare bcch_dl_data_ind to send SI with SIB5 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib5_ptr = (cell[cell_index].sibs_ptr[group_index])->sib5_ptr;
  sib5_size =(cell[cell_index].sibs_ptr[group_index])->sib5_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib5, sib5_ptr,
                         sib5_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib5_size);

  TF_ASSERT(dsm_ptr_sib5 != NULL);

  att_ptr_sib5 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib5, dsm_ptr_sib5);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 4;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  // Telling L1 to stop sending any more si msgs for this mod period
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));

}

void LteRrcTestSibxCollectionAfterCamping__Test
(
  lte_rrc_test_cell_e cell_index,
  lte_rrc_test_sib_update_e group_index,
  uint32 sib_mask,
  uint16 sfn,
  uint16 *intra_data,
  uint16 *inter_data
)
{
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_rrc_osys_BCCH_DL_SCH_Message *sib15_msg_ptr;


  dsm_item_type *dsm_ptr_sibx = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sibx;         /* Message attachment pointer */

  uint32 buf_len;
  lte_errno_e status;

  uint8 *sibx_ptr = NULL;
  uint16 sibx_size;


  int decode_status;
  int encode_status;
  lte_rrc_pdu_buf_s encoded_pdu;

  // Prepare bcch_dl_data_ind to send SI with SIB5 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  switch (sib_mask)
  {
    case LTE_CPHY_SIB_MASK_BIT_SIB1:
      sibx_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
      sibx_size =(cell[cell_index].sibs_ptr[group_index])->sib1_size;
      break;

    case LTE_CPHY_SIB_MASK_BIT_SIB13:
      sibx_ptr = (cell[cell_index].sibs_ptr[group_index])->sib13_ptr;
      sibx_size =(cell[cell_index].sibs_ptr[group_index])->sib13_size;
      break;

    case LTE_CPHY_SIB_MASK_BIT_SIB15:
      sib15_msg_ptr = (lte_rrc_osys_BCCH_DL_SCH_Message*)LteRrceMBMSSib15Construct__Test(intra_data, inter_data, NULL);
      encode_status = lte_rrc_osys_asn1_encode_pdu((void *)sib15_msg_ptr,
                                                   &encoded_pdu,
                                                   BCCH_DL_SCH_Message);
      TF_ASSERT(encode_status == 0);
      //TODO: free the constructed SIB15
      sibx_ptr = encoded_pdu.value;
      sibx_size = encoded_pdu.length;
      break;

    default:
      TF_ASSERT(0);
  }

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sibx, sibx_ptr,
                         sibx_size,
                         DSM_DS_SMALL_ITEM_POOL) == sibx_size);

  TF_ASSERT(dsm_ptr_sibx != NULL);

  att_ptr_sibx = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sibx, dsm_ptr_sibx);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = sfn;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  // Telling L1 to stop sending any more si msgs for this mod period
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
}

void LteRrcTestReselEmbmsMultiBand__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{
  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_errno_e status;
  uint32 buf_len;

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(tgt_cell_index, group_index);

  if (tgt_cell_index == LTE_RRC_TEST_CELL_18)
  {
    // Get RRC to camped state
    LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

    // We expect a sib_sched_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
    TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

    LteRrcTesteMBMSActSvcLowerLyr_Test(tgt_cell_index, FALSE, FALSE, 0);
  }
  else if (tgt_cell_index == LTE_RRC_TEST_CELL_31)
  {
    LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

    LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
    LteRrcTestSibxCollectionAfterCamping__Test(tgt_cell_index, group_index, LTE_CPHY_SIB_MASK_BIT_SIB13, 5, NULL, NULL);

    uint16 sib15_intra[] = {1, 5};
    LteRrcTestSibxCollectionAfterCamping__Test(tgt_cell_index, group_index, LTE_CPHY_SIB_MASK_BIT_SIB15, 5, sib15_intra, NULL);

    LteRrcTesteMBMSAvailSaiListInd();

    //LteRrcTesteMBMSActSvcLowerLyr_Test(tgt_cell_index, FALSE, FALSE, 0);
  }
}

void LteRrceMBMSConnModePreferAlleMBMSFreq__Test
(
  lte_rrc_test_cell_e src_cell_index,
  lte_rrc_test_cell_e tgt_cell_index,
  lte_rrc_test_sib_update_e group_index
)
{

  lte_cphy_mib_ind_s mib_ind;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */

  dsm_item_type *dsm_ptr_sib13 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib13;         /* Message attachment pointer */

  uint8 *sib1_ptr = NULL;
  uint16 sib1_size, sib13_size;
  uint8 *sib13_ptr = NULL;

  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;
  lte_errno_e status;
  uint32 buf_len;

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(src_cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  //LteRrcTestHandoverEmbmsMultiBand__Test(src_cell_index, tgt_cell_index, group_index);

  LteRrcTestHandoverSuccessGeneric__Test(src_cell_index, tgt_cell_index, group_index, TRUE);

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);

  LteRrcTestActTMGICnfiAndActListIndForService1();

}

void LteRrcTestRedirVerifyReqToSuspendWitheMBMS (uint8 num_mtch_released)
{
    lte_cphy_abort_req_s *cphy_abort_req;
    lte_cphy_abort_cnf_s cphy_abort_cnf;

    lte_cphy_stop_req_s *cphy_stop_req;
    lte_mac_stop_req_msg_s *mac_stop_req;

    lte_rlc_stop_req_s *rlc_stop_req_ptr;
    lte_pdcp_stop_req_msg_s *pdcp_stop_req_ptr;

    uint32 buf_len;
    lte_errno_e status;

    // ---------------------------------------------
    // We expect a cphy_abort_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&cphy_abort_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_abort_req_s));
    TF_ASSERT(cphy_abort_req->msgr_hdr.id == LTE_CPHY_ABORT_REQ);

    // Prepare cphy_abort_cnf to send to RRC
    lte_rrc_init_default_hdr(&cphy_abort_cnf.msgr_hdr, LTE_CPHY_ABORT_CNF);
    cphy_abort_cnf.status = E_SUCCESS;

    // Send cphy_abort_cnf to RRC
    status = msgr_send(&cphy_abort_cnf.msgr_hdr, sizeof(cphy_abort_cnf));
    TF_ASSERT(status == E_SUCCESS);

    // Verify release of MTCH in L2
    LteRrcTestReleaseAllMTCH(num_mtch_released);

    // ---------------------------------------------

    lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
    TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPUL_STOP_REQ);

    lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
    TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPDL_STOP_REQ);

    lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
    TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCUL_STOP_REQ);

    lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
    TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCDL_STOP_REQ);

    // We expect a mac_stop_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&mac_stop_req, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_mac_stop_req_msg_s));
    TF_ASSERT(mac_stop_req->hdr.id == LTE_MAC_STOP_REQ);

    // We expect a cphy_stop_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&cphy_stop_req, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_cphy_stop_req_s));
    TF_ASSERT(cphy_stop_req->msgr_hdr.id == LTE_CPHY_STOP_REQ);
}

void LteRrcTesteMBMSTmgiActWhenSib13NotAvail_Test
(
  lte_rrc_test_cell_e cell_index
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_deact_tmgi_ind_s *deact_tmgi_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

#if 0
  //For cells with SIB13
  if (cell_index == LTE_RRC_TEST_CELL_29 ||
      cell_index == LTE_RRC_TEST_CELL_30 ||
      cell_index == LTE_RRC_TEST_CELL_31)
  {
    // We expect a common_cfg_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.
              cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);
  }

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE,0);

  lte_rrc_embms_avail_sai_list_ind_s *sai_list_indi;
  lte_rrc_utf_get_next_ext_msg((byte**)&sai_list_indi, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rrc_embms_avail_sai_list_ind_s));
  TF_ASSERT(sai_list_indi->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  msgr_attach_struct_type *att_ptr;
  dsm_item_type *rx_dsm_ptr;
  uint16 length;
  unsigned char byte_str[256];
  uint16 byte_str_len;

  att_ptr = msgr_get_attach(&sai_list_indi->msg_hdr, 0);
  msgr_get_dsm_attach(att_ptr, &rx_dsm_ptr);
  TF_ASSERT(rx_dsm_ptr != NULL);

  length = dsm_length_packet(rx_dsm_ptr);

  byte_str_len = dsm_pullup(&rx_dsm_ptr, byte_str, (uint16) length);

  // Send common_cfg_cnf to RRC
  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
#endif

  //Allow MCCH timer to expire
  TF_SLEEP(10000);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg_4tmgi, sizeof(lte_rrc_test_embms_mcch_msg_4tmgi),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg_4tmgi));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 1;
  mcch_pdu_ind.dl_cell_frequency = cell[cell_index].earfcn;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);

#if 0
  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
#endif
}

void LteRrcTestEmbmsRel11toRel9Toggle_Test(lte_rrc_test_cell_e cell_index)
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  if (cell_index == LTE_RRC_TEST_CELL_29)
  {
    TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg_4tmgi, sizeof(lte_rrc_test_embms_mcch_msg_4tmgi),
                           DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg_4tmgi));
  }
  else
  {
    TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg_2tmgi, sizeof(lte_rrc_test_embms_mcch_msg_2tmgi),
                           DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg_2tmgi));
  }

  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  if (cell_index == LTE_RRC_TEST_CELL_29)
  {
    mcch_pdu_ind.area_id = 1;
  }
  else
  {
    mcch_pdu_ind.area_id = 0;
  }
  mcch_pdu_ind.dl_cell_frequency = cell[cell_index].earfcn;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Catch the AVAIL_TMGI_LIST_IND sent from RRC */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_tmgi_list_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_avail_tmgi_list_ind_s) == buf_len);
  TF_ASSERT(avail_tmgi_list_ind_ptr != NULL);
  TF_ASSERT(avail_tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_TMGI_LIST_IND);
}

void LteRrcTestMcchTimerExpiryHdlrAfterIratReselFail__Test()
{
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */
  lte_rrc_embms_avail_tmgi_list_ind_s *avail_tmgi_list_ind_ptr = NULL;

  uint32 buf_len = 0;
  lte_errno_e status;

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);
}

void LteRrcEmbmsFastMobilityTmgiFailPart1_Test
(
  lte_rrc_test_cell_e cell_index,
  boolean test_mbms_intrst_ind,
  boolean freq_valid,
  uint16 freq
)
{
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  if (test_mbms_intrst_ind)
  {
    LteRrcTesteMBMSMbmsInterestIndULMessage(freq_valid, freq);
  }

  LteRrcTesteMBMSAvailSaiListInd();

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  if (test_srvc_ind == TRUE)
  {
    LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  }

  if (test_mcch_tmr_expiry == TRUE)
  {
    return;
  }

  if (test_cfg_reqi_for_sib_upd == TRUE)
  {
    // We expect a common_cfg_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

    TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
    TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
    TF_ASSERT(common_cfg_req->common_cfg_param.
              cfg_mask == LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG);

    if (test_mbms_intrst_ind)
    {
      LteRrcTesteMBMSMbmsInterestIndULMessage(freq_valid, freq);
    }

    // Prepare common_cfg_cnf to send to RRC
    lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

    common_cfg_cnf.status = E_SUCCESS;
    common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

    // Send common_cfg_cnf to RRC
    status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
    TF_ASSERT(status == E_SUCCESS);
  }
}

void LteRrcEmbmsFastMobilityTmgiFailPart2_Test
(
  lte_rrc_test_cell_e cell_index
)
{

  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 300);

  LteRrcTesteMBMSAvailSaiListInd();

  //let MCCH timer expire
  TF_SLEEP(5140);

  uint16 req_freq_list[] = {300,400,500};
  uint16 cnf_freq_list[] = {300};
  LteRrcTesteMBMSMbmsBestNeighReqCnf(3, req_freq_list, 1, cnf_freq_list);

  // We expect a common_cfg_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  TF_SLEEP(100);

  //Allow the guard timer to expire
  TF_SLEEP(300000);

}

void LteRrcTesteMBMSPMCHOrdering__Test
(
  void
)
{
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;

  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;

  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;
  lte_rlcdl_mcch_pdu_ind_s mcch_pdu_ind;

  dsm_item_type *dsm_ptr_mcch = NULL, *dsm_ptr_mcch2 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_mcch, *att_ptr_mcch2;         /* Message attachment pointer */

  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();


  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_with_3_pmch_msg, sizeof(lte_rrc_test_embms_mcch_with_3_pmch_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_with_3_pmch_msg));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 65;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 3);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[2].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[2].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[2].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 3);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 3);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  TF_SLEEP(1000);


  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_msg1));
  TF_ASSERT(dsm_ptr_mcch != NULL);

  att_ptr_mcch = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch, dsm_ptr_mcch);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 512;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 3);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[0].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  TF_SLEEP(5000);

  /* Prepare mcch_pdu_ind to send MBSFNAreaConfiguration OTA message to RRC */
  msgr_init_hdr_attach(&mcch_pdu_ind.hdr, MSGR_LTE_RLCDL, LTE_RLCDL_MCCH_PDU_IND, 0, 1);

  TF_ASSERT(dsm_pushdown(&dsm_ptr_mcch2, lte_rrc_test_embms_mcch_with_3_pmch_msg, sizeof(lte_rrc_test_embms_mcch_with_3_pmch_msg),
                         DSM_DS_SMALL_ITEM_POOL) == sizeof(lte_rrc_test_embms_mcch_with_3_pmch_msg));
  TF_ASSERT(dsm_ptr_mcch2 != NULL);

  att_ptr_mcch2 = msgr_get_attach(&mcch_pdu_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_mcch2, dsm_ptr_mcch2);

  mcch_pdu_ind.area_id = 0;
  mcch_pdu_ind.dl_cell_frequency = 1;
  mcch_pdu_ind.sfn.sys_fn = 0;

  // Send mcch_pdu_ind to RRC
  status = msgr_send(&mcch_pdu_ind.hdr, sizeof(mcch_pdu_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a common_cfg_req message from RRC for MTCH config
  lte_rrc_utf_get_next_ext_msg((byte**)&common_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_common_cfg_req_s));
  TF_ASSERT(common_cfg_req->msgr_hdr.id == LTE_CPHY_COMMON_CFG_REQ);
  TF_ASSERT(common_cfg_req->common_cfg_param.cfg_mask == (LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREAS_MCCH_SCHDL_CFG |
                                                          LTE_CPHY_COMMON_CFG_MASK_BIT_MBSFN_AREA_CFG));

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_mcch_schdl_cfg_ptr->mbsfn_area[0].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ONLY_MODIFICATION_BOUNDARY);

  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->num_mbsfn_areas == 1);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].area_id == 0);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].num_pmch == 3);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[2].
            cfg_action == LTE_L1_CONFIG);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[2].
            monitor_pattern == LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);
  TF_ASSERT(common_cfg_req->common_cfg_param.mbsfn_areas_cfg_ptr->mbsfn_area[0].pmch[2].cfg.
            schdl_period == LTE_L1_MBSFN_MCH_SCHDL_PERIOD_32RF);

  // Prepare common_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&common_cfg_cnf.msgr_hdr, LTE_CPHY_COMMON_CFG_CNF);

  common_cfg_cnf.status = E_SUCCESS;
  common_cfg_cnf.common_cfg_validity = LTE_CPHY_COMMON_CFG_CURRENT_VALID_MASK_BITS;

  // Send common_cfg_cnf to RRC
  status = msgr_send(&common_cfg_cnf.msgr_hdr, sizeof(common_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  TF_ASSERT(mac_cfg_req->cfg_data.cfg_type == LTE_L2_CFG_EMBMS);
  TF_ASSERT(mac_cfg_req->cfg_data.cfg_bitmask == LTE_MAC_EMBMS_CFG_BM);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.num_active_lc == 1);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].area_id == 0);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].pmch_id == 3);
  TF_ASSERT(mac_cfg_req->cfg_data.embms_cfg.active_lc_list[0].lc_id == 2);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);
  TF_ASSERT(rlcdl_cfg_req->cfg_reason == LTE_L2_CFG_EMBMS);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.num_added_mrb == 1);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].rb_cfg_idx == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.added_mrb_cfg_idx[0].action == LTE_RLC_RB_ACTION_ADD);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].area_id == 0);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].pmch_id == 3);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].lc_id == 2);
  TF_ASSERT(rlcdl_cfg_req->embms_cfg.mrb_cfg_base_ptr[0].mrb_id == 36);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  lte_rrc_utf_check_no_more_msgs();

}

/*===========================================================================

                                Tests

===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSEnableDisableActDeact);

void LteRrcTesteMBMSEnableDisableActDeact::Setup()
{
  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSEnableDisableActDeact::Test()
{

  uint8 i;
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  for (i = 0; i < 10; i++)
  {
    // Enable eMBMS and test the enable handling
    LteRrceMBMSEnable__Test();

    // Test eMBMS enable / disable and TMGI activate / deactivate
    LteRrcTesteMBMSEnableDisableActDeact__Test(i);
  }
}

void LteRrcTesteMBMSEnableDisableActDeact::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSConnModeEnableDisableActDeact);

void LteRrcTesteMBMSConnModeEnableDisableActDeact::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSConnModeEnableDisableActDeact::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS enable / disable and TMGI activate / deactivate
  LteRrcTesteMBMSEnableDisableActDeact__Test(0);

  // Release the unicast bearers
  LteRrcTestConnectionRelease1__Test(cell_index, FALSE);

}

void LteRrcTesteMBMSConnModeEnableDisableActDeact::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSDisableAfterActivate);

void LteRrcTesteMBMSDisableAfterActivate::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSDisableAfterActivate::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate TMGI and send a deactivate directly and verify the handling
  LteRrcTesteMBMSDisableAfterActivate__Test();

}

void LteRrcTesteMBMSDisableAfterActivate::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMCCHRelAfterHO);

void LteRrcTesteMBMSMCCHRelAfterHO::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();

}

void LteRrcTesteMBMSMCCHRelAfterHO::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Release MCCH after HO
  LteRrcTesteMBMSMCCHRelAfterHO__Test();

}

void LteRrcTesteMBMSMCCHRelAfterHO::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSInvalidSubFrameAllocationOneFrame);

void LteRrcTesteMBMSInvalidSubFrameAllocationOneFrame::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSInvalidSubFrameAllocationOneFrame::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test Invalid SubframeAllocation MCCH message
  LteRrcTesteMBMSInvalidSubFrameAllocationOneFrame__Test();

}

void LteRrcTesteMBMSInvalidSubFrameAllocationOneFrame::Teardown()
{
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSInvalidSubFrameAllocationFourFrame);

void LteRrcTesteMBMSInvalidSubFrameAllocationFourFrame::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSInvalidSubFrameAllocationFourFrame::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test Invalid SubframeAllocation MCCH message
  LteRrcTesteMBMSInvalidSubFrameAllocationFourFrame__Test();

}

void LteRrcTesteMBMSInvalidSubFrameAllocationFourFrame::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSConnModeDisableAfterActivate);

void LteRrcTesteMBMSConnModeDisableAfterActivate::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSConnModeDisableAfterActivate::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate TMGI and send a deactivate directly and verify the handling
  LteRrcTesteMBMSDisableAfterActivate__Test();

  // Release the unicast bearers
  LteRrcTestConnectionRelease1__Test(cell_index, FALSE);

}

void LteRrcTesteMBMSConnModeDisableAfterActivate::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSLTEStoppedAfterActivate);

void LteRrcTesteMBMSLTEStoppedAfterActivate::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSLTEStoppedAfterActivate::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate TMGI and send a LTE stopped directly and verify the handling
  LteRrcTesteMBMSLTEStoppedAfterActivate__Test();

}

void LteRrcTesteMBMSLTEStoppedAfterActivate::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSConnModeLTEStoppedAfterActivate);

void LteRrcTesteMBMSConnModeLTEStoppedAfterActivate::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSConnModeLTEStoppedAfterActivate::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate TMGI and send a LTE stopped directly and verify the handling
  LteRrcTesteMBMSConnModeLTEStoppedAfterActivate__Test(cell_index);

}

void LteRrcTesteMBMSConnModeLTEStoppedAfterActivate::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMcastOOSRecoverySuccess);

void LteRrcTesteMBMSMcastOOSRecoverySuccess::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSMcastOOSRecoverySuccess::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Verify the handling of successful recovery
  LteRrcTesteMBMSMcastOOSRecoverySuccess__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_SIB_UPDATE_0);

}

void LteRrcTesteMBMSMcastOOSRecoverySuccess::Teardown()
{
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMcastOOSRecoveryFailure);

void LteRrcTesteMBMSMcastOOSRecoveryFailure::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSMcastOOSRecoveryFailure::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Verify the handling of recovery failure
  LteRrcTesteMBMSMcastOOSRecoveryFailure__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_SIB_UPDATE_0);

}

void LteRrcTesteMBMSMcastOOSRecoveryFailure::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMcastOOSandUnicastOOS);

void LteRrcTesteMBMSMcastOOSandUnicastOOS::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSMcastOOSandUnicastOOS::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Verify the handling of recovery failure
  LteRrcTesteMBMSMcastOOSandUnicastOOS__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_SIB_UPDATE_0);

}

void LteRrcTesteMBMSMcastOOSandUnicastOOS::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMcastOOSRecoveryPartialSuccess);

void LteRrcTesteMBMSMcastOOSRecoveryPartialSuccess::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSMcastOOSRecoveryPartialSuccess::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_10;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate for two services in two diff areas
  LteRrcTesteMBMSActTwoSvcInTwoAreas__Test(TRUE);

  // Activate Service 0 in Area 0
  LteRrcTesteMBMSMCastOOSPartSuccessActService0InArea0__Test();

  // Verify the handling of partial recovery
  LteRrcTesteMBMSMcastOOSRecoveryPartialSuccess__Test(cell_index, group_index);

}

void LteRrcTesteMBMSMcastOOSRecoveryPartialSuccess::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(NO_RUN, LteRrcTesteMBMSUcastOOSDuringActivate);

void LteRrcTesteMBMSUcastOOSDuringActivate::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSUcastOOSDuringActivate::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Verify the handling of unicast OOS during activate
  LteRrcTesteMBMSUcastOOSDuringActivate__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_SIB_UPDATE_0);

}

void LteRrcTesteMBMSUcastOOSDuringActivate::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSDeactivateDuringUcastOOS);

void LteRrcTesteMBMSDeactivateDuringUcastOOS::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSDeactivateDuringUcastOOS::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate TMGI and send an oos_ind and verify the handling of successful recovery
  LteRrcTesteMBMSDeactivateDuringUcastOOS__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_SIB_UPDATE_0);

}

void LteRrcTesteMBMSDeactivateDuringUcastOOS::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSUcastOOSRecoverySuccess);

void LteRrcTesteMBMSUcastOOSRecoverySuccess::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSUcastOOSRecoverySuccess::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate TMGI and send an oos_ind and verify the handling of successful recovery
  LteRrcTesteMBMSUcastOOSRecoverySuccess__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_SIB_UPDATE_0);

}

void LteRrcTesteMBMSUcastOOSRecoverySuccess::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivateDuringUcastOOSCamping);

void LteRrcTesteMBMSActivateDuringUcastOOSCamping::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActivateDuringUcastOOSCamping::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate TMGI and send an oos_ind and verify the handling of successful recovery
  LteRrcTesteMBMSActivateDuringUcastOOSCamping__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_SIB_UPDATE_0);

}

void LteRrcTesteMBMSActivateDuringUcastOOSCamping::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSUcastOOSRecoveryFailure);

void LteRrcTesteMBMSUcastOOSRecoveryFailure::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSUcastOOSRecoveryFailure::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate TMGI and send an oos_ind and verify the handling of recovery failure
  LteRrcTesteMBMSUcastOOSRecoveryFailure__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_SIB_UPDATE_0);

}

void LteRrcTesteMBMSUcastOOSRecoveryFailure::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSUcastOOSRecoveryPartialSuccess);

void LteRrcTesteMBMSUcastOOSRecoveryPartialSuccess::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSUcastOOSRecoveryPartialSuccess::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_10;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate eMBMS services in two MBSFN areas
  LteRrcTesteMBMSActTwoSvcInTwoAreas__Test(FALSE);

  // Test eMBMS partial success during unicast OOS recovery
  LteRrcTesteMBMSUcastOOSRecoveryPartialSuccess__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_SIB_UPDATE_0);

}

void LteRrcTesteMBMSUcastOOSRecoveryPartialSuccess::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSSib2Sib13UpdateMcchUnchange);

void LteRrcTesteMBMSSib2Sib13UpdateMcchUnchange::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSSib2Sib13UpdateMcchUnchange::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate service
  LteRrcTesteMBMSActivate__Test();

  // Test eMBMS sib2 update
  LteRrcTesteMBMSSib2Update__Test(cell_index, LTE_RRC_TEST_SIB_UPDATE_1, TRUE);

  // Test eMBMS sib13 update
  LteRrcTesteMBMSSib13Update__Test(cell_index, LTE_RRC_TEST_SIB_UPDATE_2);

}

void LteRrcTesteMBMSSib2Sib13UpdateMcchUnchange::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSSib2Sib13UpdateMcchChange);

void LteRrcTesteMBMSSib2Sib13UpdateMcchChange::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSSib2Sib13UpdateMcchChange::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate service
  LteRrcTesteMBMSActivate__Test();

  // Test eMBMS sib2 update
  LteRrcTesteMBMSSib2Update__Test(cell_index, LTE_RRC_TEST_SIB_UPDATE_1, TRUE);

  // Test eMBMS sib13 update
  LteRrcTesteMBMSSib13Update__Test2(cell_index, LTE_RRC_TEST_SIB_UPDATE_2);

}

void LteRrcTesteMBMSSib2Sib13UpdateMcchChange::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActDeactTwoSvcInOneMbsfnArea);

void LteRrcTesteMBMSActDeactTwoSvcInOneMbsfnArea::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActDeactTwoSvcInOneMbsfnArea::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate of two services in the same area
  LteRrcTesteMBMSActTwoSvcInSameArea__Test();

  // Test eMBMS TMGI deactivate of two services in the same area
  LteRrcTesteMBMSDeactTwoSvcInSameArea__Test();

  // Test eMBMS disable handling
  LteRrceMBMSDisable__Test();

}

void LteRrcTesteMBMSActDeactTwoSvcInOneMbsfnArea::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActDeactTwoSvcInTwoMbsfnArea);

void LteRrcTesteMBMSActDeactTwoSvcInTwoMbsfnArea::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActDeactTwoSvcInTwoMbsfnArea::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_10;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate for two services in two diff areas
  LteRrcTesteMBMSActTwoSvcInTwoAreas__Test(FALSE);

  // Test eMBMS TMGI deactivate for two services in two diff areas
  LteRrcTesteMBMSDeactTwoSvcInTwoAreas__Test();

  // Test eMBMS disable handling
  LteRrceMBMSDisable__Test();

}

void LteRrcTesteMBMSActDeactTwoSvcInTwoMbsfnArea::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActDeactEightSvcInEightMbsfnArea);

void LteRrcTesteMBMSActDeactEightSvcInEightMbsfnArea::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActDeactEightSvcInEightMbsfnArea::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_11;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  uint8 i;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  for (i = 0; i < 10; i++)
  {
    // Enable eMBMS and test the enable handling
    LteRrceMBMSEnable__Test();

    // Test eMBMS TMGI activate
    LteRrcTesteMBMSActSvc__Test(0, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1), i);
    if (i == 0)
    {
      /* Cache those MCCH pdu*/
      LteRrcTesteMBMSGetAllMcchPdus__Test();
      LteRrceMBMSGetAvailTmgiList(2);
    }
    LteRrcTesteMBMSActSvc__Test(1, lte_rrc_test_embms_mcch_msg2, sizeof(lte_rrc_test_embms_mcch_msg2), i);
    LteRrcTesteMBMSActSvc__Test(2, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3), i);
    LteRrcTesteMBMSActSvc__Test(3, lte_rrc_test_embms_mcch_msg4, sizeof(lte_rrc_test_embms_mcch_msg4), i);
    LteRrcTesteMBMSActSvc__Test(4, lte_rrc_test_embms_mcch_msg5, sizeof(lte_rrc_test_embms_mcch_msg5), i);
    LteRrcTesteMBMSActSvc__Test(5, lte_rrc_test_embms_mcch_msg6, sizeof(lte_rrc_test_embms_mcch_msg6), i);
    LteRrcTesteMBMSActSvc__Test(6, lte_rrc_test_embms_mcch_msg7, sizeof(lte_rrc_test_embms_mcch_msg7), i);
    LteRrcTesteMBMSActSvc__Test(7, lte_rrc_test_embms_mcch_msg8, sizeof(lte_rrc_test_embms_mcch_msg8), i);

    // Test eMBMS TMGI deactivate
    LteRrcTesteMBMSDeactSvc__Test(0);
    LteRrcTesteMBMSDeactSvc__Test(1);
    LteRrcTesteMBMSDeactSvc__Test(2);
    LteRrcTesteMBMSDeactSvc__Test(3);
    LteRrcTesteMBMSDeactSvc__Test(4);
    LteRrcTesteMBMSDeactSvc__Test(5);
    LteRrcTesteMBMSDeactSvc__Test(6);
    LteRrcTesteMBMSDeactSvc__Test(7);

    // Disable eMBMS and test the disable handling
    LteRrceMBMSDisable__Test();
  }

}

void LteRrcTesteMBMSActDeactEightSvcInEightMbsfnArea::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSReselToNewCellWithoutMbsfnArea);

void LteRrcTesteMBMSReselToNewCellWithoutMbsfnArea::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSReselToNewCellWithoutMbsfnArea::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_9, tgt_cell_index = LTE_RRC_TEST_CELL_2;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  uint32 buf_len = 0;
  uint8 i = 0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(src_cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(src_cell_index, group_index);

  for (i = 0; i < 10; i++)
  {
    // Enable eMBMS and test the enable handling
    LteRrceMBMSEnable__Test();

    // Test eMBMS TMGI activate
    LteRrcTesteMBMSActivate__Test();

    // Test reselection to new cell without eMBMS coverage
    LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

    if (i == 0)
    {
      // Get RRC to the point where we have acquired a cell and collected mandatory sibs
      LteRrcTestSibCollectionPriorToCamping2__Test(tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_0);
    }
    else
    {
      LteRrcTestSibCollectionPriorToCampingGeneric__Test(tgt_cell_index, group_index, FALSE);
    }

    LteRrcTesteMBMSSetCommonCfgMask();

    if (i == 0)
    {
      // Get RRC to camped state
      LteRrcTestCampingAndLowerLayerConfig2__Test(tgt_cell_index);

      // Deact all service because out of coverage
      LteRrcTesteMBMSOutofCoverage__Test(TRUE, TRUE, TRUE);
    }
    else
    {
      LteRrcTestCampingAndLowerLayerConfigGeneric__Test(tgt_cell_index, group_index);

      // Deact all service because out of coverage
      LteRrcTesteMBMSOutofCoverage__Test(TRUE, FALSE, TRUE);
    }

    // Test reselection to new cell without eMBMS coverage
    LteRrcTestReselectionStart__Test(tgt_cell_index, src_cell_index);

    LteRrcTestSibCollectionPriorToCampingEMBMS__Test2(src_cell_index, group_index, FALSE);

    // Get RRC to camped state
    LteRrcTestCampingAndLowerLayerConfigGeneric__Test(src_cell_index, group_index);

    /* Receive the coverage state ind thrown on receiving the enable req */
    lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
    TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
    TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_AVAILABLE);

    LteRrceMBMSDisable__Test();
  }
}

void LteRrcTesteMBMSReselToNewCellWithoutMbsfnArea::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSReselToNewCellSameMbsfnArea);

void LteRrcTesteMBMSReselToNewCellSameMbsfnArea::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSReselToNewCellSameMbsfnArea::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  LteRrcTesteMBMSActivate__Test();

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_CELL_12);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test2(LTE_RRC_TEST_CELL_12, LTE_RRC_TEST_SIB_UPDATE_0, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(LTE_RRC_TEST_CELL_12, LTE_RRC_TEST_SIB_UPDATE_0);

  // Test sib_updated_indi handling after reselection
  LteRrcTesteMBMSSib13UpdateFromCellResel__Test();
}

void LteRrcTesteMBMSReselToNewCellSameMbsfnArea::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMCastOOSOnRetainedAreaBeforeSIBUPdatedOnTargetCell);

void LteRrcTesteMBMSMCastOOSOnRetainedAreaBeforeSIBUPdatedOnTargetCell::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSMCastOOSOnRetainedAreaBeforeSIBUPdatedOnTargetCell::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, FALSE);

  // Test MCast OOS on retained area before SIB updated indi is received on the target cell
  LteRrcTesteMBMSMCastOOSOnRetainedAreaBeforeSIBUpdatedOnTargetCell__Test(src_cell_index, tgt_cell_index, group_index);
}

void LteRrcTesteMBMSMCastOOSOnRetainedAreaBeforeSIBUPdatedOnTargetCell::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSCampOnNewCellAfterOOSSameMBSFNArea);

void LteRrcTesteMBMSCampOnNewCellAfterOOSSameMBSFNArea::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSCampOnNewCellAfterOOSSameMBSFNArea::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  uint32 buf_len = 0;
  lte_mac_cfg_req_msg_s *mac_cfg_req;
  lte_mac_cfg_cnf_msg_s mac_cfg_cnf;

  lte_rlcdl_cfg_req_s *rlcdl_cfg_req;
  lte_rlc_cfg_cnf_s rlcdl_cfg_cnf;

  lte_errno_e status;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  LteRrcTesteMBMSActivate__Test();

  /* Unicast OOS recovery but camp on another cell without eMBMS coverage */
  LteRrcTesteMBMSUcastOOSRecoverySuccessDiffCell__Test(LTE_RRC_TEST_CELL_13, LTE_RRC_TEST_SIB_UPDATE_0);

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);

  // ---------------------------------------------
  // We expect a mac_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_cfg_req_msg_s));
  TF_ASSERT(mac_cfg_req->hdr.id == LTE_MAC_CFG_REQ);

  // Prepare mac_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_cfg_cnf.hdr, LTE_MAC_CFG_CNF);

  mac_cfg_cnf.status = E_SUCCESS;

  // Send mac_cfg_cnf to RRC
  status = msgr_send(&mac_cfg_cnf.hdr, sizeof(mac_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a rlcdl_cfg_req message from RRC for MTCH setup
  lte_rrc_utf_get_next_ext_msg((byte**)&rlcdl_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rlcdl_cfg_req_s));
  TF_ASSERT(rlcdl_cfg_req->msg_hdr.id == LTE_RLCDL_CFG_REQ);

  // Prepare rlcdl_cfg_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlcdl_cfg_cnf.msg_hdr, LTE_RLCDL_CFG_CNF);

  rlcdl_cfg_cnf.cfg_status = E_SUCCESS;

  // Send rlcdl_cfg_cnf to RRC
  status = msgr_send(&rlcdl_cfg_cnf.msg_hdr, sizeof(rlcdl_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  LteRrcTesteMBMSActGuardTmrExpiry();

  // Continue eMBMS service
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test4(LTE_RRC_TEST_CELL_13, LTE_RRC_TEST_SIB_UPDATE_1);

  // Test sib_updated_indi handling after reselection
  //LteRrcTesteMBMSSib13UpdateFromOOS__Test();
}

void LteRrcTesteMBMSCampOnNewCellAfterOOSSameMBSFNArea::Teardown()
{
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivateDuringIRATCGI);

void LteRrcTesteMBMSActivateDuringIRATCGI::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
#ifdef FEATURE_QTF_CRM_TODO
  TF_STUB(lte_rrc_cap_get_fgi_bit) = lte_rrc_test_cap_get_fgi_bit_1;
#endif
}

void LteRrcTesteMBMSActivateDuringIRATCGI::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Setup SRB2 and a DRB
  LteRrcTestConnectionReconfig1__Test();

  // Test Activate TMGI during IRAT CGI
  LteRrcTesteMBMSActivateDuringIRATCGI__Test();
}

void LteRrcTesteMBMSActivateDuringIRATCGI::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSDeactivateDuringIRATCGI);

void LteRrcTesteMBMSDeactivateDuringIRATCGI::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
#ifdef FEATURE_QTF_CRM_TODO
  TF_STUB(lte_rrc_cap_get_fgi_bit) = lte_rrc_test_cap_get_fgi_bit_1;
#endif
}

void LteRrcTesteMBMSDeactivateDuringIRATCGI::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Setup SRB2 and a DRB
  LteRrcTestConnectionReconfig1__Test();

  // Test Deactivate TMGI during IRAT CGI
  LteRrcTesteMBMSDeactivateDuringIRATCGI__Test();
}

void LteRrcTesteMBMSDeactivateDuringIRATCGI::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSAvailTMGIReqDuringIRATCGI);

void LteRrcTesteMBMSAvailTMGIReqDuringIRATCGI::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
#ifdef FEATURE_QTF_CRM_TODO
  TF_STUB(lte_rrc_cap_get_fgi_bit) = lte_rrc_test_cap_get_fgi_bit_1;
#endif
}

void LteRrcTesteMBMSAvailTMGIReqDuringIRATCGI::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Setup SRB2 and a DRB
  LteRrcTestConnectionReconfig1__Test();

  // Test Available TMGI list req during IRAT CGI
  LteRrcTesteMBMSAvailTMGIReqDuringIRATCGI__Test();
}

void LteRrcTesteMBMSAvailTMGIReqDuringIRATCGI::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSDisableDuringIRATCGI);

void LteRrcTesteMBMSDisableDuringIRATCGI::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
#ifdef FEATURE_QTF_CRM_TODO
  TF_STUB(lte_rrc_cap_get_fgi_bit) = lte_rrc_test_cap_get_fgi_bit_1;
#endif

}

void LteRrcTesteMBMSDisableDuringIRATCGI::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Setup SRB2 and a DRB
  LteRrcTestConnectionReconfig1__Test();

  // Test Disable req during IRAT CGI
  LteRrcTesteMBMSDisableDuringIRATCGI__Test();
}

void LteRrcTesteMBMSDisableDuringIRATCGI::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivateDuringIRATBPLMNSrch);

void LteRrcTesteMBMSActivateDuringIRATBPLMNSrch::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActivateDuringIRATBPLMNSrch::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test Activate TMGI during IRAT BPLMN Srch
  LteRrcTesteMBMSActivateDuringIRATBPLMNSrch__Test();
}

void LteRrcTesteMBMSActivateDuringIRATBPLMNSrch::Teardown()
{
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSDeactivateDuringIRATBPLMNSrch);

void LteRrcTesteMBMSDeactivateDuringIRATBPLMNSrch::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSDeactivateDuringIRATBPLMNSrch::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test Deactivate TMGI during IRAT BPLMN Srch
  LteRrcTesteMBMSDeactivateDuringIRATBPLMNSrch__Test();
}

void LteRrcTesteMBMSDeactivateDuringIRATBPLMNSrch::Teardown()
{
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSAvailTMGIReqDuringIRATBPLMNSrch);

void LteRrcTesteMBMSAvailTMGIReqDuringIRATBPLMNSrch::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
 #ifdef FEATURE_QTF_CRM_TODO
  TF_STUB(lte_rrc_cap_get_fgi_bit) = lte_rrc_test_cap_get_fgi_bit_1;
#endif
}

void LteRrcTesteMBMSAvailTMGIReqDuringIRATBPLMNSrch::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test Available TMGI list req during IRAT BPLMN Search
  LteRrcTesteMBMSAvailTMGIReqDuringIRATBPLMNSrch__Test();
}

void LteRrcTesteMBMSAvailTMGIReqDuringIRATBPLMNSrch::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSDisableDuringIRATBPLMNSrch);

void LteRrcTesteMBMSDisableDuringIRATBPLMNSrch::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSDisableDuringIRATBPLMNSrch::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test Disable TMGI during IRAT BPLMN Srch
  LteRrcTesteMBMSDisableDuringIRATBPLMNSrch__Test();
}

void LteRrcTesteMBMSDisableDuringIRATBPLMNSrch::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSDeactivateDisableDuringIRATBPLMNSrch);

void LteRrcTesteMBMSDeactivateDisableDuringIRATBPLMNSrch::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSDeactivateDisableDuringIRATBPLMNSrch::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test Deactivate TMGI and Disable during IRAT BPLMN Srch
  LteRrcTesteMBMSDeactivateDisableDuringIRATBPLMNSrch__Test();
}

void LteRrcTesteMBMSDeactivateDisableDuringIRATBPLMNSrch::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSCombinedActDeact);

void LteRrcTesteMBMSCombinedActDeact::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSCombinedActDeact::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS enable and combined TMGI activate / deactivate
  LteRrcTesteMBMSCombinedActDeact__Test();
}

void LteRrcTesteMBMSCombinedActDeact::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test Scenario:
   Cell 11 has 8 areas 0 - 7, 1 service is active in area 0
   Reselect to cell 14
   Cell 14 has 8 areas 0,1,8,9,10,11,12,13, service move from area 0 to area 8
*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSInterMBSFNAreaMobility1);

void LteRrcTesteMBMSInterMBSFNAreaMobility1::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSInterMBSFNAreaMobility1::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_11;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  LteRrcTesteMBMSActSvc__Test(0, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1), 0);
  //LteRrcTesteMBMSActSvc__Test2();

  /* Cache other MCCH pdus */
  LteRrcTesteMBMSGetAllMcchPdus__Test();

  LteRrceMBMSGetAvailTmgiList(2);

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_11, LTE_RRC_TEST_CELL_14);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test3(LTE_RRC_TEST_CELL_14, LTE_RRC_TEST_SIB_UPDATE_0);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(LTE_RRC_TEST_CELL_14, LTE_RRC_TEST_SIB_UPDATE_0);

  // Test inter MBSFN area mobility handling after reselection
  LteRrcTesteMBMSInterMBSFNAreaMobility__Test1();
}

void LteRrcTesteMBMSInterMBSFNAreaMobility1::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test Scenario:
   Cell 11 has 8 areas 0 - 7, 1 service is active in area 0, 1 service is active in area 2
   Reselect to cell 14
   Cell 14 has 8 areas 0,1,8,9,10,11,12,13, service 1 remains in area 0 and
   the other service move from area 2 to area 8
*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSInterMBSFNAreaMobility2);

void LteRrcTesteMBMSInterMBSFNAreaMobility2::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSInterMBSFNAreaMobility2::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_11;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  LteRrcTesteMBMSActSvc__Test(0, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1), 0);

  /* Cache other MCCH pdus */
  LteRrcTesteMBMSGetAllMcchPdus__Test();

  LteRrceMBMSGetAvailTmgiList(2);

  // Test eMBMS TMGI activate
  LteRrcTesteMBMSActSvc__Test2();

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_11, LTE_RRC_TEST_CELL_14);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test3(LTE_RRC_TEST_CELL_14, LTE_RRC_TEST_SIB_UPDATE_0);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(LTE_RRC_TEST_CELL_14, LTE_RRC_TEST_SIB_UPDATE_0);

  // Test inter MBSFN area mobility handling after reselection
  LteRrcTesteMBMSInterMBSFNAreaMobility__Test2();
}

void LteRrcTesteMBMSInterMBSFNAreaMobility2::Teardown()
{
  lte_rrc_utf_teardown();
}



/* Test Scenario:
   Cell 11 has 8 areas 0 - 7, 1 service is active in area 0, 1 service is active in area 2
   Reselect to cell 14
   Cell 14 has 8 areas 0,1,8,9,10,11,12,13, service 1 remains in area 0 and
   the other service move from area 2 to area 8
   Along with this there is graceful DEACTIVATION of the services
*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSInterMBSFNAreaMobility3);

void LteRrcTesteMBMSInterMBSFNAreaMobility3::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSInterMBSFNAreaMobility3::Test()
{
     lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_11;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  LteRrcTesteMBMSActSvc__Test(0, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1), 0);

  /* Cache other MCCH pdus */
  LteRrcTesteMBMSGetAllMcchPdus__Test();

  LteRrceMBMSGetAvailTmgiList(2);

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_11, LTE_RRC_TEST_CELL_14);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test3(LTE_RRC_TEST_CELL_14, LTE_RRC_TEST_SIB_UPDATE_0);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(LTE_RRC_TEST_CELL_14, LTE_RRC_TEST_SIB_UPDATE_0);

  // Test inter MBSFN area mobility handling after reselection
  LteRrcTesteMBMSInterMBSFNAreaMobility__Test3();

}

void LteRrcTesteMBMSInterMBSFNAreaMobility3::Teardown()
{
  lte_rrc_utf_teardown();
}


/* Test Scenario:
   One cell has 2 areas, 0-1, 1 service is active in area 0
   Reselect to another cell with service from area 0 in area 1
*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSInterMBSFNAreaMobilityTwotoOneArea);

void LteRrcTesteMBMSInterMBSFNAreaMobilityTwotoOneArea::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSInterMBSFNAreaMobilityTwotoOneArea::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_10;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  //LteRrcTesteMBMSActSvc__Test(1, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1), 0);
  // Activate service
  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetupForTwoAreas();

  LteRrcTestMTCHSetupArea0Service1In2Areas(FALSE);
  //LteRrcTestMTCHSetupArea0PMCH2LC1(FALSE, TRUE);

  LteRrcTestActTMGICnfiAndActListIndForService1();

  /* Cache other MCCH pdus */
  //LteRrcTesteMBMSGetAllMcchPdus__Test();

  // Test eMBMS TMGI activate
  //LteRrcTesteMBMSActSvc__Test2();

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_10, LTE_RRC_TEST_CELL_17);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test2(LTE_RRC_TEST_CELL_17, LTE_RRC_TEST_SIB_UPDATE_0, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(LTE_RRC_TEST_CELL_17, LTE_RRC_TEST_SIB_UPDATE_0);

  // Test inter MBSFN area mobility handling after reselection
  LteRrcTesteMBMSInterMBSFNAreaMobilityTwotoOneArea__Test();
}

void LteRrcTesteMBMSInterMBSFNAreaMobilityTwotoOneArea::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMCCHPDUReceivedDuringSIbreadingintargetCell);

void LteRrcTesteMBMSMCCHPDUReceivedDuringSIbreadingintargetCell::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSMCCHPDUReceivedDuringSIbreadingintargetCell::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_10;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell

  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate

  // Activate service
  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetupForTwoAreas();

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_10, LTE_RRC_TEST_CELL_0);

  /* handling of activate while reselecting from a cell where requested SAI is not present  to a cell
    where where requested SAI is present*/
  LteRrcTesteMBMSActduringReselToCellWithNoeMBMS1__Test(LTE_RRC_TEST_CELL_10, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_3);
}

void LteRrcTesteMBMSMCCHPDUReceivedDuringSIbreadingintargetCell::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMCCHPDUReceivedDuringLLCConfigintargetCell);

void LteRrcTesteMBMSMCCHPDUReceivedDuringLLCConfigintargetCell::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSMCCHPDUReceivedDuringLLCConfigintargetCell::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_10;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  uint32 buf_len = 0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell

  LteRrcTestServiceRequestBandScanSuccess3__Test(LTE_RRC_TEST_CELL_0);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCamping3__Test(LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_3);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(LTE_RRC_TEST_CELL_0,
                                              LTE_RRC_TEST_SIB_UPDATE_3);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_CELL_10);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate

  // Activate service
  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetupForTwoAreas();

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_10, LTE_RRC_TEST_CELL_0);

  /* handling of activate while reselecting from a cell where requested SAI is not present  to a cell
    where where requested SAI is present*/
  LteRrcTesteMBMSActduringReselToCellWithNoeMBMS2__Test(LTE_RRC_TEST_CELL_10, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_3);
}

void LteRrcTesteMBMSMCCHPDUReceivedDuringLLCConfigintargetCell::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMCCHPDUReceivedbeforeReseltotargetCell);

void LteRrcTesteMBMSMCCHPDUReceivedbeforeReseltotargetCell::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSMCCHPDUReceivedbeforeReseltotargetCell::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_10;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell

  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate

  // Activate service
  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetupForTwoAreas();

  LteRrcTestMTCHSetupArea0Service1In2Areas(FALSE);

  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Send MCCH PDU in area 1 containing old service in area 0
  LteRrcTestSendMCCHPDU(0, 1, 65, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1));

  lte_rrc_utf_wait_for_done();

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_10, LTE_RRC_TEST_CELL_0);

  /* handling of activate while reselecting from a cell where requested SAI is not present  to a cell
    where where requested SAI is present*/
  LteRrcTesteMBMSActduringReselToCellWithNoeMBMS3__Test(LTE_RRC_TEST_CELL_10, LTE_RRC_TEST_CELL_0, LTE_RRC_TEST_SIB_UPDATE_3);
}

void LteRrcTesteMBMSMCCHPDUReceivedbeforeReseltotargetCell::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test Scenario:
   One cell has 2 areas, 0-1, 1 service is active in area 0, 1 service is active in area 2
   Reselect to another cell with service from area 0 in area 2
   Send Activate tmgi before sending MCCH PDU
*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSInterMBSFNAreaMobilityActivateBeforePDU);

void LteRrcTesteMBMSInterMBSFNAreaMobilityActivateBeforePDU::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSInterMBSFNAreaMobilityActivateBeforePDU::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_10;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  //LteRrcTesteMBMSActSvc__Test(1, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1), 0);
  // Activate service
  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetupForTwoAreas();

  LteRrcTestMTCHSetupArea0Service1In2Areas(FALSE);
  //LteRrcTestMTCHSetupArea0PMCH2LC1(FALSE, TRUE);

  LteRrcTestActTMGICnfiAndActListIndForService1();

  /* Cache other MCCH pdus */
  //LteRrcTesteMBMSGetAllMcchPdus__Test();

  // Test eMBMS TMGI activate
  //LteRrcTesteMBMSActSvc__Test2();

  LteRrcSendeMBMSDeactivateReqForService1__WithCnf();

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_10, LTE_RRC_TEST_CELL_17);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test2(LTE_RRC_TEST_CELL_17, LTE_RRC_TEST_SIB_UPDATE_0, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(LTE_RRC_TEST_CELL_17, LTE_RRC_TEST_SIB_UPDATE_0);

  // Test inter MBSFN area mobility handling after reselection
  LteRrcTesteMBMSInterMBSFNAreaMobilityActivateBeforePDU__Test();
}

void LteRrcTesteMBMSInterMBSFNAreaMobilityActivateBeforePDU::Teardown()
{
  lte_rrc_utf_teardown();
}
/*===========================================================================
This test monitors MCCH timer expiry during IRAT CGI. Timer expiry
should occur after revoking IRAT CGI
===========================================================================*/



TF_DEFINE_TEST_CASE(COMPONENT, LteRrcEmpMcchWtTimerExpDuringIratCgi);

void LteRrcEmpMcchWtTimerExpDuringIratCgi::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
#ifdef FEATURE_QTF_CRM_TODO
  TF_STUB(lte_rrc_cap_get_fgi_bit) = lte_rrc_test_cap_get_fgi_bit_1;
#endif

}

void LteRrcEmpMcchWtTimerExpDuringIratCgi::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Setup SRB2 and a DRB
  LteRrcTestConnectionReconfig1__Test();

  // Test Activate TMGI during IRAT CGI
  LteRrcTesteMBMSMCCHWaitTimerExpDuringIRATCGI__Test();

  lte_rrc_utf_reset();
}
void LteRrcEmpMcchWtTimerExpDuringIratCgi::Teardown()
{
    lte_rrc_test_sec_teardown();
    lte_rrc_utf_teardown();
}


/*===========================================================================
This test monitors MCCH timer expiry during BPLMN.
===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcEmpMcchWtTimerExpDuringIratBplmn);

void LteRrcEmpMcchWtTimerExpDuringIratBplmn::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

}

void LteRrcEmpMcchWtTimerExpDuringIratBplmn::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test Activate TMGI during IRAT CGI
  LteRrcTesteMBMSMCCHWaitTimerExpDuringIratBPLMN__Test();

  lte_rrc_utf_reset();
}
void LteRrcEmpMcchWtTimerExpDuringIratBplmn::Teardown()
{
    lte_rrc_utf_teardown();
}

/*=====================================================*/
/*This monitors automatic plmn search*/
/*=====================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcEmpMcchWtTimerExpDuringIratBplmnAutomatic);

void LteRrcEmpMcchWtTimerExpDuringIratBplmnAutomatic::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

}

void LteRrcEmpMcchWtTimerExpDuringIratBplmnAutomatic::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test Activate TMGI during IRAT CGI
  LteRrcTesteMBMSMCCHWaitTimerExpDuringIratBPLMNAutomatic__Test();

  lte_rrc_utf_reset();
}
void LteRrcEmpMcchWtTimerExpDuringIratBplmnAutomatic::Teardown()
{
    lte_rrc_utf_teardown();
}


/*============================================================
 Test case for HAndling MCCH wait timer during Manual LTE PLMN
 ==============================================================*/


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcEmpMcchWtTimerExpDuringManualLtePlmn);

void LteRrcEmpMcchWtTimerExpDuringManualLtePlmn::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

}

void LteRrcEmpMcchWtTimerExpDuringManualLtePlmn::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test Activate TMGI during IRAT CGI
  LteRrcTesteMBMSMCCHWaitTimerExpDuringManualLTEPLMN__Test();

  lte_rrc_utf_reset();
}
void LteRrcEmpMcchWtTimerExpDuringManualLtePlmn::Teardown()
{
    lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTestEMBMSduringRedirFromLteToDo);

void LteRrcTestEMBMSduringRedirFromLteToDo::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
    lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                      sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}


void LteRrcTestEMBMSduringRedirFromLteToDo::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate TMGI
  LteRrcSendeMBMSActivateReqForService1();
  LteRrcTestMCCHSetup();
  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Release the RRC connection
  LteRrcTestRedirFromLteConnectionRelease1__Test( cell_index,
                                                  group_index,
                                                  LTE_RRC_TEST_IRAT_HRPD,
                                                  FALSE,
                                                  FALSE,
                                                  FALSE);

  // Verify that LTE stack has been suspended
  LteRrcTestRedirVerifyReqToSuspendWitheMBMS(1);

  // IRAT Redirection Start
  LteRrcTestRedirVerifyReqToTargetRAT ( LTE_RRC_TEST_IRAT_HRPD );

  // Verify release of TMGIs during IRAT Redirection Success
  LteRrcTestEMBMSDuringRedirFromLteToDoSuccess__Test();
}


void LteRrcTestEMBMSduringRedirFromLteToDo::Teardown()
{
    lte_rrc_test_sec_teardown();
    lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSCoverageIndDuringReselBetweenLandW);

void LteRrcTesteMBMSCoverageIndDuringReselBetweenLandW::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list) /
                    sizeof(lte_rrc_test_embms_umid_list[0]));

}/* LteRrcTesteMBMSCoverageIndDuringReselBetweenLandW::Setup() */


void LteRrcTesteMBMSCoverageIndDuringReselBetweenLandW::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Trigger DO Reselection
  LteRrcTestReselTriggerResel (LTE_RRC_TEST_IRAT_W, cell_index);

  // Verify that LTE stack has been suspended
  LteRrcTestReselVerifyReqToSuspend (LTE_RRC_TEST_IRAT_W );

  // Send suspend confirmation along with time transfer info.
  // Wait for IRAT Reselection Start to be sent to W stack
  LteRrcTestReselVerifyReqToTargetRAT (LTE_RRC_TEST_IRAT_W );

  // IRAT Reselection Complete
  LteRrcTestDeactivateWheneMBMSEnabled__Test();

  // Trigger IRAT Resel to LTE from W
  LteRrcTestToLteCommonSendReselFromW (cell[cell_index].earfcn,
                                       cell[cell_index].phys_cell_id);

  // Verify that IRAT Manager activates LTE
  LteRrcTestToLteCommonVerifyML1Start ();
  LteRrcTestToLteCommonSendML1StartCnf ();

  // After LTE successfully activates LTE, it sends the request to CSP
  // Verify that CSP starts cell acq with ML1
  LteRrcTestToLteCommonVerifyML1AcqReq ( LTE_CPHY_ACQ_CELL );

  LteRrcTestToLteCommonSendML1AcqCnf (cell[cell_index].earfcn,
                                      cell[cell_index].phys_cell_id,
                                      E_SUCCESS);

  // Collect SIBs and pass FALSE to indicate value tag matches
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test2(cell_index, group_index, FALSE);

  // Get RRC to camped state
  LteRrcTestToLteCampingAndLowerLayerConfigGeneric(cell_index,
                                                   group_index,
                                                   FALSE,
                                                   LTE_RRC_TEST_IRAT_TO_LTE_ABORT_NONE,
                                                   LTE_RRC_TEST_IRAT_W,
                                                   LTE_RRC_IRAT_TO_LTE_RESEL_PROC);

  // Verify Resel Success response to W
  LteRrcTestToLteCommonVerifyReselSuccessToW();


  // We expect a activation_ind message from RRC after it camps
  LteRrcTestToLteCommonVerifyNASActivationInd( LTE_RRC_ACT_IRAT_CELL_RESEL );

  //Send back Activation Response
  LteRrcTestToLteCommonSendNASActivationRsp(TRUE);

}/* LteRrcTesteMBMSCoverageIndDuringReselBetweenLandW::Test() */


void LteRrcTesteMBMSCoverageIndDuringReselBetweenLandW::Teardown()
{
  lte_rrc_utf_teardown();
}/* LteRrcTesteMBMSCoverageIndDuringReselBetweenLandW::Teardown() */

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSCFGReqDuringConnRelease);

void LteRrcTesteMBMSCFGReqDuringConnRelease::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
    lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                      sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}


void LteRrcTesteMBMSCFGReqDuringConnRelease::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate TMGI
  LteRrcSendeMBMSActivateReqForService1();
  LteRrcTestMCCHSetup();
  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Verify eMBMS config req sent to LLC during Connection Release processing
  LteRrcTestEMBMSConfigReqDuringConnRelease__Test(cell_index, group_index);
}


void LteRrcTesteMBMSCFGReqDuringConnRelease::Teardown()
{
    lte_rrc_test_sec_teardown();
    lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTestDeactivateAfterCPHYAbort);

void LteRrcTestDeactivateAfterCPHYAbort::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
    lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                      sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}


void LteRrcTestDeactivateAfterCPHYAbort::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate TMGI
  LteRrcSendeMBMSActivateReqForService1();
  LteRrcTestMCCHSetup();
  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Send another service req
  LteRrcTestServiceRequestBandScanInIdleCamped__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionOnSameCellAfterOOSEMBMS__Test(cell_index, group_index);

  // Let RRC to camp on the same cell where we were
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test MCCH reconfiguration after SIB updated indi is received
  LteRrcTestMTCHSetupGeneric(0,1,2, false, LTE_CPHY_MBSFN_AREA_MONITOR_ALL_OCCASIONS);

  // Verify handling of Deactive TMGI req after CPHY Abort during above service req
  LteRrcTestDeactivateAfterCPHYAbort__Test(cell_index, group_index);
}


void LteRrcTestDeactivateAfterCPHYAbort::Teardown()
{
    lte_rrc_test_sec_teardown();
    lte_rrc_utf_teardown();
}

/*CFG CNF failure handling for MTCH Setup*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSCfgCnfDuringMcchSetupFailure);

void LteRrcTesteMBMSCfgCnfDuringMcchSetupFailure::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
    lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                      sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}


void LteRrcTesteMBMSCfgCnfDuringMcchSetupFailure::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Verify handling of MTCH Setup failure
  LteRrcTesteMBMSCfgCnfDuringMcchSetupFailure__Test(cell_index, group_index);

}


void LteRrcTesteMBMSCfgCnfDuringMcchSetupFailure::Teardown()
{
    lte_rrc_utf_teardown();
}

/*============================================================
 Test case for HAndling MCCH wait timer expiry during Acquisition due to service req while
 trying to activate a TMGI
 ==============================================================*/


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcMcchWtTimerExpDuringAcqBeforeTMGIAct);

void LteRrcMcchWtTimerExpDuringAcqBeforeTMGIAct::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

}

void LteRrcMcchWtTimerExpDuringAcqBeforeTMGIAct::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test MCCH timer expiry during acquisition req sent due to Service req from NAS
  LteRrcMcchWtTimerExpDuringAcqBeforeTMGIAct__Test(cell_index);

  lte_rrc_utf_reset();
}

void LteRrcMcchWtTimerExpDuringAcqBeforeTMGIAct::Teardown()
{
    lte_rrc_utf_teardown();
}


/*============================================================
 Test case for HAndling MCCH wait timer during Acquisition due to service req
 ==============================================================*/


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcMcchWtTimerExpDuringAcq);

void LteRrcMcchWtTimerExpDuringAcq::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

}

void LteRrcMcchWtTimerExpDuringAcq::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test MCCH timer expiry during acquisition req sent due to Service req from NAS
  LteRrcMcchWtTimerExpDuringAcq__Test(cell_index);

  lte_rrc_utf_reset();
}
void LteRrcMcchWtTimerExpDuringAcq::Teardown()
{
    lte_rrc_utf_teardown();
}


/*============================================================
 Test case for Handling of MTCH re-setup after service req
 ==============================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcMtchResetupAfterServReq);

void LteRrcMtchResetupAfterServReq::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

}

void LteRrcMtchResetupAfterServReq::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test MTCH re-setup after Service req from NAS
  LteRrcMtchResetupAfterServReq__Test(cell_index, group_index);

  lte_rrc_utf_reset();
}

void LteRrcMtchResetupAfterServReq::Teardown()
{
    lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcMCCHvalueInvalid);

void LteRrcMCCHvalueInvalid::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

}

void LteRrcMCCHvalueInvalid::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  uint32 buf_len;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSsib13__Test(cell_index, group_index, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  LteRrceMBMSEnable__Test();
  LteRrcSendeMBMSActivateReqForService1();

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_UNKNOWN);

  LteRrceMBMSGetAvailTmgiList(0);

  lte_rrc_utf_reset();
}

void LteRrcMCCHvalueInvalid::Teardown()
{
    lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcMCCHvalueInvalid1);

void LteRrcMCCHvalueInvalid1::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

}

void LteRrcMCCHvalueInvalid1::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  uint32 buf_len;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSsib13__Test(cell_index, group_index, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  LteRrceMBMSEnable__Test();
  LteRrcSendeMBMSActivateReqForService1();

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_UNKNOWN);

  LteRrceMBMSGetAvailTmgiList(0);

  lte_rrc_utf_reset();
}

void LteRrcMCCHvalueInvalid1::Teardown()
{
    lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivateAfterHORachFailure);

void LteRrcTesteMBMSActivateAfterHORachFailure::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
  lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSActivateAfterHORachFailure::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Setup Intra=freq Measurement
  LteRrcTestMeasConfig1__Test();

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Activate two services in the same area
  LteRrcTesteMBMSActTwoSvcInSameArea__Test();

  // Do handover to cell 12
  LteRrcTestHandoverRACHFailureeMBMS__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_CELL_12);

  // Test Activation of a TMGI that was deactivated before HO failure
  LteRrcTesteMBMSActivateAfterHORachFailure__Test();

}

void LteRrcTesteMBMSActivateAfterHORachFailure::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* This test verifies the handling of Activate when LLC in the process of aborting ML1 during RLF */
TF_DEFINE_TEST_CASE(NO_RUN, LteRrcTesteMBMSActivateDuringRLFCellSelection);

void LteRrcTesteMBMSActivateDuringRLFCellSelection::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
  lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSActivateDuringRLFCellSelection::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Setup Intra=freq Measurement
  LteRrcTestMeasConfig1__Test();

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  LteRrcSendeMBMSActivateReqForService1();
  LteRrcTestMCCHSetup();
  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Test Activation of a TMGI during RLF Cell selection
  LteRrcTesteMBMSActivateDuringRLFCellSelection__Test();

}

void LteRrcTesteMBMSActivateDuringRLFCellSelection::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSRelHandlingDuringRlf);

void LteRrcTesteMBMSRelHandlingDuringRlf::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
  lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSRelHandlingDuringRlf::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Setup Intra=freq Measurement
  LteRrcTestMeasConfig1__Test();

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  LteRrcSendeMBMSActivateReqForService1();
  LteRrcTestMCCHSetup();
  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  LteRrcTesteMBMSRelHandlingDuringRlf__Test();

}

void LteRrcTesteMBMSRelHandlingDuringRlf::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSReselToNewCellServiceTerminates);

void LteRrcTesteMBMSReselToNewCellServiceTerminates::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSReselToNewCellServiceTerminates::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  LteRrcTesteMBMSActivate__Test();

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_CELL_12);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test2(LTE_RRC_TEST_CELL_12, LTE_RRC_TEST_SIB_UPDATE_1, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(LTE_RRC_TEST_CELL_12, LTE_RRC_TEST_SIB_UPDATE_1);

  // Test service termination after reselection
  LteRrcTestServiceTerminatesAfterCellResel__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_CELL_12);
}

void LteRrcTesteMBMSReselToNewCellServiceTerminates::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Reselection from Cell 1 (Area 0) to Cell 2 (Area 1). Reselection happens when
   we are waiting for PDU from Area 0.*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSReselToNewCellWithActiveMCCHOnly);

void LteRrcTesteMBMSReselToNewCellWithActiveMCCHOnly::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSReselToNewCellWithActiveMCCHOnly::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Send eMBMS TMGI activate for service 1
  LteRrcSendeMBMSActivateReqForService1();

  // Test MCCH setup in Area 0
  LteRrcTestMCCHSetup();

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_CELL_12);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test2(LTE_RRC_TEST_CELL_12, LTE_RRC_TEST_SIB_UPDATE_1, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(LTE_RRC_TEST_CELL_12, LTE_RRC_TEST_SIB_UPDATE_1);

  // Test service termination after reselection leading to Activate failure
  LteRrcTestServiceTerminatesAfterCellReselMCCHReleaseOnly__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_CELL_12);
}

void LteRrcTesteMBMSReselToNewCellWithActiveMCCHOnly::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSBack2BackReselServiceContinues);

void LteRrcTesteMBMSBack2BackReselServiceContinues::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSBack2BackReselServiceContinues::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_9,
    tgt_cell_idx = LTE_RRC_TEST_CELL_12;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  boolean first_time_camping = TRUE;
  uint8 i = 0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(src_cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(src_cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  LteRrcTesteMBMSActivate__Test();

  for (i = 0; i < 10; i++)
  {
    if (i % 2 == 0)
    {
      src_cell_index = LTE_RRC_TEST_CELL_9;
      tgt_cell_idx = LTE_RRC_TEST_CELL_12;
      group_index = LTE_RRC_TEST_SIB_UPDATE_1;
    }
    else
    {
      src_cell_index = LTE_RRC_TEST_CELL_12;
      tgt_cell_idx = LTE_RRC_TEST_CELL_9;
      group_index = LTE_RRC_TEST_SIB_UPDATE_0;
    }

    // Test reselection to new cell without eMBMS coverage
    LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_idx);

    if (i == 1)
    {
      first_time_camping = FALSE;
    }

    // Get RRC to the point where we have acquired a cell and collected mandatory sibs
    LteRrcTestSibCollectionPriorToCampingEMBMS__Test2(tgt_cell_idx, group_index, first_time_camping);

    // Get RRC to camped state
    LteRrcTestCampingAndLowerLayerConfigGeneric__Test(tgt_cell_idx, group_index);

    // Test service continuity after reselections
    LteRrcTestReselServiceContinuesAfterCellResel__Test(src_cell_index, tgt_cell_idx);

  }

}

void LteRrcTesteMBMSBack2BackReselServiceContinues::Teardown()
{
  lte_rrc_utf_teardown();
}
/* Test Scenario:
   Cell 11 has 8 areas 0 - 7, 1 service is active in area 0, 1 service is active in area 2
   Reselect to cell 14
   Cell 14 has 8 areas 0,1,8,9,10,11,12,13, service 1 remains in area 0 and
   the other service move from area 2 to area 8
   Along with this there is graceful DEACTIVATION of the services
   Also, PDU for old area - area 2 is received after reselection
*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSInterMBSFNAreaMobilityPDURcvdFromOldAreaB4Release);

void LteRrcTesteMBMSInterMBSFNAreaMobilityPDURcvdFromOldAreaB4Release::Setup()
{
  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSInterMBSFNAreaMobilityPDURcvdFromOldAreaB4Release::Test()
{
     lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_11;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  LteRrcTesteMBMSActSvc__Test(0, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1), 0);

  /* Cache other MCCH pdus */
  LteRrcTesteMBMSGetAllMcchPdus__Test();

  LteRrceMBMSGetAvailTmgiList(2);

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_11, LTE_RRC_TEST_CELL_14);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test3(LTE_RRC_TEST_CELL_14, LTE_RRC_TEST_SIB_UPDATE_0);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(LTE_RRC_TEST_CELL_14, LTE_RRC_TEST_SIB_UPDATE_0);

  // Test inter MBSFN area mobility handling after reselection
  LteRrcTesteMBMSInterMBSFNAreaMobilityPDURcvdFromOldAreaB4Release__Test();

}

void LteRrcTesteMBMSInterMBSFNAreaMobilityPDURcvdFromOldAreaB4Release::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActWithSAIOnServing);

void LteRrcTesteMBMSActWithSAIOnServing::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActWithSAIOnServing::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, TRUE);

}

void LteRrcTesteMBMSActWithSAIOnServing::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActInConnModeWithNoSIB15);

void LteRrcTesteMBMSActInConnModeWithNoSIB15::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSActInConnModeWithNoSIB15::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_1;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(cell_index, group_index, FALSE, FALSE);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Test activation on serving freq
  LteRrcTesteMBMSActInConnModeWithNoSIB15__Test(cell_index, group_index);

}

void LteRrcTesteMBMSActInConnModeWithNoSIB15::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActWithSAIOnNeighbor);

void LteRrcTesteMBMSActWithSAIOnNeighbor::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActWithSAIOnNeighbor::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on neighbor freq
  LteRrcTesteMBMSActWithSAIOnNeighbor__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActWithSAIOnNeighbor::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify subsequent activate for an in-venue service on the neighbor freq
   while listening to national service on serving freq. National service is duplicated
   on neighbor freq as well.
   UE has 1 service active on serving cell 24
   Reselection happens to cell 25 that is in CFL
   UE continues to listen to both services on cell 25 */

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActInVServOnNeighWhenRcvingNationalOnServ);

void LteRrcTesteMBMSActInVServOnNeighWhenRcvingNationalOnServ::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSActInVServOnNeighWhenRcvingNationalOnServ::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, FALSE);

  // Test activation of in-venue service on neighbor freq
  LteRrcTesteMBMSActInVServOnNeighWhenRcvingNationalOnServ__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActInVServOnNeighWhenRcvingNationalOnServ::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify reselection within CFL and service continuity
   UE has 2 services active on serving cell 25. Reselection happens to cell 26 that is in CFL
   UE continues to listen to both services on cell 26 */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSReselWithinCFLAndServiceContinuity);

void LteRrcTesteMBMSReselWithinCFLAndServiceContinuity::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSReselWithinCFLAndServiceContinuity::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell1_index = LTE_RRC_TEST_CELL_25,
    tgt_cell2_index = LTE_RRC_TEST_CELL_26;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, FALSE);

  // Test activation of in-venue service on neighbor freq
  LteRrcTesteMBMSActInVServOnNeighWhenRcvingNationalOnServ__Test(src_cell_index, tgt_cell1_index, group_index);

  // Test reselection within CFL and service continuity of in-venue and national service
  LteRrcTesteMBMSReselWithinCFLAndServiceContinuity__Test(tgt_cell1_index, tgt_cell2_index, group_index);

}

void LteRrcTesteMBMSReselWithinCFLAndServiceContinuity::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify reselection outside CFL and in-venue service being deactivated
   UE has 2 services active on serving cell 2. Reselection happens to cell 24 that is not in CFL
   UE continues to listen to national service but the in-venue service that is not duplicated gets
   deactivated on cell 24 */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSReselOutsideCFLAndInVServiceDeact);

void LteRrcTesteMBMSReselOutsideCFLAndInVServiceDeact::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSReselOutsideCFLAndInVServiceDeact::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, FALSE);

  // Test activation of in-venue service on neighbor freq
  LteRrcTesteMBMSActInVServOnNeighWhenRcvingNationalOnServ__Test(src_cell_index, tgt_cell_index, group_index);

  // Test reselection outside CFL and in-venue service being deactivated
  LteRrcTesteMBMSReselOutsideCFLAndInVServiceDeact__Test(tgt_cell_index, src_cell_index, group_index);

}

void LteRrcTesteMBMSReselOutsideCFLAndInVServiceDeact::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify reselection within CFL and TMGI that is waiting to be activated
   is not found.
   UE has service1 active on serving cell 24 while it subsequent activate for
   a service2 on neighbor freq. Reselection happens to cell 25 that is in CFL and the service2
   is not found and activate for service2 fails. UE continues to listen to national service1
   on cell 25. */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSReselWithinCFLAndServiceNotFound);

void LteRrcTesteMBMSReselWithinCFLAndServiceNotFound::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSReselWithinCFLAndServiceNotFound::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, FALSE);

  // Test activation of in-venue service on neighbor freq
  LteRrcTesteMBMSActInVServOnNeighWhenRcvingNationalOnServFailure__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSReselWithinCFLAndServiceNotFound::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify reselection within CFL and there is SIB13 timeout on the neighbor cell
   UE is camped on cell 25 and has service1 active. There is an activate for a service2
   on neighbor freq. Reselection happens to cell 24 that is in CFL but SIB13 timeout on cell 24.
   UE should send deact_ind for the service2 waiting activation. Due to SIB timeout, UcastOOS
   happens for service1. UE recovers back on cell 25 and listens to service1. */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSReselAndSIB13Timeout);

void LteRrcTesteMBMSReselAndSIB13Timeout::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSReselAndSIB13Timeout::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_25, tgt_cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test SIB13 timeout on neighbor freq
  LteRrcTesteMBMSActInVServOnNeighWhenSIB13TimesoutOnNeigh__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSReselAndSIB13Timeout::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActWithSAIWhenSIB2SIB13InSameSI);

void LteRrcTesteMBMSActWithSAIWhenSIB2SIB13InSameSI::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActWithSAIWhenSIB2SIB13InSameSI::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_25, tgt_cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on neighbor freq SAI
  LteRrcTesteMBMSActWithSAIWhenSIB2SIB13InSameSI__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActWithSAIWhenSIB2SIB13InSameSI::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate for a service when camped on a cell broadcasting SIB15,
   without broadcasting SIB13.  UE should reselect to the neighbor to listen to the service */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActOnNeighborWhenCampedOnCellWithSIB15Only);

void LteRrcTesteMBMSActOnNeighborWhenCampedOnCellWithSIB15Only::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActOnNeighborWhenCampedOnCellWithSIB15Only::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_27, tgt_cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on neighbor freq SAI
  LteRrcTesteMBMSActOnNeighborWhenCampedOnCellWithSIB15Only__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActOnNeighborWhenCampedOnCellWithSIB15Only::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of multiple activates in waiting state,
   to activate them on a neighbor freq */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMultipleActInWaitingOnNeighbor);

void LteRrcTesteMBMSMultipleActInWaitingOnNeighbor::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSMultipleActInWaitingOnNeighbor::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_27, tgt_cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test handling of multiple act TMGI req in waiting state
  LteRrcTesteMBMSLteRrcTesteMBMSMultipleActInWaitingOnNeighbor__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSMultipleActInWaitingOnNeighbor::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Serving cell only has SIB13, not SIB15.
   The test verifies the handling of Activate before SIB4 is decoded. Only
   serving freq should be added to CFL and its priority bumped up. */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivateBeforeSIB4Decode);

void LteRrcTesteMBMSActivateBeforeSIB4Decode::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActivateBeforeSIB4Decode::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_36, tgt_cell_index = LTE_RRC_TEST_CELL_37;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(src_cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  // Test activate before decode of SIB4 on the target cell after reselection
  LteRrcTesteMBMSActivateBeforeSIB4Decode__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActivateBeforeSIB4Decode::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndBasic);

void LteRrcTesteMBMSMbmsInterestIndBasic::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndBasic::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_28;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_inter[] = {3, 300, 2, 1, 2, 400, 2, 2, 3, 500, 3, 4, 5, 1};
  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, NULL);

  uint16 sai_list[] = {1,2,3};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 3, sai_list);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  uint16 req_freq_list[] = {300,400,500};
  uint16 cnf_freq_list[] = {300};
  LteRrcTesteMBMSMbmsBestNeighReqCnf(3, req_freq_list, 1, cnf_freq_list);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 300);

}

void LteRrcTesteMBMSMbmsInterestIndBasic::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case given in 80-N5913-1 A - Fig: 4-27
SAI_v = 1, SAI_n = 2; B4 = 300, B13 = 400 */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc427);

void LteRrcTesteMBMSMbmsInterestIndProc427::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc427::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {1, 1};
  uint16 sib15_inter[] = {1, 400, 1, 2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, sib15_intra, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(2, 1, sai_list);

  LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(2, TRUE, LTE_EMBMS_SUCCESS);

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_29, LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0);

  //Prep SIB15 for target cell
  uint16 sib15_intra_2[] = {1, 2};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0, sib15_intra_2, NULL, NULL);

  LteRrcEmbmsMbmsInterestIndProc427_Test(LTE_RRC_TEST_CELL_30);

}

void LteRrcTesteMBMSMbmsInterestIndProc427::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case given in 80-N5913-1 A - Fig: 4-28
SAI_v = 1, SAI_n = 2; B4 = 300, B13 = 400 */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc428);

void LteRrcTesteMBMSMbmsInterestIndProc428::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc428::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_30;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {1, 2};
  uint16 sib15_inter[] = {1, 400, 1, 2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, sib15_intra, NULL, NULL);

  uint16 sai_list[] = {1, 2};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 2, sai_list);

  LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 400);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS);

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_CELL_31, LTE_RRC_TEST_SIB_UPDATE_0);

  //Prep SIB15 for target cell
  uint16 sib15_intra_2[] = {1, 2};
  uint16 sib15_inter_2[] = {1, 300, 1, 1};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_31, LTE_RRC_TEST_SIB_UPDATE_0, sib15_intra_2, sib15_inter_2, NULL);

  LteRrcEmbmsMbmsInterestIndProc428_1_Test(LTE_RRC_TEST_CELL_31);

  uint16 sai_list_2[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(2, 1, sai_list_2);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(2, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 300);

  TF_SLEEP(1000);

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_31, LTE_RRC_TEST_CELL_29, LTE_RRC_TEST_SIB_UPDATE_0);

  //Prep SIB15 for target cell
  uint16 sib15_intra_3[] = {1, 1};
  uint16 sib15_inter_3[] = {1, 400, 1, 2};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_29, LTE_RRC_TEST_SIB_UPDATE_0, sib15_intra_3, sib15_inter_3, NULL);

  LteRrcEmbmsMbmsInterestIndProc428_2_Test(LTE_RRC_TEST_CELL_29);
}

void LteRrcTesteMBMSMbmsInterestIndProc428::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case given in 80-N5913-1 A - Fig: 4-29
SAI_v = 1, SAI_n = 2; B4 = 300, B13 = 400 */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc429);

void LteRrcTesteMBMSMbmsInterestIndProc429::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc429::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {1, 1};
  uint16 sib15_inter[] = {1, 400, 1, 2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, sib15_intra, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(2, 1, sai_list);

  LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(2, TRUE, LTE_EMBMS_SUCCESS);

  TF_SLEEP(1000);

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_29, LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0);

  //Prep SIB15 for target cell
  uint16 sib15_intra_2[] = {1, 2};
  uint16 sib15_inter_2[] = {1, 300, 1, 1};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0, sib15_intra_2, sib15_inter_2, NULL);

  LteRrcEmbmsMbmsInterestIndProc429_Test(LTE_RRC_TEST_CELL_30);
}

void LteRrcTesteMBMSMbmsInterestIndProc429::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 1 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc1);

void LteRrcTesteMBMSMbmsInterestIndProc1::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc1::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {1, 500, 1, 1};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  //LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 500);

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_29, LTE_RRC_TEST_CELL_18, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestEmbmsRel11toRel9Toggle_Test(LTE_RRC_TEST_CELL_18);

  TF_SLEEP(100);

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_18, LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0);

  //Prep SIB15 for target cell
  uint16 sib15_intra_2[] = {0};
  uint16 sib15_inter_2[] = {1, 500, 1, 1};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0, NULL, sib15_inter_2, NULL);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 500);

  LteRrcTesteMBMSAvailSaiListInd();

  TF_SLEEP(100);


  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  //Afer CFL timer expiry, CFL/IFL will be updated
  TF_SLEEP(lte_rrc_esmgr_data.sd_ptr->clear_cfl_wait_tmr_value);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);
}

void LteRrcTesteMBMSMbmsInterestIndProc1::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 2 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc2);

void LteRrcTesteMBMSMbmsInterestIndProc2::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc2::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {2,400,3,1,2,3,500,2,1,2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  //LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  uint16 req_freq_list[] = {400,500};
  uint16 cnf_freq_list[] = {400};
  LteRrcTesteMBMSMbmsBestNeighReqCnf(2, req_freq_list, 1, cnf_freq_list);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  TF_SLEEP(200);

  uint16 sai_list_2[] = {3};
  LteRrcSendeMBMSActivateReqForServiceWithSai(2, 1, sai_list_2);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(2, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  //LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

#if 1
  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  LteRrcSendeMBMSDeactivateReqForService(2);

  LteRrcTesteMBMSDeactivateCnfForService(2);

  TF_SLEEP(lte_rrc_esmgr_data.sd_ptr->clear_cfl_wait_tmr_value);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);
#endif
}

void LteRrcTesteMBMSMbmsInterestIndProc2::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 3 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc3);

void LteRrcTesteMBMSMbmsInterestIndProc3::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc3::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {2,400,3,1,2,3,500,2,1,2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  //LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  uint16 req_freq_list[] = {400,500};
  uint16 cnf_freq_list[] = {500};
  LteRrcTesteMBMSMbmsBestNeighReqCnf(2, req_freq_list, 1, cnf_freq_list);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 500);

  TF_SLEEP(200);

  uint16 sai_list_2[] = {3};
  LteRrcSendeMBMSActivateReqForServiceWithSai(2, 1, sai_list_2);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(2, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

#if 1
  LteRrcSendeMBMSDeactivateReqForService(2);

  LteRrcTesteMBMSDeactivateCnfForService(2);

  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  TF_SLEEP(lte_rrc_esmgr_data.sd_ptr->clear_cfl_wait_tmr_value);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);
#endif
}

void LteRrcTesteMBMSMbmsInterestIndProc3::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 4 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc4);

void LteRrcTesteMBMSMbmsInterestIndProc4::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc4::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {2,400,3,1,2,3,500,2,1,2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBandSibTimeout__Test(cell_index, group_index, NULL, sib15_inter, FALSE, TRUE);

#if 0

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  //LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  uint16 req_freq_list[] = {400,500};
  uint16 cnf_freq_list[] = {500};
  LteRrcTesteMBMSMbmsBestNeighReqCnf(2, req_freq_list, 1, cnf_freq_list);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 500);

  TF_SLEEP(200);

  uint16 sai_list_2[] = {3};
  LteRrcSendeMBMSActivateReqForServiceWithSai(2, 1, sai_list_2);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(2, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  LteRrcSendeMBMSDeactivateReqForService(2);

  LteRrcTesteMBMSDeactivateCnfForService(2);

  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);
#endif
}

void LteRrcTesteMBMSMbmsInterestIndProc4::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 5 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc5);

void LteRrcTesteMBMSMbmsInterestIndProc5::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc5::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {2,400,3,1,2,3,500,2,1,2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBandSibTimeout__Test(cell_index, group_index, NULL, sib15_inter, TRUE, FALSE);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 0, sai_list);

  LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, FALSE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS);

  TF_SLEEP(2000);
#if 0
  uint16 req_freq_list[] = {400,500};
  uint16 cnf_freq_list[] = {500};
  LteRrcTesteMBMSMbmsBestNeighReqCnf(2, req_freq_list, 1, cnf_freq_list);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 500);

  TF_SLEEP(200);

  uint16 sai_list_2[] = {3};
  LteRrcSendeMBMSActivateReqForServiceWithSai(2, 1, sai_list_2);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(2, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);


  LteRrcSendeMBMSDeactivateReqForService(2);

  LteRrcTesteMBMSDeactivateCnfForService(2);

  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);
#endif
}

void LteRrcTesteMBMSMbmsInterestIndProc5::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 6 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc6);

void LteRrcTesteMBMSMbmsInterestIndProc6::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc6::Test()
{
  lte_rrc_esmgr_data.sd_ptr->embms_preferred = TRUE;

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {1,400,2,1,2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBandSibTimeout__Test(cell_index, group_index, NULL, sib15_inter, TRUE, TRUE);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  LteRrcTestEmbmsSibUpdateMultiBand__Test(cell_index, group_index, NULL, sib15_inter, TRUE, FALSE, TRUE);

  LteRrcTestReestablishmentMultiBand__Test(LTE_RRC_TEST_CELL_30, lte_rrc_osys_ReestablishmentCause_otherFailure, FALSE);

#if 0
  uint16 req_freq_list[] = {400,500};
  uint16 cnf_freq_list[] = {500};
  LteRrcTesteMBMSMbmsBestNeighReqCnf(2, req_freq_list, 1, cnf_freq_list);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 500);

  TF_SLEEP(200);

  uint16 sai_list_2[] = {3};
  LteRrcSendeMBMSActivateReqForServiceWithSai(2, 1, sai_list_2);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(2, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);


  LteRrcSendeMBMSDeactivateReqForService(2);

  LteRrcTesteMBMSDeactivateCnfForService(2);

  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);
#endif
}

void LteRrcTesteMBMSMbmsInterestIndProc6::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 5 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc7);

void LteRrcTesteMBMSMbmsInterestIndProc7::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc7::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {2,400,3,1,2,3,500,2,1,2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBandSibTimeout__Test(cell_index, group_index, NULL, sib15_inter, TRUE, TRUE);

  uint16 sai_list[] = {3};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  //Time out the act guard timer
  TF_SLEEP(300000);

  LteRrcTesteMBMSActGuardTmrExpiry();

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, NULL);

}

void LteRrcTesteMBMSMbmsInterestIndProc7::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 8 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc8);

void LteRrcTesteMBMSMbmsInterestIndProc8::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc8::Test()
{
  lte_rrc_esmgr_data.sd_ptr->embms_preferred = TRUE;

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {1,400,2,1,2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  TF_SLEEP(lte_rrc_esmgr_data.sd_ptr->clear_cfl_wait_tmr_value);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);

  //Trigger RLF
  lte_cphy_rl_failure_ind_s rl_fail_ind;
  lte_errno_e status = E_SUCCESS;
  lte_rrc_init_default_hdr(&rl_fail_ind.msg_hdr,LTE_CPHY_RL_FAILURE_IND);
  status = msgr_send(&rl_fail_ind.msg_hdr, sizeof(rl_fail_ind));
  LTE_ASSERT(status == E_SUCCESS);

  LteRrcTestReestablishmentMultiBand__Test(LTE_RRC_TEST_CELL_30, lte_rrc_osys_ReestablishmentCause_otherFailure, FALSE);

  //Prep SIB15 for target cell
  uint16 sib15_intra_2[] = {1, 2};
  uint16 sib15_inter_2[] = {1, 300, 1, 1};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0, sib15_intra_2, sib15_inter_2, NULL);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);

#if 0
  uint16 req_freq_list[] = {400,500};
  uint16 cnf_freq_list[] = {500};
  LteRrcTesteMBMSMbmsBestNeighReqCnf(2, req_freq_list, 1, cnf_freq_list);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 500);

  TF_SLEEP(200);

  uint16 sai_list_2[] = {3};
  LteRrcSendeMBMSActivateReqForServiceWithSai(2, 1, sai_list_2);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(2, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);


  LteRrcSendeMBMSDeactivateReqForService(2);

  LteRrcTesteMBMSDeactivateCnfForService(2);

  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);
#endif
}

void LteRrcTesteMBMSMbmsInterestIndProc8::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 9 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc9);

void LteRrcTesteMBMSMbmsInterestIndProc9::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc9::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {1, 400, 1, 1};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  //LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  LteRrcTestHandoverFailureEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_29, LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestReestablishmentMultiBand__Test(LTE_RRC_TEST_CELL_29, lte_rrc_osys_ReestablishmentCause_handoverFailure, FALSE);

  //Do Conn Release here
  LteRrcTestConnectionRelease1__Test(LTE_RRC_TEST_CELL_29, FALSE);
}

void LteRrcTesteMBMSMbmsInterestIndProc9::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 10 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc10);

void LteRrcTesteMBMSMbmsInterestIndProc10::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc10::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {1, 400, 1, 1};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  //LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  LteRrcTestHandoverFailureEmbmsMultiBand__Test(cell_index, LTE_RRC_TEST_CELL_30, group_index);

  //Do Conn Release here
  LteRrcTestReestablishmentFailureMultiBand__Test(cell_index,
    lte_rrc_osys_ReestablishmentCause_handoverFailure);

  //handle conn->idle transition here
  LteRrcTestCampingAndLowerLayerConfigConnToIdleGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  //Prep SIB15 for target cell
  uint16 sib15_intra_2[] = {1, 2};
  uint16 sib15_inter_2[] = {1, 400, 1, 1};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(cell_index, group_index, NULL, sib15_inter_2, NULL);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);
}

void LteRrcTesteMBMSMbmsInterestIndProc10::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 11 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc11);

void LteRrcTesteMBMSMbmsInterestIndProc11::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc11::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {1, 400, 1, 1};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  //LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  TF_SLEEP(100);

  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  TF_SLEEP(lte_rrc_esmgr_data.sd_ptr->clear_cfl_wait_tmr_value);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);

  LteRrcTestHandoverFailureEmbmsMultiBand__Test(cell_index, LTE_RRC_TEST_CELL_30, group_index);

  //Do Conn Release here
  LteRrcTestReestablishmentFailureMultiBand__Test(cell_index,
    lte_rrc_osys_ReestablishmentCause_handoverFailure);

  //handle conn->idle transition here
  LteRrcTestCampingAndLowerLayerConfigConnToIdleGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  //Prep SIB15 for target cell
  uint16 sib15_intra_2[] = {1, 2};
  uint16 sib15_inter_2[] = {1, 400, 1, 1};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(cell_index, group_index, NULL, sib15_inter_2, NULL);

  LteRrcTesteMBMSAvailSaiListInd();

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSMbmsInterestIndProc11::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 12 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc12);

void LteRrcTesteMBMSMbmsInterestIndProc12::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc12::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {1, 400, 1, 1};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  //LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  LteRrcTestSibTimeoutAfterHandoverEmbmsMultiBand__Test(cell_index, LTE_RRC_TEST_CELL_30, group_index);

  LteRrcTestReestablishmentMultiBand__Test(LTE_RRC_TEST_CELL_30, lte_rrc_osys_ReestablishmentCause_otherFailure, TRUE);

  //Prep SIB15 for target cell
  uint16 sib15_intra_2[] = {1, 2};
  uint16 sib15_inter_2[] = {1, 400, 1, 1};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_30, group_index, NULL, sib15_inter_2, NULL);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  LteRrcTesteMBMSAvailSaiListInd();

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSMbmsInterestIndProc12::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 13 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMbmsInterestIndProc13);

void LteRrcTesteMBMSMbmsInterestIndProc13::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMbmsInterestIndProc13::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {1, 400, 1, 1};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  //LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_29, LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_CELL_31, LTE_RRC_TEST_SIB_UPDATE_0);

  //Prep SIB15 for target cell
  uint16 sib15_intra_2[] = {0};
  uint16 sib15_inter_2[] = {1, 500, 1, 1};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_31, LTE_RRC_TEST_SIB_UPDATE_0, NULL, sib15_inter_2, NULL);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 500);

  LteRrcTesteMBMSAvailSaiListInd();

  TF_SLEEP(100);

  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

#if 0
  TF_SLEEP(lte_rrc_esmgr_data.sd_ptr->clear_cfl_wait_tmr_value);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);
#endif
  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSMbmsInterestIndProc13::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSEarfcnBasedTmgiAct1);

void LteRrcTesteMBMSEarfcnBasedTmgiAct1::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSEarfcnBasedTmgiAct1::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_35; //Cell with SIB5 and SIB13. No SIB15
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  uint32 buf_len = 0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  LteRrcTestSib5CollectionAfterCamping__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  uint16 sai_list[] = {1};
  lte_earfcn_t earfcn_list[] = {300, 5};
  LteRrcSendeMBMSActivateReqForServiceWithSaiEarfcn(1, 1, sai_list, 2, earfcn_list, FALSE);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);

  test_srvc_ind = TRUE;
  test_cfg_reqi_for_sib_upd= TRUE;

  LteRrcTestReselEmbmsMultiBand__Test(cell_index, LTE_RRC_TEST_CELL_18, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrceMBMSGetAvailTmgiList(2);

#if 1
  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactSvcLowerLyr_Test(LTE_RRC_TEST_CELL_18);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
#endif
}

void LteRrcTesteMBMSEarfcnBasedTmgiAct1::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSEarfcnBasedTmgiAct2);

void LteRrcTesteMBMSEarfcnBasedTmgiAct2::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSEarfcnBasedTmgiAct2::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_35; //Cell with SIB5 and SIB13. No SIB15
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  uint32 buf_len = 0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  LteRrcTestSib5CollectionAfterCamping__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  uint16 sai_list[] = {5};
  lte_earfcn_t earfcn_list[] = {300, 400};
  LteRrcSendeMBMSActivateReqForServiceWithSaiEarfcn(1, 1, sai_list, 2, earfcn_list, FALSE);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);

  LteRrcTestReselEmbmsMultiBand__Test(cell_index, LTE_RRC_TEST_CELL_31, LTE_RRC_TEST_SIB_UPDATE_0);

  //LteRrcTestSib13CollectionAfterCamping__Test(cell_index, group_index);
  TF_SLEEP(100);

#if 0
  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactSvcLowerLyr_Test(LTE_RRC_TEST_CELL_18);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
#endif
}

void LteRrcTesteMBMSEarfcnBasedTmgiAct2::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSEarfcnBasedTmgiAct3);

void LteRrcTesteMBMSEarfcnBasedTmgiAct3::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSEarfcnBasedTmgiAct3::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_35; //Cell with SIB5 and SIB13. No SIB15
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_errno_e status;
  uint32 buf_len;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  LteRrcTestSib5CollectionAfterCamping__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  uint16 sai_list[] = {5};
  lte_earfcn_t earfcn_list[] = {300, 400};
  LteRrcSendeMBMSActivateReqForServiceWithSaiEarfcn(1, 1, sai_list, 2, earfcn_list, FALSE);

  LteRrcTesteMBMSActivateCnfForServiceWithSaiEarfcn(1, TRUE, LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);

  //Get RRC to CONNECTED, and verify if TMGI that are waiting for activation based on earfcns are deactivated
  LteRrcTestConnectionSetupMultiBand1__Test(cell_index);

}

void LteRrcTesteMBMSEarfcnBasedTmgiAct3::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSEarfcnBasedTmgiAct4);

void LteRrcTesteMBMSEarfcnBasedTmgiAct4::Setup()
{
  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSEarfcnBasedTmgiAct4::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_35; //Cell with SIB5 and SIB13. No SIB15
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_errno_e status;
  uint32 buf_len;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  LteRrcTestSib5CollectionAfterCamping__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  LteRrcTestSibxCollectionAfterCamping__Test(LTE_RRC_TEST_CELL_35,
                                             LTE_RRC_TEST_SIB_UPDATE_0,
                                             LTE_CPHY_SIB_MASK_BIT_SIB1,
                                             10,
                                             NULL, NULL);

  LteRrcTestSibxCollectionAfterCamping__Test(LTE_RRC_TEST_CELL_35,
                                             LTE_RRC_TEST_SIB_UPDATE_0,
                                             LTE_CPHY_SIB_MASK_BIT_SIB13,
                                             10,
                                             NULL, NULL);

  uint16 sai_list[] = {5};
  lte_earfcn_t earfcn_list[] = {5, 400};
  LteRrcSendeMBMSActivateReqForServiceWithSaiEarfcn(1, 1, sai_list, 2, earfcn_list, FALSE);

  LteRrcTesteMBMSActivateCnfForServiceWithSaiEarfcn(1, TRUE, LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);

  //Timeout the Guard Timer
  TF_SLEEP(LTE_RRC_ESMGR_ACT_TMGI_GUARD_TMR_VALUE);

  LteRrcTesteMBMSActGuardTmrExpiry();
}

void LteRrcTesteMBMSEarfcnBasedTmgiAct4::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case for MBMS interest ind based for SIB15 with MFBI case */
/* The test verifies the scenario where Activate comes with empty ASL and empty AFL and
   how it is handled on Rel 9 (without SIB15) and Rel 11 (with SIB15) cells */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivateWithEmptyASLAFL);

void LteRrcTesteMBMSActivateWithEmptyASLAFL::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSActivateWithEmptyASLAFL::Test()
{
  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24;
  //Cell with SIB13 and SIB15
  lte_rrc_test_cell_e tgt_cell_index = LTE_RRC_TEST_CELL_25;
  //SIB configuration with SIB5 and SIB13. No SIB15
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_1;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(src_cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  uint16 sai_list[] = {1};
  lte_earfcn_t earfcn_list[] = {400};
  LteRrcSendeMBMSActivateReqForServiceWithSaiEarfcn(1, 0, sai_list, 0, earfcn_list, FALSE);

  // Test SIB request with eMBMS SIBs
  LteRrcTesteMBMSTestSIBReqForeMBMSSIBs(src_cell_index, group_index);

  // Test reception of all SIBs including eMBMS ones
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, TRUE, FALSE);

  // Test handling of empty AFL/ASL on SIB update/reselection
  LteRrcTesteMBMSActWithEmptyASLAFL(src_cell_index, tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_0);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSActivateWithEmptyASLAFL::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSSib15MfbiProc1);

void LteRrcTesteMBMSSib15MfbiProc1::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSSib15MfbiProc1::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {1, 5060, 1, 1};
  /* num_freq_info, (mfbi valid boolean, num entries in mfbi, mfbi1, mfbi2,..) x num_freq_info */
  uint16 sib15_mfbi[] = {1,1,1,17};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, sib15_mfbi);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 5060); //RRC must send b12 earfcn as indicated in SIB15

  TF_SLEEP(100);


  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  TF_SLEEP(lte_rrc_esmgr_data.sd_ptr->clear_cfl_wait_tmr_value);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);

}

void LteRrcTesteMBMSSib15MfbiProc1::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/*============================================================
 Test case for HAndling MCCH wait timer expiry during Acquisition due to service req
 when TMGI is already active
 ==============================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcMcchWtTimerExpDuringAcqWhenTMGIActive);

void LteRrcMcchWtTimerExpDuringAcqWhenTMGIActive::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

}

void LteRrcMcchWtTimerExpDuringAcqWhenTMGIActive::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Test MCCH timer expiry during acquisition req sent due to Service req from NAS
  LteRrcMcchWtTimerExpDuringAcqWhenTMGIActive__Test(LTE_RRC_TEST_CELL_24, LTE_RRC_TEST_SIB_UPDATE_0);

  lte_rrc_utf_reset();
}

void LteRrcMcchWtTimerExpDuringAcqWhenTMGIActive::Teardown()
{
    lte_rrc_utf_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSEarfcnBasedTmgiActDuringHOFail);

void LteRrcTesteMBMSEarfcnBasedTmgiActDuringHOFail::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();

}

void LteRrcTesteMBMSEarfcnBasedTmgiActDuringHOFail::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_38; //Cell with SIB5, SIB13, and SIB15
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_errno_e status;
  uint32 buf_len;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);
  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  LteRrcTestSib5CollectionAfterCamping__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {2,1,2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, sib15_intra, NULL, NULL);

  LteRrcTestHandoverFailureEmbmsMultiBandPart1__Test(LTE_RRC_TEST_CELL_38, LTE_RRC_TEST_CELL_29, LTE_RRC_TEST_SIB_UPDATE_0);

  TF_SLEEP(10);

  uint16 sai_list[] = {1,2};
  lte_earfcn_t earfcn_list[] = {300};
  LteRrcSendeMBMSActivateReqForServiceWithSaiEarfcn(1, 0, sai_list, 1, earfcn_list, FALSE);

  LteRrcTesteMBMSActivateCnfForServiceWithSaiEarfcn(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTestHandoverFailureEmbmsMultiBandPart2__Test();

  LteRrcTestReestablishmentMultiBand__Test(LTE_RRC_TEST_CELL_38, lte_rrc_osys_ReestablishmentCause_handoverFailure, FALSE);

  LteRrcTestSibxCollectionAfterCamping__Test(LTE_RRC_TEST_CELL_38, group_index, LTE_CPHY_SIB_MASK_BIT_SIB13, 5, NULL, NULL);

  LteRrcTestSibxCollectionAfterCamping__Test(LTE_RRC_TEST_CELL_38, group_index, LTE_CPHY_SIB_MASK_BIT_SIB15, 6, sib15_intra, NULL);

  TF_SLEEP(100);
}

void LteRrcTesteMBMSEarfcnBasedTmgiActDuringHOFail::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* The test case verifies the handling of Act TMGI req that tries to activate a TMGI
   on an SAI found on a neighbor freq in SIB15 that is not found in SIB5 */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActOnNeighborInSIB15ButNotInSIB5);

void LteRrcTesteMBMSActOnNeighborInSIB15ButNotInSIB5::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActOnNeighborInSIB15ButNotInSIB5::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_25, tgt_cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_1;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on neighbor freq SAI
  LteRrcTesteMBMSActOnNeighbotInSIB15ButNotInSIB5__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActOnNeighborInSIB15ButNotInSIB5::Teardown()
{
  lte_rrc_utf_teardown();
}

/* The test case verifies the handling of Act TMGI req that tries to activate a TMGI
   on an SAI found on the serving freq but the serving cell doesn't have SIB13 */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSServFreqInCFLButNoSIB13OnServCell);

void LteRrcTesteMBMSServFreqInCFLButNoSIB13OnServCell::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSServFreqInCFLButNoSIB13OnServCell::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_27, tgt_cell_index = LTE_RRC_TEST_CELL_39;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnableGeneric__Test(TRUE);

  // Test activation of SAI on serving freq SAI when serving cell doesn't have SIB13
  LteRrcTesteMBMSServFreqInCFLButNoSIB13OnServCell__Test(src_cell_index, tgt_cell_index, group_index);
}

void LteRrcTesteMBMSServFreqInCFLButNoSIB13OnServCell::Teardown()
{
    lte_rrc_utf_teardown();
}

/* The test verifies adding of all eMBMS freqs to CFL in Connected mode. UE is initially in conn mode
  on a cell with eMBMS coverage. While trying to activate a service it moves outside of eMBMS coverage.
  When UE moves back to cell with eMBMS coverage, all eMBMS freqs should be added back to CFL */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSConnModePreferAlleMBMSFreq);

void LteRrcTesteMBMSConnModePreferAlleMBMSFreq::Setup()
{
  boolean prefer_all_embms_freq = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/prefer_all_embms_freq",
                    &prefer_all_embms_freq, sizeof(prefer_all_embms_freq), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSConnModePreferAlleMBMSFreq::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  LteRrcTesteMBMSActivate__Test();

  // LteRrceMBMSGetAvailTmgiList(2);

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_9, LTE_RRC_TEST_CELL_2);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCamping2__Test(LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTesteMBMSSetCommonCfgMask();
  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfig2__Test(LTE_RRC_TEST_CELL_2);

  // Deact all service because out of coverage
  LteRrcTesteMBMSOutofCoverage__Test(TRUE, TRUE, FALSE);

  // Test handling of out of coverage and back to eMBMS coverage on the src cell in connected mode
  LteRrceMBMSConnModePreferAlleMBMSFreq__Test(LTE_RRC_TEST_CELL_2, LTE_RRC_TEST_CELL_9, group_index);
}

void LteRrcTesteMBMSConnModePreferAlleMBMSFreq::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate while reselecting from a cell that only has SIB15 to a cell
   that has SIB13 and SIB2 MBSFN config but no SIB15 */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActandReselToCellWithSIB2MBSFNCfg);

void LteRrcTesteMBMSActandReselToCellWithSIB2MBSFNCfg::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActandReselToCellWithSIB2MBSFNCfg::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_27, tgt_cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on neighbor freq that has SIB13 and SIB2 MBSFN config but no SIB15
  LteRrcTesteMBMSActandReselToCellWithSIB2MBSFNCfg__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActandReselToCellWithSIB2MBSFNCfg::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of Signal strength req when eMBMS gets enabled */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSSignalStrengthReqOnEnable);

void LteRrcTesteMBMSSignalStrengthReqOnEnable::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSSignalStrengthReqOnEnable::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(cell_index, group_index, FALSE, FALSE);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test signal strength req from upper layers when SIB13 is not read
  LteRrcTesteMBMSSignalStrengthReqOnEnable__Test(cell_index, group_index);

}

void LteRrcTesteMBMSSignalStrengthReqOnEnable::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test to verify eMBMS Enable when Controller in Not camped state after connection release and same cell Camping */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSEnableafterConnReleaseNotCamped);

void LteRrcTesteMBMSEnableafterConnReleaseNotCamped::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
}

void LteRrcTesteMBMSEnableafterConnReleaseNotCamped::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index =  LTE_RRC_TEST_SIB_UPDATE_0;
  lte_rrc_embms_enable_req_s enable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_cphy_cell_select_req_s *cell_select_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  uint32 buf_len = 0;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);



  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(cell_index, group_index, FALSE, FALSE);

       // Get RRC to connected state
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  LteRrcTestConnectionRelease1__Test(cell_index, FALSE);

  lte_rrc_utf_wait_for_done();

  // Enable eMBMS and test the enable handling
  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&enable_req.msg_hdr, LTE_RRC_EMBMS_ENABLE_REQ);
  status = msgr_send(&enable_req.msg_hdr, sizeof(enable_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("Sent LTE_RRC_EMBMS_ENABLE_REQ \n");

  lte_rrc_utf_wait_for_done();

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // We expect a cell_select_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&cell_select_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_cell_select_req_s));
  TF_ASSERT(cell_select_req != NULL);
  TF_ASSERT(cell_select_req->msgr_hdr.id == LTE_CPHY_CELL_SELECT_REQ);
  TF_ASSERT(cell_select_req->earfcn == cell[cell_index].earfcn);
  TF_ASSERT(cell_select_req->phy_cell_id == cell[cell_index].phys_cell_id);

  /* Get eMBMS coverage status indication*/
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == TRUE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  lte_rrc_utf_check_no_more_msgs();

}
void LteRrcTesteMBMSEnableafterConnReleaseNotCamped::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}


/* Test to verify eMBMS Enable when Controller in Not camped state after connection release and redirected to a different cell */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSEnableafterConnReleaseandRedirected);

void LteRrcTesteMBMSEnableafterConnReleaseandRedirected::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
}

void LteRrcTesteMBMSEnableafterConnReleaseandRedirected::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_0;
  lte_rrc_test_cell_e tgt_cell_index = LTE_RRC_TEST_CELL_2;
  lte_rrc_test_sib_update_e group_index =  LTE_RRC_TEST_SIB_UPDATE_0;

  uint32 buf_len = 0;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);


  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  //LteRrcTestSibCollectionPriorToCamping1__Test();
  LteRrcTestSibCollectionPriorToCamping1__Test(src_cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfig1__Test(src_cell_index, group_index);

       // Get RRC to connected state
  LteRrcTestConnectionSetup1__Test(src_cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Release the unicast bearers and do redirection to a non-eMBMS cell
  LteRrcTestConnectionReleaseGeneric__Test(src_cell_index,
                                           lte_rrc_test_conn_rel_with_redir_msg,
                                           lte_rrc_test_conn_rel_with_redir_msg_size);

  // Test activation handling when CSP is not camped
  LteRrcTesteMBMSActDuringConnToIdleCampingNoneMBMSCell__Test1(tgt_cell_index, group_index);

  lte_rrc_utf_wait_for_done();

  lte_rrc_utf_check_no_more_msgs();

}
void LteRrcTesteMBMSEnableafterConnReleaseandRedirected::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}


/* Test to verify eMBMS Enable when Controller in camped state and gets a deactivate immediately */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSEnablebeforeLTEDeactivate);

void LteRrcTesteMBMSEnablebeforeLTEDeactivate::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
}

void LteRrcTesteMBMSEnablebeforeLTEDeactivate::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index =  LTE_RRC_TEST_SIB_UPDATE_0;
  lte_rrc_embms_enable_req_s enable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_mode_change_reqi_s mc_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_rrc_deactivate_req_s  deactivate_req;
  lte_cphy_stop_cnf_s       cphy_stop_cnf;
  lte_rrc_deactivate_cnf_s *deactivate_cnf;
  lte_cphy_stop_req_s      *cphy_stop_req;
  lte_mac_stop_req_msg_s *mac_stop_req;
  lte_mac_stop_cnf_msg_s  mac_stop_cnf;

  lte_rlc_stop_req_s *rlc_stop_req_ptr;
  lte_pdcp_stop_req_msg_s *pdcp_stop_req_ptr;

  lte_rlc_stop_cnf_s rlc_stop_cnf;
  lte_pdcp_stop_cnf_msg_s pdcp_stop_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);



  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(cell_index, group_index, FALSE, FALSE);

  lte_rrc_utf_wait_for_done();

  // Enable eMBMS and test the enable handling
  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&enable_req.msg_hdr, LTE_RRC_EMBMS_ENABLE_REQ);
  status = msgr_send(&enable_req.msg_hdr, sizeof(enable_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("Sent LTE_RRC_EMBMS_ENABLE_REQ \n");

  lte_rrc_utf_wait_for_done();

  /* Get eMBMS coverage status indication*/
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == TRUE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1));

  lte_rrc_utf_wait_for_done();

  TF_MSG("Sending Mode Change Req to Dectivate");
  lte_rrc_init_default_hdr(&mc_req.msg_hdr,LTE_RRC_MODE_CHANGE_REQI);
  mc_req.dest_scenario = LTE_RRC_SUSPENDED_DUE_TO_RESEL_FROM_LTE_TO_G; /* don't care */
  mc_req.mode = LTE_RRC_MODE_CHANGE_DEACTIVATE;
  status = msgr_send(&mc_req.msg_hdr, sizeof(mc_req));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_24, FALSE, NULL);

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  /* Verify the stop requests to L1/L2 */
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
  TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPUL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
  TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPDL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
  TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCUL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
  TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCDL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_stop_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_mac_stop_req_msg_s));
  TF_ASSERT(mac_stop_req->hdr.id == LTE_MAC_STOP_REQ);


  // First we expect LTE RRC to stop ML1
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_stop_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_stop_req_s));
  TF_ASSERT(cphy_stop_req->msgr_hdr.id == LTE_CPHY_STOP_REQ);

  // After successfully stopping ML1, send back back confimration
  lte_rrc_init_default_hdr(&cphy_stop_cnf.msgr_hdr, LTE_CPHY_STOP_CNF);
  cphy_stop_cnf.status = E_SUCCESS;

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr, LTE_PDCPUL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr, LTE_PDCPDL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr, LTE_RLCUL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr, LTE_RLCDL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare MAC_stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_stop_cnf.hdr, LTE_MAC_STOP_CNF);
  mac_stop_cnf.status = E_SUCCESS;

  // Send MAC_stop_cnf to RRC
  status = msgr_send(&mac_stop_cnf.hdr, sizeof(mac_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send cphy_stop_cnf to RRC
  status = msgr_send(&cphy_stop_cnf.msgr_hdr, sizeof(cphy_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Make sure RRC does not throw any more messages
  lte_rrc_utf_check_no_more_msgs();

}
void LteRrcTesteMBMSEnablebeforeLTEDeactivate::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test to verify eMBMS Enable after a LTE stack deactivate request */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSEnableafterLTEDeactivate);

void LteRrcTesteMBMSEnableafterLTEDeactivate::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
}

void LteRrcTesteMBMSEnableafterLTEDeactivate::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index =  LTE_RRC_TEST_SIB_UPDATE_0;
  lte_rrc_embms_enable_req_s enable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_mode_change_reqi_s mc_req;
  lte_cphy_stop_cnf_s       cphy_stop_cnf;
  lte_rrc_deactivate_cnf_s *deactivate_cnf;
  lte_cphy_stop_req_s      *cphy_stop_req;
  lte_mac_stop_req_msg_s *mac_stop_req;
  lte_mac_stop_cnf_msg_s  mac_stop_cnf;

  lte_rlc_stop_req_s *rlc_stop_req_ptr;
  lte_pdcp_stop_req_msg_s *pdcp_stop_req_ptr;

  lte_rlc_stop_cnf_s rlc_stop_cnf;
  lte_pdcp_stop_cnf_msg_s pdcp_stop_cnf;

  uint32 buf_len = 0;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);



  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(cell_index, group_index, FALSE, FALSE);

  lte_rrc_utf_wait_for_done();

  TF_MSG("Sending Mode Change Req to Dectivate");
  lte_rrc_init_default_hdr(&mc_req.msg_hdr,LTE_RRC_MODE_CHANGE_REQI);
  mc_req.dest_scenario = LTE_RRC_SUSPENDED_DUE_TO_RESEL_FROM_LTE_TO_G; /* don't care */
  mc_req.mode = LTE_RRC_MODE_CHANGE_DEACTIVATE;
  status = msgr_send(&mc_req.msg_hdr, sizeof(mc_req));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_24, FALSE, NULL);

  // Enable eMBMS and test the enable handling
  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&enable_req.msg_hdr, LTE_RRC_EMBMS_ENABLE_REQ);
  status = msgr_send(&enable_req.msg_hdr, sizeof(enable_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("Sent LTE_RRC_EMBMS_ENABLE_REQ \n");

  lte_rrc_utf_wait_for_done();

  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
  TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPUL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_pdcp_stop_req_msg_s));
  TF_ASSERT(pdcp_stop_req_ptr->msg_hdr.id == LTE_PDCPDL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
  TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCUL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_rlc_stop_req_s));
  TF_ASSERT(rlc_stop_req_ptr->msg_hdr.id == LTE_RLCDL_STOP_REQ);

  lte_rrc_utf_get_next_ext_msg((byte**)&mac_stop_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_mac_stop_req_msg_s));
  TF_ASSERT(mac_stop_req->hdr.id == LTE_MAC_STOP_REQ);


  // First we expect LTE RRC to stop ML1
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_stop_req, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_stop_req_s));
  TF_ASSERT(cphy_stop_req->msgr_hdr.id == LTE_CPHY_STOP_REQ);

  // After successfully stopping ML1, send back back confimration
  lte_rrc_init_default_hdr(&cphy_stop_cnf.msgr_hdr, LTE_CPHY_STOP_CNF);
  cphy_stop_cnf.status = E_SUCCESS;

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr, LTE_PDCPUL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr, LTE_PDCPDL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr, LTE_RLCUL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr, LTE_RLCDL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;

  // Send stop_cnf to RRC
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Prepare MAC_stop_cnf to send to RRC
  lte_rrc_init_default_hdr(&mac_stop_cnf.hdr, LTE_MAC_STOP_CNF);
  mac_stop_cnf.status = E_SUCCESS;

  // Send MAC_stop_cnf to RRC
  status = msgr_send(&mac_stop_cnf.hdr, sizeof(mac_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send cphy_stop_cnf to RRC
  status = msgr_send(&cphy_stop_cnf.msgr_hdr, sizeof(cphy_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Get eMBMS coverage status indication*/
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == TRUE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  lte_rrc_utf_check_no_more_msgs();

}
void LteRrcTesteMBMSEnableafterLTEDeactivate::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test to verify eMBMS Enable during LTE stack activate*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSEnableduringLTEActivate);

void LteRrcTesteMBMSEnableduringLTEActivate::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
}

void LteRrcTesteMBMSEnableduringLTEActivate::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index =  LTE_RRC_TEST_SIB_UPDATE_0;
  lte_rrc_embms_enable_req_s enable_req;
  lte_rrc_embms_status_change_ind_s *status_change_ind_ptr = NULL;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_mode_change_reqi_s mc_req;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  uint32 buf_len = 0;
  lte_errno_e status;

  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);



  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(cell_index, group_index, FALSE, FALSE);

  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // Prepare deactivate_req to send to RRC
  TF_MSG("Sending Mode Change Req to Activate");
  lte_rrc_init_default_hdr(&mc_req.msg_hdr,LTE_RRC_MODE_CHANGE_REQI);
  mc_req.dest_scenario = LTE_RRC_SUSPENDED_DUE_TO_RESEL_FROM_LTE_TO_G; /* don't care */
  mc_req.mode = LTE_RRC_MODE_CHANGE_DEACTIVATE;
  status = msgr_send(&mc_req.msg_hdr, sizeof(mc_req));
  TF_ASSERT(status == E_SUCCESS);

  lte_rrc_utf_wait_for_done();

  /* Verify the stop requests to L1/L2 */
  LteRrcTestReselFromLteReselSuccess__Test();

  // Trigger IRAT Resel to LTE from G
  LteRrcTestToLteCommonSendReselFromG (
    1,
    500);

  lte_rrc_utf_wait_for_done();

  // Verify that IRAT Manager activates LTE
  LteRrcTestToLteCommonVerifyML1Start ();
  LteRrcTestToLteCommonSendML1StartCnf ();

  lte_rrc_utf_wait_for_done();

  // Enable eMBMS and test the enable handling
  /* Setting the header for  RRC messages */
  lte_rrc_init_default_hdr(&enable_req.msg_hdr, LTE_RRC_EMBMS_ENABLE_REQ);
  status = msgr_send(&enable_req.msg_hdr, sizeof(enable_req));
  TF_ASSERT(status == E_SUCCESS);

  TF_MSG("Sent LTE_RRC_EMBMS_ENABLE_REQ \n");

  LteRrcTestToLteCommonVerifyML1AcqReq ( LTE_CPHY_ACQ_CELL );

  /* Get eMBMS coverage status indication*/
  lte_rrc_utf_get_next_ext_msg((byte **)&status_change_ind_ptr,&buf_len);
  TF_ASSERT(status_change_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_STATUS_CHANGE_IND);
  TF_ASSERT(status_change_ind_ptr->enabled_status == TRUE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_STATUS_CHANGE_IND");

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  lte_rrc_utf_check_no_more_msgs();
}
void LteRrcTesteMBMSEnableduringLTEActivate::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSCflClearWaitTmrBasic);

void LteRrcTesteMBMSCflClearWaitTmrBasic::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);

  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSCflClearWaitTmrBasic::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {1, 500, 1, 1};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  //LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 500);

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_29, LTE_RRC_TEST_CELL_18, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestEmbmsRel11toRel9Toggle_Test(LTE_RRC_TEST_CELL_18);

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_18, LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0);

  //Prep SIB15 for target cell
  uint16 sib15_intra_2[] = {0};
  uint16 sib15_inter_2[] = {1, 500, 1, 1};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0, NULL, sib15_inter_2, NULL);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 500);

  LteRrcTesteMBMSAvailSaiListInd();

  TF_SLEEP(100);

  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  TF_SLEEP(2000);

  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  LteRrcSendeMBMSDeactivateReqForService(1);

  LteRrcTesteMBMSDeactivateCnfForService(1);

  //Afer CFL timer expiry, CFL/IFL will be updated
  TF_SLEEP(lte_rrc_esmgr_data.sd_ptr->clear_cfl_wait_tmr_value);

  LteRrcTesteMBMSMbmsInterestIndULMessage(FALSE, 0);
}

void LteRrcTesteMBMSCflClearWaitTmrBasic::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* MCCH Timer expiry during resume success/failure cases */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMcchTimerExpiryDuringReseltoWRsmePass);

void LteRrcTesteMBMSMcchTimerExpiryDuringReseltoWRsmePass::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMcchTimerExpiryDuringReseltoWRsmePass::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  uint32 buf_len;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  uint16 sib15_intra[] = {1, 1};
  uint16 sib15_inter[] = {1, 400, 1, 2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, sib15_intra, sib15_inter, NULL);

  test_mcch_tmr_expiry = TRUE;

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(2, 1, sai_list);

  LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, FALSE, FALSE, 0);

  // Trigger DO Reselection
  LteRrcTestReselTriggerResel (LTE_RRC_TEST_IRAT_W, cell_index);

  // Verify that LTE stack has been suspended
  LteRrcTestReselVerifyReqToSuspend (LTE_RRC_TEST_IRAT_W );

  // Send suspend confirmation along with time transfer info.
  // Wait for IRAT Reselection Start to be sent to W stack
  LteRrcTestReselVerifyReqToTargetRAT (LTE_RRC_TEST_IRAT_W );

  TF_SLEEP(6000);

  //IRAT Resel failure - resume success
  LteRrcTestReselFromLteToWReselectionFailure__Test();

  LteRrcTestMcchTimerExpiryHdlrAfterIratReselFail__Test();

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_TMGI_NOT_FOUND);

}

void LteRrcTesteMBMSMcchTimerExpiryDuringReseltoWRsmePass::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* MCCH Timer expiry during resume success/failure cases */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSMcchTimerExpiryDuringReseltoWRsmeFail);

void LteRrcTesteMBMSMcchTimerExpiryDuringReseltoWRsmeFail::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSMcchTimerExpiryDuringReseltoWRsmeFail::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  uint32 buf_len;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  uint16 sib15_intra[] = {1, 1};
  uint16 sib15_inter[] = {1, 400, 1, 2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, sib15_intra, sib15_inter, NULL);

  test_mcch_tmr_expiry = TRUE;

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(2, 1, sai_list);

  LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, FALSE, FALSE, 0);

  // Trigger DO Reselection
  LteRrcTestReselTriggerResel (LTE_RRC_TEST_IRAT_W, cell_index);

  // Verify that LTE stack has been suspended
  LteRrcTestReselVerifyReqToSuspend (LTE_RRC_TEST_IRAT_W );

  // Send suspend confirmation along with time transfer info.
  // Wait for IRAT Reselection Start to be sent to W stack
  LteRrcTestReselVerifyReqToTargetRAT (LTE_RRC_TEST_IRAT_W );

  //Timeout the MCCH timer
  TF_SLEEP(6000);

  //IRAT Resel failure - resume failure
  //LteRrcTestReselFromLteReselectionFailureResumeFailed__Test( LTE_RRC_TEST_IRAT_W );

  // Simulate failure of "Target RAT" camping
  LteRrcTestReselFromLteSendReselFailed ( LTE_RRC_TEST_IRAT_W );

  // Since the IRAT reselection failed, LTE RRC should try to resume ML1
  LteRrcTestReselVerifyReqToResume ( LTE_RRC_TEST_IRAT_W );

  // Simulate ML1 resume failure!!
  LteRrcTestReselSendML1ResumeCnf ( E_FAILURE );

  LteRrcTestReselVerifyML1ReselCancelReq ( LTE_CPHY_RESEL_CANCEL_CAUSE_IRAT_RESEL_FAILURE );

  // Verify CPHY Abort
  LteRrcTestReselVerifyCphyabort();

  // RRC should send no service indi
  LteRrcTestReselVerifyNoServiceInd ();

  LteRrcTestServiceRequestSysScanSuccess2__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_FAIL_TMGI_NOT_FOUND);

}

void LteRrcTesteMBMSMcchTimerExpiryDuringReseltoWRsmeFail::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}
/*===========================================================================
This test monitors MCCH timer expiry during Controller suspend. Timer expiry
should occur after resuming controller
===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcEmpMcchWtTimerExpDuringMLSuspend);

void LteRrcEmpMcchWtTimerExpDuringMLSuspend::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
#ifdef FEATURE_QTF_CRM_TODO
  TF_STUB(lte_rrc_cap_get_fgi_bit) = lte_rrc_test_cap_get_fgi_bit_1;
#endif

}

void LteRrcEmpMcchWtTimerExpDuringMLSuspend::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcTestInitializeCells();

  lte_rrc_irat_to_1x_tf_set_csfb_enabled ( 1 );
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Setup SRB2 and a DRB
  LteRrcTestConnectionReconfig1__Test();

  // At this point, send an enable req
  LteRrceMBMSEnable__Test();

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  TF_MSG("IRAT Integration: Send MobilityFromEUTRA to trigger IRAT HO");
  lte_rrc_irat_ho_test_send_mobility_to_1x(L21X_moblity_1xECSFB_r9);

  TF_MSG("IRAT Integration: Verify PDCP UL Data suspend before HO");
  lte_rrc_irat_ho_test_verify_pdcp_ul_suspend();
  lte_rrc_irat_ho_test_send_pdcp_ul_cnf();

  TF_MSG("IRAT Integration: Verify MAC Abort before HO");
  lte_rrc_irat_ho_test_verify_mac_abort();
  lte_rrc_irat_ho_test_send_mac_abort_cnf();

  TF_MSG("IRAT Integration: Verify 1xCSFB started ind to NAS before HO");
  lte_rrc_irat_ho_test_verify_1xcsfb_started_ind();

  TF_MSG("IRAT Integration: Verify LTE Suspend before HO");
  lte_rrc_irat_ho_test_verify_lte_suspend(LTE_CPHY_IRAT_1X_HANDOVER);
  lte_rrc_irat_ho_test_send_lte_suspend_cnf(LTE_CPHY_IRAT_1X_HANDOVER);

  TF_MSG("IRAT Integration: Verify CSFB HO request to 1xCP");
  lte_rrc_irat_ho_test_verify_ho_req_to_1x(L21X_moblity_1xECSFB_r9);

  TF_SLEEP(5140);

  // First NAS will abort RRC Connection
  TF_MSG("IRAT Integration: Send Conn Abort, IRAT Success");
  lte_rrc_irat_ho_test_send_nas_abort_irat_success ();

  TF_MSG("IRAT Integration: Verify PDCP UL Re-Cfg Prep");
  lte_rrc_irat_ho_test_verify_pdcpul_recfg_prep ();

  TF_MSG("IRAT Integration: Verify MAC Abort before HO");
  lte_rrc_irat_ho_test_verify_mac_abort();
  lte_rrc_irat_ho_test_send_mac_abort_cnf();

  TF_MSG("IRAT Integration: Verify L2 Cfg Release");
  lte_rrc_irat_ho_test_verify_mac_rlc_pdcp_cfg_rel();

  TF_MSG("IRAT Integration: Verify Conn Release, IRAT Success to NAS");
  lte_rrc_irat_ho_test_verify_conn_rel_irat_success_ind();

  lte_rrc_utf_wait_for_done();

  /* If HO to w is successful, NAS would send a deactivate req */
  TF_MSG("IRAT Integration: Verify RRC Deactivation");
  lte_rrc_irat_ho_test_send_deactivate_req ();

  lte_rrc_test_integration_verify_req_send_cnf(NULL, LTE_RRC_BARRING_UPDATE_IND, LTE_RRC_TEST_CELL_0, FALSE, NULL);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->status != E_SUCCESS);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.mrb_id == 36);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[0] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[1] == 0);
  TF_ASSERT(act_tmgi_cnf_ptr->bearer_info.session_info.tmgi.service_id[2] == 1);

  /* Receive the coverage state ind thrown on receiving the enable req */
  lte_rrc_utf_get_next_ext_msg((byte **)&cov_ind_ptr,&buf_len);
  TF_ASSERT(cov_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_COVERAGE_STATE_IND);
  TF_ASSERT(cov_ind_ptr->coverage_status == LTE_RRC_EMBMS_COVERAGE_STATUS_NOT_AVAILABLE);
  TF_MSG("Rcvd LTE_RRC_EMBMS_COVERAGE_STATE_IND");

  TF_MSG("IRAT Integration: Verify L1 & L2 Stops");
  //lte_rrc_irat_ho_test_verify_l1_and_l2_stop();
  lte_mac_stop_req_msg_s *mac_stop_req_ptr;
  lte_mac_stop_cnf_msg_s mac_stop_cnf;

  lte_rlc_stop_req_s *rlc_stop_req_ptr;
  lte_rlc_stop_cnf_s rlc_stop_cnf;

  lte_pdcp_stop_req_msg_s *pdcp_stop_req_ptr;
  lte_pdcp_stop_cnf_msg_s pdcp_stop_cnf;

  lte_cphy_stop_req_s *cphy_stop_req_ptr = NULL;
  lte_cphy_stop_cnf_s cphy_stop_cnf;

  // We expect stop requests to L2
  /* Checking for LTE_PDCPUL_STOP_REQ */
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr,&buf_len);
  TF_MSG("\n\nMsg is 0x%x", pdcp_stop_req_ptr->msg_hdr.id);
  TF_ASSERT(LTE_PDCPUL_STOP_REQ == pdcp_stop_req_ptr->msg_hdr.id);

  /* Checking for LTE_PDCPDL_STOP_REQ */
  lte_rrc_utf_get_next_ext_msg((byte**)&pdcp_stop_req_ptr,&buf_len);
  TF_ASSERT(LTE_PDCPDL_STOP_REQ == pdcp_stop_req_ptr->msg_hdr.id);

  /* Checking for LTE_RLCUL_STOP_REQ */
  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr,&buf_len);
  TF_ASSERT(LTE_RLCUL_STOP_REQ == rlc_stop_req_ptr->msg_hdr.id);

  /* Checking for LTE_RLCDL_STOP_REQ */
  lte_rrc_utf_get_next_ext_msg((byte**)&rlc_stop_req_ptr,&buf_len);
  TF_ASSERT(LTE_RLCDL_STOP_REQ == rlc_stop_req_ptr->msg_hdr.id);

  /* Checking for LTE_MAC_STOP_REQ */
  lte_rrc_utf_get_next_ext_msg((byte**)&mac_stop_req_ptr,&buf_len);
  TF_ASSERT(LTE_MAC_STOP_REQ == mac_stop_req_ptr->hdr.id);

  /* Checking for LTE_CPHY_STOP_REQ */
  lte_rrc_utf_get_next_ext_msg((byte**)&cphy_stop_req_ptr, &buf_len);
  TF_ASSERT(buf_len == sizeof(lte_cphy_stop_req_s));
  TF_ASSERT(cphy_stop_req_ptr->msgr_hdr.id == LTE_CPHY_STOP_REQ);

  /* Sending PDCPUL Stop Cnf */
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr,LTE_PDCPUL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Sending MAC Stop Cnf */
  lte_rrc_init_default_hdr(&mac_stop_cnf.hdr,LTE_MAC_STOP_CNF);
  mac_stop_cnf.status = E_SUCCESS;
  status = msgr_send(&mac_stop_cnf.hdr, sizeof(mac_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Sending PDCPDL Stop Cnf */
  lte_rrc_init_default_hdr(&pdcp_stop_cnf.msg_hdr,LTE_PDCPDL_STOP_CNF);
  pdcp_stop_cnf.cnf_status = E_SUCCESS;
  status = msgr_send(&pdcp_stop_cnf.msg_hdr, sizeof(pdcp_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Sending RLCUL Stop Cnf */
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr,LTE_RLCUL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Sending RLCDL Stop Cnf */
  lte_rrc_init_default_hdr(&rlc_stop_cnf.msg_hdr,LTE_RLCDL_STOP_CNF);
  rlc_stop_cnf.cnf_status = E_SUCCESS;
  status = msgr_send(&rlc_stop_cnf.msg_hdr, sizeof(rlc_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send cphy_stop_cnf to RRC
  lte_rrc_init_default_hdr(&cphy_stop_cnf.msgr_hdr, LTE_CPHY_STOP_CNF);
  cphy_stop_cnf.status = E_SUCCESS;
  status = msgr_send(&cphy_stop_cnf.msgr_hdr, sizeof(cphy_stop_cnf));
  TF_ASSERT(status == E_SUCCESS);


  TF_MSG("IRAT Integration: Verify Deactivation Cnf to NAS");

  lte_rrc_irat_ho_test_verify_deactivate_cnf();

  lte_rrc_utf_reset();
}
void LteRrcEmpMcchWtTimerExpDuringMLSuspend::Teardown()
{
    lte_rrc_test_sec_teardown();
    lte_rrc_utf_teardown();
}


/*===========================================================================
This test monitors MCCH timer expiry during Controller suspend. Timer expiry
should occur after resuming controller
===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcEmpMcchWtTimerExpDuringMLSuspendResumeFails);

void LteRrcEmpMcchWtTimerExpDuringMLSuspendResumeFails::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
#ifdef FEATURE_QTF_CRM_TODO
  TF_STUB(lte_rrc_cap_get_fgi_bit) = lte_rrc_test_cap_get_fgi_bit_1;
#endif

}

void LteRrcEmpMcchWtTimerExpDuringMLSuspendResumeFails::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  lte_rrc_embms_coverage_state_ind_s *cov_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  uint32 buf_len = 0;
  lte_errno_e status;

  LteRrcTestInitializeCells();

  lte_rrc_irat_to_1x_tf_set_csfb_enabled ( 1 );
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Setup SRB2 and a DRB
  LteRrcTestConnectionReconfig1__Test();

  // At this point, send an enable req
  LteRrceMBMSEnable__Test();

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  TF_MSG("IRAT Integration: Send MobilityFromEUTRA to trigger IRAT HO");
  lte_rrc_irat_ho_test_send_mobility_to_1x(L21X_moblity_1xECSFB_r9);

  TF_MSG("IRAT Integration: Verify PDCP UL Data suspend before HO");
  lte_rrc_irat_ho_test_verify_pdcp_ul_suspend();
  lte_rrc_irat_ho_test_send_pdcp_ul_cnf();

  TF_MSG("IRAT Integration: Verify MAC Abort before HO");
  lte_rrc_irat_ho_test_verify_mac_abort();
  lte_rrc_irat_ho_test_send_mac_abort_cnf();

  TF_MSG("IRAT Integration: Verify 1xCSFB started ind to NAS before HO");
  lte_rrc_irat_ho_test_verify_1xcsfb_started_ind();

  TF_MSG("IRAT Integration: Verify LTE Suspend before HO");
  lte_rrc_irat_ho_test_verify_lte_suspend(LTE_CPHY_IRAT_1X_HANDOVER);
  lte_rrc_irat_ho_test_send_lte_suspend_cnf(LTE_CPHY_IRAT_1X_HANDOVER);

  TF_MSG("IRAT Integration: Verify CSFB HO request to 1xCP");
  lte_rrc_irat_ho_test_verify_ho_req_to_1x(L21X_moblity_1xECSFB_r9);

  TF_MSG("IRAT Integration: Send 1xCSFB fail to RRC");
  lte_rrc_irat_ho_test_send_1x_fail(L21X_moblity_1xECSFB_r9);

  TF_MSG("IRAT Integration: Verify 1xCSFB failed ind to NAS before HO");
  lte_rrc_irat_ho_test_verify_1x_ho_failed_ind(L21X_moblity_1xECSFB_r9);

  TF_MSG("IRAT Integration: Verifying Resume request to ML1");
  lte_rrc_irat_ho_test_verify_lte_resume(LTE_CPHY_IRAT_1X_HANDOVER);

  TF_MSG("IRAT Integration: Send Resume FAILURE!");
  lte_rrc_irat_ho_test_send_lte_resume_cnf(E_FAILURE);

  // Verify Reestablishment after Mobility from EUTRA msg failure
  lte_rrc_test_is_ueinfo_rpt_req(TRUE);

  LteRrcTestReestablishmentMultiBand__Test(LTE_RRC_TEST_CELL_29, lte_rrc_osys_ReestablishmentCause_handoverFailure, FALSE);

  lte_rrc_utf_reset();
}
void LteRrcEmpMcchWtTimerExpDuringMLSuspendResumeFails::Teardown()
{
    lte_rrc_test_sec_teardown();
    lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSSib15MfbiFgi31Disable);

void LteRrcTesteMBMSSib15MfbiFgi31Disable::Setup()
{
  //Disable FGI 31
  uint32 fgi = 0xFFFFFFFD;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/cap/fgi",
                    &fgi, sizeof(fgi), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSSib15MfbiFgi31Disable::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {0};
  uint16 sib15_inter[] = {1, 5060, 1, 1};
  /* num_freq_info, (mfbi valid boolean, num entries in mfbi, mfbi1, mfbi2,..) x num_freq_info */
  uint16 sib15_mfbi[] = {1,1,1,17};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, sib15_mfbi);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, FALSE, LTE_EMBMS_FAIL_FREQ_CONFLICT);

}

void LteRrcTesteMBMSSib15MfbiFgi31Disable::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test Scenario:
   One cell has 2 areas, 0-1, 1 service is active in area 0
   Reselect to another cell with service from area 0 in area 1 with conflicting TDD UL/DL sub frames
*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSInterMBSFNAreaMobilityTddUlDlSubfrmCollision);

void LteRrcTesteMBMSInterMBSFNAreaMobilityTddUlDlSubfrmCollision::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSInterMBSFNAreaMobilityTddUlDlSubfrmCollision::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_10;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test eMBMS TMGI activate
  //LteRrcTesteMBMSActSvc__Test(1, lte_rrc_test_embms_mcch_msg1, sizeof(lte_rrc_test_embms_mcch_msg1), 0);
  // Activate service
  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetupForTwoAreas();

  LteRrcTestMTCHSetupArea0Service1In2Areas(FALSE);
  //LteRrcTestMTCHSetupArea0PMCH2LC1(FALSE, TRUE);

  LteRrcTestActTMGICnfiAndActListIndForService1();

  /* Cache other MCCH pdus */
  //LteRrcTesteMBMSGetAllMcchPdus__Test();

  // Test eMBMS TMGI activate
  //LteRrcTesteMBMSActSvc__Test2();

  cell[LTE_RRC_TEST_CELL_17].earfcn = 2;
  cell[LTE_RRC_TEST_CELL_17].phys_cell_id = 499;

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(LTE_RRC_TEST_CELL_10, LTE_RRC_TEST_CELL_17);


  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test2(LTE_RRC_TEST_CELL_17, LTE_RRC_TEST_SIB_UPDATE_0, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(LTE_RRC_TEST_CELL_17, LTE_RRC_TEST_SIB_UPDATE_0);

  lte_rrc_test_embms_tdd_collision_detected = TRUE;

  // Test inter MBSFN area mobility handling after reselection
  LteRrcTesteMBMSInterMBSFNAreaMobilityTwotoOneAreaUlDlSubfrmCollision__Test();
}

void LteRrcTesteMBMSInterMBSFNAreaMobilityTddUlDlSubfrmCollision::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSFastMobilityTmgiFail);

void LteRrcTesteMBMSFastMobilityTmgiFail::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
  lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSFastMobilityTmgiFail::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_28;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_inter[] = {3, 300, 2, 1, 2, 400, 2, 2, 3, 500, 3, 4, 5, 1};
  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, NULL, sib15_inter, NULL);

  uint16 sai_list[] = {1,2,3};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 3, sai_list);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS_CONN_RADIO_TUNE);

  uint16 req_freq_list[] = {300,400,500};
  uint16 cnf_freq_list[] = {300};
  LteRrcTesteMBMSMbmsBestNeighReqCnf(3, req_freq_list, 1, cnf_freq_list);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 300);

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_28, LTE_RRC_TEST_CELL_29, LTE_RRC_TEST_SIB_UPDATE_0);

  //Prep SIB15 for target cell
  uint16 sib15_intra_3[] = {1, 1};
  uint16 sib15_inter_3[] = {1, 400, 1, 2};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_29, LTE_RRC_TEST_SIB_UPDATE_0, sib15_intra_3, sib15_inter_3, NULL);

  LteRrcEmbmsFastMobilityTmgiFailPart1_Test(LTE_RRC_TEST_CELL_29, TRUE, TRUE, 300);

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_29, LTE_RRC_TEST_CELL_28, LTE_RRC_TEST_SIB_UPDATE_0);

  //Prep SIB15 for target cell
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_28, LTE_RRC_TEST_SIB_UPDATE_0, NULL, sib15_inter, NULL);

  LteRrcEmbmsFastMobilityTmgiFailPart2_Test(LTE_RRC_TEST_CELL_28);

}

void LteRrcTesteMBMSFastMobilityTmgiFail::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}



/*Enable request for eMBMS is rcvd when SIB reading active for neighbor cell
  during cell reselection*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSEnableDuringReselToNewCell);

void LteRrcTesteMBMSEnableDuringReselToNewCell::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSEnableDuringReselToNewCell::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  uint32 buf_len = 0;
  lte_errno_e status;
  lte_cphy_sib_sched_req_s *sib_sched_req;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5, SIB15 on the cell
  //LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  //LteRrceMBMSEnable__Test();

  // Test reselection to new cell without eMBMS coverage
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // We expect a sib_sched_req message from RRC to abort SIB reading on source cell
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (0));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (0));

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMbandWithEnable__Test(tgt_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_0);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, FALSE, FALSE);

}

void LteRrcTesteMBMSEnableDuringReselToNewCell::Teardown()
{
  lte_rrc_utf_teardown();
}


/* Test to verify handling of activate while reselecting from a cell where eMBMS is active to a cell
   where only SIb15 is scheduled without SIB13 */
TF_DEFINE_TEST_CASE(NO_RUN, LteRrcTesteMBMSActandReselToCellWithSIB15Only);

void LteRrcTesteMBMSActandReselToCellWithSIB15Only::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActandReselToCellWithSIB15Only::Test()
{
  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_27;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, FALSE);

  // Test activation of SAI on neighbor freq that has SIB15 only without SIB15
  LteRrcTesteMBMSActandReselToCellWithSIB15Only__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActandReselToCellWithSIB15Only::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate while reselecting from a cell where eMBMS is active to a cell
   where mfsfn config is invalid in sib2 */

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActandReselToCellInvalidMbsfncfg);

void LteRrcTesteMBMSActandReselToCellInvalidMbsfncfg::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActandReselToCellInvalidMbsfncfg::Test()
{
  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_14;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, FALSE);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  LteRrcTesteMBMSReselToCellWithInvalidMbsfnCfg__Test(tgt_cell_index, group_index);
}

void LteRrcTesteMBMSActandReselToCellInvalidMbsfncfg::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate while reselecting from a cell where eMBMS is active to a cell
   where no  SIB13 and SIB15 are scheduled*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivateWhileReselToCellWithnoSIB13SIB15);

void LteRrcTesteMBMSActivateWhileReselToCellWithnoSIB13SIB15::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSActivateWhileReselToCellWithnoSIB13SIB15::Test()
{

  lte_cphy_sib_sched_req_s *sib_sched_req;
  uint32 buf_len;

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_0;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5));

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[src_cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[src_cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (0));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (0));

  // Test activation of SAI on neighbor freq that has no SIB13 and SIB15
  LteRrcTesteMBMSActduringReselToCellWithnoSIB113SIB15__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActivateWhileReselToCellWithnoSIB13SIB15::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate before cell select cnf while reselecting from a cell where requested SAI is not present  to a cell
   where where requested SAI is present*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivatebeforeCellSelectCNFWhileReselToCellWithrequestedSAI);

void LteRrcTesteMBMSActivatebeforeCellSelectCNFWhileReselToCellWithrequestedSAI::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSActivatebeforeCellSelectCNFWhileReselToCellWithrequestedSAI::Test()
{

  lte_cphy_sib_sched_req_s *sib_sched_req;
  uint32 buf_len;

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, TRUE);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  /* handling of activate before cell select cnf while reselecting from a cell where requested SAI is not present  to a cell
    where where requested SAI is present*/
  LteRrcTesteMBMSActduringReselToCellWithrequestedSAI__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActivatebeforeCellSelectCNFWhileReselToCellWithrequestedSAI::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate before reselecting from a cell where requested SAI is not present  to a cell
   where where requested SAI is present*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivatebeforeReselToCellWithrequestedSAI);

void LteRrcTesteMBMSActivatebeforeReselToCellWithrequestedSAI::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSActivatebeforeReselToCellWithrequestedSAI::Test()
{

  lte_cphy_sib_sched_req_s *sib_sched_req;
  uint32 buf_len;

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, TRUE);

  /* handling of activate while reselecting from a cell where requested SAI is not present  to a cell
    where where requested SAI is present*/
  LteRrcTesteMBMSActbeforeReselToCellWithrequestedSAI__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActivatebeforeReselToCellWithrequestedSAI::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate before cell select cnf while reselecting from a cell where requested SAI is present  to a cell
   where where requested SAI is not present*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivatebeforeCellSelectCNFWhileReselToCellWithoutrequestedSAI);

void LteRrcTesteMBMSActivatebeforeCellSelectCNFWhileReselToCellWithoutrequestedSAI::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSActivatebeforeCellSelectCNFWhileReselToCellWithoutrequestedSAI::Test()
{

  lte_cphy_sib_sched_req_s *sib_sched_req;
  uint32 buf_len;

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, TRUE);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  /* handling of activate while reselecting from a cell where requested SAI is not present  to a cell
    where where requested SAI is present*/
  LteRrcTesteMBMSActduringReselToCellWithoutrequestedSAI__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActivatebeforeCellSelectCNFWhileReselToCellWithoutrequestedSAI::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate during LLC Config while reselecting from a cell where requested SAI is present  to a cell
   where where requested SAI is not present*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivateDuringLLCConfigWhileReselToCellWithoutrequestedSAI);

void LteRrcTesteMBMSActivateDuringLLCConfigWhileReselToCellWithoutrequestedSAI::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSActivateDuringLLCConfigWhileReselToCellWithoutrequestedSAI::Test()
{

  lte_cphy_sib_sched_req_s *sib_sched_req;
  uint32 buf_len;

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, TRUE);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  /* handling of activate while reselecting from a cell where requested SAI is not present  to a cell
    where where requested SAI is present*/
  LteRrcTesteMBMSActduringReselToCellWithoutrequestedSAI1__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActivateDuringLLCConfigWhileReselToCellWithoutrequestedSAI::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate during LLC Config while reselecting from a cell where requested SAI is present  to a cell
   where where requested SAI is not present*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivateDuringLLCConfigWhileReselToCellWithNoeMBMS);

void LteRrcTesteMBMSActivateDuringLLCConfigWhileReselToCellWithNoeMBMS::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSActivateDuringLLCConfigWhileReselToCellWithNoeMBMS::Test()
{

  lte_cphy_sib_sched_req_s *sib_sched_req;
  uint32 buf_len;

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_0;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, TRUE);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  /* handling of activate while reselecting from a cell where requested SAI is not present  to a cell
    where where requested SAI is present*/
  LteRrcTesteMBMSActduringReselToCellWithNoeMBMS__Test(src_cell_index, tgt_cell_index, LTE_RRC_TEST_SIB_UPDATE_3);

}

void LteRrcTesteMBMSActivateDuringLLCConfigWhileReselToCellWithNoeMBMS::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate before resel ind from a cell where requested SAI is present  to a cell
   where where requested SAI is not present*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivatebeforeReselToCellWithoutrequestedSAI);

void LteRrcTesteMBMSActivatebeforeReselToCellWithoutrequestedSAI::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSActivatebeforeReselToCellWithoutrequestedSAI::Test()
{

  lte_cphy_sib_sched_req_s *sib_sched_req;
  uint32 buf_len;

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, TRUE);

  /* handling of activate before reselecting from a cell where requested SAI is present  to a cell
    where where requested SAI is not present*/
  LteRrcTesteMBMSActivatebeforeReselToCellWithoutrequestedSAI__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActivatebeforeReselToCellWithoutrequestedSAI::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate after reselecting and sib13 decode to a cell where where requested SAI is present*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivateafterReselToCellWithrequestedSAI);

void LteRrcTesteMBMSActivateafterReselToCellWithrequestedSAI::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSActivateafterReselToCellWithrequestedSAI::Test()
{

  lte_cphy_sib_sched_req_s *sib_sched_req;
  uint32 buf_len;

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, TRUE);

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  /* handling of activate while reselecting from a cell where requested SAI is not present  to a cell
    where where requested SAI is present*/
  LteRrcTesteMBMSActivateafterReselToCellWithrequestedSAI__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActivateafterReselToCellWithrequestedSAI::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate while reselecting from a cell where eMBMS is active to a cell
   where only SIb15 is scheduled without SIB13 but SIB15 times out on the target cell*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActandReselToCellWithSIB15OnlyTimeout);

void LteRrcTesteMBMSActandReselToCellWithSIB15OnlyTimeout::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
}

/* Test to verify handling of activate in connecting state and connection establishment fails*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivateDuringConnEstablishmentandConnFails);

void LteRrcTesteMBMSActivateDuringConnEstablishmentandConnFails::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;
}

void LteRrcTesteMBMSActivateDuringConnEstablishmentandConnFails::Test()
{

  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_rrc_conn_est_req_s conn_est_req;
  lte_mac_access_req_msg_s *access_req;
  lte_mac_access_cnf_msg_s access_cnf;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;

  uint32 buf_len;
  lte_errno_e status;

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, TRUE);

  // ---------------------------------------------

  // Prepare conn_est_req to send to RRC
  lte_rrc_init_default_hdr(&conn_est_req.msg_hdr, LTE_RRC_CONN_EST_REQ);

  conn_est_req.est_cause = LTE_RRC_EST_CAUSE_MO_SIGNALING;
  conn_est_req.registered_mme_is_present = FALSE;
  // Send conn_est_req to RRC
  status = msgr_send(&conn_est_req.msg_hdr, sizeof(conn_est_req));
  TF_ASSERT(status == E_SUCCESS);
  // ---------------------------------------------

  // We expect a access_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&access_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_access_req_msg_s));
  TF_ASSERT(access_req->hdr.id == LTE_MAC_ACCESS_REQ);
  TF_ASSERT(access_req->access_info.access_reason == LTE_MAC_ACCESS_REASON_CONNECTION_REQ);
  TF_ASSERT(access_req->access_info.raid == LTE_INVALID_RA_ID);

  // Prepare access_cnf to send to RRC
  lte_rrc_init_default_hdr(&access_cnf.hdr, LTE_MAC_ACCESS_CNF);

  //Include a valid C-RNTI in Access CNF
  access_cnf.crnti_included = TRUE;
  access_cnf.crnti = 0x3459;

  // Send access_cnf to RRC
  status = msgr_send(&access_cnf.hdr, sizeof(access_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Send Activate req with SAI for service 3 */
  LteRrcSendeMBMSActivateReqWithSAIForService(3, 1, 3, 4);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));

  LteRrcTestConnectionReject2__Test();

  // Test reselection to neighbor cell
  LteRrcTestReselectionStart__Test(src_cell_index, tgt_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(tgt_cell_index, group_index, FALSE, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(tgt_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIBs after camping
  LteRrcTestSICollectionAfterCampingEmbms__Test(tgt_cell_index, group_index, TRUE, FALSE);

  /* Receive the LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&avail_sai_list_ind_ptr,&buf_len);
  TF_ASSERT(avail_sai_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Verify MCCH setup
  LteRrcTestMCCHSetup();

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req to bump priority of neighbor freqs
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  // Verify cell info
  TF_ASSERT(cfg_req->serving_cell_info.phy_cell_id == cell[tgt_cell_index].phys_cell_id);
  TF_ASSERT(cfg_req->serving_cell_info.dl_cell_frequency == cell[tgt_cell_index].earfcn);

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Send MCCH PDU in area 1
  LteRrcTestSendMCCHPDU(1, 350, 65, lte_rrc_test_embms_mcch_msg3, sizeof(lte_rrc_test_embms_mcch_msg3));

  // Verify MTCH setup for service 3
  LteRrcTestMTCHSetup(1, 1, 4);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSActivateDuringConnEstablishmentandConnFails::Teardown()
{
  lte_rrc_utf_teardown();
}


/* Test to verify handling of activate in connecting state and connection establishment succeeds*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActivateDuringConnEstablishmentandConnSucceeds);

void LteRrcTesteMBMSActivateDuringConnEstablishmentandConnSucceeds::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  TF_STUB(lte_ml1_validate_tdd_cfg_mbsfn_sf_alloc) = lte_rrc_test_stub__ml1_validate_tdd_cfg_mbsfn_sf_alloc;

}

void LteRrcTesteMBMSActivateDuringConnEstablishmentandConnSucceeds::Test()
{

  lte_cphy_sib_sched_req_s *sib_sched_req;
  lte_rrc_conn_est_req_s conn_est_req;
  lte_mac_access_req_msg_s *access_req;
  lte_mac_access_cnf_msg_s access_cnf;
  lte_cphy_idle_meas_cfg_req_s *cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s cfg_cnf;
  lte_cphy_common_cfg_req_s *common_cfg_req;
  lte_cphy_common_cfg_cnf_s common_cfg_cnf;
  lte_rrc_embms_act_tmgi_list_ind_s *tmgi_list_ind_ptr = NULL;
  lte_rrc_embms_act_tmgi_cnf_s *act_tmgi_cnf_ptr = NULL;
  lte_rrc_embms_avail_sai_list_ind_s *avail_sai_list_ind_ptr = NULL;
  lte_rrc_ul_data_cnf_s *ul_data_cnf_ptr;

    /* DSM pointer */
  dsm_item_type *dsm_ptr=NULL;
  uint16 dsm_pkt_len;
  uint8 nas_buf[LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE];
  /* Message attachment pointer */
  msgr_attach_struct_type *att_ptr = NULL;
  uint8 i;

  uint32 buf_len;
  lte_errno_e status;

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_25;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, TRUE);

  // ---------------------------------------------

  // Prepare conn_est_req to send to RRC
  lte_rrc_init_default_hdr(&conn_est_req.msg_hdr, LTE_RRC_CONN_EST_REQ);

  conn_est_req.est_cause = LTE_RRC_EST_CAUSE_MO_SIGNALING;
  conn_est_req.registered_mme_is_present = FALSE;
  conn_est_req.transaction_id = 231;
  //conn_est_req.nas_msg_container.msg_size = 20;
  // 20 bytes of some bogus data for now
  for (i = 0; i < 20; i++)
  {
    //conn_est_req.nas_msg_container.msg_payload[i] = i;
    nas_buf[i] = i;
  }
  dsm_pkt_len = dsm_pushdown(&dsm_ptr,
							 nas_buf,
							 LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE,
							 DSM_DS_SMALL_ITEM_POOL);

  TF_ASSERT(LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE == dsm_pkt_len);

  /* Set DSM attach */
  conn_est_req.msg_hdr.num_attach = 1;
  att_ptr = msgr_get_attach(&conn_est_req.msg_hdr, 0);
  TF_ASSERT(att_ptr != NULL);
  msgr_set_dsm_attach(att_ptr, dsm_ptr);
  // Send conn_est_req to RRC
  status = msgr_send(&conn_est_req.msg_hdr, sizeof(conn_est_req));
  TF_ASSERT(status == E_SUCCESS);
  // ---------------------------------------------

  // We expect a access_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&access_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_mac_access_req_msg_s));
  TF_ASSERT(access_req->hdr.id == LTE_MAC_ACCESS_REQ);
  TF_ASSERT(access_req->access_info.access_reason == LTE_MAC_ACCESS_REASON_CONNECTION_REQ);
  TF_ASSERT(access_req->access_info.raid == LTE_INVALID_RA_ID);

  // Prepare access_cnf to send to RRC
  lte_rrc_init_default_hdr(&access_cnf.hdr, LTE_MAC_ACCESS_CNF);

  //Include a valid C-RNTI in Access CNF
  access_cnf.crnti_included = TRUE;
  access_cnf.crnti = 0x3459;

  // Send access_cnf to RRC
  status = msgr_send(&access_cnf.hdr, sizeof(access_cnf));
  TF_ASSERT(status == E_SUCCESS);

  /* Send Activate req with SAI for service 3 */
  LteRrcSendeMBMSActivateReqWithSAIForService(3, 1, 3, 4);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_CNF */
  lte_rrc_utf_get_next_ext_msg((byte **)&act_tmgi_cnf_ptr,&buf_len);
  TF_ASSERT(act_tmgi_cnf_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_CNF);
  TF_ASSERT(act_tmgi_cnf_ptr->debug_trace_id == 20);
  TF_ASSERT(act_tmgi_cnf_ptr->act_status == LTE_EMBMS_SUCCESS_IDLE_RADIO_TUNE);

  /* Receive the LTE_RRC_EMBMS_ACT_TMGI_LIST_IND */
  lte_rrc_utf_get_next_ext_msg((byte **)&tmgi_list_ind_ptr,&buf_len);
  TF_ASSERT(tmgi_list_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_ACT_TMGI_LIST_IND);
  TF_ASSERT(tmgi_list_ind_ptr->num_active_embms_sessions == 1);
  TF_MSG("Rcvd LTE_RRC_EMBMS_ACT_TMGI_LIST_IND");

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

    // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&cfg_cnf.msgr_hdr, sizeof(cfg_cnf));

  LteRrcTestConnectionSetup5__Test(src_cell_index);

  uint16 req_freq_list[] = {300,350,450};
  uint16 cnf_freq_list[] = {350};
  LteRrcTesteMBMSMbmsBestNeighReqCnf(3, req_freq_list, 1, cnf_freq_list);

  lte_rrc_utf_get_next_ext_msg((byte**)&ul_data_cnf_ptr, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_rrc_ul_data_cnf_s));
  TF_ASSERT(ul_data_cnf_ptr != NULL);
  TF_ASSERT(ul_data_cnf_ptr->msg_hdr.id == LTE_RRC_UL_DATA_CNF);
  TF_ASSERT(LTE_RRC_UL_DATA_CNF_SUCCESS == ul_data_cnf_ptr->status);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 350);

  lte_rrc_utf_check_no_more_msgs();
}

void LteRrcTesteMBMSActivateDuringConnEstablishmentandConnSucceeds::Teardown()
{
  lte_rrc_utf_teardown();
}


void LteRrcTesteMBMSActandReselToCellWithSIB15OnlyTimeout::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_27;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, FALSE);

  // Test activation of SAI on neighbor freq that has SIB15 only without SIB15
  LteRrcTesteMBMSActandReselToCellWithSIB15OnlyTimeout__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActandReselToCellWithSIB15OnlyTimeout::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test to verify handling of activate during Connected to Idle camping */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActDuringConnToIdleCamping);

void LteRrcTesteMBMSActDuringConnToIdleCamping::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
}

void LteRrcTesteMBMSActDuringConnToIdleCamping::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(cell_index, group_index, TRUE);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Release the unicast bearers
  LteRrcTestConnectionRelease1__Test(cell_index, FALSE);

  // Test activation handling when CSP is not camped during Conn to Idle camping
  LteRrcTesteMBMSActDuringConnToIdleCamping__Test(cell_index, group_index);
}
void LteRrcTesteMBMSActDuringConnToIdleCamping::Teardown()
{
    lte_rrc_test_sec_teardown();
    lte_rrc_utf_teardown();
}

/* Test to verify handling of activate during Connected to Idle camping */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActDuringConnToIdleCamping1);

void LteRrcTesteMBMSActDuringConnToIdleCamping1::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
}

void LteRrcTesteMBMSActDuringConnToIdleCamping1::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  lte_cphy_sib_sched_req_s *sib_sched_req;
  dsm_item_type *dsm_ptr_sib3 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib3;         /* Message attachment pointer */
  dsm_item_type *dsm_ptr_sib1 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib1;         /* Message attachment pointer */
  dsm_item_type *dsm_ptr_sib15 = NULL;            /* DSM pointer */
  msgr_attach_struct_type *att_ptr_sib15;         /* Message attachment pointer */
    uint8 *sib3_ptr = NULL;
  uint8 *sib1_ptr = NULL;
  uint8 *sib15_ptr = NULL;
  lte_cphy_mib_ind_s mib_ind;
  uint32 buf_len;
  lte_errno_e status;
  lte_mac_rrc_dl_data_ind_s bcch_dl_data_ind;
  uint16 sib3_size, sib1_size, sib15_size;
  lte_cphy_idle_meas_cfg_req_s *idle_meas_cfg_req;
  lte_cphy_idle_meas_cfg_cnf_s  idle_meas_cfg_cnf;
  lte_rrc_embms_avail_sai_list_ind_s *sai_list_indi;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Prepare bcch_dl_data_ind to send SIB3 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib3_ptr = (cell[cell_index].sibs_ptr[group_index])->sib3_ptr;
  sib3_size = (cell[cell_index].sibs_ptr[group_index])->sib3_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib3, sib3_ptr,
                         sib3_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib3_size);
  TF_ASSERT(dsm_ptr_sib3 != NULL);

  att_ptr_sib3 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib3, dsm_ptr_sib3);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB5));

  // ---------------------------------------------
  // We expect meas sm to have thrown the idle meas cfg req
  lte_rrc_utf_get_next_ext_msg((byte**)&idle_meas_cfg_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_idle_meas_cfg_req_s));
  TF_ASSERT(idle_meas_cfg_req->msgr_hdr.id == LTE_CPHY_IDLE_MEAS_CFG_REQ);

  TF_ASSERT(idle_meas_cfg_req->meas_cfg.
            requested_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_RESEL_COMMON |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_SERVING_FREQ |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_INTRA_FREQ |
                                      LTE_CPHY_IDLE_MEAS_CFG_MASK_SKIP_SRCH_MEAS));
  TF_ASSERT(idle_meas_cfg_req->meas_cfg.
            disabled_cfg_bitmask == (LTE_CPHY_IDLE_MEAS_CFG_MASK_WCDMA|
                                     LTE_CPHY_IDLE_MEAS_CFG_MASK_TDSCDMA |
                                     LTE_CPHY_IDLE_MEAS_CFG_MASK_GSM |
                                     LTE_CPHY_IDLE_MEAS_CFG_MASK_CDMA));

  // Send the cnf msg back to meas
  lte_rrc_init_default_hdr(&idle_meas_cfg_cnf.msgr_hdr, LTE_CPHY_IDLE_MEAS_CFG_CNF);
  idle_meas_cfg_cnf.status = E_SUCCESS;
  status = msgr_send(&idle_meas_cfg_cnf.msgr_hdr, sizeof(idle_meas_cfg_cnf));
  TF_ASSERT(status == E_SUCCESS);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);

  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB1 | LTE_CPHY_SIB_MASK_BIT_SIB5));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5));

  // Prepare bcch_dl_data_ind to send SIB1 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib1_ptr = (cell[cell_index].sibs_ptr[group_index])->sib1_ptr;
  sib1_size = (cell[cell_index].sibs_ptr[group_index])->sib1_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib1, sib1_ptr,
                         sib1_size,
                         DSM_DS_SMALL_ITEM_POOL) == sib1_size);
  TF_ASSERT(dsm_ptr_sib1 != NULL);

  att_ptr_sib1 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib1, dsm_ptr_sib1);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  bcch_dl_data_ind.sfn.sys_fn = 2;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);
  lte_rrc_utf_wait_for_done();

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare mib_ind to send to RRC
  lte_rrc_init_default_hdr(&mib_ind.msgr_hdr, LTE_CPHY_MIB_IND);

  mib_ind.mib.num_tx_antennas = 1;
  mib_ind.mib.dl_bandwidth = LTE_BW_NRB_100;
  mib_ind.mib.phich_info.phich_duration = LTE_L1_PHICH_DURATION_NORMAL;
  mib_ind.mib.phich_info.phich_resource = LTE_L1_PHICH_RESOURCE_ONE;

  mib_ind.freq = cell[cell_index].earfcn;
  mib_ind.phy_cell_id = cell[cell_index].phys_cell_id;

  mib_ind.sfn = 15;

  // Send mib_ind to RRC
  status = msgr_send(&mib_ind.msgr_hdr, sizeof(mib_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // ---------------------------------------------
  // Prepare bcch_dl_data_ind to send SIB15 to RRC
  msgr_init_hdr_attach(&bcch_dl_data_ind.hdr, MSGR_LTE_MAC, LTE_MAC_RRC_BCCH_DL_DATA_IND, 0, 1);

  sib15_ptr = (cell[cell_index].sibs_ptr[group_index])->sib15_ptr;
  sib15_size = (cell[cell_index].sibs_ptr[group_index])->sib15_size;

  TF_ASSERT(dsm_pushdown(&dsm_ptr_sib15, sib15_ptr,
						 sib15_size,
						 DSM_DS_SMALL_ITEM_POOL) == sib15_size);
  TF_ASSERT(dsm_ptr_sib15 != NULL);

  att_ptr_sib15 = msgr_get_attach(&bcch_dl_data_ind.hdr, 0);
  msgr_set_dsm_attach(att_ptr_sib15, dsm_ptr_sib15);

  bcch_dl_data_ind.freq = cell[cell_index].earfcn;
  bcch_dl_data_ind.phy_cell_id = cell[cell_index].phys_cell_id;
  bcch_dl_data_ind.sfn.sys_fn = 20;

  // Send bcch_dl_data_ind to RRC
  status = msgr_send(&bcch_dl_data_ind.hdr, sizeof(bcch_dl_data_ind));
  TF_ASSERT(status == E_SUCCESS);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_MIB |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB1 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB2 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB3 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB15));

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  TF_SLEEP(800);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == 0);
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

    // We expect a sib_sched_req message from RRC
    lte_rrc_utf_get_next_ext_msg((byte**)&sai_list_indi, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_rrc_embms_avail_sai_list_ind_s));
    TF_ASSERT(sai_list_indi->msg_hdr.id == LTE_RRC_EMBMS_AVAIL_SAI_LIST_IND);

  // Release the unicast bearers
  LteRrcTestConnectionRelease1__Test(cell_index, FALSE);

  // ---------------------------------------------
  // We expect a sib_sched_req message from RRC
  lte_rrc_utf_get_next_ext_msg((byte**)&sib_sched_req, &buf_len);

  TF_ASSERT(buf_len == sizeof(lte_cphy_sib_sched_req_s));
  TF_ASSERT(sib_sched_req->msgr_hdr.id == LTE_CPHY_SIB_SCHED_REQ);

  TF_ASSERT(sib_sched_req->freq == cell[cell_index].earfcn);
  TF_ASSERT(sib_sched_req->phy_cell_id == cell[cell_index].phys_cell_id);
  TF_ASSERT(sib_sched_req->curr_mod_prd_sib_mask == (LTE_CPHY_SIB_MASK_BIT_SIB5 |
                                                     LTE_CPHY_SIB_MASK_BIT_SIB13));
  TF_ASSERT(sib_sched_req->next_mod_prd_sib_mask == 0);

  // Test activation handling when CSP is not camped during Conn to Idle camping
  LteRrcTesteMBMSActDuringConnToIdleCamping1__Test(cell_index, group_index);
}
void LteRrcTesteMBMSActDuringConnToIdleCamping1::Teardown()
{
    lte_rrc_test_sec_teardown();
    lte_rrc_utf_teardown();
}

/* Test to verify handling of activate during redirection to an LTE cell without eMBMS coverage */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActDuringRedirToNoneMBMSCell);

void LteRrcTesteMBMSActDuringRedirToNoneMBMSCell::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
}

void LteRrcTesteMBMSActDuringRedirToNoneMBMSCell::Test()
{
  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_cell_e tgt_cell_index = LTE_RRC_TEST_CELL_0;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );
  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, TRUE);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(src_cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Release the unicast bearers and do redirection to a non-eMBMS cell
  LteRrcTestConnectionReleaseGeneric__Test(src_cell_index,
                                           lte_rrc_test_conn_rel_with_redir_msg,
                                           lte_rrc_test_conn_rel_with_redir_msg_size);

  // Test activation handling when CSP is not camped
  LteRrcTesteMBMSActDuringConnToIdleCampingNoneMBMSCell__Test(tgt_cell_index, group_index);
}
void LteRrcTesteMBMSActDuringRedirToNoneMBMSCell::Teardown()
{
    lte_rrc_test_sec_teardown();
    lte_rrc_utf_teardown();
}

/* Test to verify handling of activate during redirection to an LTE cell fails and UE goes OOS */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSActDuringRedirFailandOOS);

void LteRrcTesteMBMSActDuringRedirFailandOOS::Setup()
{
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
}

void LteRrcTesteMBMSActDuringRedirFailandOOS::Test()
{
  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_cell_e tgt_cell_index = LTE_RRC_TEST_CELL_0;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, TRUE);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(src_cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Release the unicast bearers and do redirection to a non-eMBMS cell
  LteRrcTestConnectionReleaseGeneric__Test(src_cell_index,
                                           lte_rrc_test_conn_rel_with_redir_msg,
                                           lte_rrc_test_conn_rel_with_redir_msg_size);

  // Test activation handling when CSP is not camped and redirection fails followed by OOS
  LteRrcTesteMBMSActDuringRedirFailandOOS__Test(tgt_cell_index, group_index);

}

void LteRrcTesteMBMSActDuringRedirFailandOOS::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test the handling of Disable request during activate */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSDisableDuringActivate);

void LteRrcTesteMBMSDisableDuringActivate::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSDisableDuringActivate::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Verify the handling of disable during activate TMGI processing
  LteRrcTesteMBMSDisableDuringActivate__Test();

}

void LteRrcTesteMBMSDisableDuringActivate::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSPMCHOrdering);

void LteRrcTesteMBMSPMCHOrdering::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSPMCHOrdering::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test PMCH removal/addition
  LteRrcTesteMBMSPMCHOrdering__Test();

}

void LteRrcTesteMBMSPMCHOrdering::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test the handling of Disable request during activate */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSDisableDuringActivateWhenOneTMGIActive);

void LteRrcTesteMBMSDisableDuringActivateWhenOneTMGIActive::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSDisableDuringActivateWhenOneTMGIActive::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Verify the handling of disable during activate TMGI processing
  LteRrcTesteMBMSDisableDuringActivateWhenOneTMGIActive__Test();

}

void LteRrcTesteMBMSDisableDuringActivateWhenOneTMGIActive::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test the handling of Disable request during activate */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSDisableDuringDeactivate);

void LteRrcTesteMBMSDisableDuringDeactivate::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSDisableDuringDeactivate::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Verify the handling of disable during deactivate TMGI processing
  LteRrcTesteMBMSDisableDuringDeactivate__Test();

}

void LteRrcTesteMBMSDisableDuringDeactivate::Teardown()
{
  lte_rrc_utf_teardown();
}

/* Test the handling of Disable request during activate */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSDisableDuringDeactivateWhenOneTMGIActive);

void LteRrcTesteMBMSDisableDuringDeactivateWhenOneTMGIActive::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSDisableDuringDeactivateWhenOneTMGIActive::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Verify the handling of disable during deactivate TMGI processing
  LteRrcTesteMBMSDisableDuringDeactivateWhenOneTMGIActive__Test();

}

void LteRrcTesteMBMSDisableDuringDeactivateWhenOneTMGIActive::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSPendPrioChangeIndiDuringResel);

void LteRrcTesteMBMSPendPrioChangeIndiDuringResel::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSPendPrioChangeIndiDuringResel::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24, tgt_cell_index = LTE_RRC_TEST_CELL_27;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, FALSE);

  LteRrcTesteMBMSPendPrioChangeIndDuringResel__Test(src_cell_index, tgt_cell_index, group_index);

}

void LteRrcTesteMBMSPendPrioChangeIndiDuringResel::Teardown()
{
  lte_rrc_utf_teardown();
}

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSIgnorePrioChangeIndiDuringConnToIdleTransistion);

void LteRrcTesteMBMSIgnorePrioChangeIndiDuringConnToIdleTransistion::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
}

void LteRrcTesteMBMSIgnorePrioChangeIndiDuringConnToIdleTransistion::Test()
{

  lte_rrc_test_cell_e src_cell_index = LTE_RRC_TEST_CELL_24;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(src_cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMband__Test(src_cell_index, group_index, FALSE, FALSE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGenericMband__Test(src_cell_index, group_index);

  LteRrcTestToLteCommonVerifyServiceInd ( LTE_RRC_SVC_STATUS_AVAILABLE );

  // Send SIB3, SIB5, SIB15 on the cell
  LteRrcTestSICollectionAfterCampingEmbms__Test(src_cell_index, group_index, FALSE, FALSE);

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  // Test activation of SAI on serving freq
  LteRrcTesteMBMSActWithSAIOnServing__Test(src_cell_index, group_index, FALSE);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetupForEmbms__Test(src_cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Verify eMBMS config req sent to LLC during Connection Release processing
  LteRrcTestEMBMSDisabledDuringConnToIdleTransistion__Test(src_cell_index, group_index);

}

void LteRrcTesteMBMSIgnorePrioChangeIndiDuringConnToIdleTransistion::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case 9 from MBMS interest ind off-target test plan */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSRlfToNonEmbmsCell);

void LteRrcTesteMBMSRlfToNonEmbmsCell::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSRlfToNonEmbmsCell::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_29;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {1, 1};
  uint16 sib15_inter[] = {1, 400, 1, 2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, sib15_intra, sib15_inter, NULL);

  uint16 sai_list[] = {1};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 1, sai_list);

  LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 300);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS);

  re_est_test_oos_warn_ind = TRUE;
  cell_select_test_sib2_with_no_mbsfn = TRUE;

  LteRrcTestReestablishmentMultiBandNoCoverage__Test(LTE_RRC_TEST_CELL_18, lte_rrc_osys_ReestablishmentCause_otherFailure, FALSE);

  TF_SLEEP(100);

}

void LteRrcTesteMBMSRlfToNonEmbmsCell::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}

/* Test case given in 80-N5913-1 A - Fig: 4-28
SAI_v = 1, SAI_n = 2; B4 = 300, B13 = 400 */
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSTestMtchResumeAfterB2BHo);

void LteRrcTesteMBMSTestMtchResumeAfterB2BHo::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));

  //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
lte_rrc_test_integration_common_init_all();
}

void LteRrcTesteMBMSTestMtchResumeAfterB2BHo::Test()
{
  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_30;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;
  uint32 buf_len;

  LteRrcTestInitializeCells();
  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMSMultiBand__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  uint16 sib15_intra[] = {1, 2};
  uint16 sib15_inter[] = {1, 400, 1, 2};
  // Enable eMBMS and test the enable handling along with SIb15 decode
  LteRrceMBMSEnableMultiBand__Test(cell_index, group_index, sib15_intra, NULL, NULL);

  uint16 sai_list[] = {1, 2};
  LteRrcSendeMBMSActivateReqForServiceWithSai(1, 2, sai_list);

  LteRrcTesteMBMSActSvcLowerLyr_Test(cell_index, TRUE, TRUE, 400);

  LteRrcTesteMBMSActivateCnfForServiceWithSai(1, TRUE, LTE_EMBMS_SUCCESS);

  test_sib2_with_no_mbsfn = TRUE;

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_CELL_28, LTE_RRC_TEST_SIB_UPDATE_0);

#if 1
  //Prep SIB15 for target cell
  uint16 sib15_intra_2[] = {1, 2};
  uint16 sib15_inter_2[] = {1, 300, 1, 1};
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_28, LTE_RRC_TEST_SIB_UPDATE_0, sib15_intra_2, sib15_inter_2, NULL);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 200);

  LteRrcTesteMBMSAvailSaiListInd();

  test_sib2_with_no_mbsfn = FALSE;

  LteRrcTestHandoverEmbmsMultiBand__Test(LTE_RRC_TEST_CELL_28, LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0);

  //Prep SIB15 for target cell
  LteRrcTestEmbmsSibCollectionMultiBand__Test(LTE_RRC_TEST_CELL_30, LTE_RRC_TEST_SIB_UPDATE_0, sib15_intra, sib15_inter, NULL);

  LteRrcTesteMBMSMbmsInterestIndULMessage(TRUE, 400);

  LteRrcTesteMBMSAvailSaiListInd();

  lte_rrc_embms_oos_warn_ind_s *oos_warn_ind_ptr = NULL;

  /* Catch the OOS_WARN_IND sent from RRC for OOS recovery */
  lte_rrc_utf_get_next_ext_msg((byte **)&oos_warn_ind_ptr,&buf_len);
  /* Make sure the message is valid */
  TF_ASSERT(sizeof(lte_rrc_embms_oos_warn_ind_s) == buf_len);
  TF_ASSERT(oos_warn_ind_ptr != NULL);
  TF_ASSERT(oos_warn_ind_ptr->msg_hdr.id == LTE_RRC_EMBMS_OOS_WARN_IND);

#endif

  TF_SLEEP(100);
}

void LteRrcTesteMBMSTestMtchResumeAfterB2BHo::Teardown()
{
  lte_rrc_test_sec_teardown();
  lte_rrc_utf_teardown();
}



TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSSIModPageWhenEMBMSDisabled);

void LteRrcTesteMBMSSIModPageWhenEMBMSDisabled::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
  lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                    sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
}

void LteRrcTesteMBMSSIModPageWhenEMBMSDisabled::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnableGeneric__Test(FALSE);

  // Get RRC to the point where we have acquired a cell
  //LteRrcTestServiceRequestBandScanSuccess1__Test();
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test2(cell_index, group_index, TRUE);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  LteRrceMBMSGetCovIndi(LTE_RRC_EMBMS_COVERAGE_STATUS_AVAILABLE);

  //Disable
  LteRrceMBMSDisable__Test();

  // Test eMBMS sib2 update
  LteRrcTesteMBMSSib2Update__Test(cell_index, LTE_RRC_TEST_SIB_UPDATE_1, FALSE);

  LteRrcSendeMBMSActivateReqForService1();

  // Test eMBMS sib13 update
  LteRrcTesteMBMSSib13Update__Test3(cell_index, LTE_RRC_TEST_SIB_UPDATE_2);

}

void LteRrcTesteMBMSSIModPageWhenEMBMSDisabled::Teardown()
{
  lte_rrc_utf_teardown();
}

/*CFG CNF failure handling for MTCH Setup*/
TF_DEFINE_TEST_CASE(COMPONENT, LteRrcTesteMBMSCfgCnfDuringMcchReleaseFailure);

void LteRrcTesteMBMSCfgCnfDuringMcchReleaseFailure::Setup()
{

  boolean enable_embms_support = TRUE;
  TF_ASSERT(efs_put("/nv/item_files/modem/lte/rrc/embms_feature_status",
                    &enable_embms_support, sizeof(enable_embms_support), O_RDWR | O_AUTODIR | O_TRUNC, 0777) >= 0);
    lte_rrc_utf_setup(NULL, lte_rrc_test_embms_umid_list,
                      sizeof(lte_rrc_test_embms_umid_list)/sizeof(lte_rrc_test_embms_umid_list[0]));
      //Start the SecureMSM REX tasks
  lte_rrc_test_sec_init();
  lte_rrc_test_integration_common_init_all();
}


void LteRrcTesteMBMSCfgCnfDuringMcchReleaseFailure::Test()
{

  lte_rrc_test_cell_e cell_index = LTE_RRC_TEST_CELL_9;
  lte_rrc_test_sib_update_e group_index = LTE_RRC_TEST_SIB_UPDATE_0;

  LteRrcTestInitializeCells();

  // Get RRC to the point where we have acquired a cell
  LteRrcTestServiceRequestBandScanSuccess1__Test(cell_index);

  // Get RRC to the point where we have acquired a cell and collected mandatory sibs
  LteRrcTestSibCollectionPriorToCampingEMBMS__Test(cell_index, group_index);

  // Get RRC to camped state
  LteRrcTestCampingAndLowerLayerConfigGeneric__Test(cell_index, group_index);

  // Get RRC to connected state, setup unicast bearers
  LteRrcTestConnectionSetup1__Test(cell_index);

  //Do Initial Security Activation with SMC
  LteRrcTestSecConfig1__Test();

  // Configure SRB2 and DRB
  LteRrcTestConnectionReconfig1__Test();

  // Enable eMBMS and test the enable handling
  LteRrceMBMSEnable__Test();

  LteRrcSendeMBMSActivateReqForService1();

  LteRrcTestMCCHSetup();

  LteRrcTestMTCHSetupArea0PMCH1LC2(FALSE, TRUE);
  LteRrceMBMSGetAvailTmgiList(2);
  LteRrcTestActTMGICnfiAndActListIndForService1();

  // Deactivate service 1
  LteRrcSendeMBMSDeactivateReqForService1();

  // Verify handling of MTCH Setup failure
  LteRrcTesteMBMSCfgCnfDuringMcchReleaseFailure__Test(cell_index, group_index);

}

void LteRrcTesteMBMSCfgCnfDuringMcchReleaseFailure::Teardown()
{
  lte_rrc_test_sec_teardown();
    lte_rrc_utf_teardown();
}
#endif
