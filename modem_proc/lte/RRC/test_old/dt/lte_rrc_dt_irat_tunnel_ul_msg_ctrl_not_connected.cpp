/*!
  @file lte_rrc_dt_tunnel_ul_msg_csfb_test.cpp

  @brief

*/

/*===========================================================================

  Copyright (c) 2008 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

$Header: 

when       who     what, where, why
--------   ---     ----------------------------------------------------------
07/28/10   np      Initial Revision
           
===========================================================================*/

/*===========================================================================

INCLUDE FILES

===========================================================================*/
extern "C"
{
#include <lte_rrc_int_msg.h>
#include <lte_rrc_dti.h>
#include <lte_rrc_utils.h>
#include <lte_rrc_osys_asn1util.h>
#include <dsm_item.h>
#include <dsm_init.h>
}

#include <TestFramework.h>
#include <lte_rrc_utf.h>

#include "lte_rrc_dt_test_common.h"

//external messages generated by code under test
static uint32 ext_umid_list[] = 
{ 
    LTE_RRC_IRAT_TUNNEL_UL_MSG_CNF,
    LTE_RRC_UL_DATA_CNF
};

//message structures
static lte_rrc_irat_tunnel_ul_msg_req_s   tunnel_ul_msg_req;
static lte_rrc_ul_msg_cnfi_s   ul_msg_cnfi;
static lte_rrc_ul_data_req_s                ul_data_req;
static lte_rrc_nas_msg_container_s          nas_msg_container;
/*===========================================================================

UNIT TEST

===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcDtIratTunnelULMsgCtrlNotConnected);

void LteRrcDtIratTunnelULMsgCtrlNotConnected::Setup()
{
    lte_rrc_utf_setup(LTE_RRC_DT_SM, ext_umid_list, 1);
    lte_rrc_test_dt_init();
}

void LteRrcDtIratTunnelULMsgCtrlNotConnected::Test()
{
    byte *buf_ptr;
    uint32 buf_len;
    lte_rrc_send_ul_msg_reqi_s *int_req_ptr;
    lte_rrc_irat_tunnel_ul_msg_cnf_s *ext_cnf_ptr;

    TF_MSG("Start of test, Controller not connected");

    lte_rrc_test_dt_set_controller_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

    TF_MSG("Checking for READY state");
    TF_ASSERT(stm_get_state(LTE_RRC_DT_SM) == LTE_RRC_DT_SM__READY);

    TF_MSG("Sending IRAT Tunnel CSFB Param request Message to DT ");
    lte_rrc_init_default_hdr(&tunnel_ul_msg_req.msg_hdr, LTE_RRC_IRAT_TUNNEL_UL_MSG_REQ);

    tunnel_ul_msg_req.cnf_is_reqd = true;

    // CSFB Param req does not have a payload
    tunnel_ul_msg_req.msg.ul_msg_type = LTE_IRAT_TUNNEL_UL_MSG_CSFB_PARAMS_REQ;
    
    lte_rrc_utf_send_msg((byte*)&tunnel_ul_msg_req, sizeof(tunnel_ul_msg_req));

    lte_rrc_utf_wait_for_done();

    // Since controller is not connected, the sending of message should fail
    TF_MSG("Checking for LTE_RRC_IRAT_TUNNEL_UL_MSG_CNF that DT sends back to NAS (which goes to 1xCP)");

    lte_rrc_utf_get_next_ext_msg(&buf_ptr,&buf_len);

    TF_ASSERT(buf_len == sizeof(lte_rrc_irat_tunnel_ul_msg_cnf_s));
    ext_cnf_ptr = (lte_rrc_irat_tunnel_ul_msg_cnf_s *)(void*) buf_ptr;
    TF_ASSERT(LTE_RRC_IRAT_TUNNEL_UL_MSG_CNF == ext_cnf_ptr->msg_hdr.id); 

    // Check for correct failure cause
    TF_ASSERT(LTE_RRC_TUNNEL_UL_MSG_CNF_FAILURE_CTRL_NOT_CONN == ext_cnf_ptr->status );

    lte_rrc_utf_wait_for_done();

    TF_MSG("Checking for READY state");
    TF_ASSERT(stm_get_state(LTE_RRC_DT_SM) == LTE_RRC_DT_SM__READY);

    TF_MSG("End of test");
}

void LteRrcDtIratTunnelULMsgCtrlNotConnected::Teardown()
{
    lte_rrc_utf_teardown();
    lte_rrc_test_dt_teardown();
}


TF_DEFINE_TEST_CASE(COMPONENT, LteRrcDtULDataHoCtrlNotConnectedFailureTest);

void LteRrcDtULDataHoCtrlNotConnectedFailureTest::Setup()
{
    lte_rrc_utf_setup(LTE_RRC_DT_SM, ext_umid_list, 2);
    lte_rrc_test_dt_init();
}

void LteRrcDtULDataHoCtrlNotConnectedFailureTest::Test()
{
    byte *buf_ptr;
    uint32 buf_len;
    lte_rrc_send_ul_msg_reqi_s *int_req_ptr;
    lte_rrc_ul_data_cnf_s *ext_cnf_ptr;
    dsm_item_type *dsm_ptr=NULL;
    /* Message attachment pointer */
    msgr_attach_struct_type *att_ptr;

    TF_MSG("Start of test");

    lte_rrc_test_dt_set_controller_state(LTE_RRC_CONTROLLER_SM__INACTIVE);

    TF_MSG("Checking for READY state");
    TF_ASSERT(stm_get_state(LTE_RRC_DT_SM) == LTE_RRC_DT_SM__READY);

    TF_MSG("Sending First UL Information Transfer Message");
    msgr_init_hdr_attach(&ul_data_req.msg_hdr, MSGR_LTE_RRC, LTE_RRC_UL_DATA_REQ, 0, 1);
    ul_data_req.trans_id = 1;
    // ul_data_req.priority;
    ul_data_req.cnf_is_reqd = true;
    nas_msg_container.msg_size = LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE;
    memset(nas_msg_container.msg_payload, 'A',
           nas_msg_container.msg_size);

    /* Pushdown DSM */
    LTE_ASSERT(dsm_pushdown(&dsm_ptr, nas_msg_container.msg_payload, 
          (uint16)LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE, 
														LTE_RRC_DSM_POOL((uint16)LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE)) 
        == (uint16)LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE);

    /* Set DSM attach */
    att_ptr = msgr_get_attach(&ul_data_req.msg_hdr, 0);
    LTE_ASSERT(att_ptr != NULL);
    msgr_set_dsm_attach(att_ptr, dsm_ptr);
    
    LTE_ASSERT(dsm_ptr != NULL);
    
    lte_rrc_utf_send_msg((byte*)&ul_data_req, sizeof(ul_data_req));

    lte_rrc_utf_wait_for_done();

    // Since controller is not connected, the sending of message should fail
    TF_MSG("Checking for LTE_RRC_UL_MSG_CNF that DT sends back");

    lte_rrc_utf_get_next_ext_msg(&buf_ptr,&buf_len);

    TF_ASSERT(buf_len == sizeof(lte_rrc_ul_data_cnf_s));
    ext_cnf_ptr = (lte_rrc_ul_data_cnf_s *)(void*) buf_ptr;
    TF_ASSERT(LTE_RRC_UL_DATA_CNF == ext_cnf_ptr->msg_hdr.id); 

    // Check for correct failure cause
    TF_ASSERT(LTE_RRC_UL_DATA_CNF_FAILURE_CTRL_NOT_CONN == ext_cnf_ptr->status );

    lte_rrc_utf_wait_for_done();


    TF_MSG("Checking for READY state");
    TF_ASSERT(stm_get_state(LTE_RRC_DT_SM) == LTE_RRC_DT_SM__READY);

    TF_MSG("End of test");
}

void LteRrcDtULDataHoCtrlNotConnectedFailureTest::Teardown()
{
    lte_rrc_utf_teardown();
    lte_rrc_test_dt_teardown();
}


