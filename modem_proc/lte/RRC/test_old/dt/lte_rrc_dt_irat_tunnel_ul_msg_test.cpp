/*!
  @file lte_rrc_dt_tunnel_ul_msg_test.cpp

  @brief

*/

/*===========================================================================

  Copyright (c) 2008 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

$Header: 

when       who     what, where, why
--------   ---     ----------------------------------------------------------
07/21/10   np      Initial Revision
           
===========================================================================*/

/*===========================================================================

INCLUDE FILES

===========================================================================*/
extern "C"
{
#include <lte_rrc_int_msg.h>
#include <lte_rrc_dti.h>
#include <lte_rrc_utils.h>
#include <lte_rrc_osys_asn1util.h>
}

#include <TestFramework.h>
#include <lte_rrc_utf.h>

#include "lte_rrc_dt_test_common.h"

//external messages generated by code under test
static uint32 ext_umid_list[] = 
{ 
    LTE_RRC_IRAT_TUNNEL_UL_MSG_CNF
};

//message structures
static lte_rrc_irat_tunnel_ul_msg_req_s   tunnel_ul_msg_req;
static lte_rrc_ul_msg_cnfi_s   ul_msg_cnfi;

/*===========================================================================

UNIT TEST

===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcDtIratTunnelULMsgTest);

void LteRrcDtIratTunnelULMsgTest::Setup()
{
    lte_rrc_utf_setup(LTE_RRC_DT_SM, ext_umid_list, 1);
    lte_rrc_test_dt_init();
}

void LteRrcDtIratTunnelULMsgTest::Test()
{
    byte *buf_ptr;
    uint32 buf_len;
    lte_rrc_send_ul_msg_reqi_s *int_req_ptr;
    lte_rrc_irat_tunnel_ul_msg_cnf_s *ext_cnf_ptr;

    TF_MSG("Start of test");

    lte_rrc_test_dt_set_controller_state(LTE_RRC_CONTROLLER_SM__CONNECTED);
    lte_rrc_test_dt_set_srb2_status ( TRUE );

    TF_MSG("Checking for READY state");
    TF_ASSERT(stm_get_state(LTE_RRC_DT_SM) == LTE_RRC_DT_SM__READY);

    TF_MSG("Sending IRAT Tunnel UL Information Transfer Message to DT ");
    lte_rrc_init_default_hdr(&tunnel_ul_msg_req.msg_hdr, LTE_RRC_IRAT_TUNNEL_UL_MSG_REQ);

    tunnel_ul_msg_req.cnf_is_reqd = true;

    tunnel_ul_msg_req.msg.ul_msg_type = LTE_IRAT_TUNNEL_UL_MSG_INFO_TRANSFER_REQ;
    tunnel_ul_msg_req.msg.ul_msg_u.ul_info_tx.type = LTE_IRAT_RAT_TYPE_1XRTT;
    tunnel_ul_msg_req.msg.ul_msg_u.ul_info_tx.msg_container.msg_size = LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE;

    memset(tunnel_ul_msg_req.msg.ul_msg_u.ul_info_tx.msg_container.msg_payload, 'A',
           tunnel_ul_msg_req.msg.ul_msg_u.ul_info_tx.msg_container.msg_size);
    lte_rrc_utf_send_msg((byte*)&tunnel_ul_msg_req, sizeof(tunnel_ul_msg_req));

    lte_rrc_utf_wait_for_done();

    TF_MSG("Checking for LTE_RRC_SEND_UL_MSG_REQI that DT sends to MH");
    lte_rrc_utf_get_next_int_msg(&buf_ptr,&buf_len);

    TF_ASSERT(buf_len == sizeof(lte_rrc_send_ul_msg_reqi_s));
    int_req_ptr = (lte_rrc_send_ul_msg_reqi_s *)(void*) buf_ptr;
    TF_ASSERT(LTE_RRC_SEND_UL_MSG_REQI == int_req_ptr->msg_hdr.id); 

    /* validate msg */

    /* free msg */
    lte_rrc_osys_asn1_free_pdu(int_req_ptr->ul_msg_ptr, lte_rrc_osys_UL_DCCH_Message_PDU);

    lte_rrc_utf_wait_for_done();

    TF_MSG("Sending UL Information Transfer CNFI from MH to DT");

    lte_rrc_init_default_hdr(&ul_msg_cnfi.msg_hdr, LTE_RRC_UL_INFORMATION_TRANSFER_CNFI);

    ul_msg_cnfi.mu_id = 0;
    ul_msg_cnfi.status = LTE_RRC_UL_MSG_ACK;

    lte_rrc_utf_send_msg((byte*)&ul_msg_cnfi, sizeof(ul_msg_cnfi));

    lte_rrc_utf_wait_for_done();

    TF_MSG("Checking for LTE_RRC_IRAT_TUNNEL_UL_MSG_CNF that DT sends back to 1xCP");

    lte_rrc_utf_get_next_ext_msg(&buf_ptr,&buf_len);

    TF_ASSERT(buf_len == sizeof(lte_rrc_irat_tunnel_ul_msg_cnf_s));
    ext_cnf_ptr = (lte_rrc_irat_tunnel_ul_msg_cnf_s *)(void*) buf_ptr;
    TF_ASSERT(LTE_RRC_IRAT_TUNNEL_UL_MSG_CNF == ext_cnf_ptr->msg_hdr.id); 

    lte_rrc_utf_wait_for_done();

    TF_MSG("Checking for READY state");
    TF_ASSERT(stm_get_state(LTE_RRC_DT_SM) == LTE_RRC_DT_SM__READY);

    TF_MSG("End of test");
}

void LteRrcDtIratTunnelULMsgTest::Teardown()
{
    lte_rrc_utf_teardown();
    lte_rrc_test_dt_teardown();
}

