/*!
  @file lte_rrc_dt_ul_data_ho_success_test.cpp

  @brief
  Unit test code for RRC DT state transitions.
  1. Check if DT is in READY state
  2. Send Handover Started Indication
  3. Check if DT is in BLOCKED state
  4. Send UL data req
  5. Send UL data req
  6. Send Cell Change Indication
  7. Receive UL data confirmation failure with reason HO and 2 transactions
  8. Check if DT is in READY state

*/

/*===========================================================================

  Copyright (c) 2008 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

$Header: 

when       who     what, where, why
--------   ---     ----------------------------------------------------------
02/03/09   vatsac  Initial Revision
           
===========================================================================*/

/*===========================================================================

INCLUDE FILES

===========================================================================*/
extern "C"
{
#include <lte_rrc_int_msg.h>
#include <lte_rrc_dti.h>
#include <lte_rrc_utils.h>
#include <dsm_item.h>
#include <dsm_init.h>
  
}

#include <TestFramework.h>
#include <lte_rrc_utf.h>

#include "lte_rrc_dt_test_common.h"

//external messages generated by code under test
static uint32 ext_umid_list[] = 
{ 
    LTE_RRC_UL_DATA_CNF,
    LTE_RRC_IRAT_TUNNEL_UL_MSG_CNF,
    LTE_RRC_SERVICE_IND
};

//message structures
static lte_rrc_handover_started_indi_s      handover_started_indi;
static lte_rrc_ul_data_req_s                ul_data_req;
static lte_rrc_irat_tunnel_ul_msg_req_s     tunnel_ul_msg_req;
static lte_rrc_service_ind_s                service_ind;
static lte_rrc_nas_msg_container_s          nas_msg_container;
/*===========================================================================

UNIT TEST

===========================================================================*/

TF_DEFINE_TEST_CASE(COMPONENT, LteRrcDtULDataHoSuccessTest);

void LteRrcDtULDataHoSuccessTest::Setup()
{
    lte_rrc_utf_setup(LTE_RRC_DT_SM, ext_umid_list, 3);
    lte_rrc_test_dt_init();
}

void LteRrcDtULDataHoSuccessTest::Test()
{
    byte *buf_ptr;
    uint32 buf_len;
    lte_rrc_ul_data_cnf_s *ext_cnf_ptr;
    lte_rrc_irat_tunnel_ul_msg_cnf_s *ext_irat_cnf_ptr;
    dsm_item_type *dsm_ptr=NULL;
    /* Message attachment pointer */
    msgr_attach_struct_type *att_ptr;

    TF_MSG("Start of test");

    lte_rrc_test_dt_set_controller_state(LTE_RRC_CONTROLLER_SM__CONNECTED);

    TF_MSG("Checking for READY state");
    TF_ASSERT(stm_get_state(LTE_RRC_DT_SM) == LTE_RRC_DT_SM__READY);

    TF_MSG("Sending Handover Started Indication");
    lte_rrc_init_default_hdr(&handover_started_indi.msg_hdr, LTE_RRC_HANDOVER_STARTED_INDI);
    lte_rrc_utf_send_msg((byte*)&handover_started_indi, sizeof(handover_started_indi));

    lte_rrc_utf_wait_for_done();

    TF_MSG("Checking for BLOCKED state");
    TF_ASSERT(stm_get_state(LTE_RRC_DT_SM) == LTE_RRC_DT_SM__BLOCKED);

    TF_MSG("Sending First UL Information Transfer Message");
    msgr_init_hdr_attach(&ul_data_req.msg_hdr, MSGR_LTE_RRC, LTE_RRC_UL_DATA_REQ, 0, 1);;
    ul_data_req.trans_id = 1;
    // ul_data_req.priority;
    ul_data_req.cnf_is_reqd = true;
    nas_msg_container.msg_size = LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE;
    memset(nas_msg_container.msg_payload, 'A',
           nas_msg_container.msg_size);
    /* Pushdown DSM */
    LTE_ASSERT(dsm_pushdown(&dsm_ptr, nas_msg_container.msg_payload, 
                            (uint16)LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE, 
                            LTE_RRC_DSM_POOL((uint16)LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE)) 
        == (uint16)LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE);

    /* Set DSM attach */
    att_ptr = msgr_get_attach(&ul_data_req.msg_hdr, 0);
    LTE_ASSERT(att_ptr != NULL);
    msgr_set_dsm_attach(att_ptr, dsm_ptr);
    
    LTE_ASSERT(dsm_ptr != NULL);
    
    lte_rrc_utf_send_msg((byte*)&ul_data_req, sizeof(ul_data_req));

    lte_rrc_utf_wait_for_done();

    TF_MSG("Sending Second UL Information Transfer Message");
    msgr_init_hdr_attach(&ul_data_req.msg_hdr, MSGR_LTE_RRC, LTE_RRC_UL_DATA_REQ, 0, 1);;
    ul_data_req.trans_id = 2;
    // ul_data_req.priority;
    ul_data_req.cnf_is_reqd = true;
    nas_msg_container.msg_size = LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE;
    memset(nas_msg_container.msg_payload, 'A',
           nas_msg_container.msg_size);
    dsm_ptr = NULL;
    /* Pushdown DSM */
    LTE_ASSERT(dsm_pushdown(&dsm_ptr, nas_msg_container.msg_payload, 
                            (uint16)LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE, 
                            LTE_RRC_DSM_POOL((uint16)LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE)) 
        == (uint16)LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE);

    /* Set DSM attach */
    att_ptr = msgr_get_attach(&ul_data_req.msg_hdr, 0);
    LTE_ASSERT(att_ptr != NULL);
    msgr_set_dsm_attach(att_ptr, dsm_ptr);
    
    LTE_ASSERT(dsm_ptr != NULL);
    
    
    lte_rrc_utf_send_msg((byte*)&ul_data_req, sizeof(ul_data_req));

    lte_rrc_utf_wait_for_done();

    TF_MSG("Sending First IRAT Tunnel UL Information Transfer Message to DT ");
    lte_rrc_init_default_hdr(&tunnel_ul_msg_req.msg_hdr, LTE_RRC_IRAT_TUNNEL_UL_MSG_REQ);

    tunnel_ul_msg_req.cnf_is_reqd = true;
    tunnel_ul_msg_req.trans_id = 7;
    tunnel_ul_msg_req.msg.ul_msg_type = LTE_IRAT_TUNNEL_UL_MSG_INFO_TRANSFER_REQ;
    tunnel_ul_msg_req.msg.ul_msg_u.ul_info_tx.type = LTE_IRAT_RAT_TYPE_1XRTT;
    tunnel_ul_msg_req.msg.ul_msg_u.ul_info_tx.msg_container.msg_size = LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE;

    memset(tunnel_ul_msg_req.msg.ul_msg_u.ul_info_tx.msg_container.msg_payload, 'A',
           tunnel_ul_msg_req.msg.ul_msg_u.ul_info_tx.msg_container.msg_size);
    lte_rrc_utf_send_msg((byte*)&tunnel_ul_msg_req, sizeof(tunnel_ul_msg_req));

    lte_rrc_utf_wait_for_done();

    TF_MSG("Sending Second IRAT Tunnel UL Information Transfer Message to DT ");
    lte_rrc_init_default_hdr(&tunnel_ul_msg_req.msg_hdr, LTE_RRC_IRAT_TUNNEL_UL_MSG_REQ);

    tunnel_ul_msg_req.cnf_is_reqd = true;
    tunnel_ul_msg_req.trans_id = 9;
    tunnel_ul_msg_req.msg.ul_msg_type = LTE_IRAT_TUNNEL_UL_MSG_INFO_TRANSFER_REQ;
    tunnel_ul_msg_req.msg.ul_msg_u.ul_info_tx.type = LTE_IRAT_RAT_TYPE_1XRTT;
    tunnel_ul_msg_req.msg.ul_msg_u.ul_info_tx.msg_container.msg_size = LTE_RRC_MAX_NAS_MSG_CONTAINER_SIZE;

    memset(tunnel_ul_msg_req.msg.ul_msg_u.ul_info_tx.msg_container.msg_payload, 'B',
           tunnel_ul_msg_req.msg.ul_msg_u.ul_info_tx.msg_container.msg_size);
    lte_rrc_utf_send_msg((byte*)&tunnel_ul_msg_req, sizeof(tunnel_ul_msg_req));

    lte_rrc_utf_wait_for_done();

    TF_MSG("Sending Service Indication, indicating Service available again");
    lte_rrc_init_default_hdr(&service_ind.msg_hdr, LTE_RRC_SERVICE_IND);
    service_ind.trans_id = 1;
    service_ind.svc_status = LTE_RRC_SVC_STATUS_AVAILABLE;
    lte_rrc_utf_send_msg((byte*)&service_ind, sizeof(service_ind));

    /* SERVICE_IND should come before UL_DATA_CNF,
       but the order could be interchanged sometimes */

    /*
    TF_MSG("Checking for LTE_RRC_SERVICE_IND");
    lte_rrc_utf_get_next_ext_msg(&buf_ptr,&buf_len);
    TF_ASSERT(sizeof(lte_rrc_service_ind_s) == buf_len);

    lte_rrc_utf_wait_for_done();

    TF_MSG("Checking for LTE_RRC_UL_DATA_CNF");
    lte_rrc_utf_get_next_ext_msg(&buf_ptr, &buf_len);
    TF_ASSERT(buf_len == sizeof(lte_rrc_ul_data_cnf_s));
    ext_cnf_ptr = (lte_rrc_ul_data_cnf_s *)(void*) buf_ptr;
    TF_ASSERT(LTE_RRC_UL_DATA_CNF == ext_cnf_ptr->msg_hdr.id); 
    TF_ASSERT(ext_cnf_ptr->num_trans_ids == 2); 
    TF_ASSERT(ext_cnf_ptr->trans_id[0] == 1); 
    TF_ASSERT(ext_cnf_ptr->trans_id[1] == 2); 
    TF_ASSERT(ext_cnf_ptr->status == LTE_RRC_UL_DATA_CNF_FAILURE_HO); 

    lte_rrc_utf_wait_for_done();
    */

    for (int i = 0; i < 3; i++)
    {
        lte_rrc_utf_get_next_ext_msg(&buf_ptr,&buf_len);

        if (((msgr_hdr_s *)(void *)buf_ptr)->id == LTE_RRC_SERVICE_IND)
        {
            TF_MSG("Received LTE_RRC_SERVICE_IND");
            TF_ASSERT(sizeof(lte_rrc_service_ind_s) == buf_len);
        }
        else if (((msgr_hdr_s *)(void *)buf_ptr)->id == LTE_RRC_UL_DATA_CNF)
        {
            TF_MSG("Received LTE_RRC_UL_DATA_CNF");
            TF_ASSERT(buf_len == sizeof(lte_rrc_ul_data_cnf_s));
            ext_cnf_ptr = (lte_rrc_ul_data_cnf_s *)(void*) buf_ptr;
            TF_ASSERT(LTE_RRC_UL_DATA_CNF == ext_cnf_ptr->msg_hdr.id); 
            TF_ASSERT(ext_cnf_ptr->num_trans_ids == 2); 
            TF_ASSERT(ext_cnf_ptr->trans_id[0] == 1); 
            TF_ASSERT(ext_cnf_ptr->trans_id[1] == 2); 
            TF_ASSERT(ext_cnf_ptr->status == LTE_RRC_UL_DATA_CNF_FAILURE_HO); 
        }
        else if (((msgr_hdr_s *)(void *)buf_ptr)->id == LTE_RRC_IRAT_TUNNEL_UL_MSG_CNF)
        {
            TF_MSG("Received LTE_RRC_IRAT_TUNNEL_UL_MSG_CNF");
            TF_ASSERT(buf_len == sizeof(lte_rrc_irat_tunnel_ul_msg_cnf_s));
            ext_irat_cnf_ptr = (lte_rrc_irat_tunnel_ul_msg_cnf_s *)(void*) buf_ptr;
            TF_ASSERT(LTE_RRC_IRAT_TUNNEL_UL_MSG_CNF == ext_irat_cnf_ptr->msg_hdr.id); 
            TF_ASSERT(ext_irat_cnf_ptr->num_trans_ids == 2); 
            TF_ASSERT(ext_irat_cnf_ptr->trans_id[0] == 7); 
            TF_ASSERT(ext_irat_cnf_ptr->trans_id[1] == 9); 
            TF_ASSERT(ext_irat_cnf_ptr->status == LTE_RRC_TUNNEL_UL_MSG_CNF_FAILURE_HO); 
        }
        else
        {
            TF_ASSERT(0);
        }
        lte_rrc_utf_wait_for_done();
    }

    TF_MSG("Checking for READY state");
    TF_ASSERT(stm_get_state(LTE_RRC_DT_SM) == LTE_RRC_DT_SM__READY);

    TF_MSG("End of test");
}

void LteRrcDtULDataHoSuccessTest::Teardown()
{
    lte_rrc_utf_teardown();
    lte_rrc_test_dt_teardown();
}

