#===============================================================================
#
# LTE PDCP Scons
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2010 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 11/19/13   sb      CR535830: PDCP/RLC Re-arch and support of REL-11 features
# 11/21/10   cguo    Initial version.
#===============================================================================
Import('env')
env = env.Clone()

if 'USES_FEATURE_CATM1_DISABLE' in env:
    Return()

from glob import glob
from os.path import join, basename

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = "../src"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

env.RequirePublicApi('QTF', area='mob')

#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
#env.Append(CPPDEFINES = [
#   "MSG_BT_SSID_DFLT=MSG_SSID_LTE_PDCP",
#])

#-------------------------------------------------------------------------------
# Necessary Public and Restricted API's
#-------------------------------------------------------------------------------
env.RequirePublicApi([
    'HWENGINES',
    'DEBUGTOOLS',
    'SERVICES',
    'SYSTEMDRIVERS',
    'DAL',
    'POWER',
    'BUSES',
    'WIREDCONNECTIVITY',
    'STORAGE',
    'MPROC',
    'KERNEL',                           # needs to be last 
    ], area='core')



# Need to get access to Modem Public headers
env.RequirePublicApi([
    'ONEX',
    'GPS',      
    'DATAMODEM',      
    'HDR',      
    'MCS',
    'MMODE',    
    'RFA',      
    'UIM',      
    'UTILS',      
    ])

# Need get access to Modem Restricted headers
env.RequireRestrictedApi([
    'MMODE',    
    'NAS',      
    'RFA',      
    'MDSP',     
    'MDSPSVC',  
    'GERAN',    
    'GPS',      
    'ONEX',     
    'HDR',      
    'MCS',
    'LTE',
    'DATAMODEM',
    'UTILS',
    ])

# Need to get access to LTE protected headers.
env.RequireProtectedApi([
    'LTE',
    ])


#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------

# Construct the list of source files by looking for *.c
LTE_PDCP_SOURCES = ['${BUILDPATH}/' + basename(fname)
                   for fname in glob(join(env.subst(SRCPATH), '*.c'))]

# Compile the LTE PDCP source and convert to a binary library
if 'USES_FEATURE_DYNAMIC_LOADING_LTE' not in env:
	env.AddBinaryLibrary(['MODEM_MODEM', 'MOB_LTE'], '${BUILDPATH}/lte_pdcp', LTE_PDCP_SOURCES, pack_exception=['USES_COMPILE_LTE_L3_L2_PROTECTED_LIBS', 'USES_FEATURE_LTE_PACKBUILD_GENERATE_PROTECTED_LIBS', 'USES_CUST_1'])
else:
	if 'USES_FEATURE_EXTERNAL_PAGING' in env:
		env.AddBinaryLibrary(['MODEM_MODEM', 'MOB_LTE'], '${BUILDPATH}/lte_pdcp_dmm', LTE_PDCP_SOURCES, pack_exception=['USES_COMPILE_LTE_L3_L2_PROTECTED_LIBS', 'USES_FEATURE_LTE_PACKBUILD_GENERATE_PROTECTED_LIBS', 'USES_CUST_1'])
	else:
		SHARED_LIBRARY='m1_l2_pdcp'
		env.Append(CFLAGS='-DDYNAMIC_LINKING_ENABLED')
		env.AddSharedLibrary(['MODEM_MODEM'], '${BUILDPATH}/'+SHARED_LIBRARY, LTE_PDCP_SOURCES)

#-------------------------------------------------------------------------------
# Look for test build files
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()
