#===============================================================================
#
# LTE ML1 MD Scons
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2010 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 11/21/10    ae     Initial version.
#===============================================================================
Import('env')
env = env.Clone()

if 'USES_FEATURE_CATM1_DISABLE' in env:
    Return()

from glob import glob
from os.path import join, basename

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = "../src"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = [
   "MSG_BT_SSID_DFLT=MSG_SSID_LTE_ML1",
])

#-------------------------------------------------------------------------------
# Necessary Public and Restricted API's
#-------------------------------------------------------------------------------
env.RequirePublicApi([
    'HWENGINES',
    'DEBUGTOOLS',
    'SERVICES',
    'SYSTEMDRIVERS',
    'DAL',
    'POWER',
    'BUSES',
    'MPROC',
    'KERNEL',                             # needs to be last 
    ], area='core')

# Need to get access to Modem Public headers
env.RequirePublicApi([
    'ONEX',
    'GPS',      
    'HDR',      
    'MCS',
    'MMODE',    
    'RFA',      
    'UIM',
    'UTILS',
    'WCDMA',
    'FW',
    ])

# Need get access to Modem Restricted headers
env.RequireRestrictedApi([
    'MMODE',    
    'NAS',      
    'RFA',      
    'MDSP',     
    'MDSPSVC',  
    'GERAN',    
    'GPS',      
    'ONEX',     
    'HDR',      
    'MCS',
    'TDSCDMA',
    'UTILS',
    'UIM',
    'LTE',
    'FW',
    ])

# Need to get access to LTE protected headers
env.RequireProtectedApi([
    'LTE',
    'LTE_POI',
    ])



# For gl1_msg.h (including mvs.h)
env.RequirePublicApi(['AUDIO','MVS'], area='MULTIMEDIA')

env.RequirePublicApi(['RFLM'],area='RFLM')

# Violations required to compile
env.PublishPrivateApi('VIOLATIONS', ['${INC_ROOT}/core/systemdrivers/clk/inc'])

env.PublishPrivateApi('MD', '${INC_ROOT}/modem/lte/ML1/md/src')
#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------

# Construct the list of source files by looking for *.c
LTE_ML1_MD_SOURCES = ['${BUILDPATH}/' + basename(fname)
                   for fname in glob(join(env.subst(SRCPATH), '*.c'))]

if 'USES_FEATURE_DYNAMIC_LOADING_LTE' not in env:
    #existing to compile module as static library with env.AddBinaryLibrary()
    if 'USES_ALLOW_REGENERATE_LIBS' in env:
        # Compile the source and create a library (ship source)
        env.AddLibrary(['MODEM_MODEM', 'MOB_LTE','MODEM_PAGEONLY'], '${BUILDPATH}/lte_ml1_md', LTE_ML1_MD_SOURCES)
    else:
        # Compile the source and convert to a binary library
        env.AddBinaryLibrary(['MODEM_MODEM', 'MOB_LTE','MODEM_PAGEONLY'], '${BUILDPATH}/lte_ml1_md', LTE_ML1_MD_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
else:
    if 'USES_FEATURE_EXTERNAL_PAGING' in env:
      env.AddBinaryLibrary(['MODEM_MODEM', 'MOB_LTE','MODEM_PAGEONLY'], '${BUILDPATH}/lte_ml1_md_dmm', LTE_ML1_MD_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
    else:
      SHARED_LIBRARY='m1'
      env.Append(CFLAGS='-DDYNAMIC_LINKING_ENABLED')
      #add dynamic sources as shared library 
      env.AddSharedLibrary(['MODEM_MODEM', 'MOB_LTE','MODEM_PAGEONLY'], '${BUILDPATH}/lte_ml1_md', LTE_ML1_MD_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
    
#-------------------------------------------------------------------------------
# avoid run-time errors when trying to send MSGR messages 
#-------------------------------------------------------------------------------

if 'USES_MSGR' in env:
    env.AddUMID('${BUILDPATH}/lte_ml1_md.umid', ['../inc/lte_ml1_md_wcdma_msg.h',
                                                 '../inc/lte_ml1_md_gsm_msg.h'])

#-------------------------------------------------------------------------------
# Look for test build files
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()
