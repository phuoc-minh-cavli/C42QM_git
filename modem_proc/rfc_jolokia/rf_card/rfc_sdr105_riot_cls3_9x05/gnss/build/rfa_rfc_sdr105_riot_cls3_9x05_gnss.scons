#====include path optimized=====================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2013 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/rfc_jolokia.mpss/2.10/rf_card/rfc_sdr105_riot_cls3_9x05/gnss/build/rfa_rfc_sdr105_riot_cls3_9x05_gnss.scons#1 $
# $DateTime: 2020/04/16 12:26:20 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# xx/xx/xx   sd      Initial Revision
#===============================================================================

Import('env')

LIB_NAME        = 'rfc_rf_card_sdr105_riot_cls3_9x05_gnss'
IMAGE_SOURCES   = ['MODEM_MODEM','MOB_RFA']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'

from glob import glob

env = env.Clone()

# Method to abort processing of this file, if not required for current air interface mode, etc
#if ( (USES_TEST_FLAG1 in env and USES_TEST_FLAG2 not in env) or USES_TEST_FLAG3 not in env)):
#   Return( )

#-------------------------------------------------------------------------------
# Source PATH:
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

env.Append(CPPDEFINES = ['MSG_BT_SSID_DFLT=MSG_SSID_RF',])
env.RequirePublicApi([
    'BUSES',
    'DAL',
    'DEBUGTOOLS',
    'KERNEL',
    'POWER',
    'SERVICES',
    'SYSTEMDRIVERS',
    ],
    area='CORE')

env.RequirePublicApi([
    'MMODE',
    'RFA',
    ],
    area='MODEM')

env.RequireRestrictedApi([
    'RFDEVICE_INTERFACE',
    'FW',
    'GERAN',
    'MMODE',
    'NAS',
    'RFA',
    'RFDEVICE',
    ])

env.RequireProtectedApi([
    'RFC_COMMON_INC',
    'RFC_RF_CARD_INC',
    'RFC_TARGET_INC',
    'RF_COMMON_INC',
    'RF_DEVICE_INC',
    'RF_GNSS_INC',
    'RF_RFD_INC',
    ])

LIB_SOURCES = [ ]  #empy list

SOURCE_FILES = [ ]

#find all .c
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))

#find all .cpp files
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))

#find all .s files
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.s'))

for filename in SOURCE_FILES:
        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))

env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME, [LIB_SOURCES])

#uncomment this section if protected directory is added

#env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that AddBinaryLibrary can be launched
#LIB_SOURCES = []  #empy list

#if 'USES_NO_STRIP_NO_ODM' in env:

#        SOURCE_FILES = [ ]

        #find all .c
#        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.c'))

        #find all .cpp files
#        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))

        #find all .s files
#        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.s'))


#        for filename in SOURCE_FILES:
#                LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that the pre-built library will be added to the list file
#env.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_protected',[
#    LIB_SOURCES,
#    ])
