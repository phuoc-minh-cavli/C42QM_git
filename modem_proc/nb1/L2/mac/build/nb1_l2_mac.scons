#===============================================================================
#
# NB1 MAC Scons
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2016 Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/nb1.mpss/2.2/L2/mac/build/nb1_l2_mac.scons#1 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#===============================================================================
Import('env')
env = env.Clone()

from glob import glob
from os.path import join, basename

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = "../src"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
#env.Append(CPPDEFINES = [
#   "MSG_BT_SSID_DFLT=MSG_SSID_LTE_MAC",
#])

#-------------------------------------------------------------------------------
# Necessary Public and Restricted API's
#-------------------------------------------------------------------------------
env.RequirePublicApi([
    'HWENGINES',
    'DEBUGTOOLS',
    'SERVICES',
    'SYSTEMDRIVERS',
    'DAL',
    'POWER',
    'BUSES',
    'STORAGE',
    'MPROC',
    'KERNEL',                             # needs to be last
    ], area='core')

env.RequirePublicApi('QTF', area='mob')

# Need to get access to Modem Public headers
env.RequirePublicApi([
    'ONEX',
    'GPS',
    'HDR',
    'MCS',
    'MMODE',
    'RFA',
    'UIM',
    'UTILS',
    ])

# Need get access to Modem Restricted headers
env.RequireRestrictedApi([
    'MMODE',
    'NAS',
    'RFA',
    'MDSP',
    'MDSPSVC',
    'GERAN',
    'GPS',
    'ONEX',
    'HDR',
    'MCS',
    'NB1',
    'UTILS',
    'QTF',
    ])

# Need to get access to NB1 protected headers.
env.RequireProtectedApi([
    'NB1',
    ])

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------

# Construct the list of source files by looking for *.c
NB1_MAC_SOURCES = ['${BUILDPATH}/' + basename(fname)
                   for fname in glob(join(env.subst(SRCPATH), '*.c'))]

# Compile the NB1 MAC source and convert to a binary library
if 'USES_FEATURE_DYNAMIC_LOADING_LTE' not in env:
	env.AddBinaryLibrary(['MODEM_MODEM', 'MOB_NB1'], '${BUILDPATH}/nb1_mac', NB1_MAC_SOURCES, pack_exception=['USES_COMPILE_LTE_L3_L2_PROTECTED_LIBS', 'USES_FEATURE_NB1_PACKBUILD_GENERATE_PROTECTED_LIBS', 'USES_CUST_1'])	
else:	
    if 'USES_FEATURE_EXTERNAL_PAGING' in env:
		env.AddBinaryLibrary(['MODEM_MODEM', 'MOB_NB1'], '${BUILDPATH}/nb1_mac_dmm', NB1_MAC_SOURCES, pack_exception=['USES_COMPILE_LTE_L3_L2_PROTECTED_LIBS', 'USES_FEATURE_NB1_PACKBUILD_GENERATE_PROTECTED_LIBS', 'USES_CUST_1'])
    else:
		SHARED_LIBRARY='nb1_l2_mac'
		env.Append(CFLAGS='-DDYNAMIC_LINKING_ENABLED')
		env.AddSharedLibrary(['MODEM_MODEM'], '${BUILDPATH}/'+SHARED_LIBRARY, NB1_MAC_SOURCES)

#-------------------------------------------------------------------------------
# avoid run-time errors when trying to send MSGR messages
#-------------------------------------------------------------------------------

if 'USES_MSGR' in env:
	env.AddUMID('${BUILDPATH}/nb1_l2_mac.umid', ['../inc/nb1_mac_int_msg.h'])

#-------------------------------------------------------------------------------
# Look for test build files
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()
