#===============================================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2013-2014 Qualcomm Technologies, Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies, Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies, Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/rfdevice_papm.mpss/1.30/build/modem_rfdevice_papm.scons#1 $
# $DateTime: 2020/04/16 12:12:28 $ 
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 03/12/15   jfc     Enable features for TP cards
# 10/20/14   chenh   Enabled compiler warings to errors
# 10/16/14   dej     Clean-up SCons and add support for TABASCO
# 08/25/14   vv      Enable papm component on BO/JO/TH
# 07/09/14   dr      Adding support for msm8909
# 03/27/14   dr      Adding support for msm8936
# 01/31/14   vv      Created for PAPM 
#===============================================================================


Import('env')
env = env.Clone()

#usage:  ENV_UPDATE_RFA=CHIPSET,=mdm9x15,USES_NO_DEBUG,delete,USES_HI_SPEED,add
if ARGUMENTS.get('ENV_UPDATE_RFA'):
   
   env_update_string    = ARGUMENTS.get('ENV_UPDATE_RFA')
   env_update_list      = env_update_string.split(',')
   item_total           = len(env_update_list)
   list_index           = 0
   
   #note if list is not even number of items, last odd item is ignored
   while list_index < item_total-1:
                 
      item            = env_update_list[list_index]  
      value           = env_update_list[list_index+1]
      list_index      += 2
                                              
      if(value == 'add'):
         env[str(item)] = 'yes'
         print "adding",item,"to env"                                          
                
      elif(value == 'delete'):
         del env[str(item)]
         print "deleting",item,"from env"
      
      else:
         if(value[0] != '='):
            print "missing leading = in",value
            print "not updating ",item
                 
         else:
            value2 = value[1:len(value)]
            env[str(item)] = value2
            print "now setting",item,value


LIB_NAME        = 'modem_rfdevice_papm'
IMAGE_SOURCES   = ['MODEM_MODEM','MOB_RFA']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'


from glob import glob

env = env.Clone()

# Method to abort processing of this file, if not required for current air interface mode, etc
#if ( (USES_TEST_FLAG1 in env and USES_TEST_FLAG2 not in env) or USES_TEST_FLAG3 not in env)):
#   Return( )

#-------------------------------------------------------------------------------

if 'USES_INTERNAL_BUILD' in env:
	env.Append(CPPDEFINES = ['FEATURE_RFA_DEVICE_DEBUG'])

# Enable warnings -> errors
if 'USES_INTERNAL_BUILD' in env:
   env = env.Clone(HEXAGONCC_WARN = "${HEXAGONCC_WARN} -Werror", 
                   HEXAGONCXX_WARN = "${HEXAGONCCXX_WARN} -Werror")

if 'USES_FEATURE_RFA_TP_CARDS' in env:
        env.Append(CPPDEFINES = ['FEATURE_RF_HAS_TP_CARDS'])
        env.Append(CPPDEFINES = ['FEATURE_QPOET_STANDBY_FOR_RX_SWITCH'])


#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

env.Append(CPPDEFINES = ['MSG_BT_SSID_DFLT=MSG_SSID_RF',]) 

rfa_public_api_list =[
	('CORE', 'SYSTEMDRIVERS'),
	('CORE', 'KERNEL'),
	('CORE', 'DAL'),
	('CORE', 'DEBUGTOOLS'), 
	('CORE', 'MPROC'),
	('CORE', 'MEMORY'),
	('CORE', 'SERVICES'),
	('CORE', 'STORAGE'),
	('MOB', 'QTF'),
	('FW_COMMON','FW_COMMON'),
	('FW_WCDMA','FW_WCDMA'),
	('FW_GERAN','FW_GERAN'),
	('FW', 'RF'),
	('FW', 'WCDMA'),
	('FW', 'GERAN'),
	('MCS', 'MCS'),
	('MMCP', 'MMCP'),
	('GERAN', 'GERAN'),
	('RFA', 'COMMON'),
	('RFA', 'CDMA'),
	('RFA', 'LM'),
	('RFDEVICE_INTERFACE', 'RFDEVICE_INTERFACE'),
	('RFDEVICE_PAPM', 'RFDEVICE_PAPM'),
	('UTILS', 'COMMON'), 
	('MODEM', 'MMODE'),
    (env.get('RF_GLOBALS')['RFMODEM_AREA'], 'CCS'),] 

for api_area,api_name in rfa_public_api_list:
	env.RequirePublicApi([api_name], area=api_area)

#env.RequirePublicApi(['MMODE',])


env.RequireRestrictedApi([
    'RFDEVICE_INTERFACE',
    'FW', 
    'GERAN',
    'MCS', 
    'MMODE',
    'RFA',
    'RFDEVICE_PAPM',
    'RFDEVICE_PAPM_VIOLATIONS', 
    ])

env.RequirePublicApi(['RFLM'],area='RFLM')

#uncomment this section if src directory is added

#LIB_SOURCES = [ ]  #empy list

#SOURCE_FILES = [ ] 

#find all .c
#SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))

#find all .cpp files 
#SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))

#find all .s files
#SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.s'))


#for filename in SOURCE_FILES:
#        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#if LIB_SOURCES:

#        env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME,[
#        LIB_SOURCES,
#        ])





env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that AddBinaryLibrary can be launched
LIB_SOURCES = []  #empy list

if 'USES_NO_STRIP_NO_ODM' in env:

        SOURCE_FILES = [ ] 

        #find all .c
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.c'))

        #find all .cpp files 
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))

        #find all .s files
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.s'))


        for filename in SOURCE_FILES:
                LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that the pre-built library will be added to the list file
env.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_protected',[
    LIB_SOURCES,
    ], pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])


#----------------------------------------------------------------------------#
# Export inc and protected directories within rfdevice_pa
#----------------------------------------------------------------------------#
env.PublishProtectedApi ('RFDEVICE_PAPM_INC',[
     '${RFDEVICE_PAPM_ROOT}/api',
     '${RFDEVICE_PAPM_ROOT}/protected',
     ])

env.RequireProtectedApi (['RFDEVICE_PAPM_INC'])

env.LoadSoftwareUnits( ) 
