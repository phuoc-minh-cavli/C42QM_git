# -------------------------------------------------------------------------------- #
#                         G P S _ G N S S . S C O N S
#
# DESCRIPTION
#   SCons file for the whole GNSS subsystem. Defines the existence of GNSS subsystem.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
# Copyright (c) 2010 - 2012 Qualcomm Technologies Incorporated.
# Qualcomm Confidential and Proprietary. All Rights Reserved.
# Copyright (c) 2013 - 2015 Qualcomm Atheros, Inc.
# Qualcomm Atheros Confidential and Proprietary. All Rights Reserved. 
# Copyright (c) 2015 Qualcomm Technologies, Inc. 
# All Rights Reserved.
# Confidential and Proprietary - Qualcomm Technologies, Inc.
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# QUALCOMM ATHEROS, INCORPORATED and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of QUALCOMM ATHEROS, INCORPORATED.
#
# $Header: //components/rel/gnss8.mpss/9.5.1.1/gnss/build/gps_gnss.scons#1 $
# $DateTime: 2020/07/21 21:23:44 $
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import and clone the SCons environment
#--------------------------------------------------------------------------------
Import('gps_env')
#Import('gps_full_libs')
from glob import glob
from os.path import join, basename

#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_NO_GPS_GNSS' in gps_env or \
   'USES_CGPS' not in gps_env:
    gps_env.PrintInfo("GPS NOT SUPPORTED IN THIS CONFIGURATION")
    
    # Non-Unified builds must clean out the GPS files properly
    if 'USES_UNIFIED_SP_BUILD' not in gps_env:
        gps_env.CleanPack('CLEANPACK_TARGET', gps_env.FindFiles('*', '..'))
    Return()

BUILDPATH_STRING = '${BUILDPATH}/'
    
# Helper function to generate the list of files to compile into the specified list
def GenerateCompileList(self, directory, patternlist):
    # normalize patternlist to be a list
    if not isinstance(patternlist, list):
        patternlist = [patternlist]

    filelist = []
    try:
        for pattern in patternlist:
            filelist = filelist + [BUILDPATH_STRING + basename(fname)
                                   for fname in glob(join(gps_env.subst(directory), pattern))]
    except:
        gps.env.PrintError("Could not generate file list")
        raise "GPS_ENV: GenerateCompileList Failure"
    return filelist
AddMethod(gps_env, GenerateCompileList)
    
# Helper function to remove the specified file from list
# Input "file" = name of file to be removed without any 
#                leading or trailing modifications
def RemoveCompileFile(self, sourcelist, filelist):
    # normalize input to be a list
    if not isinstance(filelist, list):
        filelist = [filelist]
    
    # Modify any entry that has BUILDPATH_STRING
    filelist = [basename(fname) for fname in filelist]
    
    for file in filelist:
        try:
            filename = BUILDPATH_STRING + file
            while sourcelist.count(filename) > 0:
                sourcelist.remove(filename)
        except:
            gps.env.PrintError("Could not execute RemoveCompileFile")
            raise "GPS_ENV: RemoveCompileFile Failure"
AddMethod(gps_env, RemoveCompileFile)

# Helper function to add to binary file list
def AddGPSFullBinaryLibrary(self, image, library_target, library_sources, pack_exception=""):
    #libs = gps_env.AddBinaryLibrary(image,
    #                                library_target,
    #                                library_sources,
    #                                pack_exception,
    #                                add_to_list=False)
    #gps_full_libs.append(libs)
    gps_env.AddBinaryLibrary(image,
                             library_target,
                             library_sources,
                             pack_exception)
AddMethod(gps_env, AddGPSFullBinaryLibrary)

#-------------------------------------------------------------------------------
# QDSS Tracer definitions
#-------------------------------------------------------------------------------
if 'USES_QDSS_SWE' in gps_env:
  gps_env.Append(CPPDEFINES = " GNSS_TRACER_SW_EVT")
  
  QDSS_IMG = ['QDSS_EN_IMG']
  events = [['GNSS_STOP_STATE_EVT',       'Stop GNSS session'],
            ['GNSS_ACQ_STATE_EVT',        'Enter GNSS Acq'],
            ['GNSS_NON_DPO_STATE_EVT',    'Enter non DPO TRK'],
            ['GNSS_DPO_ACTIVE_STATE_EVT', 'Enter DPO Wakeup'],
            ['GNSS_DPO_IDLE_STATE_EVT',   'Enter DPO Sleep'],
            ['GNSS_DPO_RF_RESUME_EVT',    'Start DPO RF Resume'],
            ['GNSS_DPO_RF_PAUSE_EVT',     'End DPO RF Pause'],
            ['GNSS_INTEG_START_EVT',      'Start signal integration'],
            ['GNSS_INTEG_END_EVT',        'Stop signal integration'],
            ['GNSS_PP_START_EVT',         'Start PP'],
            ['GNSS_PP_END_EVT',           'End PP'],
            ['GNSS_NF_PREFIX_START_EVT',  'Start Prefix computation'],
            ['GNSS_NF_PREFIX_END_EVT',    'End Prefix computation'],
            ['GNSS_NF_FIX_START_EVT',     'Start Fix report'],
            ['GNSS_NF_FIX_END_EVT',       'End Fix report'],]
  gps_env.AddSWEInfo(QDSS_IMG,events)
  # Create our own tracer_event IDs file
  # The output of SWEBuilder must go into BUILDPATH along with the generated .o and .lib files.
  gps_env.SWEBuilder(['${BUILDPATH}/gnss_tracer_event_ids.h'],None)
  gps_env.PrintInfo("SWE Builder for gnss_tracer_event_ids.h was called")
  gps_env.Append(CPPPATH = ['${BUILD_ROOT}/gps/gnss/build/$BUILDPATH'])
  
#--------------------------------------------------------------------------------
# Publish Protected Include Paths for just GPS
#--------------------------------------------------------------------------------
gps_env.PublishProtectedApi('COMMON',     ["${GPS_ROOT}/gnss/common/inc"])
gps_env.PublishProtectedApi('LBS',        ["${GPS_ROOT}/gnss/lbs/inc"])
gps_env.PublishProtectedApi('MGP',        ["${GPS_ROOT}/gnss/mgp/inc"])
gps_env.PublishProtectedApi('PD_COMMS',   ["${GPS_ROOT}/gnss/pd_comms/inc"])
gps_env.PublishProtectedApi('PPM',        ["${GPS_ROOT}/gnss/ppm/inc"])
gps_env.PublishProtectedApi('SAMLITE',    ["${GPS_ROOT}/gnss/samlite/inc"])
gps_env.PublishProtectedApi('SDP',        ["${GPS_ROOT}/gnss/sdp/inc"])
gps_env.PublishProtectedApi('SM',         ["${GPS_ROOT}/gnss/sm/inc"])
gps_env.PublishProtectedApi('LE',         ["${GPS_ROOT}/gnss/le/inc"])
gps_env.PublishProtectedApi('LOC_MW',     ["${GPS_ROOT}/gnss/loc_mw/inc"])
gps_env.PublishProtectedApi('LOC_MW_AON', ["${GPS_ROOT}/gnss/loc_mw/aon/inc"])
gps_env.PublishProtectedApi('LOWI',       ["${GPS_ROOT}/gnss/lowi_client/inc"])
gps_env.PublishProtectedApi('LTE_OTDOA',  ["${GPS_ROOT}/gnss/wwanme/lte_otdoa/5_0/inc"])
gps_env.PublishProtectedApi('LTE_TDP',    ["${GPS_ROOT}/gnss/wwanme/lte_tdp/stub/inc",
                                           "${GPS_ROOT}/gnss/wwanme/common/inc"])
gps_env.PublishProtectedApi('WLE',        ["${GPS_ROOT}/gnss/wle/inc",])

#--------------------------------------------------------------------------------
# Require Protected Include Paths for just GPS
#--------------------------------------------------------------------------------
gps_env.RequireProtectedApi(['COMMON',   
                             'LBS',      
                             'LTE_OTDOA',
                             'LTE_TDP',
                             'MGP',      
                             'PD_COMMS', 
                             'PPM',      
                             'SAMLITE',
                             'SDP',      
                             'SM',       
                             'LE',       
                             'LOC_MW',
                             'LOC_MW_AON',
                             'LOWI',
                             'WLE',
                             'WWANMEPVT'
                            ])

gps_env.LoadSoftwareUnits()
