# -------------------------------------------------------------------------------- #
#                     G N S S _ S M _ C O M M O N . S C O N S
#
# DESCRIPTION
#   SCons file for the GNSS SM Common subsystem.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
#  Copyright (c) 2010 - 2012 Qualcomm Technologies Incorporated.
#  Qualcomm Confidential and Proprietary. All Rights Reserved.
#  Copyright (c) 2013 - 2015 Qualcomm Atheros, Inc.
#  Qualcomm Atheros Confidential and Proprietary. All Rights Reserved. 
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Copyright (c) 2015 Qualcomm Technologies, Inc. 
# Qualcomm Technologies Confidential and Proprietary. All Rights Reserved.
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# --------------------------------------------------------------------------------- #

# --------------------------------------------------------------------------------- #
#
#                      EDIT HISTORY FOR FILE
#
# This section contains comments describing changes made to this file.
# Notice that changes are listed in reverse chronological order.
#
# $Header: //components/rel/gnss8.mpss/9.5.1.1/gnss/sm/common/build/gnss_sm_common.scons#1 $
# $DateTime: 2020/07/21 21:23:44 $
# 
# when         who     what, where, why
# ---------    ---     ------------------------------------------------------------
# 02/24/15   ssu     Adding GM in memory logging.
# 10/08/14     jv      Constellation Configurability
# 10/06/10     ah      Initial Version
#
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import and clone the SCons environment
#--------------------------------------------------------------------------------
Import('gps_env')
from glob import glob
from os.path import join, basename

#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_CGPS' not in gps_env:
    Return()

#--------------------------------------------------------------------------------
# Setup source PATH
#--------------------------------------------------------------------------------
SRCPATH = '../src'
gps_env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#--------------------------------------------------------------------------------
# Name of the subsystem to which this unit belongs
#--------------------------------------------------------------------------------
LIB_TARGET = '${BUILDPATH}/' + 'gnss_sm_common'

#--------------------------------------------------------------------------------
# Required Public, Restricted & Protected APIs
#--------------------------------------------------------------------------------
QMI_SNS_PUBLIC_APIS= [
  'SNS_COMMON',
  'SNS_SAM_QMD',
  'SNS_SAM_AMD',
  'SNS_SAM_RMD',
  'SNS_SAM_DB',
  'SNS_SAM_PED',
  'SNS_SAM_SMD',
]

#-------------------------------------------------------------------------------
# We need MODEM PUBLIC SNS API's
#-------------------------------------------------------------------------------
gps_env.RequirePublicApi(QMI_SNS_PUBLIC_APIS,area='QMIMSGS')
gps_env.RequirePublicApi(QMI_SNS_PUBLIC_APIS,area='API')

#--------------------------------------------------------------------------------
# Images that this VU is added
#--------------------------------------------------------------------------------
IMAGES = ['MODEM_MODEM']

#--------------------------------------------------------------------------------
# Generate the library and add to an image
#--------------------------------------------------------------------------------
LIB_SOURCES = gps_env.GenerateCompileList(SRCPATH, '*.c')

#Compile out msgr_task related file which is not required for SA targets
if 'USES_GNSS_SA' in gps_env:
    gps_env.RemoveCompileFile(LIB_SOURCES, 'gnss_msgr_task.c')

if 'USES_GPS_LM_STANDALONE' in gps_env:
    gps_env.RemoveCompileFile(LIB_SOURCES, 'gnss_msgr_task.c')
    gps_env.RemoveCompileFile(LIB_SOURCES, 'lsmp_api.c')
    gps_env.RemoveCompileFile(LIB_SOURCES, 'sm_loc_lte_otdoa.c')
	
if 'USES_GNSS_GLO' in gps_env:
    gps_env.RemoveCompileFile(LIB_SOURCES, 'sm_glo_stub.c')
else:
    gps_env.RemoveCompileFile(LIB_SOURCES, 'sm_glo.c')

if 'USES_GNSS_BDS' in gps_env:
    gps_env.RemoveCompileFile(LIB_SOURCES, 'sm_bds_stub.c')
else:
    gps_env.RemoveCompileFile(LIB_SOURCES, 'sm_bds.c')

if 'USES_GNSS_GAL' in gps_env:
    gps_env.RemoveCompileFile(LIB_SOURCES, 'sm_gal_stub.c')
else:
    gps_env.RemoveCompileFile(LIB_SOURCES, 'sm_gal.c')


#--------------------------------------------------------------------------------
# Add our library to the Modem image
#--------------------------------------------------------------------------------
gps_env.AddLibrary(IMAGES, LIB_TARGET, LIB_SOURCES)

#--------------------------------------------------------------------------------
# GSS uses RCINIT and does not want this task for SA target
#--------------------------------------------------------------------------------
if 'USES_GNSS_SA' in gps_env:
    Return()
if 'USES_GPS_LM_STANDALONE' in gps_env:
    Return()
#--------------------------------------------------------------------------------
# Initialize GNSS_MSGR Task through RCINIT
#--------------------------------------------------------------------------------
RCINIT_TASK_FN = {
    'thread_name'         : 'gnss_msgr',
    'thread_entry'        : 'gnss_msgr_task',
    'stack_size_bytes'    : '16384',
    'sequence_group'      : gps_env.subst('$MODEM_UPPERLAYER'),
    'priority_amss_order' : 'SM_TM_PRI_ORDER',
    'cpu_affinity'        : 'REX_ANY_CPU_AFFINITY_MASK',
    'policy_optin'        : ['default', 'ftm', ],
}
gps_env.AddRCInitTask (IMAGES, RCINIT_TASK_FN)

