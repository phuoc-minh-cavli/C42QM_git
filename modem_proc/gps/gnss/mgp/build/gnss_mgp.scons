# -------------------------------------------------------------------------------- #
#                         G N S S _ M G P . S C O N S
#
# DESCRIPTION
#   SCons file for the whole MGP subsystem. Defines the existence of MGP subsystem.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
#  Copyright (c) 2010 - 2012 Qualcomm Technologies Incorporated.
#  Qualcomm Confidential and Proprietary. All Rights Reserved.
#  Copyright (c) 2013 - 2015 Qualcomm Atheros, Inc.
#  Qualcomm Atheros Confidential and Proprietary. All Rights Reserved. 
#  Copyright (c) 2015 Qualcomm Technologies, Inc. 
#  All Rights Reserved.
#  Confidential and Proprietary - Qualcomm Technologies, Inc.
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
# $Header: //source/qcom/qct/modem/wcdma/main/latest/build/qscons/wcdma.scons#1 $
# $DateTime: 2010/04/06 13:31:09 $
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import the SCons environment
#--------------------------------------------------------------------------------
Import('gps_env')

#--------------------------------------------------------------------------------
# Include NavBB API files
#--------------------------------------------------------------------------------
gps_env.RequirePublicApi(['NAVBB',
                         ], area='GPS')

#--------------------------------------------------------------------------------
# Publish Protected Include Paths for just MGP
#--------------------------------------------------------------------------------
# Only part of this should be visible, at PE level - none here - but this is an
# improvement over where it was previously - 2 levels up
# TODO next - move /nf/src only (rest 'later') to be visible only to PE, then NF
gps_env.PublishProtectedApi('GPS_MGPPE', ['${GPS_ROOT}/gnss/mgp/pe/common/inc',
                                      '${GPS_ROOT}/gnss/mgp/pe/cd/inc',
                                      '${GPS_ROOT}/gnss/mgp/pe/cd/src',
                                      '${GPS_ROOT}/gnss/mgp/pe/inc',
                                      '${GPS_ROOT}/gnss/mgp/pe/nf/inc',
                                      '${GPS_ROOT}/gnss/mgp/pe/nf/src',
                                     ])
                                     
#--------------------------------------------------------------------------------
# Require Protected Include Paths for just MGP
#--------------------------------------------------------------------------------
gps_env.RequireProtectedApi(['GPS_MGPPE',
                        ])

#--------------------------------------------------------------------------------
# Find all of the .c and .h files in MGP and Clean them from being packed
#--------------------------------------------------------------------------------
GNSS_MGP_SHIP_FILES = ['mgp_nv.c',
                       'loc_wwan_me_api.h',
                       'mgp_api.h',
                       'mgp_nv.h',
                       'mgp_pe_sensors_api.h',
                       'navhw_api.h',
                       'cgps_ext.c',
                      ]

# Parse the files to find the shipped and non-shipped files
black_list = gps_env.FindFiles(['*.h', '*.c', '*.cpp', '*.prt', '*.sym'], '..')
white_list = gps_env.FindFiles(GNSS_MGP_SHIP_FILES, '..')
  
# This code does "filtered = black_list - white_list"
filtered = [x for x in black_list if x not in white_list]
gps_env.CleanPack("CLEANPACK_TARGET", filtered, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])

# Starts the module for MGP Dynamic loading, the libraries are hardcoded for now
# if Dynamic loading enabled then go to paths and add the library paths for one single SO for mgp else continue the normal way
if 'USES_FEATURE_DYNAMIC_LOADING_GNSS' in gps_env:
  if 'USES_MODEM_DYNAMIC_LOADING' in gps_env:
    GPS_DYNAMIC_SHARED_SOURCES = []
    
    # This needs to be generalized to be able to accept many different configurations and Gen9 as well
    for submodule in ['../common/build/gnss_mgp_common.scons',
                      '../me/build/gnss_mgp_me.scons',
                      '../me/gen8/build/gnss_mgp_me_gen8.scons',
                      '../me/gen8/cc/build/gnss_mgpme_cc.scons',
                      '../me/gen8/common/build/gnss_mgpme_common.scons',
                      '../me/gen8/gpsfft/build/gnss_gpsfft.scons',
                      '../me/gen8/mc/build/gnss_mgpme_mc.scons',
                      '../me/gen8/navhw/common/build/gnss_mgpme_navhw_common.scons',
                      '../me/gen8/navhw/gen8c/build/gnss_mgpme_navhw_gen8c.scons',
                      '../me/gen8/navrf/adc/helike2/build/gnss_mgpme_navrf_adc_helike2.scons',
                      '../me/gen8/navrf/build/gnss_mgpme_navrf.scons',
                      '../me/gen8/navrf/chipset/mdm9607/build/gnss_mgpme_navrf_chipset_mdm9607.scons',
                      '../me/gen8/navrf/common/build/gnss_mgpme_navrf_common.scons',
                      '../me/gen8/navrf/device/euclid/build/gnss_mgpme_navrf_device_euclid.scons',
                      '../me/gen8/pgi/build/gnss_mgpme_pgi.scons',
                      '../me/gen8/pp/build/gnss_mgpme_pp.scons',
                      '../pe/cd/build/gnss_mgppe_cd.scons',
                      '../pe/common/build/gnss_mgppe_common.scons',
                      '../pe/nf/build/gnss_mgppe_nf.scons']:
        output = SConscript('%s' % submodule, exports='gps_env')
        
        # Not every Scons file returns something
        if output is None:
            continue
        
        print '----------------'
        print output
        
        GPS_DYNAMIC_SHARED_SOURCES = GPS_DYNAMIC_SHARED_SOURCES + output

    # Sort by folder names
    GPS_DYNAMIC_SHARED_SOURCES.sort()
    
    # Define library name
    SHARED_LIBRARY='gnss'
    gps_env.Append(CFLAGS='-DDYNAMIC_LINKING_ENABLED')
    # Create dynamic library
    gps_env.AddSharedLibrary(['MODEM_MODEM'],'${BUILDPATH}/'+SHARED_LIBRARY, GPS_DYNAMIC_SHARED_SOURCES)
    
    MGP_RESIDENT_SOURCES = []
    for submodule in ['../resident/build/gnss_mgp_resident.scons']:
        resident_output = SConscript('%s' % submodule, exports='gps_env')
        
        # Not every Scons file returns something
        if resident_output is None:
            continue
        
        print '----------------'
        print resident_output
        
        MGP_RESIDENT_SOURCES = MGP_RESIDENT_SOURCES + resident_output

    # Sort by folder names
    MGP_RESIDENT_SOURCES.sort()
    
    # Define library name
    RESIDENT_LIBRARY='gps_mgp_resident'
    
    # Create dynamic library
    gps_env.AddGPSFullBinaryLibrary(['MODEM_MODEM'],'${BUILDPATH}/'+RESIDENT_LIBRARY, MGP_RESIDENT_SOURCES)
    
    # Clean out all lower level files as they are not being called
    gps_env.CleanPack('CLEANPACK_TARGET', gps_env.FindFiles('*', '../resident'))
    gps_env.CleanPack('CLEANPACK_TARGET', gps_env.FindFiles('*', '../common'))
    gps_env.CleanPack('CLEANPACK_TARGET', gps_env.FindFiles('*', '../inc'))
    gps_env.CleanPack('CLEANPACK_TARGET', gps_env.FindFiles('*', '../me'))
    gps_env.CleanPack('CLEANPACK_TARGET', gps_env.FindFiles('*', '../pe'))
    
    # Stop at MGP level, by not calling "LoadSoftwareUnits"
  else:
    gps_env.LoadSoftwareUnits()
else:
  gps_env.LoadSoftwareUnits()
