# -------------------------------------------------------------------------------- #
#                N A V R X _ M O D U L E . S C O N S
#
# DESCRIPTION
#   SCons file for an NavRX module.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
#  Copyright (c) 2019 Qualcomm Technologies, Inc. 
#  All Rights Reserved.
#  Confidential and Proprietary - Qualcomm Technologies, Inc. 
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# 
# $Header: //components/rel/gnss8.mpss/9.5.1.1/gnss/mgp/me/gen9/navrx/adc/src/manticore/build/navrx_module.scons#1 $
# $DateTime: 2020/07/21 21:23:44 $
# $Author: pwbldsvc $
#
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import the SCons environment
#--------------------------------------------------------------------------------
Import('gps_env')
from glob import glob
from os.path import join, basename
from os import getcwd, getenv

#--------------------------------------------------------------------------------
# Images that this VU is added
#--------------------------------------------------------------------------------
IMAGES = ['MODEM_MODEM']

#--------------------------------------------------------------------------------
# Determine the NavRX Module and Sub-Module name
#--------------------------------------------------------------------------------
internal_path = gps_env.NormPath(getcwd())
internal_path = internal_path[len(gps_env.RealPath('${GPS_ROOT}')):]
internal_path = internal_path.replace('\\', '/')
[dumpsrc, internal_path] = internal_path.split('navrx/')
[NAVRX_MODULE, dumpsrc, NAVRX_SUBMODULE, dumpbuild] = internal_path.split('/')

#--------------------------------------------------------------------------------
# Check to see if the NavRX Sub-Module is compiled
#--------------------------------------------------------------------------------
NAVRX_MODULE_FLAG = 'USES_FEATURE_GNSS_NAVRX_' + NAVRX_MODULE.upper() + '_' + NAVRX_SUBMODULE.upper()
if NAVRX_MODULE_FLAG not in gps_env['USES_FLAGS']:
    gps_env.CleanPack('CLEANPACK_TARGET', gps_env.FindFiles('*', '..'))
    Return()
    
gps_env.PrintInfo("NavRX: " + NAVRX_MODULE_FLAG)

#--------------------------------------------------------------------------------
# Name of the subsystem to which this unit belongs
#--------------------------------------------------------------------------------
LIB_TARGET = '${BUILDPATH}/' + 'navrx_' + NAVRX_MODULE + '_' + NAVRX_SUBMODULE

#--------------------------------------------------------------------------------
# Compile the src folder
#--------------------------------------------------------------------------------
gps_env.VariantDir('${BUILDPATH}', '../src', duplicate=0)
gps_env.AddBinaryLibrary(IMAGES, \
                     (LIB_TARGET + '_pvt'), \
                     gps_env.GenerateCompileList('../src', '*.cpp'), pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])