# -------------------------------------------------------------------------------- #
#                         G N S S _ M G P M E _ N A V R X _ C O M M O N . S C O N S
#
# DESCRIPTION
#   SCons file for the NavRX module.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
#  Copyright (c) 2015 Qualcomm Atheros, Inc.
#  Qualcomm Atheros Confidential and Proprietary. All Rights Reserved. 
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# --------------------------------------------------------------------------------- #

# --------------------------------------------------------------------------------- #
#
#                      EDIT HISTORY FOR FILE
#
# This section contains comments describing changes made to this file.
# Notice that changes are listed in reverse chronological order.
#
# $Header: //components/rel/gnss8.mpss/9.5.1.1/gnss/mgp/me/gen9/navrx/common/build/gnss_mgpme_navrx_common.scons#1 $
# $DateTime: 2020/07/21 21:23:44 $
# $Author: pwbldsvc $
#
#  when        who  what, where, why
#  ----------  ---  -----------------------------------------------------------
#  2015-02-10  dmc  Initial revision.
#
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import the SCons environment
#--------------------------------------------------------------------------------
Import('gps_env')
from glob import glob
from os.path import join, basename, abspath

#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_CGPS' not in gps_env:
    Return()

#--------------------------------------------------------------------------------
# Setup source PATH
#--------------------------------------------------------------------------------
SRCPATH = '../src'
gps_env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#--------------------------------------------------------------------------------
# Name of the subsystem to which this unit belongs
#--------------------------------------------------------------------------------
LIB_TARGET = '${BUILDPATH}/' + 'gnss_mgpme_navrx_common'

#--------------------------------------------------------------------------------
# Images that this VU is added
#--------------------------------------------------------------------------------
IMAGES = ['MODEM_MODEM']

#--------------------------------------------------------------------------------
# Generate the library and add to an image
#--------------------------------------------------------------------------------
BINARY_LIB_CPP_SOURCES = gps_env.GenerateCompileList(SRCPATH, '*.cpp')

#--------------------------------------------------------------------------------
# Ship our code as binary library and add it to the Modem image
#--------------------------------------------------------------------------------

if 'USES_FEATURE_DYNAMIC_LOADING_GNSS' in gps_env:
  if 'USES_MODEM_DYNAMIC_LOADING' in gps_env:
    output = BINARY_LIB_CPP_SOURCES
    
    # Need to replace '${BUILDPATH}' with '${GPS_ROOT}'
    output = [w.replace('${BUILDPATH}', abspath(gps_env.subst(SRCPATH))) for w in output]
    
    # This expects a string with the variable name to pass back
    Return('output')
    #End of Dynamic Module
    #gps_env.PrintInfo("Dynamic loading FW is ready in GNSS")
    
  elif 'USES_FEATURE_EXTERNAL_PAGING' in gps_env:
    gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt_dmm'), BINARY_LIB_CPP_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
    
  else:
    gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_CPP_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
else:
  gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_CPP_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])

