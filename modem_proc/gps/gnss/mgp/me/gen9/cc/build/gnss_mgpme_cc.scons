# -------------------------------------------------------------------------------- #
#                    G N S S _ M G P M E _ C C . S C O N S
#
# DESCRIPTION
#   SCons file for the GNSS MGP ME CC subsystem.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
#  Copyright (c) 2010 - 2012 Qualcomm Technologies Incorporated.
#  Qualcomm Confidential and Proprietary. All Rights Reserved.
#  Copyright (c) 2013 - 2014 Qualcomm Atheros, Inc.
#  Qualcomm Atheros Confidential and Proprietary. All Rights Reserved. 
#  Copyright (c) 2015 - 2018 Qualcomm Technologies, Inc. 
#  Qualcomm Technologies Confidential and Proprietary. All Rights Reserved.
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# --------------------------------------------------------------------------------- #

# --------------------------------------------------------------------------------- #
#
#                      EDIT HISTORY FOR FILE
#
# This section contains comments describing changes made to this file.
# Notice that changes are listed in reverse chronological order.
#
# $Header: //components/rel/gnss8.mpss/9.5.1.1/gnss/mgp/me/gen9/cc/build/gnss_mgpme_cc.scons#1 $
# $DateTime: 2020/07/21 21:23:44 $
# $Author: pwbldsvc $ 
# 
# when         who     what, where, why
# ---------    ---     ------------------------------------------------------------
# 10/06/10     ah      Initial Version
#
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import the SCons environment
#--------------------------------------------------------------------------------
Import('gps_env')
from glob import glob
from os.path import join, basename, abspath
#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_CGPS' not in gps_env:
   Return()
  
#--------------------------------------------------------------------------------
# Setup source PATH
#--------------------------------------------------------------------------------
SRCPATH = '../src'
gps_env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#--------------------------------------------------------------------------------
# Name of the subsystem to which this unit belongs
#--------------------------------------------------------------------------------
LIB_TARGET = '${BUILDPATH}/' + 'gnss_mgpme_cc'

#--------------------------------------------------------------------------------
# Images that this VU is added
#--------------------------------------------------------------------------------
IMAGES = ['MODEM_MODEM']

#--------------------------------------------------------------------------------
# Generate the library and add to an image
#--------------------------------------------------------------------------------
BINARY_LIB_SOURCES = gps_env.GenerateCompileList(SRCPATH, '*.c')

#--------------------------------------------------------------------------------
# Determine Island files and non-island files
#--------------------------------------------------------------------------------
CC_ISLAND_SOURCES = gps_env.GenerateCompileList(SRCPATH, '*uimage.c')
gps_env.RemoveCompileFile(BINARY_LIB_SOURCES, CC_ISLAND_SOURCES)

#--------------------------------------------------------------------------------
# Remove the MGP Resident Task Loop
#--------------------------------------------------------------------------------
gps_env.RemoveCompileFile(BINARY_LIB_SOURCES, 'cc_task_resident.c')

#--------------------------------------------------------------------------------
# Symbols whitelisted for island mode
#--------------------------------------------------------------------------------
CC_WHITELIST = [
 'CancelNPAuImageVote',
 'cc_BusBwTestCmdProc',
 'cc_BusBwTestDpcDoneProc',
 'cc_BusBwTestProcessBusBwResults',
 'cc_BusBwTestSrchDoneProc',
 'cc_ChanMgrGetChannelPoolPtr',
 'cc_ConfigMemoryHandler',
 'cc_CpAbortChan',
 'cc_CpConfigDpoMode',
 'cc_CpConfigTrackMode',
 'cc_CpDisablingSupervisorTimerHandler',
 'cc_CpForceSampleMemSwitch',
 'cc_CpProcessChanModify',
 'cc_CpProcessRFPauseTimer',
 'cc_CpSmiBufferSwitchStateMachine',
 'cc_DirectModeDisable',
 'cc_DirectModeEnable',
 'cc_DisableHandler',
 'cc_DmovPopulateDbgStatus',
 'cc_DpConfigDpoMode',
 'cc_DpModifyChan',
 'cc_DpProcessDcpIRQ',
 'cc_DpProcessGridLog',
 'cc_EnableHandler',
 'cc_GpioIsr',
 'cc_HandleOffline',
 'cc_HandleStop',
 'cc_IqProcDmDoneInterrupt',
 'cc_IqTestCleanup',
 'cc_IqTestCmdHandler',
 'cc_IqTestProcessDelayTimer',
 'cc_ImdWlanTxCheck',
 'cc_ImdUpdate',
 'cc_ImdGpioIntHandler',
 'cc_ProcessDiagCmd',
 'cc_ModifyJob',
 'cc_NBIQTestRunning',
 'cc_SampleMemGetImemSize',
 'cc_SampleMemGetImemStartAddr',
 'cc_SaveHwReg',
 'cc_SlicerAbortJobHandler',
 'cc_SlicerAllocateDedicatedHandler',
 'cc_SlicerAllocQueueResources',
 'cc_SlicerConfigureMode',
 'cc_SlicerFatalErrorRecoveryTimerHandler',
 'cc_SlicerForceQueueResample',
 'cc_SlicerModifyJobHandler',
 'cc_SlicerNewBatchJobHandler',
 'cc_SlicerNewJobHandler',
 'cc_SlicerQueueFlush',
 'cc_SlicerReleaseDedicatedHandler',
 'cc_SlicerSADataPut',
 'cc_SlicerShutdown',
 'cc_SlicerSortJobQueue',
 'cc_SlicerUpdateGlonassTimeMark',
 'cc_SrchMgrBpDesignOffsetPut',
 'cc_SrchMgrConfigDpoMode',
 'cc_SrchMgrIsIqTestRunning',
 'cc_SrchMgrInformChannelDone',
 'cc_SrchMgrNotchFltrPut',
 'cc_SrchMgrPeriodicHWConfig',
 'cc_SrchMgrRealignTrackingEarlySample',
 'cc_SrchMgrSendDeferredChannelDone',
 'cc_SrchMgrShutdown',
 'cc_UpdatePffMsgMask',
 'ccu_TrackResourceStaticBuf',
 'cc_SlicerEnter1xMSAMode',
 'cc_CopyImemToDdrBuffer',
 'cc_RefreshHandler',
 'dcache_clean_region',
 'dcache_inval_region',
 'err_crash_cb_register',
 'event_report_payload',
 'gpsfft_SpAnDpoRfResumeIPC',
 'gts_SendTtrRegLatchInfo',
 'IqStartCB',
 'log_commit',
 'log_ipc_msg',
 'log_set_timestamp',
 'mc_CCCantContinue',
 'mc_CCDisabled',
 'mc_CCDisabledCriticalError',
 'mc_CcDpoEarlyExitIndication',
 'mc_CCEnabled',
 'mc_DpoRfResume',
 'mc_PeakReport',
 'mc_TickProcDRSync',
 'mc_TimeTickPut',
 'mc_uImagePeriodicExit',
 'mc_VtrbiDecoderRpt',
 'mc_WlanTxStatusPut',
 'me_NavHwStop',
 'me_SbasSvValid',
 'mez_LteB13TxGnssQualInit',
 'mez_LteTxPower',
 'mgp_AllowuImageEntry',
 'mgp_GetGpsRtcMs',
 'mgp_RegisteruImageClientCb',
 'mgp_TimeTickGet',
 'mgpz_GpmMutex',
 'mgpz_GpmNpaClientConfig',
 'msg_sprintf',
 'msg_status',
 'msg_v3_send_3_ext',
 'msg_v3_send_3_pcrelR0',
 'msg_v3_send_pcrelR0',
 'msg_v3_send_var_ext',
 'navrx_Aperiodic',
 'navrx_AperiodicTimerExpiryHandler',
 'navrx_BootupCal',
 'navrx_Bp3SchFreqPut',
 'navrx_GloFDMAOffsetGet',
 'navrx_GloFDMAOffsetPut',
 'navrx_GloSubChanConfig',
 'navrx_HandleOTFSACommands',
 'navrx_InjectReferenceOscInfo',
 'navrx_NotchFltrPut1',
 'navrx_Periodic',
 'navrx_ProcessCxmNotification',
 'navrx_SendRfStatsData',
 'navrx_TsgConfig',
 'navrx_UpdateNavCoreStats',
 'navrx_PgaChangeRequest',
 'navrx_NpaResourceAvailable',
 'navrx_HandleIoctlCommands',
 'navrx_SendRfStatsForPqme',   # Will be called only if navrx_Periodic gets called and navrx_periodic will not be called when cc is in uimage
 'navrx_XOComp',
 'npa_cancel_request',
 'os_IpcCreate',
 'os_IpcDelete',
 'os_IpcSend',
 'os_MutexLock',
 'os_MutexUnlock',
 'os_QueueFindElement',
 'os_QurtDogHbReport',
 'os_SleepMs_NonDeferrable',
 'os_ULogPrintString',
 'os_BusyWait',
 'ULogFront_RealTimePrintf',
 'pp_LogReportCgpsPeakDwell',
 'pp_LogReportFullEnergyGrid',
 'pp_LogReportSparseEnergyGrid',
 'RestoreBusVotes',
 'snprintf',
 'tracer_event_simple',
 'msg_v4_send_var_ext',
 'msg_v4_send_3_ext',
 'npa_cancel_request',
]

#--------------------------------------------------------------------------------
# Disable a warning due to "undefined behavior: store to null pointer converted to trap"
#--------------------------------------------------------------------------------
gps_env.Append(HEXAGON_WARN =    ' -Wno-undefined-optimized ')
gps_env.Append(HEXAGONCC_WARN =  ' -Wno-undefined-optimized ')
gps_env.Append(HEXAGONCXX_WARN = ' -Wno-undefined-optimized ')


#--------------------------------------------------------------------------------
# If Island mode is supported, tag necessary files and add the compile flags
#--------------------------------------------------------------------------------
if 'USES_GNSS_ISLAND_LINK' in gps_env:
    # Force all symbols to normal data section
    gps_env.Append(CCFLAGS = " -G0 ")
    
    #We don't support island functions with '-fstack-protector' or '-fstack-protector-strong'
    if "-fstack-protector" in gps_env['HEXAGON_STKPRO'] or \
       "-fstack-protector-strong" in gps_env['HEXAGON_STKPRO']:
        gps_env.Replace(HEXAGON_STKPRO = "")
    
    # Generate the library for the ISLAND source files.
    cc_uimg_libs = gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_uimage'), CC_ISLAND_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
    
    # Tag the generated library for inclusion in the ISLAND section.
    gps_env.AddIslandLibrary(IMAGES, cc_uimg_libs)
    
    #Add external references to whitelist. These are symbols defined outside the island code but are referenced from
    #within the island code. Adding such symbols to the whitelist assumes that care is taken to make sure that these
    #symbols will not be accessed when running in island mode
    gps_env.AddSymbolToIslandWhitelist(IMAGES, cc_uimg_libs, CC_WHITELIST)

    # Compile the rest of the files
    gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
else: 
    # Compile both file lists in the same library
    if 'USES_FEATURE_DYNAMIC_LOADING_GNSS' in gps_env:
      if 'USES_MODEM_DYNAMIC_LOADING' in gps_env:
        output = BINARY_LIB_SOURCES+CC_ISLAND_SOURCES
    
        # Need to replace '${BUILDPATH}' with '${GPS_ROOT}'
        output = [w.replace('${BUILDPATH}', abspath(gps_env.subst(SRCPATH))) for w in output]
    
        # This expects a string with the variable name to pass back
        Return('output')
        #End of Dynamic Module
        #gps_env.PrintInfo("Dynamic loading FW is ready in GNSS")
    
      elif 'USES_FEATURE_EXTERNAL_PAGING' in gps_env:
         gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt_dmm'), BINARY_LIB_SOURCES+CC_ISLAND_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
    
      else:
         gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_SOURCES+CC_ISLAND_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
    else:
       gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_SOURCES+CC_ISLAND_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])

#--------------------------------------------------------------------------------
# when uImage is in use, uCC task will be created by MC.  
# Otherwise, create uCC task through RCINIT
#--------------------------------------------------------------------------------
if 'USES_GNSS_ISLAND_COMPILE' in gps_env:
    RCINIT_TASK_FN = {
        'sequence_group'      : 'RCINIT_GROUP_7',
        'thread_type'         : 'RCINIT_TASK_QURTTASK',
        'thread_name'         : 'uCC',
        'thread_entry'        : 'RCINIT_NULL',  
        'stack_size_bytes'    : '12288',
        'priority_amss_order' : 'UCC_PRI_ORDER', 
    }
    gps_env.AddRCInitTask (IMAGES, RCINIT_TASK_FN)
else:
    RCINIT_TASK_FN = {
        'thread_name'         : 'cc',
        'thread_entry'        : 'cc_Task',
        'stack_size_bytes'    : '12288',
        'sequence_group'      : gps_env.subst('$MODEM_UPPERLAYER'),
        'priority_amss_order' : 'CC_PRI_ORDER',
        'cpu_affinity'        : 'REX_ANY_CPU_AFFINITY_MASK',
        'policy_optin'        : ['default', 'ftm', ],
    }
    gps_env.AddRCInitTask (IMAGES, RCINIT_TASK_FN)
