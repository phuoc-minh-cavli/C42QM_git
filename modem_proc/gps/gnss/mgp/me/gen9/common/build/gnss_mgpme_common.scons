# -------------------------------------------------------------------------------- #
#                 G N S S _ M G P M E _ C O M M O N . S C O N S
#
# DESCRIPTION
#   SCons file for the GNSS MGP ME Common subsystem.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
#  Copyright (c) 2010 - 2012 Qualcomm Technologies Incorporated.
#  Qualcomm Confidential and Proprietary. All Rights Reserved.
#  Copyright (c) 2013 - 2014 Qualcomm Atheros, Inc.
#  Qualcomm Atheros Confidential and Proprietary. All Rights Reserved. 
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# --------------------------------------------------------------------------------- #

# --------------------------------------------------------------------------------- #
#
#                      EDIT HISTORY FOR FILE
#
# This section contains comments describing changes made to this file.
# Notice that changes are listed in reverse chronological order.
#
# $Header: //components/rel/gnss8.mpss/9.5.1.1/gnss/mgp/me/gen9/common/build/gnss_mgpme_common.scons#1 $
# $DateTime: 2020/07/21 21:23:44 $
# 
# when         who     what, where, why
# ---------    ---     ------------------------------------------------------------
# 10/06/10     ah      Initial Version
#
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import the SCons environment
#--------------------------------------------------------------------------------
Import('gps_env')
from glob import glob
from os.path import join, basename, abspath
#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_CGPS' not in gps_env:
   Return()
   
#--------------------------------------------------------------------------------
# Setup source PATH
#--------------------------------------------------------------------------------
SRCPATH = '../src'
gps_env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#--------------------------------------------------------------------------------
# Name of the subsystem to which this unit belongs
#--------------------------------------------------------------------------------
LIB_TARGET = '${BUILDPATH}/' + 'gnss_mgpme_common'

#--------------------------------------------------------------------------------
# Images that this VU is added
#--------------------------------------------------------------------------------
IMAGES = ['MODEM_MODEM']

#--------------------------------------------------------------------------------
# Generate the library and add to an image
#--------------------------------------------------------------------------------
BINARY_LIB_SOURCES = gps_env.GenerateCompileList(SRCPATH, '*.c')

if 'USES_GNSS_GAL_E1C' not in gps_env:
    gps_env.RemoveCompileFile(BINARY_LIB_SOURCES, 'me_gal_e1c_enable.c')
else:
    gps_env.RemoveCompileFile(BINARY_LIB_SOURCES, 'me_gal_e1c_disable.c')

if 'USES_GNSS_ISLAND_LINK' in gps_env:
    # Find all files that end with 'uimage.c'
    ME_COMMON_ISLAND_SOURCES = gps_env.GenerateCompileList(SRCPATH, '*uimage.c')
    gps_env.RemoveCompileFile(BINARY_LIB_SOURCES, ME_COMMON_ISLAND_SOURCES)
    
    # Turn off debug symbols
    # Avoid island symbols from getting into .sdata/.sbss
    gps_env.Append(CCFLAGS = " -G0 ")
    
    #We don't support island functions with '-fstack-protector' or '-fstack-protector-strong'
    if "-fstack-protector" in gps_env['HEXAGON_STKPRO'] or \
       "-fstack-protector-strong" in gps_env['HEXAGON_STKPRO']:
        gps_env.Replace(HEXAGON_STKPRO = "")
        
    # Generate the library for the ISLAND source files.
    me_common_uimg_libs = gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_uimage'), ME_COMMON_ISLAND_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
    
    # Tag the generated library for inclusion in the ISLAND section.
    gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
    gps_env.AddIslandLibrary(IMAGES, me_common_uimg_libs)
else:
    #--------------------------------------------------------------------------------
    # Ship our code as binary library and add it to the Modem image
    #--------------------------------------------------------------------------------
    
    if 'USES_FEATURE_DYNAMIC_LOADING_GNSS' in gps_env:
      if 'USES_MODEM_DYNAMIC_LOADING' in gps_env:
        output = BINARY_LIB_SOURCES
    
        # Need to replace '${BUILDPATH}' with '${GPS_ROOT}'
        output = [w.replace('${BUILDPATH}', abspath(gps_env.subst(SRCPATH))) for w in output]
    
        # This expects a string with the variable name to pass back
        Return('output')
        #End of Dynamic Module
        #gps_env.PrintInfo("Dynamic loading FW is ready in GNSS")
    
      elif 'USES_FEATURE_EXTERNAL_PAGING' in gps_env:
        gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt_dmm'), BINARY_LIB_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
    
      else:
        gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])
    else:
      gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])

