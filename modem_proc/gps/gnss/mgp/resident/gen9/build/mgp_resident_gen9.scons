# -------------------------------------------------------------------------------- #
#                     G N S S _ M G P _R E S I D E N T. S C O N S
#
# DESCRIPTION
#   SCons file for the GNSS MGP PE CD subsystem.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
#  Copyright (c) 2010 - 2012 Qualcomm Technologies Incorporated.
#  Qualcomm Confidential and Proprietary. All Rights Reserved.
#  Copyright (c) 2013 - 2015 Qualcomm Atheros, Inc.
#  Qualcomm Atheros Confidential and Proprietary. All Rights Reserved. 
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# --------------------------------------------------------------------------------- #

# --------------------------------------------------------------------------------- #
#
#                      EDIT HISTORY FOR FILE
#
# This section contains comments describing changes made to this file.
# Notice that changes are listed in reverse chronological order.
#
# $Header: 
# $DateTime: 2020/07/21 21:23:44 $
# $Author: pwbldsvc $ 
# 
# when         who     what, where, why
# ---------    ---     ------------------------------------------------------------
# 10/06/10     ah      Initial Version
#
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import and clone the SCons environment
#--------------------------------------------------------------------------------
Import('gps_env')
from glob import glob
from os.path import join, basename, abspath

#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_CGPS' not in gps_env:
   Return()

if 'USES_FEATURE_GNSS_NAVHW_GEN9' not in gps_env:
   Return()
   
gps_env.PrintInfo("  MGP Resident Gen9 ME")

SRCPATH = '../../..'

#--------------------------------------------------------------------------------
# Name of the subsystem to which this unit belongs
#--------------------------------------------------------------------------------
LIB_TARGET = '${BUILDPATH}/' + 'mgp_resident'

#--------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros by removing previous version and adding new
# Definition
#--------------------------------------------------------------------------------
gps_env.Replace(CPPDEFINES = [x for x in gps_env['CPPDEFINES'] if not x.startswith("MSG_BT_SSID_DFLT=")] +
                                         ["MSG_BT_SSID_DFLT=MSG_SSID_MGPPE"]) 

#--------------------------------------------------------------------------------
# Images that this VU is added
#--------------------------------------------------------------------------------
IMAGES = ['MODEM_MODEM']

#--------------------------------------------------------------------------------
# Generate the library and add to an image
#--------------------------------------------------------------------------------
# Task Loop files are part of each ME/PE folder.  Each file is manually specified
# and is removed manually from each Scons
# Map VariantDir to the mgp folder
gps_env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

BINARY_LIB_SOURCES = ['${BUILDPATH}/resident/gen9/src/mgp_resident_api.c',
                      '${BUILDPATH}/me/gen9/cc/src/cc_task_resident.c',
                      '${BUILDPATH}/me/gen9/gpsfft/src/common/src/gpsfft_task_loop.c',
                      '${BUILDPATH}/me/gen9/mc/src/mc_task_resident.c',
                      '${BUILDPATH}/me/gen9/pgi/src/pgi_task_loop.c',
                      '${BUILDPATH}/me/gen9/pp/src/pp_task_loop.c',
                      '${BUILDPATH}/common/src/mgp_nv_efs.c',
                      '${BUILDPATH}/pe/cd/src/cd_task_loop.c',
                      '${BUILDPATH}/pe/nf/src/nf_task_loop.c',
                     ]

#--------------------------------------------------------------------------------
# Ship our code as binary library and add it to the Modem image
#--------------------------------------------------------------------------------

gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])



#################################################################################
#  PE TASKS
#################################################################################
#--------------------------------------------------------------------------------
# APQ targets has different RC init parameters than MPSS targets.   
#--------------------------------------------------------------------------------
if 'USES_GPSAPQ' in gps_env:
    RCINIT_IMG = ['CORE_MODEM', 'CORE_QDSP6_SW', 'CORE_GSS']
    gps_env.AddRCInitTask(           # NV
    RCINIT_IMG,                 # define TMC_RCINIT_REXTASK_NV 
    {
      'sequence_group'             : 'RCINIT_GROUP_3',                  # required
      'thread_name'                : 'nf',                              # required
      'stack_size_bytes'           : '98296',
      'priority_amss_order'        : 'SHARED_BACKGROUND_PRI_ORDER',
      'cpu_affinity'               : 'REX_ANY_SMT_MASK',
    })
else:
    RCINIT_TASK_FN = {
        'thread_name'         : 'nf',
        'thread_entry'        : 'nf_task',
        'stack_size_bytes'    : '65536', # gps_env.subst('$NF_STKSZ'),
        'sequence_group'      : gps_env.subst('$MODEM_UPPERLAYER'),
        'priority_amss_order' : 'NF_PRI_ORDER',
        'cpu_affinity'        : 'REX_ANY_CPU_AFFINITY_MASK',
        'policy_optin'        : ['default', 'ftm', ],
    }
    gps_env.AddRCInitTask (IMAGES, RCINIT_TASK_FN)


#--------------------------------------------------------------------------------
# APQ targets has different RC init parameters than MPSS targets.   
#--------------------------------------------------------------------------------
if 'USES_GPSAPQ' in gps_env:
    RCINIT_IMG = ['CORE_MODEM', 'CORE_QDSP6_SW', 'CORE_GSS']
    gps_env.AddRCInitTask(           # NV
    RCINIT_IMG,                 # define TMC_RCINIT_REXTASK_NV 
    {
      'sequence_group'             : 'RCINIT_GROUP_3',                  # required
      'thread_name'                : 'cd',                              # required
      'stack_size_bytes'           : '24576',
      'priority_amss_order'        : 'SHARED_BACKGROUND_PRI_ORDER',
      'cpu_affinity'               : 'REX_ANY_SMT_MASK',
    })
else:
    RCINIT_TASK_FN = {
        'thread_name'         : 'cd',
        'thread_entry'        : 'cd_task',
        'stack_size_bytes'    : gps_env.subst('$CD_STKSZ'),
        'sequence_group'      : gps_env.subst('$MODEM_UPPERLAYER'),
        'priority_amss_order' : 'CD_PRI_ORDER',
        'cpu_affinity'        : 'REX_ANY_CPU_AFFINITY_MASK',
        'policy_optin'        : ['default', 'ftm', ],
    }
    gps_env.AddRCInitTask (IMAGES, RCINIT_TASK_FN)

#################################################################################
#  ME TASKS
#################################################################################
gps_env.PrintInfo("    GEN9 ME in use!  MGP Resident unable to start Gen9 ME tasks.")