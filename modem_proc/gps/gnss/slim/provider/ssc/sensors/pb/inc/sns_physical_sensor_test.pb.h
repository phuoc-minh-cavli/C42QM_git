/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7 at Fri Jul 14 02:01:38 2017. */

#ifndef PB_SNS_PHYSICAL_SENSOR_TEST_PB_H_INCLUDED
#define PB_SNS_PHYSICAL_SENSOR_TEST_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _sns_physical_sensor_test_msgid {
    SNS_PHYSICAL_SENSOR_TEST_MSGID_SNS_PHYSICAL_SENSOR_TEST_CONFIG = 515,
    SNS_PHYSICAL_SENSOR_TEST_MSGID_SNS_PHYSICAL_SENSOR_TEST_EVENT = 1026
} sns_physical_sensor_test_msgid;
#define _sns_physical_sensor_test_msgid_MIN SNS_PHYSICAL_SENSOR_TEST_MSGID_SNS_PHYSICAL_SENSOR_TEST_CONFIG
#define _sns_physical_sensor_test_msgid_MAX SNS_PHYSICAL_SENSOR_TEST_MSGID_SNS_PHYSICAL_SENSOR_TEST_EVENT
#define _sns_physical_sensor_test_msgid_ARRAYSIZE ((sns_physical_sensor_test_msgid)(SNS_PHYSICAL_SENSOR_TEST_MSGID_SNS_PHYSICAL_SENSOR_TEST_EVENT+1))
#define sns_physical_sensor_test_msgid_SNS_PHYSICAL_SENSOR_TEST_MSGID_SNS_PHYSICAL_SENSOR_TEST_CONFIG SNS_PHYSICAL_SENSOR_TEST_MSGID_SNS_PHYSICAL_SENSOR_TEST_CONFIG
#define sns_physical_sensor_test_msgid_SNS_PHYSICAL_SENSOR_TEST_MSGID_SNS_PHYSICAL_SENSOR_TEST_EVENT SNS_PHYSICAL_SENSOR_TEST_MSGID_SNS_PHYSICAL_SENSOR_TEST_EVENT

typedef enum _sns_physical_sensor_test_type {
    SNS_PHYSICAL_SENSOR_TEST_TYPE_SW = 0,
    SNS_PHYSICAL_SENSOR_TEST_TYPE_HW = 1,
    SNS_PHYSICAL_SENSOR_TEST_TYPE_FACTORY = 2,
    SNS_PHYSICAL_SENSOR_TEST_TYPE_COM = 3
} sns_physical_sensor_test_type;
#define _sns_physical_sensor_test_type_MIN SNS_PHYSICAL_SENSOR_TEST_TYPE_SW
#define _sns_physical_sensor_test_type_MAX SNS_PHYSICAL_SENSOR_TEST_TYPE_COM
#define _sns_physical_sensor_test_type_ARRAYSIZE ((sns_physical_sensor_test_type)(SNS_PHYSICAL_SENSOR_TEST_TYPE_COM+1))
#define sns_physical_sensor_test_type_SNS_PHYSICAL_SENSOR_TEST_TYPE_SW SNS_PHYSICAL_SENSOR_TEST_TYPE_SW
#define sns_physical_sensor_test_type_SNS_PHYSICAL_SENSOR_TEST_TYPE_HW SNS_PHYSICAL_SENSOR_TEST_TYPE_HW
#define sns_physical_sensor_test_type_SNS_PHYSICAL_SENSOR_TEST_TYPE_FACTORY SNS_PHYSICAL_SENSOR_TEST_TYPE_FACTORY
#define sns_physical_sensor_test_type_SNS_PHYSICAL_SENSOR_TEST_TYPE_COM SNS_PHYSICAL_SENSOR_TEST_TYPE_COM

/* Struct definitions */
typedef struct _sns_physical_sensor_test_config {
    sns_physical_sensor_test_type test_type;
/* @@protoc_insertion_point(struct:sns_physical_sensor_test_config) */
} sns_physical_sensor_test_config;

typedef struct _sns_physical_sensor_test_event {
    bool test_passed;
    sns_physical_sensor_test_type test_type;
    pb_callback_t test_data;
/* @@protoc_insertion_point(struct:sns_physical_sensor_test_event) */
} sns_physical_sensor_test_event;

/* Default values for struct fields */
extern const bool sns_physical_sensor_test_event_test_passed_default;
extern const sns_physical_sensor_test_type sns_physical_sensor_test_event_test_type_default;

/* Initializer values for message structs */
#define sns_physical_sensor_test_config_init_default {(sns_physical_sensor_test_type)0}
#define sns_physical_sensor_test_event_init_default {true, SNS_PHYSICAL_SENSOR_TEST_TYPE_COM, {{NULL}, NULL}}
#define sns_physical_sensor_test_config_init_zero {(sns_physical_sensor_test_type)0}
#define sns_physical_sensor_test_event_init_zero {0, (sns_physical_sensor_test_type)0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define sns_physical_sensor_test_config_test_type_tag 1
#define sns_physical_sensor_test_event_test_passed_tag 1
#define sns_physical_sensor_test_event_test_type_tag 2
#define sns_physical_sensor_test_event_test_data_tag 3

/* Struct field encoding specification for nanopb */
extern const pb_field_t sns_physical_sensor_test_config_fields[2];
extern const pb_field_t sns_physical_sensor_test_event_fields[4];

/* Maximum encoded size of messages (where known) */
#define sns_physical_sensor_test_config_size     2
/* sns_physical_sensor_test_event_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SNS_PHYSICAL_SENSOR_TEST_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
