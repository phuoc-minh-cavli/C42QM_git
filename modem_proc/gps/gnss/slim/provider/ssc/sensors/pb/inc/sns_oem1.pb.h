/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7 at Fri Jul 14 02:01:38 2017. */

#ifndef PB_SNS_OEM1_PB_H_INCLUDED
#define PB_SNS_OEM1_PB_H_INCLUDED
#include <pb.h>

#include "sns_std_sensor.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _sns_oem1_msgid {
    SNS_OEM1_MSGID_SNS_STD_SENSOR_CONFIG = 512,
    SNS_OEM1_MSGID_SNS_OEM1_DATA = 1024
} sns_oem1_msgid;
#define _sns_oem1_msgid_MIN SNS_OEM1_MSGID_SNS_STD_SENSOR_CONFIG
#define _sns_oem1_msgid_MAX SNS_OEM1_MSGID_SNS_OEM1_DATA
#define _sns_oem1_msgid_ARRAYSIZE ((sns_oem1_msgid)(SNS_OEM1_MSGID_SNS_OEM1_DATA+1))
#define sns_oem1_msgid_SNS_OEM1_MSGID_SNS_STD_SENSOR_CONFIG SNS_OEM1_MSGID_SNS_STD_SENSOR_CONFIG
#define sns_oem1_msgid_SNS_OEM1_MSGID_SNS_OEM1_DATA SNS_OEM1_MSGID_SNS_OEM1_DATA

/* Struct definitions */
typedef struct _sns_oem1_data {
    pb_size_t oem1_count;
    float oem1[3];
    sns_std_sensor_sample_status accuracy;
/* @@protoc_insertion_point(struct:sns_oem1_data) */
} sns_oem1_data;

/* Default values for struct fields */

/* Initializer values for message structs */
#define sns_oem1_data_init_default               {0, {0, 0, 0}, (sns_std_sensor_sample_status)0}
#define sns_oem1_data_init_zero                  {0, {0, 0, 0}, (sns_std_sensor_sample_status)0}

/* Field tags (for use in manual encoding/decoding) */
#define sns_oem1_data_oem1_tag                   1
#define sns_oem1_data_accuracy_tag               2

/* Struct field encoding specification for nanopb */
extern const pb_field_t sns_oem1_data_fields[3];

/* Maximum encoded size of messages (where known) */
#define sns_oem1_data_size                       17

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SNS_OEM1_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
