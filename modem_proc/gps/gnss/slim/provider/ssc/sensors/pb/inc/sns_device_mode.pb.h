/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7 at Fri Jul 14 02:01:36 2017. */

#ifndef PB_SNS_DEVICE_MODE_PB_H_INCLUDED
#define PB_SNS_DEVICE_MODE_PB_H_INCLUDED
#include <pb.h>

#include "sns_std_sensor.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _sns_device_mode_msgid {
    SNS_DEVICE_MODE_MSGID_SNS_DEVICE_MODE_EVENT = 772
} sns_device_mode_msgid;
#define _sns_device_mode_msgid_MIN SNS_DEVICE_MODE_MSGID_SNS_DEVICE_MODE_EVENT
#define _sns_device_mode_msgid_MAX SNS_DEVICE_MODE_MSGID_SNS_DEVICE_MODE_EVENT
#define _sns_device_mode_msgid_ARRAYSIZE ((sns_device_mode_msgid)(SNS_DEVICE_MODE_MSGID_SNS_DEVICE_MODE_EVENT+1))
#define sns_device_mode_msgid_SNS_DEVICE_MODE_MSGID_SNS_DEVICE_MODE_EVENT SNS_DEVICE_MODE_MSGID_SNS_DEVICE_MODE_EVENT

typedef enum _sns_device_mode {
    SNS_DEVICE_MODE_FLIP_OPEN = 1
} sns_device_mode;
#define _sns_device_mode_MIN SNS_DEVICE_MODE_FLIP_OPEN
#define _sns_device_mode_MAX SNS_DEVICE_MODE_FLIP_OPEN
#define _sns_device_mode_ARRAYSIZE ((sns_device_mode)(SNS_DEVICE_MODE_FLIP_OPEN+1))
#define sns_device_mode_SNS_DEVICE_MODE_FLIP_OPEN SNS_DEVICE_MODE_FLIP_OPEN

typedef enum _sns_device_state {
    SNS_DEVICE_STATE_UNKNOWN = 0,
    SNS_DEVICE_STATE_ACTIVE = 1,
    SNS_DEVICE_STATE_INACTIVE = 2
} sns_device_state;
#define _sns_device_state_MIN SNS_DEVICE_STATE_UNKNOWN
#define _sns_device_state_MAX SNS_DEVICE_STATE_INACTIVE
#define _sns_device_state_ARRAYSIZE ((sns_device_state)(SNS_DEVICE_STATE_INACTIVE+1))
#define sns_device_state_SNS_DEVICE_STATE_UNKNOWN SNS_DEVICE_STATE_UNKNOWN
#define sns_device_state_SNS_DEVICE_STATE_ACTIVE SNS_DEVICE_STATE_ACTIVE
#define sns_device_state_SNS_DEVICE_STATE_INACTIVE SNS_DEVICE_STATE_INACTIVE

/* Struct definitions */
typedef struct _sns_device_mode_event {
    pb_callback_t device_mode;
/* @@protoc_insertion_point(struct:sns_device_mode_event) */
} sns_device_mode_event;

typedef struct _sns_device_mode_event_mode_spec {
    sns_device_mode mode;
    sns_device_state state;
/* @@protoc_insertion_point(struct:sns_device_mode_event_mode_spec) */
} sns_device_mode_event_mode_spec;

/* Default values for struct fields */

/* Initializer values for message structs */
#define sns_device_mode_event_init_default       {{{NULL}, NULL}}
#define sns_device_mode_event_mode_spec_init_default {(sns_device_mode)0, (sns_device_state)0}
#define sns_device_mode_event_init_zero          {{{NULL}, NULL}}
#define sns_device_mode_event_mode_spec_init_zero {(sns_device_mode)0, (sns_device_state)0}

/* Field tags (for use in manual encoding/decoding) */
#define sns_device_mode_event_device_mode_tag    1
#define sns_device_mode_event_mode_spec_mode_tag 1
#define sns_device_mode_event_mode_spec_state_tag 2

/* Struct field encoding specification for nanopb */
extern const pb_field_t sns_device_mode_event_fields[2];
extern const pb_field_t sns_device_mode_event_mode_spec_fields[3];

/* Maximum encoded size of messages (where known) */
/* sns_device_mode_event_size depends on runtime parameters */
#define sns_device_mode_event_mode_spec_size     4

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SNS_DEVICE_MODE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
