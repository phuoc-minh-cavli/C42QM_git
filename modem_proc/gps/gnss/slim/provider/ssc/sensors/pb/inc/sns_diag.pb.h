/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7 at Thu May 25 16:56:03 2017. */

#ifndef PB_SNS_DIAG_PB_H_INCLUDED
#define PB_SNS_DIAG_PB_H_INCLUDED
#include <pb.h>

#include "sns_std.pb.h"

#include "sns_std_sensor.pb.h"

#include "sns_client.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _sns_diag_batch_sample_type {
    SNS_DIAG_BATCH_SAMPLE_TYPE_ONLY = 0,
    SNS_DIAG_BATCH_SAMPLE_TYPE_FIRST = 1,
    SNS_DIAG_BATCH_SAMPLE_TYPE_INTERMEDIATE = 2,
    SNS_DIAG_BATCH_SAMPLE_TYPE_LAST = 3
} sns_diag_batch_sample_type;
#define _sns_diag_batch_sample_type_MIN SNS_DIAG_BATCH_SAMPLE_TYPE_ONLY
#define _sns_diag_batch_sample_type_MAX SNS_DIAG_BATCH_SAMPLE_TYPE_LAST
#define _sns_diag_batch_sample_type_ARRAYSIZE ((sns_diag_batch_sample_type)(SNS_DIAG_BATCH_SAMPLE_TYPE_LAST+1))
#define sns_diag_batch_sample_type_SNS_DIAG_BATCH_SAMPLE_TYPE_ONLY SNS_DIAG_BATCH_SAMPLE_TYPE_ONLY
#define sns_diag_batch_sample_type_SNS_DIAG_BATCH_SAMPLE_TYPE_FIRST SNS_DIAG_BATCH_SAMPLE_TYPE_FIRST
#define sns_diag_batch_sample_type_SNS_DIAG_BATCH_SAMPLE_TYPE_INTERMEDIATE SNS_DIAG_BATCH_SAMPLE_TYPE_INTERMEDIATE
#define sns_diag_batch_sample_type_SNS_DIAG_BATCH_SAMPLE_TYPE_LAST SNS_DIAG_BATCH_SAMPLE_TYPE_LAST

typedef enum _sns_diag_interrupt {
    SNS_DIAG_INTERRUPT_THRESHOLD = 0,
    SNS_DIAG_INTERRUPT_MOTION = 1,
    SNS_DIAG_INTERRUPT_TILT = 2
} sns_diag_interrupt;
#define _sns_diag_interrupt_MIN SNS_DIAG_INTERRUPT_THRESHOLD
#define _sns_diag_interrupt_MAX SNS_DIAG_INTERRUPT_TILT
#define _sns_diag_interrupt_ARRAYSIZE ((sns_diag_interrupt)(SNS_DIAG_INTERRUPT_TILT+1))
#define sns_diag_interrupt_SNS_DIAG_INTERRUPT_THRESHOLD SNS_DIAG_INTERRUPT_THRESHOLD
#define sns_diag_interrupt_SNS_DIAG_INTERRUPT_MOTION SNS_DIAG_INTERRUPT_MOTION
#define sns_diag_interrupt_SNS_DIAG_INTERRUPT_TILT SNS_DIAG_INTERRUPT_TILT

typedef enum _sns_diag_island_state {
    SNS_ISLAND_IN_ISLAND_MODE = 0,
    SNS_ISLAND_NOT_IN_ISLAND_MODE = 1,
    SNS_ISLAND_DISABLED = 2
} sns_diag_island_state;
#define _sns_diag_island_state_MIN SNS_ISLAND_IN_ISLAND_MODE
#define _sns_diag_island_state_MAX SNS_ISLAND_DISABLED
#define _sns_diag_island_state_ARRAYSIZE ((sns_diag_island_state)(SNS_ISLAND_DISABLED+1))
#define sns_diag_island_state_SNS_ISLAND_IN_ISLAND_MODE SNS_ISLAND_IN_ISLAND_MODE
#define sns_diag_island_state_SNS_ISLAND_NOT_IN_ISLAND_MODE SNS_ISLAND_NOT_IN_ISLAND_MODE
#define sns_diag_island_state_SNS_ISLAND_DISABLED SNS_ISLAND_DISABLED

typedef enum _sns_diag_heap_id {
    SNS_DIAG_HEAP_MAIN = 0,
    SNS_DIAG_HEAP_ISLAND = 1,
    SNS_DIAG_HEAP_EVENT_BUFFER = 2
} sns_diag_heap_id;
#define _sns_diag_heap_id_MIN SNS_DIAG_HEAP_MAIN
#define _sns_diag_heap_id_MAX SNS_DIAG_HEAP_EVENT_BUFFER
#define _sns_diag_heap_id_ARRAYSIZE ((sns_diag_heap_id)(SNS_DIAG_HEAP_EVENT_BUFFER+1))
#define sns_diag_heap_id_SNS_DIAG_HEAP_MAIN SNS_DIAG_HEAP_MAIN
#define sns_diag_heap_id_SNS_DIAG_HEAP_ISLAND SNS_DIAG_HEAP_ISLAND
#define sns_diag_heap_id_SNS_DIAG_HEAP_EVENT_BUFFER SNS_DIAG_HEAP_EVENT_BUFFER

/* Struct definitions */
typedef struct _sns_diag_opaque_payload {
    pb_callback_t payload;
/* @@protoc_insertion_point(struct:sns_diag_opaque_payload) */
} sns_diag_opaque_payload;

typedef struct _sns_diag_sensor_state_raw {
    pb_callback_t sample;
/* @@protoc_insertion_point(struct:sns_diag_sensor_state_raw) */
} sns_diag_sensor_state_raw;

typedef struct _sns_diag_batch_sample {
    sns_diag_batch_sample_type sample_type;
    uint64_t timestamp;
    pb_size_t sample_count;
    float sample[3];
    sns_std_sensor_sample_status status;
/* @@protoc_insertion_point(struct:sns_diag_batch_sample) */
} sns_diag_batch_sample;

typedef struct _sns_diag_client_resp_msg {
    sns_std_error error;
/* @@protoc_insertion_point(struct:sns_diag_client_resp_msg) */
} sns_diag_client_resp_msg;

typedef struct _sns_diag_instance_map_log {
    uint64_t src_instance_id;
    pb_callback_t dest_instance_id;
/* @@protoc_insertion_point(struct:sns_diag_instance_map_log) */
} sns_diag_instance_map_log;

typedef struct _sns_diag_island_exit_vote_log {
    uint64_t timestamp;
    bool has_sensor;
    sns_std_suid sensor;
/* @@protoc_insertion_point(struct:sns_diag_island_exit_vote_log) */
} sns_diag_island_exit_vote_log;

typedef struct _sns_diag_island_transition_log {
    uint64_t timestamp;
    sns_diag_island_state island_state;
    bool has_user_defined;
    uint64_t user_defined;
/* @@protoc_insertion_point(struct:sns_diag_island_transition_log) */
} sns_diag_island_transition_log;

typedef struct _sns_diag_mem_utilization_log {
    uint64_t timestamp;
    sns_diag_heap_id heap_id;
    uint32_t total_memory;
    uint32_t used_memory;
/* @@protoc_insertion_point(struct:sns_diag_mem_utilization_log) */
} sns_diag_mem_utilization_log;

typedef struct _sns_diag_sensor_api_log {
    uint32_t message_id;
    uint64_t timestamp;
    pb_size_t which_sensor_api_log_payload;
    union {
        sns_diag_opaque_payload opaque_payload;
        sns_std_request request_payload;
    } sensor_api_log_payload;
/* @@protoc_insertion_point(struct:sns_diag_sensor_api_log) */
} sns_diag_sensor_api_log;

typedef struct _sns_diag_sensor_state_interrupt {
    sns_diag_interrupt interrupt;
    uint64_t timestamp;
/* @@protoc_insertion_point(struct:sns_diag_sensor_state_interrupt) */
} sns_diag_sensor_state_interrupt;

typedef struct _sns_diag_client_api_log {
    uint64_t client_id;
    pb_callback_t src_sensor_type;
    pb_size_t which_client_api_log_payload;
    union {
        sns_client_request_msg request_payload;
        sns_client_event_msg event_payload;
        sns_diag_client_resp_msg resp_payload;
    } client_api_log_payload;
/* @@protoc_insertion_point(struct:sns_diag_client_api_log) */
} sns_diag_client_api_log;

typedef struct _sns_diag_fw_log {
    uint32_t log_id;
    uint64_t timestamp;
    pb_size_t which_fw_log_payload;
    union {
        sns_diag_instance_map_log instance_map_payload;
        sns_diag_island_transition_log island_mode_payload;
        sns_diag_island_exit_vote_log island_exit_vote_payload;
        sns_diag_mem_utilization_log memory_utilization_payload;
    } fw_log_payload;
/* @@protoc_insertion_point(struct:sns_diag_fw_log) */
} sns_diag_fw_log;

typedef struct _sns_diag_sensor_log {
    uint32_t log_id;
    uint64_t timestamp;
    sns_std_suid suid;
    pb_callback_t sensor_type;
    uint64_t instance_id;
    pb_size_t which_sensor_log_payload;
    union {
        sns_diag_opaque_payload opaque_payload;
        sns_diag_sensor_api_log sensor_api_payload;
        sns_diag_client_api_log client_api_payload;
        sns_diag_sensor_state_raw sensor_state_raw_payload;
        sns_diag_sensor_state_interrupt sensor_state_interrupt_payload;
    } sensor_log_payload;
/* @@protoc_insertion_point(struct:sns_diag_sensor_log) */
} sns_diag_sensor_log;

/* Default values for struct fields */
extern const sns_diag_batch_sample_type sns_diag_batch_sample_sample_type_default;
extern const sns_std_sensor_sample_status sns_diag_batch_sample_status_default;

/* Initializer values for message structs */
#define sns_diag_opaque_payload_init_default     {{{NULL}, NULL}}
#define sns_diag_batch_sample_init_default       {SNS_DIAG_BATCH_SAMPLE_TYPE_ONLY, 0, 0, {0, 0, 0}, SNS_STD_SENSOR_SAMPLE_STATUS_UNRELIABLE}
#define sns_diag_sensor_state_interrupt_init_default {(sns_diag_interrupt)0, 0}
#define sns_diag_sensor_state_raw_init_default   {{{NULL}, NULL}}
#define sns_diag_client_resp_msg_init_default    {(sns_std_error)0}
#define sns_diag_client_api_log_init_default     {0, {{NULL}, NULL}, 0, {sns_client_request_msg_init_default}}
#define sns_diag_sensor_api_log_init_default     {0, 0, 0, {sns_diag_opaque_payload_init_default}}
#define sns_diag_sensor_log_init_default         {0, 0, sns_std_suid_init_default, {{NULL}, NULL}, 0, 0, {sns_diag_opaque_payload_init_default}}
#define sns_diag_instance_map_log_init_default   {0, {{NULL}, NULL}}
#define sns_diag_island_transition_log_init_default {0, (sns_diag_island_state)0, false, 0}
#define sns_diag_island_exit_vote_log_init_default {0, false, sns_std_suid_init_default}
#define sns_diag_mem_utilization_log_init_default {0, (sns_diag_heap_id)0, 0, 0}
#define sns_diag_fw_log_init_default             {0, 0, 0, {sns_diag_instance_map_log_init_default}}
#define sns_diag_opaque_payload_init_zero        {{{NULL}, NULL}}
#define sns_diag_batch_sample_init_zero          {(sns_diag_batch_sample_type)0, 0, 0, {0, 0, 0}, (sns_std_sensor_sample_status)0}
#define sns_diag_sensor_state_interrupt_init_zero {(sns_diag_interrupt)0, 0}
#define sns_diag_sensor_state_raw_init_zero      {{{NULL}, NULL}}
#define sns_diag_client_resp_msg_init_zero       {(sns_std_error)0}
#define sns_diag_client_api_log_init_zero        {0, {{NULL}, NULL}, 0, {sns_client_request_msg_init_zero}}
#define sns_diag_sensor_api_log_init_zero        {0, 0, 0, {sns_diag_opaque_payload_init_zero}}
#define sns_diag_sensor_log_init_zero            {0, 0, sns_std_suid_init_zero, {{NULL}, NULL}, 0, 0, {sns_diag_opaque_payload_init_zero}}
#define sns_diag_instance_map_log_init_zero      {0, {{NULL}, NULL}}
#define sns_diag_island_transition_log_init_zero {0, (sns_diag_island_state)0, false, 0}
#define sns_diag_island_exit_vote_log_init_zero  {0, false, sns_std_suid_init_zero}
#define sns_diag_mem_utilization_log_init_zero   {0, (sns_diag_heap_id)0, 0, 0}
#define sns_diag_fw_log_init_zero                {0, 0, 0, {sns_diag_instance_map_log_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define sns_diag_opaque_payload_payload_tag      1
#define sns_diag_sensor_state_raw_sample_tag     1
#define sns_diag_batch_sample_sample_type_tag    1
#define sns_diag_batch_sample_timestamp_tag      2
#define sns_diag_batch_sample_sample_tag         3
#define sns_diag_batch_sample_status_tag         4
#define sns_diag_client_resp_msg_error_tag       1
#define sns_diag_instance_map_log_src_instance_id_tag 1
#define sns_diag_instance_map_log_dest_instance_id_tag 2
#define sns_diag_island_exit_vote_log_timestamp_tag 1
#define sns_diag_island_exit_vote_log_sensor_tag 2
#define sns_diag_island_transition_log_timestamp_tag 1
#define sns_diag_island_transition_log_island_state_tag 2
#define sns_diag_island_transition_log_user_defined_tag 3
#define sns_diag_mem_utilization_log_timestamp_tag 1
#define sns_diag_mem_utilization_log_heap_id_tag 2
#define sns_diag_mem_utilization_log_total_memory_tag 3
#define sns_diag_mem_utilization_log_used_memory_tag 4
#define sns_diag_sensor_api_log_opaque_payload_tag 100
#define sns_diag_sensor_api_log_request_payload_tag 101
#define sns_diag_sensor_api_log_message_id_tag   1
#define sns_diag_sensor_api_log_timestamp_tag    2
#define sns_diag_sensor_state_interrupt_interrupt_tag 1
#define sns_diag_sensor_state_interrupt_timestamp_tag 2
#define sns_diag_client_api_log_request_payload_tag 100
#define sns_diag_client_api_log_event_payload_tag 101
#define sns_diag_client_api_log_resp_payload_tag 102
#define sns_diag_client_api_log_client_id_tag    1
#define sns_diag_client_api_log_src_sensor_type_tag 2
#define sns_diag_fw_log_instance_map_payload_tag 100
#define sns_diag_fw_log_island_mode_payload_tag  101
#define sns_diag_fw_log_island_exit_vote_payload_tag 102
#define sns_diag_fw_log_memory_utilization_payload_tag 103
#define sns_diag_fw_log_log_id_tag               1
#define sns_diag_fw_log_timestamp_tag            2
#define sns_diag_sensor_log_opaque_payload_tag   100
#define sns_diag_sensor_log_sensor_api_payload_tag 101
#define sns_diag_sensor_log_client_api_payload_tag 102
#define sns_diag_sensor_log_sensor_state_raw_payload_tag 103
#define sns_diag_sensor_log_sensor_state_interrupt_payload_tag 104
#define sns_diag_sensor_log_log_id_tag           1
#define sns_diag_sensor_log_timestamp_tag        2
#define sns_diag_sensor_log_suid_tag             3
#define sns_diag_sensor_log_sensor_type_tag      4
#define sns_diag_sensor_log_instance_id_tag      5

/* Struct field encoding specification for nanopb */
extern const pb_field_t sns_diag_opaque_payload_fields[2];
extern const pb_field_t sns_diag_batch_sample_fields[5];
extern const pb_field_t sns_diag_sensor_state_interrupt_fields[3];
extern const pb_field_t sns_diag_sensor_state_raw_fields[2];
extern const pb_field_t sns_diag_client_resp_msg_fields[2];
extern const pb_field_t sns_diag_client_api_log_fields[6];
extern const pb_field_t sns_diag_sensor_api_log_fields[5];
extern const pb_field_t sns_diag_sensor_log_fields[11];
extern const pb_field_t sns_diag_instance_map_log_fields[3];
extern const pb_field_t sns_diag_island_transition_log_fields[4];
extern const pb_field_t sns_diag_island_exit_vote_log_fields[3];
extern const pb_field_t sns_diag_mem_utilization_log_fields[5];
extern const pb_field_t sns_diag_fw_log_fields[7];

/* Maximum encoded size of messages (where known) */
/* sns_diag_opaque_payload_size depends on runtime parameters */
#define sns_diag_batch_sample_size               28
#define sns_diag_sensor_state_interrupt_size     11
/* sns_diag_sensor_state_raw_size depends on runtime parameters */
#define sns_diag_client_resp_msg_size            11
/* sns_diag_client_api_log_size depends on runtime parameters */
/* sns_diag_sensor_api_log_size depends on runtime parameters */
/* sns_diag_sensor_log_size depends on runtime parameters */
/* sns_diag_instance_map_log_size depends on runtime parameters */
#define sns_diag_island_transition_log_size      20
#define sns_diag_island_exit_vote_log_size       (15 + sns_std_suid_size)
#define sns_diag_mem_utilization_log_size        21
/* sns_diag_fw_log_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SNS_DIAG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
