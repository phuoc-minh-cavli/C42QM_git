/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7 at Fri Jul 14 02:01:40 2017. */

#ifndef PB_SNS_TIMER_PB_H_INCLUDED
#define PB_SNS_TIMER_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _sns_timer_sensor_timeout {
    SNS_TIMER_SENSOR_TIMEOUT_MIN_TIMEOUT_NANOSEC = 100000
} sns_timer_sensor_timeout;
#define _sns_timer_sensor_timeout_MIN SNS_TIMER_SENSOR_TIMEOUT_MIN_TIMEOUT_NANOSEC
#define _sns_timer_sensor_timeout_MAX SNS_TIMER_SENSOR_TIMEOUT_MIN_TIMEOUT_NANOSEC
#define _sns_timer_sensor_timeout_ARRAYSIZE ((sns_timer_sensor_timeout)(SNS_TIMER_SENSOR_TIMEOUT_MIN_TIMEOUT_NANOSEC+1))
#define sns_timer_sensor_timeout_SNS_TIMER_SENSOR_TIMEOUT_MIN_TIMEOUT_NANOSEC SNS_TIMER_SENSOR_TIMEOUT_MIN_TIMEOUT_NANOSEC

typedef enum _sns_timer_msgid {
    SNS_TIMER_MSGID_SNS_TIMER_SENSOR_CONFIG = 512,
    SNS_TIMER_MSGID_SNS_TIMER_SENSOR_EVENT = 1025,
    SNS_TIMER_MSGID_SNS_TIMER_SENSOR_REG_EVENT = 1026
} sns_timer_msgid;
#define _sns_timer_msgid_MIN SNS_TIMER_MSGID_SNS_TIMER_SENSOR_CONFIG
#define _sns_timer_msgid_MAX SNS_TIMER_MSGID_SNS_TIMER_SENSOR_REG_EVENT
#define _sns_timer_msgid_ARRAYSIZE ((sns_timer_msgid)(SNS_TIMER_MSGID_SNS_TIMER_SENSOR_REG_EVENT+1))
#define sns_timer_msgid_SNS_TIMER_MSGID_SNS_TIMER_SENSOR_CONFIG SNS_TIMER_MSGID_SNS_TIMER_SENSOR_CONFIG
#define sns_timer_msgid_SNS_TIMER_MSGID_SNS_TIMER_SENSOR_EVENT SNS_TIMER_MSGID_SNS_TIMER_SENSOR_EVENT
#define sns_timer_msgid_SNS_TIMER_MSGID_SNS_TIMER_SENSOR_REG_EVENT SNS_TIMER_MSGID_SNS_TIMER_SENSOR_REG_EVENT

/* Struct definitions */
typedef struct _sns_timer_sensor_config {
    uint64_t start_time;
    uint64_t timeout_period;
    bool is_periodic;
/* @@protoc_insertion_point(struct:sns_timer_sensor_config) */
} sns_timer_sensor_config;

typedef struct _sns_timer_sensor_event {
    uint64_t requested_timeout_time;
    uint64_t timeout_time;
/* @@protoc_insertion_point(struct:sns_timer_sensor_event) */
} sns_timer_sensor_event;

/* Default values for struct fields */

/* Initializer values for message structs */
#define sns_timer_sensor_config_init_default     {0, 0, 0}
#define sns_timer_sensor_event_init_default      {0, 0}
#define sns_timer_sensor_config_init_zero        {0, 0, 0}
#define sns_timer_sensor_event_init_zero         {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define sns_timer_sensor_config_start_time_tag   1
#define sns_timer_sensor_config_timeout_period_tag 2
#define sns_timer_sensor_config_is_periodic_tag  3
#define sns_timer_sensor_event_requested_timeout_time_tag 1
#define sns_timer_sensor_event_timeout_time_tag  2

/* Struct field encoding specification for nanopb */
extern const pb_field_t sns_timer_sensor_config_fields[4];
extern const pb_field_t sns_timer_sensor_event_fields[3];

/* Maximum encoded size of messages (where known) */
#define sns_timer_sensor_config_size             24
#define sns_timer_sensor_event_size              22

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SNS_TIMER_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
