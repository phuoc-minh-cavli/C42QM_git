/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7 at Fri Jul 14 02:01:37 2017. */

#ifndef PB_SNS_HALL_PB_H_INCLUDED
#define PB_SNS_HALL_PB_H_INCLUDED
#include <pb.h>

#include "sns_std_sensor.pb.h"

#include "sns_physical_sensor_test.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _sns_hall_msgid {
    SNS_HALL_MSGID_SNS_HALL_EVENT = 770
} sns_hall_msgid;
#define _sns_hall_msgid_MIN SNS_HALL_MSGID_SNS_HALL_EVENT
#define _sns_hall_msgid_MAX SNS_HALL_MSGID_SNS_HALL_EVENT
#define _sns_hall_msgid_ARRAYSIZE ((sns_hall_msgid)(SNS_HALL_MSGID_SNS_HALL_EVENT+1))
#define sns_hall_msgid_SNS_HALL_MSGID_SNS_HALL_EVENT SNS_HALL_MSGID_SNS_HALL_EVENT

typedef enum _sns_hall_event_type {
    SNS_HALL_EVENT_TYPE_FAR = 0,
    SNS_HALL_EVENT_TYPE_NEAR = 1
} sns_hall_event_type;
#define _sns_hall_event_type_MIN SNS_HALL_EVENT_TYPE_FAR
#define _sns_hall_event_type_MAX SNS_HALL_EVENT_TYPE_NEAR
#define _sns_hall_event_type_ARRAYSIZE ((sns_hall_event_type)(SNS_HALL_EVENT_TYPE_NEAR+1))
#define sns_hall_event_type_SNS_HALL_EVENT_TYPE_FAR SNS_HALL_EVENT_TYPE_FAR
#define sns_hall_event_type_SNS_HALL_EVENT_TYPE_NEAR SNS_HALL_EVENT_TYPE_NEAR

/* Struct definitions */
typedef struct _sns_hall_event {
    sns_hall_event_type hall_event_type;
    sns_std_sensor_sample_status status;
/* @@protoc_insertion_point(struct:sns_hall_event) */
} sns_hall_event;

/* Default values for struct fields */
extern const sns_hall_event_type sns_hall_event_hall_event_type_default;
extern const sns_std_sensor_sample_status sns_hall_event_status_default;

/* Initializer values for message structs */
#define sns_hall_event_init_default              {SNS_HALL_EVENT_TYPE_FAR, SNS_STD_SENSOR_SAMPLE_STATUS_UNRELIABLE}
#define sns_hall_event_init_zero                 {(sns_hall_event_type)0, (sns_std_sensor_sample_status)0}

/* Field tags (for use in manual encoding/decoding) */
#define sns_hall_event_hall_event_type_tag       1
#define sns_hall_event_status_tag                2

/* Struct field encoding specification for nanopb */
extern const pb_field_t sns_hall_event_fields[3];

/* Maximum encoded size of messages (where known) */
#define sns_hall_event_size                      4

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SNS_HALL_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
