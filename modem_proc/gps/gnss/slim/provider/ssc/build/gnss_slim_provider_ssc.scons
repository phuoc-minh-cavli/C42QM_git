# -------------------------------------------------------------------------------- #
#                 G N S S _ S L I M _ S S C . S C O N S
#
# DESCRIPTION
#   SCons file for the GNSS SLIM SSC subsystem.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
# Copyright (c) 2014-2019 Qualcomm Atheros, Inc.
# All Rights Reserved.
# Qualcomm Atheros Confidential and Proprietary.
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# --------------------------------------------------------------------------------- #

# --------------------------------------------------------------------------------- #
#
#                      EDIT HISTORY FOR FILE
#
# This section contains comments describing changes made to this file.
# Notice that changes are listed in reverse chronological order.
#
# $Header: //components/rel/gnss8.mpss/9.5.1.1/gnss/slim/provider/ssc/build/gnss_slim_provider_ssc.scons#1 $
# $DateTime: 2020/07/21 21:23:44 $
# $Author: pwbldsvc $
#
# when          who     what, where, why
# ----------    ---     ------------------------------------------------------------
# 2014/03/12     tf     Initial Version
#
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import and clone the SCons environment
#--------------------------------------------------------------------------------
Import('gps_env')
import json
import subprocess
import os, inspect
import platform
from glob import glob
from os.path import join, basename

#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_CGPS' not in gps_env:
    Return()

#--------------------------------------------------------------------------------
# Check USES_EXPORT_LOC_API flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_EXPORT_LOC_API' not in gps_env:
    if not 'USES_UNIFIED_SP_BUILD' in gps_env:
        gps_env.CleanPack('CLEANPACK_TARGET', gps_env.FindFiles('*', '..'))
    Return()

if 'USES_FEATURE_GNSS_DISABLE_SENSOR_ASSISTANCE' in gps_env:
   if not 'USES_UNIFIED_SP_BUILD' in gps_env:
      gps_env.CleanPack('CLEANPACK_TARGET', gps_env.FindFiles('*', '..'))
   Return()

gps_env.PrintInfo("GNSS SLIM SSC in use")

if 'USES_FEATURE_SSC_API_AVAILABLE' not in gps_env:
    gps_env.PublishProtectedApi('LOC_SLIM_SENSOR_PB',[
                  '${GPS_ROOT}/gnss/slim/provider/ssc/sensors/pb/inc',
                               ])
    gps_env.RequireProtectedApi('LOC_SLIM_SENSOR_PB')
    
    gps_env.PublishProtectedApi('LOC_SLIM_SENSOR_UTILS',[
                  '${GPS_ROOT}/gnss/slim/provider/ssc/sensors/utils/inc',
                               ])
    gps_env.RequireProtectedApi('LOC_SLIM_SENSOR_UTILS')
    gps_env.PrintInfo("GNSS Copy of SSC Interface")
else:
    gps_env.PrintInfo("Proper SSC Interface In Use")

if 'USES_FEATURE_LOCTECH_SLIM_LEGACY_QMI_SNS' in gps_env:
  gps_env.PublishProtectedApi('LOC_SLIM_QMISNS_GLUE',[
              '${GPS_ROOT}/gnss/slim/provider/ssc/qmisns/legacy/inc',
                           ])
else:
  gps_env.PublishProtectedApi('LOC_SLIM_QMISNS_GLUE',[
              '${GPS_ROOT}/gnss/slim/provider/ssc/qmisns/pb/inc',
                           ])

gps_env.RequireProtectedApi('LOC_SLIM_QMISNS_GLUE')


#--------------------------------------------------------------------------------
# Setup source PATH
#--------------------------------------------------------------------------------
SRCPATH = '../src'
gps_env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#--------------------------------------------------------------------------------
# Name of the subsystem to which this unit belongs
#--------------------------------------------------------------------------------
LIB_TARGET = '${BUILDPATH}/' + 'gnss_slim_provider_ssc'

#--------------------------------------------------------------------------------
# Images that this VU is added
#--------------------------------------------------------------------------------
IMAGES = ['MODEM_MODEM']

#--------------------------------------------------------------------------------
# Generate the library and add to an image
#--------------------------------------------------------------------------------
BINARY_LIB_SOURCES = gps_env.GenerateCompileList(SRCPATH, '*.c')

#--------------------------------------------------------------------------------
# Ship our code as binary library and add it to the Modem image
#--------------------------------------------------------------------------------
gps_env.AddGPSFullBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_SOURCES)

#-------------------------------------------------------------------------------
# Scan subdirectories to find more /build folders
#-------------------------------------------------------------------------------
gps_env.LoadSoftwareUnits()