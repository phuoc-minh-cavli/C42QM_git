#===============================================================================
#
# RFA OFF-TARGET STUBS 
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2012 - 2019 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/rfdevice_interface.mpss/1.40/stubs/build/rfdevice_offtarget_stubs.scons#1 $
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 03/05/19   sk      RF PAGE ONLY changes for NB/CATM
# 08/26/15   aks     SCONS update to fix compiler error on AT 1.0 OFT builds
# 07/16/15   avi     Initial version
#===============================================================================

from glob import glob
from os.path import join, basename, relpath, dirname, normpath

#----------------------------------------------------------------------------#
# Setup SCons environment
# (automatically duplicates env)
#----------------------------------------------------------------------------#
Import('env')

UNIT = env.GetBuildPath(Dir('..'))
TESTPATH = relpath(UNIT, normpath(env.subst('${BUILD_ROOT}'))).replace('\\','/')

# QTF requries COMPONENT_PATH to be defined with the directory to the tests
env.Append(CPPDEFINES = 'COMPONENT_PATH=\\"'+TESTPATH+'/\\"')

# The base name of the libraries that should be created
LIBNAME = 'rfa_oft_stubs'

# Public source files (src directories) relative to the unit
PUBLIC_SUBUNITS =  [
                     "src"
               ]

#----------------------------------------------------------------------------#
# Configure the output directory
#----------------------------------------------------------------------------#
for subunit in PUBLIC_SUBUNITS:
  env.VariantDir(join('${BUILDPATH}', subunit), join(UNIT, subunit), duplicate=0)

if 'MODEM_PAGEONLY' in env['BUILD_TAGS']:
  Return( )
    
#----------------------------------------------------------------------------#
# Import the AU level APIs that are needed
#----------------------------------------------------------------------------#
env.RequirePublicApi('QTF', area='MOB') # QTF comes from MOB area in no-modem-dir
env.RequirePublicApi('DATAMODEM', area='DATAMODEM')

env.RequirePublicApi([
  'SERVICES',
  'DEBUGTOOLS',
  'SYSTEMDRIVERS',
  'DAL',
  'MPROC',
  'BUSES',
  'POWER',
  'STORAGE',
  'SECUREMSM',
  'KERNEL',
   ], area='CORE')
   
env.RequirePublicApi([
  'FW_TDSCDMA',
   ], area='FW_TDSCDMA')
   
env.RequirePublicApi([
  'LTE',
   ], area='LTE')   

env.RequirePublicApi([
  'MMODE',
  'MCS',
  'HDR',
  'ONEX',
  'RFA',
  'WCDMA',
  'UIM',
  'UTILS',
  'GPS',
  'GERAN',
  'NAS',
  'TDSCDMA'
   ], area='MODEM')

env.RequireProtectedApi([
     'RFA_PMIC_INC',
     'ONEX',
    ])
env.RequirePublicApi([
        'DAL',
        ],
        area='CORE')

env.RequirePublicApi(['RFMODEM','FBRX','HAL','LM_INC','RFMODEM_NLIC'], area=env.get('RF_GLOBALS')['RFMODEM_AREA'])

# Violations required to compile
env.PublishPrivateApi('VIOLATIONS', [
  '${INC_ROOT}/rfa/rf/common/rf/mc/inc',
  '${INC_ROOT}/rfa/rf/mdsp/qdsp6_common/inc',
  '${INC_ROOT}/rfa/rf/common/ftm/inc',
  '${INC_ROOT}/rfa/rf/common/rf/core/src',
  '${INC_ROOT}/rfa/rf/gsm/rf/nv/inc',
  '${INC_ROOT}/rfa/offtarget/stubs/qcscons/inc',
  '${INC_ROOT}/rftech_tdscdma/rf/nv/inc',
  '${INC_ROOT}/multimedia/avs/api/mvs', 
  '${INC_ROOT}/core/systemdrivers/clk/inc'
])
  
env.PublishPrivateApi('VIOLATIONS', [
  '${INC_ROOT}/modem/1x/variation/inc',
  '${INC_ROOT}/wcdma/diag/inc',
  '${INC_ROOT}/wcdma/l2/inc',
  '${INC_ROOT}/wcdma/common/inc',
  '${INC_ROOT}/hdr/drivers/api',
  '${INC_ROOT}/core/kernel/rex_core/posix/common/src',
  '${INC_ROOT}/core/kernel/rex_core/posix/os/qurt',
  '${INC_ROOT}/fw/fw_tdscdma/api'
])
if env.get('CHIPSET') in ('mdm9x35'):
   env.PublishPrivateApi('VIOLATIONS', [
    '${INC_ROOT}/core/kernel/rex_core/posix/common/src',
    '${INC_ROOT}/core/kernel/rex_core/posix/os/qurt',
  ])


#----------------------------------------------------------------------------#
# Import the Modem SU level APIs that are needed
#----------------------------------------------------------------------------#
env.RequireRestrictedApi([
  'MCS_OFFTARGET',
  'RFA',
  'MMODE',
  'NAS',
  'HDR',
  'FW',
  'MCS',
  'GERAN',
  'UIM',
  'WCDMA',
  'QTF',
  'UTILS',
  'GPS',
  'ONEX',
  'DATAMODEM',
  'TDSCDMA',
  'RCEVT'
   ])

env.RequireProtectedApi(['RFA_OFFTARGET', 'RF_COMMON_INC'])

#----------------------------------------------------------------------------#
# Create a list of all the C and C++ source files in the src directory
#----------------------------------------------------------------------------#
PUBLIC_SOURCE_FILES = []
for subunit in PUBLIC_SUBUNITS:
  PUBLIC_SOURCE_FILES.extend(glob(join(env.subst(UNIT), subunit, '*.c')))
  PUBLIC_SOURCE_FILES.extend(glob(join(env.subst(UNIT), subunit, '*.cpp')))
print("DEBUG: Inside scons of rfa/offtarget/stubs")
PUBLIC_BUILD_FILES = [file.replace(UNIT,'${BUILDPATH}') for file in PUBLIC_SOURCE_FILES]

#----------------------------------------------------------------------------#
# Create a library out of the public source files
#----------------------------------------------------------------------------#
if PUBLIC_BUILD_FILES:
  env.AddLibrary(['MOB_RFDEVICE'], join('${BUILDPATH}', LIBNAME), PUBLIC_BUILD_FILES)

# Load test units
env.LoadSoftwareUnits()
