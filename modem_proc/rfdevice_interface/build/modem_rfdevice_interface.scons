#====include path optimized=====================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2012 - 2019 Qualcomm Technologies, Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies, Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies, Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //source/qcom/qct/modem/rfdevice/interface/main/latest/build/modem_rfdevice_interface.scons#6 $
# $DateTime: 2012/07/25 20:38:08 $
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 07/02/19   up      Compilation error fix for LTE only build
# 03/05/19   sk      RF PAGE ONLY changes for NB/CATM
# 10/25/18   up      Mainlined sdr105 interface scons changes
# 10/20/14   chenh   Enabled compiler warnings to errors
# 10/16/14   dej     Clean-up SCons and add support for TABASCO
# 10/06/13   ra      Support RFLM CCS 
# 06/26/13   bmg     Added RF CDMA public API, force Dinkumware no-exceptions
# 06/19/13   bmg     Recurse to unit test if present
# 05/30/13   dps     Added RFA_OFFTARGET and RF_DEVICE_INC from RFA, and
#                    RFDEVICE_WTR1625 for communication class
# 02/04/13   dyc     Updated qualifiers for pack.
# 02/04/13   vrb     Export Target RFC files from modem specific target dir
# 01/30/13   sar     Added Pack script changes.
# 01/15/13   sar     Updated for RFTECH_GSM component.
# 09/06/12   shb     Enabled compilation on all 4.x PLs
# 08/24/12   shb     Skip compilation for 4.0.1
# 08/23/12   shb     Fixed or condition
# 08/23/12   shb     Skip compilation for 4.0.2
# 08/17/12   shb     Added paths for DIME compilation
# 08/16/12   shb     Added path for rfcommon_nv.h - TDSCDMA needs it
# 08/15/12   shb     Added path for rfnv_tdscdma.h
# 08/07/12   shb     Created
#===============================================================================

Import('env')

env = env.Clone()

if 'MODEM_PAGEONLY' in env['BUILD_TAGS']:
    env.Append(CPPDEFINES = 'FEATURE_RF_LTE_PAGE_ONLY')
    if('USES_GSM' in env):
        del env['USES_GSM']
    build_tags = ['MODEM_MODEM', 'MOB_RFA', 'MOB_RFDEVICE']
    for tag in build_tags :
      env[tag] = True

#usage:  ENV_UPDATE_RFA=CHIPSET,=mdm9x15,USES_NO_DEBUG,delete,USES_HI_SPEED,add
if ARGUMENTS.get('ENV_UPDATE_RFA'):
   
   env_update_string    = ARGUMENTS.get('ENV_UPDATE_RFA')
   env_update_list      = env_update_string.split(',')
   item_total           = len(env_update_list)
   list_index           = 0
   
   #note if list is not even number of items, last odd item is ignored
   while list_index < item_total-1:
                 
      item            = env_update_list[list_index]  
      value           = env_update_list[list_index+1]
      list_index      += 2
                                              
      if(value == 'add'):
         env[str(item)] = 'yes'
         print "adding",item,"to env"                                          
                
      elif(value == 'delete'):
         del env[str(item)]
         print "deleting",item,"from env"
      
      else:
         if(value[0] != '='):
            print "missing leading = in",value
            print "not updating ",item
                 
         else:
            value2 = value[1:len(value)]
            env[str(item)] = value2
            print "now setting",item,value

if 'USES_INTERNAL_BUILD' in env:
	env.Append(CPPDEFINES = ['FEATURE_RFA_DEVICE_DEBUG'])

if env['PRODUCT_LINE'].startswith("MPSS.AT"):
   env.Append(CPPDEFINES = 'FEATURE_RFA_ATLAS_MODEM')   	

if env.PathExists('${INC_ROOT}/rfdevice_interface'):
    env.Replace(RFDEVICE_INTERFACE_ROOT = '${INC_ROOT}/rfdevice_interface')
else:    
    env.Replace(RFDEVICE_INTERFACE_ROOT = '${INC_ROOT}/modem/rfdevice_interface')


if env.PathExists('${BUILD_ROOT}/rfa'):
    env.Replace(RFA_ROOT = '${INC_ROOT}/rfa')
else:    
    env.Replace(RFA_ROOT = '${INC_ROOT}/modem/rfa')


if env.PathExists('${BUILD_ROOT}/geran'):
    env.Replace(GERAN_ROOT = '${INC_ROOT}/geran')
else:    
    env.Replace(GERAN_ROOT = '${INC_ROOT}/modem/geran')

# Enable warnings -> errors for internal builds
if 'USES_INTERNAL_BUILD' in env:
   env = env.Clone(HEXAGONCC_WARN = "${HEXAGONCC_WARN} -Werror", 
                   HEXAGONCXX_WARN = "${HEXAGONCCXX_WARN} -Werror")

env.RequirePublicApi([
        'KERNEL',
        'DAL',
        'SYSTEMDRIVERS',
        ],
        area='CORE')

env.RequirePublicApi([
        'COMMON',
        'RFA_OFFTARGET',
        'RF_DEVICE_INC',
        ],
        area='RFA')

env.RequirePublicApi([
        'RF',
        ],
        area='FW')

env.RequirePublicApi([
        'FW_CCS',
        ],
        area='FW_CCS')

env.RequirePublicApi([
        'FW_COMMON',
        ],
        area='FW_COMMON')

env.RequirePublicApi([
        'INTERFACE_RFDEVICE_INTERFACE',
        ],
        area='RFDEVICE')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='MMCP')

env.RequirePublicApi([
        'CDMA',
        ],
        area='RFA')

env.RequirePublicApi([
        'MCS',
        ],
        area='MCS')

env.RequirePublicApi([
        'SERVICES',
        ],
        area='CORE')

env.RequirePublicApi([
        'MMCP',
        ],
        area='MMCP')

env.RequirePublicApi([
        'GERAN',
        'WCDMA',
        ],
        area='FW')

env.RequirePublicApi([
        'FW_GERAN',
        ],
        area='FW_GERAN')
        
env.RequirePublicApi([
        'FW_WCDMA',
        ],
        area='FW_WCDMA')

env.RequirePublicApi([
        'MEAS',
        ],
        area='RFA')

env.RequirePublicApi([
        'DEBUGTOOLS',
        ],
        area='CORE')

env.RequirePublicApi([
        'GERAN',
        ],
        area='GERAN')

env.RequirePublicApi([
        'GSM',
        'WCDMA',
        ],
        area='RFA')

env.RequirePublicApi([
        'MPROC',
        'POWER',
        ],
        area='CORE')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='ONEX')

env.RequirePublicApi([
        'GNSS',
        ],
        area='RFA')

env.RequirePublicApi([
        'MEMORY',
        ],
        area='CORE')

env.RequirePublicApi([
        'LTE',
        ],
        area='FW')

env.RequirePublicApi([
        'FW_LTE',
        ],
        area='FW_LTE')

env.RequirePublicApi([
        'LM',
        'LTE',
        'TDSCDMA',
        ],
        area='RFA')

env.RequirePublicApi([
        'RFNV',
        ],
        area='RFNV')
        
env.RequirePublicApi([
        'RFTECH_LTE',
        ],
        area='RFTECH_LTE')

env.RequirePublicApi([
        'RFTECH_GSM',
        ],
        area='RFTECH_GSM')

env.RequirePublicApi([
        'RFTECH_WCDMA',
        ],
        area='RFTECH_WCDMA')

env.RequirePublicApi([
        'RFTECH_TDSCDMA',
        ],
        area='RFTECH_TDSCDMA')

env.RequirePublicApi([
        'RFTECH_CDMA',
        ],
        area='RFTECH_CDMA')

env.RequirePublicApi([
        'RFDEVICE_WTR1625',
        ],
        area='RFDEVICE_WTR1625')



env.RequirePublicApi(['RFLM'],area='RFLM')
env.RequirePublicApi(['RFMODEM'],area='RFMODEM')

env.RequireRestrictedApi(['VIOLATIONS'])




LIB_NAME        = 'rf_device_interface'
IMAGE_SOURCES   = ['MODEM_MODEM','MOB_RFA','MOB_RFDEVICE']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'

from glob import glob


# Method to abort processing of this file, if not required for current air interface mode, etc
#if ( 'USES_NIKEL_4_0_0' in env or 'USES_NIKEL_4_0_2' in env or 'USES_NIKEL_4_0_1' in env ):
#   Return( )

#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

env.Append(CPPDEFINES = ['MSG_BT_SSID_DFLT=MSG_SSID_RF'])

# Dinkumware "No Exceptions" only applies in Q6 builds
if 'HEXAGON_TOOLS' in env:
  env.Append(CPPDEFINES = ['_NO_EX'])

env.RequirePublicApi(['CCS'],area=env.get('RF_GLOBALS')['RFMODEM_AREA'])

env.PublishProtectedApi( 'RFDEVICE_INTERFACE_VIOLATIONS', [
#rfa.h
  '${RFA_ROOT}/rf/common/rf/rfc/inc',
#rfa_variation.h
    '${RFA_ROOT}/variation/inc',
#rfa_local_defines.h
    '${RFA_ROOT}/cust/inc',
# rfcommon_msg.h
# rfcommon_locks.h
    '${RFA_ROOT}/rf/common/rf/core/inc/',
#rf_buffer_intf.h
    '${RFA_ROOT}/rf/hal/common/inc',
#rfc_card_gsm.h
    '${RFA_ROOT}/rf/gsm/rf/rfc/inc',
#rfd_grfc.h
    '${RFA_ROOT}/rf/rfd/common/inc',
#rfd_grfc.h
    '${RFA_ROOT}/rf/hal/bus/rfd/common/inc',
#rfd_grfc_modem.h
    '${RFA_ROOT}/rf/rfd/nikel/inc',
#rfd_grfc_modem.h
    '${RFA_ROOT}/rf/hal/bus/rfd/nikel/inc',
#rfc_common.h
    '${RFA_ROOT}/rfc/common/inc',
#rfnv_tdscdma.h
    '${RFA_ROOT}/rf/tdscdma/rf/nv/inc',
#rfnv_tdscdma.h
    '${INC_ROOT}/rftech_tdscdma/api',
#rfcommon_nv.h
    '${RFA_ROOT}/rf/common/rf/nv/inc',
###### FOR DIME
#geran_variation.h, geran_local_defines.h
    '${GERAN_ROOT}/variation/inc',
    '${GERAN_ROOT}/cust/inc',
])
  

#rfc_bsp.h
# This will refer to 8974 folder till RFC support for MDM9x25 is provided.
# Dime plus modems will point to msm8974 rfc until changes are required
if env.get('CHIPSET') in ('msm8974', 'mdm9x25'):
  env.PublishProtectedApi( 'RFDEVICE_INTERFACE_VIOLATIONS', [
    '${RFA_ROOT}/rfc/dime/target/${CHIPSET}/inc',
    ])
elif env.get('CHIPSET') in ('msm8962', 'msm8926', 'msm8916'):
  env.PublishProtectedApi( 'RFDEVICE_INTERFACE_VIOLATIONS', [
    '${RFA_ROOT}/rfc/dime/target/msm8974/inc',
    ])
elif env.get('CHIPSET') in ('msm8x26', 'msm8x10'):
  env.PublishProtectedApi( 'RFDEVICE_INTERFACE_VIOLATIONS', [
    '${RFA_ROOT}/rfc/triton/target/${CHIPSET}/inc',
    ])
else:
  env.PublishProtectedApi( 'RFDEVICE_INTERFACE_VIOLATIONS', [
    '${RFA_ROOT}/rfc/target/${CHIPSET}/inc',
    ])


env.RequirePublicApi([
#    'APTTESTS',
#    'BOOT',
    'BUSES', 
    'DAL',
    'DEBUGTOOLS',
#    'HAL',
#    'HWENGINES',
#    'IODEVICES',
    'KERNEL',
    'MPROC', 
    'POWER', 
#    'SECUREMSM', 
    'SERVICES',
#    'STORAGE', 
    'SYSTEMDRIVERS', 
#    'HWIO'
#    'WIREDCONNECTIVITY',
    ],
    area='CORE')

env.RequirePublicApi([
    'ONEX',       
#    'DATA',       
#    'DATACOMMON', 
#    'DATAMODEM',  
#    'GERAN',      
#    'GPS',        
#    'HDR', 
#    'LTE',       
    'MCS',        
    'MMODE',      
#    'NAS',        
#    'PBM',        
    'RFA',        
#    'UIM',        
#    'UTILS',      
#    'WCDMA',      
#    'WMS',
    ],
    area='MODEM')

env.RequirePublicApi([
#    'APR',
#    'AUDIO',
#    'CVD',
#    'MVS',
#    'MMUTILS',
    ],
    area='MULTIMEDIA')
    
env.RequireRestrictedApi([ 
    'RFDEVICE_INTERFACE',
#    'ONEX',
#    'DATA', 
#    'MODEM_DATA', 
#    'MODEM_DATACOMMON', 
#    'DATACOMMON',
    'FW', 
    'GERAN',
#    'GPS', 
#    'HDR', 
#    'LTE', 
    'MCS', 
#    'XSD', 
    'MMODE',
    'NAS', 
#    'PBM', 
    'RFA',
#    'UIM', 
#    'UTILS', 
#    'WCDMA', 
#    'WMS', 
    ])


env.RequireProtectedApi([
#    'LM_COMMON_INC',
#    'LM_NIKEL_INC',
    'RFC_COMMON_INC',
#    'RFC_RF_CARD_INC',
    'RFC_TARGET_INC',
    'RF_CDMA_INC',
    'RF_COMMON_INC',
    'RF_DEVICE_INC',
#    'RF_GNSS_INC',
    'RF_GSM_INC',
    'RF_HAL_INC',
#    'RF_LTE_INC',
#    'RF_MDSP_INC',
#    'RF_MEAS_INC',
    'RF_RFD_INC',
    'RF_RFNV_INC',
    'RF_TASK_INC',
#    'RF_WCDMA_INC',
    'RFDEVICE_INTERFACE_VIOLATIONS',
    ])

env.RequireProtectedApi([
#    'LM_COMMON_SRC',
#    'RFC_COMMON_SRC',
#    'RFC_RF_CARD_SRC',
#    'RFC_TARGET_SRC',
#    'RF_CDMA_SRC',
    'RF_COMMON_SRC',
#    'RF_GNSS_SRC',
    'RF_GSM_SRC',
#    'RF_HAL_SRC',
#    'RF_LTE_SRC',
#    'RF_MEAS_SRC',
#    'RF_RFD_SRC',
#    'RF_TASK_SRC',
#    'RF_WCDMA_SRC',
    ])

env.RequireProtectedApi([
#    'LM_NIKEL_PROTECTED',
#    'RF_CDMA_PROTECTED',
#    'RF_COMMON_PROTECTED',
#    'RF_DEVICE_PROTECTED',
#    'RF_GNSS_PROTECTED',
#    'RF_GSM_PROTECTED',
#    'RF_HAL_PROTECTED',
#    'RF_LTE_PROTECTED',
#    'RF_MDSP_PROTECTED',
#    'RF_MEAS_PROTECTED',
#    'RF_RFD_PROTECTED',
#    'RF_WCDMA_PROTECTED',
    ])





#uncomment this section if src directory is added

#LIB_SOURCES = [ ]  #empy list

#SOURCE_FILES = [ ] 

#find all .c
#SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))

#find all .cpp files 
#SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))

#find all .s files
#SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.s'))


#for filename in SOURCE_FILES:
#        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#if LIB_SOURCES:

#        env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME,[
#        LIB_SOURCES,
#        ])





env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that AddBinaryLibrary can be launched
LIB_SOURCES = []  #empy list

if 'USES_NO_STRIP_NO_ODM' in env:

        SOURCE_FILES = [ ] 

        #find all .c
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.c'))

        #find all .cpp files 
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))

        #find all .s files
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.s'))


        for filename in SOURCE_FILES:
                LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that the pre-built library will be added to the list file
env.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_protected',[
    LIB_SOURCES,
    ], pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])

env.LoadSoftwareUnits()

