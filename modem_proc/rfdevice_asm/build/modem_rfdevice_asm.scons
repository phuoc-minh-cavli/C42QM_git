#====include path optimized=====================================================
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2012 - 2019 Qualcomm Technologies, Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies, Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies, Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: $
# $DateTime: $ 
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 07/04/19   dh      Clean up the code to help compiling out Geran from NA flavor
# 03/05/19   sk      RF PAGE ONLY changes for NB/CATM
# 10/20/14   chenh   Enabled compiler warings to errors
# 10/16/14   dej     Clean-up SCons and add support for TABASCO
# 08/04/14   sn      EFS ASM support
# 10/06/13   ra      Support RFLM CCS 
# 05/28/13   sar     Scons cleanup changes.
# 05/21/13   dyc     Update for rebuild for HY11 protected lib
# 02/21/13   aca     Scons update for RFC dep
# 02/07/13   dyc     Define TP Card feature for DIME_1.1
# 02/04/13   dyc     Updated qualifiers for pack.
# 01/31/13   sr      Fixed Triton/DSDA compilation error
# 01/31/13   vrb     Compile in protected dir for MPSS.DI.1.1 only
# 01/30/13   sar     Added Pack script changes.
# 07/09/12   tks     Created for ASM device
#===============================================================================

Import('env')

env = env.Clone()

if 'MODEM_PAGEONLY' in env['BUILD_TAGS']:
	if 'USES_GSM' in env:
		del env['USES_GSM']
	build_tags = ['MODEM_MODEM', 'MOB_RFA', 'MOB_RFDEVICE']
	for tag in build_tags :
		env[tag] = True

import os
#-------------------------------------------------------------------------------
# Enable warnings -> errors
if 'USES_INTERNAL_BUILD' in env:
   env = env.Clone(HEXAGONCC_WARN = "${HEXAGONCC_WARN} -Werror", 
                   HEXAGONCXX_WARN = "${HEXAGONCCXX_WARN} -Werror")	
				   
if ('USES_FEATURE_RFA_TP_CARDS' in env or 'USES_DIME_1_1' in env):
        env.Append(CPPDEFINES = ['FEATURE_RF_HAS_TP_CARDS'])

#usage:  ENV_UPDATE_RFA=CHIPSET,=mdm9x15,USES_NO_DEBUG,delete,USES_HI_SPEED,add
if ARGUMENTS.get('ENV_UPDATE_RFA'):
   
   env_update_string    = ARGUMENTS.get('ENV_UPDATE_RFA')
   env_update_list      = env_update_string.split(',')
   item_total           = len(env_update_list)
   list_index           = 0
   
   #note if list is not even number of items, last odd item is ignored
   while list_index < item_total-1:
                 
      item            = env_update_list[list_index]  
      value           = env_update_list[list_index+1]
      list_index      += 2
                                              
      if(value == 'add'):
         env[str(item)] = 'yes'
         print "adding",item,"to env"                                          
                
      elif(value == 'delete'):
         del env[str(item)]
         print "deleting",item,"from env"
      
      else:
         if(value[0] != '='):
            print "missing leading = in",value
            print "not updating ",item
                 
         else:
            value2 = value[1:len(value)]
            env[str(item)] = value2
            print "now setting",item,value



LIB_NAME        = 'modem_rfdevice_asm'
IMAGE_SOURCES   = ['MODEM_MODEM','MOB_RFA']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'


from glob import glob

env = env.Clone()

# Method to abort processing of this file, if not required for current air interface mode, etc
#if ( (USES_TEST_FLAG1 in env and USES_TEST_FLAG2 not in env) or USES_TEST_FLAG3 not in env)):
#   Return( )

#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

env.Append(CPPDEFINES = ['MSG_BT_SSID_DFLT=MSG_SSID_RF',]) 

#The order of APIs in the rfa_public_api_list determines the order the paths are listed on the build command line.
#To optimize build times the API list is sorted in descending order of use.

rfa_public_api_list =[
    ('CORE', 'SYSTEMDRIVERS'),
    ('CORE', 'KERNEL'),
    ('CORE', 'DAL'),
    ('CORE', 'DEBUGTOOLS'),
    ('CORE', 'MPROC'),
    ('CORE', 'MEMORY'),
    ('CORE', 'SERVICES'),
    ('FW', 'RF'),
    ('FW', 'WCDMA'),
    ('FW', 'GERAN'),
    ('FW_CCS', 'FW_CCS'),
    ('FW_COMMON', 'FW_COMMON'),
    ('FW_WCDMA', 'FW_WCDMA'),
    ('FW_GERAN', 'FW_GERAN'),
    ('MCS', 'MCS'),
    ('MMCP', 'MMCP'),
    ('GERAN', 'GERAN'),
    ('RFA', 'COMMON'),
    ('RFA', 'CDMA'),
    ('RFA', 'LM'),
    ('RFDEVICE_INTERFACE', 'RFDEVICE_INTERFACE'),
    ('RFDEVICE_ASM', 'RFDEVICE_ASM'),
    ('UTILS', 'COMMON'),
    (env.get('RF_GLOBALS')['RFMODEM_AREA'], 'CCS'),] 

for api_area,api_name in rfa_public_api_list:
    env.RequirePublicApi([api_name], area=api_area)

env.RequirePublicApi('QTF', area='MOB') # QTF comes from MOB area in no-modem-dir
	
env.RequirePublicApi([
        'SERVICES',
		'KERNEL',
		'DAL',
		'SYSTEMDRIVERS',
		'DEBUGTOOLS',
		'MPROC',
		'STORAGE',
        ],
        area='CORE')
		
env.RequirePublicApi([
    'MMODE',
    ])

env.RequirePublicApi(['RFLM'],area='RFLM')

env.RequireRestrictedApi([
     'RFDEVICE_INTERFACE',
    'FW', 
    'GERAN',
    'MCS', 
    'MMODE',
    'RFA',
    'RFDEVICE_ASM', 
    ])

env.RequireRestrictedApi (['RFDEVICE_ASM_VIOLATIONS'])

if 'USES_RFA_DIME_FED' in env:
        env.Append(CPPDEFINES = ['FEATURE_D3925_FED'])

# D3925 sepcific and needs to be cleaned up
if 'USES_RFA_D3925' in env:
        env.Append(CPPDEFINES = ['FEATURE_RFA_D3925'])


LIB_SOURCES = [ ]  #empy list

SOURCE_FILES = [ ] 

#find all .c
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))

#find all .cpp files 
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))

#find all .s files
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.s'))


for filename in SOURCE_FILES:
        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


if LIB_SOURCES:

        env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME,[
        LIB_SOURCES,
        ])


env2 = env.Clone()

#env2.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that AddBinaryLibrary can be launched
LIB_SOURCES = []  #empy list

#force HY11 protected library to be rebuilt
if 'USES_FEATURE_RF_PACKBUILD_GENERATE_PROTECTED_LIBS' in env2:
	env2.Replace(USES_NO_STRIP_NO_ODM = 'yes')
	
if 'USES_NO_STRIP_NO_ODM' in env2:

        SOURCE_FILES = [ ] 

        #find all .c
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.c'))

        #find all .cpp files 
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))

        #find all .s files
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.s'))


        for filename in SOURCE_FILES:
                LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that the pre-built library will be added to the list file
env2.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_protected',[
    LIB_SOURCES,
    ], pack_exception=['USES_FEATURE_RF_PACKBUILD_GENERATE_PROTECTED_LIBS'])


#----------------------------------------------------------------------------#
# Export inc and protected directories within rfdevice_pa
#----------------------------------------------------------------------------#
env.PublishProtectedApi ('RFDEVICE_ASM_INC',[
     '${RFDEVICE_ASM_ROOT}/inc',
     '${RFDEVICE_ASM_ROOT}/protected',
     ])


env.RequireProtectedApi (['RFDEVICE_ASM_INC'])

env.LoadSoftwareUnits( )
