#===============================================================================
#
# STARTUP Scons
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2019 Qualcomm Technologies Incorporated.
# All Rights Reserved.
# Qualcomm Confidential and Proprietary

# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.

# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/mcs.mpss/5.1/startup/build/startup.scons#4 $
#
#===============================================================================
from glob import glob
from os.path import join, basename

Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = "../src"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------
STARTUP_SRC = ['${BUILDPATH}/' + basename(fname)
                 for fname in glob(join(env.subst(SRCPATH), '*.c'))]

# Compile the startup source and convert to a library
env.AddBinaryLibrary(['MODEM_MODEM', 'MOB_MCS_STARTUP', 'MODEM_PAGEONLY','MODEM_SENSORONLY'],
                     '${BUILDPATH}/startup',
                     STARTUP_SRC,
                     pack_exception=['USES_CUSTOMER_GENERATE_LIBS', 'USES_COMPILE_L1_OPT_AC_PROTECTED_LIBS'])

#-------------------------------------------------------------------------------
# RCInit...
#-------------------------------------------------------------------------------

# modem_main driver Function Dictionary
RCINIT_MCS_INIT = {
            'sequence_group'  : env.subst('$MODEM_DRIVER'),
            'init_name'       : 'mcs_modem_init',
            'init_function'   : 'modem_init',
            'dependencies'    : ['tmc_core_init_1','mcpm'],
            'policy_optin'    : ['default', 'ftm', ],}

# modem_main Function Dictionary
RCINIT_MCS_MAIN1 = {
            'sequence_group'  : env.subst('$MODEM_DRIVER'),
            'init_name'       : 'mcs_modem_main_first',
            'init_function'   : 'modem_main_first',
            'dependencies'    : ['mcs_modem_init'],
            'policy_optin'    : ['default', 'ftm', ],}

# modem_main Function Dictionary
RCINIT_MCS_MAIN2 = {
            'sequence_group'  : env.subst('$MODEM_PROTOCOL'),
            'init_name'       : 'mcs_modem_main_second',
            'init_function'   : 'modem_main_second',
            'dependencies'    : ['modem_main_first', 'trm_taskinit'],
            'policy_optin'    : ['default', 'ftm', ],}

# modem_run Function Dictionary
RCINIT_MCS_RUN = {
            'sequence_group'  : env.subst('$MODEM_PROTOCOL'),
            'init_name'       : 'mcs_modem_run',
            'init_function'   : 'modem_run',
            'dependencies'    : ['mcs_modem_main_second'],
            'policy_optin'    : ['default', 'ftm', ],}

# Add init functions to RCInit
if 'USES_MODEM_RCINIT' in env:
            env.AddRCInitFunc(['MODEM_MODEM', 'MODEM_PAGEONLY', 'MODEM_SENSORONLY'], RCINIT_MCS_INIT)
            env.AddRCInitFunc(['MODEM_MODEM', 'MODEM_PAGEONLY'], RCINIT_MCS_MAIN1)
            env.AddRCInitFunc(['MODEM_MODEM', 'MODEM_PAGEONLY'], RCINIT_MCS_MAIN2)
            env.AddRCInitFunc(['MODEM_MODEM'], RCINIT_MCS_RUN)
