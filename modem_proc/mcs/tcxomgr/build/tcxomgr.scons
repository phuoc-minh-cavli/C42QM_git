#===============================================================================
#
# TCXOMGR Scons
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2019 Qualcomm Technologies Incorporated.
# All Rights Reserved.
# Qualcomm Confidential and Proprietary

# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.

# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/mcs.mpss/5.1/tcxomgr/build/tcxomgr.scons#7 $
#
#===============================================================================
Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Exit immediately for PLT builds
#-------------------------------------------------------------------------------
if 'USES_PLT' in env:
    Return()

#-------------------------------------------------------------------------------
# Necessary API's for test purposes
#-------------------------------------------------------------------------------
env.RequirePublicApi('QTF', area='mob')

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = "../src"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = [
    "MSG_BT_SSID_DFLT=MSG_SSID_TCXOMGR",
])

#---------------------------------------------------------------------------- #
# Define DCC calibration features                                             #
# --------------------------------------------------------------------------- #
env.Append(CPPDEFINES = "FEATURE_TCXOMGR_DUTY_CYCLE_CAL")

#-------------------------------------------------------------------------------
# Necessary Public and Restricted API's
#-------------------------------------------------------------------------------
mcs_tcxo_public_api_list = [
  ('CORE',   'BUSES'),
  ('UTILS',  'OSYS'),
  ('UTILS',  'A2'),
  ('AVS',    'MVS'),
  ('UIM',    'UIM'),
  ('MPOWER', 'MPOWER'),
  ('WCDMA',  'WCDMA'),
  ('FW',     'WCDMA'),
  ('TDSCDMA','TDSCDMA'),
  ('MCFG',   'MCFG'),
  ('FW',     'NB1'),
]
for api_area,api_name in mcs_tcxo_public_api_list:
    env.RequirePublicApi([api_name], area=api_area)

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------

if 'USES_BUILD_PAGEONLY_IMAGE' in env:
  TCXOMGR_LIB_SRC = [
    '${BUILDPATH}/tcxomgr_task.c',
    '${BUILDPATH}/tcxomgr_cal.c',
    '${BUILDPATH}/tcxomgr_fastfield.c',
    '${BUILDPATH}/tcxomgr_chipxn_comp.c',
    '${BUILDPATH}/tcxomgr_msgr.c',
    '${BUILDPATH}/tcxomgr_ifc_buffer.cpp',
    '${BUILDPATH}/tcxomgr_ifc_buffer_queue.cpp',
    '${BUILDPATH}/tcxomgr_ifc_circular_queue.cpp',
    '${BUILDPATH}/tcxomgr_ifc_mem_class.cpp',
    '${BUILDPATH}/tcxomgr_ifc_rpush_calibration.cpp',
    '${BUILDPATH}/tcxomgr_ifc_main.cpp',
    '${BUILDPATH}/tcxomgr_temp.c',
  ]
else:
  TCXOMGR_LIB_SRC = [
    '${BUILDPATH}/tcxomgr_task.c',
    '${BUILDPATH}/tcxomgr_cal.c',
    '${BUILDPATH}/tcxomgr_xo_trim.c',
    '${BUILDPATH}/tcxomgr_fastfield.c',
    '${BUILDPATH}/tcxomgr_freq_err_est.c',
    '${BUILDPATH}/tcxomgr_cdma_cal.c',
    '${BUILDPATH}/tcxomgr_wcdma_cal.c',
    '${BUILDPATH}/tcxomgr_gps_cal.c',
    '${BUILDPATH}/tcxomgr_lte_cal.c',
    '${BUILDPATH}/tcxomgr_chipxn_comp.c',
    '${BUILDPATH}/tcxomgr_tdscdma_cal.c',
    '${BUILDPATH}/tcxomgr_msgr.c',
    '${BUILDPATH}/tcxomgr_ifc_buffer.cpp',
    '${BUILDPATH}/tcxomgr_ifc_buffer_queue.cpp',
    '${BUILDPATH}/tcxomgr_ifc_circular_queue.cpp',
    '${BUILDPATH}/tcxomgr_ifc_mem_class.cpp',
    '${BUILDPATH}/tcxomgr_ifc_rpush_calibration.cpp',
    '${BUILDPATH}/tcxomgr_ifc_main.cpp',
    '${BUILDPATH}/tcxomgr_temp.c',
]
  if 'USES_GSM' in env:
    TCXOMGR_LIB_SRC += ['${BUILDPATH}/tcxomgr_gsm_cal.c']
    env.Append(CPPDEFINES = "FEATURE_TCXOMGR_GSM_CAL")
  if 'USES_NB1' in env:
    TCXOMGR_LIB_SRC += ['${BUILDPATH}/tcxomgr_nb1_cal.c']
    env.Append(CPPDEFINES = "FEATURE_TCXOMGR_NB1_CAL")

TCXOMGR_CTRL_SRC = [
    '${BUILDPATH}/tcxomgr_ctl.c',
    '${BUILDPATH}/tcxomgr_data.c',
    '${BUILDPATH}/tcxomgr_rot_client_handling.c',
    '${BUILDPATH}/tcxomgr_log.c',
    '${BUILDPATH}/tcxomgr_diag.c',
    '${BUILDPATH}/tcxomgr_adc_client.c',
]

# Compile the tcxomgr source and convert to a binary library
env.AddBinaryLibrary(['MODEM_MODEM','MOB_MCS_TCXOMGR','MODEM_PAGEONLY'],
                     '${BUILDPATH}/tcxomgr',
                     TCXOMGR_LIB_SRC,
                     pack_exception=['USES_CUSTOMER_GENERATE_LIBS', 'USES_COMPILE_L1_OPT_AC_PROTECTED_LIBS'])

# Compile the tcxomgr ctrl source and convert to a library
env.AddLibrary(['MODEM_MODEM','MOB_MCS_TCXOMGR','MODEM_PAGEONLY'],
               '${BUILDPATH}/tcxomgr_ctrl',
               TCXOMGR_CTRL_SRC)

# Load test units
env.LoadSoftwareUnits()

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

RCINIT_TCXOINIT = {
 'sequence_group'             : env.subst('$MODEM_PROTOCOL'),     # required
 'init_name'                  : 'tcxomgr_taskinit',               # required
 'init_function'              : 'tcxomgr_taskinit',               # opt
 'dependencies'               : ['RFA', 'DALSYS', 'TIMER', 'DOG'],
 'policy_optin'               : ['default', 'ftm', ],
}

RCINIT_TCXO_TASK = {
 'thread_name'                : 'tcxomgr',
 'sequence_group'             : env.subst('$MODEM_PROTOCOL'),
 'stack_size_bytes'           : env.subst('$TCXOMGR_STKSZ'),      # required
 'priority_amss_order'        : 'TCXOMGR_PRI_ORDER',              # required
 'stack_name'                 : 'tcxomgr_stack',
 'thread_entry'               : 'tcxomgr_task',
 'tcb_name'                   : 'tcxomgr_tcb',
 'cpu_affinity'               : env.subst('$MODEM_CPU_AFFINITY'),
 'policy_optin'               : ['default', 'ftm', ],
}

if 'USES_MODEM_RCINIT' in env:
  RCINIT_TCXO = ['MODEM_MODEM', 'MOB_MCS_TCXOMGR','MODEM_PAGEONLY']
  env.AddRCInitFunc(RCINIT_TCXO, RCINIT_TCXOINIT)
  env.AddRCInitTask(RCINIT_TCXO, RCINIT_TCXO_TASK)
