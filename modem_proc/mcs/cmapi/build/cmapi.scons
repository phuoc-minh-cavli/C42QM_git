#===============================================================================
#
# MCS CMAPI
#
# Copyright (c) 2019 Qualcomm Technologies Incorporated.
# All Rights Reserved.
# Qualcomm Confidential and Proprietary

# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.

# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/mcs.mpss/5.1/cmapi/build/cmapi.scons#2 $
#
#===============================================================================
Import('env')
env = env.Clone()

from glob import glob
from os.path import join, basename

#-------------------------------------------------------------------------------
# Skip Compilation on APQ or PAGE_ONLY builds
#-------------------------------------------------------------------------------
if 'USES_GNSS_SA' in env or 'USES_BUILD_PAGEONLY_IMAGE' in env:
	Return()

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = "../src"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = [
   "MSG_BT_SSID_DFLT=MSG_SSID_MCS_CMAPI",
])

#-------------------------------------------------------------------------------
# Necessary Public and Restricted API's
#-------------------------------------------------------------------------------
mcs_cmapi_public_api_list = [
  ('CORE', 'BUSES'),
  ('UTILS', 'OSYS'),
  ('UTILS', 'A2'),
  ('AVS', 'MVS'),
  ('UIM', 'UIM'),
  ('MPOWER', 'MPOWER'),
  ('WCDMA', 'WCDMA'),
  ('FW', 'WCDMA'),
  ('TDSCDMA', 'TDSCDMA'),
  ('MCFG', 'MCFG'),
]

for api_area,api_name in mcs_cmapi_public_api_list:
    env.RequirePublicApi([api_name], area=api_area)

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------

# Construct the list of source files by looking for *.c
CMAPI_SRC = ['${BUILDPATH}/' + basename(fname)
             for fname in glob(join(env.subst(SRCPATH), '*.c'))]

# Compile the CMAPI source and convert to a binary library
env.AddBinaryLibrary(['MODEM_MODEM','MOB_MCS_CMAPI'],
                     '${BUILDPATH}/cmapi',
                     CMAPI_SRC,
                     pack_exception=['USES_CUSTOMER_GENERATE_LIBS', 'USES_COMPILE_L1_OPT_AC_PROTECTED_LIBS'])

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

if 'USES_RCINIT' in env:
   RCINIT_IMG = ['MODEM_MODEM']
   env.AddRCInitFunc(           # Code Fragment in TMC: NO
    RCINIT_IMG,                 # define TMC_RCINIT_INIT_DSM_INIT
    {
     'sequence_group'             : 'RCINIT_GROUP_3',                   # required
     'init_name'                  : 'cmapi',                            # required
     'init_function'              : 'cmapi_init',                       # required
     'dependencies'               : ['diag'],
     'policy_optin'               : ['default', 'ftm', ],
    })
