#ifndef RR_DED_MEAS_REPORTING_H
#define RR_DED_MEAS_REPORTING_H

/*============================================================================
  @file rr_ded_meas_reporting.h

  This module handles the encoding and transmission of measurement reports
  to the network when RR is in dedicated mode.

  L1 sends measurement indication signals for the serving cell, neighbour
  cells and WCDMA neighbour cells (if applicable).  These signals are
  processed by this module, their contents stored, and periodically a
  measurement report (or enhanced measurement report) is generated and sent
  via L2.

  The measurement reports are generated by the receipt in RR of a serving
  cell measurement indication (MPH_SERVING_MEAS_IND).

                Copyright (c) 2001-2013 Qualcomm Technologies, Inc.
                All Rights Reserved.
                Qualcomm Confidential and Proprietary
============================================================================*/
/* $Header: //components/rel/geran.mpss/5.2.0/grr/src/rr_ded_meas_reporting.h#2 $ */

/*----------------------------------------------------------------------------
 * Include Files
 * -------------------------------------------------------------------------*/

#include "geran_variation.h"
#include "customer.h"
#include "comdef.h"
#include "rr_defs.h"
#include "rr_l1.h"
#include "rr_l1_g.h"
#include "geran_eng_mode_read_api.h"
#include "rr_gprs_defs.h"
#include "geran_multi_sim.h"

#ifdef FEATURE_GERAN_CS_SUPPORT
/*----------------------------------------------------------------------------
 * Preprocessor Definitions and Constants
 * -------------------------------------------------------------------------*/

/* RXQUAL_SUB is in the range 0..7, where 0 is the best, 7 is the worst */
#define RXQUAL_SUB_POOR_SCELL_THRESHOLD 0x04
#ifdef FEATURE_DUAL_SIM
/* slightly higher threshold for Dual Standby */
#define RXQUAL_SUB_DSDS_SCELL_THRESHOLD 0x06
#endif /* FEATURE_DUAL_SIM */

/* L1 will only send a value that exceeds this maximum if the data is invalid */
#define RR_L1_MAXIMUM_RXQUAL            0x07

/*----------------------------------------------------------------------------
 * Type Declarations
 * -------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
 * Function Declarations and Documentation
 * -------------------------------------------------------------------------*/

extern void rr_reset_ded_meas_reporting(
void );

extern void rr_ded_set_measurement_reports_invalid(
  boolean invalid_reports
   
);

extern void rr_process_mph_serving_ded_meas_ind(
  mph_serving_ded_meas_ind_T *
   
);

extern void rr_store_ded_meas_while_releasing_l2(
  mph_serving_ded_meas_ind_T *rr_current_serving_ded_meas_ind_ptr
   
);

extern void rr_store_surround_meas(
  best_six_info_T * p_best_six_info,
  boolean in_dedicated
   
);

#ifdef FEATURE_WCDMA

/**
  @brief Processes WCDMA neighbour cell measurement information received from
         L1.

  @param surround_wcdma_dedicated_meas_ind: Pointer to the signal received
                                            from L1.
*/
extern void rr_process_mph_surround_wcdma_dedicated_meas_ind(
  mph_surround_wcdma_dedicated_meas_ind_T * surround_wcdma_dedicated_meas_ind
   
);

#endif /* #ifdef FEATURE_WCDMA */
#endif /* FEATURE_GERAN_CS_SUPPORT */

extern void rr_get_last_meas_results(
  byte *meas_results,
  uint8 sizeofmeas_result,
  boolean in_dedicated
   
);

#ifdef FEATURE_GERAN_CS_SUPPORT
/**
  @brief Retrieves the most recent RXLEV and RXQUAL sub averages for the
         serving cell.

  @param rxlev_sub_ptr:  Pointer to a variable in which the RXLEV_SUB average
                         for the serving cell should be stored.
  @param rxqual_sub_ptr: Pointer to a variable in which the RXQUAL_SUB average
                         for the serving cell should be stored.
  @return:               TRUE if the values returned are valid,
                         FALSE otherwise.
*/
extern boolean rr_get_last_dedicated_sub_averages(
  byte *rxlev_sub_ptr,
  byte *rxqual_sub_ptr
   
);

extern void rr_gsm_update_gsm_bsic_description_from_mi_instances(
  instances_T *
   
);

extern void rr_ded_meas_reporting_process_measurement_parameters(
  instances_T *I
   
);
#endif /* FEATURE_GERAN_CS_SUPPORT */

extern void rr_ded_meas_add_eng_mode_nmr_info(
  ARFCN_T arfcn,
  byte bsic,
  byte rxlev,
  gsm_ncell_list_member_t *opt_ncell_info_ptr,
  eng_mode_nmr_info_t *eng_mode_nmr,
  gprs_reselection_values_T *curr_resel_entry_ptr
);

#ifdef FEATURE_GERAN_CS_SUPPORT
rr_ba_lists_t *rr_get_ba_lists_ptr( void);

extern void rr_ded_meas_reporting_l1_in_dedicated( void);

extern boolean rr_ded_ba_sacch_is_valid( void );

extern boolean rr_ded_get_copy_of_ba_sacch(
  inter_task_BCCH_allocation_T *ba_sacch_ptr
);

extern void rr_ded_meas_reporting_discard_data(void );

extern void rr_ded_meas_reporting_task_start_init(void);

#if defined (FEATURE_LTE) || defined (FEATURE_GSM_TDS)
void rr_irat_process_surround_irat_meas_ind_in_dedicated(
  mph_surround_irat_meas_ind_t * surround_irat_meas_ind
);
#endif /*FEATURE_LTE || FEATURE_GSM_TDS*/

#ifdef FEATURE_GSM_TDS
int rr_compare_tds_rscp_measurements(
  const void *arg1,
  const void *arg2
);
#endif /*FEATURE_GSM_TDS*/

/**
  @brief Combines E-UTRAN Parameters received in measurement information for
         use in dedicated mode.

  @param scell The serving cell database.
  @param mi_instances Measurement Information instances containing the
         dedicated mode E-UTRAN parameters.
*/
extern void rr_dedicated_mode_process_eutran_params(
  gprs_scell_info_t * scell,
  instances_T * mi_instances
);

/**
  @brief Called on entry to dedicated mode, this function initialises dedicated
         mode measurement parameters based on idle mode parameters.

  @param scell The serving cell database.
  @param si2quater_instances SI2quater instances containing the idle mode
         parameters.
*/
extern void rr_dedicated_mode_process_initial_params(
  gprs_scell_info_t * scell,
  instances_T       * si2quater_instances
);

/**
  @brief Called when Measurement Information is received, this function
         combines the dedicated mode measurement parameters stored in all
         instances.

  @param scell The serving cell database.
  @param mi_instances Measurement Information instances containing the
         dedicated mode parameters.
*/
extern void rr_dedicated_mode_process_params(
  gprs_scell_info_t * scell,
  instances_T       * mi_instances
);

#ifdef FEATURE_LTE
extern void rr_ded_meas_reporting_allocate_lte_measurements_storage(
  mph_dedicated_wcdma_cell_update_list_req_T * update_list_req
);
#endif /* FEATURE_LTE */

/**
  @brief Determine whether WCDMA support is enabled in GSM dedicated mode.

  @return TRUE if WCDMA support is enabled in GSM dedicated mode, FALSE if not.
*/
extern boolean rr_dedicated_mode_is_wcdma_enabled( void );

/**
  @brief Determine whether TDSCDMA support is enabled in GSM dedicated mode.

  @return TRUE if TDSCDMA support is enabled in GSM dedicated mode, FALSE if not.
*/
extern boolean rr_dedicated_mode_is_tdscdma_enabled( void );

/**
  @brief Determine whether LTE support is enabled in GSM dedicated mode.

  @return TRUE if LTE support is enabled in GSM dedicated mode, FALSE if not.
*/
extern boolean rr_dedicated_mode_is_lte_enabled( void );
#endif /* FEATURE_GERAN_CS_SUPPORT */

#endif /* #ifndef RR_DED_MEAS_REPORTING_H */

/* EOF */

