#===============================================================================
#
# ECALL_EMODEM Subsystem build script
#
# Copyright(c) 2012 Qualcomm Technologies Incorporated.
# All rights reserved. 
# Qualcomm Confidential and Proprietary 
#
#-------------------------------------------------------------------------------
#
#  $Header: $
#  $DateTime: 2010/11/29 22:13:16 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 07/17/12   DL      Added GPS to MODEM_PUBLIC_APIS
# 05/29/12   DL      Integrated new vocoder interface to eCall
# 02/02/12   DL      Initial revision
#
#===============================================================================

#-------------------------------------------------------------------------------
# Import and clone the SCons environment
#-------------------------------------------------------------------------------
Import('env')

#-------------------------------------------------------------------------------
# Verify that either USES_ECALL_IVS or USES_ECALL_PSAP is set, otherwise bail 
# out now
#-------------------------------------------------------------------------------
if 'USES_ECALL_IVS' not in env and 'USES_ECALL_PSAP' not in env :
     Return()


#-----------------------------------------
# Setup source PATH
#-----------------------------------------
SRCPATH = "../src"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-----------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-----------------------------------------
env.Append(CPPDEFINES = [
   "MSG_BT_SSID_DFLT=MSG_SSID_ECALL",
])

#-------------------------------------------------------------------------------
# Request Necessary Public API's
#-------------------------------------------------------------------------------
CORE_PUBLIC_APIS = [
  'SERVICES',
  'DEBUGTOOLS',
  'STORAGE',
  'KERNEL',
  'POWER',
  'SYSTEMDRIVERS',
  'DAL',
  'MPROC',
  'POWER',
]

MULTIMEDIA_PUBLIC_APIS = [
  'AUDIO',
  'APR',
  'MMUTILS',
  'CVD',
]

MODEM_PUBLIC_APIS = [
  'MMODE',
  'UIM',
  'WCDMA',
  'MCS',
  'GPS',
]

APR_PUBLIC_APIS = [
  'APR',
]

AVS_PUBLIC_APIS = [
  'MMUTILS',
  'CVD',
]


# We need the following Core Public API's
env.RequirePublicApi(CORE_PUBLIC_APIS, area="CORE")

# We need the following Multimedia Public API's
env.RequirePublicApi(MULTIMEDIA_PUBLIC_APIS, area="MULTIMEDIA")

# We need the following Modem Public API's
env.RequirePublicApi(MODEM_PUBLIC_APIS, area="MODEM")

# We need the following APR Public API's
env.RequirePublicApi(APR_PUBLIC_APIS, area="APR")

# We need the following AVS Public API's
env.RequirePublicApi(AVS_PUBLIC_APIS, area="AVS")

# We also need our Public API (in same area as we are)
env.RequirePublicApi(['ECALL'])

#-------------------------------------------------------------------------------
# Request Necessary Restricted API's
#-------------------------------------------------------------------------------
MODEM_RESTRICTED_APIS = [
  'UIM',
  'NAS',
  'MMODE',
  'MCS',
  'GPS',
]

# We need the following Modem Restriced API's
env.RequireRestrictedApi(MODEM_RESTRICTED_APIS)

# We also need our Restricted API (in same area as we are)
env.RequireRestrictedApi(['ECALL'])

#-------------------------------------------------------------------------------
# Publish scons violations
#-------------------------------------------------------------------------------
env.PublishPrivateApi('VIOLATIONS', ['${INC_ROOT}/core/api/securemsm/crypto',
                                     '${INC_ROOT}/core/api/securemsm/smecom',
                                     ])

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------

if 'USES_ECALL_IVS' in env:
  ECALL_SOURCES = [
    '${BUILDPATH}/ecall_modem_ivs.c',
    '${BUILDPATH}/ecall_ivs_task.c',
    '${BUILDPATH}/ecall_efs.c',
    '${BUILDPATH}/ecall_sim.c',
    '${BUILDPATH}/ecall_modem_clients.c',
  ]
elif 'USES_ECALL_PSAP' in env:
  ECALL_SOURCES = [
    '${BUILDPATH}/ecall_psap.c',
    '${BUILDPATH}/ecall_psap_task.c',
    '${BUILDPATH}/ecall_modem_psap.c',
    '${BUILDPATH}/ecall_efs.c',
  ]

# Ship our code as binary library and add it to the MODEM image
env.AddLibrary(['MODEM_MODEM'], '${BUILDPATH}/ecall', ECALL_SOURCES)

if 'USES_MSGR' in env and 'USES_ECALL_IVS' in env:
    env.AddUMID('${BUILDPATH}/ecall_ivs_msgr.umid', ['${INC_ROOT}/mmcp/ecall/emodem/inc/ecall_ivs_task.h'])
elif 'USES_MSGR' in env and 'USES_ECALL_PSAP' in env:
    env.AddUMID('${BUILDPATH}/ecall_psap_msgr.umid', ['${INC_ROOT}/mmcp/ecall/emodem/inc/ecall_psap_task.h'])

# --------------------------------------------------------------------------- #
#                      ECALL_IVS RCInit framework                             #
# --------------------------------------------------------------------------- #
if 'USES_ECALL_IVS' in env:
  # Build products for RCINIT
  RCINIT_ECALL_IVS_BUILD_TAG = ['MODEM_MODEM'] # modem

  # RCInit: Initialization function descriptor for ECALL_IVS
  # This entry defines the function to be called to initialize ECALL_IVS data
  # structures before the task is started.  The function associated with
  # 'init_function' is called during the initialization phase of RCInit.
  RCINIT_ECALL_IVS_INIT_FUNC = {
     'sequence_group' : env.subst('$MODEM_UPPERLAYER'),
     'init_name'      : 'ecall_ivs_task_init',
     'init_function'  : 'ecall_ivs_task_init_before_task_start',
     #'dependencies'  : ['one,two,three'],                  # optional [python list]
  }

  # RCInit: Task descriptor for ECALL_IVS (compile-time provisioning information)
  # This entry defines the task parameters that will be used by RCInit to
  # start the ECALL_IVS task.  The task will be started once ALL of the initialization
  # functions within the sequence group have been completed.
  RCINIT_ECALL_IVS_TASK_FUNC = {
     'thread_name'         : 'ecall_ivs',
     'sequence_group'      : env.subst('$MODEM_UPPERLAYER'),
     'stack_size_bytes'    : env.subst('$ECALL_IVS_STKSZ'),
     'priority_amss_order' : 'ECALL_IVS_PRI_ORDER',
     'stack_name'          : 'ecall_ivs_stack',                   # opt, defaults to '<thread_name>_stack'
     'thread_entry'        : 'ecall_ivs_task',                    # opt, defaults to '<thread_name>_task'
     'tcb_name'            : 'ecall_ivs_tcb',                     # opt, defaults to '<thread_name>_tcb'
     'cpu_affinity'        : env.subst('$MODEM_CPU_AFFINITY')
  }

  if 'USES_MODEM_RCINIT' in env:
     # Add the init and task definitions to the RCInit framework.
     # These entries will be used to generate sections in rcinit_autogen.c
     print "RCINIT has been enabled in ECALL_IVS"
     env.AddRCInitFunc(RCINIT_ECALL_IVS_BUILD_TAG, RCINIT_ECALL_IVS_INIT_FUNC)
     env.AddRCInitTask(RCINIT_ECALL_IVS_BUILD_TAG, RCINIT_ECALL_IVS_TASK_FUNC)
  else:
     print "RCINIT has NOT been enabled in ECALL_IVS"


# --------------------------------------------------------------------------- #
#                      ECALL_PSAP RCInit framework                             #
# --------------------------------------------------------------------------- #
if 'USES_ECALL_PSAP' in env:
  # Build products for RCINIT
  RCINIT_ECALL_PSAP_BUILD_TAG = ['MODEM_MODEM'] # modem

  # RCInit: Initialization function descriptor for ECALL_PSAP
  # This entry defines the function to be called to initialize ECALL_PSAP data
  # structures before the task is started.  The function associated with
  # 'init_function' is called during the initialization phase of RCInit.
  RCINIT_ECALL_PSAP_INIT_FUNC = {
     'sequence_group' : env.subst('$MODEM_UPPERLAYER'),
     'init_name'      : 'ecall_psap_task_init',
     'init_function'  : 'ecall_psap_task_init_before_task_start',
     #'dependencies'  : ['one,two,three'],                  # optional [python list]
  }

  # RCInit: Task descriptor for ECALL_PSAP (compile-time provisioning information)
  # This entry defines the task parameters that will be used by RCInit to
  # start the ECALL_IVS task.  The task will be started once ALL of the initialization
  # functions within the sequence group have been completed.
  RCINIT_ECALL_PSAP_TASK_FUNC = {
     'thread_name'         : 'ecall_psap',
     'sequence_group'      : env.subst('$MODEM_UPPERLAYER'),
     'stack_size_bytes'    : env.subst('$ECALL_PSAP_STKSZ'),
     'priority_amss_order' : 'ECALL_PSAP_PRI_ORDER',
     'stack_name'          : 'ecall_psap_stack',                   # opt, defaults to '<thread_name>_stack'
     'thread_entry'        : 'ecall_psap_task',                    # opt, defaults to '<thread_name>_task'
     'tcb_name'            : 'ecall_psap_tcb',                     # opt, defaults to '<thread_name>_tcb'
     'cpu_affinity'        : env.subst('$MODEM_CPU_AFFINITY')
  }

  if 'USES_MODEM_RCINIT' in env:
     # Add the init and task definitions to the RCInit framework.
     # These entries will be used to generate sections in rcinit_autogen.c
     print "RCINIT has been enabled in ECALL_PSAP"
     env.AddRCInitFunc(RCINIT_ECALL_PSAP_BUILD_TAG, RCINIT_ECALL_PSAP_INIT_FUNC)
     env.AddRCInitTask(RCINIT_ECALL_PSAP_BUILD_TAG, RCINIT_ECALL_PSAP_TASK_FUNC)
  else:
     print "RCINIT has NOT been enabled in ECALL_PSAP"
