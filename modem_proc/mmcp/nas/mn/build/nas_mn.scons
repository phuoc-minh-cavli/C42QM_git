#===============================================================================
#
# NAS MN SCons 
#
# GENERAL DESCRIPTION
#    SCons build script
#
# Copyright (c) 2010 - 2011 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/mmcp.mpss/6.1.10/nas/mn/build/nas_mn.scons#1 $
#  $DateTime: 2023/04/25 14:39:18 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 04/12/11   pm      Set MSG_BT_SSID_DFLT to map legacy messages to your SSID name
# 09/15/10   pm      Initial file
#
#===============================================================================
#from glob import glob
#from os.path import join, basename

Import('env')
import os
env = env.Clone()

if 'USES_GSM' not in env and ('USES_UMTS' not in env or 'USES_WPLT' in env) and 'USES_LTE' not in env:
   Return()

# --------------------------------------------------------------------------- #
# Turn off/on debug if requested 			      
# --------------------------------------------------------------------------- # 
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG = "")

if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG = "-g --dwarf2") 
    env.Replace(HEXAGON_DBG = "-g")  
    env.Replace(GCC_DBG = "-g")

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = '../src'

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = [
    'MSG_BT_SSID_DFLT=MSG_SSID_NAS_MN',
])

#-------------------------------------------------------------------------------
# Publish our Private API
#-------------------------------------------------------------------------------
env.PublishPrivateApi('NAS', ["${INC_ROOT}/mmcp/nas/mn/inc"])

#-------------------------------------------------------------------------------
# Necessary Public API's
#-------------------------------------------------------------------------------
REQUIRED_PUBLIC_APIS = [
    'GERAN',
    'GPS',
    'MCS',
    'MMODE',
    'NAS',
    'ONEX',
    'RFA',
    'UIM',
    'UTILS',
    'WCDMA',
    ]

REQUIRED_RESTRICTED_APIS = [
    'FW',
    'GERAN',
    'GPS',
    'LTE',
    'MCS',
    'MDSP',
    'MMODE',
    'NAS',
    'UIM',
    'UTILS',
    'WCDMA',
    ]

CORE_APIS = [
    'DAL',
    'DEBUGTOOLS',
    'MPROC',
    'SERVICES',
    'SYSTEMDRIVERS',

    # needs to be last also contains wrong comdef.h
    'KERNEL',
    ]

MULTIMEDIA_APIS = [
    'MVS',
    ]

env.RequirePublicApi(CORE_APIS, area='core')

env.RequirePublicApi('AUDIO', area='MULTIMEDIA') 
env.RequirePublicApi(MULTIMEDIA_APIS, area='MULTIMEDIA')

env.RequirePublicApi(REQUIRED_PUBLIC_APIS) 
env.RequireRestrictedApi(REQUIRED_RESTRICTED_APIS)

#-------------------------------------------------------------------------------
# External API's not built with SCons
#-------------------------------------------------------------------------------
env.RequireExternalApi([
    'MULTIMEDIA_AUDIO',
])

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------

# Construct the list of source files by looking for *.c
#MN_C_SOURCES = ['${BUILDPATH}/' + basename(fname)
#                 for fname in glob(join(env.subst(SRCPATH), '*.c'))]

MN_C_SOURCES = [
	'${BUILDPATH}/mn_cc_msg_util.c',
	'${BUILDPATH}/mn_handle_test.c',
	'${BUILDPATH}/mn_initialise_mn_data.c',
	'${BUILDPATH}/mn_process_cnm_sms_msgs.c',
	'${BUILDPATH}/mn_process_smrl_msgs.c',
	'${BUILDPATH}/mn_put_cnm_sms_msgs.c',
	'${BUILDPATH}/mn_put_uasms_msgs.c',
	'${BUILDPATH}/mn_route_mn_msgs.c',
	'${BUILDPATH}/mn_route_sms_msgs.c',
	'${BUILDPATH}/mn_route_ss_msgs.c',
	'${BUILDPATH}/mn_send_message.c',
	'${BUILDPATH}/mn_sms_msg_util.c',
	'${BUILDPATH}/mn_sms_processing.c',
	'${BUILDPATH}/mn_timers.c',
	'${BUILDPATH}/mnglobal.c',
	'${BUILDPATH}/mnutils.c',
]

MN_VOICE_SOURCES = [
        '${BUILDPATH}/mn_cc_processing.c',
        '${BUILDPATH}/mn_get_cnm_cc_msgs.c',
        '${BUILDPATH}/mn_process_cm_cc_msgs.c',
        '${BUILDPATH}/mn_process_cnm_cc_msgs.c',
        '${BUILDPATH}/mn_put_cm_cc_msgs.c',
        '${BUILDPATH}/mn_put_cnm_cc_msgs.c',
        '${BUILDPATH}/mn_route_cc_msgs.c',
        '${BUILDPATH}/mn_ss_cc_processing.c',
        '${BUILDPATH}/mn_tch_connection.c',        
]

MN_SUPL_SRV_SOURCES = [
        '${BUILDPATH}/mn_get_cnm_ss_msgs.c',
        '${BUILDPATH}/mn_process_cm_ss_cc_msgs.c',
	'${BUILDPATH}/mn_process_cm_ss_msgs.c',
        '${BUILDPATH}/mn_put_cm_ss_msgs.c',
        '${BUILDPATH}/mn_put_cnm_ss_msgs.c',
        '${BUILDPATH}/mn_ss_processing.c',        
]


if os.environ.get('VARIANT_NAME', '') not in ['9607.lteonly.test', '9607.lteonly.prod','9607.lteonlyf3.test','9607.lteonlyf3.prod']:
    MN_C_SOURCES += MN_VOICE_SOURCES
    MN_C_SOURCES += MN_SUPL_SRV_SOURCES

# Add our library to the ModemApps image
if 'MOB_NAS' in env:
  env.AddLibrary( ['MODEM_MODEM','MOB_NAS'], '${BUILDPATH}/nas_mn', [MN_C_SOURCES] )
else:
  env.AddLibrary( ['MODEM_MODEM'], '${BUILDPATH}/nas_mn', [MN_C_SOURCES] )

