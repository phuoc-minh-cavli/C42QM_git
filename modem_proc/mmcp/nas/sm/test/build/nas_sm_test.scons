#===============================================================================
#
# NAS SM SCons 
#
# GENERAL DESCRIPTION
#    SCons build script
#
# Copyright (c) 2010 - 2011 by Qualcomm Technologies INCORPORATED.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 04/28/11   pm      Update for MSGR_DEFINE_UMID() calls
# 04/20/11   pm      Update for New Mode Handler in 8660 SA
# 04/12/11   pm      Set MSG_BT_SSID_DFLT to map legacy messages to your SSID name
# 09/15/10   pm      Initial file
#
#===============================================================================
#from glob import glob
#from os.path import join, basename

Import('env')
env = env.Clone()
#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
TESTPATH = "mmcp/nas/sm/test/ut_framework"			
SRCPATH = "${BUILD_ROOT}/" + TESTPATH

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)
env.Append(CPPDEFINES = 'COMPONENT_PATH=\\"'+TESTPATH+'/\\"')
#-------------------------------------------------------------------------------
# Necessary Public & Restricted API's
#-------------------------------------------------------------------------------
env.RequirePublicApi([
               'DAL',
               'DEBUGTOOLS',
               'MPROC',
               'SERVICES',
               'STORAGE',
               'SYSTEMDRIVERS',
               'KERNEL',          # needs to be last
               ], area='core')

# Need to get access to Modem Public headers
env.RequirePublicApi('QTF', area='MOB')

env.PublishPrivateApi('NAS_COMMON_UT', [
    "${INC_ROOT}/mmcp/nas/test/common/inc",
    "${INC_ROOT}/mmcp/nas/test/emulation/inc",
    "${INC_ROOT}/datamodem/3gpp2/api",
    "${INC_ROOT}/datamodem/3gpp2/1xrlp/inc",
    "${INC_ROOT}/datamodem/3gpp2/doqos/inc",
    "${INC_ROOT}/datamodem/3gpp2/ds707/inc",
    "${INC_ROOT}/datamodem/3gpp2/dsmgr/inc",
    "${INC_ROOT}/datamodem/3gpp2/hdrdata/inc",
    "${INC_ROOT}/datamodem/protocols/api",
    "${INC_ROOT}/datamodem/protocols/mip/inc",
    "${INC_ROOT}/datamodem/interface/api",
    "${INC_ROOT}/datamodem/interface/atcop/inc",
    "${INC_ROOT}/datamodem/interface/sysapi/inc",
    "${INC_ROOT}/mmcp/nas/sm/src",
    "${INC_ROOT}/mmcp/nas/sm/test",
    "${INC_ROOT}/mcs/cust/inc",
    "${INC_ROOT}/mcs/variation/inc",
	"${INC_ROOT}/rfa/rf/common/stubs/inc",
	"${INC_ROOT}/core/api/securemsm/crypto",
	"${INC_ROOT}/core/api/securemsm/smecom",
	"${INC_ROOT}/core/api/securemsm/smeco",
	"${INC_ROOT}/core/securemsm/cryptodrivers/prng/shared/inc",
])


#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = [
    'MSG_BT_SSID_DFLT=MSG_SSID_NAS_SM',
])

#-------------------------------------------------------------------------------
# For MSGR_DEFINE_UMID() calls
#-------------------------------------------------------------------------------
#if 'USES_MSGR' in env:#andre
#    env.AddUMID('${BUILDPATH}/esm_cm_msgr_enum.umid', ['../../../../api/esm_cm_msgr_enum_msg.h'])
#    env.AddUMID('${BUILDPATH}/esm_emm_msgr_enum.umid', ['../../mmcp/nas/sm/inc/esm_emm_msgr_enum_msg.h'])
#    env.AddUMID('${BUILDPATH}/sm_cm_msgr_enum.umid', ['../../../../api/sm_cm_msgr_enum_msg.h'])

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------


SM_C_SOURCES = [
	'${BUILDPATH}/esm_ut_lib.cpp',    
]

env.AddObject(['MOB_NAS'], SM_C_SOURCES)

env.LoadSoftwareUnits()

