#===============================================================================
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2022 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/dataiot.mpss/2.0/protocols/linklayer/build/datamodem_linklayer.scons#4 $
#  $DateTime: 2023/05/19 01:10:20 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 05/19/22   rj      FR 78240: Memory optimizations- Disable DHCPv6, PPP, HDLC and SSL
# 04/08/19   ds      PPP memory optimization changes
# 08/31/10   ack     Initial revision
#===============================================================================
Import('env')
env = env.Clone()

from glob import glob
from os.path import join, basename

if 'USES_WPLT' in env or 'USES_DATAMODEM_LINKLAYER' not in env:
    Return()

# Don't compile PPP and HDLC files if USES_FEATURE_AWARE_CT21 is present and compile only if NTN enabled
if 'USES_FEATURE_AWARE_CT21' in env and 'USES_FEATURE_NBIOT_NTN' not in env:
    Return()
#turn off debug if requested  
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG = "")


#turn on debug if requested
if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG = "-g --dwarf2") 
    env.Replace(HEXAGON_DBG = "-g")  
    env.Replace(GCC_DBG = "-g")
	
#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = [
   "MSG_BT_SSID_DFLT=MSG_SSID_DS",
])

#-------------------------------------------------------------------------------
# Necessary Core Public API's
#-------------------------------------------------------------------------------
CORE_PUBLIC_APIS = [
    'DEBUGTOOLS',
    'SERVICES',
    'SYSTEMDRIVERS',
    'WIREDCONNECTIVITY',
    'STORAGE',
    'SECUREMSM',
    'BUSES',
	 'DAL',

    # needs to be last also contains wrong comdef.h
    'KERNEL',
    ]

env.RequirePublicApi(CORE_PUBLIC_APIS, area='core')

#-------------------------------------------------------------------------------
# Necessary Modem Public API's
#-------------------------------------------------------------------------------
MODEM_PUBLIC_APIS = [
    'MMODE',
    'DATAMODEM',
    'UIM',
    'MCS',
    'ONEX',
    'DATA',
    'HDR',
    'WMS',
    'PBM',
    'GERAN',
    'NAS',
    'UTILS',
    'WCDMA',
    'RFA',
    ]

env.RequirePublicApi(MODEM_PUBLIC_APIS)

#-------------------------------------------------------------------------------
# Necessary Modem Restricted API's
#-------------------------------------------------------------------------------
MODEM_RESTRICTED_APIS = [
    'MODEM_DATA',
    'MODEM_DATACOMMON',
    'MODEM_DATAMODEM',
    'DATAMODEM',
    'MCS',
    'ONEX',
    'NAS',
    'HDR',
    'MMODE',
    'RFA',
    'GERAN',
    'UIM',
    'WCDMA',
    'MDSP',
    'UTILS',
    ]

env.RequireRestrictedApi(MODEM_RESTRICTED_APIS)

#-------------------------------------------------------------------------------
# Required external APIs not built with SCons (if any)
# e.g. ['BREW',]
#-------------------------------------------------------------------------------
REQUIRED_NON_SCONS_APIS = [
    'WCONNECT', 
    'BREW',
    ]

if REQUIRED_NON_SCONS_APIS != []:
  env.RequireExternalApi(REQUIRED_NON_SCONS_APIS)


#-------------------------------------------------------------------------------
#  OffTarget/QTF
#-------------------------------------------------------------------------------
if 'USES_MOB' in env:
  env.RequireRestrictedApi(['DATAMODEM_QTF_OFT'])

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------
#code shipped as source
DATAMODEM_LINKLAYER_HDLC_SOURCES = [   
   '${BUILDPATH}/src/ps_hdlc_lib.c',
   ]

DATAMODEM_LINKLAYER_PPP_SOURCES = [
   '${BUILDPATH}/src/ps_ppp.c',
   '${BUILDPATH}/src/ps_ppp_auth.c',
   '${BUILDPATH}/src/ps_ppp_fsm.c',
   '${BUILDPATH}/src/ps_ppp_ipcp.c',
   '${BUILDPATH}/src/ps_ppp_lcp.c',
   '${BUILDPATH}/src/ps_ppp_logging.c',
   '${BUILDPATH}/src/ps_ppp_snoop.c',
   '${BUILDPATH}/src/ps_ppp_snpip.c',
   '${BUILDPATH}/src/ps_ppp_task.c',
   '${BUILDPATH}/src/ps_pppi.c',
   ]

DATAMODEM_LINKLAYER_SOURCES = []

if 'USES_DATAMODEM_LINKLAYER_PPP' in env:
   DATAMODEM_LINKLAYER_SOURCES += DATAMODEM_LINKLAYER_PPP_SOURCES

if 'USES_DATAMODEM_LINKLAYER_HDLC' in env:
   DATAMODEM_LINKLAYER_SOURCES += DATAMODEM_LINKLAYER_HDLC_SOURCES

   
env.AddLibrary(['MODEM_MODEM', 'MOB_DATAMODEM' ], '${BUILDPATH}/linklayer',[DATAMODEM_LINKLAYER_SOURCES, ])


#code shipped as binary library

LIB_DATAMODEM_LINKLAYER_IPV6CP_SOURCES = [
   '${BUILDPATH}/src/ps_ppp_ipv6cp.c',
   ]


if 'USES_DATAMODEM_LINKLAYER_PPP' in env:
   if 'USES_MODEM_DATAMODEM_IPV6' in env:
      LIB_DATAMODEM_LINKLAYER_SOURCES = LIB_DATAMODEM_LINKLAYER_IPV6CP_SOURCES

env.AddBinaryLibrary(['MODEM_MODEM', 'MOB_DATAMODEM' ], 
                     '${BUILDPATH}/lib_linklayer',
                     [LIB_DATAMODEM_LINKLAYER_SOURCES, ],
                      pack_exception=['USES_CUSTOMER_GENERATE_LIBS', 'USES_COMPILE_L1_OPT_AC_PROTECTED_LIBS'])
