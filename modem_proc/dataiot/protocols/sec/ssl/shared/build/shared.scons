#===============================================================================
#
# SSL Shared Libs
#
# GENERAL DESCRIPTION
#    build script
#
#  Copyright (c) 2013 - 2022 Qualcomm Technologies, Inc.  All Rights Reserved.
#  Qualcomm Technologies Proprietary and Confidential.
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/dataiot.mpss/2.0/protocols/sec/ssl/shared/build/shared.scons#2 $
#  $DateTime: 2022/05/24 00:01:24 $
#  $Author: pwbldsvc $
#  $Change: 37378290 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 05/19/22   rj      FR 78240: Memory optimizations- Disable DHCPv6, PPP, HDLC and SSL
# 07/13/10   yh      SSL shared lib scon
#===============================================================================
Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Don't compile the SSL files if USES_FEATURE_AWARE_CT21 is present
#-------------------------------------------------------------------------------
if 'USES_FEATURE_AWARE_CT21' in env:
    Return()

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."

#-------------------------------------------------------------------------------
# Check Debug Status
#-------------------------------------------------------------------------------
if env.has_key('USES_NO_DEBUG'):
   env.Replace(DBUG_MODE = "NoDebug")
else:
   env.Replace(DBUG_MODE = "Debug")

#-------------------------------------------------------------------------------
# Set Paths
#-------------------------------------------------------------------------------
#if env.has_key('IMAGE_NAME'):
#   SECUREMSMLIBPATH = '${IMAGE_NAME}/${PROC}/${ARMTOOLS}'
##   SECUREMSMLIBPATH = '${IMAGE_NAME}/${PROC}/${ARMTOOLS}/${DBUG_MODE}'
#else:
#   SECUREMSMLIBPATH = 'unknown/${PROC}/${ARMTOOLS}'
##   SECUREMSMLIBPATH = 'unknown/${PROC}/${ARMTOOLS}/${DBUG_MODE}'
SECUREMSMLIBPATH = '${BUILDPATH}'

env.Replace(SECUREMSMLIBPATH = SECUREMSMLIBPATH)
env.VariantDir('${SECUREMSMLIBPATH}', SRCPATH, duplicate=0)

env.Append(CPPDEFINES=['MSG_BT_SSID_DFLT=MSG_SSID_SEC_SSL'])
#-------------------------------------------------------------------------------
# External depends outside CoreBSP
#-------------------------------------------------------------------------------
env.RequireExternalApi([
   'BREW',
   'CS',
   'DSM',
   'MODEM_API',
   'MULTIMEDIA_CORE',
   'DATAMODEM',
])

MODEM_API = [
   'DATA',
   'HDR',
   'DATACOMMON',
   'DSM',
   'MCS',
   'GPS',
   'SSL',
   'DATAMODEM',
]

env.RequirePublicApi(MODEM_API, 'modem')

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'DAL',
   'DEBUGTOOLS',
   'HAL',
   'MPROC',
   'SECUREMSM',
   'SERVICES',
   'STORAGE',
   'SYSTEMDRIVERS',
   # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API,'core')
#env.RequireRestrictedApi(CBSP_API)

env.RequireRestrictedApi([
    'MMODE',
    'NAS',
    'RFA',
    'MDSP',
    'MDSPSVC',
    'GERAN',
    'GPS',
    'ONEX',
    'HDR',
    'MCS',
    'LTE',
    'UTILS',
	'DATAMODEM',
    ])

#-------------------------------------------------------------------------------
# Depends within SecureMSM
#-------------------------------------------------------------------------------
# See securemsm\build\sconscript for definitions of listings

env.RequireRestrictedApi('DATAMODEM')
env.RequireProtectedApi('DATAMODEM')

#-------------------------------------------------------------------------------
# Compiler, object, and linker definitions
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------

#----------------------------------------------------------------------------
# Secure Sockets Layer (SSL) Shared Library
#----------------------------------------------------------------------------
if 'USES_DATAMODEM_SEC_SSL' in env:
  SME_SSL_SHARED_LIB_SOURCES = [ 
     '${SECUREMSMLIBPATH}/src/secsslhsp.c', 
     '${SECUREMSMLIBPATH}/src/secsslalp.c', 
     '${SECUREMSMLIBPATH}/src/secsslasn.c', 
     '${SECUREMSMLIBPATH}/src/secsslca.c', 
     '${SECUREMSMLIBPATH}/src/secsslcsp.c', 
     '${SECUREMSMLIBPATH}/src/secsslkeygen.c', 
     '${SECUREMSMLIBPATH}/src/secsslrx.c', 
     '${SECUREMSMLIBPATH}/src/secssltx.c', 
     '${SECUREMSMLIBPATH}/src/secsslcert.c', 
     '${SECUREMSMLIBPATH}/src/secssleap.c', 
  ]

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------
if 'USES_DATAMODEM_SEC_SSL' in env:
  sme_ssl_shared_lib = '${SECUREMSMLIBPATH}/sme_ssl_shared'
  if env.has_key('USES_SEC'):
      env.AddBinaryLibrary(
           ['SINGLE_IMAGE', 'CBSP_SINGLE_IMAGE',
            'MODEM_IMAGE',  'CBSP_MODEM_IMAGE',
            'APPS_IMAGE',   'CBSP_APPS_IMAGE',
            'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE'],
           sme_ssl_shared_lib,[SME_SSL_SHARED_LIB_SOURCES], pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])

env.LoadSoftwareUnits()