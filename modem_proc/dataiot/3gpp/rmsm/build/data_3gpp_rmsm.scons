#===============================================================================
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2018 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/dataiot.mpss/2.0/3gpp/rmsm/build/data_3gpp_rmsm.scons#4 $
#  $DateTime: 2023/05/19 01:10:20 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 08/31/10   ack     Initial revision
#===============================================================================
Import('env')
env = env.Clone()

from glob import glob
from os.path import join, basename


#turn off debug if requested  
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG = "")


#turn on debug if requested
if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG = "-g --dwarf2") 
    env.Replace(HEXAGON_DBG = "-g")  
    env.Replace(GCC_DBG = "-g")
	
#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = [
   "MSG_BT_SSID_DFLT=MSG_SSID_DS",
])

#-------------------------------------------------------------------------------
# Necessary Core Public API's
#-------------------------------------------------------------------------------
CORE_PUBLIC_APIS = [
    'DEBUGTOOLS',
    'SERVICES',
    'SYSTEMDRIVERS',
    'WIREDCONNECTIVITY',
    'STORAGE',
    'SECUREMSM',
    'BUSES',
    'DAL',

    # needs to be last also contains wrong comdef.h
    'KERNEL',
    ]

env.RequirePublicApi(CORE_PUBLIC_APIS, area='core')

#-------------------------------------------------------------------------------
# Necessary Multimedia Public API's
#-------------------------------------------------------------------------------
MM_PUBLIC_APIS = [
    'AUDIO',
    'MVS',
    ]

env.RequirePublicApi(MM_PUBLIC_APIS, area='multimedia')

#-------------------------------------------------------------------------------
# Necessary Modem Public API's
#-------------------------------------------------------------------------------
MODEM_PUBLIC_APIS = [
    'MMODE',
    'DATAMODEM',
    'UIM',
    'MCS',
    'ONEX',
    'DATA',
    'HDR',
    'WMS',
    'PBM',
    'GERAN',
    'NAS',
    'UTILS',
    'WCDMA',
    'RFA',
    'CNE',
    'ECALL',
    ]

env.RequirePublicApi(MODEM_PUBLIC_APIS)

#-------------------------------------------------------------------------------
# Necessary Modem Restricted API's
#-------------------------------------------------------------------------------
MODEM_RESTRICTED_APIS = [
    'MODEM_DATA',
    'MODEM_DATACOMMON',
    'MODEM_DATAMODEM',
    'DATAMODEM',
    'MCS',
    'ONEX',
    'NAS',
    'HDR',
    'MMODE',
    'RFA',
    'GERAN',
    'UIM',
    'WCDMA',
    'MDSP',
    'UTILS',
    'CNE',
    ]

env.RequireRestrictedApi(MODEM_RESTRICTED_APIS)

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------
#code shipped as source
#DUN needs to be enabled for NTN flavor
if 'USES_GSM' in env or ('USES_WPLT' not in env and 'USES_UMTS' in env) or 'USES_LTE' in env:
    if 'USES_FEATURE_AWARE_CT21' in env and 'USES_FEATURE_NBIOT_NTN' not in env:
        RMSM_SOURCES = [
            '${BUILDPATH}/src/ds_rmsm.c',
            '${BUILDPATH}/src/ds_3gpp_rmsm_atif.c',
            '${BUILDPATH}/src/ds_3gpp_rmsm_ati.c',
        ]
    else:
        RMSM_SOURCES = [
            '${BUILDPATH}/src/ds_rmsm.c',
            '${BUILDPATH}/src/ds_rmsm_ip.c',
            '${BUILDPATH}/src/ds_3gpp_rmsm_atif.c',
            '${BUILDPATH}/src/ds_3gpp_rmsm_ati.c',
            '${BUILDPATH}/src/ds_3gpp_rmsm_ip_common.c',
            '${BUILDPATH}/src/ds_3gpp_rmsm_autoconfig_sm.c',
        ]
env.AddLibrary(['MODEM_MODEM', 'MOB_DATAMODEM' ], '${BUILDPATH}/rmsm',[RMSM_SOURCES, ])
