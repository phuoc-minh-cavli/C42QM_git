##===============================================================================
# GBA Subsystem build script
# GENERAL DESCRIPTION
#    build script for modem/uim/gba
#
#                       COPYRIGHT INFORMATION
#
# Copyright (c) 2015 - 2017 QUALCOMM Technologies, Inc (QTI) and its licensors.
# All Rights Reserved.  QUALCOMM Technologies Proprietary.
# Export of this technology or software
# is regulated by the U.S. Government. Diversion contrary to U.S. law prohibited.
# 
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header:
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 09/18/17   shr     Compile GBA based on USES_UIM_IOE_GBA for IOE targets
# 03/09/16   vdc     Do not compile GBA for some customers for memory savings
# 11/25/15   sp      Updated copyright
# 07/20/15   tkl     Added HTTP Cookies support
# 04/03/15   tkl     Added TMPI support
# 03/16/15   lxu     Use gba_url and gba_port in nv if they are valid
# 02/08/15   tl      Initial version
#
#===============================================================================


#-----------------------------------------
# Import and clone the SCons environment
#-----------------------------------------
Import('env')
env = env.Clone()

# Verify that USES_RUIM is set, otherwise bail out now
if 'USES_RUIM' not in env:
    Return()

#-----------------------------------------
# Setup source PATH
#-----------------------------------------
SRCPATH = "../src"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-----------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-----------------------------------------
env.Append(CPPDEFINES = [
   "MSG_BT_SSID_DFLT=MSG_SSID_RUIM",
])

#-----------------------------------------
# Necessary Public API's
#-----------------------------------------
CORE_APIS = [
    'DEBUGTOOLS',
    'SERVICES',
    'STORAGE',
    'SYSTEMDRIVERS',
    'DAL',
    'SECUREMSM',
    'MPROC',
    'KERNEL',
    ]

GBA_PUBLIC_APIS = [
    'UIM',
    'COMMON',
    'UIMRMT',
    ]

# We need the UIM "inc" dirs
env.RequireRestrictedApi(['UIM'])

#-----------------------------------------
# Generate the library and add to an image
#-----------------------------------------
if 'USES_UIM_IOE' in env and 'USES_UIM_IOE_GBA' not in env:
  GBA_C_SOURCES = [
      '${BUILDPATH}/gba_stubs.c'
  ]
else:
  GBA_C_SOURCES = [
      '${BUILDPATH}/gba.c',
      '${BUILDPATH}/gba_bootstrap.c',
      '${BUILDPATH}/gba_cmd.c',
      '${BUILDPATH}/gba_http.c',
      '${BUILDPATH}/gba_http_cookie.c',
      '${BUILDPATH}/gba_key_gen.c',
      '${BUILDPATH}/gba_lib.c',
      '${BUILDPATH}/gba_lifetime.c',
      '${BUILDPATH}/gba_mmgsdi.c',
      '${BUILDPATH}/gba_nv.c',
      '${BUILDPATH}/gba_response.c',
      '${BUILDPATH}/gba_state.c',
      '${BUILDPATH}/gba_storage.c',
      '${BUILDPATH}/gba_time.c',
      '${BUILDPATH}/gba_timer.c',
      '${BUILDPATH}/gba_tmpi.c',
      '${BUILDPATH}/gba_util.c'
  ]

# Add our library to the MODEM_AMSS image
env.AddLibrary(['MODEM_MODEM','MOB_UIM'], '${BUILDPATH}/uim_gba', GBA_C_SOURCES)

# Load test units
env.LoadSoftwareUnits()

# Build image for which this task belongs
RCINIT_GBA = ['MODEM_MODEM','MOB_UIM']

# Start the GBA task and compile the GBA code for this PL and its
# derivatives/CPLs if it is not an IOE PL or if USES_UIM_IOE_GBA
# is enabled (for an IOE PL). However, on mob, we need to start GBA
# task to avoid introducing featurization in the UIM mob framework
if 'USES_UIM_IOE' in env and 'USES_UIM_IOE_GBA' not in env:
  RCINIT_GBA = ['MOB_UIM']
else:
  RCINIT_GBA = ['MODEM_MODEM','MOB_UIM']

# RC Init Function Dictionary
RCINIT_INIT_GBA = {
            'sequence_group'      : 'RCINIT_GROUP_4',
            'init_name'           : 'gba_task_init',
            'init_function'       : 'gba_task_init',
            'dependencies'        : []
    }

# RC Init Task Dictionary
RCINIT_TASK_GBA= {
            'thread_name'         : 'gba',
            'sequence_group'      : 'RCINIT_GROUP_4',
            'stack_size_bytes'    : '4096',
            'priority_amss_order' : 'GSDI_PRI_ORDER',
            'stack_name'          : 'gba_stack',
            'thread_entry'        : 'gba_main',
            'tcb_name'            : 'gba_tcb',
            'cpu_affinity'        : env.subst('$MODEM_CPU_AFFINITY')
    }

# Add init function to RCInit
if 'USES_MODEM_RCINIT' in env:
        env.AddRCInitTask(RCINIT_GBA, RCINIT_TASK_GBA)
        env.AddRCInitFunc(RCINIT_GBA, RCINIT_INIT_GBA)
