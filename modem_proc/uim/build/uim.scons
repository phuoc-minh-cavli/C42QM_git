#===============================================================================
# UIM Subsystem build script
# GENERAL DESCRIPTION
#    build script for modem/uim
#
#                        COPYRIGHT INFORMATION
#
# Copyright (c) 2010, 2012 - 2021, 2023 QUALCOMM Technologies, Inc (QTI) and its licensors.
# All Rights Reserved.  QUALCOMM Technologies Proprietary.
# Export of this technology or software
# is regulated by the U.S. Government. Diversion contrary to U.S. law prohibited.
#
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header:  $
#  $DateTime:  $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ----------------------------------------------------------
# 06/09/23   tq      Enabled support for ntnbetna.test
# 05/23/23   tq      Enabled support for sltentnbgetna and sntnbetna
# 02/14/23   shp     Enabled support for LTENTNBGETNA
# 07/07/21   tq      Enabled support for SIMLOCK
# 10/30/20   tq      Support for NBGENIA 
# 05/01/20   tq      Support for LTEE and LTENBE flavor
# 07/03/19   bcho    Support for LTEENA and LTENBENA flavor
# 03/05/19   tq      Enable UIM remote in all CT builds.
# 01/17/19   tq      Updating scons to enable IOE for 9205.rumiextpl.test
# 12/17/18   bcho    To not enable QMI UIM REMOTE without TZ memory map address
# 12/05/18   bcho    Updating scons to enable IOE for 9205.extpl
# 10/15/18   bcho    Updating scons to enable IOE for 9205.rumi.eval
# 10/08/18   bcho    Updating scons to enable IOE for 9205.ltengb
# 08/24/18   bcho    DS folder name change from datamodem to dataiot
# 08/20/18   dd      DS folder name change from datamodem to dataiot
# 07/19/18   bcho    Updating scons to enable IOE for 9607.extpl
# 06/25/18   dd      MOB CRM build support
# 01/12/18   vr      Enable UIM remote uses flag for ltenb build.
# 09/10/17   rps     Build flag for Simlock in IOE devices
# 06/27/17   ku      Build flag for remote feature
# 02/23/17   ku      Updating scons to enable IOE for 9607.dyn 
# 10/06/16   sn      uim support other LTENBG flavour 
# 12/28/16   ks      Enabling subscription manager
# 10/17/16   sn      LLVM 8.x migration for 9x65 changes and enabling low warnings for 9x55
# 10/07/16   sn      fix compilation error
# 10/06/16   sn      uim support for ltenb flavour 
# 09/13/16   me      Flag for UIM IOE
# 08/24/16   dt      Fix compilation error
# 06/09/16   lm      Fix compilation error
# 06/06/16   ssr     Enabled lcgioe and lwgniagioe flavor
# 05/30/16   bcho    Introduce support for SimLock fuse
# 05/19/16   lm      Added IOE LTE only specific flag for offtarget
# 05/16/16   lm      Enable IOE specific flag for offtarget
# 05/16/16   sam     Stub out UIM supply voltage indication code for IOE flavour
# 05/04/16   vdc     Enable SE13 hardcoded and EFS features for IOE
# 03/09/16   vdc     Add compilation dependency for FEATURE_SIMLOCK
# 03/08/16   SSR     Adding IOE variant build flavor flag
# 11/25/15   sp      Updated copyright
# 10/28/15   nr      Addition /pbm/inc/uim_pbm.h
# 06/17/15   vr      Enable MOB compiler warnings
# 02/26/15   tl      Introduce new GBA files
# 10/19/14   sk      Mark compile warnings as errors
# 07/15/14   kk      NV Refresh: MCFG - MMGSDI interactions
# 06/30/14   vv      Remove Perso code
# 06/10/14   vv      Enable Simlock UT
# 06/03/14   nk      Updates on when to turn warnings to errors
# 05/12/14   vv      Define FEATURE_UIM_SIMLOCK
# 04/01/14   av      Cleanup of NVRUIM headers
# 03/27/14   tl      Remove /simlock/test/inc path from MOB compilation
# 03/18/14   tl      Introduce new SIM Lock files
# 01/31/14   kk      Updates to include PBM UT TCs
# 06/01/14   df      Add common/inc folder
# 12/11/13   vs      Updates for QMI UIM Remote feature
# 11/20/13   nk      Updates to support PLI NMR Feature enablement
# 10/30/13   as      UIM Scons/API file clean up to remove violations
# 10/08/13   sam     changes for compatibility with the new LLVM compiler
# 09/23/13   vr      qtf-crm MOB migration
# 09/06/13   as      Changes to support PBM transition to UIM
# 08/09/13   kk      Deprecating uimcallctrl
# 05/02/13   nk      Added check so that compilation warnings will create a build error
# 04/30/13   yt      Remove non-existent paths
# 04/24/13   nk      Changes to fix compilation error
# 09/18/12   nk      Changes to support modem folder removal
# 10/11/10   nk      Updated with header
# 06/11/12   yt      Update for cust file refactoring
#
#===============================================================================
Import('env')

# Load cleanpack script:
import os
if os.path.exists('uim_cleanpack.py'):
   env.LoadToolScript('uim_cleanpack.py')

env.Replace(UIM_ROOT = '${INC_ROOT}/uim')

# Enable warnings -> errors for all LLVM toolchain (6.x.x) during migration
import os

# --------------------------------------------------------------------------- #
# Copy the CFLAGS list to a new environment for us                            #
# (the list is a reference when cloned, so use deepcopy)                      #
# --------------------------------------------------------------------------- #
import copy
orig_env = env
env = env.Clone()
env['CFLAGS'] = copy.deepcopy(orig_env['CFLAGS'])

# --------------------------------------------------------------------------- #
# Remove any "disables" from top-level                                        #
# --------------------------------------------------------------------------- #
if env['CFLAGS'].count('-Wno-low') > 0:
    env['CFLAGS'].remove('-Wno-low')
if env['CFLAGS'].count('-Wno-medium') > 0:
    env['CFLAGS'].remove('-Wno-medium')
if env['CFLAGS'].count('-Wno-high') > 0:
    env['CFLAGS'].remove('-Wno-high')
if env['CFLAGS'].count('-Wno-error') > 0:
    env['CFLAGS'].remove('-Wno-error')

# --------------------------------------------------------------------------- #
# Enable warnings -> errors for all                                           #
# --------------------------------------------------------------------------- #
env.Append(HEXAGONCC_WARN = ' -Werror')
env.Append(HEXAGONCXX_WARN = ' -Werror')

env.AddUsesFlags('USES_REMOTE_SIM',True)
env.AddUsesFlags('USES_UIM_IOE',False)
env.AddUsesFlags('USES_UIM_IOE_LWG',False)
env.AddUsesFlags('USES_UIM_IOE_L_ONLY',False)
env.AddUsesFlags('USES_SUB_MANAGER',False)
env.AddUsesFlags('USES_UIM_IOE_SIMLOCK',False)

if env['BUILD_ID'].startswith('9607.lcgioe'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  
if env['BUILD_ID'].startswith('9205.ltentnbgetna'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  
if env['BUILD_ID'].startswith('9607.lwgioe'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

if env['BUILD_ID'].startswith('9607.lteonly'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',True)

if env['BUILD_ID'].startswith('9607.lwgniagioe'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

if env['BUILD_ID'].startswith('9607.ltegsm'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

# LTENBNIAG, LTENB - LTE Only
if env['BUILD_ID'].startswith('9607.ltenb'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',True)
  env.AddUsesFlags('USES_UIM_IOE_LWG',False)

# LTENBG, LTENBGNIAG  - LTE + GSM\GPRS 
if env['BUILD_ID'].startswith('9607.ltenbg'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',False)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

# DYN - LTE + GSM\GPRS 
if env['BUILD_ID'].startswith('9607.dyn'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',False)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

# EXTPL - External Paging
if env['BUILD_ID'].startswith('9607.extpl'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',False)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

# 9205 - LTENBXX flavors
if env['BUILD_ID'].startswith('9205.ltenb'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',False)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

# 9205 - rumi
if env['BUILD_ID'].startswith('9205.rumi.eval'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',False)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

# 9205.EXTPL - External Paging
if env['BUILD_ID'].startswith('9205.extpl'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',False)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

# 9205.RUMIEXTPL.TEST - RUMI External Paging
if env['BUILD_ID'].startswith('9205.rumiextpl.test'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',False)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

# 9205 - LTEEXX flavor- LTEENA - NB and Geran compiled out. LTEE- LTE EXTPL with AUDIO and GPS
if env['BUILD_ID'].startswith('9205.ltee'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',False)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

# 9205 - LTENBE flavor
if env['BUILD_ID'].startswith('9205.ltenbe'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',False)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

# 9205 - LTENBENA flavor
if env['BUILD_ID'].startswith('9205.ltenbena'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',False)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)
  env.AddUsesFlags('USES_UIM_IOE_SIMLOCK',True)

# 9205 - NBGENIA flavor
if env['BUILD_ID'].startswith('9205.nbgenia'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  env.AddUsesFlags('USES_UIM_IOE_L_ONLY',False)
  env.AddUsesFlags('USES_UIM_IOE_LWG',True)

if env['BUILD_ID'].startswith('9205.sltentnbgetna'):
  env.AddUsesFlags('USES_UIM_IOE',True)

if env['BUILD_ID'].startswith('9205.sntnbetna'):
  env.AddUsesFlags('USES_UIM_IOE',True)
    
if env['BUILD_ID'].startswith('9205.ntnbetna.test'):
  env.AddUsesFlags('USES_UIM_IOE',True)
  
env.RequirePublicApi([
        'KERNEL',
        ],
        area='CORE')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='DATAIOT')

env.RequirePublicApi([
        'DAL',
        ],
        area='CORE')

env.RequirePublicApi([
        'PUBLIC',
        'MMCP',
        ],
        area='MMCP')

env.RequirePublicApi([
        'DEBUGTOOLS',
        ],
        area='CORE')

env.RequirePublicApi([
        'UIM',
        ],
        area='UIM')

env.RequirePublicApi([
        'MCS',
        ],
        area='MCS')

env.RequirePublicApi([
        'MEMORY',
        'SYSTEMDRIVERS',
        'SERVICES',
        ],
        area='CORE')

env.RequirePublicApi([
        'LTE',
        ],
        area='LTE')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='UIM')

env.RequirePublicApi([
        'MPROC',
        'STORAGE',
        ],
        area='CORE')

env.RequirePublicApi([
        'GERAN',
        ],
        area='GERAN')

env.RequirePublicApi([
        'WCDMA',
        ],
        area='WCDMA')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='HDR')

env.RequirePublicApi([
        'POWER',
        'WIREDCONNECTIVITY',
        'SECUREMSM',
        'BOOT',
        ],
        area='CORE')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='ONEX')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='GERAN')

env.RequirePublicApi([
        'PUBLIC',
        ],
        area='WCDMA')

env.RequirePublicApi([
        'CAT',
        'UIM',
        'PBM',
        'UIMRMT',
        'LOC',
        ],
        area='QMIMSGS')

env.RequirePublicApi([
        'MPOWER',
        ],
        area='MPOWER')

env.RequirePublicApi([
        'COMMON',
        ],
        area='RFA')


#next added manually
env.RequirePublicApi([
        'MYPS',
        ],
        area='MYPS')

env.RequirePublicApi([
        'TDSCDMA',
        ],
        area='TDSCDMA')

env.RequirePublicApi([
        'GPS',
        ],
        area='GPS')

env.RequirePublicApi([
        'WCDMA',
        ],
        area='FW')

env.RequirePublicApi([
        'MVS',
        ],
        area='AVS')

env.RequirePublicApi([
        'MCFG',
        ],
        area='MCFG')

env.RequireRestrictedApi(['VIOLATIONS'])




# cust file relocation
# Protected is "private within the SU" vs. Restricted with is visible to other SUs
env.PublishProtectedApi('UIM', [
        '${UIM_ROOT}/cust/inc',
        '${UIM_ROOT}/common/inc',
        '${UIM_ROOT}/mmgsdi/src',
        '${UIM_ROOT}/simlock/src',
        '${UIM_ROOT}/simlock/src/hw',
        '${UIM_ROOT}/simlock/inc',
        '${UIM_ROOT}/gstk/src',
        '${UIM_ROOT}/variation/inc',
        '${UIM_ROOT}/mmgsdi/inc',
        '${UIM_ROOT}/uimdrv/inc',
        '${UIM_ROOT}/gstk/inc',
        '${UIM_ROOT}/uimdrv/src',
        '${UIM_ROOT}/uimdiag/inc',
        '${UIM_ROOT}/gba/src',
        '${UIM_ROOT}/estk/src',
        '${UIM_ROOT}/estk/inc',
        '${UIM_ROOT}/pbm/src',
        '${UIM_ROOT}/pbm/inc',
        '${UIM_ROOT}/uimqmi/src',
        '${UIM_ROOT}/uimqmi/inc',
        '${UIM_ROOT}/uimdiag/src',
        '${UIM_ROOT}/uimdrv/src/enumeration',
        '${UIM_ROOT}/uimdrv/src/hw/interruptctrl',
        '${UIM_ROOT}/uimdrv/src/hw/uartdm',
        '${UIM_ROOT}/uimdrv/src/hw/clkregime',
        '${UIM_ROOT}/uimdrv/src/hw/gpio_tlmm',
        '${UIM_ROOT}/uimdrv/src/hw/pmic',
        '${UIM_ROOT}/uimdrv/src/hw/rumi',
        '${UIM_ROOT}/nvruim/inc',
        ])

if 'USES_MOB' in env:
        env.PublishProtectedApi('UIM', [
                '${UIM_ROOT}/offtarget/test_framework/gstk/test/inc',
                '${UIM_ROOT}/offtarget/test_framework/pbm/test/inc',
                '${UIM_ROOT}/offtarget/test_framework/uimqmi/test/inc',
                '${UIM_ROOT}/offtarget/test_framework/gba/test/inc',
                '${UIM_ROOT}/offtarget/test_framework/mmgsdi/test/inc',
                '${UIM_ROOT}/offtarget/test_framework/mmgsdi/test/test_fuzz',
                '${UIM_ROOT}/offtarget/test_framework/simlock/test/inc',
                '${UIM_ROOT}/offtarget/build/cust/inc',
                '${UIM_ROOT}/offtarget/emulation/virtsat/inc',
                '${UIM_ROOT}/offtarget/emulation/virtuim/inc',
                '${UIM_ROOT}/offtarget/test_framework/nvruim/inc' ,
                '${UIM_ROOT}/offtarget/emulation/stubs/inc',
                '${UIM_ROOT}/offtarget/test_framework/uimdrv/test/uimutfrm/inc',
                ])

# Require these for all components within the SU as they all have compile time
# variation.  In the future this can be pushed down to the component .scons
# files only for components that have compile time variation.
env.RequireProtectedApi(['UIM'])


env.PublishPrivateApi('VIOLATIONS',[
        '${INC_ROOT}/wcdma/mac/inc',
        '${INC_ROOT}/wcdma/l1/offline/inc',
        '${INC_ROOT}/wcdma/rlc/inc',
        '${INC_ROOT}/wcdma/variation/inc',
        '${INC_ROOT}/wcdma/cust/inc',
        '${INC_ROOT}/utils/api/a2',
        ])

if 'USES_MOB' in env:
    env.Replace(MSVC_WARN = "/W4 /wd4127 /wd4341 /wd4309 /wd4201 /wd4512 /wd4214 /analyze")

if 'USES_UIM_IOE' not in env:
  env.Append(CFLAGS = '-DFEATURE_UIM_T_1_SUPPORT ')
  env.Append(CFLAGS = '-DFEATURE_SIMLOCK')
else:
  env.Append(CFLAGS = '-DFEATURE_UIM_IOE ')
  if 'USES_UIM_IOE_SIMLOCK' in env:
    env.Append(CFLAGS = '-DFEATURE_SIMLOCK')

if 'USES_UIM_IOE' in env:
  env.Append(CFLAGS = '-DFEATURE_MMGSDI_SE13_FROM_HARDCODED_ONLY ')
  env.Append(CFLAGS = '-DFEATURE_MMGSDI_SE13_FROM_EFS_ONLY ')

if 'USES_UIM_IOE' not in env:
  env.AddUsesFlags('USES_UIM_SUPPLY_VOLTAGE_NOTIFICATIONS',True)

if 'USES_MOB' in env:
  if 'USES_UIM_IOE_LWG' in env or 'USES_UIM_IOE_L_ONLY' in env:
     env.Append(CPPDEFINES = ['FEATURE_UIM_IOE_DISABLE_CSIM_RUIM'])
     env.Append(CFLAGS = '-DFEATURE_UIM_IOE_DISABLE_CSIM_RUIM ')

if 'USES_MOB' in env and 'USES_UIM_IOE_L_ONLY' in env:
     env.Append(CPPDEFINES = ['FEATURE_UIM_DISABLE_NON_IOE_L_ONLY_TC'])
     env.Append(CFLAGS = '-DFEATURE_UIM_DISABLE_NON_IOE_L_ONLY_TC ')

if 'USES_SUB_MANAGER' in env:
    env.Append(CFLAGS = '-DFEATURE_UIM_DS_SUBSCRIPTION_MANAGER ')
    env.Append(CFLAGS = '-DFEATURE_UIM_ENABLE_SLOT2 ')

if 'USES_REMOTE_SIM' in env:
    env.Append(CFLAGS = '-DFEATURE_UIM_BTSAP_CLIENT')
    env.Append(CFLAGS = '-DFEATURE_UIM_REMOTE_UIM')

env.LoadSoftwareUnits()
