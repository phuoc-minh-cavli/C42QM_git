#====include path optimized=====================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2011 - 2019 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //components/rel/rftech_gnss.mpss/2.10/build/modem_rfa_gnss.scons#1 $
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 03/05/19   sk      RF PAGE ONLY changes for NB/CATM
# 12/16/14   tod     - O2 compiler optimization on hexagon 6.4.04 and greater toolchains
# 10/20/14   chenh   Enabled compiler warings to errors
# 10/16/14   dej     Clean-up SCons and add support for TABASCO
# 10/06/13   ra      Support RFLM CCS 
# 07/10/13   aro     Published RF Factory API
# 03/14/13   sar     Fixed compiler errors in APQ target. 
# 10/30/12   sar     Created
#===============================================================================

Import('env')

#usage:  ENV_UPDATE_RFA=CHIPSET,=mdm9x15,USES_NO_DEBUG,delete,USES_HI_SPEED,add
if ARGUMENTS.get('ENV_UPDATE_RFA'):
   
   env_update_string    = ARGUMENTS.get('ENV_UPDATE_RFA')
        
   env_update_list      = env_update_string.split(',')
        
   item_total           = len(env_update_list)
        
   list_index           = 0
   
   #note if list is not even number of items, last odd item is ignored
   while list_index < item_total-1:
                 
      item            = env_update_list[list_index]  
      value           = env_update_list[list_index+1]
      list_index      += 2
                                              
      if(value == 'add'):
         env[str(item)] = 'yes'
         print "adding",item,"to env"                                          
                
      elif(value == 'delete'):
         del env[str(item)]
         print "deleting",item,"from env"
      
      else:
         if(value[0] != '='):
            print "missing leading = in",value
            print "not updating ",item
                 
         else:
            value2 = value[1:len(value)]
            env[str(item)] = value2
            print "now setting",item,value

#end command line option processing

if 'MODEM_PAGEONLY' in env['BUILD_TAGS']:
    env.Append(CPPDEFINES = 'FEATURE_RF_LTE_PAGE_ONLY')
    if('USES_GSM' in env):
        del env['USES_GSM']
    build_tags = ['MODEM_MODEM', 'MOB_RFA', 'MOB_RFDEVICE']
    for tag in build_tags :
        env[tag] = True

if env.PathExists('${INC_ROOT}/rfa'):
    env.Replace(RF_ROOT = '${INC_ROOT}/rfa')
else:
    env.Replace(RF_ROOT = '${INC_ROOT}/modem/rfa')

env.Replace(RFTECH_GNSS_ROOT = env.GetBuildPath(Dir('..')))


#The order of APIs in the rfa_public_api_list determines the order the paths are listed on the build command line.
#To optimize build times the API list is sorted in descending order of use.

rfa_public_api_list = [
        ('CORE',                'SYSTEMDRIVERS'),
        ('CORE',                'KERNEL'),
        ('RFA',                 'COMMON'),
        ('CORE',                'DAL'),
        ('RFDEVICE_INTERFACE',  'RFDEVICE_INTERFACE'),
        ('RFA',                 'CDMA'),
#        ('MMCP',                'PUBLIC'),
        ('MCS',                 'MCS'),
        ('LTE',                 'LTE'),
        ('MMCP',                'MMCP'),
        ('FW',                  'RF'),
        ('FW',                  'WCDMA'),
        ('FW',                  'C2K'),
        ('FW_CCS',              'FW_CCS'),
        ('FW_COMMON',           'FW_COMMON'),
        ('FW_WCDMA',            'FW_WCDMA'),
        ('FW_C2K',              'FW_C2K'),
        ('RFA',                 'MEAS'),
        ('CORE',                'DEBUGTOOLS'),
        ('GERAN',               'GERAN'),
#        ('GERAN_RFA',           'DEPRECATED'),
        ('RFA',                 'GSM'),
        ('RFA',                 'LM'),
        ('RFA',                 'LTE'),
        ('FW',                  'TARGET'),
        ('FW_GERAN',            'FW_GERAN'),
        ('FW',                  'GERAN'),
        ('CORE',                'MPROC'),
        ('CORE',                'MEMORY'),
        ('CORE',                'SERVICES'),
        ('RFA',                 'WCDMA'),
        ('CORE',                'POWER'),
        ('ONEX',                'PUBLIC'),
        ('RFNV',                'RFNV'),
        ('RFFACTORY',           'RFFACTORY'),
        ('RFDEVICE_WTR1605',    'RFDEVICE_WTR1605'),
        ('RFDEVICE_SDR105',     'RFDEVICE_SDR105'),
        ('RFDEVICE_TRX',        'RFDEVICE_TRX'),
        ('FW',                  'LTE'),
        ('FW_LTE',              'FW_LTE'),
        ('WCDMA',               'WCDMA'),
        ('FW',                  'TDSCDMA'),
        ('FW_TDSCDMA',          'FW_TDSCDMA'),
        ('RFA',                 'GNSS'),
        ('UTILS',               'OSYS'),
        ('AVS',                 'MVS'),
        ('HDR',                 'HDR'),
        ('TDSCDMA',             'TDSCDMA'),
        ('RFA',                 'TDSCDMA'),
        ('ONEX',                'ONEX'),
        ('CORE',                'BUSES'),
        ('WCDMA',               'PUBLIC'),
        ('UIM',                 'UIM'),
        ('CORE',                'STORAGE'),
        ('RFDEVICE_QFE1320',    'RFDEVICE_QFE1320'),
        ('UTILS',               'A2'),
        ('UIM',                 'PUBLIC'),
        ('GPS',                 'GPS'),
        ('RFDEVICE_WTR2605',    'RFDEVICE_WTR2605'),
        ('MCS',                 'PUBLIC'),
        ('HDR',                 'PUBLIC'),
        ('MPOWER',              'MPOWER'),
        ('TDSCDMA',             'PUBLIC'),
        ('RFDEVICE_WFR2600',    'RFDEVICE_WFR2600'),
        ('CORE',                'HWENGINES'),
        ('RFA_RF',              'TUNER'),
        ('QMIMSGS',             'RFRPE'),
        ('UTILS',               'COMMON'),
        ('RFTECH_GSM',          'RFTECH_GSM'),
        ('RFTECH_GNSS',         'RFTECH_GNSS'),
        ]

for api_area,api_name in rfa_public_api_list:
    env.RequirePublicApi([api_name], area=api_area)

env.RequireRestrictedApi(['RFTECH_GNSS_VIOLATONS'])

env.RequirePublicApi(['RFMODEM'],area=env.get('RF_GLOBALS')['RFMODEM_AREA'])

env.RequirePublicApi([
        'RF',
        'COMMON',
        ],
        area='FW')

env.RequirePublicApi([
        'FW_CCS',
        ],
        area='FW_CCS')

env.RequirePublicApi([
        'FW_COMMON',
        ],
        area='FW_COMMON')

env.RequirePublicApi([
        'MCS',
        ],
        area='MCS')

env.RequirePublicApi([
        'RFA',
        ],
        area='RFA')

env.RequirePublicApi([
        'RFTECH_GNSS',
        ],
        area='RFTECH_GNSS')

env.RequirePublicApi(['RFLM'],area='RFLM')		

env.PublishProtectedApi('RFTECH_GNSS', [
                        '${RFTECH_GNSS_ROOT}/cust/inc',
                        '${RFTECH_GNSS_ROOT}/variation/inc',
                        ])

env.RequireProtectedApi(['RFTECH_GNSS'])

if 'USES_FTM_HWTC_DEBUG_ONLY_SECURITY_HOLE' in env:
                print "Add USES_FTM_HWTC"
                env.Replace(USES_FTM_HWTC = 'yes')
                print "Enable FEATURE_FTM_HWTC"
                env.Append(CPPDEFINES = ['FEATURE_FTM_HWTC'])

#-------------------------------------------------------------------------------
# Enable warnings -> errors
if env.get('CHIPSET') == 'mdm9x35':
  if 'USES_STANDALONE_FW' not in env and 'USES_RF_TEST_APP' not in env and 'USES_INTERNAL_BUILD' in env:
     env = env.Clone(HEXAGONCC_WARN = "${HEXAGONCC_WARN} -Werror", 
                     HEXAGONCXX_WARN = "${HEXAGONCCXX_WARN} -Werror")	

#----------------------------------------------------------------------------#
# Remove this line and if statement once 6.4.04 toolchain has been released
if env['HEXAGON_RTOS_RELEASE'] >= '6.4.04':
   # Enable -O2 optimization
   env.Replace(HEXAGONCC_OPT = "${HEXAGON_OPT_2}")

#----------------------------------------------------------------------------#
# Export Protected API to RFTECH_GNSS folder. This will be visible only within
# RFTECH_GNSS folder
#----------------------------------------------------------------------------#
env.PublishProtectedApi( 'RFTECH_GNSS_INC', [
    '${RFTECH_GNSS_ROOT}/gen8/ftm/inc',
    '${RFTECH_GNSS_ROOT}/gen8/rf/rfc/inc',
    '${RFTECH_GNSS_ROOT}/gnss/gen8/hwtc/inc',
    ])

env.PublishProtectedApi( 'RFTECH_GNSS_SRC', [
#    '${RFTECH_GNSS_ROOT}/gen8/ftm/src',
    '${RFTECH_GNSS_ROOT}/gen8/rf/core/src',
    '${RFTECH_GNSS_ROOT}/protected',
#    '${RFTECH_GNSS_ROOT}/gen8/rf/mc/src',
#    '${RFTECH_GNSS_ROOT}/gen8/rf/rfc/src',
    ])

env.PublishProtectedApi( 'RFTECH_GNSS_PROTECTED', [
    '${RFA_GNSS_ROOT}/gen8/hwtc/protected',
    ])

env.PublishProtectedApi( 'RFC_TARGET_INC', [
    '${RF_ROOT}/rfc/target/${CHIPSET}/inc',
    ])

env.RequireProtectedApi(['RFTECH_GNSS_INC'])


env.RequireProtectedApi(['RFTECH_GNSS_SRC'])


env.RequireProtectedApi(['RFC_TARGET_INC'])

LIB_NAME        = 'rftech_gnss'
IMAGE_SOURCES   = ['MODEM_MODEM','MOB_RFA']
LIB_PROTECTED   = 'protected'

from glob import glob
env = env.Clone()

SRCPATH = ".."
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

# Initialize empty lists
BINARY_LIB_SOURCES = [ ]
SOURCE_FILES = [ ] 

#find all .cpp files 
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))

for filename in SOURCE_FILES:
        BINARY_LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))

env.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_protected', [BINARY_LIB_SOURCES])

env.LoadSoftwareUnits( ) 
