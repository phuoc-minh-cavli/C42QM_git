<?xml version="1.0" encoding="UTF-8"?>
<!--
===============================================================================

  Copyright (c) 2013-2017 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.

===============================================================================
-->

<tns:fuseblower xmlns:tns="http://www.qualcomm.com/fuseblower"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://www.qualcomm.com/fuseblower ../xsd/fuseblower.xsd">
    <metadata>
        <chipset>lahaina</chipset>
        <version>1.0</version>
    </metadata>

    <module id="SECURITY_CONTROL_CORE">
        <base_address>0x00780000</base_address>
        <description></description>

        <fuse_region id="QFPROM_RAW_RD_PERM">
            <description></description>
            <fuse ignore="false" n="0">
                <address>0x007801A0</address>
                <operation>BLOW</operation>
                <field id="SEC_KEY_DERIVATION_KEY">
                    <description>
                        Blow this bit after the SKDK has been provisioned to secure the secondary key from being read
                        back. A secure path hardware exists from SKDK to the crypto engine.
                    </description>
                    <value>0x1</value>
                    <bits>24</bits>
                </field>
            </fuse>
        </fuse_region>

        <fuse_region id="QFPROM_RAW_WR_PERM">
            <description></description>
            <fuse ignore="false" n="0">
                <address>0x007801A8</address>
                <operation>BLOW</operation>
                <field id="RD_PERM">
                    <description>
                        Disables further QFPROM changes to the this region. Blow this bit after the region has been
                        completely provisioned.
                    </description>
                    <value>0x1</value>
                    <bits>6</bits>
                </field>
                <field id="WR_PERM">
                    <description>
                        Disables further QFPROM changes to the this region. Blow this bit only if no further changes to
                        Write Permissions are needed.
                    </description>
                    <value>0x0</value>
                    <bits>7</bits>
                </field>
                <field id="FEC_WR">
                    <description>
                        Disables further QFPROM changes to the this region. Blow this bit after the region has been
                        completely provisioned.
                    </description>
                    <value>0x1</value>
                    <bits>8</bits>
                </field>
                <field id="OEM_CONFIG">
                    <description>
                        Disables further QFPROM changes to the this region. Blow this bit after the region has been
                        completely provisioned.
                    </description>
                    <value>0x1</value>
                    <bits>9</bits>
                </field>
                <field id="PK_HASH0">
                    <description>
                        Disables further QFPROM changes to the this region. Blow this bit after the region has been
                        completely provisioned.
                    </description>
                    <value>0x1</value>
                    <bits>17</bits>
                </field>
                <field id="OEM_SEC_BOOT">
                    <description>
                        Disables further QFPROM changes to the this region. Blow this bit after the region has been
                        completely provisioned.
                    </description>
                    <value>0x1</value>
                    <bits>23</bits>
                </field>
                <field id="SEC_KEY_DERIVATION_KEY">
                    <description>
                        Disables further QFPROM changes to the this region. Blow this bit after the region has been
                        completely provisioned.
                    </description>
                    <value>0x1</value>
                    <bits>24</bits>
                </field>
            </fuse>
        </fuse_region>

        <fuse_region id="QFPROM_RAW_OEM_CONFIG">
            <description></description>
            <fuse ignore="false" n="0">
                <address>0x007801B8</address>
                <operation>BLOW</operation>
                <field id="E_DLOAD_DISABLE">
                    <description>
                        OEM Optional. Disables emergency download via removable SD and/or USB downloader in Apps PBL
                        error handler.
                    </description>
                    <value>0x0</value>
                    <bits>0</bits>
                </field>
                <field id="ENUM_TIMEOUT">
                    <description>
                        OEM optional. BOOT ROM must support USB enumeration timeout. Timeout applies to both enumeration
                        for FLCB (fast low current boot) and USB download mode. If USB is not enumerated within time (90
                        seconds); quit USB enumeration If USB suspend or disconnected after enumeration; start timer
                        again.
                    </description>
                    <value>0x0</value>
                    <bits>1</bits>
                </field>
                <field id="FORCE_DLOAD_DISABLE">
                    <description>
                        OEM optional. If FORCE_DLOAD_DISABLE is '0'; device goes to download mode if an error occurs
                        very early in XBL1. If FORCE_DLOAD_DISABLE is set to '1'; device goes into cold boot if an error
                        occurs very early in XBL1.
                    </description>
                    <value>0x0</value>
                    <bits>2</bits>
                </field>
                <field id="SDCC_ADMA_DISABLE">
                    <description>
                        0 - ADMA mode enabled
                        1 - ADMA mode disabled
                    </description>
                    <value>0x0</value>
                    <bits>4</bits>
                </field>
                <field id="FAST_BOOT">
                    <description>These fuses are used by boot code to specify which device has priority to be booted
                        from. For SM8350, the mapping is as follows:
                        00000: Default (UFS HS G1 -> SD -> eDL (eDL path- USB only))
                        00001: SD -> UFS HS G1 -> eDL (eDL path USB only)
                        00010: SD -> eDL (eDL path- USB only)
                        00011: USB -> eDL (eDL path- SD then USB)
                        00100: QSPI -> eDL (eDL path- SD then USB)
                        00101: SPI -> eDL (eDL path- SD then USB)
                        00110: UFS HS G1 -> eDL(eDL path- SD then USB)
                        00111: UFS HS G1 -> SD -> eDL(eDL path- USB only)
                        Others are reserved.
                    </description>
                    <value>0x0</value>
                    <bits>9:5</bits>
                </field>
                <field id="PBL_QSPI_BOOT_EDL_ENABLED">
                    <description>
                        When fuse is blown, EDL Path will be QSPI->SD->USB else the EDL path will be as before SD->USB.
                    </description>
                    <value>0x0</value>
                    <bits>10</bits>
                </field>
                <field id="SPI_CLK_BOOT_FREQ">
                    <description>
                        Default is 37.5 MHz and when blown 19.2 MHz.
                    </description>
                    <value>0x0</value>
                    <bits>11</bits>
                </field>
                <field id="SW_FUSE_PROG_DISABLE">
                    <description>
                        It is recommended not to blow this fuse. This fuse disables the ability to blow any more fuses
                        through software. If desired to be blown; this should be blown at the end. Redundant with write
                        permission fuses.
                    </description>
                    <value>0x0</value>
                    <bits>12</bits>
                </field>
                <field id="PBL_FDL_TIMEOUT_RESET_FEATURE_ENABLE">
                    <description>Fuse bit to reset device if PBL enters into EDL mode unintentionally.</description>
                    <value>0x0</value>
                    <bits>13</bits>
                </field>
                <field id="WDOG_EN">
                    <description>
                        Prevents WDOG_DISABLE GPIO from disabling WDOG. Frees up the GPIO and prevents potential for
                        abuse by attacker.
                    </description>
                    <value>0x0</value>
                    <bits>14</bits>
                </field>
                <field id="PBL_LOG_DISABLE">
                    <description>
                        Used for controlling logging mechanism in PBL. '1' To limit the information collected in PBL
                        logs.
                    </description>
                    <value>0x0</value>
                    <bits>15</bits>
                </field>
                <field id="PBL_USB_TYPE_C_DISABLE">
                    <description>
                        Disables type-C functionality during PBL. PBL communication/enumeration happens over USB0_SS
                        only. USB1_SS cannot be used.
                    </description>
                    <value>0x0</value>
                    <bits>16</bits>
                </field>
                <field id="ROOT_CERT_TOTAL_NUM">
                    <description>
                        Defines the total root cert number supported from the certificate (Upto 4 roots).
                    </description>
                    <value>0x0</value>
                    <bits>18:17</bits>
                </field>
                <field id="USB_SS_DISABLE">
                    <description>Used to disable USB SS enumeration during Boot</description>
                    <value>0x0</value>
                    <bits>22</bits>
                </field>
                <field id="DEBUG_DISABLE_IN_ROM">
                    <description>
                        This fuse is used to disable X509 OU Field Parsing. For now only disabling of Crash dump OU
                        Field is done.
                    </description>
                    <value>0x0</value>
                    <bits>25</bits>
                </field>
                <field id="SP_DISABLE">
                    <description>Disables Secure Processor. There is also a QC equivalent fuse.</description>
                    <value>0x0</value>
                    <bits>27</bits>
                </field>
                <field id="DEBUG_POLICY_DISABLE">
                    <description>
                        Debug Policy is bypassed when this bit is 1. Debug Policy provides a means to re-enable debug
                        capabilities under OEM-specified selectable conditions.
                    </description>
                    <value>0x0</value>
                    <bits>28</bits>
                </field>
                <field id="ALL_DEBUG_DISABLE">
                    <description>
                        This fuse permanently disables all debug of the chip. It is not recommended to blow this bit. No
                        RMAs are possible after this fuse is blown.
                    </description>
                    <value>0x0</value>
                    <bits>29</bits>
                </field>
                <field id="SHARED_QSEE_SPIDEN_DISABLE">
                    <description>
                        Shared QSEE Secure Invasive Debug Disable bucket. This OEM controlled fuse can be overridden by
                        the corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>30</bits>
                </field>
                <field id="SHARED_QSEE_SPNIDEN_DISABLE">
                    <description>
                        Shared QSEE Secure Non-invasive Debug Disable bucket. This OEM controlled fuse can be overridden
                        by the corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>31</bits>
                </field>
                <field id="SHARED_MSS_DBGEN_DISABLE">
                    <description>
                        Shared MSS Invasive Debug Disable bucket. This OEM controlled fuse can be overridden by the
                        corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>32</bits>
                </field>
                <field id="SHARED_MSS_NIDEN_DISABLE">
                    <description>
                        Shared MSS Non-invasive Debug Disable bucket. This OEM controlled fuse can be overridden by the
                        corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>33</bits>
                </field>
                <field id="SHARED_CP_DBGEN_DISABLE">
                    <description>
                        Shared CP Invasive Debug Disable bucket. This OEM controlled fuse can be overridden by the
                        corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>34</bits>
                </field>
                <field id="SHARED_CP_NIDEN_DISABLE">
                    <description>
                        Shared CP Non-invasive Debug Disable bucket. This OEM controlled fuse can be overridden by the
                        corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>35</bits>
                </field>
                <field id="SHARED_NS_DBGEN_DISABLE">
                    <description>
                        Shared NS Invasive Debug Disable bucket. This OEM controlled fuse can be overridden by the
                        corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>36</bits>
                </field>
                <field id="SHARED_NS_NIDEN_DISABLE">
                    <description>
                        Shared NS Non-invasive Debug Disable bucket. This OEM controlled fuse can be overridden by the
                        corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>37</bits>
                </field>
                <field id="APPS_DBGEN_DISABLE">
                    <description>
                        Blow this bit for secure solution. Disables APPS global invasive (JTAG and monitor
                        mode) debug capabilities. Can be overridden by OVERRIDE registers.
                    </description>
                    <value>0x0</value>
                    <bits>38</bits>
                </field>
                <field id="APPS_NIDEN_DISABLE">
                    <description>
                        Blow this bit for secure solution. Disables the APPS global non-invasive (trace and performance
                        monitoring) debug capabilities. Can be overridden with OVERRIDE registers.
                    </description>
                    <value>0x0</value>
                    <bits>39</bits>
                </field>
                <field id="SHARED_MISC_DEBUG_DISABLE">
                    <description>
                        Shared Misc Debug Disable bucket. This OEM controlled fuse can be overridden by the corresponding
                        QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>40</bits>
                </field>
                <field id="SHARED_MISC1_DEBUG_DISABLE">
                    <description>
                        Shared Misc1 Debug Disable bucket. This OEM controlled fuse can be overridden by the
                        corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>41</bits>
                </field>
                <field id="SHARED_MISC2_DEBUG_DISABLE">
                    <description>
                        Shared Misc2 Debug Disable bucket. This OEM controlled fuse can be overridden by the
                        corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>42</bits>
                </field>
                <field id="SHARED_MISC3_DEBUG_DISABLE">
                    <description>
                        Shared Misc3 Debug Disable bucket. This OEM controlled fuse can be overridden by the
                        corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>43</bits>
                </field>
                <field id="SHARED_MISC4_DEBUG_DISABLE">
                    <description>
                        Shared Misc4 Debug Disable bucket. This OEM controlled fuse can be overridden by the
                        corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>44</bits>
                </field>
                <field id="SHARED_MISC5_DEBUG_DISABLE">
                    <description>
                        Shared Misc5 Debug Disable bucket. This OEM controlled fuse can be overridden by the
                        corresponding QC fuse.
                    </description>
                    <value>0x0</value>
                    <bits>45</bits>
                </field>
                <field id="SP_ARI_TEST_MODE_FEATURE_ENABLE">
                    <description>
                        SPU ARI Test ode s a special feature to assist in development, testing and manufacturing of
                        devices that uses SPU and ARI. In ARI Test Mode, SPU places a limit on the number of fuses ARI
                        uses but SPU NVM is fully functional. If the fuse usage limit is reached, SPU NVM will continue
                        to function but replay protection will not be provided. If this feature is enabled, OEMs must
                        turn off Test Mode using a software API, for any shipping device. This fuse enables this
                        feature.
                    </description>
                    <value>0x0</value>
                    <bits>46</bits>
                </field>
                <field id="SP_ARI_SUSPENSION_MODE_FEATURE_ENABLE">
                    <description>
                        SPU ARI Suspension allows the temporary suspension of ARI, so no further fuses will be consumed
                        beyond the next Power on Reset (PoR). This fuse enables this feature.
                    </description>
                    <value>0x0</value>
                    <bits>47</bits>
                </field>
            </fuse>
            <fuse ignore="false" n="1">
                <address>0x007801C0</address>
                <operation>BLOW</operation>
                <field id="SP_NVM_AR_CONFIG">
                    <description>
                        NVM configuration for SP-ARI
                        0x0: Not configured.
                        0x1: Capacitor not populated.
                        0x2: Capacitor populated.
                        0x3: Reserved.
                    </description>
                    <value>0x0</value>
                    <bits>2:1</bits>
                </field>
                <field id="SP_FIPS_ENABLE">
                    <description>ENABLE FIPS mode for SPU. Disable by Default and blow to enable</description>
                    <value>0x0</value>
                    <bits>3</bits>
                </field>
                <field id="TZ_SW_CRYPTO_FIPS_ENABLE">
                    <description>
                        Set to '1' to enable TZ FIPS certifiable mode.If OEM needs to evaluate FIPS (for performance,
                        security etc), do not enable this fuse. Set OEM devcfg oem_is_fips_enabled_for_test = 1.
                        Note: The fuse value and the specific crypto version are required to claim for FIPS validated
                        module. Once this is enabled through fuse, the device will be placed in FIPS mode and cannot be
                        reverted.
                    </description>
                    <value>0x0</value>
                    <bits>4</bits>
                </field>
                <field id="SPU_IAR_ENABLED">
                    <description>
                        Enable the activation of Insider Attack Resistance (IAR), a feature of Android's Keymaster
                        strongbox in SPU. Blowing this fuse is a pre-requisite to enabling IAR through a SPU API.
                    </description>
                    <value>0x0</value>
                    <bits>10</bits>
                </field>
                <field id="EKU_ENFORCEMENT_EN">
                    <description>
                        When this fuse is blown will enable enforcement of the EKU field in the certificate.
                    </description>
                    <value>0x0</value>
                    <bits>30</bits>
                </field>
                <field id="DISABLE_RSA">
                    <description>
                        When this bit is 0 and signed image type is RSA => RSA OPERATION
                        When this bit is 0 and signed image type is ECC => ECC OPERATION
                        When this bit is 1 and signed image type is RSA => Error
                        When this bit is 1 and signed image type is ECC => ECC OPERATION
                    </description>
                    <value>0x0</value>
                    <bits>31</bits>
                </field>
                <field id="OEM_HW_ID">
                    <description></description>
                    <value>0x0000</value>
                    <bits>47:32</bits>
                </field>
                <field id="OEM_PRODUCT_ID">
                    <description></description>
                    <value>0x0000</value>
                    <bits>63:48</bits>
                </field>
            </fuse>
            <fuse ignore="false" n="2">
                <address>0x007801C8</address>
                <operation>BLOW</operation>
                <field id="PERIPH_PID">
                    <description></description>
                    <value>0x0</value>
                    <bits>15:0</bits>
                </field>
                <field id="PERIPH_VID">
                    <description></description>
                    <value>0x0</value>
                    <bits>31:16</bits>
                </field>
                <field id="ANTI_ROLLBACK_FEATURE_ENABLE">
                    <description>
                        Bit 0 - BOOT_ANTI_ROLLBACK_EN
                        Bit 1 - TZAPPS_ANTI_ROLLBACK_EN
                        Bit 2 - PILSUBSYS_ANTI_ROLLBACK_EN
                        Bit 3 - MSA_ANTI_ROLLBACK_EN
                        Bit 4 - Reserved
                        Bit 5 - Reserved
                        Bit 6 - Reserved
                        Bit 7 - Reserved
                    </description>
                    <value>0xF</value>
                    <bits>39:32</bits>
                </field>
            </fuse>
        </fuse_region>

        <fuse_region id="QFPROM_RAW_FEC_EN">
            <description></description>
            <fuse ignore="false" n="0">
                <address>0x007801B0</address>
                <operation>BLOW</operation>
                <field id="REGION23_FEC_EN">
                    <description>
                        Blow to enable FEC for OEM Secure Boot region. Ensure that complete region is provisioned
                        before FEC is enabled.
                    </description>
                    <value>0x1</value>
                    <bits>23</bits>
                </field>
                <field id="REGION24_FEC_EN">
                    <description>
                        Blow to enable FEC for Secondary KDF key. Ensure that complete region is provisioned before FEC
                        is enabled.
                    </description>
                    <value>0x1</value>
                    <bits>24</bits>
                </field>
            </fuse>
        </fuse_region>

        <fuse_region id="QFPROM_RAW_OEM_SEC_BOOT">
            <description></description>
            <fuse ignore="false" n="0">
                <address>0x00780668</address>
                <operation>BLOW</operation>
                <field id="SEC_BOOT1_ROM_PK_Hash_Index">
                    <description>
                        If PK_HASH_IN_FUSE = '0'; this value selects which root certificate hash to use from the ROM
                        table.
                    </description>
                    <value>0x0</value>
                    <bits>3:0</bits>
                </field>
                <field id="SEC_BOOT1_PK_Hash_in_Fuse">
                    <description>
                        For boot configuration 1 (Apps): If this bit is '0' use the internal ROM hash index and
                        OEM_SECURE_BOOT1_ROM_PK_HASH_IDX[3:0] for the root certificate hash. If this bit is '1' use the
                        value stored in OEM_PK_HASH for the root certificate hash.
                    </description>
                    <value>0x0</value>
                    <bits>4</bits>
                </field>
                <field id="OEM_SECURE_BOOT1_AUTH_EN">
                    <description>
                        Blow this bit to enable secure boot for apps and other peripheral images. When this bit is '1';
                        enables authentication for any code that references secure boot configuration 1.
                    </description>
                    <value>0x0</value>
                    <bits>5</bits>
                </field>
                <field id="SEC_BOOT1_Use_Serial_Num">
                    <description>
                        If this bit is '1' then the unique device serial number is required in the authentication of
                        code for boot configuration 1.
                    </description>
                    <value>0x0</value>
                    <bits>6</bits>
                </field>
                <field id="SEC_BOOT2_PK_Hash_in_Fuse">
                    <description>
                        For boot configuration 2 (MBA):If this bit is '0' use the internal ROM hash index and
                        OEM_SECURE_BOOT1_ROM_PK_HASH_IDX[3:0] for the root certificate hash. If this bit is '1' use the
                        value stored in OEM_PK_HASH for the root certificate hash.
                    </description>
                    <value>0x0</value>
                    <bits>12</bits>
                </field>
                <field id="OEM_SECURE_BOOT2_AUTH_EN">
                    <description>
                        Blow this bit to enable secure boot for MBA. When this bit is '1'; enables authentication for
                        any code that references secure boot configuration 2.
                    </description>
                    <value>0x0</value>
                    <bits>13</bits>
                </field>
                <field id="SEC_BOOT3_PK_Hash_in_Fuse">
                    <description>Set this bit to '1' if OEM_SECURE_BOOT1_AUTH_EN = '1'</description>
                    <value>0x0</value>
                    <bits>20</bits>
                </field>
                <field id="OEM_SECURE_BOOT3_AUTH_EN">
                    <description>
                        Blow this bit to enable secure boot for Modem. When this bit is '1'; enables authentication for
                        any code that references secure boot configuration 3.
                    </description>
                    <value>0x0</value>
                    <bits>21</bits>
                </field>
                <field id="FEC_VALUE">
                    <description>FEC auto calculated based on 56 bits in the row</description>
                    <value>0x0</value>
                    <bits>62:56</bits>
                </field>
            </fuse>
        </fuse_region>

        <fuse_region id="QFPROM_RAW_PK_HASH0">
            <description></description>
            <fuse ignore="false" n="0">
                <address>0x00780230</address>
                <operation>BLOW</operation>
                <field id="HASH0_DATA_ROW0">
                    <value>0x0</value>
                    <bits>63:0</bits>
                </field>
            </fuse>
            <fuse ignore="false" n="1">
                <address>0x00780238</address>
                <operation>BLOW</operation>
                <field id="HASH0_DATA_ROW1">
                    <value>0x0</value>
                    <bits>63:0</bits>
                </field>
            </fuse>
            <fuse ignore="false" n="2">
                <address>0x00780240</address>
                <operation>BLOW</operation>
                <field id="HASH0_DATA_ROW2">
                    <value>0x0</value>
                    <bits>63:0</bits>
                </field>
            </fuse>
            <fuse ignore="false" n="3">
                <address>0x00780248</address>
                <operation>BLOW</operation>
                <field id="HASH0_DATA_ROW3">
                    <value>0x0</value>
                    <bits>63:0</bits>
                </field>
            </fuse>
            <fuse ignore="false" n="4">
                <address>0x00780250</address>
                <operation>BLOW</operation>
                <field id="HASH0_DATA_ROW4">
                    <value>0x0</value>
                    <bits>63:0</bits>
                </field>
            </fuse>
            <fuse ignore="false" n="5">
                <address>0x00780258</address>
                <operation>BLOW</operation>
                <field id="HASH0_DATA_ROW5">
                    <value>0x0</value>
                    <bits>63:0</bits>
                </field>
            </fuse>
        </fuse_region>

        <fuse_region id="QFPROM_RAW_SEC_KEY_DERIVATION_KEY">
            <description>
                This 256-bit value is used as the secondary key derivation input; used to generate the secondary key
                used by the crypto engine. When running insecure (no secure boot; or Debug enabled) then SKDK is fed
                into the key derivation function to generate a unique ""non-secure"" secondary key for use by the crypto
                engine. When running secure (secure boot; and debug disabled); then SKDK is fed directly to the crypto
                engine as the secondary key.After the SKDK value has been correctly programmed; the SKDK Read Disable
                should be blown to permanently protect the SKDK value. Prior to this; the SKDK value can be read from
                the QFPROM by software. The SBL fuse blow API is capable of automatically generating a random number for
                use as the SKDK so that the SKDK value is never available outside of the device.
            </description>
            <fuse ignore="false" n="0">
                <address>0x00780678</address>
                <operation>BLOW</operation>
                <field id="KEY_DATA">
                    <value>0x0</value>
                    <bits>55:0</bits>
                </field>
                <field id="FEC_VALUE">
                    <value>0x0</value>
                    <bits>62:56</bits>
                </field>
            </fuse>
            <fuse ignore="false" n="1">
                <address>0x00780680</address>
                <operation>BLOW</operation>
                <field id="KEY_DATA">
                    <value>0x0</value>
                    <bits>55:0</bits>
                </field>
                <field id="FEC_VALUE">
                    <value>0x0</value>
                    <bits>62:56</bits>
                </field>
            </fuse>
            <fuse ignore="false" n="2">
                <address>0x00780688</address>
                <operation>BLOW</operation>
                <field id="KEY_DATA">
                    <value>0x0</value>
                    <bits>55:0</bits>
                </field>
                <field id="FEC_VALUE">
                    <value>0x0</value>
                    <bits>62:56</bits>
                </field>
            </fuse>
            <fuse ignore="false" n="3">
                <address>0x00780690</address>
                <operation>BLOW</operation>
                <field id="KEY_DATA">
                    <value>0x0</value>
                    <bits>55:0</bits>
                </field>
                <field id="FEC_VALUE">
                    <value>0x0</value>
                    <bits>62:56</bits>
                </field>
            </fuse>
            <fuse ignore="false" n="4">
                <address>0x00780698</address>
                <operation>BLOW</operation>
                <field id="KEY_DATA">
                    <description></description>
                    <value>0x0</value>
                    <bits>31:0</bits>
                </field>
                <field id="FEC_VALUE">
                    <description>FEC auto calculated based on 56 bits in the row</description>
                    <value>0x0</value>
                    <bits>62:56</bits>
                </field>
            </fuse>
        </fuse_region>
    </module>
</tns:fuseblower>
