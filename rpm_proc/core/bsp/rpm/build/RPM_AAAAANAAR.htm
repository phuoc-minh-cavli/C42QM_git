<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [/local/mnt/workspace/CRMBuilds/RPM.BF.2.1.3-00034-M9205AAAAANAZR-1_20191223_015705/b/rpm_proc/core/bsp/rpm/build/RPM_AAAAANAAR.elf]</title></head>
<body><HR>
<H1>Static Call Graph for image /local/mnt/workspace/CRMBuilds/RPM.BF.2.1.3-00034-M9205AAAAANAZR-1_20191223_015705/b/rpm_proc/core/bsp/rpm/build/RPM_AAAAANAAR.elf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.01 [Build 94]: Last Updated: Mon Dec 23 02:00:05 2019
<BR><P>
<H3>Maximum Stack Usage =        888 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; sleep_perform_lpm &rArr; vdd_min_enter &rArr; deep_sleep_enter &rArr; Clock_ProcessorSleep &rArr; Clock_WaitForBIMCPowerCollapse &rArr; Clock_BIMCIsRestoreDone &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e]">Reset_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[157]">unlock_ints</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">abort</a><BR>
 <LI><a href="#[154]">lock_ints</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">abort</a><BR>
 <LI><a href="#[219]">rpm_log_event_to_ram</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[137]">SWEVENT_log</a><BR>
 <LI><a href="#[137]">SWEVENT_log</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">abort</a><BR>
 <LI><a href="#[158]">Clock_DisableSource</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[158]">Clock_DisableSource</a><BR>
 <LI><a href="#[166]">Clock_EnableSource</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[166]">Clock_EnableSource</a><BR>
 <LI><a href="#[276]">Sched::fixup_schedule(Task&, Task&, unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[276]">Sched::fixup_schedule(Task&, Task&, unsigned)</a><BR>
 <LI><a href="#[267]">EstimateCache::observe(unsigned, unsigned, unsigned, unsigned, bool)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[267]">EstimateCache::observe(unsigned, unsigned, unsigned, unsigned, bool)</a><BR>
 <LI><a href="#[36f]">rail_header</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36e]">rail_footer</a><BR>
 <LI><a href="#[36e]">rail_footer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36d]">rail_corner</a><BR>
 <LI><a href="#[37f]">railway_do_set_corner_voltage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37f]">railway_do_set_corner_voltage</a><BR>
 <LI><a href="#[32d]">pm_ldo_sw_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32d]">pm_ldo_sw_mode</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[34]">Clock_DisableClock</a> from ClockDriver.o(i.Clock_DisableClock) referenced from icb_rpm_spdm_req.o(i.icb_spdm_req_apply_cb)
 <LI><a href="#[35]">Clock_EnableClock</a> from ClockDriver.o(i.Clock_EnableClock) referenced from icb_rpm_spdm_req.o(i.icb_spdm_req_apply_cb)
 <LI><a href="#[be]">Clock_Init</a> from ClockRPM.o(i.Clock_Init) referenced from main.o(.constdata)
 <LI><a href="#[e2]">Clock_NPACreateMarkedClient</a> from ClockRPMNPA.o(i.Clock_NPACreateMarkedClient) referenced from ClockRPMNPA.o(.constdata)
 <LI><a href="#[84]">Clock_NPANodeBIMCFunc</a> from ClockRPMNPA.o(i.Clock_NPANodeBIMCFunc) referenced from ClockRPMNPA.o(.data)
 <LI><a href="#[81]">Clock_NPANodeCPUFunc</a> from ClockRPMNPA.o(i.Clock_NPANodeCPUFunc) referenced from ClockRPMNPA.o(.data)
 <LI><a href="#[7f]">Clock_NPANodeCXOFunc</a> from ClockRPMNPA.o(i.Clock_NPANodeCXOFunc) referenced from ClockRPMNPA.o(.data)
 <LI><a href="#[89]">Clock_NPANodeCryptoFunc</a> from ClockRPMNPA.o(i.Clock_NPANodeCryptoFunc) referenced from ClockRPMNPA.o(.data)
 <LI><a href="#[80]">Clock_NPANodeDCVSEnaFunc</a> from ClockRPMNPA.o(i.Clock_NPANodeDCVSEnaFunc) referenced from ClockRPMNPA.o(.data)
 <LI><a href="#[88]">Clock_NPANodeGPLL0Func</a> from ClockRPMNPA.o(i.Clock_NPANodeGPLL0Func) referenced from ClockRPMNPA.o(.data)
 <LI><a href="#[83]">Clock_NPANodeGenericFunc</a> from ClockRPMNPA.o(i.Clock_NPANodeGenericFunc) referenced from ClockRPMNPA.o(.data)
 <LI><a href="#[87]">Clock_NPANodeQDSSFunc</a> from ClockRPMNPA.o(i.Clock_NPANodeQDSSFunc) referenced from ClockRPMNPA.o(.data)
 <LI><a href="#[85]">Clock_NPANodeQPICFunc</a> from ClockRPMNPA.o(i.Clock_NPANodeQPICFunc) referenced from ClockRPMNPA.o(.data)
 <LI><a href="#[86]">Clock_NPANodeSPMFunc</a> from ClockRPMNPA.o(i.Clock_NPANodeSPMFunc) referenced from ClockRPMNPA.o(.data)
 <LI><a href="#[82]">Clock_NPAResourceQuery</a> from ClockRPMNPA.o(i.Clock_NPAResourceQuery) referenced 4 times from ClockRPMNPA.o(.data)
 <LI><a href="#[14]">Clock_QDSS_PostChangedCB</a> from ClockRPMNPA.o(i.Clock_QDSS_PostChangedCB) referenced from ClockRPMNPA.o(i.Clock_InitNPA)
 <LI><a href="#[13]">Clock_QDSS_PreChangedCB</a> from ClockRPMNPA.o(i.Clock_QDSS_PreChangedCB) referenced from ClockRPMNPA.o(i.Clock_InitNPA)
 <LI><a href="#[15]">Core_DALSYSAllocatorFcn</a> from CorePool.o(i.Core_DALSYSAllocatorFcn) referenced from CorePool.o(i.Core_PoolConfig)
 <LI><a href="#[15]">Core_DALSYSAllocatorFcn</a> from CorePool.o(i.Core_DALSYSAllocatorFcn) referenced from CorePool.o(i.Core_PoolCreate)
 <LI><a href="#[18]">Core_WorkQueueFree</a> from CoreWorkQueue.o(i.Core_WorkQueueFree) referenced from CoreWorkQueue.o(i.Core_WorkQueueCreate)
 <LI><a href="#[17]">Core_WorkQueueGet</a> from CoreWorkQueue.o(i.Core_WorkQueueGet) referenced from CoreWorkQueue.o(i.Core_WorkQueueCreate)
 <LI><a href="#[16]">Core_WorkQueuePut</a> from CoreWorkQueue.o(i.Core_WorkQueuePut) referenced from CoreWorkQueue.o(i.Core_WorkQueueCreate)
 <LI><a href="#[12]">DALSYS_BusyWait</a> from dal_stubs.o(i.DALSYS_BusyWait) referenced from ClockDriver.o(i.Clock_DriverInit)
 <LI><a href="#[5d]">HAL_SDRAM_DDR_Wait</a> from BIMC_v1.o(i.HAL_SDRAM_DDR_Wait) referenced from ddr_drivers.o(i.ddr_enter_self_refresh_all)
 <LI><a href="#[5d]">HAL_SDRAM_DDR_Wait</a> from BIMC_v1.o(i.HAL_SDRAM_DDR_Wait) referenced from ddr_target.o(i.ddr_exit_power_collapse)
 <LI><a href="#[5d]">HAL_SDRAM_DDR_Wait</a> from BIMC_v1.o(i.HAL_SDRAM_DDR_Wait) referenced from ddr_drivers.o(i.ddr_exit_self_refresh_all)
 <LI><a href="#[a5]">HAL_clk_GenericConfigDivider</a> from HALclkGeneric.o(i.HAL_clk_GenericConfigDivider) referenced from HALclkGeneric.o(.data)
 <LI><a href="#[a7]">HAL_clk_GenericConfigFootswitch</a> from HALclkGeneric.o(i.HAL_clk_GenericConfigFootswitch) referenced from HALclkGeneric.o(.data)
 <LI><a href="#[9e]">HAL_clk_GenericConfigMux</a> from HALclkGeneric.o(i.HAL_clk_GenericConfigMux) referenced 3 times from HALclkGCCMain.o(.data)
 <LI><a href="#[a6]">HAL_clk_GenericDetectDivider</a> from HALclkGeneric.o(i.HAL_clk_GenericDetectDivider) referenced from HALclkGeneric.o(.data)
 <LI><a href="#[9f]">HAL_clk_GenericDetectMuxConfig</a> from HALclkGeneric.o(i.HAL_clk_GenericDetectMuxConfig) referenced 5 times from HALclkGCCMain.o(.data)
 <LI><a href="#[a1]">HAL_clk_GenericDisable</a> from HALclkGeneric.o(i.HAL_clk_GenericDisable) referenced from HALclkGeneric.o(.data)
 <LI><a href="#[a0]">HAL_clk_GenericEnable</a> from HALclkGeneric.o(i.HAL_clk_GenericEnable) referenced from HALclkGeneric.o(.data)
 <LI><a href="#[a2]">HAL_clk_GenericIsEnabled</a> from HALclkGeneric.o(i.HAL_clk_GenericIsEnabled) referenced from HALclkGeneric.o(.data)
 <LI><a href="#[a3]">HAL_clk_GenericIsOn</a> from HALclkGeneric.o(i.HAL_clk_GenericIsOn) referenced from HALclkGeneric.o(.data)
 <LI><a href="#[98]">HAL_clk_GenericPLLConfig</a> from HALclkGenericPLL.o(i.HAL_clk_GenericPLLConfig) referenced from HALclkGenericPLL.o(.data)
 <LI><a href="#[99]">HAL_clk_GenericPLLConfigPLL</a> from HALclkGenericPLL.o(i.HAL_clk_GenericPLLConfigPLL) referenced from HALclkGenericPLL.o(.data)
 <LI><a href="#[9a]">HAL_clk_GenericPLLDetectPLLConfig</a> from HALclkGenericPLL.o(i.HAL_clk_GenericPLLDetectPLLConfig) referenced from HALclkGenericPLL.o(.data)
 <LI><a href="#[96]">HAL_clk_GenericPLLDisable</a> from HALclkGenericPLL.o(i.HAL_clk_GenericPLLDisable) referenced from HALclkGenericPLL.o(.data)
 <LI><a href="#[9c]">HAL_clk_GenericPLLDisableVote</a> from HALclkGenericPLL.o(i.HAL_clk_GenericPLLDisableVote) referenced from HALclkGenericPLL.o(.data)
 <LI><a href="#[95]">HAL_clk_GenericPLLEnable</a> from HALclkGenericPLL.o(i.HAL_clk_GenericPLLEnable) referenced from HALclkGenericPLL.o(.data)
 <LI><a href="#[9b]">HAL_clk_GenericPLLEnableVote</a> from HALclkGenericPLL.o(i.HAL_clk_GenericPLLEnableVote) referenced from HALclkGenericPLL.o(.data)
 <LI><a href="#[97]">HAL_clk_GenericPLLIsEnabled</a> from HALclkGenericPLL.o(i.HAL_clk_GenericPLLIsEnabled) referenced from HALclkGenericPLL.o(.data)
 <LI><a href="#[9d]">HAL_clk_GenericPLLIsVoteEnabled</a> from HALclkGenericPLL.o(i.HAL_clk_GenericPLLIsVoteEnabled) referenced from HALclkGenericPLL.o(.data)
 <LI><a href="#[a9]">HAL_clk_GenericPowerDomainDisable</a> from HALclkGeneric.o(i.HAL_clk_GenericPowerDomainDisable) referenced from HALclkGeneric.o(.data)
 <LI><a href="#[a8]">HAL_clk_GenericPowerDomainEnable</a> from HALclkGeneric.o(i.HAL_clk_GenericPowerDomainEnable) referenced from HALclkGeneric.o(.data)
 <LI><a href="#[aa]">HAL_clk_GenericPowerDomainIsEnabled</a> from HALclkGeneric.o(i.HAL_clk_GenericPowerDomainIsEnabled) referenced from HALclkGeneric.o(.data)
 <LI><a href="#[a4]">HAL_clk_GenericReset</a> from HALclkGeneric.o(i.HAL_clk_GenericReset) referenced from HALclkGeneric.o(.data)
 <LI><a href="#[8b]">HAL_clk_PlatformInitGCCMain</a> from HALclkGCCMain.o(i.HAL_clk_PlatformInitGCCMain) referenced from HALclkMainRPM.o(.data)
 <LI><a href="#[8a]">HAL_clk_PlatformInitSources</a> from HALclkMainRPM.o(i.HAL_clk_PlatformInitSources) referenced from HALclkMainRPM.o(.data)
 <LI><a href="#[ae]">HAL_clk_StromerPLLConfig</a> from HALclkStromerPLL.o(i.HAL_clk_StromerPLLConfig) referenced from HALclkStromerPLL.o(.data)
 <LI><a href="#[af]">HAL_clk_StromerPLLConfigPLL</a> from HALclkStromerPLL.o(i.HAL_clk_StromerPLLConfigPLL) referenced from HALclkStromerPLL.o(.data)
 <LI><a href="#[b0]">HAL_clk_StromerPLLDetectPLLConfig</a> from HALclkStromerPLL.o(i.HAL_clk_StromerPLLDetectPLLConfig) referenced from HALclkStromerPLL.o(.data)
 <LI><a href="#[ac]">HAL_clk_StromerPLLDisable</a> from HALclkStromerPLL.o(i.HAL_clk_StromerPLLDisable) referenced from HALclkStromerPLL.o(.data)
 <LI><a href="#[b2]">HAL_clk_StromerPLLDisableVote</a> from HALclkStromerPLL.o(i.HAL_clk_StromerPLLDisableVote) referenced from HALclkStromerPLL.o(.data)
 <LI><a href="#[ab]">HAL_clk_StromerPLLEnable</a> from HALclkStromerPLL.o(i.HAL_clk_StromerPLLEnable) referenced from HALclkStromerPLL.o(.data)
 <LI><a href="#[b1]">HAL_clk_StromerPLLEnableVote</a> from HALclkStromerPLL.o(i.HAL_clk_StromerPLLEnableVote) referenced from HALclkStromerPLL.o(.data)
 <LI><a href="#[ad]">HAL_clk_StromerPLLIsEnabled</a> from HALclkStromerPLL.o(i.HAL_clk_StromerPLLIsEnabled) referenced from HALclkStromerPLL.o(.data)
 <LI><a href="#[b3]">HAL_clk_StromerPLLIsVoteEnabled</a> from HALclkStromerPLL.o(i.HAL_clk_StromerPLLIsVoteEnabled) referenced from HALclkStromerPLL.o(.data)
 <LI><a href="#[b5]">PlatformInfo_Init</a> from PlatformInfo.o(i.PlatformInfo_Init) referenced from main.o(.constdata)
 <LI><a href="#[cd]">QDSSInit</a> from QDSS.o(i.QDSSInit) referenced from main.o(.constdata)
 <LI><a href="#[e]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RPM_ENTRY)
 <LI><a href="#[4e]">rpm_npa_apply(rpm_application_info*)</a> from rpm_npa.o(i._Z13rpm_npa_applyP20rpm_application_info) referenced from rpm_npa.o(i.rpm_create_npa_adapter)
 <LI><a href="#[4e]">rpm_npa_apply(rpm_application_info*)</a> from rpm_npa.o(i._Z13rpm_npa_applyP20rpm_application_info) referenced from rpm_npa.o(i.rpm_create_npa_settling_adapter)
 <LI><a href="#[4f]">rpm_npa_xlate(rpm_translation_info*)</a> from rpm_npa.o(i._Z13rpm_npa_xlateP20rpm_translation_info) referenced from rpm_npa.o(i.rpm_create_npa_adapter)
 <LI><a href="#[4f]">rpm_npa_xlate(rpm_translation_info*)</a> from rpm_npa.o(i._Z13rpm_npa_xlateP20rpm_translation_info) referenced from rpm_npa.o(i.rpm_create_npa_settling_adapter)
 <LI><a href="#[1d]">rpm_test_apply(rpm_application_info*)</a> from rpm_test_resource.o(i._Z14rpm_test_applyP20rpm_application_info) referenced from rpm_test_resource.o(i._Z22rpm_test_resource_initv)
 <LI><a href="#[1e]">rpm_test_xlate(rpm_translation_info*)</a> from rpm_test_resource.o(i._Z14rpm_test_xlateP20rpm_translation_info) referenced from rpm_test_resource.o(i._Z22rpm_test_resource_initv)
 <LI><a href="#[5a]">system_db_smd_cb(unsigned, void*, unsigned, void*)</a> from system_db_rpm.o(i._Z16system_db_smd_cbjPvjS_) referenced from system_db_rpm.o(i.system_db_init)
 <LI><a href="#[1f]">rpm_glink_handler(glink_channel_ctx*, Handler*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))</a> from rpm_handler.o(i._Z17rpm_glink_handlerP17glink_channel_ctxP7HandlerPvS3_jjPFYS3_S3_jPjES6_) referenced from rpm_handler.o(i._Z24rpm_glink_link_state_isrP17glink_link_info_tP7Handler)
 <LI><a href="#[52]">settling_timer_isr()</a> from rpm_settling_timer.o(i._Z18settling_timer_isrv) referenced from rpm_settling_timer.o(i.rpm_settling_timer_init)
 <LI><a href="#[53]">rpm_spm_bringup_isr()</a> from rpm_spm_handshake.o(i._Z19rpm_spm_bringup_isrv) referenced from rpm_spm_handshake.o(i.rpm_spm_init)
 <LI><a href="#[24]">rpm_settling_handler(Handler*)</a> from rpm_handler.o(i._Z20rpm_settling_handlerP7Handler) referenced from rpm_handler.o(i._ZN7Handler13execute_untilERVby)
 <LI>__default_new_handler() from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[20]">rpm_glink_tx_done_isr()</a> from rpm_handler.o(i._Z21rpm_glink_tx_done_isrv) referenced from rpm_handler.o(i._Z24rpm_glink_link_state_isrP17glink_link_info_tP7Handler)
 <LI><a href="#[e1]">rpm_glink_link_state_isr(glink_link_info_t*, Handler*)</a> from rpm_handler.o(i._Z24rpm_glink_link_state_isrP17glink_link_info_tP7Handler) referenced from rpm_handler.o(.constdata)
 <LI><a href="#[21]">rpm_glink_port_state_isr(glink_channel_ctx*, Handler*, glink_channel_event_type)</a> from rpm_handler.o(i._Z24rpm_glink_port_state_isrP17glink_channel_ctxP7Handler24glink_channel_event_type) referenced from rpm_handler.o(i._Z24rpm_glink_link_state_isrP17glink_link_info_tP7Handler)
 <LI><a href="#[23]">rpm_spm_shutdown_low_isr()</a> from rpm_spm_handshake.o(i._Z24rpm_spm_shutdown_low_isrv) referenced from rpm_spm_handshake.o(i._Z25rpm_spm_shutdown_high_isrv)
 <LI><a href="#[22]">rpm_spm_shutdown_high_isr()</a> from rpm_spm_handshake.o(i._Z25rpm_spm_shutdown_high_isrv) referenced from rpm_spm_handshake.o(i._Z24rpm_spm_shutdown_low_isrv)
 <LI><a href="#[22]">rpm_spm_shutdown_high_isr()</a> from rpm_spm_handshake.o(i._Z25rpm_spm_shutdown_high_isrv) referenced from rpm_spm_handshake.o(i.rpm_spm_init)
 <LI>__default_terminate_handler() from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[4d]">NPAMapping::NPAMapping()</a> from rpm_npa.o(i._ZN10NPAMappingC1Ev) referenced from rpm_npa.o(i.rpm_create_npa_adapter)
 <LI><a href="#[4d]">NPAMapping::NPAMapping()</a> from rpm_npa.o(i._ZN10NPAMappingC1Ev) referenced from rpm_npa.o(i.rpm_create_npa_settling_adapter)
 <LI><a href="#[e8]">SetChanger::execute_until(volatile bool&, unsigned long long)</a> from rpm_set_changer.o(i._ZN10SetChanger13execute_untilERVby) referenced from rpm_set_changer.o(.constdata__ZTV10SetChanger)
 <LI><a href="#[e5]">SetChanger::get_length_given(unsigned, unsigned&)</a> from rpm_set_changer.o(i._ZN10SetChanger16get_length_givenEjRj) referenced from rpm_set_changer.o(.constdata__ZTV10SetChanger)
 <LI><a href="#[eb]">suppressible::reestimate()</a> from rpm_suppressible.o(i._ZN12suppressible10reestimateEv) referenced from rpm_suppressible.o(.constdata__ZTV12suppressible)
 <LI><a href="#[ed]">suppressible::execute_until(volatile bool&, unsigned long long)</a> from rpm_suppressible.o(i._ZN12suppressible13execute_untilERVby) referenced from rpm_suppressible.o(.constdata__ZTV12suppressible)
 <LI><a href="#[ea]">suppressible::get_length_given(unsigned, unsigned&)</a> from rpm_suppressible.o(i._ZN12suppressible16get_length_givenEjRj) referenced from rpm_suppressible.o(.constdata__ZTV12suppressible)
 <LI><a href="#[e6]">Task::reestimate()</a> from rpm_set_changer.o(i._ZN4Task10reestimateEv) referenced from rpm_set_changer.o(.constdata__ZTV10SetChanger)
 <LI><a href="#[e6]">Task::reestimate()</a> from rpm_set_changer.o(i._ZN4Task10reestimateEv) referenced from rpm_task.o(.constdata__ZTV4Task)
 <LI><a href="#[e6]">Task::reestimate()</a> from rpm_set_changer.o(i._ZN4Task10reestimateEv) referenced from rpm_handler.o(.constdata__ZTV7Handler)
 <LI><a href="#[ef]">Task::get_length_given(unsigned, unsigned&)</a> from rpm_task.o(i._ZN4Task16get_length_givenEjRj) referenced from rpm_task.o(.constdata__ZTV4Task)
 <LI><a href="#[ef]">Task::get_length_given(unsigned, unsigned&)</a> from rpm_task.o(i._ZN4Task16get_length_givenEjRj) referenced from rpm_handler.o(.constdata__ZTV7Handler)
 <LI><a href="#[1c]">Sched::~Sched()</a> from rpm_sched.o(i._ZN5SchedD1Ev) referenced from rpm_sched.o(i._Z11theSchedulev)
 <LI><a href="#[f2]">Handler::execute_until(volatile bool&, unsigned long long)</a> from rpm_handler.o(i._ZN7Handler13execute_untilERVby) referenced from rpm_handler.o(.constdata__ZTV7Handler)
 <LI><a href="#[f5]">RBCPRTask::reestimate()</a> from rbcpr_task.o(i._ZN9RBCPRTask10reestimateEv) referenced from rbcpr_task.o(.constdata__ZTV9RBCPRTask)
 <LI><a href="#[f7]">RBCPRTask::execute_until(volatile bool&, unsigned long long)</a> from rbcpr_task.o(i._ZN9RBCPRTask13execute_untilERVby) referenced from rbcpr_task.o(.constdata__ZTV9RBCPRTask)
 <LI><a href="#[f4]">RBCPRTask::get_length_given(unsigned, unsigned&)</a> from rbcpr_task.o(i._ZN9RBCPRTask16get_length_givenEjRj) referenced from rbcpr_task.o(.constdata__ZTV9RBCPRTask)
 <LI><a href="#[e4]">SetChanger::get_length() const</a> from rpm_set_changer.o(i._ZNK10SetChanger10get_lengthEv) referenced from rpm_set_changer.o(.constdata__ZTV10SetChanger)
 <LI><a href="#[e7]">SetChanger::hasImmediateWork() const</a> from rpm_set_changer.o(i._ZNK10SetChanger16hasImmediateWorkEv) referenced from rpm_set_changer.o(.constdata__ZTV10SetChanger)
 <LI><a href="#[e9]">suppressible::get_length() const</a> from rpm_suppressible.o(i._ZNK12suppressible10get_lengthEv) referenced from rpm_suppressible.o(.constdata__ZTV12suppressible)
 <LI><a href="#[ec]">suppressible::hasImmediateWork() const</a> from rpm_suppressible.o(i._ZNK12suppressible16hasImmediateWorkEv) referenced from rpm_suppressible.o(.constdata__ZTV12suppressible)
 <LI><a href="#[f0]">Handler::get_length() const</a> from rpm_handler.o(i._ZNK7Handler10get_lengthEv) referenced from rpm_handler.o(.constdata__ZTV7Handler)
 <LI><a href="#[f1]">Handler::hasImmediateWork() const</a> from rpm_handler.o(i._ZNK7Handler16hasImmediateWorkEv) referenced from rpm_handler.o(.constdata__ZTV7Handler)
 <LI><a href="#[f3]">RBCPRTask::get_length() const</a> from rbcpr_task.o(i._ZNK9RBCPRTask10get_lengthEv) referenced from rbcpr_task.o(.constdata__ZTV9RBCPRTask)
 <LI><a href="#[f6]">RBCPRTask::hasImmediateWork() const</a> from rbcpr_task.o(i._ZNK9RBCPRTask16hasImmediateWorkEv) referenced from rbcpr_task.o(.constdata__ZTV9RBCPRTask)
 <LI>operator delete[] (void*) from array_del.o(i._ZdaPv) referenced from cxa_vec_new.o(i.__cxa_vec_new)
 <LI>__cxa_pure_virtual from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from rpm_task.o(.constdata__ZTV4Task)
 <LI><a href="#[bf]">__init_stack_chk_guard</a> from stack_protect.o(i.__init_stack_chk_guard) referenced from main.o(.constdata)
 <LI>__main from __main.o(!!!main) referenced from exceptions.o(.ARM.__AT_0x00090200)
 <LI>__main from __main.o(!!!main) referenced from startup.o(.text)
 <LI><a href="#[f]">abort</a> from coredump.o(.emb_text) referenced from coredump.o(.emb_text)
 <LI><a href="#[29]">abort_isr</a> from exceptions.o(i.abort_isr) referenced 65 times from exceptions.o(.ARM.__AT_0x00090200)
 <LI><a href="#[29]">abort_isr</a> from exceptions.o(i.abort_isr) referenced from exceptions.o(i.exceptions_init)
 <LI><a href="#[bb]">acc_init</a> from acc.o(i.acc_init) referenced from main.o(.constdata)
 <LI><a href="#[28]">acc_voltage_change_post_callback</a> from acc.o(i.acc_voltage_change_post_callback) referenced from acc.o(i.acc_init)
 <LI><a href="#[27]">acc_voltage_change_pre_callback</a> from acc.o(i.acc_voltage_change_pre_callback) referenced from acc.o(i.acc_init)
 <LI><a href="#[5e]">ddr_divide_func</a> from BIMC_v1.o(i.ddr_divide_func) referenced from ddr_target.o(i.ddr_pre_clock_switch)
 <LI><a href="#[bd]">ddr_init</a> from ddr_drivers.o(i.ddr_init) referenced from main.o(.constdata)
 <LI><a href="#[60]">ddr_post_vddcx_switch</a> from ddr_target.o(i.ddr_post_vddcx_switch) referenced from ddr_target.o(i.ddr_target_init)
 <LI><a href="#[62]">ddr_post_vddmx_switch</a> from ddr_target.o(i.ddr_post_vddmx_switch) referenced from ddr_target.o(i.ddr_target_init)
 <LI><a href="#[5f]">ddr_pre_vddcx_switch</a> from ddr_target.o(i.ddr_pre_vddcx_switch) referenced from ddr_target.o(i.ddr_target_init)
 <LI><a href="#[61]">ddr_pre_vddmx_switch</a> from ddr_target.o(i.ddr_pre_vddmx_switch) referenced from ddr_target.o(i.ddr_target_init)
 <LI><a href="#[7c]">dog_bark_isr</a> from dog.o(.emb_text) referenced from exceptions.o(.ARM.__AT_0x00090200)
 <LI><a href="#[ce]">exceptions_enable</a> from exceptions.o(i.exceptions_enable) referenced from main.o(.constdata)
 <LI><a href="#[66]">glink_channel_receive_pkt_intentless</a> from glink_core_intentless_xport.o(i.glink_channel_receive_pkt_intentless) referenced from glink_core_intentless_xport.o(i.glink_core_setup_intentless_xport)
 <LI><a href="#[65]">glink_channel_submit_pkt_intentless</a> from glink_core_intentless_xport.o(i.glink_channel_submit_pkt_intentless) referenced from glink_core_intentless_xport.o(i.glink_core_setup_intentless_xport)
 <LI><a href="#[64]">glink_core_stub_intentless</a> from glink_core_intentless_xport.o(i.glink_core_stub_intentless) referenced from glink_core_intentless_xport.o(i.glink_core_setup_intentless_xport)
 <LI><a href="#[67]">glink_default_notify_rx_sigs</a> from glink_api.o(i.glink_default_notify_rx_sigs) referenced from glink_api.o(i.glink_open)
 <LI><a href="#[69]">glink_dummy_tx_vprovider</a> from glink_vector.o(i.glink_dummy_tx_vprovider) referenced from glink_api.o(i.glink_tx)
 <LI><a href="#[c1]">glink_init</a> from glink_core_internal.o(i.glink_init) referenced from main.o(.constdata)
 <LI><a href="#[8c]">glink_link_up</a> from glink_core_if.o(i.glink_link_up) referenced from glink_core_intentless_xport.o(.data)
 <LI><a href="#[68]">glink_os_isr</a> from glink_os_utils_dal.o(i.glink_os_isr) referenced from glink_os_utils_dal.o(i.glink_os_register_isr)
 <LI><a href="#[91]">glink_rx_cmd_ch_close_ack</a> from glink_core_if.o(i.glink_rx_cmd_ch_close_ack) referenced from glink_core_intentless_xport.o(.data)
 <LI><a href="#[90]">glink_rx_cmd_ch_open_ack</a> from glink_core_if.o(i.glink_rx_cmd_ch_open_ack) referenced from glink_core_intentless_xport.o(.data)
 <LI><a href="#[92]">glink_rx_cmd_ch_remote_close</a> from glink_core_if.o(i.glink_rx_cmd_ch_remote_close) referenced from glink_core_intentless_xport.o(.data)
 <LI><a href="#[8f]">glink_rx_cmd_ch_remote_open</a> from glink_core_if.o(i.glink_rx_cmd_ch_remote_open) referenced from glink_core_intentless_xport.o(.data)
 <LI><a href="#[94]">glink_rx_cmd_remote_sigs</a> from glink_core_if.o(i.glink_rx_cmd_remote_sigs) referenced from glink_core_intentless_xport.o(.data)
 <LI><a href="#[8d]">glink_rx_cmd_version</a> from glink_core_if.o(i.glink_rx_cmd_version) referenced from glink_core_intentless_xport.o(.data)
 <LI><a href="#[8e]">glink_rx_cmd_version_ack</a> from glink_core_if.o(i.glink_rx_cmd_version_ack) referenced from glink_core_intentless_xport.o(.data)
 <LI><a href="#[93]">glink_rx_put_pkt_ctx</a> from glink_core_if.o(i.glink_rx_put_pkt_ctx) referenced from glink_core_intentless_xport.o(.data)
 <LI><a href="#[63]">glink_verify_open_cfg_intentless</a> from glink_core_intentless_xport.o(i.glink_verify_open_cfg_intentless) referenced from glink_core_intentless_xport.o(i.glink_core_setup_intentless_xport)
 <LI><a href="#[6c]">glinki_check_xport_link_up_and_notify</a> from glink_core_internal.o(i.glinki_check_xport_link_up_and_notify) referenced from glink_core_internal.o(i.glinki_scan_xports_and_notify)
 <LI><a href="#[6b]">glinki_client_requested_xport_check</a> from glink_core_internal.o(i.glinki_client_requested_xport_check) referenced from glink_core_internal.o(i.glinki_find_requested_xport)
 <LI><a href="#[6a]">glinki_update_best_xport</a> from glink_core_internal.o(i.glinki_update_best_xport) referenced from glink_core_internal.o(i.glinki_find_requested_xport)
 <LI><a href="#[2a]">gpio_toggle_apply</a> from gpio_toggle.o(i.gpio_toggle_apply) referenced from gpio_toggle.o(i.gpio_toggle_init)
 <LI><a href="#[d4]">gpio_toggle_init</a> from gpio_toggle.o(i.gpio_toggle_init) referenced from main.o(.constdata)
 <LI><a href="#[2b]">gpio_toggle_xlate</a> from gpio_toggle.o(i.gpio_toggle_xlate) referenced from gpio_toggle.o(i.gpio_toggle_init)
 <LI><a href="#[2c]">icb_dsat_callback</a> from icb_rpm_dsat.o(i.icb_dsat_callback) referenced from icb_rpm_dsat.o(i.icb_dsat_init)
 <LI><a href="#[d0]">icb_init</a> from icb_rpm.o(i.icb_init) referenced from main.o(.constdata)
 <LI><a href="#[2d]">icb_init_cb</a> from icb_rpm.o(i.icb_init_cb) referenced from icb_rpm.o(i.icb_init)
 <LI><a href="#[2e]">icb_master_latency_apply_cb</a> from icb_rpm_master_latency.o(i.icb_master_latency_apply_cb) referenced from icb_rpm_master_latency.o(i.icb_master_latency_init)
 <LI><a href="#[2f]">icb_master_latency_translate_cb</a> from icb_rpm_master_latency.o(i.icb_master_latency_translate_cb) referenced from icb_rpm_master_latency.o(i.icb_master_latency_init)
 <LI><a href="#[30]">icb_masters_apply_cb</a> from icb_rpm_masters.o(i.icb_masters_apply_cb) referenced from icb_rpm_masters.o(i.icb_masters_init)
 <LI><a href="#[31]">icb_masters_translate_cb</a> from icb_rpm_masters.o(i.icb_masters_translate_cb) referenced from icb_rpm_masters.o(i.icb_masters_init)
 <LI><a href="#[32]">icb_slaves_apply_cb</a> from icb_rpm_slaves.o(i.icb_slaves_apply_cb) referenced from icb_rpm_slaves.o(i.icb_slaves_init)
 <LI><a href="#[33]">icb_slaves_translate_cb</a> from icb_rpm_slaves.o(i.icb_slaves_translate_cb) referenced from icb_rpm_slaves.o(i.icb_slaves_init)
 <LI><a href="#[36]">icb_spdm_req_apply_cb</a> from icb_rpm_spdm_req.o(i.icb_spdm_req_apply_cb) referenced from icb_rpm_spdm_req.o(i.icb_spdm_req_init)
 <LI><a href="#[37]">icb_spdm_req_translate_cb</a> from icb_rpm_spdm_req.o(i.icb_spdm_req_translate_cb) referenced from icb_rpm_spdm_req.o(i.icb_spdm_req_init)
 <LI><a href="#[ba]">message_ram_init_rail_info</a> from rpm_messageram.o(i.message_ram_init_rail_info) referenced from main.o(.constdata)
 <LI><a href="#[38]">message_ram_update_rail_info</a> from rpm_messageram.o(i.message_ram_update_rail_info) referenced from rpm_messageram.o(i.message_ram_init_rail_info)
 <LI><a href="#[1a]">myIsr</a> from SpmiBus.o(i.myIsr) referenced from SpmiBus.o(i.SpmiBus_Init)
 <LI><a href="#[3b]">npa_async_event_handler</a> from npa.o(i.npa_async_event_handler) referenced from npa.o(i.npa_init)
 <LI><a href="#[de]">npa_bitwise_update_fcn</a> from npa_plugins.o(i.npa_bitwise_update_fcn) referenced from npa_plugins.o(.constdata)
 <LI><a href="#[e3]">npa_create_bimc_client</a> from ClockRPMBIMC.o(i.npa_create_bimc_client) referenced from ClockRPMBIMC.o(.constdata)
 <LI><a href="#[3a]">npa_define_node_continuation</a> from npa.o(i.npa_define_node_continuation) referenced from npa.o(i.npa_define_node_continuation)
 <LI><a href="#[dd]">npa_identity_update_fcn</a> from npa_plugins.o(i.npa_identity_update_fcn) referenced 2 times from npa_plugins.o(.constdata)
 <LI><a href="#[b6]">npa_init</a> from npa.o(i.npa_init) referenced from main.o(.constdata)
 <LI><a href="#[39]">npa_issue_sync_request</a> from npa.o(i.npa_issue_sync_request) referenced from npa.o(i.npa_create_sync_client_ex)
 <LI><a href="#[39]">npa_issue_sync_request</a> from npa.o(i.npa_issue_sync_request) referenced from npa.o(i.npa_define_node_continuation)
 <LI><a href="#[dc]">npa_max_update_fcn</a> from npa_plugins.o(i.npa_max_update_fcn) referenced 2 times from npa_plugins.o(.constdata)
 <LI><a href="#[e0]">npa_no_client_create_fcn</a> from npa_plugins.o(i.npa_no_client_create_fcn) referenced from npa_plugins.o(.constdata)
 <LI><a href="#[df]">npa_no_client_update_fcn</a> from npa_plugins.o(i.npa_no_client_update_fcn) referenced from npa_plugins.o(.constdata)
 <LI><a href="#[302]">npa_resources_available_continuation</a> from npa.o(i.npa_resources_available_continuation) referenced from npa.o(i.npa_resources_available_continuation)
 <LI><a href="#[3c]">pm_droop_detect_isr</a> from pm_droop_detect.o(i.pm_droop_detect_isr) referenced from pm_droop_detect.o(i.pm_droop_detect_irq_config)
 <LI><a href="#[b8]">pm_init</a> from pm_init.o(i.pm_init) referenced from main.o(.constdata)
 <LI><a href="#[3d]">pm_rpm_clk_buffer_apply</a> from pm_rpm_clk_buffer_trans_apply.o(i.pm_rpm_clk_buffer_apply) referenced from pm_rpm_clk_buffer_trans_apply.o(i.pm_rpm_clk_buffer_register_resources)
 <LI><a href="#[3e]">pm_rpm_clk_buffer_translation</a> from pm_rpm_clk_buffer_trans_apply.o(i.pm_rpm_clk_buffer_translation) referenced from pm_rpm_clk_buffer_trans_apply.o(i.pm_rpm_clk_buffer_register_resources)
 <LI><a href="#[3f]">pm_rpm_ldo_apply</a> from pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_apply) referenced from pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_register_resources)
 <LI><a href="#[40]">pm_rpm_ldo_translation</a> from pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_translation) referenced from pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_register_resources)
 <LI><a href="#[43]">pm_rpm_npa_resource_set</a> from pm_rpm_npa.o(i.pm_rpm_npa_resource_set) referenced from pm_rpm_npa.o(i.pm_rpm_proc_npa_init)
 <LI><a href="#[46]">pm_rpm_rsrc_apply</a> from pm_rpm_target.o(i.pm_rpm_rsrc_apply) referenced from pm_rpm_target.o(i.pm_target_is_stub_enabled)
 <LI><a href="#[47]">pm_rpm_rsrc_translation</a> from pm_rpm_target.o(i.pm_rpm_rsrc_translation) referenced from pm_rpm_target.o(i.pm_target_is_stub_enabled)
 <LI><a href="#[41]">pm_rpm_s1_shadow_apply</a> from pm_rpm_target.o(i.pm_rpm_s1_shadow_apply) referenced from pm_rpm_target.o(i.pm_rpm_platform_init)
 <LI><a href="#[42]">pm_rpm_s1_shadow_translation</a> from pm_rpm_target.o(i.pm_rpm_s1_shadow_translation) referenced from pm_rpm_target.o(i.pm_rpm_platform_init)
 <LI><a href="#[44]">pm_rpm_smps_apply</a> from pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_apply) referenced from pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_register_resources)
 <LI><a href="#[45]">pm_rpm_smps_translation</a> from pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_translation) referenced from pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_register_resources)
 <LI><a href="#[19]">pmicArbIsr</a> from PmicArb.o(i.pmicArbIsr) referenced from PmicArb.o(i.PmicArb_Init)
 <LI><a href="#[b4]">populate_image_header</a> from image_layout.o(i.populate_image_header) referenced from main.o(.constdata)
 <LI><a href="#[48]">railway_apply</a> from railway_adapter.o(i.railway_apply) referenced from railway_adapter.o(i.railway_adapter_init)
 <LI><a href="#[d7]">railway_finalize_init</a> from railway_internal.o(i.railway_finalize_init) referenced from main.o(.constdata)
 <LI><a href="#[bc]">railway_init_early_proxy_votes</a> from railway_config.o(i.railway_init_early_proxy_votes) referenced from main.o(.constdata)
 <LI><a href="#[c8]">railway_init_proxies_and_pins</a> from railway_config.o(i.railway_init_proxies_and_pins) referenced from main.o(.constdata)
 <LI><a href="#[b9]">railway_init_v2</a> from railway_internal.o(i.railway_init_v2) referenced from main.o(.constdata)
 <LI><a href="#[49]">railway_xlate</a> from railway_adapter.o(i.railway_xlate) referenced from railway_adapter.o(i.railway_adapter_init)
 <LI><a href="#[c9]">rbcpr_init</a> from rbcpr.o(i.rbcpr_init) referenced from main.o(.constdata)
 <LI><a href="#[4c]">rbcpr_isr</a> from rbcpr.o(i.rbcpr_isr) referenced from rbcpr.o(i.rbcpr_enable_closed_loop)
 <LI><a href="#[4b]">rbcpr_post_switch_callback</a> from rbcpr.o(i.rbcpr_post_switch_callback) referenced from rbcpr.o(i.rbcpr_enable_closed_loop)
 <LI><a href="#[4a]">rbcpr_pre_switch_callback</a> from rbcpr.o(i.rbcpr_pre_switch_callback) referenced from rbcpr.o(i.rbcpr_enable_closed_loop)
 <LI><a href="#[7e]">rpm_ULogInternal_STMWrite</a> from rpm_ulog.o(i.rpm_ULogInternal_STMWrite) referenced from rpm_ulog.o(.data)
 <LI><a href="#[50]">rpm_pcm_apply</a> from rpm_pcm.o(i.rpm_pcm_apply) referenced from rpm_pcm.o(i.rpm_pcm_init)
 <LI><a href="#[d5]">rpm_pcm_init</a> from rpm_pcm.o(i.rpm_pcm_init) referenced from main.o(.constdata)
 <LI><a href="#[51]">rpm_pcm_xlate</a> from rpm_pcm.o(i.rpm_pcm_xlate) referenced from rpm_pcm.o(i.rpm_pcm_init)
 <LI><a href="#[c7]">rpm_resources_config_init</a> from rpm_resources_config.o(i.rpm_resources_config_init) referenced from main.o(.constdata)
 <LI><a href="#[c6]">rpm_server_init_done</a> from debug.o(i.rpm_server_init_done) referenced from main.o(.constdata)
 <LI><a href="#[d6]">rpm_set_changer_common_init</a> from rpm_set_changer.o(i.rpm_set_changer_common_init) referenced from main.o(.constdata)
 <LI><a href="#[d3]">rpm_settling_timer_init</a> from rpm_settling_timer.o(i.rpm_settling_timer_init) referenced from main.o(.constdata)
 <LI><a href="#[b7]">rpm_subsys_pc_init</a> from rpm_subsys_state.o(i.rpm_subsys_pc_init) referenced from main.o(.constdata)
 <LI><a href="#[59]">rpm_swevent_xlate</a> from swevent.o(i.rpm_swevent_xlate) referenced from swevent.o(i.swevent_qdss_init)
 <LI><a href="#[58]">rpm_trace_control</a> from swevent.o(i.rpm_trace_control) referenced from swevent.o(i.swevent_qdss_init)
 <LI><a href="#[c5]">rpmserver_init</a> from rpmserver.o(i.rpmserver_init) referenced from main.o(.constdata)
 <LI><a href="#[54]">sec_wdog_bark_isr</a> from dog.o(i.sec_wdog_bark_isr) referenced from dog.o(i.sec_wdog_init)
 <LI><a href="#[d9]">send_apss_vmpm_interrupt</a> from vmpm_target.o(i.send_apss_vmpm_interrupt) referenced from vmpm_target.o(.constdata)
 <LI><a href="#[d8]">send_apss_wakeup_interrupt</a> from vmpm_target.o(i.send_apss_wakeup_interrupt) referenced from vmpm_target.o(.constdata)
 <LI><a href="#[db]">send_mpss_vmpm_interrupt</a> from vmpm_target.o(i.send_mpss_vmpm_interrupt) referenced from vmpm_target.o(.constdata)
 <LI><a href="#[da]">send_mpss_wakeup_interrupt</a> from vmpm_target.o(i.send_mpss_wakeup_interrupt) referenced from vmpm_target.o(.constdata)
 <LI><a href="#[cc]">sleep_init</a> from sleep_perform.o(i.sleep_init) referenced from main.o(.constdata)
 <LI><a href="#[c0]">smem_init</a> from smem.o(i.smem_init) referenced from main.o(.constdata)
 <LI><a href="#[1b]">spmiIsrWrapper</a> from SpmiOsImage.o(i.spmiIsrWrapper) referenced from SpmiOsImage.o(i.SpmiOs_RegisterISR)
 <LI><a href="#[7d]">subsys_apply</a> from rpm_subsys_state.o(i.subsys_apply) referenced from rpm_subsys_state.o(.data)
 <LI><a href="#[ca]">svs_init</a> from svs.o(i.svs_init) referenced from main.o(.constdata)
 <LI><a href="#[57]">svs_postchange_cb</a> from svs.o(i.svs_postchange_cb) referenced from svs.o(i.svs_resources_ready)
 <LI><a href="#[56]">svs_prechange_cb</a> from svs.o(i.svs_prechange_cb) referenced from svs.o(i.svs_resources_ready)
 <LI><a href="#[55]">svs_resources_ready</a> from svs.o(i.svs_resources_ready) referenced from svs.o(i.svs_init)
 <LI><a href="#[cf]">swevent_qdss_init</a> from swevent.o(i.swevent_qdss_init) referenced from main.o(.constdata)
 <LI><a href="#[d1]">system_db_init</a> from system_db_rpm.o(i.system_db_init) referenced from main.o(.constdata)
 <LI><a href="#[5b]">tiny_modem_abort_isr</a> from exceptions.o(i.tiny_modem_abort_isr) referenced from exceptions.o(i.tiny_modem_init)
 <LI><a href="#[7b]">tz_abort_isr</a> from exceptions.o(i.tz_abort_isr) referenced from exceptions.o(.ARM.__AT_0x00090200)
 <LI><a href="#[c4]">version_init</a> from version_init.o(i.version_init) referenced from main.o(.constdata)
 <LI><a href="#[cb]">vmpm_init</a> from vmpm.o(i.vmpm_init) referenced from main.o(.constdata)
 <LI><a href="#[5c]">vmpm_isr</a> from vmpm.o(i.vmpm_isr) referenced 2 times from exceptions.o(.ARM.__AT_0x00090200)
 <LI><a href="#[5c]">vmpm_isr</a> from vmpm.o(i.vmpm_isr) referenced from vmpm.o(i.vmpm_init)
 <LI><a href="#[c3]">xport_rpm_init</a> from xport_rpm.o(i.xport_rpm_init) referenced from main.o(.constdata)
 <LI><a href="#[79]">xport_rpm_isr</a> from xport_rpm.o(i.xport_rpm_isr) referenced 3 times from exceptions.o(.ARM.__AT_0x00090200)
 <LI><a href="#[79]">xport_rpm_isr</a> from xport_rpm.o(i.xport_rpm_isr) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[79]">xport_rpm_isr</a> from xport_rpm.o(i.xport_rpm_isr) referenced from xport_rpm.o(i.xport_rpm_mask_interrupt)
 <LI><a href="#[78]">xport_rpm_mask_interrupt</a> from xport_rpm.o(i.xport_rpm_mask_interrupt) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[6d]">xport_rpm_negotiate_features</a> from xport_rpm.o(i.xport_rpm_negotiate_features) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[7a]">xport_rpm_pkt_provider</a> from xport_rpm.o(i.xport_rpm_pkt_provider) referenced from xport_rpm.o(i.xport_rpm_isr)
 <LI><a href="#[70]">xport_rpm_set_version</a> from xport_rpm.o(i.xport_rpm_set_version) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[77]">xport_rpm_ssr</a> from xport_rpm.o(i.xport_rpm_ssr) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[c2]">xport_rpm_toc_init</a> from xport_rpm_toc.o(glink_cram_reclaim_pool) referenced from main.o(.constdata)
 <LI><a href="#[75]">xport_rpm_tx</a> from xport_rpm.o(i.xport_rpm_tx) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[72]">xport_rpm_tx_cmd_ch_close</a> from xport_rpm.o(i.xport_rpm_tx_cmd_ch_close) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[71]">xport_rpm_tx_cmd_ch_open</a> from xport_rpm.o(i.xport_rpm_tx_cmd_ch_open) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[74]">xport_rpm_tx_cmd_ch_remote_close_ack</a> from xport_rpm.o(i.xport_rpm_tx_cmd_ch_remote_close_ack) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[73]">xport_rpm_tx_cmd_ch_remote_open_ack</a> from xport_rpm.o(i.xport_rpm_tx_cmd_ch_remote_open_ack) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[76]">xport_rpm_tx_cmd_set_sigs</a> from xport_rpm.o(i.xport_rpm_tx_cmd_set_sigs) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[6e]">xport_rpm_tx_cmd_version</a> from xport_rpm.o(i.xport_rpm_tx_cmd_version) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[6f]">xport_rpm_tx_cmd_version_ack</a> from xport_rpm.o(i.xport_rpm_tx_cmd_version_ack) referenced from xport_rpm.o(i.xport_rpm_init)
 <LI><a href="#[d2]">zqcal_task_init</a> from rpm_suppressible.o(i.zqcal_task_init) referenced from main.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[101]"></a>__user_setup_stackheap</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR><BR>[Called By]<UL><LI>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f]"></a>abort</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, coredump.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_apss
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_fatal_sw_event
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_enable
</UL>
<BR>[Called By]<UL><LI>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
<LI>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_translation
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_settle
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_apply
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_translation
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_apply
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_bypass_cb
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_translation
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_settle
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_vreg_settle_status
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_stepper_settle_status
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resources
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resource_dependencies
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resources
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resource_dependencies
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_register_resources
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_put_pkt_ctx
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_version_ack
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_version
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_remote_sigs
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_remote_open
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_remote_close
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_close_ack
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_link_up
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_target_cmd_config
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestoring
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_s1_shadow_translation
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_driver_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_driver_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_driver_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitVoltage
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolSetAllocationSize
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolCreate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_get_ee_client_id
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_xlate(rpm_translation_info*)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_apply(rpm_application_info*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_query_npa_settling(rpm_application_info*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_resource_ee_transition(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_high_isr()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_low_isr()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_bringup_isr()
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_soft_transition
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV1(RPMMessageHeaderV1*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV0(unsigned)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_glink_port_state_isr(glink_channel_ctx*, Handler*, glink_channel_event_type)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_glink_link_state_isr(glink_link_info_t*, Handler*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_header
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_footer
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_corner
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_do_set_corner_voltage
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vect_create
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_uv_vote
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_level_vote
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_active_floor_vote
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_active_floor_voltage_level_vote
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_rail_level_remap
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_xlate
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_rail_corner_remap
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_aggregated_voltage_target_uv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_sleep_voltages
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_individual_rail
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_quantize_constrained_target
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_do_transition_rail
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_no_client_update_fcn
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_max_update_fcn
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_identity_update_fcn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_bitwise_update_fcn
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_is_any_interrupt_pending
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_CfgVoltageCommands
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_os_ext_get_smem_size
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_os_ext_get_smem_base
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_map_smem_targ_info
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_isr
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_setup
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugExecute
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_spdm_req_apply_cb
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle_xlate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_put
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_frombuffer
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_create
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_frombuffer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_swevent_xlate
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_set_mode
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_current_speed
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_resources_ready
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_prechange_cb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_postchange_cb
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_vmpm
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_update_rail_info
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_update_master_xo_stats
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_master_stats
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_get_client
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_associate_npa_resource
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subsys_apply
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_internalize_state
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_fuses_get_fuse_value
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_rail
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_corner_voltage
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_corner_voltage
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBCPRTaskISR
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBCPRTaskCornerChange
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_set_count_mode
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_poll_result
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_mask_sensor
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_get_rail_handle
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_set_corner_voltage_based_on_efuse
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_corner_params
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_corner_index
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pre_switch_callback
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_post_switch_callback
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_isr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_perform_op(SYSTEMDB_OP_QUEUE_ELEM*)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_enter
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_modes_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_deep_imminent
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_pcm_xlate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_pcm_apply
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskList::remove(Task&)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_insert_resource
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::init()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_class_add_client_type(ResourceClassData*, unsigned, unsigned)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_create_client(ResourceData*, unsigned)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_get_request(const ResourceData*, unsigned, unsigned*, const void**)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_init_shadow(unsigned, unsigned)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_shadow_resource
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_named_resource
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_internal_client_type
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_issue_request
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_num_clients
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_current_request
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_aggregated_request_buffer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_client
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_register_handler(rpm_service_type, void(*)(unsigned, void*, unsigned, void*), void*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settling_timer_register
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processNAS(volatile bool&, unsigned long long&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_lookup_and_alloc_client(ResourceData*, unsigned)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_has_transition_work(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_transition(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::enqueue(rpm_set_type, unsigned long long)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::set_last_transitioning_resource(ResourceData*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_specific_resource(TransitionContext*, ResourceData*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_malloc
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_config_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_register_isr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_tx_cmd_version_ack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_tx_cmd_version
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_tx_cmd_ch_remote_open_ack
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_tx_cmd_ch_remote_close_ack
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_xports_and_notify
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_notif_list_and_notify
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_requested_xport
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_ch_ctx_by_rcid
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_ch_ctx_by_lcid
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_update_best_xport
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_check_xport_link_up_and_notify
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_pmic_voltage
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_set_last_transitioning_resource
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transitioner_init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_sw_enable_vote
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_create_voter
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_corner_vote
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_adapter_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueCreate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkElementProcess
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolFree
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolAlloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resources_available_continuation
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resource_available_cb
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_query_by_client
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_limit_max_request
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_internal_request
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_cb
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_query_handle
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_complete_request
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_assign_resource_state
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_terminate_request
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_new_event
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_link_resource
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_sync_request
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_continuation
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_cleanup_placeholders
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_async_event_handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_Init_Xtal_Latency
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_setup_chip_sleep
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_callback
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_voltage_change_pre_callback
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_voltage_change_post_callback
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_unlock
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_lock
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_map_spinlock_region_va
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_get_offset
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_get_addr
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_sleep_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_proc_npa_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_resource_manager_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_channel_init_internal
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_MiscClkDisableDeepSleep
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfigEx
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DalDebugInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DetectClockConfig
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resources_available_cb
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_spdm_req_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_slaves_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_dsat_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init_cb
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_clock_request
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_sleep_settings
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_current_settings
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stack_chk_fail
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_isr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_isr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_bark_isr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_abort_isr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_modem_abort_isr
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_soft_trigger
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_isr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Realloc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Free
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Alloc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swevent_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_perform_lpm
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_settling_timer_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_set_changer_common_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_send_init_proxy_vote_sleep
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_send_init_proxy_vote
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_init_v2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_finalize_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_init_rail_info
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_create
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceptions_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceptions_enable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coredump.o(.emb_text)
</UL>
<P><STRONG><a name="[7c]"></a>dog_bark_isr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dog.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dog_bark_isr &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exceptions.o(.ARM.__AT_0x00090200)
</UL>
<P><STRONG><a name="[3bb]"></a>__asm___9_rpm_pcm_c_1c7b904e__halt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rpm_pcm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_enter_hibernation
</UL>

<P><STRONG><a name="[1f3]"></a>__asm___16_HALmpmPlatform_c_0ea4e44c__halt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, HALmpmPlatform.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
</UL>

<P><STRONG><a name="[3bf]"></a>__asm___21_lpr_definition_uber_c_ebf0609d__halt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpr_definition_uber.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
</UL>

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RPM_ENTRY)
</UL>
<P><STRONG><a name="[161]"></a>Chipinfo_GetFamily</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, Chipinfo.o(i.Chipinfo_GetFamily))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_exit_sleep
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_enter_sleep
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_hw_revision_specifics
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdss_imem_base
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DriverInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformInfo_Init
</UL>

<P><STRONG><a name="[160]"></a>Chipinfo_GetVersion</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, Chipinfo.o(i.Chipinfo_GetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_hw_revision_specifics
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdss_imem_base
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DriverInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformInfo_Init
</UL>

<P><STRONG><a name="[132]"></a>Clock_BIMCIsRestoreDone</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ClockRPMBIMC.o(i.Clock_BIMCIsRestoreDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Clock_BIMCIsRestoreDone &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsDEHREnable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetDEHRStatus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsPowerDomainEnabled
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_post_xo_shutdown
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_power_collapse
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestore
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCollapse
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSetFrequency
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_WaitForBIMCPowerRestore
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_WaitForBIMCPowerCollapse
</UL>

<P><STRONG><a name="[13a]"></a>Clock_BIMCRestore</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ClockRPMBIMC.o(i.Clock_BIMCRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = Clock_BIMCRestore &rArr; Clock_BIMCRestoring &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsDEHREnable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetDEHRStatus
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestoring
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsPowerDomainEnabled
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfigEx
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSetFrequency
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetBIMCPowerRestore
</UL>

<P><STRONG><a name="[13c]"></a>Clock_BIMCRestoring</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, ClockRPMBIMC.o(i.Clock_BIMCRestoring))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Clock_BIMCRestoring &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsDEHREnable
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_post_xo_shutdown
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsBSPSupported
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnablePowerDomain
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestore
</UL>

<P><STRONG><a name="[144]"></a>Clock_BIMCSetFrequency</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ClockRPMBIMC.o(i.Clock_BIMCSetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = Clock_BIMCSetFrequency &rArr; Clock_BIMCRestore &rArr; Clock_BIMCRestoring &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestore
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCollapse
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeDCVSEnaFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeBIMCFunc
</UL>

<P><STRONG><a name="[139]"></a>Clock_BIMCSwitchFrequency</STRONG> (Thumb, 358 bytes, Stack size 96 bytes, ClockRPMBIMC.o(i.Clock_BIMCSwitchFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockSpeed
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_pre_clock_switch
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_post_clock_switch
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_DetectClockMuxConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsBSPSupported
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetNPAResources
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestoring
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSetFrequency
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_pcm_apply
</UL>

<P><STRONG><a name="[142]"></a>Clock_BIMCSwitchFrequency_vddmin</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, ClockRPMBIMC.o(i.Clock_BIMCSwitchFrequency_vddmin))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Clock_BIMCSwitchFrequency_vddmin &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_pre_clock_switch
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_post_clock_switch
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsBSPSupported
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
</UL>

<P><STRONG><a name="[14c]"></a>Clock_ConfigSource</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ClockSources.o(i.Clock_ConfigSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clock_ConfigSource
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_ConfigPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfig
</UL>

<P><STRONG><a name="[14e]"></a>Clock_DalDebugInit</STRONG> (Thumb, 440 bytes, Stack size 128 bytes, ClockRPM.o(i.Clock_DalDebugInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Clock_DalDebugInit &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsBSPSupported
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetDALPropertyHandle
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
</UL>

<P><STRONG><a name="[34]"></a>Clock_DisableClock</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, ClockDriver.o(i.Clock_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Clock_DisableClock &rArr; Clock_DisableSource &rArr;  Clock_DisableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetTestClockId
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_DisableClock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageRequest
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableSource
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULogFront_RealTimePrintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestoring
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestore
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCollapse
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ToggleQDSSClocks
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeQPICFunc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeCryptoFunc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_WaitForBIMCPowerCollapse
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icb_rpm_spdm_req.o(i.icb_spdm_req_apply_cb)
</UL>
<P><STRONG><a name="[141]"></a>Clock_DisablePowerDomain</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ClockDriver.o(i.Clock_DisablePowerDomain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Clock_DisablePowerDomain &rArr; ULogFront_RealTimePrintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_DisablePowerDomain
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULogFront_RealTimePrintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
</UL>

<P><STRONG><a name="[158]"></a>Clock_DisableSource</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, ClockSources.o(i.Clock_DisableSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + In Cycle
<LI>Call Chain = Clock_DisableSource &rArr;  Clock_DisableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_DisableSourceVote
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_DisableSource
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageRequest
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableSource
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULogFront_RealTimePrintf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeGPLL0Func
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableSource
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfig
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
</UL>

<P><STRONG><a name="[15f]"></a>Clock_DriverInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ClockDriver.o(i.Clock_DriverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = Clock_DriverInit &rArr; Clock_InitImage &rArr; Clock_InitNPA &rArr; npa_define_node_cb &rArr; npa_define_node_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chipinfo_GetVersion
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chipinfo_GetFamily
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetDALPropertyHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[35]"></a>Clock_EnableClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ClockDriver.o(i.Clock_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Clock_EnableClock &rArr; Clock_EnableClockEx &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestoring
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ToggleQDSSClocks
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeQPICFunc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeCryptoFunc
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icb_rpm_spdm_req.o(i.icb_spdm_req_apply_cb)
</UL>
<P><STRONG><a name="[165]"></a>Clock_EnableClockEx</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ClockDriver.o(i.Clock_EnableClockEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Clock_EnableClockEx &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsClockSupported
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsClockOn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetTestClockId
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_EnableClock
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_BusyWait
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageRequest
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableSource
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULogFront_RealTimePrintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_LogEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClock
</UL>

<P><STRONG><a name="[13e]"></a>Clock_EnablePowerDomain</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ClockDriver.o(i.Clock_EnablePowerDomain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Clock_EnablePowerDomain &rArr; ULogFront_RealTimePrintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_EnablePowerDomain
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULogFront_RealTimePrintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestoring
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
</UL>

<P><STRONG><a name="[166]"></a>Clock_EnableSource</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, ClockSources.o(i.Clock_EnableSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + In Cycle
<LI>Call Chain = Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_EnableSourceVote
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_EnableSource
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageRequest
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableSource
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULogFront_RealTimePrintf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeGPLL0Func
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableSource
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
</UL>

<P><STRONG><a name="[16e]"></a>Clock_GetClockFrequency</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ClockDriver.o(i.Clock_GetClockFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Clock_GetClockFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_DetectClockMuxConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_dsat_init
</UL>

<P><STRONG><a name="[16f]"></a>Clock_GetClockId</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ClockDriver.o(i.Clock_GetClockId))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Clock_GetClockId
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetSerialClkState
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetAhbClkState
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_spdm_req_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_dsat_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init_cb
</UL>

<P><STRONG><a name="[14f]"></a>Clock_GetDrvCtxt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ClockDriver.o(i.Clock_GetDrvCtxt))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_QDSS_PreChangedCB
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_QDSS_PostChangedCB
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeQPICFunc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeQDSSFunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeGenericFunc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeGPLL0Func
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeDCVSEnaFunc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeBIMCFunc
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetQDSSClocks
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitNPA
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DalDebugInit
</UL>

<P><STRONG><a name="[146]"></a>Clock_GetNPAResources</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ClockRPMNPA.o(i.Clock_GetNPAResources))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsQDSSOn
</UL>

<P><STRONG><a name="[171]"></a>Clock_GetPowerDomainId</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ClockDriver.o(i.Clock_GetPowerDomainId))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Clock_GetPowerDomainId
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_modes_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
</UL>

<P><STRONG><a name="[172]"></a>Clock_GetPropertyValue</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ClockDriver.o(i.Clock_GetPropertyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Clock_GetPropertyValue &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitVoltage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitSources
</UL>

<P><STRONG><a name="[be]"></a>Clock_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ClockRPM.o(i.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = Clock_Init &rArr; Clock_DriverInit &rArr; Clock_InitImage &rArr; Clock_InitNPA &rArr; npa_define_node_cb &rArr; npa_define_node_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DriverInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>Clock_InitCore</STRONG> (Thumb, 694 bytes, Stack size 80 bytes, ClockDriver.o(i.Clock_InitCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Clock_InitCore &rArr; Clock_InitVoltage &rArr; railway_create_voter &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsPowerDomainEnabled
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetPowerDomainName
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetNumberOfPowerDomains
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetNumberOfClocks
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetNumberOfClockDomains
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetNextPowerDomain
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetNextClockInDomain
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetNextClockDomain
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetClockName
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitVoltage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitSources
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_DetectClockMuxConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_LogEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DriverInit
</UL>

<P><STRONG><a name="[164]"></a>Clock_InitImage</STRONG> (Thumb, 1082 bytes, Stack size 136 bytes, ClockRPM.o(i.Clock_InitImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = Clock_InitImage &rArr; Clock_InitNPA &rArr; npa_define_node_cb &rArr; npa_define_node_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_npa_adapter
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_associate_npa_resource
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_npa_settling_adapter
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageSuspend
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageResume
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsClockOn
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitNPA
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetPowerDomainId
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetNPAResources
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnablePowerDomain
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DalDebugInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DetectClockConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetClockId
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DriverInit
</UL>

<P><STRONG><a name="[181]"></a>Clock_InitNPA</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, ClockRPMNPA.o(i.Clock_InitNPA))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = Clock_InitNPA &rArr; npa_define_node_cb &rArr; npa_define_node_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsClockEnabled
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_cb
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_callback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_id
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
</UL>

<P><STRONG><a name="[177]"></a>Clock_InitSources</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, ClockSources.o(i.Clock_InitSources))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = Clock_InitSources &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetPropertyValue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_LogEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
</UL>

<P><STRONG><a name="[17e]"></a>Clock_InitVoltage</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ClockVoltage.o(i.Clock_InitVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Clock_InitVoltage &rArr; railway_create_voter &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetPropertyValue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_create_voter
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_id
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
</UL>

<P><STRONG><a name="[13d]"></a>Clock_IsBSPSupported</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ClockDriver.o(i.Clock_IsBSPSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clock_IsBSPSupported
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetChipVersion
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetChipFamily
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency_vddmin
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestoring
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockSpeed
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPAResourceQuery
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DalDebugInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DetectClockConfig
</UL>

<P><STRONG><a name="[187]"></a>Clock_IsClockEnabled</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ClockDriver.o(i.Clock_IsClockEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clock_IsClockEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsClockEnabled
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeQPICFunc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeCryptoFunc
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitNPA
</UL>

<P><STRONG><a name="[180]"></a>Clock_IsClockOn</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ClockDriver.o(i.Clock_IsClockOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clock_IsClockOn
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsClockOn
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetSerialClkState
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetAhbClkState
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
</UL>

<P><STRONG><a name="[134]"></a>Clock_IsPowerDomainEnabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ClockDriver.o(i.Clock_IsPowerDomainEnabled))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsPowerDomainEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestore
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCollapse
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_WaitForBIMCPowerCollapse
</UL>

<P><STRONG><a name="[18e]"></a>Clock_IsQDSSOn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ClockRPM.o(i.Clock_IsQDSSOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clock_IsQDSSOn
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetNPAResources
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSDisableTrace
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_self_refresh_all
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_self_refresh_all
</UL>

<P><STRONG><a name="[18f]"></a>Clock_LogState</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, ClockDriver.o(i.Clock_LogState))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Clock_LogState &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsClockSupported
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsClockOn
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_perform_op(SYSTEMDB_OP_QUEUE_ELEM*)
</UL>

<P><STRONG><a name="[198]"></a>Clock_ProcessorRestore</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, ClockRPM.o(i.Clock_ProcessorRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = Clock_ProcessorRestore &rArr; Clock_SetBIMCPowerRestore &rArr; Clock_BIMCRestore &rArr; Clock_BIMCRestoring &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClock
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_MiscClkRestoreDuringWakeup
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GPLL0_FSM_reset_deep_sleep
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_WaitForBIMCPowerRestore
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageSuspend
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageResume
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetQDSSClocks
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfigEx
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetBIMCPowerRestore
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetNPAResources
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[19d]"></a>Clock_ProcessorSleep</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ClockRPM.o(i.Clock_ProcessorSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = Clock_ProcessorSleep &rArr; Clock_WaitForBIMCPowerCollapse &rArr; Clock_BIMCIsRestoreDone &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_MiscClkDisableDeepSleep
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GPLL0_disable_deep_sleep
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_WaitForBIMCPowerCollapse
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageSuspend
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageResume
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetQDSSClocks
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfigEx
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetBIMCPowerCollapse
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetNPAResources
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
</UL>

<P><STRONG><a name="[1a2]"></a>Clock_RegisterCallback</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ClockDriver.o(i.Clock_RegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Clock_RegisterCallback &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_dsat_init
</UL>

<P><STRONG><a name="[19e]"></a>Clock_SetBIMCPowerCollapse</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ClockRPMBIMC.o(i.Clock_SetBIMCPowerCollapse))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Clock_SetBIMCPowerCollapse &rArr; Clock_BIMCollapse &rArr; Clock_BIMCIsRestoreDone &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCollapse
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
</UL>

<P><STRONG><a name="[19c]"></a>Clock_SetBIMCPowerRestore</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ClockRPMBIMC.o(i.Clock_SetBIMCPowerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = Clock_SetBIMCPowerRestore &rArr; Clock_BIMCRestore &rArr; Clock_BIMCRestoring &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
</UL>

<P><STRONG><a name="[14b]"></a>Clock_SetClockConfig</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, ClockDriver.o(i.Clock_SetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_ConfigClockMux
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageRequest
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableSource
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableSource
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ConfigSource
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency_vddmin
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockSpeed
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetQDSSClocks
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfigEx
</UL>

<P><STRONG><a name="[13b]"></a>Clock_SetClockConfigEx</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ClockCommon.o(i.Clock_SetClockConfigEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = Clock_SetClockConfigEx &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetTestClockId
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfig
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestore
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCollapse
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_WaitForBIMCPowerCollapse
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
</UL>

<P><STRONG><a name="[149]"></a>Clock_SetClockSpeed</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ClockRPMNPA.o(i.Clock_SetClockSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetTestClockId
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsBSPSupported
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeSPMFunc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeQPICFunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeGenericFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeDCVSEnaFunc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeCryptoFunc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeCPUFunc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency
</UL>

<P><STRONG><a name="[193]"></a>Clock_SetQDSSClocks</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ClockRPMNPA.o(i.Clock_SetQDSSClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = Clock_SetQDSSClocks &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageRequest
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSSTMSetTimestampFreq
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_QDSS_PreChangedCB
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_QDSS_PostChangedCB
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeQDSSFunc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
</UL>

<P><STRONG><a name="[1a5]"></a>Clock_SetSPMStates</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ClockRPM.o(i.Clock_SetSPMStates))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Clock_SetSPMStates &rArr; rpm_send_init_proxy_vote_sleep &rArr; resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_send_init_proxy_vote_sleep
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_send_init_proxy_vote
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_put
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>Clock_VoltageRequest</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ClockVoltage.o(i.Clock_VoltageRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Clock_VoltageRequest &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_level_vote
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_rail
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableSource
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableSource
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetQDSSClocks
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
</UL>

<P><STRONG><a name="[185]"></a>Clock_VoltageResume</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ClockVoltage.o(i.Clock_VoltageResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Clock_VoltageResume &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_level_vote
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_rail
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
</UL>

<P><STRONG><a name="[17f]"></a>Clock_VoltageSuspend</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ClockVoltage.o(i.Clock_VoltageSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Clock_VoltageSuspend &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_level_vote
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_rail
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
</UL>

<P><STRONG><a name="[19f]"></a>Clock_WaitForBIMCPowerCollapse</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ClockRPMBIMC.o(i.Clock_WaitForBIMCPowerCollapse))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = Clock_WaitForBIMCPowerCollapse &rArr; Clock_BIMCIsRestoreDone &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsDEHREnable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetDEHRStatus
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_BusyWait
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsPowerDomainEnabled
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfigEx
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
</UL>

<P><STRONG><a name="[199]"></a>Clock_WaitForBIMCPowerRestore</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ClockRPMBIMC.o(i.Clock_WaitForBIMCPowerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Clock_WaitForBIMCPowerRestore &rArr; Clock_BIMCIsRestoreDone &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
</UL>

<P><STRONG><a name="[15]"></a>Core_DALSYSAllocatorFcn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, CorePool.o(i.Core_DALSYSAllocatorFcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Core_DALSYSAllocatorFcn &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> CorePool.o(i.Core_PoolConfig)
<LI> CorePool.o(i.Core_PoolCreate)
</UL>
<P><STRONG><a name="[1ac]"></a>Core_PoolAlloc</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, CorePool.o(i.Core_PoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueAlloc
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resource_available_cb
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_cb
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_new_event
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_link_resource
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_continuation
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resources_available_cb
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
</UL>

<P><STRONG><a name="[1ad]"></a>Core_PoolConfig</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, CorePool.o(i.Core_PoolConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Core_PoolConfig &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_init
</UL>

<P><STRONG><a name="[1af]"></a>Core_PoolCreate</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, CorePool.o(i.Core_PoolCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Core_PoolCreate &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueCreate
</UL>

<P><STRONG><a name="[1b0]"></a>Core_PoolFree</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, CorePool.o(i.Core_PoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Core_PoolFree &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueFree
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resources_available_continuation
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_continuation
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_cleanup_placeholders
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
</UL>

<P><STRONG><a name="[1ae]"></a>Core_PoolInit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, CorePool.o(i.Core_PoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Core_PoolInit &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolCreate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolConfig
</UL>

<P><STRONG><a name="[1b1]"></a>Core_PoolSetAllocationSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, CorePool.o(i.Core_PoolSetAllocationSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Core_PoolSetAllocationSize &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueCreate
</UL>

<P><STRONG><a name="[1b2]"></a>Core_WorkElementProcess</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, CoreWorkContainer.o(i.Core_WorkElementProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Core_WorkElementProcess &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_process_event
</UL>

<P><STRONG><a name="[1b3]"></a>Core_WorkQueueAlloc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, CoreWorkQueue.o(i.Core_WorkQueueAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Core_WorkQueueAlloc &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_assign_resource_state
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_sync_request
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_continuation
</UL>

<P><STRONG><a name="[1b4]"></a>Core_WorkQueueCreate</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, CoreWorkQueue.o(i.Core_WorkQueueCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Core_WorkQueueCreate &rArr; Core_PoolCreate &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolSetAllocationSize
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolCreate
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_init
</UL>

<P><STRONG><a name="[18]"></a>Core_WorkQueueFree</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, CoreWorkQueue.o(i.Core_WorkQueueFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Core_WorkQueueFree &rArr; Core_PoolFree &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> CoreWorkQueue.o(i.Core_WorkQueueCreate)
</UL>
<P><STRONG><a name="[17]"></a>Core_WorkQueueGet</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, CoreWorkQueue.o(i.Core_WorkQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Core_WorkQueueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> CoreWorkQueue.o(i.Core_WorkQueueCreate)
</UL>
<P><STRONG><a name="[300]"></a>Core_WorkQueueLength</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, CoreWorkQueue.o(i.Core_WorkQueueLength))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_num_pending_events
</UL>

<P><STRONG><a name="[16]"></a>Core_WorkQueuePut</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, CoreWorkQueue.o(i.Core_WorkQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Core_WorkQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_assign_resource_state
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_sync_request
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_continuation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> CoreWorkQueue.o(i.Core_WorkQueueCreate)
</UL>
<P><STRONG><a name="[12]"></a>DALSYS_BusyWait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dal_stubs.o(i.DALSYS_BusyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DALSYS_BusyWait &rArr; busywait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busywait
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_vreg_settled_check_alg
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_vreg_settle_status
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_stepper_settle_status
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_Wait
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_WaitForBIMCPowerCollapse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockDriver.o(i.Clock_DriverInit)
</UL>
<P><STRONG><a name="[150]"></a>DALSYS_GetDALPropertyHandle</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, DALProps.o(i.DALSYS_GetDALPropertyHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DALSYS_GetDALPropertyHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DriverInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DalDebugInit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timetick_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busywait_init
</UL>

<P><STRONG><a name="[1b7]"></a>DALSYS_GetDALPropertyHandleStr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, DALProps.o(i.DALSYS_GetDALPropertyHandleStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DALSYS_GetDALPropertyHandleStr &rArr; DAL_StringDeviceObjectLookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAL_StringDeviceObjectLookup
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOsNhlos_GetDalProp
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetOwnerId
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_config_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_get_target_resources
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init
</UL>

<P><STRONG><a name="[151]"></a>DALSYS_GetPropertyValue</STRONG> (Thumb, 508 bytes, Stack size 72 bytes, DALProps.o(i.DALSYS_GetPropertyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
<LI>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memscpy
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_specific_info
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOsNhlos_GetDalProp
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetOwnerId
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_periph_count_info
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_common_info
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetPropertyValue
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_config_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DalDebugInit
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_get_target_resources
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timetick_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busywait_init
</UL>

<P><STRONG><a name="[16a]"></a>DALSYS_LogEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.DALSYS_LogEvent))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitSources
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
</UL>

<P><STRONG><a name="[1b8]"></a>DAL_StringDeviceObjectLookup</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, DALProps.o(i.DAL_StringDeviceObjectLookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DAL_StringDeviceObjectLookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strncmp
<LI>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetDALPropertyHandleStr
</UL>

<P><STRONG><a name="[1bc]"></a>DalHWIO_MapRegion</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dal_stubs.o(i.DalHWIO_MapRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DalHWIO_MapRegion &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetPmicArbBaseAddr
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_map_smem_targ_info
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_map_spinlock_region_va
</UL>

<P><STRONG><a name="[1bd]"></a>DalIPCInt_Trigger</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dal_stubs.o(i.DalIPCInt_Trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DalIPCInt_Trigger &rArr; busywait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busywait
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_send_interrupt
</UL>

<P><STRONG><a name="[1be]"></a>ETM_trace_disable</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, etm.o(i.ETM_trace_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ETM_trace_disable &rArr; QDSSDisableTrace &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSDisableTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSETMControl
</UL>

<P><STRONG><a name="[1c0]"></a>ETM_trace_enable</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, etm.o(i.ETM_trace_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ETM_trace_enable &rArr; QDSSEnableTrace &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSEnableTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSETMControl
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_bimc_ArbitrationEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HALbimc.o(i.HAL_bimc_ArbitrationEnable))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_ArbitrationEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_slaves_init
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_bimc_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HALbimc.o(i.HAL_bimc_Init))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_bimc_SetDangerBandwidth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, HALbimc.o(i.HAL_bimc_SetDangerBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_bimc_SetDangerBandwidth &rArr; bimc_SetDangerBandwidth &rArr; bimc_CalculateBKEParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_SetDangerBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dsat_context
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_bimc_SetDangerMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, HALbimc.o(i.HAL_bimc_SetDangerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_bimc_SetDangerMode &rArr; bimc_SetDangerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_SetDangerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dsat_context
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_bimc_SetDangerPolicy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, HALbimc.o(i.HAL_bimc_SetDangerPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_bimc_SetDangerPolicy &rArr; bimc_SetDangerPolicy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_SetDangerPolicy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dsat_context
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_bimc_SetDangerPriority</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, HALbimc.o(i.HAL_bimc_SetDangerPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_bimc_SetDangerPriority &rArr; bimc_SetDangerPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_SetDangerPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_dsat_init
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_bimc_SetQosBandwidth</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, HALbimc.o(i.HAL_bimc_SetQosBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_bimc_SetQosBandwidth &rArr; bimc_SetQosBandwidth &rArr; bimc_CalculateBKEParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_SetQosBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_apply_cb
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_init
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_bimc_SetQosMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HALbimc.o(i.HAL_bimc_SetQosMode))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_SetQosMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_init
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_bimc_SetQosPriority</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, HALbimc.o(i.HAL_bimc_SetQosPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_bimc_SetQosPriority &rArr; bimc_SetQosPriority &rArr; bimc_SetQosBandwidth &rArr; bimc_CalculateBKEParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_SetQosPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_init
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_clk_BusyWait</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_BusyWait))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_StromerPLLEnableVote
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_StromerPLLEnable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_StromerPLLConfigPLL
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GenericPLLEnableVote
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GenericPLLEnable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GenericPLLConfigPLL
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_MiscClkDisableDeepSleep
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GPLL0_FSM_reset_deep_sleep
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_clk_ConfigClockMux</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_ConfigClockMux))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfig
</UL>

<P><STRONG><a name="[14d]"></a>HAL_clk_ConfigPLL</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_ConfigPLL))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ConfigSource
</UL>

<P><STRONG><a name="[148]"></a>HAL_clk_DetectClockMuxConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_DetectClockMuxConfig))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetClockFrequency
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DetectClockConfig
</UL>

<P><STRONG><a name="[153]"></a>HAL_clk_DetectPLLConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_DetectPLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DetectClockConfig
</UL>

<P><STRONG><a name="[155]"></a>HAL_clk_DisableClock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_DisableClock))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
</UL>

<P><STRONG><a name="[15b]"></a>HAL_clk_DisablePowerDomain</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_DisablePowerDomain))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisablePowerDomain
</UL>

<P><STRONG><a name="[15e]"></a>HAL_clk_DisableSource</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_DisableSource))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableSource
</UL>

<P><STRONG><a name="[15d]"></a>HAL_clk_DisableSourceVote</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_DisableSourceVote))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableSource
</UL>

<P><STRONG><a name="[167]"></a>HAL_clk_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
</UL>

<P><STRONG><a name="[16b]"></a>HAL_clk_EnablePowerDomain</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_EnablePowerDomain))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnablePowerDomain
</UL>

<P><STRONG><a name="[197]"></a>HAL_clk_EnableQ6BIMCPorts</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, HALclkBIMC.o(i.HAL_clk_EnableQ6BIMCPorts))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeSPMFunc
</UL>

<P><STRONG><a name="[16d]"></a>HAL_clk_EnableSource</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_EnableSource))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableSource
</UL>

<P><STRONG><a name="[16c]"></a>HAL_clk_EnableSourceVote</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_EnableSourceVote))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableSource
</UL>

<P><STRONG><a name="[19a]"></a>HAL_clk_GPLL0_FSM_reset_deep_sleep</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, HALclkMainRPM.o(i.HAL_clk_GPLL0_FSM_reset_deep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_clk_GPLL0_FSM_reset_deep_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_BusyWait
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_clk_GPLL0_disable_deep_sleep</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, HALclkMainRPM.o(i.HAL_clk_GPLL0_disable_deep_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
</UL>

<P><STRONG><a name="[a5]"></a>HAL_clk_GenericConfigDivider</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, HALclkGeneric.o(i.HAL_clk_GenericConfigDivider))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGeneric.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>HAL_clk_GenericConfigFootswitch</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, HALclkGeneric.o(i.HAL_clk_GenericConfigFootswitch))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGeneric.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>HAL_clk_GenericConfigMux</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, HALclkGeneric.o(i.HAL_clk_GenericConfigMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_clk_GenericConfigMux
</UL>
<BR>[Address Reference Count : 3]<UL><LI> HALclkGCCMain.o(.data)
<LI> HALclkGCCMain.o(.data)
<LI> HALclkGCCMain.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>HAL_clk_GenericDetectDivider</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, HALclkGeneric.o(i.HAL_clk_GenericDetectDivider))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGeneric.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>HAL_clk_GenericDetectMuxConfig</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, HALclkGeneric.o(i.HAL_clk_GenericDetectMuxConfig))
<BR>[Address Reference Count : 5]<UL><LI> HALclkGCCMain.o(.data)
<LI> HALclkGCCMain.o(.data)
<LI> HALclkGCCMain.o(.data)
<LI> HALclkGCCMain.o(.data)
<LI> HALclkGCCMain.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>HAL_clk_GenericDisable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, HALclkGeneric.o(i.HAL_clk_GenericDisable))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGeneric.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>HAL_clk_GenericEnable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, HALclkGeneric.o(i.HAL_clk_GenericEnable))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGeneric.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>HAL_clk_GenericIsEnabled</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, HALclkGeneric.o(i.HAL_clk_GenericIsEnabled))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGeneric.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>HAL_clk_GenericIsOn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, HALclkGeneric.o(i.HAL_clk_GenericIsOn))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGeneric.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>HAL_clk_GenericPLLConfig</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, HALclkGenericPLL.o(i.HAL_clk_GenericPLLConfig))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGenericPLL.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>HAL_clk_GenericPLLConfigPLL</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, HALclkGenericPLL.o(i.HAL_clk_GenericPLLConfigPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_clk_GenericPLLConfigPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_BusyWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HALclkGenericPLL.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>HAL_clk_GenericPLLDetectPLLConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, HALclkGenericPLL.o(i.HAL_clk_GenericPLLDetectPLLConfig))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGenericPLL.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>HAL_clk_GenericPLLDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, HALclkGenericPLL.o(i.HAL_clk_GenericPLLDisable))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGenericPLL.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>HAL_clk_GenericPLLDisableVote</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HALclkGenericPLL.o(i.HAL_clk_GenericPLLDisableVote))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGenericPLL.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>HAL_clk_GenericPLLEnable</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, HALclkGenericPLL.o(i.HAL_clk_GenericPLLEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_clk_GenericPLLEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_BusyWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HALclkGenericPLL.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>HAL_clk_GenericPLLEnableVote</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, HALclkGenericPLL.o(i.HAL_clk_GenericPLLEnableVote))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_clk_GenericPLLEnableVote
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_BusyWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HALclkGenericPLL.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>HAL_clk_GenericPLLIsEnabled</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, HALclkGenericPLL.o(i.HAL_clk_GenericPLLIsEnabled))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGenericPLL.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>HAL_clk_GenericPLLIsVoteEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HALclkGenericPLL.o(i.HAL_clk_GenericPLLIsVoteEnabled))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGenericPLL.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>HAL_clk_GenericPowerDomainDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, HALclkGeneric.o(i.HAL_clk_GenericPowerDomainDisable))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGeneric.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>HAL_clk_GenericPowerDomainEnable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, HALclkGeneric.o(i.HAL_clk_GenericPowerDomainEnable))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGeneric.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>HAL_clk_GenericPowerDomainIsEnabled</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, HALclkGeneric.o(i.HAL_clk_GenericPowerDomainIsEnabled))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGeneric.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>HAL_clk_GenericReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, HALclkGeneric.o(i.HAL_clk_GenericReset))
<BR>[Address Reference Count : 1]<UL><LI> HALclkGeneric.o(.data)
</UL>
<P><STRONG><a name="[18b]"></a>HAL_clk_GetChipFamily</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_GetChipFamily))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsBSPSupported
</UL>

<P><STRONG><a name="[18c]"></a>HAL_clk_GetChipVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_GetChipVersion))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsBSPSupported
</UL>

<P><STRONG><a name="[17a]"></a>HAL_clk_GetClockName</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_GetClockName))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
</UL>

<P><STRONG><a name="[135]"></a>HAL_clk_GetDEHRStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HALclkBIMC.o(i.HAL_clk_GetDEHRStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestore
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCollapse
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_WaitForBIMCPowerCollapse
</UL>

<P><STRONG><a name="[178]"></a>HAL_clk_GetNextClockDomain</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_GetNextClockDomain))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
</UL>

<P><STRONG><a name="[179]"></a>HAL_clk_GetNextClockInDomain</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_GetNextClockInDomain))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
</UL>

<P><STRONG><a name="[17b]"></a>HAL_clk_GetNextPowerDomain</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_GetNextPowerDomain))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
</UL>

<P><STRONG><a name="[173]"></a>HAL_clk_GetNumberOfClockDomains</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_GetNumberOfClockDomains))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
</UL>

<P><STRONG><a name="[175]"></a>HAL_clk_GetNumberOfClocks</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_GetNumberOfClocks))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
</UL>

<P><STRONG><a name="[176]"></a>HAL_clk_GetNumberOfPowerDomains</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_GetNumberOfPowerDomains))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
</UL>

<P><STRONG><a name="[17c]"></a>HAL_clk_GetPowerDomainName</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_GetPowerDomainName))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
</UL>

<P><STRONG><a name="[15a]"></a>HAL_clk_GetTestClockId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_GetTestClockId))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockSpeed
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfigEx
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
</UL>

<P><STRONG><a name="[162]"></a>HAL_clk_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, HALclk.o(i.HAL_clk_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_clk_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DriverInit
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_clk_InstallClockDomains</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, HALclk.o(i.HAL_clk_InstallClockDomains))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_clk_InstallClockDomains
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_PlatformInitGCCMain
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_clk_InstallPLL</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, HALclkGenericPLL.o(i.HAL_clk_InstallPLL))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_InstallSource
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_PlatformInitSources
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_clk_InstallPowerDomains</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, HALclk.o(i.HAL_clk_InstallPowerDomains))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_clk_InstallPowerDomains
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_PlatformInitGCCMain
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_clk_InstallSource</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_InstallSource))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_InstallPLL
</UL>

<P><STRONG><a name="[18d]"></a>HAL_clk_IsClockEnabled</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_IsClockEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsClockEnabled
</UL>

<P><STRONG><a name="[169]"></a>HAL_clk_IsClockOn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_IsClockOn))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_LogState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsClockOn
</UL>

<P><STRONG><a name="[168]"></a>HAL_clk_IsClockSupported</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_IsClockSupported))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_LogState
</UL>

<P><STRONG><a name="[133]"></a>HAL_clk_IsDEHREnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HALclkBIMC.o(i.HAL_clk_IsDEHREnable))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestoring
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestore
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCollapse
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_WaitForBIMCPowerCollapse
</UL>

<P><STRONG><a name="[17d]"></a>HAL_clk_IsPowerDomainEnabled</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, HALclk.o(i.HAL_clk_IsPowerDomainEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsPowerDomainEnabled
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitCore
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_clk_MiscClkDisableDeepSleep</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, HALclkMainRPM.o(i.HAL_clk_MiscClkDisableDeepSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_clk_MiscClkDisableDeepSleep &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_BusyWait
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
</UL>

<P><STRONG><a name="[19b]"></a>HAL_clk_MiscClkRestoreDuringWakeup</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, HALclkMainRPM.o(i.HAL_clk_MiscClkRestoreDuringWakeup))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
</UL>

<P><STRONG><a name="[8b]"></a>HAL_clk_PlatformInitGCCMain</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, HALclkGCCMain.o(i.HAL_clk_PlatformInitGCCMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_clk_PlatformInitGCCMain &rArr; HAL_clk_InstallClockDomains
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_InstallPowerDomains
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_InstallClockDomains
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HALclkMainRPM.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>HAL_clk_PlatformInitSources</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, HALclkMainRPM.o(i.HAL_clk_PlatformInitSources))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_clk_PlatformInitSources
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_InstallPLL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HALclkMainRPM.o(.data)
</UL>
<P><STRONG><a name="[196]"></a>HAL_clk_SPMAPPSEnableBIMCPorts</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, HALclkBIMC.o(i.HAL_clk_SPMAPPSEnableBIMCPorts))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeSPMFunc
</UL>

<P><STRONG><a name="[ae]"></a>HAL_clk_StromerPLLConfig</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, HALclkStromerPLL.o(i.HAL_clk_StromerPLLConfig))
<BR>[Address Reference Count : 1]<UL><LI> HALclkStromerPLL.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>HAL_clk_StromerPLLConfigPLL</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, HALclkStromerPLL.o(i.HAL_clk_StromerPLLConfigPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_clk_StromerPLLConfigPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_BusyWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HALclkStromerPLL.o(.data)
</UL>
<P><STRONG><a name="[ac]"></a>HAL_clk_StromerPLLDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, HALclkStromerPLL.o(i.HAL_clk_StromerPLLDisable))
<BR>[Address Reference Count : 1]<UL><LI> HALclkStromerPLL.o(.data)
</UL>
<P><STRONG><a name="[b2]"></a>HAL_clk_StromerPLLDisableVote</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HALclkStromerPLL.o(i.HAL_clk_StromerPLLDisableVote))
<BR>[Address Reference Count : 1]<UL><LI> HALclkStromerPLL.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>HAL_clk_StromerPLLEnable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, HALclkStromerPLL.o(i.HAL_clk_StromerPLLEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_clk_StromerPLLEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_BusyWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HALclkStromerPLL.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>HAL_clk_StromerPLLEnableVote</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, HALclkStromerPLL.o(i.HAL_clk_StromerPLLEnableVote))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_clk_StromerPLLEnableVote
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_BusyWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HALclkStromerPLL.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>HAL_clk_StromerPLLIsEnabled</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, HALclkStromerPLL.o(i.HAL_clk_StromerPLLIsEnabled))
<BR>[Address Reference Count : 1]<UL><LI> HALclkStromerPLL.o(.data)
</UL>
<P><STRONG><a name="[b3]"></a>HAL_clk_StromerPLLIsVoteEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HALclkStromerPLL.o(i.HAL_clk_StromerPLLIsVoteEnabled))
<BR>[Address Reference Count : 1]<UL><LI> HALclkStromerPLL.o(.data)
</UL>
<P><STRONG><a name="[3af]"></a>HAL_config_timers</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_config_timers))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
</UL>

<P><STRONG><a name="[3b0]"></a>HAL_config_vlimits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_config_vlimits))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_deep_sleep_enter_tsense</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_deep_sleep_enter_tsense))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_deep_sleep_exit_tsense</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_deep_sleep_exit_tsense))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[2f4]"></a>HAL_mpm_CfgCXOSleep</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_CfgCXOSleep))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_setup_chip_sleep
</UL>

<P><STRONG><a name="[2ec]"></a>HAL_mpm_CfgEbi1SwCtl</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_CfgEbi1SwCtl))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_config_ebi1_freeze_io
</UL>

<P><STRONG><a name="[2ee]"></a>HAL_mpm_CfgFreezeIOs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_CfgFreezeIOs))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_config_freeze_ios
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_mpm_CfgVoltageCommands</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, HALmpmVDDCommands.o(i.HAL_mpm_CfgVoltageCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = HAL_mpm_CfgVoltageCommands &rArr; pm_mpm_cmd_config &rArr; pm_mpm_target_cmd_config &rArr; pm_rpm_volt_level_status &rArr; pm_ldo_volt_level_status &rArr; pm_pwr_volt_level_status_alg &rArr; pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_cmd_config
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_CfgVoltageRailSleep
</UL>

<P><STRONG><a name="[1db]"></a>HAL_mpm_CfgVoltageRailSleep</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, HALmpmPlatform.o(i.HAL_mpm_CfgVoltageRailSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = HAL_mpm_CfgVoltageRailSleep &rArr; HAL_mpm_CfgVoltageCommands &rArr; pm_mpm_cmd_config &rArr; pm_mpm_target_cmd_config &rArr; pm_rpm_volt_level_status &rArr; pm_ldo_volt_level_status &rArr; pm_pwr_volt_level_status_alg &rArr; pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_CfgVoltageCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_setup_chip_sleep
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_mpm_CfgWbootEbiIOCntl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_CfgWbootEbiIOCntl))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_Init
</UL>

<P><STRONG><a name="[2f5]"></a>HAL_mpm_ClearSleepModes</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_ClearSleepModes))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_teardown_sleep
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_mpm_ConfigDebugBus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_ConfigDebugBus))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_Init
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_mpm_ConfigDebugBus_1</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_ConfigDebugBus_1))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_Init
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_mpm_ConfigPenDebounceDelay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_ConfigPenDebounceDelay))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_Init
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_mpm_DebugThroughPC</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_DebugThroughPC))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_Init
</UL>

<P><STRONG><a name="[2f2]"></a>HAL_mpm_EnableCXO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_EnableCXO))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_init
</UL>

<P><STRONG><a name="[2f0]"></a>HAL_mpm_GetDeepSleepEnterLatency</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, HALmpmPlatform.o(i.HAL_mpm_GetDeepSleepEnterLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_mpm_GetDeepSleepEnterLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_deep_sleep_enter_latency
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_mpm_GetDeepSleepExitLatency</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, HALmpmPlatform.o(i.HAL_mpm_GetDeepSleepExitLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_mpm_GetDeepSleepExitLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_GetTCXOLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_deep_sleep_exit_latency
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_mpm_GetTCXOLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, HALmpm.o(i.HAL_mpm_GetTCXOLatency))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_GetDeepSleepExitLatency
</UL>

<P><STRONG><a name="[3e1]"></a>HAL_mpm_GetWakeupInts</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_GetWakeupInts))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_propogate_interrupts
</UL>

<P><STRONG><a name="[1de]"></a>HAL_mpm_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, HALmpm.o(i.HAL_mpm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_mpm_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_PlatformInitEarly
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_PenDebounceCtl
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_DebugThroughPC
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_ConfigPenDebounceDelay
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_ConfigDebugBus_1
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_ConfigDebugBus
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_CfgWbootEbiIOCntl
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_init
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_mpm_Init_Xtal_Latency</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, HALmpm.o(i.HAL_mpm_Init_Xtal_Latency))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = HAL_mpm_Init_Xtal_Latency &rArr; pm_app_clk_get_xo_warmup_time &rArr; pm_clk_sw_enable_status &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_app_clk_get_xo_warmup_time
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SetCXOWarmup
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_init_xtal
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_mpm_PenDebounceCtl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_PenDebounceCtl))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_Init
</UL>

<P><STRONG><a name="[1df]"></a>HAL_mpm_PlatformInitEarly</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_PlatformInitEarly))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_Init
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_mpm_SWDone</STRONG> (Thumb, 544 bytes, Stack size 56 bytes, HALmpmPlatform.o(i.HAL_mpm_SWDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = HAL_mpm_SWDone &rArr; sleep_is_any_interrupt_pending &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_is_any_interrupt_pending
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rob_mark_event
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___16_HALmpmPlatform_c_0ea4e44c__halt
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bob_toggle_low
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bob_toggle_high
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_calc_xo_accumulation
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_test_low
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_test_high
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSPreXOShutdown
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSPostXOShutdown
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsQDSSOn
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_sw_done
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_mpm_SetCXOWarmup</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HALmpmPlatform.o(i.HAL_mpm_SetCXOWarmup))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_Init_Xtal_Latency
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_mpm_SetWakeUpTime</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, HALmpmPlatform.o(i.HAL_mpm_SetWakeUpTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_mpm_SetWakeUpTime &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_enter_hibernation
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_mpmint_All_Clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, HALmpmint.o(i.HAL_mpmint_All_Clear))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_prepare_for_sleep
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_mpmint_All_Disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, HALmpmint.o(i.HAL_mpmint_All_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_mpmint_All_Disable
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_enter_hibernation
</UL>

<P><STRONG><a name="[3e0]"></a>HAL_mpmint_Disable</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, HALmpmint.o(i.HAL_mpmint_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_mpmint_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_isr
</UL>

<P><STRONG><a name="[3df]"></a>HAL_mpmint_Enable</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, HALmpmint.o(i.HAL_mpmint_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_mpmint_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_prepare_for_sleep
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_isr
</UL>

<P><STRONG><a name="[3db]"></a>HAL_mpmint_GetEnumNumber</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, HALmpmint.o(i.HAL_mpmint_GetEnumNumber))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_isr
</UL>

<P><STRONG><a name="[3da]"></a>HAL_mpmint_GetIndex</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, HALmpmint.o(i.HAL_mpmint_GetIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_mpmint_GetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_isr
</UL>

<P><STRONG><a name="[3d9]"></a>HAL_mpmint_GetNumberMasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, HALmpmint.o(i.HAL_mpmint_GetNumberMasks))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_propogate_interrupts
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_isr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_init
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_mpmint_Init</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, HALmpmint.o(i.HAL_mpmint_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_mpmint_Init
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_init
</UL>

<P><STRONG><a name="[3dc]"></a>HAL_mpmint_IsGpio</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, HALmpmint.o(i.HAL_mpmint_IsGpio))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_isr
</UL>

<P><STRONG><a name="[3de]"></a>HAL_mpmint_SetTrigger</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, HALmpmint.o(i.HAL_mpmint_SetTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_mpmint_SetTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_isr
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_noc_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HALnoc.o(i.HAL_noc_Init))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_noc_SetQosBandwidth</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, HALnoc.o(i.HAL_noc_SetQosBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_noc_SetQosBandwidth &rArr; noc_SetQosBandwidth &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noc_SetQosBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_apply_cb
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_init
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_noc_SetQosMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HALnoc.o(i.HAL_noc_SetQosMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_noc_SetQosMode &rArr; noc_SetQosMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noc_SetQosMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_init
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_noc_SetQosPriority</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, HALnoc.o(i.HAL_noc_SetQosPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_noc_SetQosPriority &rArr; noc_SetQosPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noc_SetQosPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_init
</UL>

<P><STRONG><a name="[3ac]"></a>HAL_rbcpr_bypass_sensor_all</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_bypass_sensor_all))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
</UL>

<P><STRONG><a name="[393]"></a>HAL_rbcpr_clear_int_all</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_clear_int_all))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_restart_cpr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_for_sleep
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_exit_sleep
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pause_cpr
</UL>

<P><STRONG><a name="[39c]"></a>HAL_rbcpr_collect_coredump</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, HAL_rbcpr.o(i.HAL_rbcpr_collect_coredump))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_rbcpr_collect_coredump
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
</UL>

<P><STRONG><a name="[397]"></a>HAL_rbcpr_enable_block</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_enable_block))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_restart_cpr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_for_sleep
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_exit_sleep
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pause_cpr
</UL>

<P><STRONG><a name="[395]"></a>HAL_rbcpr_enable_int</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_enable_int))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_for_sleep
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_cpr
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pause_cpr
</UL>

<P><STRONG><a name="[201]"></a>HAL_rbcpr_get_rail_handle</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, HAL_rbcpr.o(i.HAL_rbcpr_get_rail_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_rbcpr_get_rail_handle &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail
</UL>

<P><STRONG><a name="[39d]"></a>HAL_rbcpr_interrupt_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_interrupt_status))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
</UL>

<P><STRONG><a name="[202]"></a>HAL_rbcpr_mask_sensor</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_mask_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_rbcpr_mask_sensor &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_bsp_target_init
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
</UL>

<P><STRONG><a name="[3ab]"></a>HAL_rbcpr_mask_sensor_all</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_mask_sensor_all))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
</UL>

<P><STRONG><a name="[3a2]"></a>HAL_rbcpr_next_meas_en</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_next_meas_en))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_for_sleep
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pause_cpr
</UL>

<P><STRONG><a name="[203]"></a>HAL_rbcpr_poll_result</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_poll_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_rbcpr_poll_result &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
</UL>

<P><STRONG><a name="[394]"></a>HAL_rbcpr_prgm_gcnt_target</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_prgm_gcnt_target))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pre_switch_callback
</UL>

<P><STRONG><a name="[204]"></a>HAL_rbcpr_save_log</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, HAL_rbcpr.o(i.HAL_rbcpr_save_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_rbcpr_save_log
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timetick_get_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
</UL>

<P><STRONG><a name="[3b1]"></a>HAL_rbcpr_set_clamp_timer_interval</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_set_clamp_timer_interval))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
</UL>

<P><STRONG><a name="[206]"></a>HAL_rbcpr_set_count_mode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_set_count_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_rbcpr_set_count_mode &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
</UL>

<P><STRONG><a name="[392]"></a>HAL_rbcpr_set_sw_auto_cont_ack</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_set_sw_auto_cont_ack))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_restart_cpr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_for_sleep
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_exit_sleep
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pause_cpr
</UL>

<P><STRONG><a name="[3b3]"></a>HAL_rbcpr_set_sw_auto_cont_nack_dn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_set_sw_auto_cont_nack_dn))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_for_sleep
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_cpr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pause_cpr
</UL>

<P><STRONG><a name="[39a]"></a>HAL_rbcpr_write_consecutive_dn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_write_consecutive_dn))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_restart_cpr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_for_sleep
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_exit_sleep
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pause_cpr
</UL>

<P><STRONG><a name="[399]"></a>HAL_rbcpr_write_consecutive_up</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_write_consecutive_up))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_restart_cpr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_for_sleep
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_exit_sleep
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pause_cpr
</UL>

<P><STRONG><a name="[3ae]"></a>HAL_rbcpr_write_dn_threshold</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_write_dn_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
</UL>

<P><STRONG><a name="[3ad]"></a>HAL_rbcpr_write_stepquot</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_write_stepquot))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
</UL>

<P><STRONG><a name="[396]"></a>HAL_rbcpr_write_up_threshold</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, HAL_rbcpr.o(i.HAL_rbcpr_write_up_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_cpr
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
</UL>

<P><STRONG><a name="[b5]"></a>PlatformInfo_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, PlatformInfo.o(i.PlatformInfo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PlatformInfo_Init &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chipinfo_GetVersion
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chipinfo_GetFamily
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>PmicArb_ExecuteCommand</STRONG> (Thumb, 676 bytes, Stack size 72 bytes, PmicArb.o(i.PmicArb_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PmicArb_ExecuteCommand &rArr; SpmiOs_Wait &rArr; DALSYS_BusyWait &rArr; busywait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugExecute
</UL>

<P><STRONG><a name="[223]"></a>PmicArb_FindChannel</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, PmicArb.o(i.PmicArb_FindChannel), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_RegisterIsr
</UL>

<P><STRONG><a name="[2a7]"></a>PmicArb_GetHwStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, PmicArb.o(i.PmicArb_GetHwStatus))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugExecute
</UL>

<P><STRONG><a name="[21d]"></a>PmicArb_GetMaxChannelSupport</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, PmicArb.o(i.PmicArb_GetMaxChannelSupport))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_Init
</UL>

<P><STRONG><a name="[21e]"></a>PmicArb_HasInterruptSupport</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, PmicArb.o(i.PmicArb_HasInterruptSupport))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_Init
</UL>

<P><STRONG><a name="[209]"></a>PmicArb_Init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, PmicArb.o(i.PmicArb_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PmicArb_Init &rArr; SpmiOs_RegisterISR &rArr; SpmiOsNhlos_GetDalProp &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_RegisterISR
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetOwnerId
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiHal_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_Init
</UL>

<P><STRONG><a name="[224]"></a>PmicArb_SetInterruptEnabled</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, PmicArb.o(i.PmicArb_SetInterruptEnabled), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_RegisterIsr
</UL>

<P><STRONG><a name="[3d5]"></a>QDSSAllocPort</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, QDSS.o(i.QDSSAllocPort))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swevent_qdss_init
</UL>

<P><STRONG><a name="[3f7]"></a>QDSSDDRTraceDisable</STRONG> (Thumb, 198 bytes, Stack size 4 bytes, QDSS.o(i.QDSSDDRTraceDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = QDSSDDRTraceDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_self_refresh_all
</UL>

<P><STRONG><a name="[3f9]"></a>QDSSDDRTraceEnable</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, QDSS.o(i.QDSSDDRTraceEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QDSSDDRTraceEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_self_refresh_all
</UL>

<P><STRONG><a name="[1bf]"></a>QDSSDisableTrace</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, QDSS.o(i.QDSSDisableTrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = QDSSDisableTrace &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsQDSSOn
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_trace_control
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETM_trace_disable
</UL>

<P><STRONG><a name="[20d]"></a>QDSSETMControl</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, QDSS.o(i.QDSSETMControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = QDSSETMControl &rArr; ETM_trace_enable &rArr; QDSSEnableTrace &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETM_trace_enable
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETM_trace_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_trace_control
</UL>

<P><STRONG><a name="[1c1]"></a>QDSSEnableTrace</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, QDSS.o(i.QDSSEnableTrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = QDSSEnableTrace &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_trace_control
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETM_trace_enable
</UL>

<P><STRONG><a name="[cd]"></a>QDSSInit</STRONG> (Thumb, 636 bytes, Stack size 40 bytes, QDSS.o(i.QDSSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = QDSSInit &rArr; npa_create_sync_client_ex &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdss_imem_base
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSRestoreTimestamp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1f2]"></a>QDSSPostXOShutdown</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, QDSS.o(i.QDSSPostXOShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QDSSPostXOShutdown &rArr; busywait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busywait
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSRestoreTimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
</UL>

<P><STRONG><a name="[1ea]"></a>QDSSPreXOShutdown</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, QDSS.o(i.QDSSPreXOShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QDSSPreXOShutdown &rArr; busywait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busywait
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
</UL>

<P><STRONG><a name="[1a4]"></a>QDSSSTMSetTimestampFreq</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, QDSS.o(i.QDSSSTMSetTimestampFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QDSSSTMSetTimestampFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetQDSSClocks
</UL>

<P><STRONG><a name="[218]"></a>QDSSWriteOSTPacket</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, QDSS.o(i.QDSSWriteOSTPacket))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULogFront_RealTimePrintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_ULogInternal_STMWrite
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>

<P><STRONG><a name="[211]"></a>RBCPRTaskCornerChange</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rbcpr_task.o(i.RBCPRTaskCornerChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RBCPRTaskCornerChange &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_for_sleep
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pause_cpr
</UL>

<P><STRONG><a name="[212]"></a>RBCPRTaskISR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rbcpr_task.o(i.RBCPRTaskISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = RBCPRTaskISR &rArr; Task::schedule_me(ScheduleType) &rArr; Sched::schedule_task(Task&, ScheduleType) &rArr; TaskHeap::insert(Task*) &rArr; operator new[] (unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::schedule_me(ScheduleType)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_isr
</UL>

<P><STRONG><a name="[214]"></a>RBCPRTaskInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rbcpr_task.o(i.RBCPRTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RBCPRTaskInit &rArr; operator new(unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::Task__sub_object(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
</UL>

<P><STRONG><a name="[137]"></a>SWEVENT_log</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, swevent.o(i.SWEVENT_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_log_event_to_ram
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSWriteOSTPacket
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_heap_space
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_pin_ctrl_mode_alg
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_pin_ctrl_alg
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_set_trigger_alg
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_register_isr_alg
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_enable_alg
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_clear_alg
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_vreg_settled_check_alg
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_sw_enable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_pin_ctrled
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_stepper_done_status_alg
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_vreg_settle_status
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_stepper_settle_status
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_status_alg
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_alg
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_calculate_vset_celing_uv
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_mode_status_raw_alg
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_vreg_ok_status_alg
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_status_alg
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_alg
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_switching_freq
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_sw_mode
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_quiet_mode
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_ocp_enable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestoring
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestore
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCollapse
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockSpeed
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageRequest
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableSource
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableSource
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_resource_ee_transition(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_high_isr()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_low_isr()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_bringup_isr()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV1(RPMMessageHeaderV1*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV0(unsigned)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_settling_handler(Handler*)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_individual_rail
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_translate_cb
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_apply_cb
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_translate_cb
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_apply_cb
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_spdm_req_translate_cb
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_spdm_req_apply_cb
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_slaves_translate_cb
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_slaves_apply_cb
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_log_event_to_ram
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_update_speed
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_speed_check_and_update
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_prechange_cb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_postchange_cb
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBCPRTaskISR
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_LogState
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_statehandler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_clearall
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_perform_op(SYSTEMDB_OP_QUEUE_ELEM*)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_addop(unsigned long*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_exit
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_state_machine
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processNAS(volatile bool&, unsigned long long&)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EstimateCache::observe(unsigned, unsigned, unsigned, unsigned, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EstimateCache::lookup(unsigned, unsigned, unsigned*, unsigned*)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::enqueue(rpm_set_type, unsigned long long)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_specific_resource(TransitionContext*, ResourceData*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SetWakeUpTime
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_WaitForBIMCPowerCollapse
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageSuspend
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageResume
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfigEx
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init_cb
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Exit_Self_Refresh
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Enter_Self_Refresh
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_fatal_sw_event
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_abort_isr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Realloc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Alloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21b]"></a>SpmiBus_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, SpmiBus.o(i.SpmiBus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SpmiBus_Init &rArr; SpmiOs_Malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULogFront_RealTimeInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_Malloc
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmicArb_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmicArb_HasInterruptSupport
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmicArb_GetMaxChannelSupport
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_channel_init_internal
</UL>

<P><STRONG><a name="[220]"></a>SpmiBus_ReadLong</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, SpmiBus.o(i.SpmiBus_ReadLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte_array
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_perform_op(SYSTEMDB_OP_QUEUE_ELEM*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
</UL>

<P><STRONG><a name="[222]"></a>SpmiBus_RegisterIsr</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, SpmiBus.o(i.SpmiBus_RegisterIsr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_Malloc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmicArb_SetInterruptEnabled
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmicArb_FindChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_register_isr
</UL>

<P><STRONG><a name="[225]"></a>SpmiBus_WriteLong</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, SpmiBus.o(i.SpmiBus_WriteLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_array
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
</UL>

<P><STRONG><a name="[20a]"></a>SpmiHal_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, SpmiHal.o(i.SpmiHal_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpmiHal_Init &rArr; SpmiOs_GetPmicArbBaseAddr &rArr; DalHWIO_MapRegion &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetPmicArbBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmicArb_Init
</UL>

<P><STRONG><a name="[227]"></a>SpmiOsNhlos_GetDalProp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, SpmiOs.o(i.SpmiOsNhlos_GetDalProp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SpmiOsNhlos_GetDalProp &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetDALPropertyHandleStr
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_RegisterISR
</UL>

<P><STRONG><a name="[228]"></a>SpmiOs_GetAhbClkState</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, SpmiOsImage.o(i.SpmiOs_GetAhbClkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpmiOs_GetAhbClkState &rArr; Clock_GetClockId
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsClockOn
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetClockId
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugExecute
</UL>

<P><STRONG><a name="[20b]"></a>SpmiOs_GetOwnerId</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, SpmiOs.o(i.SpmiOs_GetOwnerId))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SpmiOs_GetOwnerId &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetDALPropertyHandleStr
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmicArb_Init
</UL>

<P><STRONG><a name="[226]"></a>SpmiOs_GetPmicArbBaseAddr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, SpmiOs.o(i.SpmiOs_GetPmicArbBaseAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpmiOs_GetPmicArbBaseAddr &rArr; DalHWIO_MapRegion &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DalHWIO_MapRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiHal_Init
</UL>

<P><STRONG><a name="[229]"></a>SpmiOs_GetSerialClkState</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, SpmiOsImage.o(i.SpmiOs_GetSerialClkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpmiOs_GetSerialClkState &rArr; Clock_GetClockId
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsClockOn
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetClockId
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugExecute
</UL>

<P><STRONG><a name="[22a]"></a>SpmiOs_GetTimeTick</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, SpmiOsImage.o(i.SpmiOs_GetTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpmiOs_GetTimeTick &rArr; timetick_init &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timetick_get64
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timetick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myIsr
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugExecute
</UL>

<P><STRONG><a name="[21f]"></a>SpmiOs_Malloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, SpmiOsImage.o(i.SpmiOs_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SpmiOs_Malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_RegisterIsr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_Init
</UL>

<P><STRONG><a name="[20c]"></a>SpmiOs_RegisterISR</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, SpmiOsImage.o(i.SpmiOs_RegisterISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SpmiOs_RegisterISR &rArr; SpmiOsNhlos_GetDalProp &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOsNhlos_GetDalProp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_set_isr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmicArb_Init
</UL>

<P><STRONG><a name="[208]"></a>SpmiOs_Wait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, SpmiOs.o(i.SpmiOs_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SpmiOs_Wait &rArr; DALSYS_BusyWait &rArr; busywait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_BusyWait
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmicArb_ExecuteCommand
</UL>

<P><STRONG><a name="[21c]"></a>ULogFront_RealTimeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rpm_ulogcompatibility.o(i.ULogFront_RealTimeInit))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_Init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_log_init
</UL>

<P><STRONG><a name="[156]"></a>ULogFront_RealTimePrintf</STRONG> (Thumb, 114 bytes, Stack size 88 bytes, rpm_ulogcompatibility.o(i.ULogFront_RealTimePrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ULogFront_RealTimePrintf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSWriteOSTPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableSource
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableSource
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisablePowerDomain
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugExecute
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnablePowerDomain
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
</UL>

<P><STRONG><a name="[22f]"></a>theSchedule()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rpm_sched.o(i._Z11theSchedulev))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = theSchedule() &rArr; __aeabi_atexit &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeap::TaskHeap(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_next_workload
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_next_duration
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_for_fast
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_change_ok
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_change
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_next_required_start
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_state_machine
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::schedule_me(ScheduleType)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_run
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_next_start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_init
</UL>

<P><STRONG><a name="[233]"></a>theEstimator()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rpm_estimator.o(i._Z12theEstimatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = theEstimator()
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::get_length() const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::cpu_speed_change(unsigned, unsigned)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::estimateResource(ResourceData*)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transitionResource(ResourceData*, void*, unsigned long long*)
</UL>

<P><STRONG><a name="[234]"></a>resource_init(ResourceData*, unsigned, unsigned)</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, rpm_resources.o(i._Z13resource_initP12ResourceDatajj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = resource_init(ResourceData*, unsigned, unsigned) &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_resource_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_named_resource
</UL>

<P><STRONG><a name="[23b]"></a>rpm_init_shadow(unsigned, unsigned)</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, rpm_resources.o(i._Z15rpm_init_shadowjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rpm_init_shadow(unsigned, unsigned) &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_resource_hash
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_shadow_resource
</UL>

<P><STRONG><a name="[23c]"></a>system_db_addop(unsigned long*)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, system_db_rpm.o(i._Z15system_db_addopPm))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = system_db_addop(unsigned long*) &rArr; system_db_clearall &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_clearall
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_smd_cb(unsigned, void*, unsigned, void*)
</UL>

<P><STRONG><a name="[5a]"></a>system_db_smd_cb(unsigned, void*, unsigned, void*)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, system_db_rpm.o(i._Z16system_db_smd_cbjPvjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = system_db_smd_cb(unsigned, void*, unsigned, void*) &rArr; system_db_perform_op(SYSTEMDB_OP_QUEUE_ELEM*) &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_clearall
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_perform_op(SYSTEMDB_OP_QUEUE_ELEM*)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_addop(unsigned long*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_db_rpm.o(i.system_db_init)
</UL>
<P><STRONG><a name="[23f]"></a>theEstimateCache()</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, rpm_estimator.o(i._Z16theEstimateCachev))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = theEstimateCache() &rArr; operator new(unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::get_length_given(unsigned, unsigned&)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[1f]"></a>rpm_glink_handler(glink_channel_ctx*, Handler*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, rpm_handler.o(i._Z17rpm_glink_handlerP17glink_channel_ctxP7HandlerPvS3_jjPFYS3_S3_jPjES6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = rpm_glink_handler(glink_channel_ctx*, Handler*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*)) &rArr; Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*)) &rArr; Handler::loadMessageV1(RPMMessageHeaderV1*) &rArr; Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type) &rArr; kvp_put &rArr; bytearray_put &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_handler.o(i._Z24rpm_glink_link_state_isrP17glink_link_info_tP7Handler)
</UL>
<P><STRONG><a name="[52]"></a>settling_timer_isr()</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, rpm_settling_timer.o(i._Z18settling_timer_isrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = settling_timer_isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_settling_timer.o(i.rpm_settling_timer_init)
</UL>
<P><STRONG><a name="[248]"></a>resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, rpm_resources.o(i._Z19resource_ee_requestP12ResourceDataj12rpm_set_typeP5kvp_sRy))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_swapbuffer
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get_raw_size
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get_raw_bytes
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_frombuffer
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_lookup_and_alloc_client(ResourceData*, unsigned)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_send_init_proxy_vote_sleep
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_send_init_proxy_vote
</UL>

<P><STRONG><a name="[250]"></a>resource_get_request(const ResourceData*, unsigned, unsigned*, const void**)</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rpm_resources.o(i._Z20resource_get_requestPK12ResourceDatajPjPPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_current_request
</UL>

<P><STRONG><a name="[3bc]"></a>resource_num_clients(const ResourceData*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rpm_resources.o(i._Z20resource_num_clientsPK12ResourceData))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_num_clients
</UL>

<P><STRONG><a name="[23e]"></a>system_db_perform_op(SYSTEMDB_OP_QUEUE_ELEM*)</STRONG> (Thumb, 648 bytes, Stack size 104 bytes, system_db_rpm.o(i._Z20system_db_perform_opP22SYSTEMDB_OP_QUEUE_ELEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = system_db_perform_op(SYSTEMDB_OP_QUEUE_ELEM*) &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_ReadLong
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_LogState
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_kick
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_statehandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_smd_cb(unsigned, void*, unsigned, void*)
</UL>

<P><STRONG><a name="[24c]"></a>do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)</STRONG> (Thumb, 826 bytes, Stack size 104 bytes, rpm_resources.o(i._Z22do_resource_ee_requestP12ResourceDataj12rpm_set_typeP5kvp_sRy))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI>&nbsp;&nbsp;&nbsp;memcmp
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_lookup_and_alloc_client(ResourceData*, unsigned)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
</UL>

<P><STRONG><a name="[252]"></a>resource_create_client(ResourceData*, unsigned)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rpm_resources.o(i._Z22resource_create_clientP12ResourceDataj))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = resource_create_client(ResourceData*, unsigned) &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI>&nbsp;&nbsp;&nbsp;realloc
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_client
</UL>

<P><STRONG><a name="[246]"></a>resource_ee_transition(ResourceData*, unsigned, rpm_transition_type)</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, rpm_resources.o(i._Z22resource_ee_transitionP12ResourceDataj19rpm_transition_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = resource_ee_transition(ResourceData*, unsigned, rpm_transition_type) &rArr; do_resource_ee_transition(ResourceData*, unsigned, rpm_transition_type) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_resource_ee_transition(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_lookup_and_alloc_client(ResourceData*, unsigned)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transitionResource(ResourceData*, void*, unsigned long long*)
</UL>

<P><STRONG><a name="[254]"></a>rpm_query_npa_settling(rpm_application_info*)</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, rpm_npa.o(i._Z22rpm_query_npa_settlingP20rpm_application_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rpm_query_npa_settling(rpm_application_info*) &rArr; npa_create_sync_client_ex &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_query_by_client
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_settling_query(ResourceData*, unsigned)
</UL>

<P><STRONG><a name="[255]"></a>rpm_test_resource_init()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rpm_test_resource.o(i._Z22rpm_test_resource_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = rpm_test_resource_init() &rArr; rpm_register_resource &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_init
</UL>

<P><STRONG><a name="[257]"></a>resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long)</STRONG> (Thumb, 292 bytes, Stack size 112 bytes, rpm_resources.o(i._Z23resource_client_requestP12ResourceDatajjPvy))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_resource_hash
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_current_request
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_issue_request
</UL>

<P><STRONG><a name="[e1]"></a>rpm_glink_link_state_isr(glink_link_info_t*, Handler*)</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, rpm_handler.o(i._Z24rpm_glink_link_state_isrP17glink_link_info_tP7Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rpm_glink_link_state_isr(glink_link_info_t*, Handler*) &rArr; glink_open &rArr; glinki_find_requested_xport &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_open
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_handler.o(.constdata)
</UL>
<P><STRONG><a name="[21]"></a>rpm_glink_port_state_isr(glink_channel_ctx*, Handler*, glink_channel_event_type)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rpm_handler.o(i._Z24rpm_glink_port_state_isrP17glink_channel_ctxP7Handler24glink_channel_event_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rpm_glink_port_state_isr(glink_channel_ctx*, Handler*, glink_channel_event_type) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_close
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_handler.o(i._Z24rpm_glink_link_state_isrP17glink_link_info_tP7Handler)
</UL>
<P><STRONG><a name="[253]"></a>do_resource_ee_transition(ResourceData*, unsigned, rpm_transition_type)</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, rpm_resources.o(i._Z25do_resource_ee_transitionP12ResourceDataj19rpm_transition_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = do_resource_ee_transition(ResourceData*, unsigned, rpm_transition_type) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_lookup_and_alloc_client(ResourceData*, unsigned)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_transition(ResourceData*, unsigned, rpm_transition_type)
</UL>

<P><STRONG><a name="[25c]"></a>theEstimateCacheImmediate()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rpm_estimator.o(i._Z25theEstimateCacheImmediatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = theEstimateCacheImmediate() &rArr; operator new(unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::get_length_given(unsigned, unsigned&)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[25d]"></a>resource_ee_has_apply_work(const ResourceData*, const void*, const void*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rpm_resources.o(i._Z26resource_ee_has_apply_workPK12ResourceDataPKvS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = resource_ee_has_apply_work(const ResourceData*, const void*, const void*) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::estimateResource(ResourceData*)
</UL>

<P><STRONG><a name="[247]"></a>resource_ee_settling_apply(ResourceData*, unsigned, unsigned long long)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rpm_resources.o(i._Z26resource_ee_settling_applyP12ResourceDatajy))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = resource_ee_settling_apply(ResourceData*, unsigned, unsigned long long) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_lookup_and_alloc_client(ResourceData*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transitionResource(ResourceData*, void*, unsigned long long*)
</UL>

<P><STRONG><a name="[25e]"></a>resource_ee_settling_query(ResourceData*, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, rpm_resources.o(i._Z26resource_ee_settling_queryP12ResourceDataj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = resource_ee_settling_query(ResourceData*, unsigned) &rArr; rpm_query_npa_settling(rpm_application_info*) &rArr; npa_create_sync_client_ex &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_query_npa_settling(rpm_application_info*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[25f]"></a>rpmserver_register_handler(rpm_service_type, void(*)(unsigned, void*, unsigned, void*), void*)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rpmserver.o(i._Z26rpmserver_register_handler16rpm_service_typePFvjPvjS0_ES0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rpmserver_register_handler(rpm_service_type, void(*)(unsigned, void*, unsigned, void*), void*) &rArr; operator new(unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_init
</UL>

<P><STRONG><a name="[260]"></a>resource_class_add_client_type(ResourceClassData*, unsigned, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rpm_resources.o(i._Z30resource_class_add_client_typeP17ResourceClassDatajj))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = resource_class_add_client_type(ResourceClassData*, unsigned, unsigned) &rArr; operator new(unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_internal_client_type
</UL>

<P><STRONG><a name="[261]"></a>resource_ee_has_transition_work(ResourceData*, unsigned, rpm_transition_type)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rpm_resources.o(i._Z31resource_ee_has_transition_workP12ResourceDataj19rpm_transition_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = resource_ee_has_transition_work(ResourceData*, unsigned, rpm_transition_type) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::enqueue(rpm_set_type, unsigned long long)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_specific_resource(TransitionContext*, ResourceData*)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::estimateResource(ResourceData*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[24e]"></a>resource_lookup_and_alloc_client(ResourceData*, unsigned)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rpm_resources.o(i._Z32resource_lookup_and_alloc_clientP12ResourceDataj))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = resource_lookup_and_alloc_client(ResourceData*, unsigned) &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_resource_ee_transition(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_settling_apply(ResourceData*, unsigned, unsigned long long)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_transition(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::estimateResource(ResourceData*)
</UL>

<P><STRONG><a name="[4d]"></a>NPAMapping::NPAMapping()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rpm_npa.o(i._ZN10NPAMappingC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = NPAMapping::NPAMapping() &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rpm_npa.o(i.rpm_create_npa_adapter)
<LI> rpm_npa.o(i.rpm_create_npa_settling_adapter)
</UL>
<P><STRONG><a name="[46b]"></a>NPAMapping::NPAMapping__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rpm_npa.o(i._ZN10NPAMappingC1Ev), UNUSED)

<P><STRONG><a name="[e8]"></a>SetChanger::execute_until(volatile bool&, unsigned long long)</STRONG> (Thumb, 1870 bytes, Stack size 136 bytes, rpm_set_changer.o(i._ZN10SetChanger13execute_untilERVby))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = SetChanger::execute_until(volatile bool&, unsigned long long) &rArr; Handler::processNAS(volatile bool&, unsigned long long&) &rArr; Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool) &rArr; resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_master_stats
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_trigger_wakeup_int
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_state_machine
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_test_low
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_test_high
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processNAS(volatile bool&, unsigned long long&)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::clear_deadline()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EstimateCache::observe(unsigned, unsigned, unsigned, unsigned, bool)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EstimateCache::lookup(unsigned, unsigned, unsigned*, unsigned*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_has_transition_work(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_settling_query(ResourceData*, unsigned)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_settling_apply(ResourceData*, unsigned, unsigned long long)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theEstimateCacheImmediate()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theEstimateCache()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_specific_resource(TransitionContext*, ResourceData*)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transitionResource(ResourceData*, void*, unsigned long long*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_set_changer.o(.constdata__ZTV10SetChanger)
</UL>
<P><STRONG><a name="[26a]"></a>SetChanger::estimateResource(ResourceData*)</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, rpm_set_changer.o(i._ZN10SetChanger16estimateResourceEP12ResourceData))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SetChanger::estimateResource(ResourceData*) &rArr; resource_lookup_and_alloc_client(ResourceData*, unsigned) &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memscpy
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_hash
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_lookup_and_alloc_client(ResourceData*, unsigned)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_has_transition_work(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_has_apply_work(const ResourceData*, const void*, const void*)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theEstimator()
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::enqueue(rpm_set_type, unsigned long long)
</UL>

<P><STRONG><a name="[e5]"></a>SetChanger::get_length_given(unsigned, unsigned&)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rpm_set_changer.o(i._ZN10SetChanger16get_length_givenEjRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SetChanger::get_length_given(unsigned, unsigned&) &rArr; theEstimateCacheImmediate() &rArr; operator new(unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EstimateCache::lookup(unsigned, unsigned, unsigned*, unsigned*)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theEstimateCacheImmediate()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theEstimateCache()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_set_changer.o(.constdata__ZTV10SetChanger)
</UL>
<P><STRONG><a name="[264]"></a>SetChanger::execute_specific_resource(TransitionContext*, ResourceData*)</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, rpm_set_changer.o(i._ZN10SetChanger25execute_specific_resourceEP17TransitionContextP12ResourceData))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SetChanger::execute_specific_resource(TransitionContext*, ResourceData*) &rArr; transitionResource(ResourceData*, void*, unsigned long long*) &rArr; resource_ee_transition(ResourceData*, unsigned, rpm_transition_type) &rArr; do_resource_ee_transition(ResourceData*, unsigned, rpm_transition_type) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_has_transition_work(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transitionResource(ResourceData*, void*, unsigned long long*)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[26c]"></a>SetChanger::set_last_transitioning_resource(ResourceData*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rpm_set_changer.o(i._ZN10SetChanger31set_last_transitioning_resourceEP12ResourceData))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SetChanger::set_last_transitioning_resource(ResourceData*) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_set_last_transitioning_resource
</UL>

<P><STRONG><a name="[26d]"></a>SetChanger::enqueue(rpm_set_type, unsigned long long)</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, rpm_set_changer.o(i._ZN10SetChanger7enqueueE12rpm_set_typey))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SetChanger::enqueue(rpm_set_type, unsigned long long) &rArr; Task::schedule_me(ScheduleType) &rArr; Sched::schedule_task(Task&, ScheduleType) &rArr; TaskHeap::insert(Task*) &rArr; operator new[] (unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::schedule_me(ScheduleType)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_has_transition_work(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::estimateResource(ResourceData*)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_state_machine
</UL>

<P><STRONG><a name="[26e]"></a>SetChanger::SetChanger(unsigned, Handler*, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rpm_set_changer.o(i._ZN10SetChangerC1EjP7Handlerh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetChanger::SetChanger(unsigned, Handler*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::Task__sub_object(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_init
</UL>

<P><STRONG><a name="[46c]"></a>SetChanger::SetChanger__sub_object(unsigned, Handler*, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rpm_set_changer.o(i._ZN10SetChangerC1EjP7Handlerh), UNUSED)

<P><STRONG><a name="[eb]"></a>suppressible::reestimate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rpm_suppressible.o(i._ZN12suppressible10reestimateEv))
<BR>[Address Reference Count : 1]<UL><LI> rpm_suppressible.o(.constdata__ZTV12suppressible)
</UL>
<P><STRONG><a name="[ed]"></a>suppressible::execute_until(volatile bool&, unsigned long long)</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, rpm_suppressible.o(i._ZN12suppressible13execute_untilERVby))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = suppressible::execute_until(volatile bool&, unsigned long long) &rArr; Task::schedule_me(ScheduleType) &rArr; Sched::schedule_task(Task&, ScheduleType) &rArr; TaskHeap::insert(Task*) &rArr; operator new[] (unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::clear_deadline()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::schedule_me(ScheduleType)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_suppressible.o(.constdata__ZTV12suppressible)
</UL>
<P><STRONG><a name="[ea]"></a>suppressible::get_length_given(unsigned, unsigned&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rpm_suppressible.o(i._ZN12suppressible16get_length_givenEjRj))
<BR>[Address Reference Count : 1]<UL><LI> rpm_suppressible.o(.constdata__ZTV12suppressible)
</UL>
<P><STRONG><a name="[262]"></a>EstimateCache::lookup(unsigned, unsigned, unsigned*, unsigned*)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rpm_estimator.o(i._ZN13EstimateCache6lookupEjjPjS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = EstimateCache::lookup(unsigned, unsigned, unsigned*, unsigned*) &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::get_length_given(unsigned, unsigned&)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[267]"></a>EstimateCache::observe(unsigned, unsigned, unsigned, unsigned, bool)</STRONG> (Thumb, 510 bytes, Stack size 56 bytes, rpm_estimator.o(i._ZN13EstimateCache7observeEjjjjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + In Cycle
<LI>Call Chain = EstimateCache::observe(unsigned, unsigned, unsigned, unsigned, bool) &rArr;  EstimateCache::observe(unsigned, unsigned, unsigned, unsigned, bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_get_freq
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_current_speed
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_resource_hash
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EstimateCache::observe(unsigned, unsigned, unsigned, unsigned, bool)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EstimateCache::observe(unsigned, unsigned, unsigned, unsigned, bool)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[e6]"></a>Task::reestimate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rpm_set_changer.o(i._ZN4Task10reestimateEv))
<BR>[Address Reference Count : 3]<UL><LI> rpm_handler.o(.constdata__ZTV7Handler)
<LI> rpm_task.o(.constdata__ZTV4Task)
<LI> rpm_set_changer.o(.constdata__ZTV10SetChanger)
</UL>
<P><STRONG><a name="[213]"></a>Task::schedule_me(ScheduleType)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rpm_task.o(i._ZN4Task11schedule_meE12ScheduleType))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Task::schedule_me(ScheduleType) &rArr; Sched::schedule_task(Task&, ScheduleType) &rArr; TaskHeap::insert(Task*) &rArr; operator new[] (unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::schedule_task(Task&, ScheduleType)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theSchedule()
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_settling_handler(Handler*)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBCPRTaskISR
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suppressible::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::enqueue(rpm_set_type, unsigned long long)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zqcal_task_init
</UL>

<P><STRONG><a name="[266]"></a>Task::clear_deadline()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rpm_task.o(i._ZN4Task14clear_deadlineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task::clear_deadline()
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suppressible::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[ef]"></a>Task::get_length_given(unsigned, unsigned&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rpm_task.o(i._ZN4Task16get_length_givenEjRj))
<BR>[Address Reference Count : 2]<UL><LI> rpm_handler.o(.constdata__ZTV7Handler)
<LI> rpm_task.o(.constdata__ZTV4Task)
</UL>
<P><STRONG><a name="[272]"></a>Task::execute(volatile bool&, unsigned long long)</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, rpm_task.o(i._ZN4Task7executeERVby))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Task::execute(volatile bool&, unsigned long long)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
</UL>

<P><STRONG><a name="[216]"></a>Task::Task__sub_object(unsigned char, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rpm_task.o(i._ZN4TaskC2Ehh))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBCPRTaskInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::Handler(unsigned, unsigned, unsigned char)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::SetChanger(unsigned, Handler*, unsigned char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zqcal_task_init
</UL>

<P><STRONG><a name="[271]"></a>Sched::schedule_task(Task&, ScheduleType)</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, rpm_sched.o(i._ZN5Sched13schedule_taskER4Task12ScheduleType))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Sched::schedule_task(Task&, ScheduleType) &rArr; TaskHeap::insert(Task*) &rArr; operator new[] (unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskList::push_back(Task&)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskList::insert(Task&, Task&)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeap::findMin(Task**)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeap::insert(Task*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::fixup_schedule(Task&, Task&, unsigned)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::schedule_me(ScheduleType)
</UL>

<P><STRONG><a name="[276]"></a>Sched::fixup_schedule(Task&, Task&, unsigned)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, rpm_sched.o(i._ZN5Sched14fixup_scheduleER4TaskS1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = Sched::fixup_schedule(Task&, Task&, unsigned) &rArr;  Sched::fixup_schedule(Task&, Task&, unsigned) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::fixup_schedule(Task&, Task&, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::cpu_speed_change(unsigned, unsigned)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::fixup_schedule(Task&, Task&, unsigned)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::schedule_task(Task&, ScheduleType)
</UL>

<P><STRONG><a name="[278]"></a>Sched::cpu_speed_change(unsigned, unsigned)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, rpm_sched.o(i._ZN5Sched16cpu_speed_changeEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sched::cpu_speed_change(unsigned, unsigned) &rArr; TaskHeap::recalculateWork()
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_resource_hash
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Estimator::updateClockRate(unsigned)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeap::recalculateWork()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::fixup_schedule(Task&, Task&, unsigned)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theEstimator()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_for_fast
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_change_ok
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_change
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::get_next_duration(unsigned)
</UL>

<P><STRONG><a name="[27b]"></a>Sched::get_next_duration(unsigned)</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, rpm_sched.o(i._ZN5Sched17get_next_durationEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Sched::get_next_duration(unsigned) &rArr; Sched::cpu_speed_change(unsigned, unsigned) &rArr; TaskHeap::recalculateWork()
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeap::recalculateWork()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::cpu_speed_change(unsigned, unsigned)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_next_duration
</UL>

<P><STRONG><a name="[27c]"></a>Sched::run()</STRONG> (Thumb, 484 bytes, Stack size 48 bytes, rpm_sched.o(i._ZN5Sched3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = Sched::run() &rArr; svs_update_speed &rArr; svs_set_mode &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_update_speed
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskList::pop_front()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskList::remove(Task&)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeap::deleteMin()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeap::findMin(Task**)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeap::deleteTask(Task*)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::execute(volatile bool&, unsigned long long)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::fixup_schedule(Task&, Task&, unsigned)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::schedule_task(Task&, ScheduleType)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_kick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_run
</UL>

<P><STRONG><a name="[3c7]"></a>Sched::preempt()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rpm_sched.o(i._ZN5Sched7preemptEv))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_state_machine
</UL>

<P><STRONG><a name="[1c]"></a>Sched::~Sched()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rpm_sched.o(i._ZN5SchedD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Sched::~Sched() &rArr; operator delete[] (void*) &rArr; __Heap_Free &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_sched.o(i._Z11theSchedulev)
</UL>
<P><STRONG><a name="[46d]"></a>Sched::~Sched__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rpm_sched.o(i._ZN5SchedD1Ev), UNUSED)

<P><STRONG><a name="[265]"></a>Handler::processNAS(volatile bool&, unsigned long long&)</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, rpm_handler.o(i._ZN7Handler10processNASERVbRy))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Handler::processNAS(volatile bool&, unsigned long long&) &rArr; Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool) &rArr; resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rpm_rx_poll
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_swapbuffer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[f2]"></a>Handler::execute_until(volatile bool&, unsigned long long)</STRONG> (Thumb, 668 bytes, Stack size 72 bytes, rpm_handler.o(i._ZN7Handler13execute_untilERVby))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = Handler::execute_until(volatile bool&, unsigned long long) &rArr; Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool) &rArr; resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_sigs_remote_get
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rpm_rx_poll
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rpm_mask_rx_interrupt
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settling_timer_register
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_settling_apply(ResourceData*, unsigned, unsigned long long)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_handler.o(.constdata__ZTV7Handler)
</UL>
<P><STRONG><a name="[287]"></a>Handler::loadMessageV0(unsigned)</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, rpm_handler.o(i._ZN7Handler13loadMessageV0Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Handler::loadMessageV0(unsigned) &rArr; Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type) &rArr; kvp_put &rArr; bytearray_put &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_soft_transition
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_swapbuffer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))
</UL>

<P><STRONG><a name="[289]"></a>Handler::loadMessageV1(RPMMessageHeaderV1*)</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, rpm_handler.o(i._ZN7Handler13loadMessageV1EP18RPMMessageHeaderV1))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Handler::loadMessageV1(RPMMessageHeaderV1*) &rArr; Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type) &rArr; kvp_put &rArr; bytearray_put &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_soft_transition
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_swapbuffer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))
</UL>

<P><STRONG><a name="[25b]"></a>Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)</STRONG> (Thumb, 430 bytes, Stack size 64 bytes, rpm_handler.o(i._ZN7Handler13writeResponseEjPKc22rpm_message_error_type16rpm_service_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type) &rArr; kvp_put &rArr; bytearray_put &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_tx
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get_raw_size
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get_raw_bytes
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_put
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_clear
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_high_isr()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV1(RPMMessageHeaderV1*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV0(unsigned)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_state_machine
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processNAS(volatile bool&, unsigned long long&)
</UL>

<P><STRONG><a name="[283]"></a>Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool)</STRONG> (Thumb, 430 bytes, Stack size 80 bytes, rpm_handler.o(i._ZN7Handler14processMessageERVbRyP16RPMMessageHeaderb))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool) &rArr; resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_eof
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_settling_apply(ResourceData*, unsigned, unsigned long long)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theEstimator()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processNAS(volatile bool&, unsigned long long&)
</UL>

<P><STRONG><a name="[244]"></a>Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, rpm_handler.o(i._ZN7Handler17rpm_glink_enqueueEP17glink_channel_ctxPvS2_jjPFYS2_S2_jPjES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*)) &rArr; Handler::loadMessageV1(RPMMessageHeaderV1*) &rArr; Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type) &rArr; kvp_put &rArr; bytearray_put &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_sigs_remote_get
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rpm_mask_rx_interrupt
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV1(RPMMessageHeaderV1*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV0(unsigned)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::schedule_me(ScheduleType)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_glink_handler(glink_channel_ctx*, Handler*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))
</UL>

<P><STRONG><a name="[28c]"></a>Handler::init()</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, rpm_handler.o(i._ZN7Handler4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Handler::init() &rArr; glink_register_link_state_cb &rArr; glink_os_calloc &rArr; glink_os_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_register_link_state_cb
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_init
</UL>

<P><STRONG><a name="[28e]"></a>Handler::Handler(unsigned, unsigned, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, rpm_handler.o(i._ZN7HandlerC1Ejjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Handler::Handler(unsigned, unsigned, unsigned char) &rArr; kvp_create &rArr; bytearray_create &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::Task__sub_object(unsigned char, unsigned char)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_init
</UL>

<P><STRONG><a name="[46e]"></a>Handler::Handler__sub_object(unsigned, unsigned, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rpm_handler.o(i._ZN7HandlerC1Ejjh), UNUSED)

<P><STRONG><a name="[280]"></a>TaskHeap::deleteTask(Task*)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, task_heap.o(i._ZN8TaskHeap10deleteTaskEP4Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TaskHeap::deleteTask(Task*) &rArr; TaskHeap::deleteIdx(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeap::deleteIdx(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
</UL>

<P><STRONG><a name="[27a]"></a>TaskHeap::recalculateWork()</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, task_heap.o(i._ZN8TaskHeap15recalculateWorkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TaskHeap::recalculateWork()
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::get_next_duration(unsigned)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::cpu_speed_change(unsigned, unsigned)
</UL>

<P><STRONG><a name="[273]"></a>TaskHeap::insert(Task*)</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, task_heap.o(i._ZN8TaskHeap6insertEP4Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TaskHeap::insert(Task*) &rArr; operator new[] (unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::schedule_task(Task&, ScheduleType)
</UL>

<P><STRONG><a name="[274]"></a>TaskHeap::findMin(Task**)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task_heap.o(i._ZN8TaskHeap7findMinEPP4Task))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::schedule_task(Task&, ScheduleType)
</UL>

<P><STRONG><a name="[290]"></a>TaskHeap::deleteIdx(unsigned)</STRONG> (Thumb, 308 bytes, Stack size 36 bytes, task_heap.o(i._ZN8TaskHeap9deleteIdxEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TaskHeap::deleteIdx(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeap::deleteMin()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeap::deleteTask(Task*)
</UL>

<P><STRONG><a name="[27f]"></a>TaskHeap::deleteMin()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, task_heap.o(i._ZN8TaskHeap9deleteMinEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TaskHeap::deleteMin() &rArr; TaskHeap::deleteIdx(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskHeap::deleteIdx(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
</UL>

<P><STRONG><a name="[231]"></a>TaskHeap::TaskHeap(unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, task_heap.o(i._ZN8TaskHeapC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TaskHeap::TaskHeap(unsigned) &rArr; operator new[] (unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theSchedule()
</UL>

<P><STRONG><a name="[46f]"></a>TaskHeap::TaskHeap__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, task_heap.o(i._ZN8TaskHeapC1Ej), UNUSED)

<P><STRONG><a name="[275]"></a>TaskList::insert(Task&, Task&)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, task_list.o(i._ZN8TaskList6insertER4TaskS1_))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::schedule_task(Task&, ScheduleType)
</UL>

<P><STRONG><a name="[281]"></a>TaskList::remove(Task&)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, task_list.o(i._ZN8TaskList6removeER4Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TaskList::remove(Task&) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
</UL>

<P><STRONG><a name="[27e]"></a>TaskList::pop_front()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task_list.o(i._ZN8TaskList9pop_frontEv))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
</UL>

<P><STRONG><a name="[277]"></a>TaskList::push_back(Task&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, task_list.o(i._ZN8TaskList9push_backER4Task))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::schedule_task(Task&, ScheduleType)
</UL>

<P><STRONG><a name="[279]"></a>Estimator::updateClockRate(unsigned)</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, rpm_estimator.o(i._ZN9Estimator15updateClockRateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Estimator::updateClockRate(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::cpu_speed_change(unsigned, unsigned)
</UL>

<P><STRONG><a name="[f5]"></a>RBCPRTask::reestimate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rbcpr_task.o(i._ZN9RBCPRTask10reestimateEv))
<BR>[Address Reference Count : 1]<UL><LI> rbcpr_task.o(.constdata__ZTV9RBCPRTask)
</UL>
<P><STRONG><a name="[f7]"></a>RBCPRTask::execute_until(volatile bool&, unsigned long long)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rbcpr_task.o(i._ZN9RBCPRTask13execute_untilERVby))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = RBCPRTask::execute_until(volatile bool&, unsigned long long) &rArr; rbcpr_handler &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rbcpr_task.o(.constdata__ZTV9RBCPRTask)
</UL>
<P><STRONG><a name="[f4]"></a>RBCPRTask::get_length_given(unsigned, unsigned&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rbcpr_task.o(i._ZN9RBCPRTask16get_length_givenEjRj))
<BR>[Address Reference Count : 1]<UL><LI> rbcpr_task.o(.constdata__ZTV9RBCPRTask)
</UL>
<P><STRONG><a name="[e4]"></a>SetChanger::get_length() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rpm_set_changer.o(i._ZNK10SetChanger10get_lengthEv))
<BR>[Address Reference Count : 1]<UL><LI> rpm_set_changer.o(.constdata__ZTV10SetChanger)
</UL>
<P><STRONG><a name="[e7]"></a>SetChanger::hasImmediateWork() const</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rpm_set_changer.o(i._ZNK10SetChanger16hasImmediateWorkEv))
<BR>[Address Reference Count : 1]<UL><LI> rpm_set_changer.o(.constdata__ZTV10SetChanger)
</UL>
<P><STRONG><a name="[e9]"></a>suppressible::get_length() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rpm_suppressible.o(i._ZNK12suppressible10get_lengthEv))
<BR>[Address Reference Count : 1]<UL><LI> rpm_suppressible.o(.constdata__ZTV12suppressible)
</UL>
<P><STRONG><a name="[ec]"></a>suppressible::hasImmediateWork() const</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rpm_suppressible.o(i._ZNK12suppressible16hasImmediateWorkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = suppressible::hasImmediateWork() const
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_suppressible.o(.constdata__ZTV12suppressible)
</UL>
<P><STRONG><a name="[f0]"></a>Handler::get_length() const</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, rpm_handler.o(i._ZNK7Handler10get_lengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Handler::get_length() const &rArr; theEstimator()
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theEstimator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_handler.o(.constdata__ZTV7Handler)
</UL>
<P><STRONG><a name="[f1]"></a>Handler::hasImmediateWork() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rpm_handler.o(i._ZNK7Handler16hasImmediateWorkEv))
<BR>[Address Reference Count : 1]<UL><LI> rpm_handler.o(.constdata__ZTV7Handler)
</UL>
<P><STRONG><a name="[f3]"></a>RBCPRTask::get_length() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rbcpr_task.o(i._ZNK9RBCPRTask10get_lengthEv))
<BR>[Address Reference Count : 1]<UL><LI> rbcpr_task.o(.constdata__ZTV9RBCPRTask)
</UL>
<P><STRONG><a name="[f6]"></a>RBCPRTask::hasImmediateWork() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rbcpr_task.o(i._ZNK9RBCPRTask16hasImmediateWorkEv))
<BR>[Address Reference Count : 1]<UL><LI> rbcpr_task.o(.constdata__ZTV9RBCPRTask)
</UL>
<P><STRONG><a name="[1f6]"></a>__ARM_common_memset4_8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, HALmpmint.o(i.__ARM_common_memset4_8))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_All_Clear
</UL>

<P><STRONG><a name="[110]"></a>__Heap_Alloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, retarget.o(i.__Heap_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_adjust_free_heap_space
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[124]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i.__Heap_DescSize))
<BR><BR>[Called By]<UL><LI>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[12d]"></a>__Heap_Finalize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.__Heap_Finalize))
<BR><BR>[Called By]<UL><LI>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[112]"></a>__Heap_Free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(i.__Heap_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __Heap_Free &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[125]"></a>__Heap_Initialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, retarget.o(i.__Heap_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __Heap_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_free_heap_space_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_adjust_free_heap_space
</UL>
<BR>[Called By]<UL><LI>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[120]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.__Heap_ProvideMemory))
<BR><BR>[Called By]<UL><LI>&nbsp;&nbsp;&nbsp;_init_alloc
<LI>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[114]"></a>__Heap_Realloc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, retarget.o(i.__Heap_Realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __Heap_Realloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_adjust_free_heap_space
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[bf]"></a>__init_stack_chk_guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stack_protect.o(i.__init_stack_chk_guard))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[29d]"></a>__stack_chk_fail</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stack_protect.o(i.__stack_chk_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __stack_chk_fail &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_status_alg
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_alg
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_read_peripheral_rev
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_driver_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_driver_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_version_detect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_isr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_put
</UL>

<P><STRONG><a name="[10a]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _sys_exit &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[12f]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[29]"></a>abort_isr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exceptions.o(i.abort_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = abort_isr &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> exceptions.o(.ARM.__AT_0x00090200)
<LI> exceptions.o(i.exceptions_init)
</UL>
<P><STRONG><a name="[bb]"></a>acc_init</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, acc.o(i.acc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = acc_init &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_callback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_id
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_target_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_current_settings
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[29e]"></a>acc_target_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, acc_config.o(i.acc_target_init))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_init
</UL>

<P><STRONG><a name="[1c3]"></a>bimc_ArbitrationEnable</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, HALbimcImpl.o(i.bimc_ArbitrationEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_ArbitrationEnable
</UL>

<P><STRONG><a name="[29f]"></a>bimc_CalculateBKEParams</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, HALbimcImpl.o(i.bimc_CalculateBKEParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bimc_CalculateBKEParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_SetQosBandwidth
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_SetDangerBandwidth
</UL>

<P><STRONG><a name="[1c5]"></a>bimc_Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, HALbimcImpl.o(i.bimc_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_Init
</UL>

<P><STRONG><a name="[1c7]"></a>bimc_SetDangerBandwidth</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, HALbimcImpl.o(i.bimc_SetDangerBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bimc_SetDangerBandwidth &rArr; bimc_CalculateBKEParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_CalculateBKEParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetDangerBandwidth
</UL>

<P><STRONG><a name="[1c9]"></a>bimc_SetDangerMode</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, HALbimcImpl.o(i.bimc_SetDangerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bimc_SetDangerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetDangerMode
</UL>

<P><STRONG><a name="[1cb]"></a>bimc_SetDangerPolicy</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, HALbimcImpl.o(i.bimc_SetDangerPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bimc_SetDangerPolicy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetDangerPolicy
</UL>

<P><STRONG><a name="[1cd]"></a>bimc_SetDangerPriority</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, HALbimcImpl.o(i.bimc_SetDangerPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bimc_SetDangerPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetDangerPriority
</UL>

<P><STRONG><a name="[1cf]"></a>bimc_SetQosBandwidth</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, HALbimcImpl.o(i.bimc_SetQosBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bimc_SetQosBandwidth &rArr; bimc_CalculateBKEParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_CalculateBKEParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_SetQosPriority
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetQosBandwidth
</UL>

<P><STRONG><a name="[1d1]"></a>bimc_SetQosMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, HALbimcImpl.o(i.bimc_SetQosMode))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetQosMode
</UL>

<P><STRONG><a name="[1d3]"></a>bimc_SetQosPriority</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, HALbimcImpl.o(i.bimc_SetQosPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bimc_SetQosPriority &rArr; bimc_SetQosBandwidth &rArr; bimc_CalculateBKEParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bimc_SetQosBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetQosPriority
</UL>

<P><STRONG><a name="[1b6]"></a>busywait</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, busywait.o(i.busywait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = busywait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_BusyWait
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DalIPCInt_Trigger
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSPreXOShutdown
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSPostXOShutdown
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_DDR_Wait
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_init
</UL>

<P><STRONG><a name="[2a1]"></a>busywait_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, busywait.o(i.busywait_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = busywait_init &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetDALPropertyHandle
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2da]"></a>bytearray_at</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bytearray.o(i.bytearray_at))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get_raw_bytes
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
</UL>

<P><STRONG><a name="[2d7]"></a>bytearray_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bytearray.o(i.bytearray_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_clear
</UL>

<P><STRONG><a name="[2a2]"></a>bytearray_create</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bytearray.o(i.bytearray_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bytearray_create &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_create
</UL>

<P><STRONG><a name="[2a3]"></a>bytearray_destroy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bytearray.o(i.bytearray_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bytearray_destroy &rArr; free &rArr; __Heap_Free &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_destroy
</UL>

<P><STRONG><a name="[2a4]"></a>bytearray_frombuffer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bytearray.o(i.bytearray_frombuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bytearray_frombuffer &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_frombuffer
</UL>

<P><STRONG><a name="[2a5]"></a>bytearray_put</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bytearray.o(i.bytearray_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bytearray_put &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_put
</UL>

<P><STRONG><a name="[2d9]"></a>bytearray_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bytearray.o(i.bytearray_size))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get_raw_size
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_eof
</UL>

<P><STRONG><a name="[2a6]"></a>bytearray_swapbuffer</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, bytearray.o(i.bytearray_swapbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bytearray_swapbuffer &rArr; free &rArr; __Heap_Free &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_swapbuffer
</UL>

<P><STRONG><a name="[2db]"></a>debug_cookie_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, debug.o(i.debug_cookie_init))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a8]"></a>deep_sleep_enter</STRONG> (Thumb, 568 bytes, Stack size 48 bytes, lpr_definition_uber.o(i.deep_sleep_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = deep_sleep_enter &rArr; Clock_ProcessorSleep &rArr; Clock_WaitForBIMCPowerCollapse &rArr; Clock_BIMCIsRestoreDone &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rob_set_recording_speed
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_enter_sleep
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rob_mark_event
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_deep_sleep_enter_tsense
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_speed_check_and_update
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_get_switch_time
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_get_svs_switch_to_fast
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_current_speed
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_for_sleep
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_next_required_start
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_test_low
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_prepare_for_sleep
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_sw_done
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_setup_chip_sleep
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorSleep
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_sleep
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_any_interrupt_pending
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_enter
</UL>

<P><STRONG><a name="[2b6]"></a>deep_sleep_exit</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, lpr_definition_uber.o(i.deep_sleep_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = deep_sleep_exit &rArr; Clock_ProcessorRestore &rArr; Clock_SetBIMCPowerRestore &rArr; Clock_BIMCRestore &rArr; Clock_BIMCRestoring &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rob_mark_duration
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_exit_sleep
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rob_mark_event
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_deep_sleep_exit_tsense
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_update_xo_accumulation
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_exit_sleep
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_test_high
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_propogate_interrupts
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_teardown_sleep
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ProcessorRestore
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_sleep
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_exit
</UL>

<P><STRONG><a name="[10c]"></a>dog_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dog.o(i.dog_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[2bf]"></a>dog_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dog.o(i.dog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dog_init &rArr; busywait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busywait
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[251]"></a>dog_kick</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, dog.o(i.dog_kick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dog_kick
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_perform_op(SYSTEMDB_OP_QUEUE_ELEM*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c0]"></a>dog_set_bark_time</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dog.o(i.dog_set_bark_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dog_set_bark_time
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c1]"></a>dog_set_bite_time</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dog.o(i.dog_set_bite_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dog_set_bite_time
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>err_fatal_sw_event</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, coredump.o(i.err_fatal_sw_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[ce]"></a>exceptions_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, exceptions.o(i.exceptions_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = exceptions_enable &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[2c2]"></a>exceptions_init</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, exceptions.o(i.exceptions_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = exceptions_init &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21a]"></a>get_free_heap_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, image_layout.o(i.get_free_heap_space))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_log_event_to_ram
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>

<P><STRONG><a name="[1f1]"></a>gpio_bob_toggle_high</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio_debug.o(i.gpio_bob_toggle_high))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
</UL>

<P><STRONG><a name="[1ed]"></a>gpio_bob_toggle_low</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio_debug.o(i.gpio_bob_toggle_low))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
</UL>

<P><STRONG><a name="[1ec]"></a>gpio_test_high</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio_debug.o(i.gpio_test_high))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
</UL>

<P><STRONG><a name="[1f0]"></a>gpio_test_low</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio_debug.o(i.gpio_test_low))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
</UL>

<P><STRONG><a name="[d4]"></a>gpio_toggle_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gpio_toggle.o(i.gpio_toggle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = gpio_toggle_init &rArr; rpm_register_resource &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>gpio_toggle_xlate</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, gpio_toggle.o(i.gpio_toggle_xlate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = gpio_toggle_xlate &rArr; kvp_get &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_eof
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_toggle.o(i.gpio_toggle_init)
</UL>
<P><STRONG><a name="[2c3]"></a>icb_calc_clock_request</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, icb_rpm.o(i.icb_calc_clock_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = icb_calc_clock_request &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_apply_cb
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_slaves_apply_cb
</UL>

<P><STRONG><a name="[2c4]"></a>icb_clock_request</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, icb_rpm.o(i.icb_clock_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = icb_clock_request &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_apply_cb
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_slaves_apply_cb
</UL>

<P><STRONG><a name="[2c]"></a>icb_dsat_callback</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, icb_rpm_dsat.o(i.icb_dsat_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = icb_dsat_callback &rArr; update_dsat_context &rArr; HAL_bimc_SetDangerBandwidth &rArr; bimc_SetDangerBandwidth &rArr; bimc_CalculateBKEParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dsat_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icb_rpm_dsat.o(i.icb_dsat_init)
</UL>
<P><STRONG><a name="[2c6]"></a>icb_dsat_init</STRONG> (Thumb, 228 bytes, Stack size 88 bytes, icb_rpm_dsat.o(i.icb_dsat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = icb_dsat_init &rArr; Clock_RegisterCallback &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetDangerPriority
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_RegisterCallback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetClockFrequency
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dsat_context
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetClockId
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_get_target_resources
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init_cb
</UL>

<P><STRONG><a name="[2c7]"></a>icb_get_target_resources</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, icb_rpm.o(i.icb_get_target_resources))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = icb_get_target_resources &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetDALPropertyHandleStr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_spdm_req_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_slaves_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_dsat_init
</UL>

<P><STRONG><a name="[d0]"></a>icb_init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, icb_rpm.o(i.icb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = icb_init &rArr; npa_resources_available_cb &rArr; npa_resources_available_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resources_available_cb
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_noc_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetDALPropertyHandleStr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>icb_init_cb</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, icb_rpm.o(i.icb_init_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = icb_init_cb &rArr; icb_spdm_req_init &rArr; rpm_register_resource &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_spdm_req_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_slaves_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_dsat_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetClockId
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icb_rpm.o(i.icb_init)
</UL>
<P><STRONG><a name="[2e]"></a>icb_master_latency_apply_cb</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, icb_rpm_master_latency.o(i.icb_master_latency_apply_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = icb_master_latency_apply_cb &rArr; master_latency_update &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_latency_update
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_num_clients
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_current_request
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_aggregated_request_buffer
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icb_rpm_master_latency.o(i.icb_master_latency_init)
</UL>
<P><STRONG><a name="[2cc]"></a>icb_master_latency_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, icb_rpm_master_latency.o(i.icb_master_latency_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = icb_master_latency_init &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_named_resource
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_get_target_resources
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init_cb
</UL>

<P><STRONG><a name="[2f]"></a>icb_master_latency_translate_cb</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, icb_rpm_master_latency.o(i.icb_master_latency_translate_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = icb_master_latency_translate_cb &rArr; kvp_get &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_eof
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icb_rpm_master_latency.o(i.icb_master_latency_init)
</UL>
<P><STRONG><a name="[2d1]"></a>icb_master_latency_update_bw</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, icb_rpm_master_latency.o(i.icb_master_latency_update_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = icb_master_latency_update_bw &rArr; master_latency_update &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_latency_update
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_aggregated_request_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_slaves_apply_cb
</UL>

<P><STRONG><a name="[30]"></a>icb_masters_apply_cb</STRONG> (Thumb, 678 bytes, Stack size 104 bytes, icb_rpm_masters.o(i.icb_masters_apply_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = icb_masters_apply_cb &rArr; icb_clock_request &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_noc_SetQosBandwidth
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetQosBandwidth
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_clock_request
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_calc_clock_request
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icb_rpm_masters.o(i.icb_masters_init)
</UL>
<P><STRONG><a name="[2c9]"></a>icb_masters_init</STRONG> (Thumb, 458 bytes, Stack size 80 bytes, icb_rpm_masters.o(i.icb_masters_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = icb_masters_init &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_noc_SetQosPriority
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_noc_SetQosMode
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_noc_SetQosBandwidth
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_named_resource
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetQosPriority
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetQosMode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetQosBandwidth
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_get_target_resources
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init_cb
</UL>

<P><STRONG><a name="[31]"></a>icb_masters_translate_cb</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, icb_rpm_masters.o(i.icb_masters_translate_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = icb_masters_translate_cb &rArr; kvp_get &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_eof
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icb_rpm_masters.o(i.icb_masters_init)
</UL>
<P><STRONG><a name="[32]"></a>icb_slaves_apply_cb</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, icb_rpm_slaves.o(i.icb_slaves_apply_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = icb_slaves_apply_cb &rArr; icb_master_latency_update_bw &rArr; master_latency_update &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_update_bw
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_clock_request
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_calc_clock_request
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icb_rpm_slaves.o(i.icb_slaves_init)
</UL>
<P><STRONG><a name="[2ca]"></a>icb_slaves_init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, icb_rpm_slaves.o(i.icb_slaves_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = icb_slaves_init &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_named_resource
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_ArbitrationEnable
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_get_target_resources
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init_cb
</UL>

<P><STRONG><a name="[33]"></a>icb_slaves_translate_cb</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, icb_rpm_slaves.o(i.icb_slaves_translate_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = icb_slaves_translate_cb &rArr; kvp_get &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icb_rpm_slaves.o(i.icb_slaves_init)
</UL>
<P><STRONG><a name="[36]"></a>icb_spdm_req_apply_cb</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, icb_rpm_spdm_req.o(i.icb_spdm_req_apply_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = icb_spdm_req_apply_cb &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icb_rpm_spdm_req.o(i.icb_spdm_req_init)
</UL>
<P><STRONG><a name="[2cb]"></a>icb_spdm_req_init</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, icb_rpm_spdm_req.o(i.icb_spdm_req_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = icb_spdm_req_init &rArr; rpm_register_resource &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetClockId
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_get_target_resources
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init_cb
</UL>

<P><STRONG><a name="[37]"></a>icb_spdm_req_translate_cb</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, icb_rpm_spdm_req.o(i.icb_spdm_req_translate_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = icb_spdm_req_translate_cb &rArr; kvp_get &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icb_rpm_spdm_req.o(i.icb_spdm_req_init)
</UL>
<P><STRONG><a name="[2d2]"></a>image_version_populate_version</STRONG> (Thumb, 254 bytes, Stack size 152 bytes, image_version.o(i.image_version_populate_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = image_version_populate_version &rArr; smem_get_addr &rArr; smem_init &rArr; smem_alloc_static &rArr; smem_ext_get_smem_size &rArr; smem_os_ext_get_smem_size &rArr; smem_map_smem_targ_info &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_get_addr
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_init
</UL>

<P><STRONG><a name="[22e]"></a>interrupt_configure</STRONG> (Thumb, 132 bytes, Stack size 4 bytes, exceptions.o(i.interrupt_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = interrupt_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_RegisterISR
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_high_isr()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_low_isr()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_modes_init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_wdog_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_modem_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_settling_timer_init
</UL>

<P><STRONG><a name="[22d]"></a>interrupt_set_isr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exceptions.o(i.interrupt_set_isr))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_RegisterISR
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_high_isr()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_low_isr()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_register_isr
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_wdog_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_settling_timer_init
</UL>

<P><STRONG><a name="[2d6]"></a>interrupt_soft_trigger</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exceptions.o(i.interrupt_soft_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = interrupt_soft_trigger &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_soft_transition
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_trigger_wakeup_int
</UL>

<P><STRONG><a name="[2af]"></a>is_any_interrupt_pending</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, exceptions.o(i.is_any_interrupt_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = is_any_interrupt_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_perform_lpm
</UL>

<P><STRONG><a name="[1a6]"></a>kvp_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kvp.o(i.kvp_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kvp_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetSPMStates
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28f]"></a>kvp_create</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kvp.o(i.kvp_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = kvp_create &rArr; bytearray_create &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_create
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::Handler(unsigned, unsigned, unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d8]"></a>kvp_destroy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, kvp.o(i.kvp_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = kvp_destroy &rArr; bytearray_destroy &rArr; free &rArr; __Heap_Free &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28b]"></a>kvp_eof</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, kvp.o(i.kvp_eof))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kvp_eof
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_size
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_xlate
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_translate_cb
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_translate_cb
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle_xlate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_swevent_xlate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_pcm_xlate
</UL>

<P><STRONG><a name="[24d]"></a>kvp_frombuffer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kvp.o(i.kvp_frombuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = kvp_frombuffer &rArr; bytearray_frombuffer &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_frombuffer
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
</UL>

<P><STRONG><a name="[23a]"></a>kvp_get</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, kvp.o(i.kvp_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = kvp_get &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_size
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_at
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_translation
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_translation
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_translation
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_s1_shadow_translation
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_xlate(rpm_translation_info*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV1(RPMMessageHeaderV1*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV0(unsigned)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_xlate
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_translate_cb
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_translate_cb
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_spdm_req_translate_cb
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_slaves_translate_cb
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle_xlate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_swevent_xlate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_pcm_xlate
</UL>

<P><STRONG><a name="[24a]"></a>kvp_get_raw_bytes</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kvp.o(i.kvp_get_raw_bytes))
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_at
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
</UL>

<P><STRONG><a name="[249]"></a>kvp_get_raw_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kvp.o(i.kvp_get_raw_size))
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_size
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
</UL>

<P><STRONG><a name="[1a7]"></a>kvp_put</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, kvp.o(i.kvp_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = kvp_put &rArr; bytearray_put &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_put
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stack_chk_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetSPMStates
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24b]"></a>kvp_swapbuffer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kvp.o(i.kvp_swapbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = kvp_swapbuffer &rArr; bytearray_swapbuffer &rArr; free &rArr; __Heap_Free &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytearray_swapbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV1(RPMMessageHeaderV1*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV0(unsigned)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processNAS(volatile bool&, unsigned long long&)
</UL>

<P><STRONG><a name="[154]"></a>lock_ints</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, exceptions.o(i.lock_ints))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_apply
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_vreg_settle_status
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_stepper_settle_status
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsClockEnabled
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisablePowerDomain
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueGet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolInit
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_apply(rpm_application_info*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_query_npa_settling(rpm_application_info*)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_high_isr()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_low_isr()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_bringup_isr()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV1(RPMMessageHeaderV1*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV0(unsigned)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBCPRTask::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rob_mark_event
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_lock_cs_lock
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_malloc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_isr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle_apply
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_log_event_to_ram
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_for_fast
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_change_ok
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_update_speed
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_set_mode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_update_master_xo_stats
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_calc_xo_accumulation
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_set_corner_voltage
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_LogState
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::execute(volatile bool&, unsigned long long)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::get_next_duration(unsigned)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::cpu_speed_change(unsigned, unsigned)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::schedule_task(Task&, ScheduleType)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_register_handler(rpm_service_type, void(*)(unsigned, void*, unsigned, void*), void*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settling_timer_register
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settling_timer_isr()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suppressible::hasImmediateWork() const
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suppressible::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_state_machine
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processNAS(volatile bool&, unsigned long long&)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::clear_deadline()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transitionResource(ResourceData*, void*, unsigned long long*)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_register_isr
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_free
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSSTMSetTimestampFreq
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueuePut
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueCreate
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolFree
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolAlloc
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resource_available_cb
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_limit_max_request
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_cb
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_assign_resource_state
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_terminate_request
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_new_event
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_link_resource
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_sync_request
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_continuation
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_cleanup_placeholders
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_async_event_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetClockFrequency
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsClockOn
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnablePowerDomain
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDR_SYNC_LOCK
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Realloc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Alloc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zqcal_task_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_perform_lpm
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_set_bite_time
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_set_bark_time
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_kick
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3dd]"></a>lookupDirConn</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, vmpm.o(i.lookupDirConn))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_isr
</UL>

<P><STRONG><a name="[105]"></a>main</STRONG> (Thumb, 498 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = main &rArr; sleep_perform_lpm &rArr; vdd_min_enter &rArr; deep_sleep_enter &rArr; Clock_ProcessorSleep &rArr; Clock_WaitForBIMCPowerCollapse &rArr; Clock_BIMCIsRestoreDone &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_modem_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timetick_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_service_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swevent_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_perform_lpm
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_run
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_next_start
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_send_init_proxy_vote_sleep
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_send_init_proxy_vote
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_init_done
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prevent_further_heap_frees
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_post_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_process_event
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_num_pending_events
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_put
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_destroy
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_create
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_clear
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exceptions_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_set_bite_time
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_set_bark_time
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_kick
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_cookie_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busywait_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetSPMStates
</UL>
<BR>[Called By]<UL><LI>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2cf]"></a>master_latency_update</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, icb_rpm_master_latency.o(i.master_latency_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = master_latency_update &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_apply_cb
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_update_bw
</UL>

<P><STRONG><a name="[1b9]"></a>memscpy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, memscpy.o(i.memscpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memscpy
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_int_copy
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pre_switch_callback
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::estimateResource(ResourceData*)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_copy_mem
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
</UL>

<P><STRONG><a name="[1ee]"></a>message_ram_calc_xo_accumulation</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rpm_messageram.o(i.message_ram_calc_xo_accumulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = message_ram_calc_xo_accumulation
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
</UL>

<P><STRONG><a name="[ba]"></a>message_ram_init_rail_info</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rpm_messageram.o(i.message_ram_init_rail_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = message_ram_init_rail_info &rArr; railway_set_callback &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_callback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_id
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[2e8]"></a>message_ram_malloc</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, rpm_messageram.o(i.message_ram_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = message_ram_malloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_toc_init
</UL>

<P><STRONG><a name="[268]"></a>message_ram_master_stats</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rpm_messageram.o(i.message_ram_master_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = message_ram_master_stats &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_init
</UL>

<P><STRONG><a name="[2e9]"></a>message_ram_update_master_xo_stats</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rpm_messageram.o(i.message_ram_update_master_xo_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = message_ram_update_master_xo_stats &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_update_xo_stats
</UL>

<P><STRONG><a name="[25a]"></a>message_ram_update_modem_xo_drift</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rpm_messageram.o(i.message_ram_update_modem_xo_drift))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = message_ram_update_modem_xo_drift
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_high_isr()
</UL>

<P><STRONG><a name="[38]"></a>message_ram_update_rail_info</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rpm_messageram.o(i.message_ram_update_rail_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = message_ram_update_rail_info &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_messageram.o(i.message_ram_init_rail_info)
</UL>
<P><STRONG><a name="[2b9]"></a>message_ram_update_xo_accumulation</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rpm_messageram.o(i.message_ram_update_xo_accumulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = message_ram_update_xo_accumulation
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[2ea]"></a>message_ram_vmpm</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rpm_messageram.o(i.message_ram_vmpm))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = message_ram_vmpm &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_state_machine
</UL>

<P><STRONG><a name="[2eb]"></a>mpm_config_ebi1_freeze_io</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mpm.o(i.mpm_config_ebi1_freeze_io))
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_CfgEbi1SwCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_power_collapse
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_power_collapse
</UL>

<P><STRONG><a name="[2ed]"></a>mpm_config_freeze_ios</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mpm.o(i.mpm_config_freeze_ios))
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_CfgFreezeIOs
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_enter
</UL>

<P><STRONG><a name="[2ef]"></a>mpm_deep_sleep_enter_latency</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mpm.o(i.mpm_deep_sleep_enter_latency))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mpm_deep_sleep_enter_latency &rArr; HAL_mpm_GetDeepSleepEnterLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_GetDeepSleepEnterLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_latency
</UL>

<P><STRONG><a name="[2f1]"></a>mpm_deep_sleep_exit_latency</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mpm.o(i.mpm_deep_sleep_exit_latency))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpm_deep_sleep_exit_latency &rArr; HAL_mpm_GetDeepSleepExitLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_GetDeepSleepExitLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_latency
</UL>

<P><STRONG><a name="[2dc]"></a>mpm_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mpm.o(i.mpm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mpm_init &rArr; HAL_mpm_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_EnableCXO
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f3]"></a>mpm_init_xtal</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mpm.o(i.mpm_init_xtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mpm_init_xtal &rArr; HAL_mpm_Init_Xtal_Latency &rArr; pm_app_clk_get_xo_warmup_time &rArr; pm_clk_sw_enable_status &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_Init_Xtal_Latency
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_latency
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
</UL>

<P><STRONG><a name="[3ba]"></a>mpm_set_vmin_voltages</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mpm.o(i.mpm_set_vmin_voltages))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_enter
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_enter_hibernation
</UL>

<P><STRONG><a name="[2b3]"></a>mpm_setup_chip_sleep</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mpm.o(i.mpm_setup_chip_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = mpm_setup_chip_sleep &rArr; HAL_mpm_CfgVoltageRailSleep &rArr; HAL_mpm_CfgVoltageCommands &rArr; pm_mpm_cmd_config &rArr; pm_mpm_target_cmd_config &rArr; pm_rpm_volt_level_status &rArr; pm_ldo_volt_level_status &rArr; pm_pwr_volt_level_status_alg &rArr; pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_CfgVoltageRailSleep
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_CfgCXOSleep
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_enter_hibernation
</UL>

<P><STRONG><a name="[2b5]"></a>mpm_sw_done</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mpm.o(i.mpm_sw_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mpm_sw_done &rArr; HAL_mpm_SWDone &rArr; sleep_is_any_interrupt_pending &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
</UL>

<P><STRONG><a name="[2bd]"></a>mpm_teardown_sleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mpm.o(i.mpm_teardown_sleep))
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_ClearSleepModes
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[1fa]"></a>noc_Init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, HALnocImpl.o(i.noc_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_noc_Init
</UL>

<P><STRONG><a name="[1fc]"></a>noc_SetQosBandwidth</STRONG> (Thumb, 704 bytes, Stack size 40 bytes, HALnocImpl.o(i.noc_SetQosBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = noc_SetQosBandwidth &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_noc_SetQosBandwidth
</UL>

<P><STRONG><a name="[1fe]"></a>noc_SetQosMode</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, HALnocImpl.o(i.noc_SetQosMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = noc_SetQosMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_noc_SetQosMode
</UL>

<P><STRONG><a name="[200]"></a>noc_SetQosPriority</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, HALnocImpl.o(i.noc_SetQosPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = noc_SetQosPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_noc_SetQosPriority
</UL>

<P><STRONG><a name="[10d]"></a>notify_apss</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, coredump.o(i.notify_apss))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[191]"></a>npa_assign_resource_state</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, npa.o(i.npa_assign_resource_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = npa_assign_resource_state &rArr; Core_WorkQueueAlloc &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueuePut
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueAlloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeDCVSEnaFunc
</UL>

<P><STRONG><a name="[de]"></a>npa_bitwise_update_fcn</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, npa_plugins.o(i.npa_bitwise_update_fcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = npa_bitwise_update_fcn &rArr; rpm_npa_get_client &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_get_client
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npa_plugins.o(.constdata)
</UL>
<P><STRONG><a name="[237]"></a>npa_complete_request</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, npa.o(i.npa_complete_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = npa_complete_request &rArr; npa_terminate_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_terminate_request
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_apply(rpm_application_info*)
</UL>

<P><STRONG><a name="[e3]"></a>npa_create_bimc_client</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ClockRPMBIMC.o(i.npa_create_bimc_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = npa_create_bimc_client
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMBIMC.o(.constdata)
</UL>
<P><STRONG><a name="[2f9]"></a>npa_create_query_handle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, npa.o(i.npa_create_query_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = npa_create_query_handle &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_find_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
</UL>

<P><STRONG><a name="[20f]"></a>npa_create_sync_client_ex</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, npa.o(i.npa_create_sync_client_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = npa_create_sync_client_ex &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strncmp
<LI>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolFree
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolAlloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_xlate(rpm_translation_info*)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_apply(rpm_application_info*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_query_npa_settling(rpm_application_info*)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_resources_ready
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init_cb
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSInit
</UL>

<P><STRONG><a name="[186]"></a>npa_define_node_cb</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, npa.o(i.npa_define_node_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = npa_define_node_cb &rArr; npa_define_node_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolAlloc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_link_resource
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_continuation
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_cleanup_placeholders
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_proc_npa_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitNPA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_subsys_pc_init
</UL>

<P><STRONG><a name="[dd]"></a>npa_identity_update_fcn</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, npa_plugins.o(i.npa_identity_update_fcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = npa_identity_update_fcn &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ClockRPMNPA.o(.constdata)
<LI> npa_plugins.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>npa_init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, npa.o(i.npa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = npa_init &rArr; Core_WorkQueueCreate &rArr; Core_PoolCreate &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_target_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_target_config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueCreate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolConfig
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[236]"></a>npa_issue_internal_request</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, npa.o(i.npa_issue_internal_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = npa_issue_internal_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_apply(rpm_application_info*)
</UL>

<P><STRONG><a name="[238]"></a>npa_issue_limit_max_request</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, npa.o(i.npa_issue_limit_max_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = npa_issue_limit_max_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_apply(rpm_application_info*)
</UL>

<P><STRONG><a name="[15c]"></a>npa_issue_scalar_request</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, npa.o(i.npa_issue_scalar_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableSource
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableSource
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_apply(rpm_application_info*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_latency_update
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_rpm_clock_xo
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_rpm_clock_svs_slow
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_resources_ready
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_prechange_cb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_postchange_cb
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSEnableTrace
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSDisableTrace
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_clock_request
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSInit
</UL>

<P><STRONG><a name="[dc]"></a>npa_max_update_fcn</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, npa_plugins.o(i.npa_max_update_fcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = npa_max_update_fcn &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ClockRPMBIMC.o(.constdata)
<LI> npa_plugins.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>npa_no_client_update_fcn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, npa_plugins.o(i.npa_no_client_update_fcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = npa_no_client_update_fcn &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npa_plugins.o(.constdata)
</UL>
<P><STRONG><a name="[2e4]"></a>npa_num_pending_events</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, npa.o(i.npa_num_pending_events))
<BR><BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueLength
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e5]"></a>npa_process_event</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, npa.o(i.npa_process_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = npa_process_event &rArr; Core_WorkElementProcess &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkElementProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[301]"></a>npa_query</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, npa.o(i.npa_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = npa_query
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_deep_imminent
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_query_by_client
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_perform_lpm
</UL>

<P><STRONG><a name="[239]"></a>npa_query_by_client</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, npa.o(i.npa_query_by_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = npa_query_by_client &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_query
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_apply(rpm_application_info*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_query_npa_settling(rpm_application_info*)
</UL>

<P><STRONG><a name="[2fc]"></a>npa_resource_available_cb</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, npa.o(i.npa_resource_available_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;strncmp
<LI>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolAlloc
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_new_event
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_link_resource
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resources_available_continuation
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_continuation
</UL>

<P><STRONG><a name="[2c8]"></a>npa_resources_available_cb</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, npa.o(i.npa_resources_available_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = npa_resources_available_cb &rArr; npa_resources_available_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolAlloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resources_available_continuation
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_init
</UL>

<P><STRONG><a name="[302]"></a>npa_resources_available_continuation</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, npa.o(i.npa_resources_available_continuation))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = npa_resources_available_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolFree
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resource_available_cb
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resources_available_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npa.o(i.npa_resources_available_continuation)
</UL>
<P><STRONG><a name="[2fd]"></a>npa_target_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, npa_target_config.o(i.npa_target_config))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_init
</UL>

<P><STRONG><a name="[2fe]"></a>npa_target_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, npa_target_init.o(i.npa_target_init))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_init
</UL>

<P><STRONG><a name="[1e7]"></a>pm_app_clk_get_xo_warmup_time</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pm_app_clk.o(i.pm_app_clk_get_xo_warmup_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pm_app_clk_get_xo_warmup_time &rArr; pm_clk_sw_enable_status &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_xo_get_warmup_time
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_sw_enable_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_Init_Xtal_Latency
</UL>

<P><STRONG><a name="[305]"></a>pm_clk_driver_init</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, pm_clk_driver.o(i.pm_clk_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = pm_clk_driver_init &rArr; pm_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_malloc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_common_info
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_get_pmic_model
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_resource_manager_init
</UL>

<P><STRONG><a name="[30a]"></a>pm_clk_get_data</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pm_clk_driver.o(i.pm_clk_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_sw_enable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_pin_ctrled
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_register_resources
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_xo_get_warmup_time
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_sw_enable_status
</UL>

<P><STRONG><a name="[35e]"></a>pm_clk_get_num_peripherals</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pm_clk_driver.o(i.pm_clk_get_num_peripherals), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_register_resources
</UL>

<P><STRONG><a name="[309]"></a>pm_clk_pin_ctrled</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, pm_clk.o(i.pm_clk_pin_ctrled))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pm_clk_pin_ctrled &rArr; pm_comm_write_byte_mask &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_get_data
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_apply
</UL>

<P><STRONG><a name="[30c]"></a>pm_clk_sw_enable</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, pm_clk.o(i.pm_clk_sw_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pm_clk_sw_enable &rArr; pm_comm_write_byte_mask &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_get_data
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_apply
</UL>

<P><STRONG><a name="[304]"></a>pm_clk_sw_enable_status</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pm_clk.o(i.pm_clk_sw_enable_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pm_clk_sw_enable_status &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_get_data
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_app_clk_get_xo_warmup_time
</UL>

<P><STRONG><a name="[303]"></a>pm_clk_xo_get_warmup_time</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, pm_clk_xo.o(i.pm_clk_xo_get_warmup_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pm_clk_xo_get_warmup_time &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_get_data
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_app_clk_get_xo_warmup_time
</UL>

<P><STRONG><a name="[30e]"></a>pm_comm_channel_init_internal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pm_comm_spmi_lite.o(i.pm_comm_channel_init_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = pm_comm_channel_init_internal &rArr; SpmiBus_Init &rArr; SpmiOs_Malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[30f]"></a>pm_comm_get_comm_info</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pm_comm.o(i.pm_comm_get_comm_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_comm_get_comm_info
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_get_num_slaves_per_pmic
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_resource_manager_init
</UL>

<P><STRONG><a name="[311]"></a>pm_comm_info_init</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, pm_comm.o(i.pm_comm_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pm_comm_info_init &rArr; pm_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_malloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_get_slave_id
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_get_num_slaves_per_pmic
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[30d]"></a>pm_comm_read_byte</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, pm_comm_spmi_lite.o(i.pm_comm_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_ReadLong
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_vreg_settled_check_alg
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_stepper_done_status_alg
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_mode_status_raw_alg
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_vreg_ok_status_alg
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_status_alg
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_xo_get_warmup_time
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_sw_enable_status
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_driver_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_driver_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_enter_sleep
</UL>

<P><STRONG><a name="[313]"></a>pm_comm_read_byte_array</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pm_comm_spmi_lite.o(i.pm_comm_read_byte_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pm_comm_read_byte_array &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_ReadLong
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_vreg_settle_status
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_stepper_settle_status
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_status_alg
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_read_peripheral_rev
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_driver_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_driver_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_version_detect
</UL>

<P><STRONG><a name="[314]"></a>pm_comm_register_isr</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, pm_comm_spmi_lite.o(i.pm_comm_register_isr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_RegisterIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_register_isr_alg
</UL>

<P><STRONG><a name="[315]"></a>pm_comm_write_byte</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, pm_comm_spmi_lite.o(i.pm_comm_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pm_comm_write_byte &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_WriteLong
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_isr
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_enable_alg
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_clear_alg
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_alg
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_alg
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_switching_freq
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_sw_mode
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_ocp_enable
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_exit_sleep
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_enter_sleep
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_pcm_apply
</UL>

<P><STRONG><a name="[316]"></a>pm_comm_write_byte_array</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pm_comm_spmi_lite.o(i.pm_comm_write_byte_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pm_comm_write_byte_array &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_WriteLong
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_alg
</UL>

<P><STRONG><a name="[30b]"></a>pm_comm_write_byte_mask</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, pm_comm_spmi_lite.o(i.pm_comm_write_byte_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pm_comm_write_byte_mask &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_WriteLong
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_ReadLong
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_pin_ctrl_mode_alg
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_pin_ctrl_alg
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_set_trigger_alg
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_sw_enable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_pin_ctrled
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_alg
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_alg
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_switching_freq
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_sw_mode
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_quiet_mode
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_ocp_enable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_pcm_apply
</UL>

<P><STRONG><a name="[317]"></a>pm_convert_time_to_timetick</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pm_utils.o(i.pm_convert_time_to_timetick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pm_convert_time_to_timetick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_apply
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_vreg_settle_status
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_stepper_settle_status
</UL>

<P><STRONG><a name="[318]"></a>pm_convert_timetick_to_time</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pm_utils.o(i.pm_convert_timetick_to_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pm_convert_timetick_to_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_settle
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_apply
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_settle
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_vreg_settle_status
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_stepper_settle_status
</UL>

<P><STRONG><a name="[319]"></a>pm_droop_detect_irq_config</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, pm_droop_detect.o(i.pm_droop_detect_irq_config), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_set_trigger_alg
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_register_isr_alg
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_enable_alg
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_clear_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resource_dependencies
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resource_dependencies
</UL>

<P><STRONG><a name="[31e]"></a>pm_droop_detect_irq_enable</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, pm_droop_detect.o(i.pm_droop_detect_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = pm_droop_detect_irq_enable &rArr; pm_pwr_irq_enable_alg &rArr; pm_comm_write_byte &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_enable_alg
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_irq_clear_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_apply
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_droop_detect_irq_enable
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resource_dependencies
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resource_dependencies
</UL>

<P><STRONG><a name="[310]"></a>pm_get_num_slaves_per_pmic</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pm_version.o(i.pm_get_num_slaves_per_pmic))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_get_comm_info
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_resource_manager_init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_info_init
</UL>

<P><STRONG><a name="[36c]"></a>pm_get_pmic_info</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pm_version.o(i.pm_get_pmic_info))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_driver_init
</UL>

<P><STRONG><a name="[308]"></a>pm_get_pmic_model</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pm_version.o(i.pm_get_pmic_model))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_settle
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_driver_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_is_stub_enabled
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_resource_manager_init
</UL>

<P><STRONG><a name="[312]"></a>pm_get_slave_id</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pm_version.o(i.pm_get_slave_id))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_info_init
</UL>

<P><STRONG><a name="[b8]"></a>pm_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, pm_init.o(i.pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = pm_init &rArr; pm_rpm_proc_npa_init &rArr; npa_define_node_cb &rArr; npa_define_node_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_version_detect
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_is_stub_enabled
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_sleep_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_proc_npa_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_platform_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_resource_manager_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_cmd_init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_info_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_channel_init_internal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[327]"></a>pm_ldo_calculate_vset</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, pm_ldo.o(i.pm_ldo_calculate_vset))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pm_ldo_calculate_vset &rArr; pm_pwr_volt_calculate_vset_celing_uv &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_calculate_vset_celing_uv
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_calculate_vset
</UL>

<P><STRONG><a name="[32a]"></a>pm_ldo_driver_init</STRONG> (Thumb, 746 bytes, Stack size 64 bytes, pm_ldo_driver.o(i.pm_ldo_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = pm_ldo_driver_init &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_get_volt_setting_info
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_malloc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte_array
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_periph_count_info
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_common_info
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stack_chk_fail
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_resource_manager_init
</UL>

<P><STRONG><a name="[328]"></a>pm_ldo_get_data</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pm_ldo_driver.o(i.pm_ldo_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_volt_level_status
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode_status_raw
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_calculate_vset
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resources
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_is_periph_unified_reg
</UL>

<P><STRONG><a name="[35d]"></a>pm_ldo_get_num_peripherals</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pm_ldo_driver.o(i.pm_ldo_get_num_peripherals), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_register_resources
</UL>

<P><STRONG><a name="[32d]"></a>pm_ldo_sw_mode</STRONG> (Thumb, 650 bytes, Stack size 64 bytes, pm_ldo.o(i.pm_ldo_sw_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + In Cycle
<LI>Call Chain = pm_ldo_sw_mode &rArr;  pm_ldo_sw_mode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_get_data
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_BusyWait
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_settle
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_apply
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_bypass_cb
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode
</UL>

<P><STRONG><a name="[32e]"></a>pm_ldo_sw_mode_status_raw</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pm_ldo.o(i.pm_ldo_sw_mode_status_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pm_ldo_sw_mode_status_raw &rArr; pm_pwr_sw_mode_status_raw_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_mode_status_raw_alg
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_sw_mode_status_raw
</UL>

<P><STRONG><a name="[330]"></a>pm_ldo_volt_level_status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pm_ldo.o(i.pm_ldo_volt_level_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pm_ldo_volt_level_status &rArr; pm_pwr_volt_level_status_alg &rArr; pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_status_alg
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_volt_level_status
</UL>

<P><STRONG><a name="[306]"></a>pm_malloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pm_utils.o(i.pm_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pm_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resources
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resources
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_register_resources
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_driver_init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rtc_driver_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pon_driver_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_driver_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_driver_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_proc_npa_init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_info_init
</UL>

<P><STRONG><a name="[1da]"></a>pm_mpm_cmd_config</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, pm_mpm.o(i.pm_mpm_cmd_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = pm_mpm_cmd_config &rArr; pm_mpm_target_cmd_config &rArr; pm_rpm_volt_level_status &rArr; pm_ldo_volt_level_status &rArr; pm_pwr_volt_level_status_alg &rArr; pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_target_cmd_config
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_cmd_rail
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_CfgVoltageCommands
</UL>

<P><STRONG><a name="[326]"></a>pm_mpm_cmd_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pm_mpm.o(i.pm_mpm_cmd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pm_mpm_cmd_init &rArr; pm_target_information_get_specific_info &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_specific_info
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[339]"></a>pm_mpm_get_delay_from_microvolts</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, pm_mpm.o(i.pm_mpm_get_delay_from_microvolts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pm_mpm_get_delay_from_microvolts
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_target_cmd_config
</UL>

<P><STRONG><a name="[333]"></a>pm_mpm_target_cmd_config</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, pm_mpm_target.o(i.pm_mpm_target_cmd_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = pm_mpm_target_cmd_config &rArr; pm_rpm_volt_level_status &rArr; pm_ldo_volt_level_status &rArr; pm_pwr_volt_level_status_alg &rArr; pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_volt_level_status
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_sw_mode_status_raw
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_is_periph_unified_reg
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_calculate_vset
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_get_delay_from_microvolts
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_cmd_config
</UL>

<P><STRONG><a name="[33a]"></a>pm_pon_driver_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, pm_pon_driver.o(i.pm_pon_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pm_pon_driver_init &rArr; pm_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_resource_manager_init
</UL>

<P><STRONG><a name="[2e2]"></a>pm_post_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pm_init.o(i.pm_post_init))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31a]"></a>pm_pwr_irq_clear_alg</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, pm_pwr_alg.o(i.pm_pwr_irq_clear_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pm_pwr_irq_clear_alg &rArr; pm_comm_write_byte &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_enable
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_config
</UL>

<P><STRONG><a name="[31b]"></a>pm_pwr_irq_enable_alg</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, pm_pwr_alg.o(i.pm_pwr_irq_enable_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pm_pwr_irq_enable_alg &rArr; pm_comm_write_byte &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_enable
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_config
</UL>

<P><STRONG><a name="[31d]"></a>pm_pwr_irq_register_isr_alg</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pm_pwr_alg.o(i.pm_pwr_irq_register_isr_alg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_register_isr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_config
</UL>

<P><STRONG><a name="[31c]"></a>pm_pwr_irq_set_trigger_alg</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, pm_pwr_alg.o(i.pm_pwr_irq_set_trigger_alg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_config
</UL>

<P><STRONG><a name="[33b]"></a>pm_pwr_pin_ctrl_alg</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, pm_pwr_alg.o(i.pm_pwr_pin_ctrl_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pm_pwr_pin_ctrl_alg &rArr; pm_comm_write_byte_mask &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
</UL>

<P><STRONG><a name="[33c]"></a>pm_pwr_pin_ctrl_mode_alg</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, pm_pwr_alg.o(i.pm_pwr_pin_ctrl_mode_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pm_pwr_pin_ctrl_mode_alg &rArr; pm_comm_write_byte_mask &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
</UL>

<P><STRONG><a name="[33d]"></a>pm_pwr_sw_enable_alg</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, pm_pwr_alg.o(i.pm_pwr_sw_enable_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pm_pwr_sw_enable_alg &rArr; pm_pwr_sw_vreg_settled_check_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_vreg_settled_check_alg
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_settle
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
</UL>

<P><STRONG><a name="[33f]"></a>pm_pwr_sw_enable_status_alg</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, pm_pwr_alg.o(i.pm_pwr_sw_enable_status_alg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resource_dependencies
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resource_dependencies
</UL>

<P><STRONG><a name="[340]"></a>pm_pwr_sw_enable_vreg_ok_status_alg</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pm_pwr_alg.o(i.pm_pwr_sw_enable_vreg_ok_status_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_apply
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_vreg_settle_status
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_status_alg
</UL>

<P><STRONG><a name="[32f]"></a>pm_pwr_sw_mode_status_raw_alg</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, pm_pwr_alg.o(i.pm_pwr_sw_mode_status_raw_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pm_pwr_sw_mode_status_raw_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode_status_raw
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_sw_mode_status_raw
</UL>

<P><STRONG><a name="[329]"></a>pm_pwr_volt_calculate_vset_celing_uv</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, pm_pwr_alg.o(i.pm_pwr_volt_calculate_vset_celing_uv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pm_pwr_volt_calculate_vset_celing_uv &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_aggregate
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_aggregate
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_calculate_vset
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_calculate_vset
</UL>

<P><STRONG><a name="[341]"></a>pm_pwr_volt_level_alg</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, pm_pwr_alg.o(i.pm_pwr_volt_level_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = pm_pwr_volt_level_alg &rArr; pm_pwr_sw_vreg_settled_check_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_vreg_settled_check_alg
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_array
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stack_chk_fail
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_volt_level
</UL>

<P><STRONG><a name="[331]"></a>pm_pwr_volt_level_status_alg</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, pm_pwr_alg.o(i.pm_pwr_volt_level_status_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = pm_pwr_volt_level_status_alg &rArr; pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_vreg_ok_status_alg
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte_array
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stack_chk_fail
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_volt_level_status
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resource_dependencies
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resource_dependencies
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_volt_level_status
</UL>

<P><STRONG><a name="[342]"></a>pm_pwr_volt_level_stepper_done_status_alg</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, pm_pwr_alg.o(i.pm_pwr_volt_level_stepper_done_status_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = pm_pwr_volt_level_stepper_done_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_apply
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_stepper_settle_status
</UL>

<P><STRONG><a name="[322]"></a>pm_resource_manager_init</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, pm_resource_manager.o(i.pm_resource_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = pm_resource_manager_init &rArr; pm_smps_driver_init &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_get_num_slaves_per_pmic
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_get_comm_info
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_read_peripheral_rev
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_driver_init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rtc_driver_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pon_driver_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_driver_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_driver_init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_get_pmic_model
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[335]"></a>pm_rpm_calculate_vset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, pm_rpm_utilities.o(i.pm_rpm_calculate_vset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pm_rpm_calculate_vset &rArr; pm_ldo_calculate_vset &rArr; pm_pwr_volt_calculate_vset_celing_uv &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_calculate_vset
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_calculate_vset
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_target_cmd_config
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_cmd_rail
</UL>

<P><STRONG><a name="[347]"></a>pm_rpm_check_stepper_settle_status</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, pm_rpm_utilities.o(i.pm_rpm_check_stepper_settle_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pm_rpm_check_stepper_settle_status &rArr; pm_pwr_volt_level_stepper_done_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_stepper_done_status_alg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_timetick_to_time
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_time_to_timetick
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte_array
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_BusyWait
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_settle
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_settle
</UL>

<P><STRONG><a name="[348]"></a>pm_rpm_check_vreg_settle_status</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, pm_rpm_utilities.o(i.pm_rpm_check_vreg_settle_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pm_rpm_check_vreg_settle_status &rArr; pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_timetick_to_time
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_time_to_timetick
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_vreg_ok_status_alg
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte_array
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_BusyWait
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_settle
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_settle
</UL>

<P><STRONG><a name="[3d]"></a>pm_rpm_clk_buffer_apply</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, pm_rpm_clk_buffer_trans_apply.o(i.pm_rpm_clk_buffer_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pm_rpm_clk_buffer_apply &rArr; pm_clk_sw_enable &rArr; pm_comm_write_byte_mask &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_sw_enable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_pin_ctrled
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_int_copy
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_issue_request
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_num_clients
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_current_request
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_rpm_clk_buffer_trans_apply.o(i.pm_rpm_clk_buffer_register_resources)
</UL>
<P><STRONG><a name="[34b]"></a>pm_rpm_clk_buffer_register_resource_dependencies</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, pm_rpm_clk_buffer_trans_apply.o(i.pm_rpm_clk_buffer_register_resource_dependencies), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_internal_client_type
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_aggregated_request_buffer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_client
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_register_resources
</UL>

<P><STRONG><a name="[34e]"></a>pm_rpm_clk_buffer_register_resources</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, pm_rpm_clk_buffer_trans_apply.o(i.pm_rpm_clk_buffer_register_resources), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_get_data
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_specific_info
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_malloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_register_resources
</UL>

<P><STRONG><a name="[3e]"></a>pm_rpm_clk_buffer_translation</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, pm_rpm_clk_buffer_trans_apply.o(i.pm_rpm_clk_buffer_translation))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pm_rpm_clk_buffer_translation &rArr; kvp_get &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_rpm_clk_buffer_trans_apply.o(i.pm_rpm_clk_buffer_register_resources)
</UL>
<P><STRONG><a name="[2b4]"></a>pm_rpm_enter_sleep</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, pm_rpm_target.o(i.pm_rpm_enter_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = pm_rpm_enter_sleep &rArr; pm_smps_volt_level_status &rArr; pm_pwr_volt_level_status_alg &rArr; pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_volt_level_status
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chipinfo_GetFamily
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
</UL>

<P><STRONG><a name="[2b8]"></a>pm_rpm_exit_sleep</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, pm_rpm_target.o(i.pm_rpm_exit_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = pm_rpm_exit_sleep &rArr; pm_smps_volt_level &rArr; pm_pwr_volt_level_alg &rArr; pm_pwr_sw_vreg_settled_check_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_volt_level
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chipinfo_GetFamily
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[349]"></a>pm_rpm_int_copy</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, pm_rpm_utilities.o(i.pm_rpm_int_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pm_rpm_int_copy &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memscpy
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_aggregate
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_apply
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_aggregate
</UL>

<P><STRONG><a name="[336]"></a>pm_rpm_is_periph_unified_reg</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, pm_rpm_utilities.o(i.pm_rpm_is_periph_unified_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_rpm_is_periph_unified_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_get_data
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_target_cmd_config
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_cmd_rail
</UL>

<P><STRONG><a name="[352]"></a>pm_rpm_ldo_aggregate</STRONG> (Thumb, 618 bytes, Stack size 80 bytes, pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_aggregate))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pm_rpm_ldo_aggregate &rArr; pm_pwr_volt_calculate_vset_celing_uv &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_int_copy
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_calculate_vset_celing_uv
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_num_clients
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_current_request
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_apply
</UL>

<P><STRONG><a name="[3f]"></a>pm_rpm_ldo_apply</STRONG> (Thumb, 618 bytes, Stack size 112 bytes, pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = pm_rpm_ldo_apply &rArr; pm_rpm_ldo_dependency_execute &rArr; pm_rpm_ldo_execute_driver &rArr; pm_rpm_ldo_settle &rArr; pm_pwr_sw_enable_alg &rArr; pm_pwr_sw_vreg_settled_check_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_settle
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_dependency_execute
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_aggregate
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_enable
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_stepper_done_status_alg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_timetick_to_time
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_time_to_timetick
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_vreg_ok_status_alg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_register_resources)
</UL>
<P><STRONG><a name="[355]"></a>pm_rpm_ldo_bypass_cb</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_bypass_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pm_rpm_ldo_bypass_cb &rArr; pm_ldo_sw_mode &rArr;  pm_ldo_sw_mode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_aggregated_request_buffer
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_check_ldo_bypass
</UL>

<P><STRONG><a name="[353]"></a>pm_rpm_ldo_dependency_execute</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_dependency_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = pm_rpm_ldo_dependency_execute &rArr; pm_rpm_ldo_execute_driver &rArr; pm_rpm_ldo_settle &rArr; pm_pwr_sw_enable_alg &rArr; pm_pwr_sw_vreg_settled_check_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_issue_request
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_apply
</UL>

<P><STRONG><a name="[356]"></a>pm_rpm_ldo_execute_driver</STRONG> (Thumb, 928 bytes, Stack size 80 bytes, pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_execute_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = pm_rpm_ldo_execute_driver &rArr; pm_rpm_ldo_settle &rArr; pm_pwr_sw_enable_alg &rArr; pm_pwr_sw_vreg_settled_check_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_settle
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_enable
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_pin_ctrl_mode_alg
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_pin_ctrl_alg
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_timetick_to_time
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_time_to_timetick
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_alg
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_alg
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_get_pmic_model
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_BusyWait
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_dependency_execute
</UL>

<P><STRONG><a name="[357]"></a>pm_rpm_ldo_register_resource_dependencies</STRONG> (Thumb, 440 bytes, Stack size 72 bytes, pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_register_resource_dependencies), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_enable
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_config
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_status_alg
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_status_alg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_internal_client_type
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_aggregated_request_buffer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_client
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_register_resources
</UL>

<P><STRONG><a name="[358]"></a>pm_rpm_ldo_register_resources</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_register_resources), UNUSED)
<BR><BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_get_data
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_specific_info
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_malloc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_common_info
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_register_resources
</UL>

<P><STRONG><a name="[354]"></a>pm_rpm_ldo_settle</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_settle))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = pm_rpm_ldo_settle &rArr; pm_pwr_sw_enable_alg &rArr; pm_pwr_sw_vreg_settled_check_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_vreg_settle_status
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_stepper_settle_status
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_timetick_to_time
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_alg
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_get_pmic_model
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_apply
</UL>

<P><STRONG><a name="[40]"></a>pm_rpm_ldo_translation</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_translation))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pm_rpm_ldo_translation &rArr; kvp_get &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_rpm_ldo_trans_apply.o(i.pm_rpm_ldo_register_resources)
</UL>
<P><STRONG><a name="[43]"></a>pm_rpm_npa_resource_set</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, pm_rpm_npa.o(i.pm_rpm_npa_resource_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pm_rpm_npa_resource_set &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_issue_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_rpm_npa.o(i.pm_rpm_proc_npa_init)
</UL>
<P><STRONG><a name="[324]"></a>pm_rpm_platform_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pm_rpm_target.o(i.pm_rpm_platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pm_rpm_platform_init &rArr; rpm_register_resource &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[323]"></a>pm_rpm_proc_npa_init</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, pm_rpm_npa.o(i.pm_rpm_proc_npa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = pm_rpm_proc_npa_init &rArr; npa_define_node_cb &rArr; npa_define_node_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_specific_info
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_malloc
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_proc_npa_register_resources
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_internal_client_type
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_client
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_cb
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[359]"></a>pm_rpm_proc_npa_register_resources</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pm_rpm_npa_device.o(i.pm_rpm_proc_npa_register_resources))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_proc_npa_init
</UL>

<P><STRONG><a name="[35a]"></a>pm_rpm_register_resources</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, pm_rpm_npa_device.o(i.pm_rpm_register_resources), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resources
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resource_dependencies
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resources
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resource_dependencies
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_register_resources
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_register_resource_dependencies
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_get_num_peripherals
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_get_num_peripherals
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_get_num_peripherals
</UL>

<P><STRONG><a name="[46]"></a>pm_rpm_rsrc_apply</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pm_rpm_target.o(i.pm_rpm_rsrc_apply))
<BR>[Address Reference Count : 1]<UL><LI> pm_rpm_target.o(i.pm_target_is_stub_enabled)
</UL>
<P><STRONG><a name="[47]"></a>pm_rpm_rsrc_translation</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pm_rpm_target.o(i.pm_rpm_rsrc_translation))
<BR>[Address Reference Count : 1]<UL><LI> pm_rpm_target.o(i.pm_target_is_stub_enabled)
</UL>
<P><STRONG><a name="[41]"></a>pm_rpm_s1_shadow_apply</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pm_rpm_target.o(i.pm_rpm_s1_shadow_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = pm_rpm_s1_shadow_apply &rArr; pm_smps_volt_level &rArr; pm_pwr_volt_level_alg &rArr; pm_pwr_sw_vreg_settled_check_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_volt_level_status
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_volt_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_rpm_target.o(i.pm_rpm_platform_init)
</UL>
<P><STRONG><a name="[42]"></a>pm_rpm_s1_shadow_translation</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pm_rpm_target.o(i.pm_rpm_s1_shadow_translation))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pm_rpm_s1_shadow_translation &rArr; kvp_get &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_rpm_target.o(i.pm_rpm_platform_init)
</UL>
<P><STRONG><a name="[325]"></a>pm_rpm_sleep_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pm_rpm_target.o(i.pm_rpm_sleep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pm_rpm_sleep_init &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_specific_info
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[360]"></a>pm_rpm_smps_aggregate</STRONG> (Thumb, 926 bytes, Stack size 112 bytes, pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_aggregate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pm_rpm_smps_aggregate &rArr; pm_pwr_volt_calculate_vset_celing_uv &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_int_copy
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_calculate_vset_celing_uv
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_num_clients
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_current_request
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
</UL>

<P><STRONG><a name="[44]"></a>pm_rpm_smps_apply</STRONG> (Thumb, 540 bytes, Stack size 112 bytes, pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = pm_rpm_smps_apply &rArr; pm_rpm_smps_dependency_execute &rArr; pm_rpm_smps_execute_driver &rArr; pm_rpm_smps_settle &rArr; pm_rpm_check_stepper_settle_status &rArr; pm_pwr_volt_level_stepper_done_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_settle
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_dependency_execute
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_check_ldo_bypass
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_aggregate
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_droop_detect_irq_enable
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_stepper_done_status_alg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_timetick_to_time
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_time_to_timetick
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_vreg_ok_status_alg
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_ocp_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_register_resources)
</UL>
<P><STRONG><a name="[362]"></a>pm_rpm_smps_check_ldo_bypass</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_check_ldo_bypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = pm_rpm_smps_check_ldo_bypass &rArr; pm_rpm_ldo_bypass_cb &rArr; pm_ldo_sw_mode &rArr;  pm_ldo_sw_mode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_bypass_cb
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_num_ees
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_num_clients
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_current_request
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_dependency_execute
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
</UL>

<P><STRONG><a name="[361]"></a>pm_rpm_smps_dependency_execute</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_dependency_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = pm_rpm_smps_dependency_execute &rArr; pm_rpm_smps_execute_driver &rArr; pm_rpm_smps_settle &rArr; pm_rpm_check_stepper_settle_status &rArr; pm_pwr_volt_level_stepper_done_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_check_ldo_bypass
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_issue_request
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_translation
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
</UL>

<P><STRONG><a name="[367]"></a>pm_rpm_smps_execute_driver</STRONG> (Thumb, 888 bytes, Stack size 96 bytes, pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_execute_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = pm_rpm_smps_execute_driver &rArr; pm_rpm_smps_settle &rArr; pm_rpm_check_stepper_settle_status &rArr; pm_pwr_volt_level_stepper_done_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_settle
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_droop_detect_irq_enable
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_pin_ctrl_mode_alg
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_pin_ctrl_alg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_timetick_to_time
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_time_to_timetick
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_alg
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_alg
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_switching_freq
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_sw_mode
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_quiet_mode
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_ocp_enable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_BusyWait
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_dependency_execute
</UL>

<P><STRONG><a name="[35f]"></a>pm_rpm_smps_register_resource_dependencies</STRONG> (Thumb, 442 bytes, Stack size 72 bytes, pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_register_resource_dependencies), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_enable
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_config
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_status_alg
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_status_alg
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_internal_client_type
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_aggregated_request_buffer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_client
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_register_resources
</UL>

<P><STRONG><a name="[35c]"></a>pm_rpm_smps_register_resources</STRONG> (Thumb, 310 bytes, Stack size 64 bytes, pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_register_resources), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_get_data
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_specific_info
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_malloc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_common_info
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_register_resources
</UL>

<P><STRONG><a name="[365]"></a>pm_rpm_smps_settle</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_settle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = pm_rpm_smps_settle &rArr; pm_rpm_check_stepper_settle_status &rArr; pm_pwr_volt_level_stepper_done_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_vreg_settle_status
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_stepper_settle_status
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_convert_timetick_to_time
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
</UL>

<P><STRONG><a name="[45]"></a>pm_rpm_smps_translation</STRONG> (Thumb, 494 bytes, Stack size 120 bytes, pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_translation))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = pm_rpm_smps_translation &rArr; pm_rpm_smps_dependency_execute &rArr; pm_rpm_smps_execute_driver &rArr; pm_rpm_smps_settle &rArr; pm_rpm_check_stepper_settle_status &rArr; pm_pwr_volt_level_stepper_done_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_dependency_execute
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_register_resources)
</UL>
<P><STRONG><a name="[337]"></a>pm_rpm_sw_mode_status_raw</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, pm_rpm_utilities.o(i.pm_rpm_sw_mode_status_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pm_rpm_sw_mode_status_raw &rArr; pm_ldo_sw_mode_status_raw &rArr; pm_pwr_sw_mode_status_raw_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_sw_mode_status_raw
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_sw_mode_status_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_target_cmd_config
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_cmd_rail
</UL>

<P><STRONG><a name="[338]"></a>pm_rpm_volt_level_status</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, pm_rpm_utilities.o(i.pm_rpm_volt_level_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pm_rpm_volt_level_status &rArr; pm_ldo_volt_level_status &rArr; pm_pwr_volt_level_status_alg &rArr; pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_volt_level_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_volt_level_status
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_target_cmd_config
</UL>

<P><STRONG><a name="[345]"></a>pm_rtc_driver_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pm_rtc_driver.o(i.pm_rtc_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pm_rtc_driver_init &rArr; pm_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_resource_manager_init
</UL>

<P><STRONG><a name="[346]"></a>pm_smps_calculate_vset</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, pm_smps.o(i.pm_smps_calculate_vset))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pm_smps_calculate_vset &rArr; pm_pwr_volt_calculate_vset_celing_uv &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_get_data
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_calculate_vset_celing_uv
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_calculate_vset
</UL>

<P><STRONG><a name="[344]"></a>pm_smps_driver_init</STRONG> (Thumb, 852 bytes, Stack size 64 bytes, pm_smps_driver.o(i.pm_smps_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = pm_smps_driver_init &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_malloc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte_array
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_periph_count_info
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_common_info
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_get_pmic_info
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stack_chk_fail
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_resource_manager_init
</UL>

<P><STRONG><a name="[351]"></a>pm_smps_get_data</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pm_smps_driver.o(i.pm_smps_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resources
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_switching_freq
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_sw_mode_status_raw
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_sw_mode
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_quiet_mode
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_ocp_enable
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_calculate_vset
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_is_periph_unified_reg
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_volt_level_status
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_volt_level
</UL>

<P><STRONG><a name="[35b]"></a>pm_smps_get_num_peripherals</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pm_smps_driver.o(i.pm_smps_get_num_peripherals), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_register_resources
</UL>

<P><STRONG><a name="[364]"></a>pm_smps_ocp_enable</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, pm_smps.o(i.pm_smps_ocp_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pm_smps_ocp_enable &rArr; pm_comm_write_byte_mask &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_get_data
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
</UL>

<P><STRONG><a name="[36a]"></a>pm_smps_quiet_mode</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, pm_smps.o(i.pm_smps_quiet_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pm_smps_quiet_mode &rArr; pm_comm_write_byte_mask &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_get_data
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
</UL>

<P><STRONG><a name="[368]"></a>pm_smps_sw_mode</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, pm_smps.o(i.pm_smps_sw_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pm_smps_sw_mode &rArr; pm_comm_write_byte_mask &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_get_data
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
</UL>

<P><STRONG><a name="[36b]"></a>pm_smps_sw_mode_status_raw</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pm_smps.o(i.pm_smps_sw_mode_status_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pm_smps_sw_mode_status_raw &rArr; pm_pwr_sw_mode_status_raw_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_get_data
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_mode_status_raw_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_sw_mode_status_raw
</UL>

<P><STRONG><a name="[369]"></a>pm_smps_switching_freq</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, pm_smps.o(i.pm_smps_switching_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pm_smps_switching_freq &rArr; pm_comm_write_byte_mask &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_get_data
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
</UL>

<P><STRONG><a name="[350]"></a>pm_smps_volt_level</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pm_smps.o(i.pm_smps_volt_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = pm_smps_volt_level &rArr; pm_pwr_volt_level_alg &rArr; pm_pwr_sw_vreg_settled_check_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_get_data
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_s1_shadow_apply
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_exit_sleep
</UL>

<P><STRONG><a name="[34f]"></a>pm_smps_volt_level_status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pm_smps.o(i.pm_smps_volt_level_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pm_smps_volt_level_status &rArr; pm_pwr_volt_level_status_alg &rArr; pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_get_data
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_status_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_volt_level_status
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_s1_shadow_apply
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_enter_sleep
</UL>

<P><STRONG><a name="[307]"></a>pm_target_information_get_common_info</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pm_target_information.o(i.pm_target_information_get_common_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pm_target_information_get_common_info &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resources
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resources
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_get_volt_setting_info
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_driver_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_driver_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_clk_driver_init
</UL>

<P><STRONG><a name="[32b]"></a>pm_target_information_get_periph_count_info</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pm_target_information.o(i.pm_target_information_get_periph_count_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pm_target_information_get_periph_count_info &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_smps_driver_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_driver_init
</UL>

<P><STRONG><a name="[334]"></a>pm_target_information_get_specific_info</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pm_target_information.o(i.pm_target_information_get_specific_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pm_target_information_get_specific_info &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resources
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resources
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_register_resources
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_sleep_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_proc_npa_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_cmd_init
</UL>

<P><STRONG><a name="[321]"></a>pm_target_information_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pm_target_information.o(i.pm_target_information_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pm_target_information_init &rArr; DALSYS_GetDALPropertyHandleStr &rArr; DAL_StringDeviceObjectLookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetDALPropertyHandleStr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[343]"></a>pm_target_information_read_peripheral_rev</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, pm_target_information.o(i.pm_target_information_read_peripheral_rev))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pm_target_information_read_peripheral_rev &rArr; pm_comm_read_byte_array &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte_array
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stack_chk_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_resource_manager_init
</UL>

<P><STRONG><a name="[320]"></a>pm_target_is_stub_enabled</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pm_rpm_target.o(i.pm_target_is_stub_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = pm_target_is_stub_enabled &rArr; rpm_register_resource &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_get_pmic_model
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[31f]"></a>pm_version_detect</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, pm_version.o(i.pm_version_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = pm_version_detect &rArr; pm_comm_read_byte_array &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte_array
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stack_chk_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[b4]"></a>populate_image_header</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, image_layout.o(i.populate_image_header))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[2e0]"></a>prevent_further_heap_frees</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.prevent_further_heap_frees))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>qdss_fuse_trace_access</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qdss_fuse_check.o(i.qdss_fuse_trace_access))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeQDSSFunc
</UL>

<P><STRONG><a name="[20e]"></a>qdss_imem_base</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, qdss_imem_nondal.o(i.qdss_imem_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qdss_imem_base
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chipinfo_GetVersion
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chipinfo_GetFamily
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSInit
</UL>

<P><STRONG><a name="[188]"></a>rail_id</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, railway_aggregator.o(i.rail_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rail_id
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitVoltage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_resources_ready
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_internalize_state
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_enter_hibernation
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitNPA
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_target_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_init_v2
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_init_rail_info
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_init
</UL>

<P><STRONG><a name="[370]"></a>railway_active_floor_voltage_level_vote</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, railway_aggregator.o(i.railway_active_floor_voltage_level_vote))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = railway_active_floor_voltage_level_vote &rArr; rpm_rail_level_remap &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_rail_level_remap
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
</UL>

<P><STRONG><a name="[372]"></a>railway_active_floor_vote</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, railway_aggregator.o(i.railway_active_floor_vote))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = railway_active_floor_vote &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
</UL>

<P><STRONG><a name="[373]"></a>railway_adapter_init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, railway_adapter.o(i.railway_adapter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = railway_adapter_init &rArr; rpm_shadow_resource &rArr; rpm_init_shadow(unsigned, unsigned) &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vect_create
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_shadow_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_init_v2
</UL>

<P><STRONG><a name="[376]"></a>railway_aggregated_voltage_target_uv</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, railway_aggregator.o(i.railway_aggregated_voltage_target_uv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = railway_aggregated_voltage_target_uv &rArr; rpm_rail_corner_remap &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_rail_corner_remap
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_sleep_voltages
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_do_transition_rail
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_sleep_settings
</UL>

<P><STRONG><a name="[48]"></a>railway_apply</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, railway_adapter.o(i.railway_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = railway_apply &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vect_size
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vect_set
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vect_resize
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vect_at
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_uv_vote
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_level_vote
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_active_floor_vote
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_active_floor_voltage_level_vote
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_rail
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_num_ees
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_sw_enable_vote
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_create_voter
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_corner_vote
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> railway_adapter.o(i.railway_adapter_init)
</UL>
<P><STRONG><a name="[37c]"></a>railway_corner_vote</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, railway_aggregator.o(i.railway_corner_vote))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = railway_corner_vote &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_set_mode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_init_v2
</UL>

<P><STRONG><a name="[18a]"></a>railway_create_voter</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, railway_aggregator.o(i.railway_create_voter))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = railway_create_voter &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitVoltage
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_resources_ready
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_init_v2
</UL>

<P><STRONG><a name="[d7]"></a>railway_finalize_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, railway_internal.o(i.railway_finalize_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = railway_finalize_init &rArr; rpm_set_last_transitioning_resource &rArr; SetChanger::set_last_transitioning_resource(ResourceData*) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_set_last_transitioning_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[384]"></a>railway_get_corner_voltage</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, railway_aggregator.o(i.railway_get_corner_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = railway_get_corner_voltage &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_bsp_init_rosc_target
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_enter
</UL>

<P><STRONG><a name="[195]"></a>railway_get_current_settings</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, railway_aggregator.o(i.railway_get_current_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = railway_get_current_settings &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeQDSSFunc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_enter
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_enter_hibernation
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_sleep
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_init
</UL>

<P><STRONG><a name="[385]"></a>railway_get_sleep_settings</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, railway_aggregator.o(i.railway_get_sleep_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = railway_get_sleep_settings &rArr; railway_aggregated_voltage_target_uv &rArr; rpm_rail_corner_remap &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_aggregated_voltage_target_uv
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_sleep
</UL>

<P><STRONG><a name="[386]"></a>railway_get_sleep_voltages</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, railway.o(i.railway_get_sleep_voltages))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = railway_get_sleep_voltages &rArr; railway_aggregated_voltage_target_uv &rArr; rpm_rail_corner_remap &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_aggregated_voltage_target_uv
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_enter
</UL>

<P><STRONG><a name="[bc]"></a>railway_init_early_proxy_votes</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, railway_config.o(i.railway_init_early_proxy_votes))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = railway_init_early_proxy_votes &rArr; railway_set_pmic_voltage &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_pmic_voltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>railway_init_proxies_and_pins</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, railway_config.o(i.railway_init_proxies_and_pins))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>railway_init_v2</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, railway_internal.o(i.railway_init_v2))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = railway_init_v2 &rArr; railway_adapter_init &rArr; rpm_shadow_resource &rArr; rpm_init_shadow(unsigned, unsigned) &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transitioner_init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_target_init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_sw_enable_vote
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_create_voter
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_corner_vote
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_adapter_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_id
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>railway_level_vote</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, railway_aggregator.o(i.railway_level_vote))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = railway_level_vote &rArr; rpm_rail_level_remap &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_rail_level_remap
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageRequest
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageSuspend
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageResume
</UL>

<P><STRONG><a name="[38c]"></a>railway_remap_target_specific_corners</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, railway_config.o(i.railway_remap_target_specific_corners))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_xlate
</UL>

<P><STRONG><a name="[189]"></a>railway_set_callback</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, railway.o(i.railway_set_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = railway_set_callback &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_resources_ready
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitNPA
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_target_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_init_rail_info
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_init
</UL>

<P><STRONG><a name="[38a]"></a>railway_set_corner_voltage</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, railway_aggregator.o(i.railway_set_corner_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = railway_set_corner_voltage &rArr; railway_do_set_corner_voltage &rArr;  railway_do_set_corner_voltage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_do_set_corner_voltage
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_internalize_state
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_set_corner_voltage_based_on_efuse
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
</UL>

<P><STRONG><a name="[387]"></a>railway_set_pmic_voltage</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, railway.o(i.railway_set_pmic_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = railway_set_pmic_voltage &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_issue_request
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_init_early_proxy_votes
</UL>

<P><STRONG><a name="[37e]"></a>railway_sw_enable_vote</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, railway_aggregator.o(i.railway_sw_enable_vote))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = railway_sw_enable_vote &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_init_v2
</UL>

<P><STRONG><a name="[388]"></a>railway_target_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, railway_config.o(i.railway_target_init))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_init_v2
</UL>

<P><STRONG><a name="[1ab]"></a>railway_transition_rail</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, railway.o(i.railway_transition_rail))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_do_transition_rail
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_deep_imminent
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageRequest
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_set_mode
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageSuspend
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_VoltageResume
</UL>

<P><STRONG><a name="[389]"></a>railway_transitioner_init</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, railway.o(i.railway_transitioner_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = railway_transitioner_init &rArr; rpm_create_client &rArr; resource_create_client(ResourceData*, unsigned) &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_rail_corner_remap
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_client
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_init_v2
</UL>

<P><STRONG><a name="[37d]"></a>railway_uv_vote</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, railway_aggregator.o(i.railway_uv_vote))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = railway_uv_vote &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
</UL>

<P><STRONG><a name="[49]"></a>railway_xlate</STRONG> (Thumb, 434 bytes, Stack size 48 bytes, railway_adapter.o(i.railway_xlate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = railway_xlate &rArr; kvp_get &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_eof
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_remap_target_specific_corners
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> railway_adapter.o(i.railway_adapter_init)
</UL>
<P><STRONG><a name="[38d]"></a>rbcpr_bsp_init_rosc_target</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, rbcpr_bsp.o(i.rbcpr_bsp_init_rosc_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rbcpr_bsp_init_rosc_target &rArr; railway_get_corner_voltage &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_corner_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail
</UL>

<P><STRONG><a name="[38e]"></a>rbcpr_bsp_target_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rbcpr_bsp.o(i.rbcpr_bsp_target_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rbcpr_bsp_target_init &rArr; HAL_rbcpr_mask_sensor &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_mask_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init
</UL>

<P><STRONG><a name="[38f]"></a>rbcpr_corner_index</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rbcpr.o(i.rbcpr_corner_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rbcpr_corner_index &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_set_corner_voltage_based_on_efuse
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
</UL>

<P><STRONG><a name="[390]"></a>rbcpr_corner_params</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rbcpr.o(i.rbcpr_corner_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rbcpr_corner_params &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_cpr
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pre_switch_callback
</UL>

<P><STRONG><a name="[391]"></a>rbcpr_enable_closed_loop</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, rbcpr.o(i.rbcpr_enable_closed_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rbcpr_enable_closed_loop &rArr; RBCPRTaskInit &rArr; operator new(unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBCPRTaskInit
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_up_threshold
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_set_sw_auto_cont_ack
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_prgm_gcnt_target
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_enable_int
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_enable_block
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_clear_int_all
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_corner_params
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_callback
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_current_settings
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_set_isr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail
</UL>

<P><STRONG><a name="[2bb]"></a>rbcpr_exit_sleep</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rbcpr.o(i.rbcpr_exit_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rbcpr_exit_sleep &rArr; rbcpr_prepare_cpr &rArr; rbcpr_corner_params &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_consecutive_up
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_consecutive_dn
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_set_sw_auto_cont_ack
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_enable_block
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_clear_int_all
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_cpr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[39b]"></a>rbcpr_fuses_get_fuse_value</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rbcpr_fuses.o(i.rbcpr_fuses_get_fuse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rbcpr_fuses_get_fuse_value &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_set_corner_voltage_based_on_efuse
</UL>

<P><STRONG><a name="[3a3]"></a>rbcpr_fuses_init</STRONG> (Thumb, 182 bytes, Stack size 36 bytes, rbcpr_fuses.o(i.rbcpr_fuses_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rbcpr_fuses_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init
</UL>

<P><STRONG><a name="[292]"></a>rbcpr_handler</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, rbcpr.o(i.rbcpr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = rbcpr_handler &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_set_corner_voltage
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_increment_min_counter
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_increment_max_counter
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_increment_isr_counter
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_rail
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_corner_voltage
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_corner_voltage
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_save_log
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_next_meas_en
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_interrupt_status
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_collect_coredump
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_clear_int_all
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_corner_params
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_corner_index
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBCPRTask::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[c9]"></a>rbcpr_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rbcpr.o(i.rbcpr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = rbcpr_init &rArr; rbcpr_init_rail &rArr; rbcpr_init_rail_hw &rArr; Clock_EnableClock &rArr; Clock_EnableClockEx &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_internalize_state
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_fuses_init
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_bsp_target_init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_hw_revision_specifics
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[3a5]"></a>rbcpr_init_hw_revision_specifics</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, rbcpr.o(i.rbcpr_init_hw_revision_specifics))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rbcpr_init_hw_revision_specifics
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chipinfo_GetVersion
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chipinfo_GetFamily
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init
</UL>

<P><STRONG><a name="[3a7]"></a>rbcpr_init_rail</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, rbcpr.o(i.rbcpr_init_rail))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = rbcpr_init_rail &rArr; rbcpr_init_rail_hw &rArr; Clock_EnableClock &rArr; Clock_EnableClockEx &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_bsp_init_rosc_target
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_get_rail_handle
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_set_corner_voltage_based_on_efuse
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail_hw
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_enable_closed_loop
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_id
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init
</UL>

<P><STRONG><a name="[3a9]"></a>rbcpr_init_rail_hw</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, rbcpr.o(i.rbcpr_init_rail_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = rbcpr_init_rail_hw &rArr; Clock_EnableClock &rArr; Clock_EnableClockEx &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_up_threshold
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_stepquot
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_dn_threshold
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_consecutive_up
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_consecutive_dn
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_set_count_mode
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_set_clamp_timer_interval
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_mask_sensor_all
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_mask_sensor
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_bypass_sensor_all
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_config_vlimits
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_config_timers
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetClockId
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail
</UL>

<P><STRONG><a name="[3a4]"></a>rbcpr_internalize_state</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, rbcpr_smem.o(i.rbcpr_internalize_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rbcpr_internalize_state &rArr; smem_get_addr &rArr; smem_init &rArr; smem_alloc_static &rArr; smem_ext_get_smem_size &rArr; smem_os_ext_get_smem_size &rArr; smem_map_smem_targ_info &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_corner_voltage
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_id
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_get_addr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init
</UL>

<P><STRONG><a name="[398]"></a>rbcpr_prepare_cpr</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rbcpr.o(i.rbcpr_prepare_cpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rbcpr_prepare_cpr &rArr; rbcpr_corner_params &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_up_threshold
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_set_sw_auto_cont_nack_dn
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_enable_int
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_corner_params
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_exit_sleep
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_post_switch_callback
</UL>

<P><STRONG><a name="[2b1]"></a>rbcpr_prepare_for_sleep</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, rbcpr.o(i.rbcpr_prepare_for_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rbcpr_prepare_for_sleep &rArr; RBCPRTaskCornerChange &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBCPRTaskCornerChange
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_consecutive_up
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_consecutive_dn
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_set_sw_auto_cont_nack_dn
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_set_sw_auto_cont_ack
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_next_meas_en
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_enable_int
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_enable_block
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_clear_int_all
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
</UL>

<P><STRONG><a name="[3b5]"></a>rbcpr_restart_cpr</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rbcpr.o(i.rbcpr_restart_cpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rbcpr_restart_cpr
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_consecutive_up
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_consecutive_dn
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_set_sw_auto_cont_ack
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_enable_block
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_clear_int_all
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_post_switch_callback
</UL>

<P><STRONG><a name="[3a8]"></a>rbcpr_set_corner_voltage_based_on_efuse</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, rbcpr.o(i.rbcpr_set_corner_voltage_based_on_efuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rbcpr_set_corner_voltage_based_on_efuse &rArr; rbcpr_stats_set_fuse_microvolts &rArr; rail_corner &rArr; rail_footer &rArr;  rail_corner (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_set_fuse_microvolts
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_fuses_get_fuse_value
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_corner_voltage
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_corner_index
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail
</UL>

<P><STRONG><a name="[3aa]"></a>rbcpr_settle_voltage</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, rbcpr.o(i.rbcpr_settle_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = rbcpr_settle_voltage &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_set_corner_voltage
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_rail
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_corner_voltage
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_corner_voltage
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_prgm_gcnt_target
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_poll_result
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_next_meas_en
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_enable_block
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_corner_params
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_create_voter
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_corner_vote
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_current_settings
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init_rail
</UL>

<P><STRONG><a name="[39e]"></a>rbcpr_stats_increment_isr_counter</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rbcpr_stats.o(i.rbcpr_stats_increment_isr_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rbcpr_stats_increment_isr_counter &rArr; rail_corner &rArr; rail_footer &rArr;  rail_corner (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_corner
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
</UL>

<P><STRONG><a name="[3a1]"></a>rbcpr_stats_increment_max_counter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rbcpr_stats.o(i.rbcpr_stats_increment_max_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rbcpr_stats_increment_max_counter &rArr; rail_corner &rArr; rail_footer &rArr;  rail_corner (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_corner
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
</UL>

<P><STRONG><a name="[3a0]"></a>rbcpr_stats_increment_min_counter</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rbcpr_stats.o(i.rbcpr_stats_increment_min_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rbcpr_stats_increment_min_counter &rArr; rail_corner &rArr; rail_footer &rArr;  rail_corner (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_corner
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
</UL>

<P><STRONG><a name="[3a6]"></a>rbcpr_stats_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, rbcpr_stats.o(i.rbcpr_stats_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rbcpr_stats_init &rArr; rail_footer &rArr;  rail_corner (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_footer
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_init
</UL>

<P><STRONG><a name="[39f]"></a>rbcpr_stats_set_corner_voltage</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rbcpr_stats.o(i.rbcpr_stats_set_corner_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rbcpr_stats_set_corner_voltage &rArr; rail_corner &rArr; rail_footer &rArr;  rail_corner (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_corner
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_settle_voltage
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_handler
</UL>

<P><STRONG><a name="[3b6]"></a>rbcpr_stats_set_fuse_microvolts</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rbcpr_stats.o(i.rbcpr_stats_set_fuse_microvolts))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rbcpr_stats_set_fuse_microvolts &rArr; rail_corner &rArr; rail_footer &rArr;  rail_corner (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_corner
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_set_corner_voltage_based_on_efuse
</UL>

<P><STRONG><a name="[3b4]"></a>rbcpr_stats_set_railway_settings</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rbcpr_stats.o(i.rbcpr_stats_set_railway_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rbcpr_stats_set_railway_settings &rArr; rail_footer &rArr;  rail_corner (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_footer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_post_switch_callback
</UL>

<P><STRONG><a name="[3d8]"></a>rob_get_duration</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rob.o(i.rob_get_duration))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_latency
</UL>

<P><STRONG><a name="[2be]"></a>rob_mark_duration</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rob.o(i.rob_mark_duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rob_mark_duration
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_exit
</UL>

<P><STRONG><a name="[1eb]"></a>rob_mark_event</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rob.o(i.rob_mark_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rob_mark_event
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_exit
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
</UL>

<P><STRONG><a name="[2a9]"></a>rob_set_recording_speed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rob.o(i.rob_set_recording_speed))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
</UL>

<P><STRONG><a name="[3b8]"></a>rpm_ULog_CreateNew</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, rpm_ulog.o(i.rpm_ULog_CreateNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rpm_ULog_CreateNew &rArr; strlen
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swevent_init
</UL>

<P><STRONG><a name="[3c3]"></a>rpm_ULog_Fast7WordWrite</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, rpm_ulog.o(i.rpm_ULog_Fast7WordWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rpm_ULog_Fast7WordWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_log_event_to_ram
</UL>

<P><STRONG><a name="[298]"></a>rpm_adjust_free_heap_space</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, image_layout.o(i.rpm_adjust_free_heap_space))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Realloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Alloc
</UL>

<P><STRONG><a name="[183]"></a>rpm_associate_npa_resource</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rpm_npa.o(i.rpm_associate_npa_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rpm_associate_npa_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_subsys_pc_init
</UL>

<P><STRONG><a name="[34d]"></a>rpm_create_client</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rpmserver.o(i.rpm_create_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rpm_create_client &rArr; resource_create_client(ResourceData*, unsigned) &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_create_client(ResourceData*, unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resource_dependencies
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resource_dependencies
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_register_resource_dependencies
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transitioner_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_proc_npa_init
</UL>

<P><STRONG><a name="[182]"></a>rpm_create_npa_adapter</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rpm_npa.o(i.rpm_create_npa_adapter))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = rpm_create_npa_adapter &rArr; rpm_register_resource &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_nocookie
<LI>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_subsys_pc_init
</UL>

<P><STRONG><a name="[184]"></a>rpm_create_npa_settling_adapter</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rpm_npa.o(i.rpm_create_npa_settling_adapter))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = rpm_create_npa_settling_adapter &rArr; rpm_register_resource &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_nocookie
<LI>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
</UL>

<P><STRONG><a name="[3b9]"></a>rpm_enter_hibernation</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, rpm_pcm.o(i.rpm_enter_hibernation))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = rpm_enter_hibernation &rArr; mpm_setup_chip_sleep &rArr; HAL_mpm_CfgVoltageRailSleep &rArr; HAL_mpm_CfgVoltageCommands &rArr; pm_mpm_cmd_config &rArr; pm_mpm_target_cmd_config &rArr; pm_rpm_volt_level_status &rArr; pm_ldo_volt_level_status &rArr; pm_pwr_volt_level_status_alg &rArr; pm_pwr_sw_enable_vreg_ok_status_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_All_Disable
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_rpm_pcm_c_1c7b904e__halt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmpm_prepare_for_sleep
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SetWakeUpTime
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_setup_chip_sleep
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_set_vmin_voltages
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_id
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_current_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_pcm_apply
</UL>

<P><STRONG><a name="[299]"></a>rpm_free_heap_space_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, image_layout.o(i.rpm_free_heap_space_init))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[2ce]"></a>rpm_get_aggregated_request_buffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rpmserver.o(i.rpm_get_aggregated_request_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rpm_get_aggregated_request_buffer &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_bypass_cb
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resource_dependencies
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resource_dependencies
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_register_resource_dependencies
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_apply_cb
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_update_bw
</UL>

<P><STRONG><a name="[242]"></a>rpm_get_current_request</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rpmserver.o(i.rpm_get_current_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_get_request(const ResourceData*, unsigned, unsigned*, const void**)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_aggregate
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_apply
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_check_ldo_bypass
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_aggregate
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_apply_cb
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long)
</UL>

<P><STRONG><a name="[2cd]"></a>rpm_get_num_clients</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rpmserver.o(i.rpm_get_num_clients))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rpm_get_num_clients &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_num_clients(const ResourceData*)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_aggregate
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_apply
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_check_ldo_bypass
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_aggregate
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_apply_cb
</UL>

<P><STRONG><a name="[366]"></a>rpm_get_num_ees</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rpmserver.o(i.rpm_get_num_ees))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_check_ldo_bypass
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
</UL>

<P><STRONG><a name="[3bd]"></a>rpm_halt_enter</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, lpr_definition_uber.o(i.rpm_halt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = rpm_halt_enter &rArr; svs_update_speed &rArr; svs_set_mode &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rob_set_recording_speed
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___21_lpr_definition_uber_c_ebf0609d__halt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rob_mark_event
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_update_speed
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_rpm_clock_xo
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_rpm_clock_svs_slow
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_get_switch_time
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_current_speed
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_statehandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_next_start
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_perform_lpm
</UL>

<P><STRONG><a name="[3c2]"></a>rpm_halt_exit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lpr_definition_uber.o(i.rpm_halt_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = rpm_halt_exit &rArr; system_db_statehandler &rArr; system_db_perform_op(SYSTEMDB_OP_QUEUE_ELEM*) &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rob_mark_duration
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rob_mark_event
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_statehandler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_perform_lpm
</UL>

<P><STRONG><a name="[26b]"></a>rpm_hash</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, rpm_hash.o(i.rpm_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rpm_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_resource_hash
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::estimateResource(ResourceData*)
</UL>

<P><STRONG><a name="[3c8]"></a>rpm_hash64s</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, rpm_hash.o(i.rpm_hash64s))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_insert_resource
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
</UL>

<P><STRONG><a name="[2e1]"></a>rpm_init_done</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, debug.o(i.rpm_init_done))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34a]"></a>rpm_issue_request</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, rpmserver.o(i.rpm_issue_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_dependency_execute
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_apply
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_dependency_execute
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_npa_resource_set
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_individual_rail
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_pmic_voltage
</UL>

<P><STRONG><a name="[219]"></a>rpm_log_event_to_ram</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, swevent.o(i.rpm_log_event_to_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = rpm_log_event_to_ram &rArr;  SWEVENT_log (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_ULog_Fast7WordWrite
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_heap_space
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>

<P><STRONG><a name="[2f6]"></a>rpm_npa_get_client</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rpm_npa.o(i.rpm_npa_get_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rpm_npa_get_client &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_bitwise_update_fcn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subsys_apply
</UL>

<P><STRONG><a name="[3c4]"></a>rpm_npa_get_ee_client_id</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rpm_npa.o(i.rpm_npa_get_ee_client_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rpm_npa_get_ee_client_id &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_update_xo_stats
</UL>

<P><STRONG><a name="[50]"></a>rpm_pcm_apply</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rpm_pcm.o(i.rpm_pcm_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = rpm_pcm_apply &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte_mask
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_power_collapse
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_enter_hibernation
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_pcm.o(i.rpm_pcm_init)
</UL>
<P><STRONG><a name="[d5]"></a>rpm_pcm_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rpm_pcm.o(i.rpm_pcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = rpm_pcm_init &rArr; rpm_register_resource &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>rpm_pcm_xlate</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, rpm_pcm.o(i.rpm_pcm_xlate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rpm_pcm_xlate &rArr; kvp_get &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_eof
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_pcm.o(i.rpm_pcm_init)
</UL>
<P><STRONG><a name="[377]"></a>rpm_rail_corner_remap</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, railway_adapter.o(i.rpm_rail_corner_remap))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rpm_rail_corner_remap &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_aggregated_voltage_target_uv
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_quantize_constrained_target
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_do_transition_rail
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transitioner_init
</UL>

<P><STRONG><a name="[371]"></a>rpm_rail_level_remap</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, railway_adapter.o(i.rpm_rail_level_remap))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rpm_rail_level_remap &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_level_vote
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_active_floor_voltage_level_vote
</UL>

<P><STRONG><a name="[34c]"></a>rpm_register_internal_client_type</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rpmserver.o(i.rpm_register_internal_client_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rpm_register_internal_client_type &rArr; resource_class_add_client_type(ResourceClassData*, unsigned, unsigned) &rArr; operator new(unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_class_add_client_type(ResourceClassData*, unsigned, unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resource_dependencies
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resource_dependencies
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_register_resource_dependencies
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_proc_npa_init
</UL>

<P><STRONG><a name="[2d0]"></a>rpm_register_named_resource</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, rpmserver.o(i.rpm_register_named_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_insert_resource
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init(ResourceData*, unsigned, unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_slaves_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_masters_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_master_latency_init
</UL>

<P><STRONG><a name="[256]"></a>rpm_register_resource</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, rpmserver.o(i.rpm_register_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rpm_register_resource &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_named_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_register_resources
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_register_resources
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_clk_buffer_register_resources
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_npa_adapter
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_test_resource_init()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_is_stub_enabled
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_platform_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_npa_settling_adapter
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_spdm_req_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swevent_qdss_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_pcm_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle_init
</UL>

<P><STRONG><a name="[235]"></a>rpm_resource_hash</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, rpm_hash.o(i.rpm_resource_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rpm_resource_hash &rArr; rpm_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::cpu_speed_change(unsigned, unsigned)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_init_shadow(unsigned, unsigned)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_init(ResourceData*, unsigned, unsigned)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EstimateCache::observe(unsigned, unsigned, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[c7]"></a>rpm_resources_config_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rpm_resources_config.o(i.rpm_resources_config_init))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>rpm_send_init_proxy_vote</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, rpmserver.o(i.rpm_send_init_proxy_vote))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = rpm_send_init_proxy_vote &rArr; resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetSPMStates
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>rpm_send_init_proxy_vote_sleep</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, rpmserver.o(i.rpm_send_init_proxy_vote_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = rpm_send_init_proxy_vote_sleep &rArr; resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetSPMStates
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>rpm_server_init_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, debug.o(i.rpm_server_init_done))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>rpm_set_changer_common_init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, rpm_set_changer.o(i.rpm_set_changer_common_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rpm_set_changer_common_init &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[383]"></a>rpm_set_last_transitioning_resource</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rpmserver.o(i.rpm_set_last_transitioning_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rpm_set_last_transitioning_resource &rArr; SetChanger::set_last_transitioning_resource(ResourceData*) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::set_last_transitioning_resource(ResourceData*)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_finalize_init
</UL>

<P><STRONG><a name="[d3]"></a>rpm_settling_timer_init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, rpm_settling_timer.o(i.rpm_settling_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rpm_settling_timer_init &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_set_isr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_configure
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[375]"></a>rpm_shadow_resource</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, rpmserver.o(i.rpm_shadow_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rpm_shadow_resource &rArr; rpm_init_shadow(unsigned, unsigned) &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_init_shadow(unsigned, unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_lookup_resource
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_adapter_init
</UL>

<P><STRONG><a name="[3c6]"></a>rpm_spm_init</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, rpm_spm_handshake.o(i.rpm_spm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = rpm_spm_init &rArr; operator new[] (unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_set_isr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_init
</UL>

<P><STRONG><a name="[288]"></a>rpm_spm_soft_transition</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rpm_spm_handshake.o(i.rpm_spm_soft_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rpm_spm_soft_transition &rArr; interrupt_soft_trigger &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_soft_trigger
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV1(RPMMessageHeaderV1*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV0(unsigned)
</UL>

<P><STRONG><a name="[24f]"></a>rpm_spm_state_machine</STRONG> (Thumb, 536 bytes, Stack size 104 bytes, rpm_spm_handshake.o(i.rpm_spm_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = rpm_spm_state_machine &rArr; Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type) &rArr; kvp_put &rArr; bytearray_put &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_vmpm
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::preempt()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theSchedule()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::enqueue(rpm_set_type, unsigned long long)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_low_isr()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_bringup_isr()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[269]"></a>rpm_spm_trigger_wakeup_int</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rpm_spm_handshake.o(i.rpm_spm_trigger_wakeup_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rpm_spm_trigger_wakeup_int &rArr; interrupt_soft_trigger &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_soft_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[b7]"></a>rpm_subsys_pc_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rpm_subsys_state.o(i.rpm_subsys_pc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = rpm_subsys_pc_init &rArr; npa_define_node_cb &rArr; npa_define_node_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_npa_adapter
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_associate_npa_resource
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>rpm_swevent_xlate</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, swevent.o(i.rpm_swevent_xlate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rpm_swevent_xlate &rArr; kvp_get &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_eof
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swevent.o(i.swevent_qdss_init)
</UL>
<P><STRONG><a name="[c5]"></a>rpmserver_init</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, rpmserver.o(i.rpmserver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = rpmserver_init &rArr; rpm_test_resource_init() &rArr; rpm_register_resource &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_master_stats
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::Handler(unsigned, unsigned, unsigned char)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::init()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_test_resource_init()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theSchedule()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::SetChanger(unsigned, Handler*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[3c5]"></a>rpmserver_insert_resource</STRONG> (Thumb, 1264 bytes, Stack size 112 bytes, rpm_lookup.o(i.rpmserver_insert_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_hash64s
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_named_resource
</UL>

<P><STRONG><a name="[263]"></a>rpmserver_lookup_resource</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rpm_lookup.o(i.rpmserver_lookup_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rpmserver_lookup_resource
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_hash64s
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV1(RPMMessageHeaderV1*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV0(unsigned)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_shadow_resource
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_named_resource
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_internal_client_type
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_issue_request
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_aggregated_request_buffer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_create_client
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processNAS(volatile bool&, unsigned long long&)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_set_last_transitioning_resource
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_set_changer_common_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_send_init_proxy_vote_sleep
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_send_init_proxy_vote
</UL>

<P><STRONG><a name="[3c9]"></a>sched_cpu_speed_change</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rpm_sched.o(i.sched_cpu_speed_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sched_cpu_speed_change &rArr; theSchedule() &rArr; __aeabi_atexit &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::cpu_speed_change(unsigned, unsigned)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theSchedule()
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_resources_ready
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_prechange_cb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_postchange_cb
</UL>

<P><STRONG><a name="[3ca]"></a>sched_cpu_speed_change_ok</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, rpm_sched.o(i.sched_cpu_speed_change_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sched_cpu_speed_change_ok &rArr; theSchedule() &rArr; __aeabi_atexit &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::cpu_speed_change(unsigned, unsigned)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theSchedule()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_update_speed
</UL>

<P><STRONG><a name="[3cb]"></a>sched_cpu_speed_for_fast</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rpm_sched.o(i.sched_cpu_speed_for_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sched_cpu_speed_for_fast &rArr; theSchedule() &rArr; __aeabi_atexit &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::cpu_speed_change(unsigned, unsigned)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theSchedule()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_speed_check_and_update
</UL>

<P><STRONG><a name="[3cc]"></a>sched_get_next_duration</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rpm_sched.o(i.sched_get_next_duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sched_get_next_duration &rArr; theSchedule() &rArr; __aeabi_atexit &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::get_next_duration(unsigned)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theSchedule()
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_update_speed
</UL>

<P><STRONG><a name="[2ab]"></a>sched_get_next_required_start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rpm_sched.o(i.sched_get_next_required_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sched_get_next_required_start &rArr; theSchedule() &rArr; __aeabi_atexit &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theSchedule()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
</UL>

<P><STRONG><a name="[2e6]"></a>sched_get_next_start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rpm_sched.o(i.sched_get_next_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sched_get_next_start &rArr; theSchedule() &rArr; __aeabi_atexit &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theSchedule()
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_update_speed
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_perform_lpm
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3cd]"></a>sched_get_next_workload</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, rpm_sched.o(i.sched_get_next_workload))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sched_get_next_workload &rArr; theSchedule() &rArr; __aeabi_atexit &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theSchedule()
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_speed_check_and_update
</UL>

<P><STRONG><a name="[2e3]"></a>sched_run</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rpm_sched.o(i.sched_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = sched_run &rArr; Sched::run() &rArr; svs_update_speed &rArr; svs_set_mode &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theSchedule()
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>sec_wdog_bark_isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dog.o(i.sec_wdog_bark_isr))
<BR>[Address Reference Count : 1]<UL><LI> dog.o(i.sec_wdog_init)
</UL>
<P><STRONG><a name="[3ce]"></a>sec_wdog_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dog.o(i.sec_wdog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sec_wdog_init &rArr; interrupt_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_set_isr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_modem_init
</UL>

<P><STRONG><a name="[d9]"></a>send_apss_vmpm_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vmpm_target.o(i.send_apss_vmpm_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> vmpm_target.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>send_apss_wakeup_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vmpm_target.o(i.send_apss_wakeup_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> vmpm_target.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>send_mpss_vmpm_interrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vmpm_target.o(i.send_mpss_vmpm_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> vmpm_target.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>send_mpss_wakeup_interrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vmpm_target.o(i.send_mpss_wakeup_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> vmpm_target.o(.constdata)
</UL>
<P><STRONG><a name="[3cf]"></a>set_vdd_dig_sleep_voltage</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sleep_target_config.o(i.set_vdd_dig_sleep_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
</UL>

<P><STRONG><a name="[3d0]"></a>set_vdd_mem_sleep_voltage</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sleep_target_config.o(i.set_vdd_mem_sleep_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
</UL>

<P><STRONG><a name="[284]"></a>settling_timer_register</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, rpm_settling_timer.o(i.settling_timer_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = settling_timer_register &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[38b]"></a>sleep_deep_imminent</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sleep_perform.o(i.sleep_deep_imminent))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sleep_deep_imminent &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_query
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_rail
</UL>

<P><STRONG><a name="[cc]"></a>sleep_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sleep_perform.o(i.sleep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = sleep_init &rArr; mpm_init_xtal &rArr; HAL_mpm_Init_Xtal_Latency &rArr; pm_app_clk_get_xo_warmup_time &rArr; pm_clk_sw_enable_status &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_corner_voltage
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_modes_init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vdd_mem_sleep_voltage
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vdd_dig_sleep_voltage
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_query_handle
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_init_xtal
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_id
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>sleep_is_any_interrupt_pending</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lpr_definition_uber.o(i.sleep_is_any_interrupt_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sleep_is_any_interrupt_pending &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_SWDone
</UL>

<P><STRONG><a name="[3d1]"></a>sleep_modes_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lpr_definition_uber.o(i.sleep_modes_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sleep_modes_init &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetPowerDomainId
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_configure
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
</UL>

<P><STRONG><a name="[2e7]"></a>sleep_perform_lpm</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, sleep_perform.o(i.sleep_perform_lpm))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = sleep_perform_lpm &rArr; vdd_min_enter &rArr; deep_sleep_enter &rArr; Clock_ProcessorSleep &rArr; Clock_WaitForBIMCPowerCollapse &rArr; Clock_BIMCIsRestoreDone &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_exit
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_enter
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_exit
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_query
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_any_interrupt_pending
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_next_start
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>sleep_update_xo_stats</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lpr_definition_uber.o(i.sleep_update_xo_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sleep_update_xo_stats &rArr; rpm_npa_get_ee_client_id &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_get_ee_client_id
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_update_master_xo_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeCXOFunc
</UL>

<P><STRONG><a name="[2d5]"></a>strlcpy</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, strlcpy.o(i.strlcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strlcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_string_copy
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_ULog_CreateNew
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_version_populate_version
</UL>

<P><STRONG><a name="[7d]"></a>subsys_apply</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rpm_subsys_state.o(i.subsys_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = subsys_apply &rArr; rpm_npa_get_client &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_get_client
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_subsys_state.o(.data)
</UL>
<P><STRONG><a name="[26f]"></a>svs_current_speed</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, svs.o(i.svs_current_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svs_current_speed &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_latency
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EstimateCache::observe(unsigned, unsigned, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[270]"></a>svs_get_freq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, svs.o(i.svs_get_freq))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EstimateCache::observe(unsigned, unsigned, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[2ac]"></a>svs_get_svs_switch_to_fast</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, svs.o(i.svs_get_svs_switch_to_fast))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_exit
</UL>

<P><STRONG><a name="[2ad]"></a>svs_get_switch_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, svs.o(i.svs_get_switch_time))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
</UL>

<P><STRONG><a name="[ca]"></a>svs_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, svs.o(i.svs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = svs_init &rArr; npa_resources_available_cb &rArr; npa_resources_available_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resources_available_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[3c0]"></a>svs_rpm_clock_svs_slow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, svs.o(i.svs_rpm_clock_svs_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svs_rpm_clock_svs_slow &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
</UL>

<P><STRONG><a name="[3be]"></a>svs_rpm_clock_xo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, svs.o(i.svs_rpm_clock_xo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svs_rpm_clock_xo &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
</UL>

<P><STRONG><a name="[3d4]"></a>svs_set_mode</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, svs.o(i.svs_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = svs_set_mode &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_rail
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_corner_vote
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_update_speed
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_resources_ready
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_prechange_cb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_postchange_cb
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_exit
</UL>

<P><STRONG><a name="[3d7]"></a>svs_set_svs_switch_to_fast</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, svs.o(i.svs_set_svs_switch_to_fast))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_exit
</UL>

<P><STRONG><a name="[2aa]"></a>svs_speed_check_and_update</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, svs.o(i.svs_speed_check_and_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = svs_speed_check_and_update &rArr; sched_get_next_workload &rArr; theSchedule() &rArr; __aeabi_atexit &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_next_workload
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_for_fast
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
</UL>

<P><STRONG><a name="[27d]"></a>svs_update_speed</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, svs.o(i.svs_update_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = svs_update_speed &rArr; svs_set_mode &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_next_duration
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_change_ok
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_set_mode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_get_next_start
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
</UL>

<P><STRONG><a name="[2de]"></a>swevent_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, swevent.o(i.swevent_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = swevent_init &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_ULog_CreateNew
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>swevent_qdss_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, swevent.o(i.swevent_qdss_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = swevent_qdss_init &rArr; rpm_register_resource &rArr; rpm_register_named_resource &rArr; rpmserver_insert_resource &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_register_resource
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSAllocPort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[23d]"></a>system_db_clearall</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, system_db_rpm.o(i.system_db_clearall))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = system_db_clearall &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_smd_cb(unsigned, void*, unsigned, void*)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_addop(unsigned long*)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_init
</UL>

<P><STRONG><a name="[d1]"></a>system_db_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_db_rpm.o(i.system_db_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = system_db_init &rArr; rpmserver_register_handler(rpm_service_type, void(*)(unsigned, void*, unsigned, void*), void*) &rArr; operator new(unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_clearall
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_register_handler(rpm_service_type, void(*)(unsigned, void*, unsigned, void*), void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[3c1]"></a>system_db_statehandler</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, system_db_rpm.o(i.system_db_statehandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = system_db_statehandler &rArr; system_db_perform_op(SYSTEMDB_OP_QUEUE_ELEM*) &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_perform_op(SYSTEMDB_OP_QUEUE_ELEM*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_exit
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_enter
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_exit
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
</UL>

<P><STRONG><a name="[2dd]"></a>time_service_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, time_service.o(i.time_service_init))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22c]"></a>timetick_get64</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timetick.o(i.timetick_get64))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_isr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetTimeTick
</UL>

<P><STRONG><a name="[205]"></a>timetick_get_safe</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timetick.o(i.timetick_get_safe))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_save_log
</UL>

<P><STRONG><a name="[22b]"></a>timetick_init</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, timetick.o(i.timetick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = timetick_init &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetDALPropertyHandle
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetTimeTick
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>tiny_modem_abort_isr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, exceptions.o(i.tiny_modem_abort_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tiny_modem_abort_isr &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exceptions.o(i.tiny_modem_init)
</UL>
<P><STRONG><a name="[2df]"></a>tiny_modem_init</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, exceptions.o(i.tiny_modem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tiny_modem_init &rArr; sec_wdog_init &rArr; interrupt_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_wdog_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>tz_abort_isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, exceptions.o(i.tz_abort_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tz_abort_isr &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exceptions.o(.ARM.__AT_0x00090200)
</UL>
<P><STRONG><a name="[157]"></a>unlock_ints</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, exceptions.o(i.unlock_ints))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_execute_driver
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_ldo_apply
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_vreg_settle_status
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_check_stepper_settle_status
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsClockEnabled
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClockEx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisablePowerDomain
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueGet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolInit
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_npa_apply(rpm_application_info*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_query_npa_settling(rpm_application_info*)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_high_isr()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_shutdown_low_isr()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_bringup_isr()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processMessage(volatile bool&, unsigned long long&, RPMMessageHeader*, bool)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV1(RPMMessageHeaderV1*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::loadMessageV0(unsigned)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBCPRTask::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rob_mark_event
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_lock_cs_unlock
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_malloc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_isr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle_apply
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_log_event_to_ram
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_for_fast
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_change_ok
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_update_speed
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_set_mode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_update_master_xo_stats
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_calc_xo_accumulation
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_set_corner_voltage
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_LogState
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_halt_enter
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::execute(volatile bool&, unsigned long long)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::run()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::get_next_duration(unsigned)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::cpu_speed_change(unsigned, unsigned)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sched::schedule_task(Task&, ScheduleType)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpmserver_register_handler(rpm_service_type, void(*)(unsigned, void*, unsigned, void*), void*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settling_timer_register
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settling_timer_isr()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suppressible::hasImmediateWork() const
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suppressible::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_state_machine
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processNAS(volatile bool&, unsigned long long&)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::clear_deadline()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transitionResource(ResourceData*, void*, unsigned long long*)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_register_isr
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_free
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSSTMSetTimestampFreq
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueuePut
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueCreate
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolFree
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolAlloc
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resource_available_cb
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_limit_max_request
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_cb
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_assign_resource_state
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_terminate_request
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_new_event
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_link_resource
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_sync_request
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_continuation
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_cleanup_placeholders
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_async_event_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetClockFrequency
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsClockOn
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnablePowerDomain
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDR_SYNC_UNLOCK
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Realloc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Alloc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zqcal_task_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_perform_lpm
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_set_bite_time
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_set_bark_time
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_kick
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dog_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c5]"></a>update_dsat_context</STRONG> (Thumb, 318 bytes, Stack size 96 bytes, icb_rpm_dsat.o(i.update_dsat_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = update_dsat_context &rArr; HAL_bimc_SetDangerBandwidth &rArr; bimc_SetDangerBandwidth &rArr; bimc_CalculateBKEParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetDangerPolicy
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetDangerMode
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_bimc_SetDangerBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_dsat_callback
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icb_dsat_init
</UL>

<P><STRONG><a name="[3d2]"></a>vdd_min_enter</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, lpr_definition_uber.o(i.vdd_min_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = vdd_min_enter &rArr; deep_sleep_enter &rArr; Clock_ProcessorSleep &rArr; Clock_WaitForBIMCPowerCollapse &rArr; Clock_BIMCIsRestoreDone &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_latency
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_sleep_voltages
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_corner_voltage
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_statehandler
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_set_vmin_voltages
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_config_freeze_ios
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_current_settings
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_perform_lpm
</UL>

<P><STRONG><a name="[3d3]"></a>vdd_min_exit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lpr_definition_uber.o(i.vdd_min_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = vdd_min_exit &rArr; deep_sleep_exit &rArr; Clock_ProcessorRestore &rArr; Clock_SetBIMCPowerRestore &rArr; Clock_BIMCRestore &rArr; Clock_BIMCRestoring &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_set_svs_switch_to_fast
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_set_mode
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_get_svs_switch_to_fast
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_db_statehandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_perform_lpm
</UL>

<P><STRONG><a name="[3d6]"></a>vdd_min_latency</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lpr_definition_uber.o(i.vdd_min_latency))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = vdd_min_latency &rArr; mpm_init_xtal &rArr; HAL_mpm_Init_Xtal_Latency &rArr; pm_app_clk_get_xo_warmup_time &rArr; pm_clk_sw_enable_status &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rob_get_duration
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_current_speed
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_init_xtal
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_deep_sleep_exit_latency
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_deep_sleep_enter_latency
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdd_min_enter
</UL>

<P><STRONG><a name="[37a]"></a>vect_at</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vect.o(i.vect_at))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
</UL>

<P><STRONG><a name="[374]"></a>vect_create</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vect.o(i.vect_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = vect_create &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_adapter_init
</UL>

<P><STRONG><a name="[379]"></a>vect_resize</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vect.o(i.vect_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = vect_resize &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
</UL>

<P><STRONG><a name="[37b]"></a>vect_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vect.o(i.vect_set))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
</UL>

<P><STRONG><a name="[378]"></a>vect_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vect.o(i.vect_size))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_apply
</UL>

<P><STRONG><a name="[c4]"></a>version_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, version_init.o(i.version_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = version_init &rArr; image_version_populate_version &rArr; smem_get_addr &rArr; smem_init &rArr; smem_alloc_static &rArr; smem_ext_get_smem_size &rArr; smem_os_ext_get_smem_size &rArr; smem_map_smem_targ_info &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_version_populate_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>vmpm_init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, vmpm.o(i.vmpm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vmpm_init &rArr; HAL_mpmint_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_Init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_GetNumberMasks
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_set_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>vmpm_isr</STRONG> (Thumb, 522 bytes, Stack size 128 bytes, vmpm.o(i.vmpm_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = vmpm_isr &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_SetTrigger
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_IsGpio
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_GetNumberMasks
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_GetIndex
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_GetEnumNumber
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_Enable
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_Disable
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupDirConn
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> vmpm.o(i.vmpm_init)
<LI> exceptions.o(.ARM.__AT_0x00090200)
</UL>
<P><STRONG><a name="[2ae]"></a>vmpm_prepare_for_sleep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vmpm.o(i.vmpm_prepare_for_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vmpm_prepare_for_sleep &rArr; HAL_mpmint_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_Enable
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_All_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_enter_hibernation
</UL>

<P><STRONG><a name="[2bc]"></a>vmpm_propogate_interrupts</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, vmpm.o(i.vmpm_propogate_interrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vmpm_propogate_interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpmint_GetNumberMasks
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpm_GetWakeupInts
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[d2]"></a>zqcal_task_init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, rpm_suppressible.o(i.zqcal_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = zqcal_task_init &rArr; Task::schedule_me(ScheduleType) &rArr; Sched::schedule_task(Task&, ScheduleType) &rArr; TaskHeap::insert(Task*) &rArr; operator new[] (unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::Task__sub_object(unsigned char, unsigned char)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::schedule_me(ScheduleType)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[3fa]"></a>DDR_SYNC_INIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ddr_sync.o(i.DDR_SYNC_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_init
</UL>

<P><STRONG><a name="[3e2]"></a>DDR_SYNC_LOCK</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddr_sync.o(i.DDR_SYNC_LOCK))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_self_refresh_all
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_self_refresh_all
</UL>

<P><STRONG><a name="[3e3]"></a>DDR_SYNC_UNLOCK</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddr_sync.o(i.DDR_SYNC_UNLOCK))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_self_refresh_all
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_self_refresh_all
</UL>

<P><STRONG><a name="[400]"></a>HAL_SDRAM_BIMC_Update_Clock_Period</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, BIMC_v1.o(i.HAL_SDRAM_BIMC_Update_Clock_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SDRAM_BIMC_Update_Clock_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_pre_clock_switch
</UL>

<P><STRONG><a name="[5d]"></a>HAL_SDRAM_DDR_Wait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, BIMC_v1.o(i.HAL_SDRAM_DDR_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SDRAM_DDR_Wait &rArr; busywait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busywait
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_power_collapse
</UL>
<BR>[Address Reference Count : 3]<UL><LI> ddr_target.o(i.ddr_exit_power_collapse)
<LI> ddr_drivers.o(i.ddr_enter_self_refresh_all)
<LI> ddr_drivers.o(i.ddr_exit_self_refresh_all)
</UL>
<P><STRONG><a name="[3fd]"></a>HAL_SDRAM_DPE_Post_Clock_Switch</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, BIMC_DPE_v1.o(i.HAL_SDRAM_DPE_Post_Clock_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_post_clock_switch
</UL>

<P><STRONG><a name="[3e4]"></a>HAL_SDRAM_DPE_Pre_Clock_Switch</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, BIMC_DPE_v1.o(i.HAL_SDRAM_DPE_Pre_Clock_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDRAM_DPE_Pre_Clock_Switch &rArr; HAL_SDRAM_DPE_Update_Latency
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_DPE_Update_Latency
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_pre_clock_switch
</UL>

<P><STRONG><a name="[3e5]"></a>HAL_SDRAM_DPE_Update_Latency</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, BIMC_DPE_v1.o(i.HAL_SDRAM_DPE_Update_Latency))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SDRAM_DPE_Update_Latency
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_WL
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_RL
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_DPE_Pre_Clock_Switch
</UL>

<P><STRONG><a name="[3e8]"></a>HAL_SDRAM_Enter_Self_Refresh</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, BIMC_v1.o(i.HAL_SDRAM_Enter_Self_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_SDRAM_Enter_Self_Refresh &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SHKE_Enter_Self_Refresh
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SHKE_Disable_HW_Self_Refresh
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SCMO_Rank_Disable
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Disable_IO_Cal
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_power_collapse
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_self_refresh_all
</UL>

<P><STRONG><a name="[3ed]"></a>HAL_SDRAM_Exit_Self_Refresh</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, BIMC_v1.o(i.HAL_SDRAM_Exit_Self_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_SDRAM_Exit_Self_Refresh &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SHKE_Exit_Self_Refresh
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SHKE_Enable_HW_Self_Refresh
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SCMO_Rank_Enable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Manual_IO_Cal
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Enable_IO_Cal
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_self_refresh_all
</UL>

<P><STRONG><a name="[3f4]"></a>HAL_SDRAM_PHY_Disable_CDC_Cal</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, DDR_PHY.o(i.HAL_SDRAM_PHY_Disable_CDC_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_PHY_Disable_CDC_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Manual_CDC_Cal
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Enable_Rapid_CDC_Cal
</UL>

<P><STRONG><a name="[3eb]"></a>HAL_SDRAM_PHY_Disable_IO_Cal</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, DDR_PHY.o(i.HAL_SDRAM_PHY_Disable_IO_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_PHY_Disable_IO_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Enter_Self_Refresh
</UL>

<P><STRONG><a name="[3fe]"></a>HAL_SDRAM_PHY_Disable_Rapid_CDC_Cal</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, DDR_PHY.o(i.HAL_SDRAM_PHY_Disable_Rapid_CDC_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SDRAM_PHY_Disable_Rapid_CDC_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_post_vddmx_switch
</UL>

<P><STRONG><a name="[3f1]"></a>HAL_SDRAM_PHY_Enable_IO_Cal</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, DDR_PHY.o(i.HAL_SDRAM_PHY_Enable_IO_Cal))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Exit_Self_Refresh
</UL>

<P><STRONG><a name="[3f3]"></a>HAL_SDRAM_PHY_Enable_Rapid_CDC_Cal</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, DDR_PHY.o(i.HAL_SDRAM_PHY_Enable_Rapid_CDC_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SDRAM_PHY_Enable_Rapid_CDC_Cal &rArr; HAL_SDRAM_PHY_Disable_CDC_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Disable_CDC_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_pre_vddmx_switch
</UL>

<P><STRONG><a name="[3f5]"></a>HAL_SDRAM_PHY_Manual_CDC_Cal</STRONG> (Thumb, 280 bytes, Stack size 36 bytes, DDR_PHY.o(i.HAL_SDRAM_PHY_Manual_CDC_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_SDRAM_PHY_Manual_CDC_Cal &rArr; HAL_SDRAM_PHY_Disable_CDC_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Disable_CDC_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_pre_vddmx_switch
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_post_vddmx_switch
</UL>

<P><STRONG><a name="[3ef]"></a>HAL_SDRAM_PHY_Manual_IO_Cal</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, DDR_PHY.o(i.HAL_SDRAM_PHY_Manual_IO_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SDRAM_PHY_Manual_IO_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Exit_Self_Refresh
</UL>

<P><STRONG><a name="[3ff]"></a>HAL_SDRAM_PHY_Update_CDC_Config</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, DDR_PHY.o(i.HAL_SDRAM_PHY_Update_CDC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SDRAM_PHY_Update_CDC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_pre_vddmx_switch
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_post_vddmx_switch
</UL>

<P><STRONG><a name="[3e6]"></a>HAL_SDRAM_RL</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, BIMC_v1.o(i.HAL_SDRAM_RL))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_DPE_Update_Latency
</UL>

<P><STRONG><a name="[3e9]"></a>HAL_SDRAM_SCMO_Rank_Disable</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, BIMC_SCMO_v1.o(i.HAL_SDRAM_SCMO_Rank_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Enter_Self_Refresh
</UL>

<P><STRONG><a name="[3ee]"></a>HAL_SDRAM_SCMO_Rank_Enable</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, BIMC_SCMO_v1.o(i.HAL_SDRAM_SCMO_Rank_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Exit_Self_Refresh
</UL>

<P><STRONG><a name="[3ea]"></a>HAL_SDRAM_SHKE_Disable_HW_Self_Refresh</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, BIMC_SHKE_v1.o(i.HAL_SDRAM_SHKE_Disable_HW_Self_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Enter_Self_Refresh
</UL>

<P><STRONG><a name="[3f2]"></a>HAL_SDRAM_SHKE_Enable_HW_Self_Refresh</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, BIMC_SHKE_v1.o(i.HAL_SDRAM_SHKE_Enable_HW_Self_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Exit_Self_Refresh
</UL>

<P><STRONG><a name="[3ec]"></a>HAL_SDRAM_SHKE_Enter_Self_Refresh</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, BIMC_SHKE_v1.o(i.HAL_SDRAM_SHKE_Enter_Self_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Enter_Self_Refresh
</UL>

<P><STRONG><a name="[3f0]"></a>HAL_SDRAM_SHKE_Exit_Self_Refresh</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, BIMC_SHKE_v1.o(i.HAL_SDRAM_SHKE_Exit_Self_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Exit_Self_Refresh
</UL>

<P><STRONG><a name="[3e7]"></a>HAL_SDRAM_WL</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, BIMC_v1.o(i.HAL_SDRAM_WL))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_DPE_Update_Latency
</UL>

<P><STRONG><a name="[5e]"></a>ddr_divide_func</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, BIMC_v1.o(i.ddr_divide_func))
<BR>[Address Reference Count : 1]<UL><LI> ddr_target.o(i.ddr_pre_clock_switch)
</UL>
<P><STRONG><a name="[140]"></a>ddr_enter_power_collapse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ddr_target.o(i.ddr_enter_power_collapse))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ddr_enter_power_collapse &rArr; ddr_enter_self_refresh_all &rArr; HAL_SDRAM_Enter_Self_Refresh &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_config_ebi1_freeze_io
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_self_refresh_all
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_pcm_apply
</UL>

<P><STRONG><a name="[3f6]"></a>ddr_enter_self_refresh_all</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ddr_drivers.o(i.ddr_enter_self_refresh_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ddr_enter_self_refresh_all &rArr; HAL_SDRAM_Enter_Self_Refresh &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSDDRTraceDisable
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Enter_Self_Refresh
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDR_SYNC_UNLOCK
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDR_SYNC_LOCK
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsQDSSOn
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_power_collapse
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_pre_xo_shutdown
</UL>

<P><STRONG><a name="[2b2]"></a>ddr_enter_sleep</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ddr_drivers.o(i.ddr_enter_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ddr_enter_sleep &rArr; railway_get_sleep_settings &rArr; railway_aggregated_voltage_target_uv &rArr; rpm_rail_corner_remap &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_sleep_settings
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_pre_vddmx_switch
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_post_vddmx_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_enter
</UL>

<P><STRONG><a name="[136]"></a>ddr_exit_power_collapse</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ddr_target.o(i.ddr_exit_power_collapse))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ddr_exit_power_collapse &rArr; ddr_exit_self_refresh_all &rArr; HAL_SDRAM_Exit_Self_Refresh &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpm_config_ebi1_freeze_io
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Enter_Self_Refresh
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_DDR_Wait
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_self_refresh_all
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
</UL>

<P><STRONG><a name="[3f8]"></a>ddr_exit_self_refresh_all</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ddr_drivers.o(i.ddr_exit_self_refresh_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ddr_exit_self_refresh_all &rArr; HAL_SDRAM_Exit_Self_Refresh &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSDDRTraceEnable
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Exit_Self_Refresh
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDR_SYNC_UNLOCK
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDR_SYNC_LOCK
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsQDSSOn
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_post_xo_shutdown
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_power_collapse
</UL>

<P><STRONG><a name="[2ba]"></a>ddr_exit_sleep</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ddr_drivers.o(i.ddr_exit_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ddr_exit_sleep &rArr; railway_get_current_settings &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_current_settings
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_pre_vddmx_switch
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_post_vddmx_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deep_sleep_exit
</UL>

<P><STRONG><a name="[3fb]"></a>ddr_get_params</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ddr_params.o(i.ddr_get_params))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_init
</UL>

<P><STRONG><a name="[bd]"></a>ddr_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ddr_drivers.o(i.ddr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ddr_init &rArr; ddr_target_init &rArr; railway_set_callback &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_target_init
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_get_params
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDR_SYNC_INIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>ddr_post_clock_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ddr_target.o(i.ddr_post_clock_switch))
<BR><BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_DPE_Post_Clock_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency_vddmin
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency
</UL>

<P><STRONG><a name="[60]"></a>ddr_post_vddcx_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ddr_target.o(i.ddr_post_vddcx_switch))
<BR>[Address Reference Count : 1]<UL><LI> ddr_target.o(i.ddr_target_init)
</UL>
<P><STRONG><a name="[62]"></a>ddr_post_vddmx_switch</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ddr_target.o(i.ddr_post_vddmx_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ddr_post_vddmx_switch &rArr; HAL_SDRAM_PHY_Manual_CDC_Cal &rArr; HAL_SDRAM_PHY_Disable_CDC_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Update_CDC_Config
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Manual_CDC_Cal
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Disable_Rapid_CDC_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_sleep
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ddr_target.o(i.ddr_target_init)
</UL>
<P><STRONG><a name="[138]"></a>ddr_post_xo_shutdown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddr_target.o(i.ddr_post_xo_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ddr_post_xo_shutdown &rArr; ddr_exit_self_refresh_all &rArr; HAL_SDRAM_Exit_Self_Refresh &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_self_refresh_all
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCRestoring
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
</UL>

<P><STRONG><a name="[147]"></a>ddr_pre_clock_switch</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ddr_target.o(i.ddr_pre_clock_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ddr_pre_clock_switch &rArr; HAL_SDRAM_DPE_Pre_Clock_Switch &rArr; HAL_SDRAM_DPE_Update_Latency
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_DPE_Pre_Clock_Switch
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_BIMC_Update_Clock_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency_vddmin
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency
</UL>

<P><STRONG><a name="[5f]"></a>ddr_pre_vddcx_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ddr_target.o(i.ddr_pre_vddcx_switch))
<BR>[Address Reference Count : 1]<UL><LI> ddr_target.o(i.ddr_target_init)
</UL>
<P><STRONG><a name="[61]"></a>ddr_pre_vddmx_switch</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ddr_target.o(i.ddr_pre_vddmx_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ddr_pre_vddmx_switch &rArr; HAL_SDRAM_PHY_Manual_CDC_Cal &rArr; HAL_SDRAM_PHY_Disable_CDC_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Update_CDC_Config
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Manual_CDC_Cal
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_PHY_Enable_Rapid_CDC_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_exit_sleep
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ddr_target.o(i.ddr_target_init)
</UL>
<P><STRONG><a name="[143]"></a>ddr_pre_xo_shutdown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddr_target.o(i.ddr_pre_xo_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ddr_pre_xo_shutdown &rArr; ddr_enter_self_refresh_all &rArr; HAL_SDRAM_Enter_Self_Refresh &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_self_refresh_all
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
</UL>

<P><STRONG><a name="[3fc]"></a>ddr_target_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ddr_target.o(i.ddr_target_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ddr_target_init &rArr; railway_set_callback &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_callback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_id
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_init
</UL>

<P><STRONG><a name="[c2]"></a>xport_rpm_toc_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, xport_rpm_toc.o(glink_cram_reclaim_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = xport_rpm_toc_init &rArr; xport_rpm_config_init &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_get_toc_config
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_malloc
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_config_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[401]"></a>xport_rpm_config_init</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, xport_rpm_devcfg.o(glink_cram_reclaim_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = xport_rpm_config_init &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetPropertyValue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_GetDALPropertyHandleStr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_toc_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_init
</UL>

<P><STRONG><a name="[259]"></a>glink_close</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, glink_api.o(i.glink_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = glink_close
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_xport_linkup
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_glink_port_state_isr(glink_channel_ctx*, Handler*, glink_channel_event_type)
</UL>

<P><STRONG><a name="[407]"></a>glink_core_get_default_interface</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glink_rpmcore_setup.o(i.glink_core_get_default_interface))
<BR><BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_get_intentless_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_register_transport
</UL>

<P><STRONG><a name="[408]"></a>glink_core_get_intentless_interface</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glink_core_intentless_xport.o(i.glink_core_get_intentless_interface))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_get_default_interface
</UL>

<P><STRONG><a name="[409]"></a>glink_core_register_transport</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, glink_core_internal.o(i.glink_core_register_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = glink_core_register_transport &rArr; glink_os_calloc &rArr; glink_os_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_append
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_string_compare
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_calloc
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_get_default_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_init
</UL>

<P><STRONG><a name="[40f]"></a>glink_core_setup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, glink_rpmcore_setup.o(i.glink_core_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = glink_core_setup &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_setup_intentless_xport
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_version_ack
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_version
</UL>

<P><STRONG><a name="[410]"></a>glink_core_setup_intentless_xport</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, glink_core_intentless_xport.o(i.glink_core_setup_intentless_xport))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_setup
</UL>

<P><STRONG><a name="[69]"></a>glink_dummy_tx_vprovider</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, glink_vector.o(i.glink_dummy_tx_vprovider))
<BR>[Address Reference Count : 1]<UL><LI> glink_api.o(i.glink_tx)
</UL>
<P><STRONG><a name="[c1]"></a>glink_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, glink_core_internal.o(i.glink_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = glink_init &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_log_init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>glink_link_up</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, glink_core_if.o(i.glink_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = glink_link_up &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(.data)
</UL>
<P><STRONG><a name="[258]"></a>glink_open</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, glink_api.o(i.glink_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = glink_open &rArr; glinki_find_requested_xport &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_string_copy
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_free
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_calloc
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_requested_xport
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_remote_host
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_add_ch_to_xport
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_glink_link_state_isr(glink_link_info_t*, Handler*)
</UL>

<P><STRONG><a name="[40b]"></a>glink_os_calloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, glink_os_utils_dal.o(i.glink_os_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = glink_os_calloc &rArr; glink_os_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_remote_open
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_tx
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_register_link_state_cb
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_open
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_register_transport
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_init
</UL>

<P><STRONG><a name="[417]"></a>glink_os_copy_mem</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, glink_os_utils_dal.o(i.glink_os_copy_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = glink_os_copy_mem &rArr; memscpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memscpy
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
</UL>

<P><STRONG><a name="[404]"></a>glink_os_cs_acquire</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glink_os_utils_dal.o(i.glink_os_cs_acquire))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_put_pkt_ctx
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_version_ack
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_version
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_remote_sigs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_remote_close
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_open_ack
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_close_ack
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_link_up
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_tx
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_close
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_ssr
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_xports_and_notify
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_notif_list_and_notify
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_register_link_notif_data
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_requested_xport
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_channel_fully_opened
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_add_ch_to_xport
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_register_transport
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_isr
</UL>

<P><STRONG><a name="[436]"></a>glink_os_cs_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glink_os_utils_dal.o(i.glink_os_cs_create))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_init
</UL>

<P><STRONG><a name="[40c]"></a>glink_os_cs_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glink_os_utils_dal.o(i.glink_os_cs_init))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_add_ch_to_xport
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_register_transport
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_init
</UL>

<P><STRONG><a name="[405]"></a>glink_os_cs_release</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glink_os_utils_dal.o(i.glink_os_cs_release))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_put_pkt_ctx
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_version_ack
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_version
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_remote_sigs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_remote_close
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_open_ack
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_close_ack
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_link_up
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_tx
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_close
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_ssr
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_xports_and_notify
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_notif_list_and_notify
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_register_link_notif_data
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_requested_xport
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_channel_fully_opened
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_add_ch_to_xport
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_register_transport
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_isr
</UL>

<P><STRONG><a name="[437]"></a>glink_os_disable_interrupt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, glink_os_utils_dal.o(i.glink_os_disable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_mask_interrupt
</UL>

<P><STRONG><a name="[438]"></a>glink_os_enable_interrupt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, glink_os_utils_dal.o(i.glink_os_enable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_mask_interrupt
</UL>

<P><STRONG><a name="[403]"></a>glink_os_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, glink_os_utils_dal.o(i.glink_os_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = glink_os_free
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_remote_close
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_close_ack
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_channel_submit_pkt_intentless
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_open
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_add_ch_to_xport
</UL>

<P><STRONG><a name="[411]"></a>glink_os_log_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, glink_os_utils_dal.o(i.glink_os_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = glink_os_log_init
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULogFront_RealTimeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_init
</UL>

<P><STRONG><a name="[416]"></a>glink_os_malloc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, glink_os_utils_dal.o(i.glink_os_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = glink_os_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_register_isr
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_calloc
</UL>

<P><STRONG><a name="[418]"></a>glink_os_register_isr</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, glink_os_utils_dal.o(i.glink_os_register_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = glink_os_register_isr &rArr; glink_os_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_malloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_set_isr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_init
</UL>

<P><STRONG><a name="[419]"></a>glink_os_send_interrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, glink_os_utils_dal.o(i.glink_os_send_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = glink_os_send_interrupt &rArr; DalIPCInt_Trigger &rArr; busywait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DalIPCInt_Trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
</UL>

<P><STRONG><a name="[40a]"></a>glink_os_string_compare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glink_os_utils_dal.o(i.glink_os_string_compare))
<BR><BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_xports_and_notify
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_notif_list_and_notify
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_requested_xport
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_remote_host
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_add_ch_to_xport
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_register_transport
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_client_requested_xport_check
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_check_xport_link_up_and_notify
</UL>

<P><STRONG><a name="[413]"></a>glink_os_string_copy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, glink_os_utils_dal.o(i.glink_os_string_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = glink_os_string_copy &rArr; strlcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_remote_open
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_open
</UL>

<P><STRONG><a name="[28d]"></a>glink_register_link_state_cb</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, glink_api.o(i.glink_register_link_state_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = glink_register_link_state_cb &rArr; glink_os_calloc &rArr; glink_os_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_calloc
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_xports_and_notify
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_register_link_notif_data
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_remote_host
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::init()
</UL>

<P><STRONG><a name="[286]"></a>glink_rpm_mask_rx_interrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, glink_api.o(i.glink_rpm_mask_rx_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[282]"></a>glink_rpm_rx_poll</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, glink_api.o(i.glink_rpm_rx_poll))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::execute_until(volatile bool&, unsigned long long)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::processNAS(volatile bool&, unsigned long long&)
</UL>

<P><STRONG><a name="[91]"></a>glink_rx_cmd_ch_close_ack</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, glink_core_if.o(i.glink_rx_cmd_ch_close_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = glink_rx_cmd_ch_close_ack &rArr; glinki_find_ch_ctx_by_lcid &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_delete
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_free
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_ch_ctx_by_lcid
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(.data)
</UL>
<P><STRONG><a name="[90]"></a>glink_rx_cmd_ch_open_ack</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, glink_core_if.o(i.glink_rx_cmd_ch_open_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = glink_rx_cmd_ch_open_ack &rArr; glinki_find_ch_ctx_by_lcid &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_ch_ctx_by_lcid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>glink_rx_cmd_ch_remote_close</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, glink_core_if.o(i.glink_rx_cmd_ch_remote_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = glink_rx_cmd_ch_remote_close &rArr; glinki_find_ch_ctx_by_rcid &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_delete
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_free
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_ch_ctx_by_rcid
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>glink_rx_cmd_ch_remote_open</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, glink_core_if.o(i.glink_rx_cmd_ch_remote_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = glink_rx_cmd_ch_remote_open &rArr; glink_os_calloc &rArr; glink_os_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_string_copy
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_calloc
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_add_ch_to_xport
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>glink_rx_cmd_remote_sigs</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, glink_core_if.o(i.glink_rx_cmd_remote_sigs))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = glink_rx_cmd_remote_sigs &rArr; glinki_find_ch_ctx_by_rcid &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_ch_ctx_by_rcid
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_channel_fully_opened
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>glink_rx_cmd_version</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, glink_core_if.o(i.glink_rx_cmd_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = glink_rx_cmd_version &rArr; glinki_scan_notif_list_and_notify &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_setup
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_xport_linkup
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_notif_list_and_notify
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>glink_rx_cmd_version_ack</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, glink_core_if.o(i.glink_rx_cmd_version_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = glink_rx_cmd_version_ack &rArr; glinki_scan_notif_list_and_notify &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_setup
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_xport_linkup
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_notif_list_and_notify
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>glink_rx_put_pkt_ctx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, glink_core_if.o(i.glink_rx_put_pkt_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = glink_rx_put_pkt_ctx &rArr; glinki_find_ch_ctx_by_rcid &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_ch_ctx_by_rcid
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(.data)
</UL>
<P><STRONG><a name="[285]"></a>glink_sigs_remote_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, glink_api.o(i.glink_sigs_remote_get))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::rpm_glink_enqueue(glink_channel_ctx*, void*, void*, unsigned, unsigned, void*(*)(void*, unsigned, unsigned*), void*(*)(void*, unsigned, unsigned*))
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[28a]"></a>glink_tx</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, glink_api.o(i.glink_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = glink_tx &rArr; glink_os_calloc &rArr; glink_os_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_calloc
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_channel_fully_opened
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
</UL>

<P><STRONG><a name="[415]"></a>glinki_add_ch_to_xport</STRONG> (Thumb, 700 bytes, Stack size 56 bytes, glink_core_internal.o(i.glinki_add_ch_to_xport))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = glinki_add_ch_to_xport &rArr; glink_os_free
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_next
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_first
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_delete
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_count
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_append
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_string_compare
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_free
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_remote_open
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_open
</UL>

<P><STRONG><a name="[41f]"></a>glinki_channel_fully_opened</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, glink_core_internal.o(i.glinki_channel_fully_opened))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = glinki_channel_fully_opened
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_remote_sigs
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_tx
</UL>

<P><STRONG><a name="[41c]"></a>glinki_find_ch_ctx_by_lcid</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, glink_core_internal.o(i.glinki_find_ch_ctx_by_lcid))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = glinki_find_ch_ctx_by_lcid &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_next
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_first
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_open_ack
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_close_ack
</UL>

<P><STRONG><a name="[41e]"></a>glinki_find_ch_ctx_by_rcid</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, glink_core_internal.o(i.glinki_find_ch_ctx_by_rcid))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = glinki_find_ch_ctx_by_rcid &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_next
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_first
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_put_pkt_ctx
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_remote_sigs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_remote_close
</UL>

<P><STRONG><a name="[412]"></a>glinki_find_remote_host</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, glink_core_internal.o(i.glinki_find_remote_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = glinki_find_remote_host
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_string_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_register_link_state_cb
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_open
</UL>

<P><STRONG><a name="[414]"></a>glinki_find_requested_xport</STRONG> (Thumb, 272 bytes, Stack size 88 bytes, glink_core_internal.o(i.glinki_find_requested_xport))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = glinki_find_requested_xport &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_next
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_first
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_string_compare
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_open
</UL>

<P><STRONG><a name="[41a]"></a>glinki_register_link_notif_data</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, glink_core_internal.o(i.glinki_register_link_notif_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = glinki_register_link_notif_data
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_append
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_register_link_state_cb
</UL>

<P><STRONG><a name="[420]"></a>glinki_scan_notif_list_and_notify</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, glink_core_internal.o(i.glinki_scan_notif_list_and_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = glinki_scan_notif_list_and_notify &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_next
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_first
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_string_compare
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_version_ack
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_version
</UL>

<P><STRONG><a name="[41b]"></a>glinki_scan_xports_and_notify</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, glink_core_internal.o(i.glinki_scan_xports_and_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = glinki_scan_xports_and_notify &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_next
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_list_first
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_string_compare
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_register_link_state_cb
</UL>

<P><STRONG><a name="[406]"></a>glinki_xport_linkup</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, glink_core_internal.o(i.glinki_xport_linkup))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_version_ack
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_version
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_close
</UL>

<P><STRONG><a name="[426]"></a>smem_ext_get_smem_base</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, smem_ext.o(i.smem_ext_get_smem_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smem_ext_get_smem_base &rArr; smem_os_ext_get_smem_base &rArr; smem_map_smem_targ_info &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_os_ext_get_smem_base
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_alloc_static
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_init
</UL>

<P><STRONG><a name="[425]"></a>smem_ext_get_smem_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, smem_ext.o(i.smem_ext_get_smem_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smem_ext_get_smem_size &rArr; smem_os_ext_get_smem_size &rArr; smem_map_smem_targ_info &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_os_ext_get_smem_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_get_addr
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_alloc_static
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_init
</UL>

<P><STRONG><a name="[2d3]"></a>smem_get_addr</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, smem.o(i.smem_get_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = smem_get_addr &rArr; smem_init &rArr; smem_alloc_static &rArr; smem_ext_get_smem_size &rArr; smem_os_ext_get_smem_size &rArr; smem_map_smem_targ_info &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_unlock
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_lock
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_ext_get_smem_size
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_alloc_static
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_internalize_state
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_version_populate_version
</UL>

<P><STRONG><a name="[429]"></a>smem_get_offset</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, smem.o(i.smem_get_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smem_get_offset &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_alloc_static
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_init
</UL>

<P><STRONG><a name="[c0]"></a>smem_init</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, smem.o(i.smem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = smem_init &rArr; smem_alloc_static &rArr; smem_ext_get_smem_size &rArr; smem_os_ext_get_smem_size &rArr; smem_map_smem_targ_info &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_lock_init
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_map_spinlock_region_va
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_map_memory_va
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_ext_get_smem_size
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_ext_get_smem_base
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_get_offset
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_alloc_static
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_get_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[40e]"></a>smem_list_append</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, smem_list.o(i.smem_list_append))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_register_link_notif_data
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_add_ch_to_xport
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_register_transport
</UL>

<P><STRONG><a name="[423]"></a>smem_list_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, smem_list.o(i.smem_list_count))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_add_ch_to_xport
</UL>

<P><STRONG><a name="[41d]"></a>smem_list_delete</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, smem_list.o(i.smem_list_delete))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_remote_close
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_rx_cmd_ch_close_ack
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_add_ch_to_xport
</UL>

<P><STRONG><a name="[421]"></a>smem_list_first</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, smem_list.o(i.smem_list_first))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_xports_and_notify
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_notif_list_and_notify
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_requested_xport
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_ch_ctx_by_rcid
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_ch_ctx_by_lcid
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_add_ch_to_xport
</UL>

<P><STRONG><a name="[40d]"></a>smem_list_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smem_list.o(i.smem_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_register_transport
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_init
</UL>

<P><STRONG><a name="[422]"></a>smem_list_next</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, smem_list.o(i.smem_list_next))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_xports_and_notify
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_scan_notif_list_and_notify
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_requested_xport
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_ch_ctx_by_rcid
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_find_ch_ctx_by_lcid
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glinki_add_ch_to_xport
</UL>

<P><STRONG><a name="[427]"></a>smem_map_memory_va</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smem_dal.o(i.smem_map_memory_va))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_alloc_static
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_init
</UL>

<P><STRONG><a name="[42f]"></a>smem_map_smem_targ_info</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, smem_dal.o(i.smem_map_smem_targ_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smem_map_smem_targ_info &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DalHWIO_MapRegion
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_os_ext_get_smem_size
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_os_ext_get_smem_base
</UL>

<P><STRONG><a name="[428]"></a>smem_map_spinlock_region_va</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smem_dal.o(i.smem_map_spinlock_region_va))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smem_map_spinlock_region_va &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DalHWIO_MapRegion
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_alloc_static
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_init
</UL>

<P><STRONG><a name="[42a]"></a>smem_os_ext_get_smem_base</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, smem_rex.o(i.smem_os_ext_get_smem_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smem_os_ext_get_smem_base &rArr; smem_map_smem_targ_info &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_map_smem_targ_info
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_ext_get_smem_base
</UL>

<P><STRONG><a name="[42b]"></a>smem_os_ext_get_smem_size</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, smem_rex.o(i.smem_os_ext_get_smem_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smem_os_ext_get_smem_size &rArr; smem_map_smem_targ_info &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_map_smem_targ_info
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_ext_get_smem_size
</UL>

<P><STRONG><a name="[42c]"></a>smem_spin_lock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spinlock.o(i.smem_spin_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smem_spin_lock &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_lock_internal
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_lock_cs_lock
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_get_addr
</UL>

<P><STRONG><a name="[430]"></a>smem_spin_lock_cs_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spinlock_cs.o(i.smem_spin_lock_cs_lock))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_lock
</UL>

<P><STRONG><a name="[432]"></a>smem_spin_lock_cs_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spinlock_cs.o(i.smem_spin_lock_cs_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_unlock
</UL>

<P><STRONG><a name="[42e]"></a>smem_spin_lock_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spinlock.o(i.smem_spin_lock_init))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_init
</UL>

<P><STRONG><a name="[42d]"></a>smem_spin_unlock</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spinlock.o(i.smem_spin_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smem_spin_unlock &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_unlock_internal
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_lock_get
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_lock_cs_unlock
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_get_addr
</UL>

<P><STRONG><a name="[433]"></a>spin_lock_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spinlock_internal.o(i.spin_lock_get))
<BR><BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_unlock
</UL>

<P><STRONG><a name="[431]"></a>spin_lock_internal</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, spinlock_internal.o(i.spin_lock_internal))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_lock
</UL>

<P><STRONG><a name="[434]"></a>spin_unlock_internal</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, spinlock_internal.o(i.spin_unlock_internal))
<BR><BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_spin_unlock
</UL>

<P><STRONG><a name="[435]"></a>xport_rpm_get_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, xport_rpm_devcfg.o(i.xport_rpm_get_config))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_init
</UL>

<P><STRONG><a name="[402]"></a>xport_rpm_get_toc_config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, xport_rpm_devcfg.o(i.xport_rpm_get_toc_config))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_toc_init
</UL>

<P><STRONG><a name="[c3]"></a>xport_rpm_init</STRONG> (Thumb, 452 bytes, Stack size 64 bytes, xport_rpm.o(i.xport_rpm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = xport_rpm_init &rArr; glink_core_register_transport &rArr; glink_os_calloc &rArr; glink_os_malloc &rArr; malloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_get_config
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_config_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_register_isr
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_create
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_calloc
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_core_register_transport
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>xport_rpm_isr</STRONG> (Thumb, 536 bytes, Stack size 120 bytes, xport_rpm.o(i.xport_rpm_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = xport_rpm_isr &rArr; __stack_chk_fail &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stack_chk_fail
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 3]<UL><LI> xport_rpm.o(i.xport_rpm_init)
<LI> xport_rpm.o(i.xport_rpm_mask_interrupt)
<LI> exceptions.o(.ARM.__AT_0x00090200)
</UL>
<P><STRONG><a name="[78]"></a>xport_rpm_mask_interrupt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, xport_rpm.o(i.xport_rpm_mask_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xport_rpm_mask_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_enable_interrupt
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_disable_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_init)
</UL>
<P><STRONG><a name="[6d]"></a>xport_rpm_negotiate_features</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, xport_rpm.o(i.xport_rpm_negotiate_features))
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_init)
</UL>
<P><STRONG><a name="[70]"></a>xport_rpm_set_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, xport_rpm.o(i.xport_rpm_set_version))
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_init)
</UL>
<P><STRONG><a name="[77]"></a>xport_rpm_ssr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, xport_rpm.o(i.xport_rpm_ssr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xport_rpm_ssr
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_init)
</UL>
<P><STRONG><a name="[75]"></a>xport_rpm_tx</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, xport_rpm.o(i.xport_rpm_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = xport_rpm_tx &rArr; xport_rpm_send_cmd &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_init)
</UL>
<P><STRONG><a name="[72]"></a>xport_rpm_tx_cmd_ch_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, xport_rpm.o(i.xport_rpm_tx_cmd_ch_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = xport_rpm_tx_cmd_ch_close &rArr; xport_rpm_send_cmd &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_init)
</UL>
<P><STRONG><a name="[71]"></a>xport_rpm_tx_cmd_ch_open</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, xport_rpm.o(i.xport_rpm_tx_cmd_ch_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = xport_rpm_tx_cmd_ch_open &rArr; xport_rpm_send_cmd &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_init)
</UL>
<P><STRONG><a name="[74]"></a>xport_rpm_tx_cmd_ch_remote_close_ack</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xport_rpm.o(i.xport_rpm_tx_cmd_ch_remote_close_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = xport_rpm_tx_cmd_ch_remote_close_ack &rArr; xport_rpm_send_cmd &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_init)
</UL>
<P><STRONG><a name="[73]"></a>xport_rpm_tx_cmd_ch_remote_open_ack</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, xport_rpm.o(i.xport_rpm_tx_cmd_ch_remote_open_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = xport_rpm_tx_cmd_ch_remote_open_ack &rArr; xport_rpm_send_cmd &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_init)
</UL>
<P><STRONG><a name="[76]"></a>xport_rpm_tx_cmd_set_sigs</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, xport_rpm.o(i.xport_rpm_tx_cmd_set_sigs))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = xport_rpm_tx_cmd_set_sigs &rArr; xport_rpm_send_cmd &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_init)
</UL>
<P><STRONG><a name="[6e]"></a>xport_rpm_tx_cmd_version</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, xport_rpm.o(i.xport_rpm_tx_cmd_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = xport_rpm_tx_cmd_version &rArr; xport_rpm_send_cmd &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_init)
</UL>
<P><STRONG><a name="[6f]"></a>xport_rpm_tx_cmd_version_ack</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, xport_rpm.o(i.xport_rpm_tx_cmd_version_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = xport_rpm_tx_cmd_version_ack &rArr; xport_rpm_send_cmd &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_send_cmd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[210]"></a>QDSSRestoreTimestamp</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, QDSS.o(i.QDSSRestoreTimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QDSSRestoreTimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSPostXOShutdown
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSInit
</UL>

<P><STRONG><a name="[6c]"></a>glinki_check_xport_link_up_and_notify</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, glink_core_internal.o(i.glinki_check_xport_link_up_and_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = glinki_check_xport_link_up_and_notify &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_string_compare
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_internal.o(i.glinki_scan_xports_and_notify)
</UL>
<P><STRONG><a name="[6b]"></a>glinki_client_requested_xport_check</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, glink_core_internal.o(i.glinki_client_requested_xport_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = glinki_client_requested_xport_check
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_string_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_internal.o(i.glinki_find_requested_xport)
</UL>
<P><STRONG><a name="[6a]"></a>glinki_update_best_xport</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, glink_core_internal.o(i.glinki_update_best_xport))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = glinki_update_best_xport &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_internal.o(i.glinki_find_requested_xport)
</UL>
<P><STRONG><a name="[7a]"></a>xport_rpm_pkt_provider</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, xport_rpm.o(i.xport_rpm_pkt_provider))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xport_rpm_pkt_provider
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xport_rpm.o(i.xport_rpm_isr)
</UL>
<P><STRONG><a name="[439]"></a>xport_rpm_send_cmd</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, xport_rpm.o(i.xport_rpm_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = xport_rpm_send_cmd &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_send_interrupt
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_copy_mem
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_release
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_cs_acquire
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_tx_cmd_version_ack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_tx_cmd_version
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_tx_cmd_set_sigs
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_tx_cmd_ch_remote_open_ack
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_tx_cmd_ch_remote_close_ack
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_tx_cmd_ch_open
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_tx_cmd_ch_close
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xport_rpm_tx
</UL>

<P><STRONG><a name="[424]"></a>smem_alloc_static</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, smem.o(i.smem_alloc_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = smem_alloc_static &rArr; smem_ext_get_smem_size &rArr; smem_os_ext_get_smem_size &rArr; smem_map_smem_targ_info &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_map_spinlock_region_va
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_map_memory_va
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_ext_get_smem_size
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_ext_get_smem_base
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_get_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_get_addr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smem_init
</UL>

<P><STRONG><a name="[28]"></a>acc_voltage_change_post_callback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, acc.o(i.acc_voltage_change_post_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = acc_voltage_change_post_callback &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acc.o(i.acc_init)
</UL>
<P><STRONG><a name="[27]"></a>acc_voltage_change_pre_callback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, acc.o(i.acc_voltage_change_pre_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = acc_voltage_change_pre_callback &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acc.o(i.acc_init)
</UL>
<P><STRONG><a name="[3b]"></a>npa_async_event_handler</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, npa.o(i.npa_async_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = npa_async_event_handler &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npa.o(i.npa_init)
</UL>
<P><STRONG><a name="[2f7]"></a>npa_cleanup_placeholders</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, npa.o(i.npa_cleanup_placeholders))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = npa_cleanup_placeholders &rArr; Core_PoolFree &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolFree
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_cb
</UL>

<P><STRONG><a name="[3a]"></a>npa_define_node_continuation</STRONG> (Thumb, 980 bytes, Stack size 152 bytes, npa.o(i.npa_define_node_continuation))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = npa_define_node_continuation &rArr; npa_resource_available_cb &rArr; npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI>&nbsp;&nbsp;&nbsp;strncmp
<LI>&nbsp;&nbsp;&nbsp;strlen
<LI>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueuePut
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueAlloc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolFree
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolAlloc
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resource_available_cb
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_link_resource
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npa.o(i.npa_define_node_continuation)
</UL>
<P><STRONG><a name="[2fa]"></a>npa_find_resource</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, npa.o(i.npa_find_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = npa_find_resource &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_query_handle
</UL>

<P><STRONG><a name="[39]"></a>npa_issue_sync_request</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, npa.o(i.npa_issue_sync_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = npa_issue_sync_request &rArr; Core_WorkQueueAlloc &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueuePut
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_WorkQueueAlloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> npa.o(i.npa_create_sync_client_ex)
<LI> npa.o(i.npa_define_node_continuation)
</UL>
<P><STRONG><a name="[2fb]"></a>npa_link_resource</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, npa.o(i.npa_link_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = npa_link_resource &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolAlloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resource_available_cb
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_cb
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_define_node_continuation
</UL>

<P><STRONG><a name="[2ff]"></a>npa_new_event</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, npa.o(i.npa_new_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = npa_new_event &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strncmp
<LI>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core_PoolAlloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_resource_available_cb
</UL>

<P><STRONG><a name="[2f8]"></a>npa_terminate_request</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, npa.o(i.npa_terminate_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = npa_terminate_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_complete_request
</UL>

<P><STRONG><a name="[4c]"></a>rbcpr_isr</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rbcpr.o(i.rbcpr_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rbcpr_isr &rArr; RBCPRTaskISR &rArr; Task::schedule_me(ScheduleType) &rArr; Sched::schedule_task(Task&, ScheduleType) &rArr; TaskHeap::insert(Task*) &rArr; operator new[] (unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBCPRTaskISR
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rbcpr.o(i.rbcpr_enable_closed_loop)
</UL>
<P><STRONG><a name="[3b2]"></a>rbcpr_pause_cpr</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, rbcpr.o(i.rbcpr_pause_cpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rbcpr_pause_cpr &rArr; RBCPRTaskCornerChange &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBCPRTaskCornerChange
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_consecutive_up
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_write_consecutive_dn
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_set_sw_auto_cont_nack_dn
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_set_sw_auto_cont_ack
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_next_meas_en
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_enable_int
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_enable_block
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_clear_int_all
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pre_switch_callback
</UL>

<P><STRONG><a name="[4b]"></a>rbcpr_post_switch_callback</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rbcpr.o(i.rbcpr_post_switch_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rbcpr_post_switch_callback &rArr; rbcpr_stats_set_railway_settings &rArr; rail_footer &rArr;  rail_corner (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_set_railway_settings
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_restart_cpr
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_prepare_cpr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rbcpr.o(i.rbcpr_enable_closed_loop)
</UL>
<P><STRONG><a name="[4a]"></a>rbcpr_pre_switch_callback</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, rbcpr.o(i.rbcpr_pre_switch_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rbcpr_pre_switch_callback &rArr; rbcpr_pause_cpr &rArr; RBCPRTaskCornerChange &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memscpy
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_rbcpr_prgm_gcnt_target
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_corner_params
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_pause_cpr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rbcpr.o(i.rbcpr_enable_closed_loop)
</UL>
<P><STRONG><a name="[57]"></a>svs_postchange_cb</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, svs.o(i.svs_postchange_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = svs_postchange_cb &rArr; svs_set_mode &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_change
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_set_mode
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svs.o(i.svs_resources_ready)
</UL>
<P><STRONG><a name="[56]"></a>svs_prechange_cb</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, svs.o(i.svs_prechange_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = svs_prechange_cb &rArr; svs_set_mode &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_change
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_set_mode
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svs.o(i.svs_resources_ready)
</UL>
<P><STRONG><a name="[55]"></a>svs_resources_ready</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, svs.o(i.svs_resources_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = svs_resources_ready &rArr; svs_set_mode &rArr; railway_transition_rail &rArr; railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_cpu_speed_change
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svs_set_mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_create_voter
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_callback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_id
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svs.o(i.svs_init)
</UL>
<P><STRONG><a name="[58]"></a>rpm_trace_control</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, swevent.o(i.rpm_trace_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rpm_trace_control &rArr; QDSSETMControl &rArr; ETM_trace_enable &rArr; QDSSEnableTrace &rArr; npa_issue_scalar_request &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSEnableTrace
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSETMControl
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSDisableTrace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swevent.o(i.swevent_qdss_init)
</UL>
<P><STRONG><a name="[2a]"></a>gpio_toggle_apply</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gpio_toggle.o(i.gpio_toggle_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_toggle_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_toggle.o(i.gpio_toggle_init)
</UL>
<P><STRONG><a name="[245]"></a>transitionResource(ResourceData*, void*, unsigned long long*)</STRONG> (Thumb, 470 bytes, Stack size 80 bytes, rpm_set_changer.o(i._Z18transitionResourceP12ResourceDataPvPy))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = transitionResource(ResourceData*, void*, unsigned long long*) &rArr; resource_ee_transition(ResourceData*, unsigned, rpm_transition_type) &rArr; do_resource_ee_transition(ResourceData*, unsigned, rpm_transition_type) &rArr; resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_settling_apply(ResourceData*, unsigned, unsigned long long)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_transition(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theEstimator()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_specific_resource(TransitionContext*, ResourceData*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChanger::execute_until(volatile bool&, unsigned long long)
</UL>

<P><STRONG><a name="[7e]"></a>rpm_ULogInternal_STMWrite</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rpm_ulog.o(i.rpm_ULogInternal_STMWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rpm_ULogInternal_STMWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDSSWriteOSTPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_ulog.o(.data)
</UL>
<P><STRONG><a name="[152]"></a>Clock_DetectClockConfig</STRONG> (Thumb, 208 bytes, Stack size 96 bytes, ClockRPM.o(i.Clock_DetectClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Clock_DetectClockConfig &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_DetectPLLConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_DetectClockMuxConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsBSPSupported
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_InitImage
</UL>

<P><STRONG><a name="[221]"></a>debugExecute</STRONG> (Thumb, 460 bytes, Stack size 64 bytes, SpmiBus.o(i.debugExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetTimeTick
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetSerialClkState
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetAhbClkState
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmicArb_GetHwStatus
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmicArb_ExecuteCommand
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULogFront_RealTimePrintf
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_WriteLong
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiBus_ReadLong
</UL>

<P><STRONG><a name="[1a]"></a>myIsr</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, SpmiBus.o(i.myIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = myIsr &rArr; SpmiOs_GetTimeTick &rArr; timetick_init &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmiOs_GetTimeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SpmiBus.o(i.SpmiBus_Init)
</UL>
<P><STRONG><a name="[68]"></a>glink_os_isr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, glink_os_utils_dal.o(i.glink_os_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = glink_os_isr &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_os_utils_dal.o(i.glink_os_register_isr)
</UL>
<P><STRONG><a name="[e0]"></a>npa_no_client_create_fcn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, npa_plugins.o(i.npa_no_client_create_fcn))
<BR>[Address Reference Count : 1]<UL><LI> npa_plugins.o(.constdata)
</UL>
<P><STRONG><a name="[380]"></a>railway_do_transition_rail</STRONG> (Thumb, 1076 bytes, Stack size 40 bytes, railway.o(i.railway_do_transition_rail))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = railway_do_transition_rail &rArr; railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_rail_corner_remap
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_aggregated_voltage_target_uv
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_individual_rail
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_quantize_constrained_target
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_transition_rail
</UL>

<P><STRONG><a name="[381]"></a>railway_quantize_constrained_target</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, railway.o(i.railway_quantize_constrained_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = railway_quantize_constrained_target &rArr; rpm_rail_corner_remap &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_rail_corner_remap
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_do_transition_rail
</UL>

<P><STRONG><a name="[382]"></a>railway_transition_individual_rail</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, railway.o(i.railway_transition_individual_rail))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = railway_transition_individual_rail &rArr; rpm_issue_request &rArr; resource_client_request(ResourceData*, unsigned, unsigned, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_issue_request
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_do_transition_rail
</UL>

<P><STRONG><a name="[37f]"></a>railway_do_set_corner_voltage</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, railway_aggregator.o(i.railway_do_set_corner_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = railway_do_set_corner_voltage &rArr;  railway_do_set_corner_voltage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_do_set_corner_voltage
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_do_set_corner_voltage
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_set_corner_voltage
</UL>

<P><STRONG><a name="[36d]"></a>rail_corner</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rbcpr_stats.o(i.rail_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rail_corner &rArr; rail_footer &rArr;  rail_corner (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_footer
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_footer
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_set_fuse_microvolts
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_set_corner_voltage
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_increment_min_counter
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_increment_max_counter
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_increment_isr_counter
</UL>

<P><STRONG><a name="[36e]"></a>rail_footer</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rbcpr_stats.o(i.rail_footer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + In Cycle
<LI>Call Chain = rail_footer &rArr;  rail_corner (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_header
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_corner
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_header
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_corner
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_set_railway_settings
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbcpr_stats_init
</UL>

<P><STRONG><a name="[36f]"></a>rail_header</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rbcpr_stats.o(i.rail_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + In Cycle
<LI>Call Chain = rail_header &rArr;  rail_footer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_footer
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rail_footer
</UL>

<P><STRONG><a name="[24]"></a>rpm_settling_handler(Handler*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rpm_handler.o(i._Z20rpm_settling_handlerP7Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rpm_settling_handler(Handler*) &rArr; Task::schedule_me(ScheduleType) &rArr; Sched::schedule_task(Task&, ScheduleType) &rArr; TaskHeap::insert(Task*) &rArr; operator new[] (unsigned) &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::schedule_me(ScheduleType)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_handler.o(i._ZN7Handler13execute_untilERVby)
</UL>
<P><STRONG><a name="[20]"></a>rpm_glink_tx_done_isr()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rpm_handler.o(i._Z21rpm_glink_tx_done_isrv))
<BR>[Address Reference Count : 1]<UL><LI> rpm_handler.o(i._Z24rpm_glink_link_state_isrP17glink_link_info_tP7Handler)
</UL>
<P><STRONG><a name="[1d]"></a>rpm_test_apply(rpm_application_info*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rpm_test_resource.o(i._Z14rpm_test_applyP20rpm_application_info))
<BR>[Address Reference Count : 1]<UL><LI> rpm_test_resource.o(i._Z22rpm_test_resource_initv)
</UL>
<P><STRONG><a name="[1e]"></a>rpm_test_xlate(rpm_translation_info*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rpm_test_resource.o(i._Z14rpm_test_xlateP20rpm_translation_info))
<BR>[Address Reference Count : 1]<UL><LI> rpm_test_resource.o(i._Z22rpm_test_resource_initv)
</UL>
<P><STRONG><a name="[53]"></a>rpm_spm_bringup_isr()</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, rpm_spm_handshake.o(i._Z19rpm_spm_bringup_isrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = rpm_spm_bringup_isr() &rArr; rpm_spm_state_machine &rArr; Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type) &rArr; kvp_put &rArr; bytearray_put &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_state_machine
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_spm_handshake.o(i.rpm_spm_init)
</UL>
<P><STRONG><a name="[23]"></a>rpm_spm_shutdown_low_isr()</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, rpm_spm_handshake.o(i._Z24rpm_spm_shutdown_low_isrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = rpm_spm_shutdown_low_isr() &rArr; rpm_spm_state_machine &rArr; Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type) &rArr; kvp_put &rArr; bytearray_put &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_spm_state_machine
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_set_isr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_configure
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpm_spm_handshake.o(i._Z25rpm_spm_shutdown_high_isrv)
</UL>
<P><STRONG><a name="[22]"></a>rpm_spm_shutdown_high_isr()</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, rpm_spm_handshake.o(i._Z25rpm_spm_shutdown_high_isrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rpm_spm_shutdown_high_isr() &rArr; Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type) &rArr; kvp_put &rArr; bytearray_put &rArr; realloc &rArr; __Heap_Alloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler::writeResponse(unsigned, const char*, rpm_message_error_type, rpm_service_type)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_ram_update_modem_xo_drift
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_set_isr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_configure
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rpm_spm_handshake.o(i._Z24rpm_spm_shutdown_low_isrv)
<LI> rpm_spm_handshake.o(i.rpm_spm_init)
</UL>
<P><STRONG><a name="[240]"></a>resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long)</STRONG> (Thumb, 192 bytes, Stack size 88 bytes, rpm_resources.o(i._Z17resource_ee_applyP12ResourceDatajPvS1_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = resource_ee_apply(ResourceData*, unsigned, void*, void*, unsigned long long) &rArr; rpm_get_current_request &rArr; resource_get_request(const ResourceData*, unsigned, unsigned*, const void**) &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_resource_hash
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpm_get_current_request
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_resource_ee_transition(ResourceData*, unsigned, rpm_transition_type)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_request(ResourceData*, unsigned, rpm_set_type, kvp_s*, unsigned long long&)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_settling_apply(ResourceData*, unsigned, unsigned long long)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_ee_transition(ResourceData*, unsigned, rpm_transition_type)
</UL>

<P><STRONG><a name="[4e]"></a>rpm_npa_apply(rpm_application_info*)</STRONG> (Thumb, 552 bytes, Stack size 56 bytes, rpm_npa.o(i._Z13rpm_npa_applyP20rpm_application_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rpm_npa_apply(rpm_application_info*) &rArr; npa_create_sync_client_ex &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_query_by_client
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_limit_max_request
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_internal_request
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_complete_request
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_issue_scalar_request
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ints
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ints
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rpm_npa.o(i.rpm_create_npa_adapter)
<LI> rpm_npa.o(i.rpm_create_npa_settling_adapter)
</UL>
<P><STRONG><a name="[4f]"></a>rpm_npa_xlate(rpm_translation_info*)</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, rpm_npa.o(i._Z13rpm_npa_xlateP20rpm_translation_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rpm_npa_xlate(rpm_translation_info*) &rArr; npa_create_sync_client_ex &rArr; Core_PoolAlloc &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kvp_get
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_create_sync_client_ex
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rpm_npa.o(i.rpm_create_npa_adapter)
<LI> rpm_npa.o(i.rpm_create_npa_settling_adapter)
</UL>
<P><STRONG><a name="[e2]"></a>Clock_NPACreateMarkedClient</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ClockRPMNPA.o(i.Clock_NPACreateMarkedClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clock_NPACreateMarkedClient
</UL>
<BR>[Calls]<UL><LI>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>Clock_NPANodeBIMCFunc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ClockRPMNPA.o(i.Clock_NPANodeBIMCFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = Clock_NPANodeBIMCFunc &rArr; Clock_BIMCSetFrequency &rArr; Clock_BIMCRestore &rArr; Clock_BIMCRestoring &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSetFrequency
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>Clock_NPANodeCPUFunc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ClockRPMNPA.o(i.Clock_NPANodeCPUFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Clock_NPANodeCPUFunc &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockSpeed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>Clock_NPANodeCXOFunc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ClockRPMNPA.o(i.Clock_NPANodeCXOFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Clock_NPANodeCXOFunc &rArr; sleep_update_xo_stats &rArr; rpm_npa_get_ee_client_id &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_update_xo_stats
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>Clock_NPANodeCryptoFunc</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ClockRPMNPA.o(i.Clock_NPANodeCryptoFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Clock_NPANodeCryptoFunc &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockSpeed
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsClockEnabled
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClock
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>Clock_NPANodeDCVSEnaFunc</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ClockRPMNPA.o(i.Clock_NPANodeDCVSEnaFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = Clock_NPANodeDCVSEnaFunc &rArr; Clock_BIMCSetFrequency &rArr; Clock_BIMCRestore &rArr; Clock_BIMCRestoring &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSetFrequency
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockSpeed
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npa_assign_resource_state
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>Clock_NPANodeGPLL0Func</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ClockRPMNPA.o(i.Clock_NPANodeGPLL0Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Clock_NPANodeGPLL0Func &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableSource
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableSource
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>Clock_NPANodeGenericFunc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ClockRPMNPA.o(i.Clock_NPANodeGenericFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Clock_NPANodeGenericFunc &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockSpeed
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>Clock_NPANodeQDSSFunc</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ClockRPMNPA.o(i.Clock_NPANodeQDSSFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Clock_NPANodeQDSSFunc &rArr; Clock_SetQDSSClocks &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdss_fuse_trace_access
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_ToggleQDSSClocks
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetQDSSClocks
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;railway_get_current_settings
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>Clock_NPANodeQPICFunc</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ClockRPMNPA.o(i.Clock_NPANodeQPICFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Clock_NPANodeQPICFunc &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockSpeed
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsClockEnabled
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClock
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>Clock_NPANodeSPMFunc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ClockRPMNPA.o(i.Clock_NPANodeSPMFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Clock_NPANodeSPMFunc &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_SPMAPPSEnableBIMCPorts
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_EnableQ6BIMCPorts
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockSpeed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>Clock_NPAResourceQuery</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, ClockRPMNPA.o(i.Clock_NPAResourceQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Clock_NPAResourceQuery &rArr; Clock_IsBSPSupported
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsBSPSupported
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>Clock_QDSS_PostChangedCB</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ClockRPMNPA.o(i.Clock_QDSS_PostChangedCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Clock_QDSS_PostChangedCB &rArr; Clock_SetQDSSClocks &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetQDSSClocks
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(i.Clock_InitNPA)
</UL>
<P><STRONG><a name="[13]"></a>Clock_QDSS_PreChangedCB</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ClockRPMNPA.o(i.Clock_QDSS_PreChangedCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Clock_QDSS_PreChangedCB &rArr; Clock_SetQDSSClocks &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetQDSSClocks
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_GetDrvCtxt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ClockRPMNPA.o(i.Clock_InitNPA)
</UL>
<P><STRONG><a name="[194]"></a>Clock_ToggleQDSSClocks</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, ClockRPMNPA.o(i.Clock_ToggleQDSSClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Clock_ToggleQDSSClocks &rArr; Clock_EnableClock &rArr; Clock_EnableClockEx &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClock
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_NPANodeQDSSFunc
</UL>

<P><STRONG><a name="[13f]"></a>Clock_BIMCSaving</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ClockRPMBIMC.o(i.Clock_BIMCSaving))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Clock_BIMCSaving &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsDEHREnable
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency_vddmin
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisablePowerDomain
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_EnableClock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_enter_power_collapse
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSwitchFrequency
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddr_pre_xo_shutdown
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfigEx
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCollapse
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_WaitForBIMCPowerCollapse
</UL>

<P><STRONG><a name="[145]"></a>Clock_BIMCollapse</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ClockRPMBIMC.o(i.Clock_BIMCollapse))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Clock_BIMCollapse &rArr; Clock_BIMCIsRestoreDone &rArr; Clock_BIMCSwitchFrequency &rArr; Clock_SetClockSpeed &rArr; Clock_SetClockConfig &rArr; Clock_EnableSource &rArr;  Clock_EnableSource (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_IsDEHREnable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clk_GetDEHRStatus
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCIsRestoreDone
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSaving
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_IsPowerDomainEnabled
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetClockConfigEx
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_DisableClock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_BIMCSetFrequency
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_SetBIMCPowerCollapse
</UL>

<P><STRONG><a name="[332]"></a>pm_mpm_cmd_rail</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, pm_mpm.o(i.pm_mpm_cmd_rail))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pm_mpm_cmd_rail &rArr; pm_rpm_sw_mode_status_raw &rArr; pm_ldo_sw_mode_status_raw &rArr; pm_pwr_sw_mode_status_raw_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_sw_mode_status_raw
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_is_periph_unified_reg
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_calculate_vset
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mpm_cmd_config
</UL>

<P><STRONG><a name="[19]"></a>pmicArbIsr</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, PmicArb.o(i.pmicArbIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pmicArbIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> PmicArb.o(i.PmicArb_Init)
</UL>
<P><STRONG><a name="[1b]"></a>spmiIsrWrapper</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, SpmiOsImage.o(i.spmiIsrWrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spmiIsrWrapper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SpmiOsImage.o(i.SpmiOs_RegisterISR)
</UL>
<P><STRONG><a name="[67]"></a>glink_default_notify_rx_sigs</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, glink_api.o(i.glink_default_notify_rx_sigs))
<BR>[Address Reference Count : 1]<UL><LI> glink_api.o(i.glink_open)
</UL>
<P><STRONG><a name="[66]"></a>glink_channel_receive_pkt_intentless</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, glink_core_intentless_xport.o(i.glink_channel_receive_pkt_intentless))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = glink_channel_receive_pkt_intentless
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(i.glink_core_setup_intentless_xport)
</UL>
<P><STRONG><a name="[65]"></a>glink_channel_submit_pkt_intentless</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, glink_core_intentless_xport.o(i.glink_channel_submit_pkt_intentless))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = glink_channel_submit_pkt_intentless &rArr; glink_os_free
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glink_os_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(i.glink_core_setup_intentless_xport)
</UL>
<P><STRONG><a name="[64]"></a>glink_core_stub_intentless</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glink_core_intentless_xport.o(i.glink_core_stub_intentless))
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(i.glink_core_setup_intentless_xport)
</UL>
<P><STRONG><a name="[63]"></a>glink_verify_open_cfg_intentless</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, glink_core_intentless_xport.o(i.glink_verify_open_cfg_intentless))
<BR>[Address Reference Count : 1]<UL><LI> glink_core_intentless_xport.o(i.glink_core_setup_intentless_xport)
</UL>
<P><STRONG><a name="[32c]"></a>pm_ldo_get_volt_setting_info</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, pm_ldo_driver.o(i.pm_ldo_get_volt_setting_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pm_ldo_get_volt_setting_info &rArr; pm_target_information_get_common_info &rArr; DALSYS_GetPropertyValue &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_target_information_get_common_info
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_ldo_driver_init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_clk_StromerPLLDetectPLLConfig</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, HALclkStromerPLL.o(i.HAL_clk_StromerPLLDetectPLLConfig))
<BR>[Address Reference Count : 1]<UL><LI> HALclkStromerPLL.o(.data)
</UL>
<P><STRONG><a name="[33e]"></a>pm_pwr_sw_vreg_settled_check_alg</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, pm_pwr_alg.o(i.pm_pwr_sw_vreg_settled_check_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = pm_pwr_sw_vreg_settled_check_alg &rArr; pm_comm_read_byte &rArr; SpmiBus_ReadLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_read_byte
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DALSYS_BusyWait
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWEVENT_log
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_volt_level_alg
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pwr_sw_enable_alg
</UL>

<P><STRONG><a name="[363]"></a>pm_rpm_smps_droop_detect_irq_enable</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, pm_rpm_smps_trans_apply.o(i.pm_rpm_smps_droop_detect_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pm_rpm_smps_droop_detect_irq_enable &rArr; pm_droop_detect_irq_enable &rArr; pm_pwr_irq_enable_alg &rArr; pm_comm_write_byte &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_droop_detect_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_execute_driver
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_rpm_smps_apply
</UL>

<P><STRONG><a name="[3c]"></a>pm_droop_detect_isr</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, pm_droop_detect.o(i.pm_droop_detect_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pm_droop_detect_isr &rArr; pm_comm_write_byte &rArr; SpmiBus_WriteLong &rArr; debugExecute &rArr; abort &rArr; err_fatal_sw_event &rArr; SWEVENT_log &rArr;  abort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_comm_write_byte
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timetick_get64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_droop_detect.o(i.pm_droop_detect_irq_config)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
