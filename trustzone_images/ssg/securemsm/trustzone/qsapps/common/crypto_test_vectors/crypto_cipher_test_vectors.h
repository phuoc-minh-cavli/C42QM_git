/*
    @file crypto_cipher_test_vectors.h
    @brief This file contains all test vectors used in various crypto test apps
*/
/*===========================================================================
  Copyright (c) 2016 by Qualcomm Technologies, Incorporated.  All Rights Reserved.
  ===========================================================================*/

/*===========================================================================

    EDIT HISTORY FOR FILE
    $Header: //components/rel/ssg.tz/1.1.3/securemsm/trustzone/qsapps/common/crypto_test_vectors/crypto_cipher_test_vectors.h#1 $
    $DateTime: 2019/05/23 05:32:51 $
    $Author: pwbldsvc $

# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
===========================================================================*/
#ifndef __CRYPTO_CIPHER_TEST_VECTORS_H__
#define __CRYPTO_CIPHER_TEST_VECTORS_H__

#include "crypto_common_test_vectors.h"
#include "stddef.h"
#include "qsee_heap.h"

#include "qsee_cipher.h"
#include "qsee_uf_aes.h"
#include "qsee_uf_des.h"

#include "object.h"
#include "IEnv.h"
#include "ICipher.h"
#include "CCipher.h"

//***********************************************************
//VECTORS USED BY BOTH NEW APPS AND LEGACY APPS
//***********************************************************
//CE CCM Vectors
static UINT8_A aesccm_iv_1[] =
{
   0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aesccm128_key_1[] =
{
   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
   0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};
static UINT8_A aesccm128_nonce_1[] =
{
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16
};
//8 bytes of Associated header data with 8 bytes of padding, 4 bytes of PT = payload
static UINT8_A aesccm128_plain_text_1[] =
{
   0x00, 0x00,                                     //Padding
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //Associated header data
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00,             //Padding
   0x20, 0x21, 0x22, 0x23,                         //PT = payload
};
//8 bytes of Associated header data with 8 bytes of padding, 4 bytes of CT, 4 bytes of MAC
static UINT8_A aesccm128_cipher_text_1[] =
{
   0x00, 0x00,                                     //Padding
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //Associated header data
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00,             //Padding
   0x71, 0x62, 0x01, 0x5b,                         //CT
   0x4d, 0xac, 0x25, 0x5d                          //MAC
};

static UINT8_A aesccm_iv_2[] =
{
   0x06, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
   0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aesccm128_key_2[] =
{
   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
   0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};
static UINT8_A aesccm128_nonce_2[] =
{
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
};
//16 bytes of Associated header data with 16 bytes of padding, 16 bytes of PT = payload
static UINT8_A aesccm128_plain_text_2[] =
{
   0x00, 0x00,                                     //Padding
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //Associated header data
   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Padding
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, //PT = payload
   0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f
};
//16 bytes of Associated header data with 16 bytes of padding, 16 bytes of CT, 6 bytes of MAC
static UINT8_A aesccm128_cipher_text_2[] =
{
   0x00, 0x00,                                     //Padding
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //Associated header data
   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Padding
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xd2, 0xa1, 0xf0, 0xe0, 0x51, 0xea, 0x5f, 0x62, //CT
   0x08, 0x1a, 0x77, 0x92, 0x07, 0x3d, 0x59, 0x3d,
   0x1f, 0xc6, 0x4f, 0xbf, 0xac, 0xcd              //MAC
};

static UINT8_A aesccm_iv_3[] =
{
   0x02, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
   0x17, 0x18, 0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00
};
static UINT8_A aesccm128_key_3[] =
{
   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
   0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};
static UINT8_A aesccm128_nonce_3[] =
{
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   0x18, 0x19, 0x1a, 0x1b,
};
//20 bytes of Associated header data with 12 bytes of padding, 24 bytes of PT = payload
static UINT8_A aesccm128_plain_text_3[] =
{
   0x00, 0x00,                                     //Padding
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //Associated header data
   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
   0x10, 0x11, 0x12, 0x13,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Padding
   0x00, 0x00,
   0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, //PT = payload
   0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
   0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
};
//20 bytes of Associated header data with 12 bytes of padding, 24 bytes of CT, 8 bytes of MAC
static UINT8_A aesccm128_cipher_text_3[] =
{
   0x00, 0x00,                                     //Padding
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //Associated header data
   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
   0x10, 0x11, 0x12, 0x13,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Padding
   0x00, 0x00,
   0xe3, 0xb2, 0x01, 0xa9, 0xf5, 0xb7, 0x1a, 0x7a, //CT
   0x9b, 0x1c, 0xea, 0xec, 0xcd, 0x97, 0xe7, 0x0b,
   0x61, 0x76, 0xaa, 0xd9, 0xa4, 0x42, 0x8a, 0xa5,
   0x48, 0x43, 0x92, 0xfb, 0xc1, 0xb0, 0x99, 0x51, //MAC
};

typedef struct
{
   QSEE_CIPHER_ALGO_ET  alg;
   QSEE_CIPHER_MODE_ET  mode;
   uint8_t *pt;
   uint32_t pt_len;
   uint8_t *key;
   uint32_t key_len;
   uint8_t *iv;
   uint8_t *nonce;
   uint32_t nonce_len;
   uint32_t payload_len;
   uint8_t *ct;
   uint32_t ct_len;
   uint8_t *ct2;
   uint32_t header_len;
   uint32_t sw_verify;
}__attribute__ ((packed)) aes_ccm_vector_type;

static aes_ccm_vector_type aes_ccm_test_vectors[] =
{
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CCM,
      aesccm128_plain_text_1, sizeof(aesccm128_plain_text_1), aesccm128_key_1,
      sizeof(aesccm128_key_1), aesccm_iv_1, aesccm128_nonce_1, sizeof(aesccm128_nonce_1),
      4, aesccm128_cipher_text_1, sizeof(aesccm128_cipher_text_1), aes_large_cipher_text3, 8, 0},

   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CCM,
      aesccm128_plain_text_2, sizeof(aesccm128_plain_text_2), aesccm128_key_2,
      sizeof(aesccm128_key_2), aesccm_iv_2, aesccm128_nonce_2, sizeof(aesccm128_nonce_2),
      16, aesccm128_cipher_text_2, sizeof(aesccm128_cipher_text_2), aes_large_cipher_text3, 16, 0},

   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CCM,
      aesccm128_plain_text_3, sizeof(aesccm128_plain_text_3), aesccm128_key_3,
      sizeof(aesccm128_key_3), aesccm_iv_3, aesccm128_nonce_3, sizeof(aesccm128_nonce_3),
      24, aesccm128_cipher_text_3, sizeof(aesccm128_cipher_text_3), aes_large_cipher_text3, 20, 0}
};

static aes_ccm_vector_type aes_ccm_test_vectors_1 =
{
   QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CCM,
      aes_large_plain_text2, 0, aesccm128_key_1, sizeof(aesccm128_key_1),
      aesccm_iv_1, aesccm128_nonce_1, sizeof(aesccm128_nonce_1),
      0, aes_large_cipher_text2, 0, aes_large_cipher_text3, 0, 1
};

//SW AES - CCM Vectors
static UINT8_A ccm128_key_1[] =
{
   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
   0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};
static UINT8_A ccm128_iv_1[] =
{
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16
};
static UINT8_A ccm128_header_data_1[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
};
static UINT8_A ccm128_plain_text_1[] =
{
   0x20, 0x21, 0x22, 0x23
};
static UINT8_A ccm128_cipher_text_1[] =
{
   0x71, 0x62, 0x01, 0x5b,
};
static UINT8_A ccm128_mac_data_1[] =
{
   0x4d, 0xac, 0x25, 0x5d
};

static UINT8_A ccm128_key_2[] =
{
   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
   0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};
static UINT8_A ccm128_iv_2[] =
{
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
};
static UINT8_A ccm128_header_data_2[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
};
static UINT8_A ccm128_plain_text_2[] =
{
   0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
   0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
};
static UINT8_A ccm128_cipher_text_2[] =
{
   0xd2, 0xa1, 0xf0, 0xe0, 0x51, 0xea, 0x5f, 0x62,
   0x08, 0x1a, 0x77, 0x92, 0x07, 0x3d, 0x59, 0x3d,
};
static UINT8_A ccm128_mac_data_2[] =
{
   0x1f, 0xc6, 0x4f, 0xbf, 0xac, 0xcd
};

static UINT8_A ccm128_key_3[] =
{
   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
   0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};
static UINT8_A ccm128_iv_3[] =
{
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   0x18, 0x19, 0x1a, 0x1b,
};
static UINT8_A ccm128_header_data_3[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
   0x10, 0x11, 0x12, 0x13
};
static UINT8_A ccm128_plain_text_3[] =
{
   0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
   0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
   0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37
};
static UINT8_A ccm128_cipher_text_3[] =
{
   0xe3, 0xb2, 0x01, 0xa9, 0xf5, 0xb7, 0x1a, 0x7a,
   0x9b, 0x1c, 0xea, 0xec, 0xcd, 0x97, 0xe7, 0x0b,
   0x61, 0x76, 0xaa, 0xd9, 0xa4, 0x42, 0x8a, 0xa5,
};
static UINT8_A ccm128_mac_data_3[] =
{
   0x48, 0x43, 0x92, 0xfb, 0xc1, 0xb0, 0x99, 0x51
};

typedef struct
{
   uint8_t*               pt;
   uint32_t               pt_len;
   uint8_t*               key;
   uint32_t               key_len;
   uint8_t*               iv;
   uint32_t               iv_len;
   uint8_t*               ct;
   uint8_t*               header;
   uint32_t               header_len;
   uint8_t*               mac;
   uint32_t               mac_len;
} __attribute__ ((packed)) uf_aes_ccm_vector_type;

uf_aes_ccm_vector_type aes_ccm_test_vectors_uf[] =
{
   { ccm128_plain_text_1, sizeof(ccm128_plain_text_1), ccm128_key_1, sizeof(ccm128_key_1),
      ccm128_iv_1, sizeof(ccm128_iv_1), ccm128_cipher_text_1, ccm128_header_data_1,
      sizeof(ccm128_header_data_1), ccm128_mac_data_1, sizeof(ccm128_mac_data_1) },

   { ccm128_plain_text_2, sizeof(ccm128_plain_text_2), ccm128_key_2, sizeof(ccm128_key_2),
      ccm128_iv_2, sizeof(ccm128_iv_2), ccm128_cipher_text_2, ccm128_header_data_2,
      sizeof(ccm128_header_data_2), ccm128_mac_data_2, sizeof(ccm128_mac_data_2) },

   { ccm128_plain_text_3, sizeof(ccm128_plain_text_3), ccm128_key_3, sizeof(ccm128_key_3),
      ccm128_iv_3, sizeof(ccm128_iv_3), ccm128_cipher_text_3, ccm128_header_data_3,
      sizeof(ccm128_header_data_3), ccm128_mac_data_3, sizeof(ccm128_mac_data_3) },
};

/******************************************************************************
AES TEST VECTORS
******************************************************************************/
typedef struct aes_vector_type
{
   QSEE_CIPHER_ALGO_ET  alg;
   QSEE_CIPHER_MODE_ET  mode;
   uint8_t*             pt;
   size_t               pt_len;
   uint8_t*             key;
   size_t               key_len;
   uint8_t*             iv;
   uint8_t*             ct;
} __attribute__ ((packed)) aes_vector_type_t;

typedef struct aes_vector_type_2
{
   QSEE_CIPHER_ALGO_ET  alg;
   QSEE_CIPHER_MODE_ET  mode;
   uint8_t*             pt;
   size_t               pt_len;
   uint8_t*             key;
   size_t               key_len;
   uint8_t*             iv;
   uint8_t*             ct;
   uint8_t*             ct2;
} __attribute__ ((packed)) aes_vector_type_2_t;

typedef struct uf_aes_vector_type
{
   SW_Cipher_Alg_Type   alg;
   SW_CipherModeType    mode;
   uint8_t*             pt;
   size_t               pt_len;
   uint8_t*             key;
   size_t               key_len;
   uint8_t*             iv;
   uint8_t*             ct;
} __attribute__ ((packed)) uf_aes_vector_type_t;

/* Generic AES key, IV */
static UINT8_A aes_key_1[] =
{
    0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
    0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
};

static UINT8_A aes_iv_1[] =
{
    0xab, 0xc1, 0xbe, 0xed, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
};

/* AES-128 ECB test vectors */
static UINT8_A aes_plain_text_ecb_1[] =
{
   0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
   0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF
};
static UINT8_A aes_key_ecb_1[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};
static UINT8_A aes_cipher_text_ecb_1[] =
{
   0x69, 0xC4, 0xE0, 0xD8, 0x6A, 0x7B, 0x04, 0x30,
   0xD8, 0xCD, 0xB7, 0x80, 0x70, 0xB4, 0xC5, 0x5A
};

static UINT8_A aes_plain_text_ecb_2[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aes_key_ecb_2[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aes_cipher_text_ecb_2[] =
{
   0x66, 0xE9, 0x4B, 0xD4, 0xEF, 0x8A, 0x2C, 0x3B,
   0x88, 0x4C, 0xFA, 0x59, 0xCA, 0x34, 0x2B, 0x2E
};

static UINT8_A aes_key_ecb_3[] =
{
   0xed, 0xfd, 0xb2, 0x57, 0xcb, 0x37, 0xcd, 0xf1,
   0x82, 0xc5, 0x45, 0x5b, 0x0c, 0x0e, 0xfe, 0xbb
};
static UINT8_A aes_plain_text_ecb_3[] =
{
   0x16, 0x95, 0xfe, 0x47, 0x54, 0x21, 0xca, 0xce,
   0x35, 0x57, 0xda, 0xca, 0x01, 0xf4, 0x45, 0xff
};
static UINT8_A aes_cipher_text_ecb_3[] =
{
   0x78, 0x88, 0xbe, 0xae, 0x6e, 0x7a, 0x42, 0x63,
   0x32, 0xa7, 0xea, 0xa2, 0xf8, 0x08, 0xe6, 0x37
};

static UINT8_A aes_plain_text_ecb_4[] = //multiblock
{
   0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
   0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
   0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C,
   0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
   0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11,
   0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
   0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
   0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
};
static UINT8_A aes_key_ecb_4[] =
{
   0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
   0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
};
static UINT8_A aes_cipher_text_ecb_4[] =
{
   0x3A, 0xD7, 0x7B, 0xB4, 0x0D, 0x7A, 0x36, 0x60,
   0xA8, 0x9E, 0xCA, 0xF3, 0x24, 0x66, 0xEF, 0x97,
   0xF5, 0xD3, 0xD5, 0x85, 0x03, 0xB9, 0x69, 0x9D,
   0xE7, 0x85, 0x89, 0x5A, 0x96, 0xFD, 0xBA, 0xAF,
   0x43, 0xB1, 0xCD, 0x7F, 0x59, 0x8E, 0xCE, 0x23,
   0x88, 0x1B, 0x00, 0xE3, 0xED, 0x03, 0x06, 0x88,
   0x7B, 0x0C, 0x78, 0x5E, 0x27, 0xE8, 0xAD, 0x3F,
   0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5D, 0xD4
};

static UINT8_A aes_key_ecb_5[] =
{
   0x77, 0x23, 0xd8, 0x7d, 0x77, 0x3a, 0x8b, 0xbf,
   0xe1, 0xae, 0x5b, 0x08, 0x12, 0x35, 0xb5, 0x66
};
static UINT8_A aes_plain_text_ecb_5[] =
{
   0x1b, 0x0a, 0x69, 0xb7, 0xbc, 0x53, 0x4c, 0x16,
   0xce, 0xcf, 0xfa, 0xe0, 0x2c, 0xc5, 0x32, 0x31,
   0x90, 0xce, 0xb4, 0x13, 0xf1, 0xdb, 0x3e, 0x9f,
   0x0f, 0x79, 0xba, 0x65, 0x4c, 0x54, 0xb6, 0x0e
};
static UINT8_A aes_cipher_text_ecb_5[] =
{
   0xad, 0x5b, 0x08, 0x95, 0x15, 0xe7, 0x82, 0x10,
   0x87, 0xc6, 0x16, 0x52, 0xdc, 0x47, 0x7a, 0xb1,
   0xf2, 0xcc, 0x63, 0x31, 0xa7, 0x0d, 0xfc, 0x59,
   0xc9, 0xff, 0xb0, 0xc7, 0x23, 0xc6, 0x82, 0xf6
};

static UINT8_A aes_key_ecb_6[] =
{
   0x28, 0x0a, 0xfe, 0x06, 0x32, 0x16, 0xa1, 0x0b,
   0x9c, 0xad, 0x9b, 0x20, 0x95, 0x55, 0x2b, 0x16
};
static UINT8_A aes_plain_text_ecb_6[] =
{
   0x6f, 0x17, 0x2b, 0xb6, 0xec, 0x36, 0x48, 0x33,
   0x41, 0x18, 0x41, 0xa8, 0xf9, 0xea, 0x20, 0x51,
   0x73, 0x5d, 0x60, 0x05, 0x38, 0xa9, 0xea, 0x5e,
   0x8c, 0xd2, 0x43, 0x1a, 0x43, 0x29, 0x03, 0xc1,
   0xd6, 0x17, 0x89, 0x88, 0xb6, 0x16, 0xed, 0x76,
   0xe0, 0x00, 0x36, 0xc5, 0xb2, 0x8c, 0xcd, 0x8b
};
static UINT8_A aes_cipher_text_ecb_6[] =
{
   0x4c, 0xc2, 0xa8, 0xf1, 0x3c, 0x8c, 0x7c, 0x36,
   0xed, 0x6a, 0x81, 0x4d, 0xb7, 0xf2, 0x69, 0x00,
   0xc7, 0xe0, 0x4d, 0xf4, 0x9c, 0xba, 0xd9, 0x16,
   0xce, 0x6a, 0x44, 0xd0, 0xae, 0x4f, 0xe7, 0xed,
   0xc0, 0xb4, 0x02, 0x79, 0x46, 0x75, 0xb3, 0x69,
   0x49, 0x33, 0xeb, 0xbc, 0x35, 0x65, 0x25, 0xd8
};

static UINT8_A aes_key_ecb_7[] =
{
   0xef, 0x60, 0xfb, 0x14, 0x00, 0xc8, 0x39, 0x36,
   0x41, 0x4a, 0x25, 0x65, 0x1e, 0xb5, 0x1a, 0x1b
};
static UINT8_A aes_plain_text_ecb_7[] =
{
   0x59, 0x35, 0x59, 0x31, 0x8c, 0xc6, 0x6b, 0xf6,
   0x95, 0xe4, 0x9f, 0xeb, 0x42, 0x79, 0x4b, 0xdf,
   0xb6, 0x6b, 0xce, 0x89, 0x5e, 0xc2, 0x22, 0xca,
   0x26, 0x09, 0xb1, 0x33, 0xec, 0xf6, 0x6a, 0xc7,
   0x34, 0x4d, 0x13, 0x02, 0x1e, 0x01, 0xe1, 0x1a,
   0x96, 0x9c, 0x46, 0x84, 0xcb, 0xe2, 0x0a, 0xba,
   0xe2, 0xb1, 0x9d, 0x3c, 0xeb, 0x2c, 0xac, 0xd4,
   0x14, 0x19, 0xf2, 0x1f, 0x1c, 0x86, 0x51, 0x49
};
static UINT8_A aes_cipher_text_ecb_7[] =
{
   0x3e, 0xa6, 0xf4, 0x30, 0x52, 0x17, 0xbd, 0x47,
   0xee, 0xbe, 0x77, 0x3d, 0xa4, 0xb5, 0x78, 0x54,
   0x9c, 0xac, 0x74, 0x4c, 0x00, 0xcb, 0xd8, 0xf9,
   0xd5, 0x96, 0xd3, 0x80, 0x10, 0x30, 0x4b, 0xd8,
   0x50, 0xcc, 0x2f, 0x4b, 0x19, 0xa9, 0x1c, 0x2e,
   0x02, 0x2e, 0xab, 0xf1, 0x00, 0x26, 0x61, 0x85,
   0xca, 0x27, 0x05, 0x12, 0x78, 0x15, 0xdf, 0xd4,
   0x6e, 0xfb, 0xe4, 0xec, 0xd4, 0x6a, 0x30, 0x58
};

static UINT8_A aes_key_ecb_8[] =
{
   0xc5, 0x80, 0x5c, 0xd1, 0xc4, 0xa7, 0xb9, 0x8a,
   0x71, 0x5b, 0xad, 0xb7, 0x09, 0x72, 0x0b, 0xf4
};
static UINT8_A aes_plain_text_ecb_8[] =
{
   0x84, 0xf8, 0x09, 0xfc, 0x5c, 0x84, 0x65, 0x23,
   0x76, 0xcc, 0x0d, 0xf1, 0x00, 0x95, 0xbc, 0x00,
   0xb9, 0xf0, 0x54, 0x7f, 0xa9, 0x1a, 0x2d, 0x33,
   0x10, 0xa0, 0xad, 0xbc, 0x9c, 0xc6, 0x19, 0x1a,
   0xde, 0x2a, 0xaa, 0x6f, 0xff, 0xa5, 0xe4, 0x06,
   0xaf, 0x72, 0x23, 0x95, 0x5f, 0x92, 0x77, 0xbf,
   0xb0, 0x6e, 0xb1, 0xdd, 0x2b, 0xbf, 0xbe, 0xfe,
   0x32, 0xab, 0x34, 0x2c, 0x36, 0x30, 0x2b, 0xf2,
   0x2b, 0xc6, 0x4e, 0x1b, 0x39, 0x40, 0x32, 0xbb,
   0xb5, 0xf4, 0xe6, 0x74, 0x4f, 0x1b, 0xcb, 0xf2
};
static UINT8_A aes_cipher_text_ecb_8[] =
{
   0xa6, 0xdc, 0x09, 0x6b, 0xc2, 0x1b, 0x06, 0x58,
   0xe4, 0x16, 0xa0, 0xf6, 0x79, 0xfe, 0xfc, 0x6e,
   0x95, 0x8e, 0x9c, 0x56, 0xe3, 0xce, 0x04, 0xfd,
   0xf6, 0xe3, 0x92, 0xc2, 0xdb, 0x77, 0x0a, 0x60,
   0xd9, 0x52, 0x3c, 0x25, 0x59, 0x25, 0xE1, 0x4A,
   0x3E, 0x02, 0xA1, 0x00, 0x2B, 0xF3, 0x87, 0x5C,
   0x2E, 0x50, 0x1B, 0xAC, 0x61, 0x8B, 0xEE, 0x1F,
   0x55, 0xF9, 0x85, 0x04, 0x54, 0x85, 0x4E, 0xEF,
   0x9D, 0x69, 0x3D, 0x90, 0x93, 0x7C, 0xC8, 0x38,
   0x7B, 0x6F, 0x4C, 0x44, 0x14, 0xE2, 0x08, 0x0B
};

static UINT8_A aes_key_ecb_9[] =
{
   0x4C, 0x35, 0xBE, 0x02, 0x8E, 0x14, 0x75, 0x27,
   0x83, 0x46, 0xEA, 0xE5, 0x31, 0xCB, 0xEE, 0x5C
};
static UINT8_A aes_plain_text_ecb_9[] =
{
   0x7A, 0xDC, 0xF4, 0xA4, 0x94, 0xF6, 0xB0, 0x97,
   0x90, 0xC8, 0x2C, 0x8B, 0xB9, 0x7D, 0xB6, 0x2C,
   0x5D, 0x3F, 0xA4, 0x03, 0x2F, 0x06, 0xDF, 0xEC,
   0xEA, 0xAD, 0x9E, 0xCB, 0x37, 0x4B, 0x74, 0x7B,
   0xD1, 0xC0, 0x8D, 0x07, 0xE7, 0x8E, 0x35, 0x1D,
   0xC2, 0xEB, 0x99, 0xBF, 0xA7, 0x14, 0xD2, 0x3C,
   0xFF, 0xE3, 0x1F, 0x5F, 0xB5, 0xA4, 0x72, 0xE6,
   0xE0, 0x25, 0x2F, 0x35, 0xA2, 0x0C, 0x30, 0x4C,
   0x4F, 0x6D, 0x0C, 0xF7, 0xD2, 0x9C, 0x99, 0x44,
   0x4D, 0x40, 0xAF, 0x3A, 0x00, 0xA9, 0x2F, 0xC8,
   0x6C, 0x64, 0x44, 0xFC, 0xB8, 0x0C, 0xE9, 0x76,
   0x53, 0x62, 0xAC, 0x1B, 0xDB, 0xA0, 0xB1, 0x0E

};
static UINT8_A aes_cipher_text_ecb_9[] =
{
   0x22, 0x21, 0x79, 0x53, 0xF7, 0x19, 0x32, 0xAB,
   0x43, 0x60, 0xD9, 0x7E, 0xF4, 0x95, 0x08, 0x15,
   0x59, 0xF1, 0xFC, 0xB0, 0x9C, 0xAC, 0xA4, 0x1F,
   0xA0, 0xC6, 0x5F, 0x7B, 0x17, 0x92, 0xB5, 0x60,
   0xEA, 0xBE, 0x18, 0xF3, 0xB3, 0xB0, 0x6E, 0xF8,
   0x0C, 0x41, 0x88, 0x6F, 0x24, 0xC5, 0xD6, 0xD3,
   0x2D, 0x20, 0x42, 0x7E, 0x83, 0xD8, 0xB5, 0x56,
   0x4D, 0x9A, 0xC7, 0x43, 0x5A, 0x28, 0x42, 0xC1,
   0xCF, 0x7C, 0x6F, 0xCC, 0x22, 0x9E, 0xB7, 0xF5,
   0x18, 0xD3, 0xE0, 0x16, 0x7D, 0x51, 0x0E, 0xFB,
   0xAE, 0xE3, 0x9A, 0x04, 0x38, 0xFC, 0x80, 0x0E,
   0xB6, 0xAC, 0xFC, 0x20, 0x3C, 0x93, 0x28, 0x0C
};

static UINT8_A aes_key_ecb_10[] =
{
   0x00, 0xCC, 0x73, 0xC9, 0x90, 0xD3, 0x76, 0xB8,
   0x22, 0x46, 0xE4, 0x5E, 0xA3, 0xAE, 0x2E, 0x37
};
static UINT8_A aes_plain_text_ecb_10[] =
{
   0x37, 0xA1, 0x20, 0x5E, 0xA9, 0x29, 0x35, 0x5D,
   0x2E, 0x4E, 0xE5, 0x2D, 0x5E, 0x1D, 0x9C, 0xDA,
   0x27, 0x9A, 0xE0, 0x1E, 0x64, 0x02, 0x87, 0xCC,
   0xB1, 0x53, 0x27, 0x6E, 0x7E, 0x0E, 0xCF, 0x2D,
   0x63, 0x3C, 0xF4, 0xF2, 0xB3, 0xAF, 0xAE, 0xCB,
   0x54, 0x8A, 0x25, 0x90, 0xCE, 0x04, 0x45, 0xC6,
   0xA1, 0x68, 0xBA, 0xC3, 0xDC, 0x60, 0x18, 0x13,
   0xEB, 0x74, 0x59, 0x1B, 0xB1, 0xCE, 0x8D, 0xFC,
   0xD7, 0x40, 0xCD, 0xBB, 0x63, 0x88, 0x71, 0x9E,
   0x8C, 0xD2, 0x83, 0xD9, 0xCC, 0x7E, 0x73, 0x69,
   0x38, 0x24, 0x0B, 0x41, 0x0D, 0xD5, 0xA6, 0xA4,
   0x8B, 0xA4, 0x9D, 0xD2, 0x06, 0x65, 0x03, 0xE6,
   0x3A, 0xB5, 0x92, 0xFF, 0xDF, 0x3B, 0xE4, 0x9E,
   0x7D, 0x2D, 0xE7, 0x4F, 0x82, 0x15, 0x8B, 0x8C
};
static UINT8_A aes_cipher_text_ecb_10[] =
{
   0xC8, 0x8E, 0x03, 0x38, 0x3B, 0xA9, 0xDA, 0x6F,
   0x98, 0x2C, 0x05, 0x7F, 0xE9, 0x2C, 0x0B, 0xB3,
   0xED, 0x5B, 0x9C, 0xD1, 0x82, 0x95, 0xA1, 0x00,
   0xE1, 0x3A, 0x4E, 0x12, 0xD4, 0x40, 0xB9, 0x19,
   0xBB, 0xB8, 0xB2, 0x21, 0xAB, 0xEA, 0xD3, 0x62,
   0x90, 0x2C, 0xE4, 0x4D, 0x30, 0xD0, 0xB8, 0x0E,
   0x56, 0xBE, 0xE1, 0xF6, 0x6A, 0x7D, 0x8D, 0xE0,
   0xB1, 0xE1, 0xB4, 0xDB, 0xF7, 0x6C, 0x90, 0xC1,
   0x80, 0x7A, 0x3B, 0xC5, 0xF2, 0x77, 0xE9, 0x81,
   0x4C, 0x82, 0xAB, 0x12, 0x0F, 0x7E, 0x10, 0x21,
   0x7D, 0xFD, 0xF6, 0x09, 0x2C, 0xE4, 0x95, 0x8F,
   0x89, 0x06, 0xC5, 0xE3, 0x22, 0x79, 0xC6, 0x53,
   0x7D, 0xD1, 0xFB, 0xAE, 0x20, 0xCB, 0x7A, 0x1D,
   0x9F, 0x89, 0xD0, 0x49, 0x0B, 0x6A, 0xEF, 0xC1
};

static UINT8_A aes_key_ecb_11[] =
{
   0x0A, 0x53, 0xAA, 0x7A, 0x3E, 0x4A, 0x4F, 0x36,
   0x4E, 0x8C, 0x6C, 0x72, 0x24, 0xAF, 0x55, 0x01
};
static UINT8_A aes_plain_text_ecb_11[] =
{
   0xEA, 0xF1, 0x76, 0x0C, 0x0F, 0x25, 0x31, 0x0D,
   0xAD, 0xA6, 0xDE, 0xBE, 0xB9, 0x66, 0x30, 0x4D,
   0xB7, 0xA9, 0xF1, 0xB2, 0xD1, 0xC3, 0xAF, 0x92,
   0x26, 0x23, 0xB2, 0x63, 0x64, 0x90, 0x31, 0xD2,
   0x99, 0xB3, 0xC5, 0x61, 0x46, 0xD6, 0x1D, 0x55,
   0xB6, 0xEB, 0xF4, 0xCF, 0x8D, 0xD0, 0x40, 0x39,
   0xA4, 0xD1, 0xAC, 0xE3, 0x14, 0x6F, 0x49, 0xEE,
   0x91, 0x5F, 0x80, 0x6A, 0xFA, 0xD6, 0x4C, 0xBB,
   0x2D, 0x04, 0xA6, 0x41, 0x20, 0xDE, 0x40, 0x38,
   0x2E, 0x21, 0x75, 0xDC, 0xAE, 0x94, 0x80, 0xD1,
   0xCA, 0x8D, 0xED, 0xC3, 0x8F, 0xB6, 0x4E, 0x4A,
   0x40, 0x11, 0x2F, 0x10, 0xF0, 0x3A, 0x4C, 0x35,
   0x4F, 0xED, 0x01, 0xF2, 0xC5, 0xC7, 0x01, 0x7D,
   0xBD, 0x51, 0x4B, 0x2D, 0x44, 0x3A, 0x5A, 0xDF,
   0xD2, 0xE4, 0x9C, 0x98, 0x67, 0x23, 0x26, 0x6C,
   0xDA, 0x41, 0xA6, 0x9E, 0x6E, 0x45, 0x99, 0x08

};
static UINT8_A aes_cipher_text_ecb_11[] =
{
   0x5E, 0xCE, 0x70, 0xA4, 0x4D, 0xA4, 0x1B, 0xC7,
   0xCF, 0xB9, 0xB5, 0x82, 0xEA, 0x9C, 0xE0, 0x98,
   0x00, 0x30, 0xEC, 0x4A, 0xF3, 0x31, 0xE7, 0x64,
   0x99, 0x96, 0x1F, 0x88, 0x86, 0x0A, 0xA0, 0x55,
   0x4A, 0xBA, 0x3E, 0xCB, 0xF7, 0x7C, 0xA4, 0x29,
   0x3A, 0x3F, 0xEE, 0x85, 0x4A, 0x2C, 0xAF, 0x3A,
   0xE8, 0x00, 0x34, 0x3F, 0xB4, 0x52, 0x13, 0x88,
   0xB1, 0x6B, 0x6D, 0xC5, 0x99, 0xB3, 0xD6, 0x0B,
   0xF8, 0x27, 0x77, 0xF9, 0x8E, 0x1A, 0x8D, 0x04,
   0xAB, 0x9C, 0xD5, 0x4D, 0xD9, 0xA2, 0x48, 0x09,
   0x57, 0x95, 0xD4, 0xDF, 0xE4, 0x85, 0x8B, 0xFD,
   0x9A, 0x05, 0xF5, 0x4C, 0x79, 0x5B, 0xB0, 0x86,
   0xE1, 0x5F, 0x7C, 0x22, 0x22, 0x81, 0x84, 0xEC,
   0x66, 0xA9, 0xCA, 0x10, 0xB1, 0xCF, 0x71, 0xA6,
   0xBB, 0x93, 0x03, 0xC5, 0xCD, 0x1D, 0xCC, 0x05,
   0x64, 0x60, 0xA8, 0x6D, 0xF6, 0x51, 0xF0, 0x53

};

static UINT8_A aes_key_ecb_12[] =
{
   0xB8, 0x0B, 0xCC, 0x92, 0x90, 0x52, 0xCB, 0x54,
   0x50, 0x47, 0x94, 0x42, 0xE2, 0xB8, 0x09, 0xCE
};
static UINT8_A aes_plain_text_ecb_12[] =
{
   0x81, 0x77, 0xD7, 0x9C, 0x8F, 0x23, 0x91, 0x78,
   0x18, 0x6B, 0x4D, 0xC5, 0xF1, 0xDF, 0x2E, 0xA7,
   0xFE, 0xE7, 0xD0, 0xDB, 0x53, 0x54, 0x89, 0xEF,
   0x98, 0x3A, 0xEF, 0xB3, 0xB2, 0x02, 0x9A, 0xEB,
   0xA0, 0xBB, 0x2B, 0x46, 0xA2, 0xB1, 0x8C, 0x94,
   0xA1, 0x41, 0x7A, 0x33, 0xCB, 0xEB, 0x41, 0xCA,
   0x7E, 0xA9, 0xC7, 0x3A, 0x67, 0x7F, 0xCC, 0xD2,
   0xEB, 0x54, 0x70, 0xC3, 0xC5, 0x00, 0xF6, 0xD3,
   0xF1, 0xA6, 0xC7, 0x55, 0xC9, 0x44, 0xBA, 0x58,
   0x6F, 0x88, 0x92, 0x1F, 0x6A, 0xE6, 0xC9, 0xD1,
   0x94, 0xE7, 0x8C, 0x72, 0x33, 0xC4, 0x06, 0x12,
   0x66, 0x33, 0xE1, 0x44, 0xC3, 0x81, 0x0A, 0xD2,
   0x3E, 0xE1, 0xB5, 0xAF, 0x4C, 0x04, 0xA2, 0x2D,
   0x49, 0xE9, 0x9E, 0x70, 0x17, 0xF7, 0x4C, 0x23,
   0x09, 0x49, 0x25, 0x69, 0xFF, 0x49, 0xBE, 0x17,
   0xD2, 0x80, 0x49, 0x20, 0xF2, 0xAC, 0x5F, 0x51,
   0x4D, 0x13, 0xFD, 0x3E, 0x73, 0x18, 0xCC, 0x7C,
   0xF8, 0x0C, 0xA5, 0x10, 0x1A, 0x46, 0x54, 0x28
};
static UINT8_A aes_cipher_text_ecb_12[] =
{
   0x5B, 0xEF, 0xB3, 0x06, 0x2A, 0x7A, 0x72, 0x46,
   0xAF, 0x1F, 0x77, 0xB0, 0xEC, 0x0A, 0xC6, 0x14,
   0xE2, 0x8B, 0xE0, 0x6A, 0xC2, 0xC8, 0x1B, 0x19,
   0xE5, 0xA0, 0x48, 0x1B, 0xF1, 0x60, 0xF9, 0xF2,
   0xBC, 0x43, 0xF2, 0x8F, 0x65, 0x48, 0x78, 0x76,
   0x39, 0xE4, 0xCE, 0x3E, 0x0F, 0x1E, 0x95, 0x47,
   0x5F, 0x0E, 0x81, 0xCE, 0xB7, 0x93, 0x00, 0x4C,
   0x8E, 0x46, 0x67, 0x0E, 0xBD, 0x48, 0xB8, 0x66,
   0xD5, 0xB4, 0x3D, 0x10, 0x48, 0x74, 0xEA, 0xD4,
   0xBE, 0x8A, 0x23, 0x6B, 0xF9, 0x0B, 0x48, 0xF8,
   0x62, 0xF7, 0xE2, 0x52, 0xDE, 0xC4, 0x47, 0x5F,
   0xDB, 0xB8, 0x41, 0xA6, 0x62, 0xEF, 0xCD, 0x25,
   0xED, 0x64, 0xB2, 0x91, 0x0E, 0x9B, 0xAA, 0xEA,
   0x94, 0x66, 0xE4, 0x13, 0xA4, 0x24, 0x14, 0x38,
   0xB3, 0x1D, 0xF0, 0xBD, 0x3D, 0xF9, 0xA1, 0x6F,
   0x46, 0x41, 0x63, 0x67, 0x54, 0xE2, 0x59, 0x86,
   0x17, 0x28, 0xAA, 0x7D, 0xDF, 0x43, 0x5C, 0xC5,
   0x1F, 0x54, 0xF7, 0x9A, 0x1D, 0xB2, 0x5F, 0x52
};

static UINT8_A aes_key_ecb_13[] =
{
   0xEB, 0xEA, 0x9C, 0x6A, 0x82, 0x21, 0x3A, 0x00,
   0xAC, 0x1D, 0x22, 0xFA, 0xEA, 0x22, 0x11, 0x6F
};
static UINT8_A aes_plain_text_ecb_13[] =
{
   0x45, 0x1F, 0x45, 0x66, 0x3B, 0x44, 0xFD, 0x00,
   0x5F, 0x3C, 0x28, 0x8A, 0xE5, 0x7B, 0x38, 0x38,
   0x83, 0xF0, 0x2D, 0x9A, 0xD3, 0xDC, 0x17, 0x15,
   0xF9, 0xE3, 0xD6, 0x94, 0x85, 0x64, 0x25, 0x7B,
   0x9B, 0x06, 0xD7, 0xDD, 0x51, 0x93, 0x5F, 0xEE,
   0x58, 0x0A, 0x96, 0xBB, 0xDF, 0xEF, 0xB9, 0x18,
   0xB4, 0xE6, 0xB1, 0xDA, 0xAC, 0x80, 0x98, 0x47,
   0x46, 0x55, 0x78, 0xCB, 0x8B, 0x53, 0x56, 0xED,
   0x38, 0x55, 0x6F, 0x80, 0x1F, 0xF7, 0xC1, 0x1E,
   0xCB, 0xA9, 0xCD, 0xD2, 0x63, 0x03, 0x9C, 0x15,
   0xD0, 0x59, 0x00, 0xFC, 0x22, 0x8E, 0x1C, 0xAF,
   0x30, 0x2D, 0x26, 0x1D, 0x7F, 0xB5, 0x6C, 0xEE,
   0x66, 0x35, 0x95, 0xB9, 0x6F, 0x19, 0x2A, 0x78,
   0xFF, 0x44, 0x55, 0x39, 0x3A, 0x5F, 0xE8, 0x16,
   0x21, 0x70, 0xA0, 0x66, 0xFD, 0xAE, 0xAC, 0x35,
   0x01, 0x94, 0x69, 0xF2, 0x2B, 0x34, 0x70, 0x68,
   0x6B, 0xCE, 0xD2, 0xF0, 0x07, 0xA1, 0xA2, 0xE4,
   0x3E, 0x01, 0xB4, 0x56, 0x2C, 0xAA, 0xA5, 0x02,
   0xED, 0x54, 0x1B, 0x82, 0x05, 0x87, 0x4E, 0xC1,
   0xFF, 0xB1, 0xC8, 0xB2, 0x55, 0x76, 0x69, 0x42

};
static UINT8_A aes_cipher_text_ecb_13[] =
{
   0x01, 0x04, 0x30, 0x53, 0xF8, 0x32, 0xEF, 0x9B,
   0x91, 0x1E, 0xD3, 0x87, 0xBA, 0x57, 0x74, 0x51,
   0xE3, 0x0D, 0x51, 0xD4, 0xB6, 0xB1, 0x1F, 0x31,
   0x9D, 0x4C, 0xD5, 0x39, 0xD0, 0x67, 0xB7, 0xF4,
   0xF9, 0xB4, 0xF4, 0x1F, 0x7F, 0x3D, 0x4E, 0x92,
   0x0C, 0x57, 0xCB, 0xE2, 0xB5, 0xE1, 0x88, 0x5A,
   0xA6, 0x62, 0x03, 0xAE, 0x49, 0x3E, 0x93, 0xA1,
   0xDF, 0x63, 0x79, 0x3A, 0x95, 0x63, 0xC1, 0x76,
   0xBC, 0x67, 0x75, 0xDD, 0x09, 0xCC, 0x91, 0x61,
   0xE2, 0x78, 0xA0, 0x1B, 0xEB, 0x8F, 0xD8, 0xA1,
   0x92, 0x00, 0x32, 0x6B, 0xD9, 0x5A, 0xBC, 0x5F,
   0x71, 0x67, 0x68, 0xE3, 0x4F, 0x90, 0xB5, 0x05,
   0x23, 0xD3, 0x0F, 0xDA, 0xBB, 0x10, 0x3A, 0x3B,
   0xC0, 0x20, 0xAF, 0xBB, 0xB0, 0xCB, 0x3B, 0xD2,
   0xAD, 0x51, 0x2A, 0x6F, 0xEA, 0x79, 0xF8, 0xD6,
   0x4C, 0xEF, 0x34, 0x74, 0x58, 0xDE, 0xC4, 0x8B,
   0xE8, 0x94, 0x51, 0xCB, 0x0B, 0x80, 0x7D, 0x73,
   0x59, 0x3F, 0x27, 0x3D, 0x9F, 0xC5, 0x21, 0xB7,
   0x89, 0xA7, 0x75, 0x24, 0x40, 0x4F, 0x43, 0xE0,
   0x0F, 0x20, 0xB3, 0xB7, 0x7B, 0x93, 0x8B, 0x1A
};

aes_vector_type_t aes_ecb_test_vectors[] =
{
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_1, //0
      sizeof(aes_plain_text_ecb_1), aes_key_ecb_1, 16, NULL,
      aes_cipher_text_ecb_1},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_2, //1
      sizeof(aes_plain_text_ecb_2), aes_key_ecb_2, 16, NULL,
      aes_cipher_text_ecb_2},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_3, //2
      sizeof(aes_plain_text_ecb_3), aes_key_ecb_3, 16, NULL,
      aes_cipher_text_ecb_3},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_4, //3
      sizeof(aes_plain_text_ecb_4), aes_key_ecb_4, 16, NULL,
      aes_cipher_text_ecb_4},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_5, //4
      sizeof(aes_plain_text_ecb_5), aes_key_ecb_5, 16, NULL,
      aes_cipher_text_ecb_5},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_6, //5
      sizeof(aes_plain_text_ecb_6), aes_key_ecb_6, 16, NULL,
      aes_cipher_text_ecb_6},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_7, //6
      sizeof(aes_plain_text_ecb_7), aes_key_ecb_7, 16, NULL,
      aes_cipher_text_ecb_7},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_8, //7
      sizeof(aes_plain_text_ecb_8), aes_key_ecb_8, 16, NULL,
      aes_cipher_text_ecb_8},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_9, //8
      sizeof(aes_plain_text_ecb_9), aes_key_ecb_9, 16, NULL,
      aes_cipher_text_ecb_9},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_10, //9
      sizeof(aes_plain_text_ecb_10), aes_key_ecb_10, 16, NULL,
      aes_cipher_text_ecb_10},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_11, //10
      sizeof(aes_plain_text_ecb_11), aes_key_ecb_11, 16, NULL,
      aes_cipher_text_ecb_11},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_12, //11
      sizeof(aes_plain_text_ecb_12), aes_key_ecb_12, 16, NULL,
      aes_cipher_text_ecb_12},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_13, //12
      sizeof(aes_plain_text_ecb_13), aes_key_ecb_13, 16, NULL,
      aes_cipher_text_ecb_13}

};

uf_aes_vector_type_t sw_aes_ecb_test_vectors[] =
{
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_1, //0
      sizeof(aes_plain_text_ecb_1), aes_key_ecb_1, 16, NULL,
      aes_cipher_text_ecb_1},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_2, //1
      sizeof(aes_plain_text_ecb_2), aes_key_ecb_2, 16, NULL,
      aes_cipher_text_ecb_2},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_3, //2
      sizeof(aes_plain_text_ecb_3), aes_key_ecb_3, 16, NULL,
      aes_cipher_text_ecb_3},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_4, //3
      sizeof(aes_plain_text_ecb_4), aes_key_ecb_4, 16, NULL,
      aes_cipher_text_ecb_4},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_5, //4
      sizeof(aes_plain_text_ecb_5), aes_key_ecb_5, 16, NULL,
      aes_cipher_text_ecb_5},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_6, //5
      sizeof(aes_plain_text_ecb_6), aes_key_ecb_6, 16, NULL,
      aes_cipher_text_ecb_6},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_7, //6
      sizeof(aes_plain_text_ecb_7), aes_key_ecb_7, 16, NULL,
      aes_cipher_text_ecb_7},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_8, //7
      sizeof(aes_plain_text_ecb_8), aes_key_ecb_8, 16, NULL,
      aes_cipher_text_ecb_8},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_9, //8
      sizeof(aes_plain_text_ecb_9), aes_key_ecb_9, 16, NULL,
      aes_cipher_text_ecb_9},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_10, //9
      sizeof(aes_plain_text_ecb_10), aes_key_ecb_10, 16, NULL,
      aes_cipher_text_ecb_10},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_11, //10
      sizeof(aes_plain_text_ecb_11), aes_key_ecb_11, 16, NULL,
      aes_cipher_text_ecb_11},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_12, //11
      sizeof(aes_plain_text_ecb_12), aes_key_ecb_12, 16, NULL,
      aes_cipher_text_ecb_12},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_13, //12
      sizeof(aes_plain_text_ecb_13), aes_key_ecb_13, 16, NULL,
      aes_cipher_text_ecb_13}

};

/* AES-128 CBC test vectors */
static UINT8_A aes_plain_text_cbc_1[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aes_key_cbc_1[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aes_iv_cbc_1[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aes_cipher_text_cbc_1[] =
{
   0x66, 0xE9, 0x4B, 0xD4, 0xEF, 0x8A, 0x2C, 0x3B,
   0x88, 0x4C, 0xFA, 0x59, 0xCA, 0x34, 0x2B, 0x2E
};

static UINT8_A aes_plain_text_cbc_2[] =
{
   0x45, 0xCF, 0x12, 0x96, 0x4F, 0xC8, 0x24, 0xAB,
   0x76, 0x61, 0x6A, 0xE2, 0xF4, 0xBF, 0x08, 0x22
};
static UINT8_A aes_key_cbc_2[] =
{
   0x1F, 0x8E, 0x49, 0x73, 0x95, 0x3F, 0x3F, 0xB0,
   0xBD, 0x6B, 0x16, 0x66, 0x2E, 0x9A, 0x3C, 0x17
};
static UINT8_A aes_iv_cbc_2[] =
{
   0x2F, 0xE2, 0xB3, 0x33, 0xCE, 0xDA, 0x8F, 0x98,
   0xF4, 0xA9, 0x9B, 0x40, 0xD2, 0xCD, 0x34, 0xA8
};
static UINT8_A aes_cipher_text_cbc_2[] =
{
   0x0F, 0x61, 0xC4, 0xD4, 0x4C, 0x51, 0x47, 0xC0,
   0x3C, 0x19, 0x5A, 0xD7, 0xE2, 0xCC, 0x12, 0xB2
};

static UINT8_A aes_plain_text_cbc_3[] = //multiblock
{
   0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
   0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
   0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C,
   0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
   0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11,
   0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
   0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
   0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
};
static UINT8_A aes_key_cbc_3[] =
{
   0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
   0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
};
static UINT8_A aes_iv_cbc_3[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};
static UINT8_A aes_cipher_text_cbc_3[] =
{
   0x76, 0x49, 0xAB, 0xAC, 0x81, 0x19, 0xB2, 0x46,
   0xCE, 0xE9, 0x8E, 0x9B, 0x12, 0xE9, 0x19, 0x7D,
   0x50, 0x86, 0xCB, 0x9B, 0x50, 0x72, 0x19, 0xEE,
   0x95, 0xDB, 0x11, 0x3A, 0x91, 0x76, 0x78, 0xB2,
   0x73, 0xBE, 0xD6, 0xB8, 0xE3, 0xC1, 0x74, 0x3B,
   0x71, 0x16, 0xE6, 0x9E, 0x22, 0x22, 0x95, 0x16,
   0x3F, 0xF1, 0xCA, 0xA1, 0x68, 0x1F, 0xAC, 0x09,
   0x12, 0x0E, 0xCA, 0x30, 0x75, 0x86, 0xE1, 0xA7
};

static UINT8_A aes_plain_text_cbc_4[] =
{
   0x06, 0x8B, 0x25, 0xC7, 0xBF, 0xB1, 0xF8, 0xBD,
   0xD4, 0xCF, 0xC9, 0x08, 0xF6, 0x9D, 0xFF, 0xC5,
   0xDD, 0xC7, 0x26, 0xA1, 0x97, 0xF0, 0xE5, 0xF7,
   0x20, 0xF7, 0x30, 0x39, 0x32, 0x79, 0xBE, 0x91
};
static UINT8_A aes_key_cbc_4[] =
{
   0x07, 0x00, 0xD6, 0x03, 0xA1, 0xC5, 0x14, 0xE4,
   0x6B, 0x61, 0x91, 0xBA, 0x43, 0x0A, 0x3A, 0x0C
};
static UINT8_A aes_iv_cbc_4[] =
{
   0xAA, 0xD1, 0x58, 0x3C, 0xD9, 0x13, 0x65, 0xE3,
   0xBB, 0x2F, 0x0C, 0x34, 0x30, 0xD0, 0x65, 0xBB
};
static UINT8_A aes_cipher_text_cbc_4[] =
{
   0xC4, 0xDC, 0x61, 0xD9, 0x72, 0x59, 0x67, 0xA3,
   0x02, 0x01, 0x04, 0xA9, 0x73, 0x8F, 0x23, 0x86,
   0x85, 0x27, 0xCE, 0x83, 0x9A, 0xAB, 0x17, 0x52,
   0xFD, 0x8B, 0xDB, 0x95, 0xA8, 0x2C, 0x4D, 0x00
};

static UINT8_A aes_plain_text_cbc_5[] =
{
   0x9B, 0x7C, 0xEE, 0x82, 0x7A, 0x26, 0x57, 0x5A,
   0xFD, 0xBB, 0x7C, 0x7A, 0x32, 0x9F, 0x88, 0x72,
   0x38, 0x05, 0x2E, 0x36, 0x01, 0xA7, 0x91, 0x74,
   0x56, 0xBA, 0x61, 0x25, 0x1C, 0x21, 0x47, 0x63,
   0xD5, 0xE1, 0x84, 0x7A, 0x6A, 0xD5, 0xD5, 0x41,
   0x27, 0xA3, 0x99, 0xAB, 0x07, 0xEE, 0x35, 0x99
};
static UINT8_A aes_key_cbc_5[] =
{
   0x33, 0x48, 0xAA, 0x51, 0xE9, 0xA4, 0x5C, 0x2D,
   0xBE, 0x33, 0xCC, 0xC4, 0x7F, 0x96, 0xE8, 0xDE
};
static UINT8_A aes_iv_cbc_5[] =
{
   0x19, 0x15, 0x3C, 0x67, 0x31, 0x60, 0xDF, 0x2B,
   0x1D, 0x38, 0xC2, 0x80, 0x60, 0xE5, 0x9B, 0x96
};
static UINT8_A aes_cipher_text_cbc_5[] =
{
   0xD5, 0xAE, 0xD6, 0xC9, 0x62, 0x2E, 0xC4, 0x51,
   0xA1, 0x5D, 0xB1, 0x28, 0x19, 0x95, 0x2B, 0x67,
   0x52, 0x50, 0x1C, 0xF0, 0x5C, 0xDB, 0xF8, 0xCD,
   0xA3, 0x4A, 0x45, 0x77, 0x26, 0xDE, 0xD9, 0x78,
   0x18, 0xE1, 0xF1, 0x27, 0xA2, 0x8D, 0x72, 0xDB,
   0x56, 0x52, 0x74, 0x9F, 0x0C, 0x6A, 0xFE, 0xE5
};

static UINT8_A aes_plain_text_cbc_6[] =
{
   0x9A, 0xC1, 0x99, 0x54, 0xCE, 0x13, 0x19, 0xB3,
   0x54, 0xD3, 0x22, 0x04, 0x60, 0xF7, 0x1C, 0x1E,
   0x37, 0x3F, 0x1C, 0xD3, 0x36, 0x24, 0x08, 0x81,
   0x16, 0x0C, 0xFD, 0xE4, 0x6E, 0xBF, 0xED, 0x2E,
   0x79, 0x1E, 0x8D, 0x5A, 0x1A, 0x13, 0x6E, 0xBD,
   0x1D, 0xC4, 0x69, 0xDE, 0xC0, 0x0C, 0x41, 0x87,
   0x72, 0x2B, 0x84, 0x1C, 0xDA, 0xBC, 0xB2, 0x2C,
   0x1B, 0xE8, 0xA1, 0x46, 0x57, 0xDA, 0x20, 0x0E,
};
static UINT8_A aes_key_cbc_6[] =
{
   0xB7, 0xF3, 0xC9, 0x57, 0x6E, 0x12, 0xDD, 0x0D,
   0xB6, 0x3E, 0x8F, 0x8F, 0xAC, 0x2B, 0x9A, 0x39
};
static UINT8_A aes_iv_cbc_6[] =
{
   0xC8, 0x0F, 0x09, 0x5D, 0x8B, 0xB1, 0xA0, 0x60,
   0x69, 0x9F, 0x7C, 0x19, 0x97, 0x4A, 0x1A, 0xA0
};
static UINT8_A aes_cipher_text_cbc_6[] =
{
   0x19, 0xB9, 0x60, 0x97, 0x72, 0xC6, 0x3F, 0x33,
   0x86, 0x08, 0xBF, 0x6E, 0xB5, 0x2C, 0xA1, 0x0B,
   0xE6, 0x50, 0x97, 0xF8, 0x9C, 0x1E, 0x09, 0x05,
   0xC4, 0x24, 0x01, 0xFD, 0x47, 0x79, 0x1A, 0xE2,
   0xC5, 0x44, 0x0B, 0x2D, 0x47, 0x31, 0x16, 0xCA,
   0x78, 0xBD, 0x9F, 0xF2, 0xFB, 0x60, 0x15, 0xCF,
   0xD3, 0x16, 0x52, 0x4E, 0xAE, 0x7D, 0xCB, 0x95,
   0xAE, 0x73, 0x8E, 0xBE, 0xAE, 0x84, 0xA4, 0x67
};

static UINT8_A aes_plain_text_cbc_7[] =
{
   0xDB, 0x39, 0x7E, 0xC2, 0x27, 0x18, 0xDB, 0xFF,
   0xB9, 0xC9, 0xD1, 0x3D, 0xE0, 0xEF, 0xCD, 0x46,
   0x11, 0xBF, 0x79, 0x2B, 0xE4, 0xFC, 0xE0, 0xDC,
   0x5F, 0x25, 0xD4, 0xF5, 0x77, 0xED, 0x8C, 0xDB,
   0xD4, 0xEB, 0x92, 0x08, 0xD5, 0x93, 0xDD, 0xA3,
   0xD4, 0x65, 0x39, 0x54, 0xAB, 0x64, 0xF0, 0x56,
   0x76, 0xCA, 0xA3, 0xCE, 0x9B, 0xFA, 0x79, 0x5B,
   0x08, 0xB6, 0x7C, 0xEE, 0xBC, 0x92, 0x3F, 0xDC,
   0x89, 0xA8, 0xC4, 0x31, 0x18, 0x8E, 0x9E, 0x48,
   0x2D, 0x85, 0x53, 0x98, 0x2C, 0xF3, 0x04, 0xD1
};
static UINT8_A aes_key_cbc_7[] =
{
   0xB6, 0xF9, 0xAF, 0xBF, 0xE5, 0xA1, 0x56, 0x2B,
   0xBA, 0x13, 0x68, 0xFC, 0x72, 0xAC, 0x9D, 0x9C
};
static UINT8_A aes_iv_cbc_7[] =
{
   0x3F, 0x9D, 0x5E, 0xBE, 0x25, 0x0E, 0xE7, 0xCE,
   0x38, 0x4B, 0x0D, 0x00, 0xEE, 0x84, 0x93, 0x22
};
static UINT8_A aes_cipher_text_cbc_7[] =
{
   0x10, 0xEA, 0x27, 0xB1, 0x9E, 0x16, 0xB9, 0x3A,
   0xF1, 0x69, 0xC4, 0xA8, 0x8E, 0x06, 0xE3, 0x5C,
   0x99, 0xD8, 0xB4, 0x20, 0x98, 0x0B, 0x05, 0x8E,
   0x34, 0xB4, 0xB8, 0xF1, 0x32, 0xB1, 0x37, 0x66,
   0xF7, 0x27, 0x28, 0x20, 0x2B, 0x08, 0x9F, 0x42,
   0x8F, 0xEC, 0xDB, 0x41, 0xC7, 0x9F, 0x8A, 0xA0,
   0xD0, 0xEF, 0x68, 0xF5, 0x78, 0x64, 0x81, 0xCC,
   0xA2, 0x9E, 0x21, 0x26, 0xF6, 0x9B, 0xC1, 0x41,
   0x60, 0xF1, 0xAE, 0x21, 0x87, 0x87, 0x8B, 0xA5,
   0xC4, 0x9C, 0xF3, 0x96, 0x1E, 0x1B, 0x7E, 0xE9
};

static UINT8_A aes_plain_text_cbc_8[] =
{
   0x2A, 0xAD, 0x0C, 0x2C, 0x43, 0x06, 0x56, 0x8B,
   0xAD, 0x74, 0x47, 0x46, 0x0F, 0xD3, 0xDA, 0xC0,
   0x54, 0x34, 0x6D, 0x26, 0xFE, 0xDD, 0xBC, 0x9A,
   0xBD, 0x91, 0x10, 0x91, 0x40, 0x11, 0xB4, 0x79,
   0x4B, 0xE2, 0xA9, 0xA0, 0x0A, 0x51, 0x9A, 0x51,
   0xA5, 0xB5, 0x12, 0x40, 0x14, 0xF4, 0xED, 0x27,
   0x35, 0x48, 0x0D, 0xB2, 0x1B, 0x43, 0x4E, 0x99,
   0xA9, 0x11, 0xBB, 0x0B, 0x60, 0xFE, 0x02, 0x53,
   0x76, 0x37, 0x25, 0xB6, 0x28, 0xD5, 0x73, 0x9A,
   0x51, 0x17, 0xB7, 0xEE, 0x3A, 0xEF, 0xAF, 0xC5,
   0xB4, 0xC1, 0xBF, 0x44, 0x64, 0x67, 0xE7, 0xBF,
   0x5F, 0x78, 0xF3, 0x1F, 0xF7, 0xCA, 0xF1, 0x87,
};
static UINT8_A aes_key_cbc_8[] =
{
   0xBB, 0xE7, 0xB7, 0xBA, 0x07, 0x12, 0x4F, 0xF1,
   0xAE, 0x7C, 0x34, 0x16, 0xFE, 0x8B, 0x46, 0x5E
};
static UINT8_A aes_iv_cbc_8[] =
{
   0x7F, 0x65, 0xB5, 0xEE, 0x36, 0x30, 0xBE, 0xD6,
   0xB8, 0x42, 0x02, 0xD9, 0x7F, 0xB9, 0x7A, 0x1E
};
static UINT8_A aes_cipher_text_cbc_8[] =
{
   0x3B, 0x86, 0x11, 0xBF, 0xC4, 0x97, 0x3C, 0x5C,
   0xD8, 0xE9, 0x82, 0xB0, 0x73, 0xB3, 0x31, 0x84,
   0xCD, 0x26, 0x11, 0x01, 0x59, 0x17, 0x2E, 0x44,
   0x98, 0x8E, 0xB5, 0xFF, 0x56, 0x61, 0xA1, 0xE1,
   0x6F, 0xAD, 0x67, 0x25, 0x8F, 0xCB, 0xFE, 0xE5,
   0x54, 0x69, 0x26, 0x7A, 0x12, 0xDC, 0x37, 0x48,
   0x93, 0xB4, 0xE3, 0x53, 0x3D, 0x36, 0xF5, 0x63,
   0x4C, 0x30, 0x95, 0x58, 0x35, 0x96, 0xF1, 0x35,
   0xAA, 0x8C, 0xD1, 0x13, 0x8D, 0xC8, 0x98, 0xBC,
   0x56, 0x51, 0xEE, 0x35, 0xA9, 0x2E, 0xBF, 0x89,
   0xAB, 0x6A, 0xEB, 0x53, 0x66, 0x65, 0x3B, 0xC6,
   0x0A, 0x70, 0xE0, 0x07, 0x4F, 0xC1, 0x1E, 0xFE
};

static UINT8_A aes_plain_text_cbc_9[] =
{
   0x80, 0x7B, 0xC4, 0xEA, 0x68, 0x4E, 0xED, 0xCF,
   0xDC, 0xCA, 0x30, 0x18, 0x06, 0x80, 0xB0, 0xF1,
   0xAE, 0x28, 0x14, 0xF3, 0x5F, 0x36, 0xD0, 0x53,
   0xC5, 0xAE, 0xA6, 0x59, 0x5A, 0x38, 0x6C, 0x14,
   0x42, 0x77, 0x0F, 0x4D, 0x72, 0x97, 0xD8, 0xB9,
   0x18, 0x25, 0xEE, 0x72, 0x37, 0x24, 0x1D, 0xA8,
   0x92, 0x5D, 0xD5, 0x94, 0xCC, 0xF6, 0x76, 0xAE,
   0xCD, 0x46, 0xCA, 0x20, 0x68, 0xE8, 0xD3, 0x7A,
   0x3A, 0x0E, 0xC8, 0xA7, 0xD5, 0x18, 0x5A, 0x20,
   0x1E, 0x66, 0x3B, 0x5F, 0xF3, 0x6A, 0xE1, 0x97,
   0x11, 0x01, 0x88, 0xA2, 0x35, 0x03, 0x76, 0x3B,
   0x82, 0x18, 0x82, 0x6D, 0x23, 0xCE, 0xD7, 0x4B,
   0x31, 0xE9, 0xF6, 0xE2, 0xD7, 0xFB, 0xFA, 0x6C,
   0xB4, 0x34, 0x20, 0xC7, 0x80, 0x7A, 0x86, 0x25
};
static UINT8_A aes_key_cbc_9[] =
{
   0x89, 0xA5, 0x53, 0x73, 0x04, 0x33, 0xF7, 0xE6,
   0xD6, 0x7D, 0x16, 0xD3, 0x73, 0xBD, 0x53, 0x60
};
static UINT8_A aes_iv_cbc_9[] =
{
   0xF7, 0x24, 0x55, 0x8D, 0xB3, 0x43, 0x3A, 0x52,
   0x3F, 0x4E, 0x51, 0xA5, 0xBE, 0xA7, 0x04, 0x97
};
static UINT8_A aes_cipher_text_cbc_9[] =
{
   0x40, 0x6A, 0xF1, 0x42, 0x9A, 0x47, 0x8C, 0x3D,
   0x07, 0xE5, 0x55, 0xC5, 0x28, 0x7A, 0x60, 0x50,
   0x0D, 0x37, 0xFC, 0x39, 0xB6, 0x8E, 0x5B, 0xBB,
   0x9B, 0xAF, 0xD6, 0xDD, 0xB2, 0x23, 0x82, 0x85,
   0x61, 0xD6, 0x17, 0x1A, 0x30, 0x8D, 0x5B, 0x1A,
   0x45, 0x51, 0xE8, 0xA5, 0xE7, 0xD5, 0x72, 0x91,
   0x8D, 0x25, 0xC9, 0x68, 0xD3, 0x87, 0x18, 0x48,
   0xD2, 0xF1, 0x66, 0x35, 0xCA, 0xA9, 0x84, 0x7F,
   0x38, 0x59, 0x0B, 0x1D, 0xF5, 0x8A, 0xB5, 0xEF,
   0xB9, 0x85, 0xF2, 0xC6, 0x6C, 0xFA, 0xF8, 0x6F,
   0x61, 0xB3, 0xF9, 0xC0, 0xAF, 0xAD, 0x6C, 0x96,
   0x3C, 0x49, 0xCE, 0xE9, 0xB8, 0xBC, 0x81, 0xA2,
   0xDD, 0xB0, 0x6C, 0x96, 0x7F, 0x32, 0x55, 0x15,
   0xA4, 0x84, 0x9E, 0xEC, 0x37, 0xCE, 0x72, 0x1A
};

static UINT8_A aes_plain_text_cbc_10[] =
{
   0xCB, 0x6A, 0x78, 0x7E, 0x0D, 0xEC, 0x56, 0xF9,
   0xA1, 0x65, 0x95, 0x7F, 0x81, 0xAF, 0x33, 0x6C,
   0xA6, 0xB4, 0x07, 0x85, 0xD9, 0xE9, 0x40, 0x93,
   0xC6, 0x19, 0x0E, 0x51, 0x52, 0x64, 0x9F, 0x88,
   0x2E, 0x87, 0x4D, 0x79, 0xAC, 0x5E, 0x16, 0x7B,
   0xD2, 0xA7, 0x4C, 0xE5, 0xAE, 0x08, 0x8D, 0x2E,
   0xE8, 0x54, 0xF6, 0x53, 0x9E, 0x0A, 0x94, 0x79,
   0x6B, 0x1E, 0x1B, 0xD4, 0xC9, 0xFC, 0xDB, 0xC7,
   0x9A, 0xCB, 0xEF, 0x4D, 0x01, 0xEE, 0xB8, 0x97,
   0x76, 0xD1, 0x8A, 0xF7, 0x1A, 0xE2, 0xA4, 0xFC,
   0x47, 0xDD, 0x66, 0xDF, 0x6C, 0x4D, 0xBE, 0x1D,
   0x18, 0x50, 0xE4, 0x66, 0x54, 0x9A, 0x47, 0xB6,
   0x36, 0xBC, 0xC7, 0xC2, 0xB3, 0xA6, 0x24, 0x95,
   0xB5, 0x6B, 0xB6, 0x7B, 0x6D, 0x45, 0x5F, 0x1E,
   0xEB, 0xD9, 0xBF, 0xEF, 0xEC, 0xBC, 0xA6, 0xC7,
   0xF3, 0x35, 0xCF, 0xCE, 0x9B, 0x45, 0xCB, 0x9D
};
static UINT8_A aes_key_cbc_10[] =
{
   0xC4, 0x91, 0xCA, 0x31, 0xF9, 0x17, 0x08, 0x45,
   0x8E, 0x29, 0xA9, 0x25, 0xEC, 0x55, 0x8D, 0x78,
};
static UINT8_A aes_iv_cbc_10[] =
{
   0x9E, 0xF9, 0x34, 0x94, 0x6E, 0x5C, 0xD0, 0xAE,
   0x97, 0xBD, 0x58, 0x53, 0x2C, 0xB4, 0x93, 0x81,
};
static UINT8_A aes_cipher_text_cbc_10[] =
{
   0x7B, 0x29, 0x31, 0xF5, 0x85, 0x5F, 0x71, 0x71,
   0x45, 0xE0, 0x0F, 0x15, 0x2A, 0x9F, 0x47, 0x94,
   0x35, 0x9B, 0x1F, 0xFC, 0xB3, 0xE5, 0x5F, 0x59,
   0x4E, 0x33, 0x09, 0x8B, 0x51, 0xC2, 0x3A, 0x6C,
   0x74, 0xA0, 0x6C, 0x1D, 0x94, 0xFD, 0xED, 0x7F,
   0xD2, 0xAE, 0x42, 0xC7, 0xDB, 0x7A, 0xCA, 0xEF,
   0x58, 0x44, 0xCB, 0x33, 0xAE, 0xDD, 0xC6, 0x85,
   0x25, 0x85, 0xED, 0x00, 0x20, 0xA6, 0x69, 0x9D,
   0x2C, 0xB5, 0x38, 0x09, 0xCE, 0xFD, 0x16, 0x91,
   0x48, 0xCE, 0x42, 0x29, 0x2A, 0xFA, 0xB0, 0x63,
   0x44, 0x39, 0x78, 0x30, 0x6C, 0x58, 0x2C, 0x18,
   0xB9, 0xCE, 0x0D, 0xA3, 0xD0, 0x84, 0xCE, 0x4D,
   0x3C, 0x48, 0x2C, 0xFD, 0x8F, 0xCF, 0x1A, 0x85,
   0x08, 0x4E, 0x89, 0xFB, 0x88, 0xB4, 0x0A, 0x08,
   0x4D, 0x5E, 0x97, 0x24, 0x66, 0xD0, 0x76, 0x66,
   0x12, 0x6F, 0xB7, 0x61, 0xF8, 0x40, 0x78, 0xF2
};

static UINT8_A aes_plain_text_cbc_11[] =
{
   0xF8, 0x2B, 0xEF, 0x3C, 0x73, 0xA6, 0xF7, 0xF8,
   0x0D, 0xB2, 0x85, 0x72, 0x6D, 0x69, 0x1D, 0xB6,
   0xBF, 0x55, 0xEE, 0xC2, 0x5A, 0x85, 0x9D, 0x3B,
   0xA0, 0xE0, 0x44, 0x5F, 0x26, 0xB9, 0xBB, 0x3B,
   0x16, 0xA3, 0x16, 0x1E, 0xD1, 0x86, 0x6E, 0x4D,
   0xD8, 0xF2, 0xE5, 0xF8, 0xEC, 0xB4, 0xE4, 0x6D,
   0x74, 0xA7, 0xA7, 0x8C, 0x20, 0xCD, 0xFC, 0x7B,
   0xCC, 0x9E, 0x47, 0x9B, 0xA7, 0xA0, 0xCA, 0xBA,
   0x94, 0x38, 0x23, 0x8A, 0xD0, 0xC0, 0x16, 0x51,
   0xD5, 0xD9, 0x8D, 0xE3, 0x7F, 0x03, 0xDD, 0xCE,
   0x6E, 0x6B, 0x4B, 0xD4, 0xAB, 0x03, 0xCF, 0x9E,
   0x8E, 0xD8, 0x18, 0xAE, 0xDF, 0xA1, 0xCF, 0x96,
   0x3B, 0x93, 0x20, 0x67, 0xB9, 0x7D, 0x77, 0x6D,
   0xCE, 0x10, 0x87, 0x19, 0x6E, 0x7E, 0x91, 0x3F,
   0x74, 0x48, 0xE3, 0x82, 0x44, 0x50, 0x9F, 0x0C,
   0xAF, 0x36, 0xBD, 0x82, 0x17, 0xE1, 0x53, 0x36,
   0xD3, 0x5C, 0x14, 0x9F, 0xD4, 0xE4, 0x17, 0x07,
   0x89, 0x3F, 0xDB, 0x84, 0x01, 0x4F, 0x87, 0x29
};
static UINT8_A aes_key_cbc_11[] =
{
   0xF6, 0xE8, 0x7D, 0x71, 0xB0, 0x10, 0x4D, 0x6E,
   0xB0, 0x6A, 0x68, 0xDC, 0x6A, 0x71, 0xF4, 0x98
};
static UINT8_A aes_iv_cbc_11[] =
{
   0x1C, 0x24, 0x5F, 0x26, 0x19, 0x5B, 0x76, 0xEB,
   0xEB, 0xC2, 0xED, 0xCA, 0xC4, 0x12, 0xA2, 0xF8
};
static UINT8_A aes_cipher_text_cbc_11[] =
{
   0xB0, 0x95, 0x12, 0xF3, 0xEF, 0xF9, 0xED, 0x0D,
   0x85, 0x89, 0x09, 0x83, 0xA7, 0x3D, 0xAD, 0xBB,
   0x7C, 0x36, 0x78, 0xD5, 0x25, 0x81, 0xBE, 0x64,
   0xA8, 0xA8, 0xFC, 0x58, 0x6F, 0x49, 0x0F, 0x25,
   0x21, 0x29, 0x7A, 0x47, 0x8A, 0x05, 0x98, 0x04,
   0x0E, 0xBD, 0x0F, 0x55, 0x09, 0xFA, 0xFB, 0x09,
   0x69, 0xF9, 0xD9, 0xE6, 0x00, 0xEA, 0xEF, 0x33,
   0xB1, 0xB9, 0x3E, 0xED, 0x99, 0x68, 0x7B, 0x16,
   0x7F, 0x89, 0xA5, 0x06, 0x5A, 0xAC, 0x43, 0x9C,
   0xE4, 0x6F, 0x3B, 0x8D, 0x22, 0xD3, 0x08, 0x65,
   0xE6, 0x4E, 0x45, 0xEF, 0x8C, 0xD3, 0x0B, 0x69,
   0x84, 0x35, 0x3A, 0x84, 0x4A, 0x11, 0xC8, 0xCD,
   0x60, 0xDB, 0xA0, 0xE8, 0x86, 0x6B, 0x3E, 0xE3,
   0x0D, 0x24, 0xB3, 0xFA, 0x8A, 0x64, 0x3B, 0x32,
   0x83, 0x53, 0xE0, 0x60, 0x10, 0xFA, 0x82, 0x73,
   0xC8, 0xFD, 0x54, 0xEF, 0x0A, 0x2B, 0x69, 0x30,
   0xE5, 0x52, 0x0A, 0xAE, 0x5C, 0xD5, 0x90, 0x2F,
   0x9B, 0x86, 0xA3, 0x35, 0x92, 0xCA, 0x43, 0x65
};

static UINT8_A aes_plain_text_cbc_12[] =
{
   0x40, 0xD9, 0x30, 0xF9, 0xA0, 0x53, 0x34, 0xD9,
   0x81, 0x6F, 0xE2, 0x04, 0x99, 0x9C, 0x3F, 0x82,
   0xA0, 0x3F, 0x6A, 0x04, 0x57, 0xA8, 0xC4, 0x75,
   0xC9, 0x45, 0x53, 0xD1, 0xD1, 0x16, 0x69, 0x3A,
   0xDC, 0x61, 0x80, 0x49, 0xF0, 0xA7, 0x69, 0xA2,
   0xEE, 0xD6, 0xA6, 0xCB, 0x14, 0xC0, 0x14, 0x3E,
   0xC5, 0xCC, 0xCD, 0xBC, 0x8D, 0xEC, 0x4C, 0xE5,
   0x60, 0xCF, 0xD2, 0x06, 0x22, 0x57, 0x09, 0x32,
   0x6D, 0x4D, 0xE7, 0x94, 0x8E, 0x54, 0xD6, 0x03,
   0xD0, 0x1B, 0x12, 0xD7, 0xFE, 0xD7, 0x52, 0xFB,
   0x23, 0xF1, 0xAA, 0x44, 0x94, 0xFB, 0xB0, 0x01,
   0x30, 0xE9, 0xDE, 0xD4, 0xE7, 0x7E, 0x37, 0xC0,
   0x79, 0x04, 0x2D, 0x82, 0x80, 0x40, 0xC3, 0x25,
   0xB1, 0xA5, 0xEF, 0xD1, 0x5F, 0xC8, 0x42, 0xE4,
   0x40, 0x14, 0xCA, 0x43, 0x74, 0xBF, 0x38, 0xF3,
   0xC3, 0xFC, 0x3E, 0xE3, 0x27, 0x73, 0x3B, 0x0C,
   0x8A, 0xEE, 0x1A, 0xBC, 0xD0, 0x55, 0x77, 0x2F,
   0x18, 0xDC, 0x04, 0x60, 0x3F, 0x7B, 0x2C, 0x1E,
   0xA6, 0x9F, 0xF6, 0x62, 0x36, 0x1F, 0x2B, 0xE0,
   0xA1, 0x71, 0xBB, 0xDC, 0xEA, 0x1E, 0x5D, 0x3F
};
static UINT8_A aes_key_cbc_12[] =
{
   0x2C, 0x14, 0x41, 0x37, 0x51, 0xC3, 0x1E, 0x27,
   0x30, 0x57, 0x0B, 0xA3, 0x36, 0x1C, 0x78, 0x6B
};
static UINT8_A aes_iv_cbc_12[] =
{
   0x1D, 0xBB, 0xEB, 0x2F, 0x19, 0xAB, 0xB4, 0x48,
   0xAF, 0x84, 0x97, 0x96, 0x24, 0x4A, 0x19, 0xD7
};
static UINT8_A aes_cipher_text_cbc_12[] =
{
   0x6B, 0xE8, 0xA1, 0x28, 0x00, 0x45, 0x5A, 0x32,
   0x05, 0x38, 0x85, 0x3E, 0x0C, 0xBA, 0x31, 0xBD,
   0x2D, 0x80, 0xEA, 0x0C, 0x85, 0x16, 0x4A, 0x4C,
   0x5C, 0x26, 0x1A, 0xE4, 0x85, 0x41, 0x7D, 0x93,
   0xEF, 0xFE, 0x2E, 0xBC, 0x0D, 0x0A, 0x0B, 0x51,
   0xD6, 0xEA, 0x18, 0x63, 0x3D, 0x21, 0x0C, 0xF6,
   0x3C, 0x0C, 0x4D, 0xDB, 0xC2, 0x76, 0x07, 0xF2,
   0xE8, 0x1E, 0xD9, 0x11, 0x31, 0x91, 0xEF, 0x86,
   0xD5, 0x6F, 0x3B, 0x99, 0xBE, 0x6C, 0x41, 0x5A,
   0x41, 0x50, 0x29, 0x9F, 0xB8, 0x46, 0xCE, 0x71,
   0x60, 0xB4, 0x0B, 0x63, 0xBA, 0xF1, 0x17, 0x9D,
   0x19, 0x27, 0x5A, 0x2E, 0x83, 0x69, 0x83, 0x76,
   0xD2, 0x8B, 0x92, 0x54, 0x8C, 0x68, 0xE0, 0x6E,
   0x6D, 0x99, 0x4E, 0x2C, 0x15, 0x01, 0xED, 0x29,
   0x70, 0x14, 0xE7, 0x02, 0xCD, 0xEF, 0xEE, 0x2F,
   0x65, 0x64, 0x47, 0x70, 0x60, 0x09, 0x61, 0x4D,
   0x80, 0x1D, 0xE1, 0xCA, 0xAF, 0x73, 0xF8, 0xB7,
   0xFA, 0x56, 0xCF, 0x1B, 0xA9, 0x4B, 0x63, 0x19,
   0x33, 0xBB, 0xE5, 0x77, 0x62, 0x43, 0x80, 0x85,
   0x0F, 0x11, 0x74, 0x35, 0xA0, 0x35, 0x5B, 0x2B
};

aes_vector_type_t aes_cbc_test_vectors[] =
{
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_1, //0
      sizeof(aes_plain_text_cbc_1), aes_key_cbc_1, 16,
      aes_iv_cbc_1, aes_cipher_text_cbc_1},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_2, //1
      sizeof(aes_plain_text_cbc_2), aes_key_cbc_2, 16,
      aes_iv_cbc_2, aes_cipher_text_cbc_2},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_3, //2
      sizeof(aes_plain_text_cbc_3), aes_key_cbc_3, 16,
      aes_iv_cbc_3, aes_cipher_text_cbc_3},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_4, //3
      sizeof(aes_plain_text_cbc_4), aes_key_cbc_4, 16,
      aes_iv_cbc_4, aes_cipher_text_cbc_4},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_5, //4
      sizeof(aes_plain_text_cbc_5), aes_key_cbc_5, 16,
      aes_iv_cbc_5, aes_cipher_text_cbc_5},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_6, //5
      sizeof(aes_plain_text_cbc_6), aes_key_cbc_6, 16,
      aes_iv_cbc_6, aes_cipher_text_cbc_6},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_7, //6
      sizeof(aes_plain_text_cbc_7), aes_key_cbc_7, 16,
      aes_iv_cbc_7, aes_cipher_text_cbc_7},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_8, //7
      sizeof(aes_plain_text_cbc_8), aes_key_cbc_8, 16,
      aes_iv_cbc_8, aes_cipher_text_cbc_8},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_9, //8
      sizeof(aes_plain_text_cbc_9), aes_key_cbc_9, 16,
      aes_iv_cbc_9, aes_cipher_text_cbc_9},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_10, //9
      sizeof(aes_plain_text_cbc_10), aes_key_cbc_10, 16,
      aes_iv_cbc_10, aes_cipher_text_cbc_10},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_11, //10
      sizeof(aes_plain_text_cbc_11), aes_key_cbc_11, 16,
      aes_iv_cbc_11, aes_cipher_text_cbc_11},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_12, //11
      sizeof(aes_plain_text_cbc_12), aes_key_cbc_12, 16,
      aes_iv_cbc_12, aes_cipher_text_cbc_12}

};

uf_aes_vector_type_t sw_aes_cbc_test_vectors[] =
{
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_1, //0
      sizeof(aes_plain_text_cbc_1), aes_key_cbc_1, 16,
      aes_iv_cbc_1, aes_cipher_text_cbc_1},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_2, //1
      sizeof(aes_plain_text_cbc_2), aes_key_cbc_2, 16,
      aes_iv_cbc_2, aes_cipher_text_cbc_2},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_3, //2
      sizeof(aes_plain_text_cbc_3), aes_key_cbc_3, 16,
      aes_iv_cbc_3, aes_cipher_text_cbc_3},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_4, //3
      sizeof(aes_plain_text_cbc_4), aes_key_cbc_4, 16,
      aes_iv_cbc_4, aes_cipher_text_cbc_4},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_5, //4
      sizeof(aes_plain_text_cbc_5), aes_key_cbc_5, 16,
      aes_iv_cbc_5, aes_cipher_text_cbc_5},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_6, //5
      sizeof(aes_plain_text_cbc_6), aes_key_cbc_6, 16,
      aes_iv_cbc_6, aes_cipher_text_cbc_6},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_7, //6
      sizeof(aes_plain_text_cbc_7), aes_key_cbc_7, 16,
      aes_iv_cbc_7, aes_cipher_text_cbc_7},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_8, //7
      sizeof(aes_plain_text_cbc_8), aes_key_cbc_8, 16,
      aes_iv_cbc_8, aes_cipher_text_cbc_8},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_9, //8
      sizeof(aes_plain_text_cbc_9), aes_key_cbc_9, 16,
      aes_iv_cbc_9, aes_cipher_text_cbc_9},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_10, //9
      sizeof(aes_plain_text_cbc_10), aes_key_cbc_10, 16,
      aes_iv_cbc_10, aes_cipher_text_cbc_10},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_11, //10
      sizeof(aes_plain_text_cbc_11), aes_key_cbc_11, 16,
      aes_iv_cbc_11, aes_cipher_text_cbc_11},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_12, //11
      sizeof(aes_plain_text_cbc_12), aes_key_cbc_12, 16,
      aes_iv_cbc_12, aes_cipher_text_cbc_12}

};

/* AES-128 CTR test vectors */
static UINT8_A aes_plain_text_ctr_1[] =
{
   0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
   0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};
static UINT8_A aes_key_ctr_1[] =
{
   0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
   0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
};
static UINT8_A aes_iv_ctr_1[] =
{
   0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
   0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};
static UINT8_A aes_cipher_text_ctr_1[] =
{
   0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26,
   0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d, 0xb6, 0xce
};

static UINT8_A aes_plain_text_ctr_2[] =
{
   // 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   // 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
   // 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   // 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
   // 0x20, 0x21, 0x22, 0x23
   0x53, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x20, 0x62,
   0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x6D, 0x73, 0x67
};
static UINT8_A aes_key_ctr_2[] =
{
   // 0x76, 0x91, 0xBE, 0x03, 0x5E, 0x50, 0x20, 0xA8,
   // 0xAC, 0x6E, 0x61, 0x85, 0x29, 0xF9, 0xA0, 0xDC
   0xAE, 0x68, 0x52, 0xF8, 0x12, 0x10, 0x67, 0xCC,
   0x4B, 0xF7, 0xA5, 0x76, 0x55, 0x77, 0xF3, 0x9E
};
static UINT8_A aes_iv_ctr_2[] =
{
   // 0x00, 0xE0, 0x01, 0x7B, 0x27, 0x77, 0x7F, 0x3F,
   // 0x4A, 0x17, 0x86, 0xF0, 0x00, 0x00, 0x00, 0x01
   0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A aes_cipher_text_ctr_2[] =
{
   // 0xC1, 0xCF, 0x48, 0xA8, 0x9F, 0x2F, 0xFD, 0xD9,
   // 0xCF, 0x46, 0x52, 0xE9, 0xEF, 0xDB, 0x72, 0xD7,
   // 0x45, 0x40, 0xA4, 0x2B, 0xDE, 0x6D, 0x78, 0x36,
   // 0xD5, 0x9A, 0x5C, 0xEA, 0xAE, 0xF3, 0x10, 0x53,
   // 0x25, 0xB2, 0x07, 0x2F
   0xE4, 0x09, 0x5D, 0x4F, 0xB7, 0xA7, 0xB3, 0x79,
   0x2D, 0x61, 0x75, 0xA3, 0x26, 0x13, 0x11, 0xB8
};

static UINT8_A aes_plain_text_ctr_3[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
};
static UINT8_A aes_key_ctr_3[] =
{
   0x7E, 0x24, 0x06, 0x78, 0x17, 0xFA, 0xE0, 0xD7,
   0x43, 0xD6, 0xCE, 0x1F, 0x32, 0x53, 0x91, 0x63
};
static UINT8_A aes_iv_ctr_3[] =
{
   0x00, 0x6C, 0xB6, 0xDB, 0xC0, 0x54, 0x3B, 0x59,
   0xDA, 0x48, 0xD9, 0x0B, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A aes_cipher_text_ctr_3[] =
{
   0x51, 0x04, 0xA1, 0x06, 0x16, 0x8A, 0x72, 0xD9,
   0x79, 0x0D, 0x41, 0xEE, 0x8E, 0xDA, 0xD3, 0x88,
   0xEB, 0x2E, 0x1E, 0xFC, 0x46, 0xDA, 0x57, 0xC8,
   0xFC, 0xE6, 0x30, 0xDF, 0x91, 0x41, 0xBE, 0x28
};

static UINT8_A aes_plain_text_ctr_4[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
   0x20, 0x21, 0x22, 0x23
};
static UINT8_A aes_key_ctr_4[] =
{
   0x76, 0x91, 0xBE, 0x03, 0x5E, 0x50, 0x20, 0xA8,
   0xAC, 0x6E, 0x61, 0x85, 0x29, 0xF9, 0xA0, 0xDC
};
static UINT8_A aes_iv_ctr_4[] =
{
   0x00, 0xE0, 0x01, 0x7B, 0x27, 0x77, 0x7F, 0x3F,
   0x4A, 0x17, 0x86, 0xF0, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A aes_cipher_text_ctr_4[] =
{
   0xC1, 0xCF, 0x48, 0xA8, 0x9F, 0x2F, 0xFD, 0xD9,
   0xCF, 0x46, 0x52, 0xE9, 0xEF, 0xDB, 0x72, 0xD7,
   0x45, 0x40, 0xA4, 0x2B, 0xDE, 0x6D, 0x78, 0x36,
   0xD5, 0x9A, 0x5C, 0xEA, 0xAE, 0xF3, 0x10, 0x53,
   0x25, 0xB2, 0x07, 0x2F
};

static UINT8_A aes_plain_text_ctr_5[] =
{
   0x53, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x20, 0x62,
   0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x6D, 0x73, 0x67
};
static UINT8_A aes_key_ctr_5[] =
{
   0xAE, 0x68, 0x52, 0xF8, 0x12, 0x10, 0x67, 0xCC,
   0x4B, 0xF7, 0xA5, 0x76, 0x55, 0x77, 0xF3, 0x9E
};
static UINT8_A aes_iv_ctr_5[] =
{
   0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A aes_cipher_text_ctr_5[] =
{
   0xE4, 0x09, 0x5D, 0x4F, 0xB7, 0xA7, 0xB3, 0x79,
   0x2D, 0x61, 0x75, 0xA3, 0x26, 0x13, 0x11, 0xB8
};

static UINT8_A aes_plain_text_ctr_6[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
};
static UINT8_A aes_key_ctr_6[] =
{
   0x7E, 0x24, 0x06, 0x78, 0x17, 0xFA, 0xE0, 0xD7,
   0x43, 0xD6, 0xCE, 0x1F, 0x32, 0x53, 0x91, 0x63
};
static UINT8_A aes_iv_ctr_6[] =
{
   0x00, 0x6C, 0xB6, 0xDB, 0xC0, 0x54, 0x3B, 0x59,
   0xDA, 0x48, 0xD9, 0x0B, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A aes_cipher_text_ctr_6[] =
{
   0x51, 0x04, 0xA1, 0x06, 0x16, 0x8A, 0x72, 0xD9,
   0x79, 0x0D, 0x41, 0xEE, 0x8E, 0xDA, 0xD3, 0x88,
   0xEB, 0x2E, 0x1E, 0xFC, 0x46, 0xDA, 0x57, 0xC8,
   0xFC, 0xE6, 0x30, 0xDF, 0x91, 0x41, 0xBE, 0x28
};

UINT8_A aes_iv_all_zero[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

aes_vector_type_t aes_ctr_test_vectors[] =
{
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTR, aes_plain_text_ctr_1, //0
      sizeof(aes_plain_text_ctr_1), aes_key_ctr_1, 16,
      aes_iv_ctr_1, aes_cipher_text_ctr_1},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTR, aes_plain_text_ctr_2, //1
      sizeof(aes_plain_text_ctr_2), aes_key_ctr_2, 16,
      aes_iv_ctr_2, aes_cipher_text_ctr_2},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTR, aes_plain_text_ctr_3, //2
      sizeof(aes_plain_text_ctr_3), aes_key_ctr_3, 16,
      aes_iv_ctr_3, aes_cipher_text_ctr_3},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTR, aes_plain_text_ctr_4, //3
      sizeof(aes_plain_text_ctr_4), aes_key_ctr_4, 16,
      aes_iv_ctr_4, aes_cipher_text_ctr_4},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTR, aes_plain_text_ctr_5, //4
      sizeof(aes_plain_text_ctr_5), aes_key_ctr_5, 16,
      aes_iv_ctr_5, aes_cipher_text_ctr_5},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTR, aes_plain_text_ctr_6, //5
      sizeof(aes_plain_text_ctr_6), aes_key_ctr_6, 16,
      aes_iv_ctr_6, aes_cipher_text_ctr_6},

};

uf_aes_vector_type_t sw_aes_ctr_test_vectors[] =
{
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTR, aes_plain_text_ctr_1, //0
      sizeof(aes_plain_text_ctr_1), aes_key_ctr_1, 16,
      aes_iv_ctr_1, aes_cipher_text_ctr_1},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTR, aes_plain_text_ctr_2, //1
      sizeof(aes_plain_text_ctr_2), aes_key_ctr_2, 16,
      aes_iv_ctr_2, aes_cipher_text_ctr_2},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTR, aes_plain_text_ctr_3, //2
      sizeof(aes_plain_text_ctr_3), aes_key_ctr_3, 16,
      aes_iv_ctr_3, aes_cipher_text_ctr_3},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTR, aes_plain_text_ctr_4, //3
      sizeof(aes_plain_text_ctr_4), aes_key_ctr_4, 16,
      aes_iv_ctr_4, aes_cipher_text_ctr_4},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTR, aes_plain_text_ctr_5, //4
      sizeof(aes_plain_text_ctr_5), aes_key_ctr_5, 16,
      aes_iv_ctr_5, aes_cipher_text_ctr_5},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTR, aes_plain_text_ctr_6, //5
      sizeof(aes_plain_text_ctr_6), aes_key_ctr_6, 16,
      aes_iv_ctr_6, aes_cipher_text_ctr_6},

};

/* AES-128 CTS test vectors */
/* Taken from: https://dxr.mozilla.org/mozilla-beta/source/security/nss/cmd/bltest/tests/aes_cts/aes-cts-type-1-vectors.txt */
static UINT8_A aes_key_cts_1[] =
{
   0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x20,
   0x74, 0x65, 0x72, 0x69, 0x79, 0x61, 0x6b, 0x69
};

static UINT8_A aes_iv_cts_1[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* CTS working (non multiple of block size)
Step 1: Do CBC encryption with iv = iv = 00000000000000000000000000000000
key = key = 636869636b656e207465726979616b69
input = first 16 bytes of input = 4920776f756c64206c696b6520746865
to get output = 97687268d6ecccc0c07b25e25ecfe584

Step 2: Move to next 16 bytes of input. If size is less than 16 bytes, then it is last block
Do CBC encryption with iv = prev output = 97687268d6ecccc0c07b25e25ecfe584
key = key = 636869636b656e207465726979616b69
input = second 16 bytes of input (zero padded if not multiple of 16 bytes)
so 20 becomes 20000000000000000000000000000000
to get output = c6353568f2bf8cb4d8a580362da7ff7f

Now final output will be arranged as follows

Input       4920776f756c64206c696b6520746865    20000000000000000000000000000000
Output      97687268d6ecccc0c07b25e25ecfe584    c6353568f2bf8cb4d8a580362da7ff7f

The last and second last block output are swapped.
After swap: c6353568f2bf8cb4d8a580362da7ff7f    97687268d6ecccc0c07b25e25ecfe584

Now discard bytes from last output block equal to the number of bytes added as zero pad in last input block
so 97687268d6ecccc0c07b25e25ecfe584 becomes 97

Final op:   c6353568f2bf8cb4d8a580362da7ff7f    97

ie c6353568f2bf8cb4d8a580362da7ff7f97

*/

static UINT8_A aes_plain_text_cts_1[] =
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,
   0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
   0x20
};
static UINT8_A aes_cipher_text_cts_1[] = //97 c6 35 35 68 f2 bf 8c b4 d8 a5 80 36 2d a7 ff 7f
{
   0xc6, 0x35, 0x35, 0x68, 0xf2, 0xbf, 0x8c, 0xb4,
   0xd8, 0xa5, 0x80, 0x36, 0x2d, 0xa7, 0xff, 0x7f,
   0x97
};

static UINT8_A aes_plain_text_cts_2[] =
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,
   0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
   0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
   0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20
};
static UINT8_A aes_cipher_text_cts_2[] = //97 68 72 68 d6 ec cc c0 c0 7b 25 e2 5e cf e5 fc 00 78 3e 0e fd b2 c1 d4 45 d4 c8 ef f7 ed 22
{
   0xfc, 0x00, 0x78, 0x3e, 0x0e, 0xfd, 0xb2, 0xc1,
   0xd4, 0x45, 0xd4, 0xc8, 0xef, 0xf7, 0xed, 0x22,
   0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0,
   0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5
};

/* CTS working (multiple of block size)
Step 1: Do CBC encryption with iv = iv = 00000000000000000000000000000000
key = key = 636869636b656e207465726979616b69
input = first 16 bytes of input = 4920776f756c64206c696b6520746865
to get output = 97687268d6ecccc0c07b25e25ecfe584

Step 2: Move to next 16 bytes of input. If size is less than 16 bytes, then it is last block
Do CBC encryption with iv = prev output = 97687268d6ecccc0c07b25e25ecfe584
key = key = 636869636b656e207465726979616b69
input = second 16 bytes of input (zero padded if not multiple of 16) = 2047656e6572616c2047617527732043
to get output = 39312523a78662d5be7fcbcc98ebf5a8

Now final output will be arranged as follows

Input       4920776f756c64206c696b6520746865    2047656e6572616c2047617527732043
Output      97687268d6ecccc0c07b25e25ecfe584    39312523a78662d5be7fcbcc98ebf5a8

There is no need to swap the last and second last block output

Final op:   97687268d6ecccc0c07b25e25ecfe584    39312523a78662d5be7fcbcc98ebf5a8

ie 97687268d6ecccc0c07b25e25ecfe58439312523a78662d5be7fcbcc98ebf5a8

*/

static UINT8_A aes_plain_text_cts_3[] =
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,
   0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
   0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
   0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20, 0x43
};
static UINT8_A aes_cipher_text_cts_3[] = //97 68 72 68 d6 ec cc c0 c0 7b 25 e2 5e cf e5 84 39 31 25 23 a7 86 62 d5 be 7f cb cc 98 eb f5 a8
{
   0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0,
   0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5, 0x84,
   0x39, 0x31, 0x25, 0x23, 0xa7, 0x86, 0x62, 0xd5,
   0xbe, 0x7f, 0xcb, 0xcc, 0x98, 0xeb, 0xf5, 0xa8
};

static UINT8_A aes_plain_text_cts_4[] =
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,
   0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
   0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
   0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20, 0x43,
   0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x2c, 0x20,
   0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2c
};
static UINT8_A aes_cipher_text_cts_4[] = //97 68 72 68 d6 ec cc c0 c0 7b 25 e2 5e cf e5 84 39 31 25 23 a7 86 62 d5 be 7f cb cc 98 eb f5 b3 ff fd 94 0c 16 a1 8c 1b 55 49 d2 f8 38 02 9e
{
   0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0,
   0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5, 0x84,
   0xb3, 0xff, 0xfd, 0x94, 0x0c, 0x16, 0xa1, 0x8c,
   0x1b, 0x55, 0x49, 0xd2, 0xf8, 0x38, 0x02, 0x9e,
   0x39, 0x31, 0x25, 0x23, 0xa7, 0x86, 0x62, 0xd5,
   0xbe, 0x7f, 0xcb, 0xcc, 0x98, 0xeb, 0xf5
};

static UINT8_A aes_plain_text_cts_5[] =
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,
   0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
   0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
   0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20, 0x43,
   0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x2c, 0x20,
   0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2c, 0x20
};
static UINT8_A aes_cipher_text_cts_5[] = //97 68 72 68 d6 ec cc c0 c0 7b 25 e2 5e cf e5 84 39 31 25 23 a7 86 62 d5 be 7f cb cc 98 eb f5 a8 9d ad 8b bb 96 c4 cd c0 3b c1 03 e1 a1 94 bb d8
{
   0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0,
   0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5, 0x84,
   0x39, 0x31, 0x25, 0x23, 0xa7, 0x86, 0x62, 0xd5,
   0xbe, 0x7f, 0xcb, 0xcc, 0x98, 0xeb, 0xf5, 0xa8,
   0x9d, 0xad, 0x8b, 0xbb, 0x96, 0xc4, 0xcd, 0xc0,
   0x3b, 0xc1, 0x03, 0xe1, 0xa1, 0x94, 0xbb, 0xd8
};

static UINT8_A aes_plain_text_cts_6[] =
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,
   0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
   0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
   0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20, 0x43,
   0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x2c, 0x20,
   0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2c, 0x20,
   0x61, 0x6e, 0x64, 0x20, 0x77, 0x6f, 0x6e, 0x74,
   0x6f, 0x6e, 0x20, 0x73, 0x6f, 0x75, 0x70, 0x2e
};
static UINT8_A aes_cipher_text_cts_6[] = //97 68 72 68 d6 ec cc c0 c0 7b 25 e2 5e cf e5 84 39 31 25 23 a7 86 62 d5 be 7f cb cc 98 eb f5 a8 9d ad 8b bb 96 c4 cd c0 3b c1 03 e1 a1 94 bb d8 48 07 ef e8 36 ee 89 a5 26 73 0d bc 2f 7b c8 40
{
   0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0,
   0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5, 0x84,
   0x39, 0x31, 0x25, 0x23, 0xa7, 0x86, 0x62, 0xd5,
   0xbe, 0x7f, 0xcb, 0xcc, 0x98, 0xeb, 0xf5, 0xa8,
   0x9d, 0xad, 0x8b, 0xbb, 0x96, 0xc4, 0xcd, 0xc0,
   0x3b, 0xc1, 0x03, 0xe1, 0xa1, 0x94, 0xbb, 0xd8,
   0x48, 0x07, 0xef, 0xe8, 0x36, 0xee, 0x89, 0xa5,
   0x26, 0x73, 0x0d, 0xbc, 0x2f, 0x7b, 0xc8, 0x40
};


aes_vector_type_t aes_cts_test_vectors[] =
{
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTS, aes_plain_text_cbc_1, //0
      sizeof(aes_plain_text_cbc_1), aes_key_cbc_1, 16,
      aes_iv_cbc_1, aes_cipher_text_cbc_1}, //new
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTS, aes_plain_text_cbc_2, //1
      sizeof(aes_plain_text_cbc_2), aes_key_cbc_2, 16,
      aes_iv_cbc_2, aes_cipher_text_cbc_2},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTS, aes_plain_text_cts_1, //2
      sizeof(aes_plain_text_cts_1), aes_key_cts_1, 16,
      aes_iv_cts_1, aes_cipher_text_cts_1},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTS, aes_plain_text_cts_2, //3
      sizeof(aes_plain_text_cts_2), aes_key_cts_1, 16,
      aes_iv_cts_1, aes_cipher_text_cts_2},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTS, aes_plain_text_cts_3, //4
      sizeof(aes_plain_text_cts_3), aes_key_cts_1, 16,
      aes_iv_cts_1, aes_cipher_text_cts_3},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTS, aes_plain_text_cts_4, //5
      sizeof(aes_plain_text_cts_4), aes_key_cts_1, 16,
      aes_iv_cts_1, aes_cipher_text_cts_4},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTS, aes_plain_text_cts_5, //6
      sizeof(aes_plain_text_cts_5), aes_key_cts_1, 16,
      aes_iv_cts_1, aes_cipher_text_cts_5},
   {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTS, aes_plain_text_cts_6, //7
      sizeof(aes_plain_text_cts_6), aes_key_cts_1, 16,
      aes_iv_cts_1, aes_cipher_text_cts_6}

};

uf_aes_vector_type_t sw_aes_cts_test_vectors[] =
{
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, aes_plain_text_cbc_1, //0
      sizeof(aes_plain_text_cbc_1), aes_key_cbc_1, 16,
      aes_iv_cbc_1, aes_cipher_text_cbc_1}, //new
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, aes_plain_text_cbc_2, //1
      sizeof(aes_plain_text_cbc_2), aes_key_cbc_2, 16,
      aes_iv_cbc_2, aes_cipher_text_cbc_2},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, aes_plain_text_cts_1, //2
      sizeof(aes_plain_text_cts_1), aes_key_cts_1, 16,
      aes_iv_cts_1, aes_cipher_text_cts_1},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, aes_plain_text_cts_2, //3
      sizeof(aes_plain_text_cts_2), aes_key_cts_1, 16,
      aes_iv_cts_1, aes_cipher_text_cts_2},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, aes_plain_text_cts_3, //4
      sizeof(aes_plain_text_cts_3), aes_key_cts_1, 16,
      aes_iv_cts_1, aes_cipher_text_cts_3},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, aes_plain_text_cts_4, //5
      sizeof(aes_plain_text_cts_4), aes_key_cts_1, 16,
      aes_iv_cts_1, aes_cipher_text_cts_4},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, aes_plain_text_cts_5, //6
      sizeof(aes_plain_text_cts_5), aes_key_cts_1, 16,
      aes_iv_cts_1, aes_cipher_text_cts_5},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, aes_plain_text_cts_6, //7
      sizeof(aes_plain_text_cts_6), aes_key_cts_1, 16,
      aes_iv_cts_1, aes_cipher_text_cts_6}
};

/* AES-256 ECB test vectors */
static UINT8_A aes256_plain_text_ecb_1[] =
{
   0x06, 0x9A, 0x00, 0x7F, 0xC7, 0x6A, 0x45, 0x9F,
   0x98, 0xBA, 0xF9, 0x17, 0xFE, 0xDF, 0x95, 0x21
};
static UINT8_A aes256_key_ecb_1[] =
{
   0x08, 0x09, 0x0A, 0x0B, 0x0D, 0x0E, 0x0F, 0x10,
   0x12, 0x13, 0x14, 0x15, 0x17, 0x18, 0x19, 0x1A,
   0x1C, 0x1D, 0x1E, 0x1F, 0x21, 0x22, 0x23, 0x24,
   0x26, 0x27, 0x28, 0x29, 0x2B, 0x2C, 0x2D, 0x2E
};
static UINT8_A aes256_cipher_text_ecb_1[] =
{
   0x08, 0x0e, 0x95, 0x17, 0xeb, 0x16, 0x77, 0x71,
   0x9a, 0xcf, 0x72, 0x80, 0x86, 0x04, 0x0a, 0xe3
};

static UINT8_A aes256_plain_text_ecb_2[] =
{
   0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
   0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF
};
static UINT8_A aes256_key_ecb_2[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
};
static UINT8_A aes256_cipher_text_ecb_2[] =
{
   0x8E, 0xA2, 0xB7, 0xCA, 0x51, 0x67, 0x45, 0xBF,
   0xEA, 0xFC, 0x49, 0x90, 0x4B, 0x49, 0x60, 0x89
};

static UINT8_A aes256_plain_text_ecb_3[] =
{
   0xCC, 0xC6, 0x2C, 0x6B, 0x0A, 0x09, 0xA6, 0x71,
   0xD6, 0x44, 0x56, 0x81, 0x8D, 0xB2, 0x9A, 0x4D
};
static UINT8_A aes256_key_ecb_3[] =
{
   0xCC, 0x22, 0xDA, 0x78, 0x7F, 0x37, 0x57, 0x11,
   0xC7, 0x63, 0x02, 0xBE, 0xF0, 0x97, 0x9D, 0x8E,
   0xDD, 0xF8, 0x42, 0x82, 0x9C, 0x2B, 0x99, 0xEF,
   0x3D, 0xD0, 0x4E, 0x23, 0xE5, 0x4C, 0xC2, 0x4B
};
static UINT8_A aes256_cipher_text_ecb_3[] =
{
   0xDF, 0x86, 0x34, 0xCA, 0x02, 0xB1, 0x3A, 0x12,
   0x5B, 0x78, 0x6E, 0x1D, 0xCE, 0x90, 0x65, 0x8B
};

static UINT8_A aes256_plain_text_ecb_4[] = //multiblock
{
   0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
   0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
   0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C,
   0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
   0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11,
   0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
   0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
   0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
};
static UINT8_A aes256_key_ecb_4[] =
{
   0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE,
   0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
   0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7,
   0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4
};
static UINT8_A aes256_cipher_text_ecb_4[] =
{
   0xF3, 0xEE, 0xD1, 0xBD, 0xB5, 0xD2, 0xA0, 0x3C,
   0x06, 0x4B, 0x5A, 0x7E, 0x3D, 0xB1, 0x81, 0xF8,
   0x59, 0x1C, 0xCB, 0x10, 0xD4, 0x10, 0xED, 0x26,
   0xDC, 0x5B, 0xA7, 0x4A, 0x31, 0x36, 0x28, 0x70,
   0xB6, 0xED, 0x21, 0xB9, 0x9C, 0xA6, 0xF4, 0xF9,
   0xF1, 0x53, 0xE7, 0xB1, 0xBE, 0xAF, 0xED, 0x1D,
   0x23, 0x30, 0x4B, 0x7A, 0x39, 0xF9, 0xF3, 0xFF,
   0x06, 0x7D, 0x8D, 0x8F, 0x9E, 0x24, 0xEC, 0xC7
};

static UINT8_A aes256_plain_text_ecb_5[] =
{
   0x7E, 0x77, 0x1C, 0x6E, 0xE4, 0xB2, 0x6D, 0xB8,
   0x90, 0x50, 0xE9, 0x82, 0xBA, 0x7E, 0x98, 0x03,
   0xC8, 0xDA, 0x34, 0x60, 0x64, 0x34, 0xDD, 0x85,
   0xD2, 0x91, 0x0E, 0x53, 0x80, 0x76, 0xD0, 0x01
};
static UINT8_A aes256_key_ecb_5[] =
{
   0x7A, 0x52, 0xE4, 0xD3, 0x42, 0xAA, 0x07, 0x25,
   0x5A, 0x7E, 0x7C, 0x34, 0x26, 0x6C, 0xF7, 0x30,
   0x2A, 0xBE, 0x2D, 0x4D, 0xD7, 0xEC, 0x44, 0x68,
   0xA4, 0x61, 0x87, 0xEE, 0x61, 0x82, 0x5F, 0xFA
};
static UINT8_A aes256_cipher_text_ecb_5[] =
{
   0xA9, 0x1D, 0x8B, 0x2D, 0xDF, 0x37, 0x52, 0x0B,
   0xC4, 0x69, 0x47, 0x0A, 0xD0, 0xDD, 0x63, 0x94,
   0x92, 0x31, 0x43, 0xCE, 0x55, 0x38, 0x6B, 0xEB,
   0x1F, 0x9C, 0x4B, 0xD5, 0x15, 0x84, 0x65, 0x8E
};

static UINT8_A aes256_plain_text_ecb_6[] =
{
   0x68, 0xC9, 0x88, 0x5B, 0xA2, 0xBE, 0x03, 0x18,
   0x1F, 0x65, 0xF1, 0xE0, 0x4E, 0x83, 0xD6, 0xBA,
   0x68, 0x80, 0x46, 0x75, 0x50, 0xBC, 0xF0, 0x99,
   0xBE, 0x26, 0xDC, 0x9D, 0x9C, 0x0A, 0xF1, 0x5A,
   0xB0, 0x2A, 0xBA, 0xC0, 0x7C, 0x11, 0x6A, 0xC8,
   0x62, 0xA4, 0x1D, 0xA9, 0x0C, 0xFA, 0x60, 0x4F
};
static UINT8_A aes256_key_ecb_6[] =
{
   0x60, 0x5C, 0x41, 0x39, 0xC9, 0x61, 0xB4, 0x96,
   0xCA, 0x51, 0x48, 0xF1, 0xBD, 0xB1, 0xBB, 0x19,
   0x01, 0xF2, 0x10, 0x19, 0x43, 0xA0, 0xEC, 0x10,
   0xFC, 0xDC, 0x40, 0x3D, 0x3B, 0x0C, 0x28, 0x5A
};
static UINT8_A aes256_cipher_text_ecb_6[] =
{
   0xA7, 0x60, 0x3D, 0x29, 0xBB, 0xBA, 0x4C, 0x77,
   0x20, 0x8B, 0xF2, 0xF3, 0xDF, 0x9F, 0x5E, 0xC8,
   0x52, 0x04, 0xAD, 0xCE, 0x01, 0x22, 0x99, 0xF2,
   0xCC, 0xE7, 0xB3, 0x26, 0xCE, 0x78, 0xF5, 0xCF,
   0x80, 0x40, 0x34, 0x3D, 0xD2, 0x91, 0xE8, 0xCF,
   0x9F, 0x36, 0x45, 0x72, 0x63, 0x68, 0xDC, 0x20
};

static UINT8_A aes256_plain_text_ecb_7[] =
{
   0x35, 0x1F, 0xEE, 0x09, 0x91, 0x22, 0xE3, 0x71,
   0xC4, 0x83, 0x0F, 0x40, 0x9C, 0x6C, 0x44, 0x11,
   0x18, 0x6D, 0x22, 0x17, 0x6F, 0x71, 0x38, 0xB0,
   0x54, 0xF1, 0x6B, 0x3C, 0x79, 0x67, 0x9C, 0x2F,
   0x52, 0x06, 0x85, 0x65, 0x1B, 0xA8, 0xE4, 0xB6,
   0x1C, 0x08, 0xDC, 0xCB, 0x2C, 0x31, 0x98, 0x2F,
   0x74, 0x36, 0x31, 0xA9, 0x75, 0x24, 0xD2, 0xCA,
   0x4D, 0x35, 0x1A, 0xC2, 0x35, 0x46, 0xC1, 0x78
};
static UINT8_A aes256_key_ecb_7[] =
{
   0xF9, 0x84, 0xB0, 0xF5, 0x34, 0xFC, 0x0A, 0xE2,
   0xC0, 0xA8, 0x59, 0x3E, 0x16, 0xAB, 0x83, 0x65,
   0xF2, 0x5F, 0xCC, 0x9C, 0x59, 0x47, 0xF9, 0xA2,
   0xDB, 0x45, 0xB5, 0x88, 0x16, 0x0D, 0x35, 0xC3
};
static UINT8_A aes256_cipher_text_ecb_7[] =
{
   0x8B, 0x9C, 0x9E, 0x69, 0x2C, 0x16, 0xE7, 0x05,
   0x98, 0x18, 0xE2, 0x85, 0xE8, 0x5D, 0x8F, 0xA5,
   0x43, 0x3D, 0xEE, 0x2A, 0xFF, 0x9F, 0xEC, 0x61,
   0xD6, 0xA0, 0xA7, 0x81, 0xE2, 0x4B, 0x24, 0xF6,
   0x49, 0x02, 0xFB, 0xD1, 0x8C, 0xEF, 0x74, 0x61,
   0xAD, 0x77, 0x60, 0xCF, 0xB2, 0x44, 0x2F, 0xB7,
   0x4F, 0xFD, 0x9B, 0xE1, 0x08, 0xA3, 0x86, 0x54,
   0x5F, 0x2A, 0x21, 0x64, 0x30, 0xEF, 0x16, 0xFB
};

static UINT8_A aes256_plain_text_ecb_8[] =
{
   0x4B, 0x4B, 0x12, 0xD6, 0xEE, 0x6F, 0xC0, 0xBF,
   0x98, 0x7E, 0xAA, 0xFE, 0x26, 0x34, 0xAA, 0xD4,
   0x64, 0x78, 0x1F, 0xF4, 0xC8, 0x3D, 0x3F, 0x8A,
   0x61, 0xA6, 0xAF, 0x7C, 0x0A, 0x6D, 0x51, 0xF0,
   0xE3, 0x85, 0x5D, 0x0E, 0x02, 0xFE, 0xB3, 0x07,
   0x65, 0x2A, 0x6F, 0x56, 0x2B, 0xFE, 0xBE, 0x46,
   0x04, 0xBA, 0xF1, 0xB4, 0xE7, 0xCD, 0xD0, 0x16,
   0x03, 0xF2, 0x31, 0xBC, 0xF7, 0xA0, 0xC9, 0x56,
   0x45, 0xA1, 0x41, 0xB7, 0x04, 0x00, 0x8C, 0xD8,
   0xD6, 0x29, 0x79, 0x20, 0x1A, 0x4C, 0x84, 0xE2
};
static UINT8_A aes256_key_ecb_8[] =
{
   0xBA, 0x42, 0xB7, 0x60, 0xBB, 0x5A, 0x5D, 0xE2,
   0x1A, 0xCB, 0x9A, 0xBA, 0x21, 0x4C, 0x97, 0x83,
   0xCD, 0x71, 0xEA, 0x84, 0x1A, 0xDA, 0x01, 0x85,
   0x80, 0xAB, 0xC4, 0xE1, 0xBE, 0x3B, 0x76, 0xDD
};
static UINT8_A aes256_cipher_text_ecb_8[] =
{
   0xFA, 0x18, 0xD2, 0x5E, 0x37, 0xEA, 0x0C, 0xE9,
   0x4F, 0x09, 0x49, 0xEF, 0xC0, 0xED, 0xEC, 0xC6,
   0xA4, 0x0F, 0xAD, 0xA8, 0xF0, 0x07, 0xFD, 0x8E,
   0x76, 0x0A, 0xFE, 0xD0, 0xA8, 0x3E, 0xBB, 0x35,
   0x0C, 0x82, 0xB0, 0x3B, 0xAA, 0xA6, 0xEE, 0x19,
   0xF7, 0x91, 0xBB, 0x9B, 0xD1, 0xB4, 0x4D, 0x27,
   0xA7, 0x6F, 0xC6, 0xEB, 0x0E, 0x1C, 0x00, 0x17,
   0xD6, 0x87, 0x76, 0xED, 0x69, 0xA5, 0x41, 0x85,
   0x1A, 0x73, 0x2E, 0x46, 0xEF, 0x32, 0x8D, 0xEF,
   0x06, 0x4B, 0xAF, 0x6A, 0x0A, 0x75, 0x55, 0x88
};

static UINT8_A aes256_plain_text_ecb_9[] =
{
   0xB3, 0x68, 0x09, 0x19, 0x81, 0x32, 0x51, 0x8D,
   0x81, 0x5A, 0xA3, 0x7F, 0x32, 0xF4, 0x0D, 0xD7,
   0xA9, 0x52, 0xEC, 0x8B, 0xD6, 0x33, 0x55, 0x70,
   0x08, 0x37, 0xB4, 0x50, 0xB3, 0x96, 0xB3, 0x3C,
   0x72, 0x12, 0x5E, 0x23, 0x48, 0x2A, 0x84, 0xA4,
   0x2B, 0x91, 0x60, 0x21, 0xC3, 0xDE, 0x78, 0x15,
   0x6F, 0x85, 0xC6, 0xA7, 0x89, 0x06, 0x16, 0x7F,
   0xEB, 0x64, 0xAF, 0xD8, 0xB1, 0xD9, 0x35, 0xD6,
   0x41, 0xC8, 0xCE, 0x1A, 0x89, 0xF3, 0x84, 0x95,
   0x88, 0xEE, 0xEB, 0x99, 0x10, 0xD4, 0x03, 0x36,
   0xCA, 0x38, 0x5F, 0xC3, 0x7A, 0x5E, 0x87, 0xBB,
   0x84, 0xAB, 0x9C, 0xCB, 0xB0, 0x5B, 0x3A, 0x28
};
static UINT8_A aes256_key_ecb_9[] =
{
   0x1D, 0x29, 0x07, 0x9C, 0xC3, 0x4A, 0xB5, 0xA3,
   0xBC, 0x71, 0x3F, 0x41, 0x6A, 0x12, 0x9F, 0x9D,
   0x26, 0xAD, 0xA1, 0x5F, 0xCA, 0x45, 0x8C, 0xC2,
   0x73, 0x14, 0x04, 0xEA, 0x85, 0x7D, 0x2F, 0x79
};
static UINT8_A aes256_cipher_text_ecb_9[] =
{
   0x7A, 0xE8, 0x03, 0xB1, 0x49, 0x14, 0xD1, 0x56,
   0x43, 0x9F, 0x58, 0x0C, 0x02, 0xC5, 0x92, 0xBF,
   0x9A, 0x41, 0xB7, 0xB8, 0x0C, 0x20, 0x16, 0x81,
   0x29, 0xA3, 0x3F, 0xAE, 0x22, 0x90, 0x40, 0x3F,
   0x01, 0xA6, 0xFA, 0xBE, 0x4F, 0xEA, 0x7A, 0xC7,
   0x70, 0xFF, 0xBC, 0x6C, 0x42, 0x1F, 0x8E, 0x01,
   0x3B, 0x9E, 0x83, 0x16, 0x74, 0xEF, 0x17, 0xEB,
   0x27, 0xD4, 0x46, 0xDD, 0xED, 0x3B, 0xAF, 0x50,
   0x68, 0x6B, 0x80, 0x9C, 0x18, 0xB6, 0xBB, 0xD5,
   0x88, 0xCD, 0x3C, 0x74, 0x23, 0xB6, 0x49, 0x87,
   0xE9, 0x16, 0x4B, 0x7E, 0x1E, 0x66, 0x98, 0x7D,
   0xC9, 0x31, 0x97, 0x90, 0xAE, 0x27, 0xB3, 0xE8
};

static UINT8_A aes256_plain_text_ecb_10[] =
{
   0xE1, 0x99, 0x89, 0x9E, 0x1E, 0x12, 0xCF, 0xFC,
   0xB2, 0x89, 0x09, 0xAE, 0xC5, 0x1B, 0x36, 0xC2,
   0xF9, 0x6F, 0xAB, 0x49, 0xEF, 0x32, 0xB9, 0x65,
   0x0C, 0xC3, 0x8A, 0xA3, 0x7D, 0x2F, 0x4C, 0x8B,
   0x78, 0x5F, 0x91, 0x76, 0xC5, 0x90, 0xF6, 0xA0,
   0x7E, 0x04, 0x03, 0x7E, 0x13, 0xF7, 0x53, 0x52,
   0x90, 0xD5, 0xF5, 0xFC, 0x23, 0xAA, 0x11, 0x13,
   0xD9, 0xDA, 0xCF, 0x34, 0xA8, 0x12, 0x74, 0x9A,
   0xB2, 0x7E, 0xCF, 0xEF, 0xC8, 0x3D, 0xD3, 0x62,
   0x2D, 0x12, 0x85, 0xFA, 0x9D, 0x5C, 0x19, 0x2A,
   0x8E, 0x48, 0x57, 0xA5, 0xB6, 0x45, 0x44, 0x73,
   0xCD, 0xB8, 0xFF, 0x45, 0x94, 0xF1, 0xE9, 0x06,
   0x16, 0x5E, 0x08, 0xB2, 0x2E, 0xFF, 0xAE, 0x6B,
   0x49, 0x1A, 0x55, 0xCA, 0x6D, 0x30, 0xCE, 0x73
};
static UINT8_A aes256_key_ecb_10[] =
{
   0x2E, 0x39, 0xC5, 0x85, 0xCE, 0x49, 0x00, 0xD3,
   0x23, 0xCE, 0x29, 0x71, 0x3B, 0xEB, 0xE7, 0x3A,
   0x1B, 0xE0, 0x8A, 0x0C, 0xB2, 0x2E, 0x9F, 0x13,
   0x10, 0xFC, 0xC1, 0x4A, 0xD4, 0xB9, 0xB2, 0x3E
};
static UINT8_A aes256_cipher_text_ecb_10[] =
{
   0x2C, 0x49, 0x98, 0x42, 0x8E, 0x72, 0xF6, 0xD9,
   0x6E, 0x98, 0x2A, 0x31, 0x6F, 0x73, 0xBF, 0x2A,
   0x7D, 0xA8, 0x17, 0x30, 0x90, 0x9B, 0x65, 0x40,
   0x34, 0x89, 0xAB, 0x92, 0xAD, 0xA6, 0xDE, 0x11,
   0x88, 0x2D, 0x08, 0x74, 0x2F, 0x90, 0xF0, 0xF1,
   0x09, 0xD3, 0x42, 0x0B, 0x00, 0xB8, 0xAB, 0xE6,
   0x87, 0x3F, 0x4F, 0xDD, 0x14, 0x74, 0x92, 0x3D,
   0xA2, 0xC5, 0xBD, 0xEA, 0x2E, 0x45, 0x23, 0xFF,
   0xCA, 0x21, 0x32, 0x01, 0x5E, 0xCF, 0x7C, 0x9C,
   0xAC, 0x9D, 0xE2, 0xF9, 0x56, 0xB1, 0x12, 0xC4,
   0xBA, 0x8E, 0x4C, 0x8E, 0x4B, 0x35, 0x4A, 0x3D,
   0xF6, 0xE4, 0x65, 0x2D, 0x6A, 0x77, 0xAE, 0x98,
   0x2A, 0x24, 0xD1, 0x5C, 0xFF, 0x71, 0xB9, 0x79,
   0x53, 0x8D, 0x49, 0x99, 0x4F, 0xD3, 0x87, 0x61
};

static UINT8_A aes256_plain_text_ecb_11[] =
{
   0x0F, 0x53, 0x21, 0xDB, 0x6F, 0xD9, 0xD8, 0x16,
   0xD8, 0x8E, 0x28, 0x18, 0x3A, 0x73, 0x9D, 0x90,
   0x97, 0x4E, 0x76, 0x09, 0x5C, 0xAA, 0x9F, 0x12,
   0xF1, 0x1F, 0xE4, 0x9C, 0x8F, 0xD3, 0x5F, 0xA3,
   0x52, 0x41, 0x32, 0x11, 0x8F, 0x39, 0x7C, 0xDF,
   0x67, 0x28, 0x85, 0x7D, 0x9C, 0x9A, 0x3C, 0x74,
   0xA4, 0xFD, 0xE4, 0x4A, 0xFC, 0xA8, 0x0A, 0xA5,
   0xBF, 0x1C, 0xBA, 0xB4, 0x77, 0x89, 0xF2, 0xCB,
   0x33, 0x94, 0x57, 0x4D, 0xDA, 0x57, 0x27, 0xCF,
   0xBE, 0xA9, 0x6F, 0x7A, 0x74, 0xA0, 0x7E, 0xB1,
   0xE4, 0x55, 0x99, 0xF4, 0x9C, 0xE7, 0xF0, 0x05,
   0x6A, 0xC3, 0xD1, 0x49, 0x29, 0x22, 0x1C, 0x70,
   0xDB, 0xD3, 0xF7, 0x59, 0xF8, 0x3A, 0xC2, 0x2F,
   0x06, 0x99, 0x4E, 0xD9, 0x6A, 0x8E, 0x49, 0x91,
   0x7E, 0xDD, 0xFD, 0xD2, 0xE3, 0x70, 0x3B, 0x78,
   0x19, 0x9C, 0x91, 0x23, 0x4C, 0xA6, 0xC3, 0xDC
};
static UINT8_A aes256_key_ecb_11[] =
{
   0x85, 0x40, 0x5C, 0x4F, 0x0E, 0xBB, 0xE8, 0xF2,
   0x92, 0x28, 0xF0, 0x2F, 0x1F, 0xF1, 0x84, 0xE2,
   0xF5, 0xE7, 0x85, 0x7E, 0x89, 0x33, 0xC2, 0xA1,
   0xD0, 0x8F, 0x61, 0xEC, 0xB9, 0xB6, 0x81, 0x11
};
static UINT8_A aes256_cipher_text_ecb_11[] =
{
   0x2A, 0xC6, 0xDE, 0x21, 0x2D, 0xA0, 0x43, 0x4B,
   0xEA, 0x9C, 0xDD, 0x73, 0x32, 0x63, 0x73, 0x07,
   0x13, 0x1D, 0x31, 0xE8, 0xC4, 0xB0, 0xC1, 0xFD,
   0x02, 0x29, 0x8E, 0x24, 0x9B, 0xFA, 0x9F, 0x64,
   0xF3, 0x4A, 0xAE, 0x45, 0xFA, 0xAD, 0xF7, 0x9D,
   0x97, 0x1A, 0xE8, 0x2B, 0x03, 0x3D, 0x90, 0x3F,
   0x6B, 0x18, 0xAD, 0xEC, 0x17, 0x1E, 0xC8, 0x3C,
   0xCD, 0x14, 0x7B, 0x44, 0xD0, 0x5D, 0xEC, 0x5C,
   0xED, 0xB5, 0x74, 0x53, 0x4E, 0x89, 0x01, 0x38,
   0x55, 0x34, 0xC3, 0xF1, 0xDA, 0xE4, 0xAE, 0xBE,
   0xE0, 0xEB, 0x21, 0x64, 0x97, 0x5E, 0x8B, 0x4E,
   0x85, 0xA7, 0xB5, 0xA7, 0x66, 0xFF, 0xD8, 0x24,
   0x78, 0x85, 0xC2, 0xB6, 0x42, 0x9E, 0xB6, 0x59,
   0xB9, 0x2C, 0x8D, 0x95, 0x3A, 0xF9, 0x2B, 0x54,
   0x51, 0x79, 0x33, 0x56, 0x66, 0x54, 0xD8, 0x04,
   0x66, 0x51, 0x12, 0xBE, 0xC1, 0x7F, 0xF3, 0xA4
};

static UINT8_A aes256_plain_text_ecb_12[] =
{
   0x36, 0x37, 0xF7, 0x1F, 0x60, 0xA4, 0x30, 0x32,
   0x29, 0x80, 0x34, 0x9A, 0xD4, 0x14, 0xFC, 0xFD,
   0xC1, 0x4F, 0x87, 0xE9, 0x91, 0x5D, 0x21, 0x0E,
   0x8B, 0x7B, 0xE5, 0xAA, 0x3E, 0x09, 0x81, 0x44,
   0x68, 0xE0, 0x39, 0x9D, 0x17, 0xE7, 0x2F, 0xE4,
   0x0E, 0xE1, 0xE1, 0x29, 0x6A, 0x89, 0xF3, 0x14,
   0x86, 0xE1, 0x2F, 0xD7, 0x1B, 0xC7, 0xCA, 0x61,
   0xAC, 0xC9, 0xE8, 0xD4, 0x21, 0x3A, 0x63, 0x3A,
   0xB2, 0x85, 0xC8, 0x74, 0x06, 0xC2, 0xA3, 0x72,
   0x9C, 0x87, 0xFD, 0xAA, 0x6B, 0x01, 0x22, 0xC2,
   0xC5, 0x43, 0xA8, 0x90, 0x81, 0xDD, 0xAC, 0x45,
   0x59, 0xB1, 0x5F, 0xE5, 0x91, 0x02, 0xC2, 0xFB,
   0xDA, 0xCE, 0xAD, 0x8A, 0x75, 0x5E, 0x16, 0x46,
   0x9B, 0x1B, 0x90, 0x04, 0x1D, 0xA3, 0x12, 0x70,
   0x48, 0x1C, 0xFA, 0xFE, 0x0B, 0xC9, 0x51, 0x23,
   0x5C, 0xDA, 0x51, 0xC4, 0xD7, 0x89, 0x24, 0xEF,
   0xA8, 0x62, 0xEF, 0xC9, 0xAC, 0xE2, 0x0F, 0xC7,
   0xD3, 0x44, 0xA3, 0x21, 0xC9, 0x98, 0x4A, 0x84
};
static UINT8_A aes256_key_ecb_12[] =
{
   0xF1, 0x57, 0x28, 0x5D, 0xB0, 0x0E, 0x64, 0xC2,
   0x79, 0x16, 0x68, 0xA5, 0x44, 0x93, 0x96, 0x6E,
   0x30, 0x39, 0xA1, 0x94, 0x26, 0x60, 0x50, 0x56,
   0xB9, 0x5B, 0x7E, 0xAC, 0x51, 0x06, 0x66, 0x7D
};
static UINT8_A aes256_cipher_text_ecb_12[] =
{
   0xCA, 0x0A, 0x68, 0x3E, 0x75, 0x9C, 0x13, 0x12,
   0x92, 0x8F, 0xE0, 0x11, 0x98, 0xF6, 0x25, 0xBB,
   0xA0, 0x44, 0xBB, 0x90, 0x03, 0xE8, 0x2B, 0x92,
   0x79, 0xB6, 0x81, 0x2F, 0xEE, 0xFE, 0x54, 0xE3,
   0x0C, 0xCC, 0x0C, 0xA5, 0x1F, 0xB8, 0x58, 0xEB,
   0xA9, 0xED, 0x46, 0x67, 0xE8, 0x5C, 0x14, 0x6A,
   0x42, 0x40, 0x71, 0xE7, 0xBF, 0x60, 0x3F, 0x1F,
   0x53, 0x8E, 0xAD, 0x57, 0xA3, 0xE2, 0x9C, 0x58,
   0x35, 0x49, 0xC0, 0x8E, 0x27, 0x9B, 0xB0, 0x78,
   0xCC, 0x51, 0xE4, 0x2E, 0xEB, 0x3D, 0x24, 0x43,
   0xDA, 0x96, 0x51, 0x92, 0xCD, 0x04, 0x78, 0xE8,
   0xD7, 0xEA, 0x13, 0x43, 0xCF, 0x90, 0x19, 0x6F,
   0x52, 0x09, 0x33, 0xE3, 0xAA, 0xB6, 0xDB, 0x2D,
   0xCD, 0x9A, 0x76, 0x53, 0x4E, 0x05, 0x48, 0x3E,
   0xEA, 0x2D, 0x37, 0x3D, 0xEA, 0xE9, 0x5D, 0x62,
   0x13, 0xB9, 0x1D, 0xB2, 0xB9, 0x6A, 0xA6, 0xAD,
   0xCE, 0x72, 0x7C, 0xDF, 0x7E, 0x43, 0xBD, 0x01,
   0x97, 0x8D, 0x07, 0xE0, 0x24, 0x1C, 0xF1, 0xC1
};

static UINT8_A aes256_plain_text_ecb_13[] =
{
   0xC9, 0x1B, 0x8A, 0x7B, 0x9C, 0x51, 0x17, 0x84,
   0xB6, 0xA3, 0x7F, 0x73, 0xB2, 0x90, 0x51, 0x6B,
   0xB9, 0xEF, 0x1E, 0x8D, 0xF6, 0x8D, 0x89, 0xBF,
   0x49, 0x16, 0x9E, 0xAC, 0x40, 0x39, 0x65, 0x0C,
   0x43, 0x07, 0xB6, 0x26, 0x0E, 0x9C, 0x4E, 0x93,
   0x65, 0x02, 0x23, 0x44, 0x02, 0x52, 0xF5, 0xC7,
   0xD3, 0x1C, 0x26, 0xC5, 0x62, 0x09, 0xCB, 0xD0,
   0x95, 0xBF, 0x03, 0x5B, 0x97, 0x05, 0x88, 0x0A,
   0x16, 0x28, 0x83, 0x2D, 0xAF, 0x9D, 0xA5, 0x87,
   0xA6, 0xE7, 0x73, 0x53, 0xDB, 0xBC, 0xE1, 0x89,
   0xF9, 0x63, 0x23, 0x5D, 0xF1, 0x60, 0xC0, 0x08,
   0xA7, 0x53, 0xE8, 0xCC, 0xEA, 0x1E, 0x07, 0x32,
   0xAA, 0x46, 0x9A, 0x97, 0x65, 0x9C, 0x42, 0xE6,
   0xE3, 0x1C, 0x16, 0xA7, 0x23, 0x15, 0x3E, 0x39,
   0x95, 0x8A, 0xBE, 0x5B, 0x8A, 0xD8, 0x8F, 0xF2,
   0xE8, 0x9A, 0xF4, 0x06, 0x22, 0xCA, 0x0B, 0x0D,
   0x67, 0x29, 0xA2, 0x6C, 0x1A, 0xE0, 0x4D, 0x3B,
   0x83, 0x67, 0xB5, 0x48, 0xC4, 0xA6, 0x33, 0x5F,
   0x0E, 0x5A, 0x9E, 0xC9, 0x14, 0xBB, 0x61, 0x13,
   0xC0, 0x5C, 0xD0, 0x11, 0x25, 0x52, 0xBC, 0x21
};
static UINT8_A aes256_key_ecb_13[] =
{
   0x44, 0xA2, 0xB5, 0xA7, 0x45, 0x3E, 0x49, 0xF3,
   0x82, 0x61, 0x90, 0x4F, 0x21, 0xAC, 0x79, 0x76,
   0x41, 0xD1, 0xBC, 0xD8, 0xDD, 0xED, 0xD2, 0x93,
   0xF3, 0x19, 0x44, 0x9F, 0xE6, 0x3B, 0x29, 0x48
};
static UINT8_A aes256_cipher_text_ecb_13[] =
{
   0x05, 0xD5, 0x1A, 0xF0, 0xE2, 0xB6, 0x1E, 0x2C,
   0x06, 0xCB, 0x1E, 0x84, 0x3F, 0xEE, 0x31, 0x72,
   0x82, 0x5E, 0x63, 0xB5, 0xD1, 0xCE, 0x81, 0x83,
   0xB7, 0xE1, 0xDB, 0x62, 0x68, 0xDB, 0x5A, 0xA7,
   0x26, 0x52, 0x1F, 0x46, 0xE9, 0x48, 0x02, 0x8A,
   0xA4, 0x43, 0xAF, 0x9E, 0xBD, 0x8B, 0x7C, 0x6B,
   0xAF, 0x95, 0x80, 0x67, 0xAB, 0x0D, 0x4A, 0x8A,
   0xC5, 0x30, 0xEC, 0xBB, 0x68, 0xCD, 0xFC, 0x3E,
   0xB9, 0x30, 0x34, 0xA4, 0x28, 0xEB, 0x7E, 0x8F,
   0x6A, 0x38, 0x13, 0xCE, 0xA6, 0x18, 0x90, 0x68,
   0xDF, 0xEC, 0xFA, 0x26, 0x8B, 0x7E, 0xCD, 0x59,
   0x87, 0xF8, 0xCB, 0x27, 0x32, 0xC6, 0x88, 0x2B,
   0xBE, 0xC8, 0xF7, 0x16, 0xBA, 0xC2, 0x54, 0xD7,
   0x22, 0x69, 0x23, 0x0A, 0xEC, 0x5D, 0xC7, 0xF5,
   0xA6, 0xB8, 0x66, 0xFD, 0x30, 0x52, 0x42, 0x55,
   0x2D, 0x40, 0x0F, 0x5B, 0x04, 0x04, 0xF1, 0x9C,
   0xBF, 0xE7, 0x29, 0x1F, 0xAB, 0x69, 0x0E, 0xCF,
   0xE6, 0x01, 0x8C, 0x43, 0x09, 0xFC, 0x63, 0x9D,
   0x1B, 0x65, 0xFC, 0xB6, 0x5E, 0x64, 0x3E, 0xDB,
   0x0A, 0xD1, 0xF0, 0x9C, 0xFE, 0x9C, 0xEE, 0x4A
};

aes_vector_type_t aes256_ecb_test_vectors[] =
{
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_1, //0
      sizeof(aes256_plain_text_ecb_1), aes256_key_ecb_1, 32,
      NULL, aes256_cipher_text_ecb_1},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_2, //1
      sizeof(aes256_plain_text_ecb_2), aes256_key_ecb_2, 32,
      NULL, aes256_cipher_text_ecb_2},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_3, //2
      sizeof(aes256_plain_text_ecb_3), aes256_key_ecb_3, 32,
      NULL, aes256_cipher_text_ecb_3},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_4, //3
      sizeof(aes256_plain_text_ecb_4), aes256_key_ecb_4, 32,
      NULL, aes256_cipher_text_ecb_4},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_5, //4
      sizeof(aes256_plain_text_ecb_5), aes256_key_ecb_5, 32,
      NULL, aes256_cipher_text_ecb_5},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_6, //5
      sizeof(aes256_plain_text_ecb_6), aes256_key_ecb_6, 32,
      NULL, aes256_cipher_text_ecb_6},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_7, //6
      sizeof(aes256_plain_text_ecb_7), aes256_key_ecb_7, 32,
      NULL, aes256_cipher_text_ecb_7},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_8, //7
      sizeof(aes256_plain_text_ecb_8), aes256_key_ecb_8, 32,
      NULL, aes256_cipher_text_ecb_8},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_9, //8
      sizeof(aes256_plain_text_ecb_9), aes256_key_ecb_9, 32,
      NULL, aes256_cipher_text_ecb_9},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_10, //9
      sizeof(aes256_plain_text_ecb_10), aes256_key_ecb_10, 32,
      NULL, aes256_cipher_text_ecb_10},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_11, //10
      sizeof(aes256_plain_text_ecb_11), aes256_key_ecb_11, 32,
      NULL, aes256_cipher_text_ecb_11},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_12, //11
      sizeof(aes256_plain_text_ecb_12), aes256_key_ecb_12, 32,
      NULL, aes256_cipher_text_ecb_12},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_13, //12
      sizeof(aes256_plain_text_ecb_13), aes256_key_ecb_13, 32,
      NULL, aes256_cipher_text_ecb_13}

};

uf_aes_vector_type_t sw_aes256_ecb_test_vectors[] =
{
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_1, //0
      sizeof(aes256_plain_text_ecb_1), aes256_key_ecb_1, 32,
      NULL, aes256_cipher_text_ecb_1},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_2, //1
      sizeof(aes256_plain_text_ecb_2), aes256_key_ecb_2, 32,
      NULL, aes256_cipher_text_ecb_2},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_3, //2
      sizeof(aes256_plain_text_ecb_3), aes256_key_ecb_3, 32,
      NULL, aes256_cipher_text_ecb_3},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_4, //3
      sizeof(aes256_plain_text_ecb_4), aes256_key_ecb_4, 32,
      NULL, aes256_cipher_text_ecb_4},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_5, //4
      sizeof(aes256_plain_text_ecb_5), aes256_key_ecb_5, 32,
      NULL, aes256_cipher_text_ecb_5},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_6, //5
      sizeof(aes256_plain_text_ecb_6), aes256_key_ecb_6, 32,
      NULL, aes256_cipher_text_ecb_6},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_7, //6
      sizeof(aes256_plain_text_ecb_7), aes256_key_ecb_7, 32,
      NULL, aes256_cipher_text_ecb_7},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_8, //7
      sizeof(aes256_plain_text_ecb_8), aes256_key_ecb_8, 32,
      NULL, aes256_cipher_text_ecb_8},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_9, //8
      sizeof(aes256_plain_text_ecb_9), aes256_key_ecb_9, 32,
      NULL, aes256_cipher_text_ecb_9},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_10, //9
      sizeof(aes256_plain_text_ecb_10), aes256_key_ecb_10, 32,
      NULL, aes256_cipher_text_ecb_10},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_11, //10
      sizeof(aes256_plain_text_ecb_11), aes256_key_ecb_11, 32,
      NULL, aes256_cipher_text_ecb_11},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_12, //11
      sizeof(aes256_plain_text_ecb_12), aes256_key_ecb_12, 32,
      NULL, aes256_cipher_text_ecb_12},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_ECB, aes256_plain_text_ecb_13, //12
      sizeof(aes256_plain_text_ecb_13), aes256_key_ecb_13, 32,
      NULL, aes256_cipher_text_ecb_13}

};

/* AES-256 CBC test vectors */
static UINT8_A aes256_plain_text_cbc_1[] =
{
   0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
   0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};
static UINT8_A aes256_key_cbc_1[] =
{
   0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
   0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
   0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
   0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
};
static UINT8_A aes256_iv_cbc_1[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};
static UINT8_A aes256_cipher_text_cbc_1[] =
{
   0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba,
   0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6
};

static UINT8_A aes256_plain_text_cbc_2[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aes256_key_cbc_2[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aes256_iv_cbc_2[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aes256_cipher_text_cbc_2[] =
{
   0xDC, 0x95, 0xC0, 0x78, 0xA2, 0x40, 0x89, 0x89,
   0xAD, 0x48, 0xA2, 0x14, 0x92, 0x84, 0x20, 0x87
};

static UINT8_A aes256_plain_text_cbc_3[] =
{
   0x62, 0x82, 0xB8, 0xC0, 0x5C, 0x5C, 0x15, 0x30,
   0xB9, 0x7D, 0x48, 0x16, 0xCA, 0x43, 0x47, 0x62
};
static UINT8_A aes256_key_cbc_3[] =
{
   0x6E, 0xD7, 0x6D, 0x2D, 0x97, 0xC6, 0x9F, 0xD1,
   0x33, 0x95, 0x89, 0x52, 0x39, 0x31, 0xF2, 0xA6,
   0xCF, 0xF5, 0x54, 0xB1, 0x5F, 0x73, 0x8F, 0x21,
   0xEC, 0x72, 0xDD, 0x97, 0xA7, 0x33, 0x09, 0x07
};
static UINT8_A aes256_iv_cbc_3[] =
{
   0x85, 0x1E, 0x87, 0x64, 0x77, 0x6E, 0x67, 0x96,
   0xAA, 0xB7, 0x22, 0xDB, 0xB6, 0x44, 0xAC, 0xE8
};
static UINT8_A aes256_cipher_text_cbc_3[] =
{
   0x6A, 0xCC, 0x04, 0x14, 0x2E, 0x10, 0x0A, 0x65,
   0xF5, 0x1B, 0x97, 0xAD, 0xF5, 0x17, 0x2C, 0x41
};

static UINT8_A aes256_plain_text_cbc_4[] = //multiblock
{
   0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
   0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
   0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C,
   0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
   0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11,
   0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
   0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
   0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
};
static UINT8_A aes256_key_cbc_4[] =
{
   0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE,
   0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
   0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7,
   0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4
};
static UINT8_A aes256_iv_cbc_4[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};
static UINT8_A aes256_cipher_text_cbc_4[] =
{
   0xF5, 0x8C, 0x4C, 0x04, 0xD6, 0xE5, 0xF1, 0xBA,
   0x77, 0x9E, 0xAB, 0xFB, 0x5F, 0x7B, 0xFB, 0xD6,
   0x9C, 0xFC, 0x4E, 0x96, 0x7E, 0xDB, 0x80, 0x8D,
   0x67, 0x9F, 0x77, 0x7B, 0xC6, 0x70, 0x2C, 0x7D,
   0x39, 0xF2, 0x33, 0x69, 0xA9, 0xD9, 0xBA, 0xCF,
   0xA5, 0x30, 0xE2, 0x63, 0x04, 0x23, 0x14, 0x61,
   0xB2, 0xEB, 0x05, 0xE2, 0xC3, 0x9B, 0xE9, 0xFC,
   0xDA, 0x6C, 0x19, 0x07, 0x8C, 0x6A, 0x9D, 0x1B
};

static UINT8_A aes256_plain_text_cbc_5[] =
{
   0x50, 0xE9, 0xEE, 0xE1, 0xAC, 0x52, 0x80, 0x09,
   0xE8, 0xCB, 0xCD, 0x35, 0x69, 0x75, 0x88, 0x1F,
   0x95, 0x72, 0x54, 0xB1, 0x3F, 0x91, 0xD7, 0xC6,
   0x66, 0x2D, 0x10, 0x31, 0x20, 0x52, 0xEB, 0x00
};
static UINT8_A aes256_key_cbc_5[] =
{
   0xDC, 0xE2, 0x6C, 0x6B, 0x4C, 0xFB, 0x28, 0x65,
   0x10, 0xDA, 0x4E, 0xEC, 0xD2, 0xCF, 0xFE, 0x6C,
   0xDF, 0x43, 0x0F, 0x33, 0xDB, 0x9B, 0x5F, 0x77,
   0xB4, 0x60, 0x67, 0x9B, 0xD4, 0x9D, 0x13, 0xAE
};
static UINT8_A aes256_iv_cbc_5[] =
{
   0xFD, 0xEA, 0xA1, 0x34, 0xC8, 0xD7, 0x37, 0x9D,
   0x45, 0x71, 0x75, 0xFD, 0x1A, 0x57, 0xD3, 0xFC
};
static UINT8_A aes256_cipher_text_cbc_5[] =
{
   0x2F, 0xA0, 0xDF, 0x72, 0x2A, 0x9F, 0xD3, 0xB6,
   0x4C, 0xB1, 0x8F, 0xB2, 0xB3, 0xDB, 0x55, 0xFF,
   0x22, 0x67, 0x42, 0x27, 0x57, 0x28, 0x94, 0x13,
   0xF8, 0xF6, 0x57, 0x50, 0x74, 0x12, 0xA6, 0x4C
};

static UINT8_A aes256_plain_text_cbc_6[] =
{
   0x8D, 0x3A, 0xA1, 0x96, 0xEC, 0x3D, 0x7C, 0x9B,
   0x5B, 0xB1, 0x22, 0xE7, 0xFE, 0x77, 0xFB, 0x12,
   0x95, 0xA6, 0xDA, 0x75, 0xAB, 0xE5, 0xD3, 0xA5,
   0x10, 0x19, 0x4D, 0x3A, 0x8A, 0x41, 0x57, 0xD5,
   0xC8, 0x9D, 0x40, 0x61, 0x97, 0x16, 0x61, 0x98,
   0x59, 0xDA, 0x3E, 0xC9, 0xB2, 0x47, 0xCE, 0xD9
};
static UINT8_A aes256_key_cbc_6[] =
{
   0xFE, 0x89, 0x01, 0xFE, 0xCD, 0x3C, 0xCD, 0x2E,
   0xC5, 0xFD, 0xC7, 0xC7, 0xA0, 0xB5, 0x05, 0x19,
   0xC2, 0x45, 0xB4, 0x2D, 0x61, 0x1A, 0x5E, 0xF9,
   0xE9, 0x02, 0x68, 0xD5, 0x9F, 0x3E, 0xDF, 0x33
};
static UINT8_A aes256_iv_cbc_6[] =
{
   0xBD, 0x41, 0x6C, 0xB3, 0xB9, 0x89, 0x22, 0x28,
   0xD8, 0xF1, 0xDF, 0x57, 0x56, 0x92, 0xE4, 0xD0
};
static UINT8_A aes256_cipher_text_cbc_6[] =
{
   0x60, 0x8E, 0x82, 0xC7, 0xAB, 0x04, 0x00, 0x7A,
   0xDB, 0x22, 0xE3, 0x89, 0xA4, 0x47, 0x97, 0xFE,
   0xD7, 0xDE, 0x09, 0x0C, 0x8C, 0x03, 0xCA, 0x8A,
   0x2C, 0x5A, 0xCD, 0x9E, 0x84, 0xDF, 0x37, 0xFB,
   0xC5, 0x8C, 0xE8, 0xED, 0xB2, 0x93, 0xE9, 0x8F,
   0x02, 0xB6, 0x40, 0xD6, 0xD1, 0xD7, 0x24, 0x64
};

static UINT8_A aes256_plain_text_cbc_7[] =
{
   0x8B, 0x37, 0xF9, 0x14, 0x8D, 0xF4, 0xBB, 0x25,
   0x95, 0x6B, 0xE6, 0x31, 0x0C, 0x73, 0xC8, 0xDC,
   0x58, 0xEA, 0x97, 0x14, 0xFF, 0x49, 0xB6, 0x43,
   0x10, 0x7B, 0x34, 0xC9, 0xBF, 0xF0, 0x96, 0xA9,
   0x4F, 0xED, 0xD6, 0x82, 0x35, 0x26, 0xAB, 0xC2,
   0x7A, 0x8E, 0x0B, 0x16, 0x61, 0x6E, 0xEE, 0x25,
   0x4A, 0xB4, 0x56, 0x7D, 0xD6, 0x8E, 0x8C, 0xCD,
   0x4C, 0x38, 0xAC, 0x56, 0x3B, 0x13, 0x63, 0x9C
};
static UINT8_A aes256_key_cbc_7[] =
{
   0x04, 0x93, 0xFF, 0x63, 0x71, 0x08, 0xAF, 0x6A,
   0x5B, 0x8E, 0x90, 0xAC, 0x1F, 0xDF, 0x03, 0x5A,
   0x3D, 0x4B, 0xAF, 0xD1, 0xAF, 0xB5, 0x73, 0xBE,
   0x7A, 0xDE, 0x9E, 0x86, 0x82, 0xE6, 0x63, 0xE5
};
static UINT8_A aes256_iv_cbc_7[] =
{
   0xC0, 0xCD, 0x2B, 0xEB, 0xCC, 0xBB, 0x6C, 0x49,
   0x92, 0x0B, 0xD5, 0x48, 0x2A, 0xC7, 0x56, 0xE8
};
static UINT8_A aes256_cipher_text_cbc_7[] =
{
   0x05, 0xD5, 0xC7, 0x77, 0x29, 0x42, 0x1B, 0x08,
   0xB7, 0x37, 0xE4, 0x11, 0x19, 0xFA, 0x44, 0x38,
   0xD1, 0xF5, 0x70, 0xCC, 0x77, 0x2A, 0x4D, 0x6C,
   0x3D, 0xF7, 0xFF, 0xED, 0xA0, 0x38, 0x4E, 0xF8,
   0x42, 0x88, 0xCE, 0x37, 0xFC, 0x4C, 0x4C, 0x7D,
   0x11, 0x25, 0xA4, 0x99, 0xB0, 0x51, 0x36, 0x4C,
   0x38, 0x9F, 0xD6, 0x39, 0xBD, 0xDA, 0x64, 0x7D,
   0xAA, 0x3B, 0xDA, 0xDA, 0xB2, 0xEB, 0x55, 0x94
};

static UINT8_A aes256_plain_text_cbc_8[] =
{
   0xC7, 0x91, 0x7F, 0x84, 0xF7, 0x47, 0xCD, 0x8C,
   0x4B, 0x4F, 0xED, 0xC2, 0x21, 0x9B, 0xDB, 0xC5,
   0xF4, 0xD0, 0x75, 0x88, 0x38, 0x9D, 0x82, 0x48,
   0x85, 0x4C, 0xF2, 0xC2, 0xF8, 0x96, 0x67, 0xA2,
   0xD7, 0xBC, 0xF5, 0x3E, 0x73, 0xD3, 0x26, 0x84,
   0x53, 0x5F, 0x42, 0x31, 0x8E, 0x24, 0xCD, 0x45,
   0x79, 0x39, 0x50, 0xB3, 0x82, 0x5E, 0x5D, 0x5C,
   0x5C, 0x8F, 0xCD, 0x3E, 0x5D, 0xDA, 0x4C, 0xE9,
   0x24, 0x6D, 0x18, 0x33, 0x7E, 0xF3, 0x05, 0x2D,
   0x8B, 0x21, 0xC5, 0x56, 0x1C, 0x8B, 0x66, 0x0E
};
static UINT8_A aes256_key_cbc_8[] =
{
   0x9A, 0xDC, 0x8F, 0xBD, 0x50, 0x6E, 0x03, 0x2A,
   0xF7, 0xFA, 0x20, 0xCF, 0x53, 0x43, 0x71, 0x9D,
   0xE6, 0xD1, 0x28, 0x8C, 0x15, 0x8C, 0x63, 0xD6,
   0x87, 0x8A, 0xAF, 0x64, 0xCE, 0x26, 0xCA, 0x85
};
static UINT8_A aes256_iv_cbc_8[] =
{
   0x11, 0x95, 0x8D, 0xC6, 0xAB, 0x81, 0xE1, 0xC7,
   0xF0, 0x16, 0x31, 0xE9, 0x94, 0x4E, 0x62, 0x0F
};
static UINT8_A aes256_cipher_text_cbc_8[] =
{
   0x9C, 0x99, 0xE6, 0x82, 0x36, 0xBB, 0x2E, 0x92,
   0x9D, 0xB1, 0x08, 0x9C, 0x77, 0x50, 0xF1, 0xB3,
   0x56, 0xD3, 0x9A, 0xB9, 0xD0, 0xC4, 0x0C, 0x3E,
   0x2F, 0x05, 0x10, 0x8A, 0xE9, 0xD0, 0xC3, 0x0B,
   0x04, 0x83, 0x2C, 0xCD, 0xBD, 0xC0, 0x8E, 0xBF,
   0xA4, 0x26, 0xB7, 0xF5, 0xEF, 0xDE, 0x98, 0x6E,
   0xD0, 0x57, 0x84, 0xCE, 0x36, 0x81, 0x93, 0xBB,
   0x36, 0x99, 0xBC, 0x69, 0x10, 0x65, 0xAC, 0x62,
   0xE2, 0x58, 0xB9, 0xAA, 0x4C, 0xC5, 0x57, 0xE2,
   0xB4, 0x5B, 0x49, 0xCE, 0x05, 0x51, 0x1E, 0x65
};

static UINT8_A aes256_plain_text_cbc_9[] =
{
   0x3A, 0xDE, 0xA6, 0xE0, 0x6E, 0x42, 0xC4, 0xF0,
   0x41, 0x02, 0x14, 0x91, 0xF2, 0x77, 0x5E, 0xF6,
   0x37, 0x8C, 0xB0, 0x88, 0x24, 0x16, 0x5E, 0xDC,
   0x4F, 0x64, 0x48, 0xE2, 0x32, 0x17, 0x5B, 0x60,
   0xD0, 0x34, 0x5B, 0x9F, 0x9C, 0x78, 0xDF, 0x65,
   0x96, 0xEC, 0x9D, 0x22, 0xB7, 0xB9, 0xE7, 0x6E,
   0x8F, 0x3C, 0x76, 0xB3, 0x2D, 0x5D, 0x67, 0x27,
   0x3F, 0x1D, 0x83, 0xFE, 0x7A, 0x6F, 0xC3, 0xDD,
   0x3C, 0x49, 0x13, 0x91, 0x70, 0xFA, 0x57, 0x01,
   0xB3, 0xBE, 0xAC, 0x61, 0xB4, 0x90, 0xF0, 0xA9,
   0xE1, 0x3F, 0x84, 0x46, 0x40, 0xC4, 0x50, 0x0F,
   0x9A, 0xD3, 0x08, 0x7A, 0xDF, 0xB0, 0xAE, 0x10
};
static UINT8_A aes256_key_cbc_9[] =
{
   0x73, 0xB8, 0xFA, 0xF0, 0x0B, 0x33, 0x02, 0xAC,
   0x99, 0x85, 0x5C, 0xF6, 0xF9, 0xE9, 0xE4, 0x85,
   0x18, 0x69, 0x0A, 0x59, 0x06, 0xA4, 0x86, 0x9D,
   0x4D, 0xCF, 0x48, 0xD2, 0x82, 0xFA, 0xAE, 0x2A
};
static UINT8_A aes256_iv_cbc_9[] =
{
   0xB3, 0xCB, 0x97, 0xA8, 0x0A, 0x53, 0x99, 0x12,
   0xB8, 0xC2, 0x1F, 0x45, 0x0D, 0x3B, 0x93, 0x95
};
static UINT8_A aes256_cipher_text_cbc_9[] =
{
   0xAC, 0x3D, 0x6D, 0xBA, 0xFE, 0x2E, 0x0F, 0x74,
   0x06, 0x32, 0xFD, 0x9E, 0x82, 0x0B, 0xF6, 0x04,
   0x4C, 0xD5, 0xB1, 0x55, 0x1C, 0xBB, 0x9C, 0xC0,
   0x3C, 0x0B, 0x25, 0xC3, 0x9C, 0xCB, 0x7F, 0x33,
   0xB8, 0x3A, 0xAC, 0xFC, 0xA4, 0x0A, 0x32, 0x65,
   0xF2, 0xBB, 0xFF, 0x87, 0x91, 0x53, 0x44, 0x8A,
   0xCA, 0xCB, 0x88, 0xFC, 0xFB, 0x3B, 0xB7, 0xB1,
   0x0F, 0xE4, 0x63, 0xA6, 0x8C, 0x01, 0x09, 0xF0,
   0x28, 0x38, 0x2E, 0x3E, 0x55, 0x7B, 0x1A, 0xDF,
   0x02, 0xED, 0x64, 0x8A, 0xB6, 0xBB, 0x89, 0x5D,
   0xF0, 0x20, 0x5D, 0x26, 0xEB, 0xBF, 0xA9, 0xA5,
   0xFD, 0x8C, 0xEB, 0xD8, 0xE4, 0xBE, 0xE3, 0xDC
};

static UINT8_A aes256_plain_text_cbc_10[] =
{
   0xCF, 0x52, 0xE5, 0xC3, 0x95, 0x4C, 0x51, 0xB9,
   0x4C, 0x9E, 0x38, 0xAC, 0xB8, 0xC9, 0xA7, 0xC7,
   0x6A, 0xEB, 0xDA, 0xA9, 0x94, 0x3E, 0xAE, 0x0A,
   0x1C, 0xE1, 0x55, 0xA2, 0xEF, 0xDB, 0x4D, 0x46,
   0x98, 0x5D, 0x93, 0x55, 0x11, 0x47, 0x14, 0x52,
   0xD9, 0xEE, 0x64, 0xD2, 0x46, 0x1C, 0xB2, 0x99,
   0x1D, 0x59, 0xFC, 0x00, 0x60, 0x69, 0x7F, 0x9A,
   0x67, 0x16, 0x72, 0x16, 0x32, 0x30, 0xF3, 0x67,
   0xFE, 0xD1, 0x42, 0x23, 0x16, 0xE5, 0x2D, 0x29,
   0xEC, 0xEA, 0xCB, 0x87, 0x68, 0xF5, 0x6D, 0x9B,
   0x80, 0xF6, 0xD2, 0x78, 0x09, 0x3C, 0x9A, 0x8A,
   0xCD, 0x3C, 0xFD, 0x7E, 0xDD, 0x8E, 0xBD, 0x5C,
   0x29, 0x38, 0x59, 0xF6, 0x4D, 0x2F, 0x84, 0x86,
   0xAE, 0x1B, 0xD5, 0x93, 0xC6, 0x5B, 0xC0, 0x14
};
static UINT8_A aes256_key_cbc_10[] =
{
   0x9D, 0xDF, 0x37, 0x45, 0x89, 0x65, 0x04, 0xFF,
   0x36, 0x0A, 0x51, 0xA3, 0xEB, 0x49, 0xC0, 0x1B,
   0x79, 0xFC, 0xCE, 0xBC, 0x71, 0xC3, 0xAB, 0xCB,
   0x94, 0xA9, 0x49, 0x40, 0x8B, 0x05, 0xB2, 0xC9
};
static UINT8_A aes256_iv_cbc_10[] =
{
   0xE7, 0x90, 0x26, 0x63, 0x9D, 0x4A, 0xA2, 0x30,
   0xB5, 0xCC, 0xFF, 0xB0, 0xB2, 0x9D, 0x79, 0xBC
};
static UINT8_A aes256_cipher_text_cbc_10[] =
{
   0x34, 0xDF, 0x56, 0x1B, 0xD2, 0xCF, 0xEB, 0xBC,
   0xB7, 0xAF, 0x3B, 0x4B, 0x8D, 0x21, 0xCA, 0x52,
   0x58, 0x31, 0x2E, 0x7E, 0x2E, 0x4E, 0x53, 0x8E,
   0x35, 0xAD, 0x24, 0x90, 0xB6, 0x11, 0x2F, 0x0D,
   0x7F, 0x14, 0x8F, 0x6A, 0xA8, 0xD5, 0x22, 0xA7,
   0xF3, 0xC6, 0x1D, 0x78, 0x5B, 0xD6, 0x67, 0xDB,
   0x0E, 0x1D, 0xC4, 0x60, 0x6C, 0x31, 0x8E, 0xA4,
   0xF2, 0x6A, 0xF4, 0xFE, 0x7D, 0x11, 0xD4, 0xDC,
   0xFF, 0x04, 0x56, 0x51, 0x1B, 0x4A, 0xED, 0x1A,
   0x0D, 0x91, 0xBA, 0x4A, 0x1F, 0xD6, 0xCD, 0x90,
   0x29, 0x18, 0x7B, 0xC5, 0x88, 0x1A, 0x5A, 0x07,
   0xFE, 0x02, 0x04, 0x9D, 0x39, 0x36, 0x8E, 0x83,
   0x13, 0x9B, 0x12, 0x82, 0x5B, 0xAE, 0x2C, 0x7B,
   0xE8, 0x1E, 0x6F, 0x12, 0xC6, 0x1B, 0xB5, 0xC5
};

static UINT8_A aes256_plain_text_cbc_11[] =
{
   0x25, 0x6F, 0xD7, 0x3C, 0xE3, 0x5A, 0xE3, 0xEA,
   0x9C, 0x25, 0xDD, 0x2A, 0x94, 0x54, 0x49, 0x3E,
   0x96, 0xD8, 0x63, 0x3F, 0xE6, 0x33, 0xB5, 0x61,
   0x76, 0xDC, 0xE8, 0x78, 0x5C, 0xE5, 0xDB, 0xBB,
   0x84, 0xDB, 0xF2, 0xC8, 0xA2, 0xEE, 0xB1, 0xE9,
   0x6B, 0x51, 0x89, 0x96, 0x05, 0xE4, 0xF1, 0x3B,
   0xBC, 0x11, 0xB9, 0x3B, 0xF6, 0xF3, 0x9B, 0x34,
   0x69, 0xBE, 0x14, 0x85, 0x8B, 0x5B, 0x72, 0x0D,
   0x4A, 0x52, 0x2D, 0x36, 0xFE, 0xED, 0x7A, 0x32,
   0x9C, 0x9B, 0x1E, 0x85, 0x2C, 0x92, 0x80, 0xC4,
   0x7D, 0xB8, 0x03, 0x9C, 0x17, 0xC4, 0x92, 0x15,
   0x71, 0xA0, 0x7D, 0x18, 0x64, 0x12, 0x83, 0x30,
   0xE0, 0x9C, 0x30, 0x8D, 0xDE, 0xA1, 0x69, 0x4E,
   0x95, 0xC8, 0x45, 0x00, 0xF1, 0xA6, 0x1E, 0x61,
   0x41, 0x97, 0xE8, 0x6A, 0x30, 0xEC, 0xC2, 0x8D,
   0xF6, 0x4C, 0xCB, 0x3C, 0xCF, 0x54, 0x37, 0xAA
};
static UINT8_A aes256_key_cbc_11[] =
{
   0x45, 0x8B, 0x67, 0xBF, 0x21, 0x2D, 0x20, 0xF3,
   0xA5, 0x7F, 0xCE, 0x39, 0x20, 0x65, 0x58, 0x2D,
   0xCE, 0xFB, 0xF3, 0x81, 0xAA, 0x22, 0x94, 0x9F,
   0x83, 0x38, 0xAB, 0x90, 0x52, 0x26, 0x0E, 0x1D
};
static UINT8_A aes256_iv_cbc_11[] =
{
   0x4C, 0x12, 0xEF, 0xFC, 0x59, 0x63, 0xD4, 0x04,
   0x59, 0x60, 0x26, 0x75, 0x15, 0x3E, 0x96, 0x49
};
static UINT8_A aes256_cipher_text_cbc_11[] =
{
   0x90, 0xB7, 0xB9, 0x63, 0x0A, 0x23, 0x78, 0xF5, 0x3F, 0x50, 0x1A, 0xB7, 0xBE, 0xFF, 0x03, 0x91,
   0x55, 0x00, 0x80, 0x71, 0xBC, 0x84, 0x38, 0xE7, 0x89, 0x93, 0x2C, 0xFD, 0x3E, 0xB1, 0x29, 0x91,
   0x95, 0x46, 0x5E, 0x66, 0x33, 0x84, 0x94, 0x63, 0xFD, 0xB4, 0x43, 0x75, 0x27, 0x8E, 0x2F, 0xDB,
   0x13, 0x10, 0x82, 0x1E, 0x64, 0x92, 0xCF, 0x80, 0xFF, 0x15, 0xCB, 0x77, 0x25, 0x09, 0xFB, 0x42,
   0x6F, 0x3A, 0xEE, 0xE2, 0x7B, 0xD4, 0x93, 0x88, 0x82, 0xFD, 0x2A, 0xE6, 0xB5, 0xBD, 0x9D, 0x91,
   0xFA, 0x4A, 0x43, 0xB1, 0x7B, 0xB4, 0x39, 0xEB, 0xBE, 0x59, 0xC0, 0x42, 0x31, 0x01, 0x63, 0xA8,
   0x2A, 0x5F, 0xE5, 0x38, 0x87, 0x96, 0xEE, 0xE3, 0x5A, 0x18, 0x1A, 0x12, 0x71, 0xF0, 0x0B, 0xE2,
   0x9B, 0x85, 0x2D, 0x8F, 0xA7, 0x59, 0xBA, 0xD0, 0x1F, 0xF4, 0x67, 0x8F, 0x01, 0x05, 0x94, 0xCD
};

static UINT8_A aes256_plain_text_cbc_12[] =
{
   0x02, 0x60, 0x06, 0xC4, 0xA7, 0x1A, 0x18, 0x0C,
   0x99, 0x29, 0x82, 0x4D, 0x9D, 0x09, 0x5B, 0x8F,
   0xAA, 0xA8, 0x6F, 0xC4, 0xFA, 0x25, 0xEC, 0xAC,
   0x61, 0xD8, 0x5F, 0xF6, 0xDE, 0x92, 0xDF, 0xA8,
   0x70, 0x26, 0x88, 0xC0, 0x2A, 0x28, 0x2C, 0x1B,
   0x8A, 0xF4, 0x44, 0x97, 0x07, 0xF2, 0x2D, 0x75,
   0xE9, 0x19, 0x91, 0x01, 0x5D, 0xB2, 0x23, 0x74,
   0xC9, 0x5F, 0x8F, 0x19, 0x5D, 0x5B, 0xB0, 0xAF,
   0xEB, 0x03, 0x04, 0x0F, 0xF8, 0x96, 0x5E, 0x0E,
   0x13, 0x39, 0xDB, 0xA5, 0x65, 0x3E, 0x17, 0x4F,
   0x8A, 0xA5, 0xA1, 0xB3, 0x9F, 0xE3, 0xAC, 0x83,
   0x9C, 0xE3, 0x07, 0xA4, 0xE4, 0x4B, 0x4F, 0x8F,
   0x1B, 0x00, 0x63, 0xF7, 0x38, 0xEC, 0x18, 0xAC,
   0xDB, 0xFF, 0x2E, 0xBF, 0xE0, 0x73, 0x83, 0xE7,
   0x34, 0x55, 0x87, 0x23, 0xE7, 0x41, 0xF0, 0xA1,
   0x83, 0x6D, 0xAF, 0xDF, 0x9D, 0xE8, 0x22, 0x10,
   0xA9, 0x24, 0x8B, 0xC1, 0x13, 0xB3, 0xC1, 0xBC,
   0x8B, 0x4E, 0x25, 0x2C, 0xA0, 0x1B, 0xD8, 0x03
};
static UINT8_A aes256_key_cbc_12[] =
{
   0xD2, 0x41, 0x2D, 0xB0, 0x84, 0x5D, 0x84, 0xE5,
   0x73, 0x2B, 0x8B, 0xBD, 0x64, 0x29, 0x57, 0x47,
   0x3B, 0x81, 0xFB, 0x99, 0xCA, 0x8B, 0xFF, 0x70,
   0xE7, 0x92, 0x0D, 0x16, 0xC1, 0xDB, 0xEC, 0x89
};
static UINT8_A aes256_iv_cbc_12[] =
{
   0x51, 0xC6, 0x19, 0xFC, 0xF0, 0xB2, 0x3F, 0x0C,
   0x79, 0x25, 0xF4, 0x00, 0xA6, 0xCA, 0xCB, 0x6D
};
static UINT8_A aes256_cipher_text_cbc_12[] =
{
   0x02, 0x54, 0xB2, 0x34, 0x63, 0xBC, 0xAB, 0xEC,
   0x5A, 0x39, 0x5E, 0xB7, 0x4C, 0x8F, 0xB0, 0xEB,
   0x13, 0x7A, 0x07, 0xBC, 0x6F, 0x5E, 0x9F, 0x61,
   0xEC, 0x0B, 0x05, 0x7D, 0xE3, 0x05, 0x71, 0x4F,
   0x8F, 0xA2, 0x94, 0x22, 0x1C, 0x91, 0xA1, 0x59,
   0xC3, 0x15, 0x93, 0x9B, 0x81, 0xE3, 0x00, 0xEE,
   0x90, 0x21, 0x92, 0xEC, 0x5F, 0x15, 0x25, 0x44,
   0x28, 0xD8, 0x77, 0x2F, 0x79, 0x32, 0x4E, 0xC4,
   0x32, 0x98, 0xCA, 0x21, 0xC0, 0x0B, 0x37, 0x02,
   0x73, 0xEE, 0x5E, 0x5E, 0xD9, 0x0E, 0x43, 0xEF,
   0xA1, 0xE0, 0x5A, 0x5D, 0x17, 0x12, 0x09, 0xFE,
   0x34, 0xF9, 0xF2, 0x92, 0x37, 0xDB, 0xA2, 0xA6,
   0x72, 0x66, 0x50, 0xFD, 0x3B, 0x13, 0x21, 0x74,
   0x7D, 0x12, 0x08, 0x86, 0x3C, 0x6C, 0x3C, 0x6B,
   0x3E, 0x2D, 0x87, 0x9A, 0xB5, 0xF2, 0x57, 0x82,
   0xF0, 0x8B, 0xA8, 0xF2, 0xAB, 0xBE, 0x63, 0xE0,
   0xBE, 0xDB, 0x4A, 0x22, 0x7E, 0x81, 0xAF, 0xB3,
   0x6B, 0xB6, 0x64, 0x55, 0x08, 0x35, 0x6D, 0x34
};

static UINT8_A aes256_plain_text_cbc_13[] =
{
   0x0C, 0x63, 0xD4, 0x13, 0xD3, 0x86, 0x45, 0x70,
   0xE7, 0x0B, 0xB6, 0x61, 0x8B, 0xF8, 0xA4, 0xB9,
   0x58, 0x55, 0x86, 0x68, 0x8C, 0x32, 0xBB, 0xA0,
   0xA5, 0xEC, 0xC1, 0x36, 0x2F, 0xAD, 0xA7, 0x4A,
   0xDA, 0x32, 0xC5, 0x2A, 0xCF, 0xD1, 0xAA, 0x74,
   0x44, 0xBA, 0x56, 0x7B, 0x4E, 0x7D, 0xAA, 0xEC,
   0xF7, 0xCC, 0x1C, 0xB2, 0x91, 0x82, 0xAF, 0x16,
   0x4A, 0xE5, 0x23, 0x2B, 0x00, 0x28, 0x68, 0x69,
   0x56, 0x35, 0x59, 0x98, 0x07, 0xA9, 0xA7, 0xF0,
   0x7A, 0x1F, 0x13, 0x7E, 0x97, 0xB1, 0xE1, 0xC9,
   0xDA, 0xBC, 0x89, 0xB6, 0xA5, 0xE4, 0xAF, 0xA9,
   0xDB, 0x58, 0x55, 0xED, 0xAA, 0x57, 0x50, 0x56,
   0xA8, 0xF4, 0xF8, 0x24, 0x22, 0x16, 0x24, 0x2B,
   0xB0, 0xC2, 0x56, 0x31, 0x0D, 0x9D, 0x32, 0x98,
   0x26, 0xAC, 0x35, 0x3D, 0x71, 0x5F, 0xA3, 0x9F,
   0x80, 0xCE, 0xC1, 0x44, 0xD6, 0x42, 0x45, 0x58,
   0xF9, 0xF7, 0x0B, 0x98, 0xC9, 0x20, 0x09, 0x6E,
   0x0F, 0x2C, 0x85, 0x5D, 0x59, 0x48, 0x85, 0xA0,
   0x06, 0x25, 0x88, 0x0E, 0x9D, 0xFB, 0x73, 0x41,
   0x63, 0xCE, 0xCE, 0xF7, 0x2C, 0xF0, 0x30, 0xB8
};
static UINT8_A aes256_key_cbc_13[] =
{
   0x48, 0xBE, 0x59, 0x7E, 0x63, 0x2C, 0x16, 0x77,
   0x23, 0x24, 0xC8, 0xD3, 0xFA, 0x1D, 0x9C, 0x5A,
   0x9E, 0xCD, 0x01, 0x0F, 0x14, 0xEC, 0x5D, 0x11,
   0x0D, 0x3B, 0xFE, 0xC3, 0x76, 0xC5, 0x53, 0x2B
};
static UINT8_A aes256_iv_cbc_13[] =
{
   0xD6, 0xD5, 0x81, 0xB8, 0xCF, 0x04, 0xEB, 0xD3,
   0xB6, 0xEA, 0xA1, 0xB5, 0x3F, 0x04, 0x7E, 0xE1
};
static UINT8_A aes256_cipher_text_cbc_13[] =
{
   0xFC, 0x58, 0x73, 0xE5, 0x0D, 0xE8, 0xFA, 0xF4,
   0xC6, 0xB8, 0x4B, 0xA7, 0x07, 0xB0, 0x85, 0x4E,
   0x9D, 0xB9, 0xAB, 0x2E, 0x9F, 0x7D, 0x70, 0x7F,
   0xBB, 0xA3, 0x38, 0xC6, 0x84, 0x3A, 0x18, 0xFC,
   0x6F, 0xAC, 0xEB, 0xAF, 0x66, 0x3D, 0x26, 0x29,
   0x6F, 0xB3, 0x29, 0xB4, 0xD2, 0x6F, 0x18, 0x49,
   0x4C, 0x79, 0xE0, 0x9E, 0x77, 0x96, 0x47, 0xF9,
   0xBA, 0xFA, 0x87, 0x48, 0x96, 0x30, 0xD7, 0x9F,
   0x43, 0x01, 0x61, 0x0C, 0x23, 0x00, 0xC1, 0x9D,
   0xBF, 0x31, 0x48, 0xB7, 0xCA, 0xC8, 0xC4, 0xF4,
   0x94, 0x41, 0x02, 0x75, 0x4F, 0x33, 0x2E, 0x92,
   0xB6, 0xF7, 0xC5, 0xE7, 0x5B, 0xC6, 0x17, 0x9E,
   0xB8, 0x77, 0xA0, 0x78, 0xD4, 0x71, 0x90, 0x09,
   0x02, 0x17, 0x44, 0xC1, 0x4F, 0x13, 0xFD, 0x2A,
   0x55, 0xA2, 0xB9, 0xC4, 0x4D, 0x18, 0x00, 0x06,
   0x85, 0xA8, 0x45, 0xA4, 0xF6, 0x32, 0xC7, 0xC5,
   0x6A, 0x77, 0x30, 0x6E, 0xFA, 0x66, 0xA2, 0x4D,
   0x05, 0xD0, 0x88, 0xDC, 0xD7, 0xC1, 0x3F, 0xE2,
   0x4F, 0xC4, 0x47, 0x27, 0x59, 0x65, 0xDB, 0x9E,
   0x4D, 0x37, 0xFB, 0xC9, 0x30, 0x44, 0x48, 0xCD
};

aes_vector_type_t aes256_cbc_test_vectors[] =
{
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_1, //0
      sizeof(aes256_plain_text_cbc_1), aes256_key_cbc_1, 32,
      aes256_iv_cbc_1, aes256_cipher_text_cbc_1},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_2, //1
      sizeof(aes256_plain_text_cbc_2), aes256_key_cbc_2, 32,
      aes256_iv_cbc_2, aes256_cipher_text_cbc_2},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_3, //2
      sizeof(aes256_plain_text_cbc_3), aes256_key_cbc_3, 32,
      aes256_iv_cbc_3, aes256_cipher_text_cbc_3},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_4, //3
      sizeof(aes256_plain_text_cbc_4), aes256_key_cbc_4, 32,
      aes256_iv_cbc_4, aes256_cipher_text_cbc_4},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_5, //4
      sizeof(aes256_plain_text_cbc_5), aes256_key_cbc_5, 32,
      aes256_iv_cbc_5, aes256_cipher_text_cbc_5},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_6, //5
      sizeof(aes256_plain_text_cbc_6), aes256_key_cbc_6, 32,
      aes256_iv_cbc_6, aes256_cipher_text_cbc_6},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_7, //6
      sizeof(aes256_plain_text_cbc_7), aes256_key_cbc_7, 32,
      aes256_iv_cbc_7, aes256_cipher_text_cbc_7},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_8, //7
      sizeof(aes256_plain_text_cbc_8), aes256_key_cbc_8, 32,
      aes256_iv_cbc_8, aes256_cipher_text_cbc_8},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_9, //8
      sizeof(aes256_plain_text_cbc_9), aes256_key_cbc_9, 32,
      aes256_iv_cbc_9, aes256_cipher_text_cbc_9},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_10, //9
      sizeof(aes256_plain_text_cbc_10), aes256_key_cbc_10, 32,
      aes256_iv_cbc_10, aes256_cipher_text_cbc_10},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_11, //10
      sizeof(aes256_plain_text_cbc_11), aes256_key_cbc_11, 32,
      aes256_iv_cbc_11, aes256_cipher_text_cbc_11},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_12, //11
      sizeof(aes256_plain_text_cbc_12), aes256_key_cbc_12, 32,
      aes256_iv_cbc_12, aes256_cipher_text_cbc_12},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_13, //12
      sizeof(aes256_plain_text_cbc_13), aes256_key_cbc_13, 32,
      aes256_iv_cbc_13, aes256_cipher_text_cbc_13}

};

uf_aes_vector_type_t sw_aes256_cbc_test_vectors[] =
{
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_1, //0
      sizeof(aes256_plain_text_cbc_1), aes256_key_cbc_1, 32,
      aes256_iv_cbc_1, aes256_cipher_text_cbc_1},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_2, //1
      sizeof(aes256_plain_text_cbc_2), aes256_key_cbc_2, 32,
      aes256_iv_cbc_2, aes256_cipher_text_cbc_2},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_3, //2
      sizeof(aes256_plain_text_cbc_3), aes256_key_cbc_3, 32,
      aes256_iv_cbc_3, aes256_cipher_text_cbc_3},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_4, //3
      sizeof(aes256_plain_text_cbc_4), aes256_key_cbc_4, 32,
      aes256_iv_cbc_4, aes256_cipher_text_cbc_4},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_5, //4
      sizeof(aes256_plain_text_cbc_5), aes256_key_cbc_5, 32,
      aes256_iv_cbc_5, aes256_cipher_text_cbc_5},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_6, //5
      sizeof(aes256_plain_text_cbc_6), aes256_key_cbc_6, 32,
      aes256_iv_cbc_6, aes256_cipher_text_cbc_6},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_7, //6
      sizeof(aes256_plain_text_cbc_7), aes256_key_cbc_7, 32,
      aes256_iv_cbc_7, aes256_cipher_text_cbc_7},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_8, //7
      sizeof(aes256_plain_text_cbc_8), aes256_key_cbc_8, 32,
      aes256_iv_cbc_8, aes256_cipher_text_cbc_8},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_9, //8
      sizeof(aes256_plain_text_cbc_9), aes256_key_cbc_9, 32,
      aes256_iv_cbc_9, aes256_cipher_text_cbc_9},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_10, //9
      sizeof(aes256_plain_text_cbc_10), aes256_key_cbc_10, 32,
      aes256_iv_cbc_10, aes256_cipher_text_cbc_10},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_11, //10
      sizeof(aes256_plain_text_cbc_11), aes256_key_cbc_11, 32,
      aes256_iv_cbc_11, aes256_cipher_text_cbc_11},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_12, //11
      sizeof(aes256_plain_text_cbc_12), aes256_key_cbc_12, 32,
      aes256_iv_cbc_12, aes256_cipher_text_cbc_12},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CBC, aes256_plain_text_cbc_13, //12
      sizeof(aes256_plain_text_cbc_13), aes256_key_cbc_13, 32,
      aes256_iv_cbc_13, aes256_cipher_text_cbc_13}

};

/* AES-256 CTR test vectors */
static UINT8_A aes256_plain_text_ctr_1[] =
{
   0x53, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x20, 0x62,
   0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x6D, 0x73, 0x67
};
static UINT8_A aes256_key_ctr_1[] =
{
   0x77, 0x6B, 0xEF, 0xF2, 0x85, 0x1D, 0xB0, 0x6F,
   0x4C, 0x8A, 0x05, 0x42, 0xC8, 0x69, 0x6F, 0x6C,
   0x6A, 0x81, 0xAF, 0x1E, 0xEC, 0x96, 0xB4, 0xD3,
   0x7F, 0xC1, 0xD6, 0x89, 0xE6, 0xC1, 0xC1, 0x04
};
static UINT8_A aes256_iv_ctr_1[] =
{
   0x00, 0x00, 0x00, 0x60, 0xDB, 0x56, 0x72, 0xC9,
   0x7A, 0xA8, 0xF0, 0xB2, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A aes256_cipher_text_ctr_1[] =
{
   0x14, 0x5A, 0xD0, 0x1D, 0xBF, 0x82, 0x4E, 0xC7,
   0x56, 0x08, 0x63, 0xDC, 0x71, 0xE3, 0xE0, 0xC0
};

static UINT8_A aes256_plain_text_ctr_2[] = //multiblock
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
};
static UINT8_A aes256_key_ctr_2[] =
{
   0xF6, 0xD6, 0x6D, 0x6B, 0xD5, 0x2D, 0x59, 0xBB,
   0x07, 0x96, 0x36, 0x58, 0x79, 0xEF, 0xF8, 0x86,
   0xC6, 0x6D, 0xD5, 0x1A, 0x5B, 0x6A, 0x99, 0x74,
   0x4B, 0x50, 0x59, 0x0C, 0x87, 0xA2, 0x38, 0x84
};
static UINT8_A aes256_iv_ctr_2[] =
{
   0x00, 0xFA, 0xAC, 0x24, 0xC1, 0x58, 0x5E, 0xF1,
   0x5A, 0x43, 0xD8, 0x75, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A aes256_cipher_text_ctr_2[] =
{
   0xF0, 0x5E, 0x23, 0x1B, 0x38, 0x94, 0x61, 0x2C,
   0x49, 0xEE, 0x00, 0x0B, 0x80, 0x4E, 0xB2, 0xA9,
   0xB8, 0x30, 0x6B, 0x50, 0x8F, 0x83, 0x9D, 0x6A,
   0x55, 0x30, 0x83, 0x1D, 0x93, 0x44, 0xAF, 0x1C
};

static UINT8_A aes256_plain_text_ctr_3[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
   0x20, 0x21, 0x22, 0x23
};
static UINT8_A aes256_key_ctr_3[] =
{
   0xFF, 0x7A, 0x61, 0x7C, 0xE6, 0x91, 0x48, 0xE4,
   0xF1, 0x72, 0x6E, 0x2F, 0x43, 0x58, 0x1D, 0xE2,
   0xAA, 0x62, 0xD9, 0xF8, 0x05, 0x53, 0x2E, 0xDF,
   0xF1, 0xEE, 0xD6, 0x87, 0xFB, 0x54, 0x15, 0x3D
};
static UINT8_A aes256_iv_ctr_3[] =
{
   0x00, 0x1C, 0xC5, 0xB7, 0x51, 0xA5, 0x1D, 0x70,
   0xA1, 0xC1, 0x11, 0x48, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A aes256_cipher_text_ctr_3[] =
{
   0xEB, 0x6C, 0x52, 0x82, 0x1D, 0x0B, 0xBB, 0xF7,
   0xCE, 0x75, 0x94, 0x46, 0x2A, 0xCA, 0x4F, 0xAA,
   0xB4, 0x07, 0xDF, 0x86, 0x65, 0x69, 0xFD, 0x07,
   0xF4, 0x8C, 0xC0, 0xB5, 0x83, 0xD6, 0x07, 0x1F,
   0x1E, 0xC0, 0xE6, 0xB8
};

static UINT8_A aes256_plain_text_ctr_4[] =
{
   0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
   0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};
static UINT8_A aes256_key_ctr_4[] =
{
   0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
   0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
   0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
   0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
};
static UINT8_A aes256_iv_ctr_4[] =
{
   0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
   0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};
static UINT8_A aes256_cipher_text_ctr_4[] =
{
   0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5,
   0xb7, 0xa7, 0xf5, 0x04, 0xbb, 0xf3, 0xd2, 0x28
};

static UINT8_A aes256_iv_all_zero[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

aes_vector_type_t aes256_ctr_test_vectors[] =
{
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CTR, aes256_plain_text_ctr_1, //0
      sizeof(aes256_plain_text_ctr_1), aes256_key_ctr_1, 32,
      aes256_iv_ctr_1, aes256_cipher_text_ctr_1},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CTR, aes256_plain_text_ctr_2, //1
      sizeof(aes256_plain_text_ctr_2), aes256_key_ctr_2, 32,
      aes256_iv_ctr_2, aes256_cipher_text_ctr_2},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CTR, aes256_plain_text_ctr_3, //2
      sizeof(aes256_plain_text_ctr_3), aes256_key_ctr_3, 32,
      aes256_iv_ctr_3, aes256_cipher_text_ctr_3},
   {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CTR, aes256_plain_text_ctr_4, //3
      sizeof(aes256_plain_text_ctr_4), aes256_key_ctr_4, 32,
      aes256_iv_ctr_4, aes256_cipher_text_ctr_4}

};

uf_aes_vector_type_t sw_aes256_ctr_test_vectors[] =
{
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CTR, aes256_plain_text_ctr_1, //0
      sizeof(aes256_plain_text_ctr_1), aes256_key_ctr_1, 32,
      aes256_iv_ctr_1, aes256_cipher_text_ctr_1},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CTR, aes256_plain_text_ctr_2, //1
      sizeof(aes256_plain_text_ctr_2), aes256_key_ctr_2, 32,
      aes256_iv_ctr_2, aes256_cipher_text_ctr_2},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CTR, aes256_plain_text_ctr_3, //2
      sizeof(aes256_plain_text_ctr_3), aes256_key_ctr_3, 32,
      aes256_iv_ctr_3, aes256_cipher_text_ctr_3},
   {SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_CTR, aes256_plain_text_ctr_4, //3
      sizeof(aes256_plain_text_ctr_4), aes256_key_ctr_4, 32,
      aes256_iv_ctr_4, aes256_cipher_text_ctr_4}

};

/* AES-128 and AES-256 test vectors array */
aes_vector_type_t aes_test_vectors[] =
{
    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTS, aes_plain_text_cts_1,
        sizeof(aes_plain_text_cts_1), aes_key_cts_1, 16,
        aes_iv_cts_1, aes_cipher_text_cts_1}
    ,
    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_1,
        sizeof(aes_plain_text_ecb_1), aes_key_ecb_1, 16, NULL,
        aes_cipher_text_ecb_1}
    ,
    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_2,
        sizeof(aes_plain_text_cbc_2), aes_key_cbc_2, 16,
        aes_iv_cbc_2, aes_cipher_text_cbc_2}
    ,
    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTR, aes_plain_text_ctr_3,
        sizeof(aes_plain_text_ctr_3), aes_key_ctr_3, 16,
        aes_iv_ctr_3, aes_cipher_text_ctr_3}
    ,
    {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_1,
        sizeof(aes256_plain_text_ecb_1), aes256_key_ecb_1, 32,
        NULL, aes256_cipher_text_ecb_1}
    ,
    {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_2,
        sizeof(aes256_plain_text_cbc_2), aes256_key_cbc_2, 32,
        aes256_iv_cbc_2, aes256_cipher_text_cbc_2}
    ,
    {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CTR, aes256_plain_text_ctr_3,
        sizeof(aes256_plain_text_ctr_3), aes256_key_ctr_3, 32,
        aes256_iv_ctr_3, aes256_cipher_text_ctr_3}
    ,
};


/* AES-128 CTR and AES-256 CTR test vectors for counter size test*/
aes_vector_type_t aes_test_vectors_ctr[] =
{
    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTR, NULL,
        0, aes_key_ctr_3, 16,
        NULL, NULL}
    ,
    {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CTR, NULL,
        0, aes256_key_ctr_3, 32,
        NULL, NULL}
    ,
};

/* AES-128 and AES-256 test vectors for adversarial tests */
aes_vector_type_t aes_test_vectors_adv_1[] =
{
    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTS, aes_plain_text_cts_1,
        sizeof(aes_plain_text_cts_1), aes_key_cts_1, 16,
        aes_iv_cts_1, aes_cipher_text_cts_1}
    ,
    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_ecb_1,
        sizeof(aes_plain_text_ecb_1), aes_key_ecb_1, 16, NULL,
        aes_cipher_text_ecb_1}
    ,
    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_cbc_2,
        sizeof(aes_plain_text_cbc_2), aes_key_cbc_2, 16,
        aes_iv_cbc_2, aes_cipher_text_cbc_2}
    ,
    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTR, aes_plain_text_ctr_3,
        sizeof(aes_plain_text_ctr_3), aes_key_ctr_3, 16,
        aes_iv_ctr_3, aes_cipher_text_ctr_3}
    ,
    {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_ecb_1,
        sizeof(aes256_plain_text_ecb_1), aes256_key_ecb_1, 32,
        NULL, aes256_cipher_text_ecb_1}
    ,
    {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_cbc_2,
        sizeof(aes256_plain_text_cbc_2), aes256_key_cbc_2, 32,
        aes256_iv_cbc_2, aes256_cipher_text_cbc_2}
    ,
    {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CTR, aes256_plain_text_ctr_3,
        sizeof(aes256_plain_text_ctr_3), aes256_key_ctr_3, 32,
        aes256_iv_ctr_3, aes256_cipher_text_ctr_3}
    ,
};

/* AES-128 and AES-256 large test vectors array */
aes_vector_type_2_t aes_test_vectors_2 =
{
   QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, NULL, 0,
      aes_key_ecb_1, sizeof(aes_key_ecb_1), aes_iv_cbc_1,
      NULL, NULL
};

aes_vector_type_2_t aes256_test_vectors_2 =
{
   QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, NULL, 0,
      aes256_key_ecb_1, sizeof(aes256_key_ecb_1), aes256_iv_cbc_1,
      NULL, NULL
};

/* AES-192 ECB test vectors */
static UINT8_A aes192_plain_text_ecb_1[] =
{
   0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
   0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF
};
static UINT8_A aes192_key_ecb_1[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
};
static UINT8_A aes192_cipher_text_ecb_1[] =
{
   0xDD, 0xA9, 0x7C, 0xA4, 0x86, 0x4C, 0xDF, 0xE0,
   0x6E, 0xAF, 0x70, 0xA0, 0xEC, 0x0D, 0x71, 0x91
};

static UINT8_A aes192_plain_text_ecb_2[] =
{
   0x60, 0xBC, 0xDB, 0x94, 0x16, 0xBA, 0xC0, 0x8D,
   0x7F, 0xD0, 0xD7, 0x80, 0x35, 0x37, 0x40, 0xA5
};
static UINT8_A aes192_key_ecb_2[] =
{
   0x61, 0x39, 0x6C, 0x53, 0x0C, 0xC1, 0x74, 0x9A,
   0x5B, 0xAB, 0x6F, 0xBC, 0xF9, 0x06, 0xFE, 0x67,
   0x2D, 0x0C, 0x4A, 0xB2, 0x01, 0xAF, 0x45, 0x54
};
static UINT8_A aes192_cipher_text_ecb_2[] =
{
   0x24, 0xF4, 0x0C, 0x4E, 0xEC, 0xD9, 0xC4, 0x98,
   0x25, 0x00, 0x0F, 0xCB, 0x49, 0x72, 0x64, 0x7A
};

static UINT8_A aes192_plain_text_ecb_3[] = //multiblock
{
   0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
   0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
   0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C,
   0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
   0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11,
   0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
   0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
   0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
};
static UINT8_A aes192_key_ecb_3[] =
{
   0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52,
   0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5,
   0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B
};
static UINT8_A aes192_cipher_text_ecb_3[] =
{
   0xBD, 0x33, 0x4F, 0x1D, 0x6E, 0x45, 0xF2, 0x5F,
   0xF7, 0x12, 0xA2, 0x14, 0x57, 0x1F, 0xA5, 0xCC,
   0x97, 0x41, 0x04, 0x84, 0x6D, 0x0A, 0xD3, 0xAD,
   0x77, 0x34, 0xEC, 0xB3, 0xEC, 0xEE, 0x4E, 0xEF,
   0xEF, 0x7A, 0xFD, 0x22, 0x70, 0xE2, 0xE6, 0x0A,
   0xDC, 0xE0, 0xBA, 0x2F, 0xAC, 0xE6, 0x44, 0x4E,
   0x9A, 0x4B, 0x41, 0xBA, 0x73, 0x8D, 0x6C, 0x72,
   0xFB, 0x16, 0x69, 0x16, 0x03, 0xC1, 0x8E, 0x0E
};

static UINT8_A aes192_plain_text_ecb_4[] =
{
   0x64, 0x14, 0x5E, 0x61, 0xE6, 0x1C, 0xD9, 0x6F,
   0x79, 0x6B, 0x18, 0x74, 0x64, 0xFA, 0xBB, 0xDE,
   0x6F, 0x42, 0xE6, 0x93, 0xF5, 0x01, 0xF1, 0xD7,
   0x3B, 0x3C, 0x60, 0x6F, 0x00, 0x80, 0x15, 0x06
};
static UINT8_A aes192_key_ecb_4[] =
{
   0xC9, 0xC8, 0x6A, 0x51, 0x22, 0x4E, 0x5F, 0x19,
   0x16, 0xD3, 0xF3, 0x3A, 0x60, 0x2F, 0x69, 0x7A,
   0xFC, 0x85, 0x2A, 0x2C, 0x44, 0xD3, 0x0D, 0x5F
};
static UINT8_A aes192_cipher_text_ecb_4[] =
{
   0x50, 0x2A, 0x73, 0xE4, 0x05, 0x1C, 0xFA, 0xC8,
   0xFE, 0x63, 0x43, 0x21, 0x1A, 0x12, 0x9F, 0x5A,
   0x5F, 0x56, 0x71, 0x0C, 0x41, 0xB3, 0x2C, 0x84,
   0xDA, 0x97, 0x8D, 0xDA, 0x2C, 0xEC, 0x34, 0xAD
};

static UINT8_A aes192_plain_text_ecb_5[] =
{
   0x07, 0xD3, 0x78, 0x1A, 0x71, 0xE8, 0x7B, 0x8C,
   0xF1, 0x2C, 0xAC, 0x46, 0x16, 0xF9, 0xC7, 0xA8,
   0x19, 0xBE, 0x57, 0xA0, 0x77, 0x0A, 0x7A, 0x66,
   0xE0, 0xE6, 0xE4, 0x69, 0x50, 0x68, 0x26, 0x89,
   0x7C, 0x85, 0x30, 0x86, 0x6F, 0x27, 0x15, 0xB8,
   0x75, 0x7F, 0x0F, 0x01, 0x38, 0x9D, 0xC3, 0x01
};
static UINT8_A aes192_key_ecb_5[] =
{
   0xC4, 0x85, 0x49, 0x19, 0xC3, 0x24, 0xD3, 0x81,
   0xBB, 0xEF, 0x9B, 0xEA, 0x77, 0x11, 0x72, 0xF6,
   0xE4, 0x56, 0x3F, 0xFB, 0xD1, 0xE1, 0xE9, 0x56
};
static UINT8_A aes192_cipher_text_ecb_5[] =
{
   0x0B, 0x04, 0x55, 0x95, 0x4E, 0x47, 0x7E, 0x87,
   0xD1, 0xA3, 0x38, 0x41, 0x4F, 0x8A, 0xC4, 0xD7,
   0x60, 0xEF, 0xB7, 0x0E, 0x57, 0x70, 0xE5, 0xD4,
   0x96, 0xB3, 0x11, 0x52, 0xCB, 0x07, 0xE9, 0x31,
   0x63, 0x78, 0xF7, 0xFD, 0x38, 0xC6, 0x90, 0x3B,
   0x31, 0xD4, 0xF1, 0xB1, 0xA5, 0x39, 0x31, 0xAF
};

static UINT8_A aes192_plain_text_ecb_6[] =
{
   0x09, 0x66, 0x12, 0xF4, 0x11, 0x1E, 0xBD, 0xB9,
   0xAC, 0xCF, 0x5E, 0xFB, 0xB9, 0x73, 0x58, 0x9E,
   0x5A, 0x2C, 0x91, 0x03, 0x40, 0x7E, 0xD2, 0xDA,
   0x29, 0xBC, 0x71, 0x37, 0xA6, 0xC0, 0x2D, 0xE8,
   0x22, 0xDF, 0x59, 0x07, 0x20, 0x1D, 0x3D, 0xCB,
   0xC4, 0x9C, 0xB9, 0xA3, 0x95, 0x5B, 0x2B, 0x86,
   0x81, 0x1D, 0x93, 0x84, 0x22, 0xA6, 0xF5, 0xA2,
   0x3F, 0x2D, 0xFF, 0xE4, 0x96, 0x0F, 0xEC, 0xAB
};
static UINT8_A aes192_key_ecb_6[] =
{
   0x3D, 0xEE, 0xCF, 0x7A, 0x03, 0x7E, 0xBB, 0x2A,
   0xDA, 0x80, 0x5E, 0x80, 0x59, 0xBF, 0xAE, 0xAE,
   0xBB, 0x19, 0x5C, 0xAC, 0xE3, 0x79, 0xFC, 0xD2
};
static UINT8_A aes192_cipher_text_ecb_6[] =
{
   0xD3, 0x75, 0xE1, 0xAF, 0x5F, 0xCD, 0x03, 0xE3,
   0x1D, 0x0F, 0x73, 0x5F, 0x6B, 0xC5, 0xD7, 0xE7,
   0x73, 0xBC, 0x34, 0xFF, 0x3E, 0xB7, 0x06, 0xBE,
   0x85, 0x84, 0x2F, 0x99, 0x8E, 0x4E, 0x36, 0x13,
   0x03, 0x82, 0x5B, 0x84, 0x81, 0x70, 0x60, 0x8F,
   0x30, 0x0A, 0xD1, 0xCE, 0xD8, 0x48, 0xB5, 0x23,
   0x34, 0x77, 0xF5, 0x37, 0x10, 0x50, 0x3C, 0x55,
   0x73, 0x6A, 0x73, 0x05, 0x95, 0x59, 0x99, 0x64
};

static UINT8_A aes192_plain_text_ecb_7[] =
{
   0x6F, 0x82, 0x5A, 0xD0, 0xE2, 0xFC, 0xAB, 0xD8,
   0x11, 0xDB, 0x11, 0xE2, 0x84, 0x0F, 0x08, 0x84,
   0x47, 0x0B, 0x87, 0xEA, 0xA6, 0x78, 0xE3, 0x29,
   0x34, 0x2B, 0xF0, 0xD1, 0x12, 0x55, 0x69, 0xC1,
   0x6D, 0xFA, 0x92, 0x40, 0x49, 0xA5, 0x1B, 0x49,
   0x7D, 0x59, 0x48, 0x25, 0xFF, 0xCA, 0x4F, 0x40,
   0x62, 0xCD, 0x02, 0x35, 0x9D, 0x0E, 0xAD, 0x2B,
   0x0E, 0x01, 0x42, 0x64, 0xBF, 0x1B, 0xB3, 0x13,
   0xE7, 0x41, 0xA0, 0x6E, 0xB4, 0x81, 0x32, 0x05,
   0x47, 0x00, 0x47, 0x52, 0x01, 0x33, 0xCF, 0x91
};
static UINT8_A aes192_key_ecb_7[] =
{
   0x0C, 0x03, 0x33, 0xD8, 0xFE, 0x3E, 0x99, 0xA1,
   0xEE, 0xCC, 0x12, 0x0D, 0x6B, 0x54, 0xBB, 0x8F,
   0xAA, 0x88, 0x8D, 0x12, 0x79, 0x4D, 0xE9, 0x3E
};
static UINT8_A aes192_cipher_text_ecb_7[] =
{
   0xE6, 0x12, 0x8A, 0x9F, 0xB4, 0x97, 0xB2, 0xEC,
   0x0D, 0x0E, 0x9F, 0xE1, 0xB2, 0x4E, 0x69, 0x1E,
   0xA3, 0x6C, 0x06, 0x28, 0xEB, 0x55, 0x04, 0x6B,
   0x2F, 0x20, 0xDE, 0x9D, 0x28, 0x1D, 0xD9, 0xDB,
   0xBB, 0xEA, 0xA0, 0x51, 0x9A, 0x48, 0x75, 0xD3,
   0x51, 0x6B, 0x15, 0x02, 0x23, 0x30, 0x16, 0x3B,
   0x27, 0x98, 0xA9, 0x10, 0x2E, 0xE9, 0xD1, 0x41,
   0xA3, 0x41, 0x6C, 0x1A, 0x27, 0x74, 0x42, 0xD4,
   0xCF, 0x1F, 0xEC, 0x87, 0xCC, 0xEA, 0x57, 0x1A,
   0x23, 0xB9, 0x1A, 0x46, 0x19, 0x91, 0xEC, 0x0D
};

static UINT8_A aes192_plain_text_ecb_8[] =
{
   0x27, 0x75, 0x6C, 0x11, 0xF5, 0x7C, 0x40, 0x16,
   0x9F, 0x95, 0xF2, 0x51, 0x41, 0xFB, 0x1A, 0x07,
   0xD9, 0x44, 0x4D, 0x86, 0x4E, 0x4C, 0x43, 0xB9,
   0xB1, 0x6F, 0x39, 0xFB, 0xC2, 0xFB, 0x95, 0x29,
   0xB6, 0xE4, 0xC9, 0xFB, 0x37, 0xBA, 0x79, 0x94,
   0xAD, 0xD9, 0xE0, 0x57, 0xBC, 0xE0, 0x70, 0xFD,
   0x0D, 0x64, 0xB8, 0xE4, 0x52, 0xE5, 0x8B, 0xAA,
   0x84, 0x00, 0x5F, 0xFB, 0x6F, 0xE7, 0xF3, 0xA7,
   0x71, 0x0F, 0x35, 0xF8, 0x7F, 0x28, 0x62, 0x42,
   0x68, 0x52, 0x6F, 0xBB, 0x5E, 0x8E, 0xA8, 0x8D,
   0xB2, 0x72, 0x97, 0x2A, 0xDF, 0x22, 0x27, 0xE0,
   0xCA, 0x7B, 0x09, 0xAD, 0x48, 0x91, 0x57, 0x54
};
static UINT8_A aes192_key_ecb_8[] =
{
   0xB0, 0x7D, 0xA9, 0x9F, 0xBE, 0x0B, 0x19, 0x3E,
   0x53, 0x36, 0x14, 0x1A, 0x98, 0x19, 0x97, 0x4B,
   0x1A, 0x9A, 0x41, 0x02, 0x12, 0x9D, 0xB8, 0x61
};
static UINT8_A aes192_cipher_text_ecb_8[] =
{
   0x75, 0x16, 0xE5, 0x38, 0x77, 0x23, 0x6E, 0x93,
   0x1E, 0x7F, 0xBA, 0xE2, 0x2E, 0xD2, 0xCA, 0x51,
   0x16, 0xB7, 0x2A, 0x70, 0x0F, 0x6E, 0x39, 0x7C,
   0x2A, 0xA4, 0x7C, 0x30, 0x4B, 0x3F, 0x5C, 0x2A,
   0x02, 0x6D, 0x89, 0x83, 0x1A, 0x51, 0x04, 0xAE,
   0x7B, 0x73, 0xEF, 0x48, 0xDE, 0x70, 0x9C, 0x1B,
   0x9E, 0x66, 0x1A, 0xE9, 0x73, 0xDE, 0xA6, 0xBB,
   0x38, 0x21, 0x7A, 0x76, 0x50, 0x22, 0x8C, 0xCC,
   0x6B, 0x22, 0x8B, 0x33, 0xF5, 0x67, 0x12, 0x14,
   0x27, 0xE9, 0xF2, 0x1C, 0xBD, 0x3E, 0xC6, 0xAA,
   0x35, 0xEB, 0xBA, 0x33, 0x6F, 0x51, 0xED, 0x8E,
   0x4B, 0xF6, 0xE7, 0x5C, 0x58, 0x66, 0xBC, 0x20
};

static UINT8_A aes192_plain_text_ecb_9[] =
{
   0x1E, 0x49, 0xE9, 0x54, 0x1E, 0xD0, 0xF9, 0x70,
   0x23, 0xF8, 0x20, 0x5E, 0x71, 0xFE, 0x75, 0x66,
   0x86, 0x80, 0xF1, 0x2F, 0xB5, 0x90, 0x2D, 0x7A,
   0x11, 0x06, 0x6D, 0x10, 0x8C, 0x1A, 0xDE, 0xF9,
   0x60, 0x32, 0x1C, 0xEF, 0xAE, 0xF8, 0xF7, 0x13,
   0x65, 0xB0, 0x77, 0xDE, 0x66, 0xC9, 0x1E, 0x59,
   0xE6, 0xB1, 0x6C, 0x91, 0x13, 0xEE, 0xA9, 0x45,
   0xFA, 0x6B, 0xDE, 0xE3, 0xA8, 0x0F, 0x25, 0xB3,
   0x8F, 0x94, 0x22, 0x51, 0x2C, 0x97, 0xD2, 0x60,
   0xE7, 0xEB, 0x83, 0x7D, 0x3B, 0x33, 0x24, 0x72,
   0x16, 0xB0, 0xBF, 0xAC, 0x83, 0x57, 0x44, 0xF0,
   0x86, 0x27, 0x88, 0x49, 0x47, 0xB9, 0x8D, 0x45,
   0x73, 0x19, 0x04, 0x60, 0xE0, 0xD4, 0x10, 0xC1,
   0x70, 0x52, 0x4D, 0x24, 0x37, 0x66, 0x11, 0x18
};
static UINT8_A aes192_key_ecb_9[] =
{
   0x80, 0xDA, 0x65, 0x2B, 0x18, 0x44, 0xDA, 0xFE,
   0x4F, 0xD4, 0xCA, 0x8C, 0xCC, 0x26, 0xB5, 0x64,
   0xB2, 0x63, 0x71, 0x17, 0x23, 0xB6, 0xCD, 0x48
};
static UINT8_A aes192_cipher_text_ecb_9[] =
{
   0xA4, 0x7E, 0x7D, 0x0D, 0x82, 0x66, 0x59, 0x57,
   0x92, 0xBC, 0x98, 0x0B, 0xF3, 0xC4, 0x78, 0x22,
   0x22, 0x9E, 0x44, 0x28, 0xCC, 0x91, 0xAA, 0x1B,
   0x15, 0x51, 0x98, 0x23, 0xA1, 0x33, 0xDD, 0x47,
   0x9A, 0x46, 0x64, 0xEC, 0x84, 0x08, 0xB4, 0xD9,
   0x30, 0x17, 0x60, 0x45, 0x4E, 0xD2, 0x03, 0x72,
   0x79, 0xD9, 0x96, 0xEB, 0x1C, 0xCC, 0x98, 0xDF,
   0x77, 0x66, 0x0A, 0xA9, 0x74, 0x22, 0xDC, 0xA1,
   0xC5, 0x4D, 0x7B, 0xFA, 0xC3, 0x72, 0x23, 0xD0,
   0xCA, 0xEE, 0x6A, 0x6B, 0x34, 0xD7, 0x60, 0xE7,
   0x67, 0xB9, 0x59, 0x5F, 0x7F, 0x3B, 0xB6, 0x31,
   0xD6, 0x54, 0x5A, 0x74, 0x42, 0xD3, 0x49, 0x7A,
   0x7B, 0x85, 0x05, 0x4E, 0x8B, 0x99, 0xD2, 0x4E,
   0x65, 0xDF, 0x98, 0x5E, 0x5B, 0xCC, 0xF4, 0x50
};

static UINT8_A aes192_plain_text_ecb_10[] =
{
   0x82, 0x3F, 0xAD, 0xE2, 0x72, 0x28, 0x05, 0xE4,
   0x94, 0x8D, 0xB5, 0x76, 0x39, 0xCB, 0xB6, 0x7D,
   0x47, 0x7D, 0x4B, 0x01, 0x31, 0x9D, 0x92, 0x78,
   0x26, 0xEC, 0x59, 0x47, 0x89, 0x93, 0x34, 0x86,
   0xA2, 0x0A, 0xCC, 0x03, 0x93, 0x39, 0x7A, 0x8A,
   0x8D, 0xDD, 0x15, 0x64, 0x43, 0x2E, 0x08, 0x1E,
   0x9F, 0xBF, 0xA7, 0x8C, 0xB4, 0xA5, 0xC3, 0x0C,
   0xF5, 0xDB, 0x7B, 0x0F, 0xA4, 0xE5, 0x56, 0xD6,
   0x8D, 0xB4, 0x8F, 0x7A, 0xF3, 0xCA, 0xB0, 0x2F,
   0xCB, 0x9E, 0x62, 0xC9, 0x28, 0x42, 0x84, 0x80,
   0xF7, 0x43, 0x7A, 0xF0, 0xEC, 0xD1, 0xC8, 0x64,
   0xBC, 0x1F, 0xDF, 0x53, 0x8D, 0x0D, 0x36, 0x2B,
   0xAA, 0x05, 0x9D, 0x4E, 0x7C, 0x22, 0xCF, 0x5A,
   0xB6, 0x98, 0x46, 0xAE, 0xCF, 0x50, 0x53, 0x2A,
   0xB5, 0xD2, 0x6D, 0x35, 0xC0, 0x68, 0xCA, 0x05,
   0xE4, 0x80, 0x2C, 0x1B, 0x2C, 0x53, 0xFE, 0x0C
};
static UINT8_A aes192_key_ecb_10[] =
{
   0x9A, 0x35, 0x95, 0x4F, 0x40, 0x00, 0x34, 0xB2,
   0x9C, 0x9F, 0x85, 0x76, 0x6A, 0x25, 0x5C, 0xF1,
   0x39, 0x3D, 0xCC, 0xB8, 0xD6, 0xC9, 0x3E, 0x65
};
static UINT8_A aes192_cipher_text_ecb_10[] =
{
   0x52, 0xC5, 0x4E, 0xC4, 0x34, 0x5E, 0x77, 0x6B,
   0x84, 0x95, 0x2F, 0x58, 0x03, 0xAD, 0x3A, 0x52,
   0xBA, 0x4C, 0xFE, 0xDB, 0x32, 0xC2, 0xDC, 0x14,
   0x6E, 0xCC, 0x88, 0x13, 0x70, 0x5F, 0x02, 0xFD,
   0x3D, 0x4D, 0x55, 0x90, 0x27, 0xE8, 0x95, 0xE2,
   0xBA, 0x29, 0x71, 0x03, 0x96, 0x27, 0x24, 0x36,
   0xC3, 0x98, 0xFA, 0x12, 0xBA, 0x02, 0xC8, 0x5C,
   0x02, 0x94, 0x7D, 0xF8, 0x03, 0x56, 0x47, 0x33,
   0x4B, 0xC6, 0xC5, 0x3E, 0x1D, 0x71, 0x6F, 0x58,
   0x22, 0x06, 0xC8, 0x53, 0x8F, 0x39, 0x77, 0x84,
   0xC3, 0xE4, 0x2F, 0x53, 0x5B, 0x68, 0xE8, 0x15,
   0x1B, 0x3C, 0xFF, 0x71, 0xA8, 0x2D, 0x27, 0x85,
   0xB0, 0xEB, 0x29, 0x8F, 0xF6, 0x3A, 0xEB, 0xC5,
   0xD8, 0x22, 0x54, 0x9F, 0x44, 0xFB, 0xBC, 0xF0,
   0xB6, 0x91, 0x14, 0x32, 0x3C, 0x95, 0x72, 0xD0,
   0xBF, 0x67, 0x43, 0x32, 0xFA, 0xC3, 0xB5, 0x7D
};

static UINT8_A aes192_plain_text_ecb_11[] =
{
   0xF4, 0xD4, 0x6D, 0x6A, 0xC9, 0x96, 0x9C, 0xB6,
   0x99, 0x4C, 0x4F, 0x5F, 0x97, 0xA5, 0x86, 0x34,
   0xE5, 0x92, 0x7E, 0x52, 0xBF, 0xAA, 0x82, 0xA2,
   0xF7, 0xCC, 0x04, 0xA3, 0xA1, 0x06, 0xEC, 0x6A,
   0x0F, 0xB5, 0x30, 0xE7, 0x00, 0xEE, 0xA5, 0x69,
   0x14, 0x1D, 0x15, 0x64, 0x83, 0xEC, 0x91, 0x73,
   0x0F, 0x67, 0x08, 0x99, 0x37, 0x5D, 0x19, 0xCC,
   0xAE, 0x09, 0x26, 0xB4, 0x0B, 0xF1, 0xAA, 0xB0,
   0xC2, 0x0F, 0xCC, 0x1A, 0x53, 0x2F, 0x34, 0xCC,
   0xC1, 0x98, 0x1D, 0xE2, 0x46, 0xEE, 0xAB, 0xC2,
   0x45, 0x57, 0x7F, 0x5A, 0x80, 0xDD, 0x8A, 0xA9,
   0x8B, 0x14, 0x1E, 0x81, 0x81, 0xFC, 0x4B, 0x8B,
   0xF5, 0x28, 0x68, 0x8B, 0x2B, 0x20, 0xF0, 0xE5,
   0x88, 0x05, 0x90, 0x61, 0x48, 0x73, 0x7D, 0x2B,
   0x6F, 0xAB, 0x0B, 0x1E, 0x02, 0xF2, 0x7C, 0x41,
   0x76, 0x34, 0x15, 0x92, 0x69, 0xED, 0x78, 0x03,
   0x90, 0x4A, 0x2D, 0xC3, 0xF1, 0x8B, 0x82, 0xBE,
   0x52, 0xAB, 0x95, 0x67, 0xF1, 0x43, 0xAF, 0xB5
};
static UINT8_A aes192_key_ecb_11[] =
{
   0x28, 0x0A, 0x05, 0xE6, 0xBA, 0x05, 0x42, 0xE4,
   0xE1, 0x6D, 0xAF, 0xE6, 0x3D, 0x73, 0x8F, 0xB4,
   0xC5, 0x44, 0x24, 0x1B, 0x66, 0x26, 0x72, 0x9A
};
static UINT8_A aes192_cipher_text_ecb_11[] =
{
   0xA6, 0x13, 0x76, 0xAE, 0x4C, 0x6F, 0x8F, 0xEF,
   0x51, 0x73, 0x60, 0x87, 0xDD, 0x54, 0xDD, 0xC6,
   0xCD, 0x91, 0x77, 0x35, 0x38, 0x6F, 0x73, 0xFF,
   0x95, 0x88, 0x4D, 0x92, 0x73, 0x9D, 0x1A, 0xF4,
   0xA6, 0x53, 0x86, 0xAD, 0x39, 0x6F, 0xA0, 0x1D,
   0xEF, 0x9E, 0x33, 0x81, 0x13, 0x3E, 0x23, 0x57,
   0x50, 0x62, 0x15, 0x51, 0x9C, 0x2E, 0xBE, 0xFF,
   0xFF, 0x12, 0xC3, 0x5A, 0x70, 0xFB, 0x14, 0x9D,
   0x23, 0xF0, 0x35, 0xD0, 0x26, 0xAC, 0x1D, 0x24,
   0xE5, 0xEC, 0x81, 0xF5, 0xC2, 0x86, 0x84, 0xB4,
   0xA2, 0x03, 0xC2, 0x9A, 0xAF, 0xFC, 0x54, 0x79,
   0x4C, 0xAB, 0xD3, 0x88, 0x50, 0x90, 0xFC, 0x87,
   0x1C, 0xB8, 0xD4, 0x56, 0x91, 0x90, 0xA3, 0x9E,
   0x3D, 0x34, 0xDF, 0x87, 0xC3, 0xE0, 0x52, 0x45,
   0xEF, 0x7D, 0xE4, 0x85, 0x6D, 0x10, 0x3E, 0x2A,
   0x78, 0x03, 0x61, 0x11, 0x5F, 0x78, 0xE2, 0x27,
   0x62, 0x2F, 0x93, 0xB7, 0xF9, 0xC2, 0xFD, 0x83,
   0x90, 0xBF, 0xAF, 0x23, 0xA0, 0x6C, 0xB3, 0x48
};

static UINT8_A aes192_plain_text_ecb_12[] =
{
   0x7C, 0x72, 0x7B, 0xD3, 0xE7, 0x04, 0x8E, 0x7A,
   0x89, 0x95, 0xB7, 0xB1, 0x16, 0x9A, 0xE4, 0xB5,
   0xA5, 0x5E, 0x85, 0x4B, 0xB4, 0xF7, 0xA9, 0x57,
   0x6D, 0x78, 0x63, 0xAB, 0x28, 0x68, 0x73, 0x1D,
   0x30, 0x73, 0x22, 0xDC, 0xCA, 0x60, 0x6E, 0x04,
   0x73, 0x43, 0x67, 0x6F, 0x6A, 0xF4, 0xD9, 0xCF,
   0x6E, 0xBF, 0x2B, 0xF9, 0xC9, 0x5D, 0x87, 0x84,
   0x8D, 0x23, 0x3C, 0x93, 0x1E, 0x7A, 0x60, 0xEF,
   0xF0, 0x8F, 0xB9, 0x59, 0x92, 0x4C, 0xDE, 0x1E,
   0xEC, 0x86, 0x99, 0xEB, 0xC5, 0x78, 0x90, 0xE3,
   0x88, 0x70, 0x24, 0xEF, 0x47, 0xC8, 0x9A, 0x55,
   0x00, 0x18, 0x78, 0x8D, 0x1F, 0xAA, 0x32, 0x50,
   0x45, 0x2E, 0x06, 0xF1, 0x48, 0xAF, 0x25, 0xF0,
   0x7B, 0xC6, 0x13, 0xCD, 0x2F, 0x0E, 0x50, 0x1A,
   0x79, 0xD7, 0x38, 0xD4, 0x36, 0x1F, 0x28, 0xF3,
   0x4D, 0xBE, 0xE2, 0x40, 0x34, 0xE0, 0x33, 0x67,
   0xB6, 0xB8, 0xD3, 0x4D, 0xF3, 0x73, 0x8C, 0xA3,
   0xA8, 0x6B, 0x9E, 0xBC, 0xB0, 0x9E, 0x63, 0x9B,
   0xCB, 0x5E, 0x2F, 0x51, 0x9F, 0x4A, 0x7A, 0x86,
   0xFC, 0x7C, 0x41, 0x55, 0x64, 0x04, 0xA9, 0x5D
};
static UINT8_A aes192_key_ecb_12[] =
{
   0x4F, 0x41, 0xFA, 0x4D, 0x4A, 0x25, 0x10, 0x0B,
   0x58, 0x65, 0x51, 0x82, 0x83, 0x73, 0xBC, 0xCA,
   0x55, 0x40, 0xC6, 0x8E, 0x9B, 0xF8, 0x45, 0x62
};
static UINT8_A aes192_cipher_text_ecb_12[] =
{
   0x92, 0x28, 0x12, 0xAD, 0x5F, 0xEA, 0xCD, 0xF1,
   0x1F, 0xE7, 0xFD, 0xAE, 0x96, 0x30, 0x01, 0x49,
   0x41, 0x9E, 0x31, 0xCF, 0xF5, 0x40, 0x61, 0xB3,
   0xC5, 0xED, 0x27, 0xFD, 0xB8, 0xB5, 0x0C, 0x9C,
   0x09, 0x32, 0xB5, 0x22, 0xA6, 0xC0, 0x4E, 0x48,
   0x24, 0x99, 0xB0, 0x11, 0xEF, 0x3C, 0x3E, 0x9D,
   0xC5, 0x6A, 0x1A, 0x61, 0xCF, 0xEB, 0x78, 0xB3,
   0x40, 0x32, 0xD2, 0x6D, 0xBD, 0xC3, 0xCA, 0xC5,
   0x1A, 0x32, 0x79, 0xBC, 0x93, 0x4B, 0x9B, 0xCE,
   0x2D, 0x9C, 0x19, 0xBF, 0x85, 0x82, 0x35, 0x61,
   0x3B, 0xA7, 0x84, 0xE4, 0x8E, 0x29, 0x2D, 0x22,
   0xC6, 0xB5, 0xA2, 0x8E, 0x1D, 0x1B, 0xB8, 0x60,
   0x52, 0x4F, 0xB7, 0xB5, 0xF9, 0xB3, 0xD9, 0xA5,
   0xF4, 0xDA, 0x66, 0xE3, 0x40, 0x58, 0x5B, 0xD2,
   0x49, 0x6F, 0xE6, 0xD6, 0x94, 0x2D, 0xB8, 0xD0,
   0x5D, 0x71, 0x6F, 0xEC, 0x03, 0xB1, 0x7D, 0x19,
   0xAB, 0xB5, 0x8B, 0x33, 0x33, 0x2E, 0x24, 0xBE,
   0xAE, 0xC7, 0x99, 0x5D, 0x69, 0x52, 0x53, 0x64,
   0xFE, 0x13, 0x9A, 0xA1, 0xFD, 0x62, 0x05, 0x46,
   0x68, 0xC5, 0x8F, 0x23, 0xF1, 0xF9, 0x4C, 0xFD
};

uf_aes_vector_type_t sw_aes192_ecb_test_vectors[] =
{
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_ECB, aes192_plain_text_ecb_1, //0
      sizeof(aes192_plain_text_ecb_1), aes192_key_ecb_1, 24, NULL,
      aes192_cipher_text_ecb_1},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_ECB, aes192_plain_text_ecb_2, //1
      sizeof(aes192_plain_text_ecb_2), aes192_key_ecb_2, 24, NULL,
      aes192_cipher_text_ecb_2},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_ECB, aes192_plain_text_ecb_3, //2
      sizeof(aes192_plain_text_ecb_3), aes192_key_ecb_3, 24, NULL,
      aes192_cipher_text_ecb_3},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_ECB, aes192_plain_text_ecb_4, //3
      sizeof(aes192_plain_text_ecb_4), aes192_key_ecb_4, 24, NULL,
      aes192_cipher_text_ecb_4},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_ECB, aes192_plain_text_ecb_5, //4
      sizeof(aes192_plain_text_ecb_5), aes192_key_ecb_5, 24, NULL,
      aes192_cipher_text_ecb_5},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_ECB, aes192_plain_text_ecb_6, //5
      sizeof(aes192_plain_text_ecb_6), aes192_key_ecb_6, 24, NULL,
      aes192_cipher_text_ecb_6},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_ECB, aes192_plain_text_ecb_7, //6
      sizeof(aes192_plain_text_ecb_7), aes192_key_ecb_7, 24, NULL,
      aes192_cipher_text_ecb_7},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_ECB, aes192_plain_text_ecb_8, //7
      sizeof(aes192_plain_text_ecb_8), aes192_key_ecb_8, 24, NULL,
      aes192_cipher_text_ecb_8},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_ECB, aes192_plain_text_ecb_9, //8
      sizeof(aes192_plain_text_ecb_9), aes192_key_ecb_9, 24, NULL,
      aes192_cipher_text_ecb_9},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_ECB, aes192_plain_text_ecb_10, //9
      sizeof(aes192_plain_text_ecb_10), aes192_key_ecb_10, 24, NULL,
      aes192_cipher_text_ecb_10},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_ECB, aes192_plain_text_ecb_11, //10
      sizeof(aes192_plain_text_ecb_11), aes192_key_ecb_11, 24, NULL,
      aes192_cipher_text_ecb_11},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_ECB, aes192_plain_text_ecb_12, //11
      sizeof(aes192_plain_text_ecb_12), aes192_key_ecb_12, 24, NULL,
      aes192_cipher_text_ecb_12},
};

/* AES-192 CBC test vectors */
static UINT8_A aes192_plain_text_cbc_1[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aes192_key_cbc_1[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aes192_iv_cbc_1[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aes192_cipher_text_cbc_1[] =
{
   0xAA, 0xE0, 0x69, 0x92, 0xAC, 0xBF, 0x52, 0xA3,
   0xE8, 0xF4, 0xA9, 0x6E, 0xC9, 0x30, 0x0B, 0xD7
};

static UINT8_A aes192_plain_text_cbc_2[] =
{
   0xC5, 0x1F, 0xC2, 0x76, 0x77, 0x4D, 0xAD, 0x94,
   0xBC, 0xDC, 0x1D, 0x28, 0x91, 0xEC, 0x86, 0x68
};
static UINT8_A aes192_key_cbc_2[] =
{
   0xBA, 0x75, 0xF4, 0xD1, 0xD9, 0xD7, 0xCF, 0x7F,
   0x55, 0x14, 0x45, 0xD5, 0x6C, 0xC1, 0xA8, 0xAB,
   0x2A, 0x07, 0x8E, 0x15, 0xE0, 0x49, 0xDC, 0x2C
};
static UINT8_A aes192_iv_cbc_2[] =
{
   0x53, 0x1C, 0xE7, 0x81, 0x76, 0x40, 0x16, 0x66,
   0xAA, 0x30, 0xDB, 0x94, 0xEC, 0x4A, 0x30, 0xEB
};
static UINT8_A aes192_cipher_text_cbc_2[] =
{
   0x70, 0xDD, 0x95, 0xA1, 0x4E, 0xE9, 0x75, 0xE2,
   0x39, 0xDF, 0x36, 0xFF, 0x4A, 0xEE, 0x1D, 0x5D
};

static UINT8_A aes192_plain_text_cbc_3[] = //multiblock
{
   0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
   0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
   0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C,
   0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
   0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11,
   0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
   0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
   0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
};
static UINT8_A aes192_key_cbc_3[] =
{
   0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52,
   0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5,
   0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B
};
static UINT8_A aes192_iv_cbc_3[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};
static UINT8_A aes192_cipher_text_cbc_3[] =
{
   0x4F, 0x02, 0x1D, 0xB2, 0x43, 0xBC, 0x63, 0x3D,
   0x71, 0x78, 0x18, 0x3A, 0x9F, 0xA0, 0x71, 0xE8,
   0xB4, 0xD9, 0xAD, 0xA9, 0xAD, 0x7D, 0xED, 0xF4,
   0xE5, 0xE7, 0x38, 0x76, 0x3F, 0x69, 0x14, 0x5A,
   0x57, 0x1B, 0x24, 0x20, 0x12, 0xFB, 0x7A, 0xE0,
   0x7F, 0xA9, 0xBA, 0xAC, 0x3D, 0xF1, 0x02, 0xE0,
   0x08, 0xB0, 0xE2, 0x79, 0x88, 0x59, 0x88, 0x81,
   0xD9, 0x20, 0xA9, 0xE6, 0x4F, 0x56, 0x15, 0xCD
};

static UINT8_A aes192_plain_text_cbc_4[] =
{
   0x9D, 0x4E, 0x4C, 0xCC, 0xD1, 0x68, 0x23, 0x21,
   0x85, 0x6D, 0xF0, 0x69, 0xE3, 0xF1, 0xC6, 0xFA,
   0x39, 0x1A, 0x08, 0x3A, 0x9F, 0xB0, 0x2D, 0x59,
   0xDB, 0x74, 0xC1, 0x40, 0x81, 0xB3, 0xAC, 0xC4
};
static UINT8_A aes192_key_cbc_4[] =
{
   0xEA, 0xB3, 0xB1, 0x9C, 0x58, 0x1A, 0xA8, 0x73,
   0xE1, 0x98, 0x1C, 0x83, 0xAB, 0x8D, 0x83, 0xBB,
   0xF8, 0x02, 0x51, 0x11, 0xFB, 0x2E, 0x6B, 0x21
};
static UINT8_A aes192_iv_cbc_4[] =
{
   0xF3, 0xD6, 0x66, 0x7E, 0x8D, 0x4D, 0x79, 0x1E,
   0x60, 0xF7, 0x50, 0x5B, 0xA3, 0x83, 0xEB, 0x05
};
static UINT8_A aes192_cipher_text_cbc_4[] =
{
   0x51, 0xD4, 0x47, 0x79, 0xF9, 0x0D, 0x40, 0xA8,
   0x00, 0x48, 0x27, 0x6C, 0x03, 0x5C, 0xB4, 0x9C,
   0xA2, 0xA4, 0x7B, 0xCB, 0x9B, 0x9C, 0xF7, 0x27,
   0x0B, 0x91, 0x44, 0x79, 0x37, 0x87, 0xD5, 0x3F
};

static UINT8_A aes192_plain_text_cbc_5[] =
{
   0xC5, 0xCE, 0x95, 0x86, 0x13, 0xBF, 0x74, 0x17,
   0x18, 0xC1, 0x74, 0x44, 0x48, 0x4E, 0xBA, 0xF1,
   0x05, 0x0D, 0xDC, 0xAC, 0xB5, 0x9B, 0x95, 0x90,
   0x17, 0x8C, 0xBE, 0x69, 0xD7, 0xAD, 0x79, 0x19,
   0x60, 0x8C, 0xB0, 0x3A, 0xF1, 0x3B, 0xBE, 0x04,
   0xF3, 0x50, 0x6B, 0x71, 0x8A, 0x30, 0x1E, 0xA0
};
static UINT8_A aes192_key_cbc_5[] =
{
   0x16, 0xC9, 0x3B, 0xB3, 0x98, 0xF1, 0xFC, 0x0C,
   0xF6, 0xD6, 0x8F, 0xC7, 0xA5, 0x67, 0x3C, 0xDF,
   0x43, 0x1F, 0xA1, 0x47, 0x85, 0x2B, 0x4A, 0x2D
};
static UINT8_A aes192_iv_cbc_5[] =
{
   0xEA, 0xAE, 0xCA, 0x2E, 0x07, 0xDD, 0xED, 0xF5,
   0x62, 0xF9, 0x4D, 0xF6, 0x3F, 0x0A, 0x65, 0x0F
};
static UINT8_A aes192_cipher_text_cbc_5[] =
{
   0xED, 0x6A, 0x50, 0xE0, 0xC6, 0x92, 0x1D, 0x52,
   0xD6, 0x64, 0x7F, 0x75, 0xD6, 0x7B, 0x4F, 0xD5,
   0x6A, 0xCE, 0x1F, 0xED, 0xB8, 0xB5, 0xA6, 0xA9,
   0x97, 0xB4, 0xD1, 0x31, 0x64, 0x05, 0x47, 0xD2,
   0x2C, 0x5D, 0x88, 0x4A, 0x75, 0xE6, 0x75, 0x2B,
   0x58, 0x46, 0xB5, 0xB3, 0x3A, 0x51, 0x81, 0xF4
};

static UINT8_A aes192_plain_text_cbc_6[] =
{
   0xDB, 0x37, 0x85, 0xA8, 0x89, 0xB4, 0xBD, 0x38,
   0x77, 0x54, 0xDA, 0x22, 0x2F, 0x0E, 0x4C, 0x2D,
   0x2B, 0xFE, 0x0D, 0x79, 0xE0, 0x5B, 0xC9, 0x10,
   0xFB, 0xA9, 0x41, 0xBE, 0xEA, 0x30, 0xF1, 0x23,
   0x9E, 0xAC, 0xF0, 0x06, 0x8F, 0x46, 0x19, 0xEC,
   0x01, 0xC3, 0x68, 0xE9, 0x86, 0xFC, 0xA6, 0xB7,
   0xC5, 0x8E, 0x49, 0x05, 0x79, 0xD2, 0x96, 0x11,
   0xBD, 0x10, 0x08, 0x79, 0x86, 0xEF, 0xF5, 0x4F
};
static UINT8_A aes192_key_cbc_6[] =
{
   0x06, 0x7B, 0xB1, 0x7B, 0x4D, 0xF7, 0x85, 0x69,
   0x7E, 0xAC, 0xCF, 0x96, 0x1F, 0x98, 0xE2, 0x12,
   0xCB, 0x75, 0xE6, 0x79, 0x7C, 0xE9, 0x35, 0xCB
};
static UINT8_A aes192_iv_cbc_6[] =
{
   0x8B, 0x59, 0xC9, 0x20, 0x9C, 0x52, 0x9C, 0xA8,
   0x39, 0x1C, 0x9F, 0xC0, 0xCE, 0x03, 0x3C, 0x38
};
static UINT8_A aes192_cipher_text_cbc_6[] =
{
   0xD5, 0xF5, 0x58, 0x97, 0x60, 0xBF, 0x9C, 0x76,
   0x22, 0x28, 0xFD, 0xE2, 0x36, 0xDE, 0x1F, 0xA2,
   0xDD, 0x2D, 0xAD, 0x44, 0x8D, 0xB3, 0xFA, 0x9B,
   0xE0, 0xC4, 0x19, 0x6E, 0xFD, 0x46, 0xA3, 0x5C,
   0x84, 0xDD, 0x1A, 0xC7, 0x7D, 0x9D, 0xB5, 0x8C,
   0x95, 0x91, 0x8C, 0xB3, 0x17, 0xA6, 0x43, 0x0A,
   0x08, 0xD2, 0xFB, 0x6A, 0x8E, 0x8B, 0x0F, 0x1C,
   0x9B, 0x72, 0xC7, 0xA3, 0x44, 0xDC, 0x34, 0x9F
};

static UINT8_A aes192_plain_text_cbc_7[] =
{
   0x38, 0xFB, 0xDA, 0x37, 0xE2, 0x8F, 0xA8, 0x6D,
   0x9D, 0x83, 0xA4, 0x34, 0x5E, 0x41, 0x9D, 0xEA,
   0x95, 0xD2, 0x8C, 0x78, 0x18, 0xFF, 0x25, 0x92,
   0x5D, 0xB6, 0xAC, 0x3A, 0xED, 0xAF, 0x0A, 0x86,
   0x15, 0x4E, 0x20, 0xA4, 0xDF, 0xCC, 0x5B, 0x1B,
   0x41, 0x92, 0x89, 0x53, 0x93, 0xE5, 0xEB, 0x58,
   0x46, 0xC8, 0x8B, 0xDB, 0xD4, 0x1E, 0xCF, 0x7A,
   0xF3, 0x10, 0x4F, 0x41, 0x0E, 0xAE, 0xE4, 0x70,
   0xF5, 0xD9, 0x01, 0x7E, 0xD4, 0x60, 0x47, 0x5F,
   0x62, 0x69, 0x53, 0x03, 0x5A, 0x13, 0xDB, 0x1F
};
static UINT8_A aes192_key_cbc_7[] =
{
   0x0F, 0xD3, 0x9D, 0xE8, 0x3E, 0x0B, 0xE7, 0x7A,
   0x79, 0xC8, 0xA4, 0xA6, 0x12, 0xE3, 0xDD, 0x9C,
   0x8A, 0xAE, 0x2C, 0xE3, 0x5E, 0x7A, 0x2B, 0xF8
};
static UINT8_A aes192_iv_cbc_7[] =
{
   0x7E, 0x1D, 0x62, 0x9B, 0x84, 0xF9, 0x3B, 0x07,
   0x9B, 0xE5, 0x1F, 0x9A, 0x5F, 0x5C, 0xB2, 0x3C
};
static UINT8_A aes192_cipher_text_cbc_7[] =
{
   0xED, 0xAD, 0xAE, 0x2F, 0x9A, 0x45, 0xFF, 0x34,
   0x73, 0xE0, 0x2D, 0x90, 0x4C, 0x94, 0xD9, 0x4A,
   0x30, 0xA4, 0xD9, 0x2D, 0xA4, 0xDE, 0xB6, 0xBC,
   0xB4, 0xB0, 0x77, 0x44, 0x72, 0x69, 0x45, 0x71,
   0x84, 0x20, 0x39, 0xF2, 0x1C, 0x49, 0x6E, 0xF9,
   0x3F, 0xD6, 0x58, 0x84, 0x2C, 0x73, 0x5F, 0x8A,
   0x81, 0xFC, 0xD0, 0xAA, 0x57, 0x84, 0x42, 0xAB,
   0x89, 0x3B, 0x18, 0xF6, 0x06, 0xAE, 0xD1, 0xBA,
   0xB1, 0x1F, 0x81, 0x45, 0x2D, 0xD4, 0x5E, 0x9B,
   0x56, 0xAD, 0xF2, 0xEC, 0xCF, 0x4E, 0xA0, 0x95
};

static UINT8_A aes192_plain_text_cbc_8[] =
{
   0x93, 0x1B, 0x2F, 0x5F, 0x3A, 0x58, 0x20, 0xD5,
   0x3A, 0x6B, 0xEA, 0xAA, 0x64, 0x31, 0x08, 0x3A,
   0x34, 0x88, 0xF4, 0xEB, 0x03, 0xB0, 0xF5, 0xB5,
   0x7E, 0xF8, 0x38, 0xE1, 0x57, 0x96, 0x23, 0x10,
   0x3B, 0xD6, 0xE6, 0x80, 0x03, 0x77, 0x53, 0x8B,
   0x2E, 0x51, 0xEF, 0x70, 0x8F, 0x3C, 0x49, 0x56,
   0x43, 0x2E, 0x8A, 0x8E, 0xE6, 0xA3, 0x4E, 0x19,
   0x06, 0x42, 0xB2, 0x6A, 0xD8, 0xBD, 0xAE, 0x6C,
   0x2A, 0xF9, 0xA6, 0xC7, 0x99, 0x6F, 0x3B, 0x60,
   0x04, 0xD2, 0x67, 0x1E, 0x41, 0xF1, 0xC9, 0xF4,
   0x0E, 0xE0, 0x3D, 0x1C, 0x4A, 0x52, 0xB0, 0xA0,
   0x65, 0x4A, 0x33, 0x1F, 0x15, 0xF3, 0x4D, 0xCE
};
static UINT8_A aes192_key_cbc_8[] =
{
   0xE3, 0xFE, 0xCC, 0x75, 0xF0, 0x07, 0x5A, 0x09,
   0xB3, 0x83, 0xDF, 0xD3, 0x89, 0xA3, 0xD3, 0x3C,
   0xC9, 0xB8, 0x54, 0xB3, 0xB2, 0x54, 0xC0, 0xF4
};
static UINT8_A aes192_iv_cbc_8[] =
{
   0x36, 0xEA, 0xB8, 0x83, 0xAF, 0xEF, 0x93, 0x6C,
   0xC3, 0x8F, 0x63, 0x28, 0x46, 0x19, 0xCD, 0x19
};
static UINT8_A aes192_cipher_text_cbc_8[] =
{
   0x75, 0x39, 0x59, 0x74, 0xBD, 0x32, 0xB3, 0x66,
   0x56, 0x54, 0xA6, 0xC8, 0xE3, 0x96, 0xB8, 0x8A,
   0xE3, 0x4B, 0x12, 0x35, 0x75, 0x87, 0x2A, 0x7A,
   0xB6, 0x87, 0xD8, 0xE7, 0x6B, 0x46, 0xDF, 0x91,
   0x1A, 0x8A, 0x59, 0x0C, 0xD0, 0x1D, 0x2F, 0x5C,
   0x33, 0x0B, 0xE3, 0xA6, 0x62, 0x6E, 0x9D, 0xD3,
   0xAA, 0x5E, 0x10, 0xED, 0x14, 0xE8, 0xFF, 0x82,
   0x98, 0x11, 0xB6, 0xFE, 0xD5, 0x0F, 0x3F, 0x53,
   0x3C, 0xA4, 0x38, 0x5A, 0x1C, 0xBC, 0xA7, 0x8F,
   0x5C, 0x47, 0x44, 0xE5, 0x0F, 0x2F, 0x83, 0x59,
   0x16, 0x5C, 0x24, 0x85, 0xD1, 0x32, 0x4E, 0x76,
   0xC3, 0xEA, 0xE7, 0x6A, 0x0C, 0xCA, 0xC6, 0x29
};

static UINT8_A aes192_plain_text_cbc_9[] =
{
   0x6A, 0xBC, 0xC2, 0x70, 0x17, 0x3C, 0xF1, 0x14,
   0xD4, 0x48, 0x47, 0xE9, 0x11, 0xA0, 0x50, 0xDB,
   0x57, 0xBA, 0x7A, 0x2E, 0x2C, 0x16, 0x1C, 0x6F,
   0x37, 0xCC, 0xB6, 0xAA, 0xA4, 0x67, 0x7B, 0xDD,
   0xCA, 0xF5, 0x0C, 0xAD, 0x0B, 0x5F, 0x87, 0x58,
   0xFC, 0xF7, 0xC0, 0xEB, 0xC6, 0x50, 0xCE, 0xB5,
   0xCD, 0x52, 0xCA, 0xFB, 0x8F, 0x8D, 0xD3, 0xED,
   0xCE, 0xCE, 0x55, 0xD9, 0xF1, 0xF0, 0x8B, 0x9F,
   0xA8, 0xF5, 0x43, 0x65, 0xCF, 0x56, 0xE2, 0x8B,
   0x95, 0x96, 0xA7, 0xE1, 0xDD, 0x1D, 0x34, 0x18,
   0xE4, 0x44, 0x4A, 0x77, 0x24, 0xAD, 0xD4, 0xCF,
   0x79, 0xD5, 0x27, 0xB1, 0x83, 0xEC, 0x88, 0xDE,
   0x4B, 0xE4, 0xEE, 0xFF, 0x29, 0xC8, 0x0A, 0x97,
   0xE5, 0x4F, 0x85, 0x35, 0x1C, 0xB1, 0x89, 0xEE
};
static UINT8_A aes192_key_cbc_9[] =
{
   0xF9, 0xC2, 0x75, 0x65, 0xEB, 0x07, 0x94, 0x7C,
   0x8C, 0xB5, 0x1B, 0x79, 0x24, 0x84, 0x30, 0xF7,
   0xB1, 0x06, 0x6C, 0x3D, 0x2F, 0xDC, 0x3D, 0x13
};
static UINT8_A aes192_iv_cbc_9[] =
{
   0x2B, 0xD6, 0x7C, 0xC8, 0x9A, 0xB7, 0x94, 0x8D,
   0x64, 0x4A, 0x49, 0x67, 0x28, 0x43, 0xCB, 0xD9
};
static UINT8_A aes192_cipher_text_cbc_9[] =
{
   0xCA, 0x28, 0x29, 0x24, 0xA6, 0x11, 0x87, 0xFE,
   0xB4, 0x05, 0x20, 0x97, 0x91, 0x06, 0xE5, 0xCC,
   0x86, 0x19, 0x57, 0xF2, 0x38, 0x28, 0xDC, 0xB7,
   0x28, 0x5E, 0x0E, 0xAA, 0xC8, 0xA0, 0xCA, 0x2A,
   0x6B, 0x60, 0x50, 0x3D, 0x63, 0xD6, 0x03, 0x9F,
   0x46, 0x93, 0xDB, 0xA3, 0x2F, 0xA1, 0xF7, 0x3A,
   0xE2, 0xE7, 0x09, 0xCA, 0x94, 0x91, 0x1F, 0x28,
   0xA5, 0xED, 0xD1, 0xF3, 0x0E, 0xAD, 0xDD, 0x54,
   0x68, 0x0C, 0x43, 0xAC, 0xC9, 0xC7, 0x4C, 0xD9,
   0x0D, 0x8B, 0xB6, 0x48, 0xB4, 0xE5, 0x44, 0x27,
   0x5F, 0x47, 0xE5, 0x14, 0xDA, 0xA2, 0x06, 0x97,
   0xF6, 0x6C, 0x73, 0x8E, 0xB3, 0x03, 0x37, 0xF0,
   0x17, 0xFC, 0xA1, 0xA2, 0x6D, 0xA4, 0xD1, 0xA0,
   0xCC, 0x0A, 0x0E, 0x98, 0xE2, 0x46, 0x30, 0x70
};

static UINT8_A aes192_plain_text_cbc_10[] =
{
   0xC1, 0xA3, 0x76, 0x83, 0xFB, 0x28, 0x94, 0x67,
   0xDD, 0x1B, 0x2C, 0x89, 0xEF, 0xBA, 0x16, 0xBB,
   0xD2, 0xEE, 0x24, 0xCF, 0x18, 0xD1, 0x9D, 0x44,
   0x59, 0x6D, 0xED, 0x26, 0x82, 0xC7, 0x9A, 0x2F,
   0x71, 0x1C, 0x7A, 0x32, 0xBF, 0x6A, 0x24, 0xBA,
   0xDD, 0x32, 0xA4, 0xEE, 0x63, 0x7C, 0x73, 0xB7,
   0xA4, 0x1D, 0xA6, 0x25, 0x86, 0x35, 0x65, 0x0F,
   0x91, 0xFB, 0x9F, 0xFA, 0x45, 0xBD, 0xFC, 0x3C,
   0xB1, 0x22, 0x13, 0x62, 0x41, 0xB3, 0xDE, 0xCE,
   0xD8, 0x99, 0x6A, 0xA5, 0x1E, 0xA8, 0xD3, 0xE8,
   0x1C, 0x9D, 0x70, 0xE0, 0x06, 0xA4, 0x4B, 0xC0,
   0x57, 0x1E, 0xD4, 0x86, 0x23, 0xA0, 0xD6, 0x22,
   0xA9, 0x3F, 0xA9, 0xDA, 0x29, 0x0B, 0xAA, 0xED,
   0xF5, 0xD9, 0xE8, 0x76, 0xC9, 0x46, 0x20, 0x94,
   0x5F, 0xF8, 0xEC, 0xC8, 0x3F, 0x27, 0x37, 0x9E,
   0xD5, 0x5C, 0xF4, 0x90, 0xC5, 0x79, 0x0F, 0x27
};
static UINT8_A aes192_key_cbc_10[] =
{
   0xFB, 0x09, 0xCF, 0x9E, 0x00, 0xDB, 0xF8, 0x83,
   0x68, 0x9D, 0x07, 0x9C, 0x92, 0x00, 0x77, 0xC0,
   0x07, 0x3C, 0x31, 0x89, 0x0B, 0x55, 0xBA, 0xB5
};
static UINT8_A aes192_iv_cbc_10[] =
{
   0xE3, 0xC8, 0x9B, 0xD0, 0x97, 0xC3, 0xAB, 0xDD,
   0xF6, 0x4F, 0x48, 0x81, 0xDB, 0x6D, 0xBF, 0xE2
};
static UINT8_A aes192_cipher_text_cbc_10[] =
{
   0x81, 0x58, 0xE2, 0x14, 0x20, 0xF2, 0x5B, 0x59,
   0xD6, 0xAE, 0x94, 0x3F, 0xA1, 0xCB, 0xF2, 0x1F,
   0x02, 0xE9, 0x79, 0xF4, 0x19, 0xDA, 0xB0, 0x12,
   0x6A, 0x72, 0x1B, 0x7E, 0xEF, 0x55, 0xBE, 0xE9,
   0xAD, 0x97, 0xF5, 0xCC, 0xFF, 0x7D, 0x23, 0x90,
   0x57, 0xBB, 0xC1, 0x9A, 0x8C, 0x37, 0x81, 0x42,
   0xF7, 0x67, 0x2F, 0x1D, 0x5E, 0x7E, 0x17, 0xD7,
   0xBE, 0xBC, 0xB0, 0x07, 0x0E, 0x83, 0x55, 0xCA,
   0xCE, 0x66, 0x60, 0x17, 0x1A, 0x53, 0xB6, 0x18,
   0x16, 0xAE, 0x82, 0x4A, 0x6E, 0xF6, 0x9C, 0xE4,
   0x70, 0xB6, 0xFF, 0xD3, 0xB5, 0xBB, 0x4B, 0x43,
   0x88, 0x74, 0xD9, 0x1D, 0x27, 0x85, 0x4D, 0x3B,
   0x6F, 0x25, 0x86, 0x0D, 0x38, 0x68, 0x95, 0x8D,
   0xE3, 0x30, 0x7D, 0x62, 0xB1, 0x33, 0x9B, 0xDD,
   0xDB, 0x8A, 0x31, 0x8C, 0x0C, 0xE0, 0xF3, 0x3C,
   0x17, 0xCA, 0xF0, 0xE9, 0xF6, 0x04, 0x08, 0x20
};

static UINT8_A aes192_plain_text_cbc_11[] =
{
   0x5B, 0xEC, 0xBC, 0x31, 0xD8, 0xBE, 0xAD, 0x6D,
   0x36, 0xAE, 0x01, 0x4A, 0x58, 0x63, 0xD1, 0x4A,
   0x43, 0x1E, 0x6B, 0x55, 0xD2, 0x9E, 0xA6, 0xBA,
   0xAA, 0x41, 0x72, 0x71, 0x71, 0x6D, 0xB3, 0xA3,
   0x3B, 0x2E, 0x50, 0x6B, 0x45, 0x20, 0x86, 0xDF,
   0xE6, 0x90, 0x83, 0x4A, 0xC2, 0xDE, 0x30, 0xBC,
   0x41, 0x25, 0x4E, 0xC5, 0x40, 0x1E, 0xC4, 0x7D,
   0x06, 0x42, 0x37, 0xC7, 0x79, 0x2F, 0xDC, 0xD7,
   0x91, 0x4D, 0x8A, 0xF2, 0x0E, 0xB1, 0x14, 0x75,
   0x66, 0x42, 0xD5, 0x19, 0x02, 0x1A, 0x8C, 0x75,
   0xA9, 0x2F, 0x6B, 0xC5, 0x3D, 0x32, 0x6A, 0xE9,
   0xA5, 0xB7, 0xE1, 0xB1, 0x0A, 0x97, 0x56, 0x57,
   0x46, 0x92, 0x93, 0x4D, 0x99, 0x39, 0xFC, 0x39,
   0x9E, 0x0C, 0x20, 0x3F, 0x7E, 0xDF, 0x8E, 0x7E,
   0x64, 0x82, 0xEA, 0xDD, 0x31, 0xA0, 0x40, 0x07,
   0x70, 0xE8, 0x97, 0xB4, 0x8C, 0x6B, 0xCA, 0x2B,
   0x40, 0x45, 0x93, 0x04, 0x50, 0x80, 0xE9, 0x33,
   0x77, 0x35, 0x8C, 0x42, 0xA0, 0xF4, 0xDE, 0xDE
};
static UINT8_A aes192_key_cbc_11[] =
{
   0xBC, 0xA6, 0xFA, 0x3C, 0x67, 0xFD, 0x29, 0x4E,
   0x95, 0x8F, 0x66, 0xFE, 0x8B, 0xD6, 0x4F, 0x45,
   0xF4, 0x28, 0xF5, 0xBC, 0x8E, 0x97, 0x33, 0xA7
};
static UINT8_A aes192_iv_cbc_11[] =
{
   0x92, 0xA4, 0x7F, 0x28, 0x33, 0xF1, 0x45, 0x0D,
   0x1D, 0xA4, 0x17, 0x17, 0xBD, 0xC6, 0xE8, 0x3C
};
static UINT8_A aes192_cipher_text_cbc_11[] =
{
   0x92, 0x6D, 0xB2, 0x48, 0xCC, 0x1B, 0xA2, 0x0F,
   0x0C, 0x57, 0x63, 0x1A, 0x7C, 0x8A, 0xEF, 0x09,
   0x4F, 0x79, 0x19, 0x37, 0xB9, 0x05, 0x94, 0x9E,
   0x34, 0x60, 0x24, 0x0E, 0x8B, 0xFA, 0x6F, 0xA4,
   0x83, 0x11, 0x5A, 0x1B, 0x31, 0x0B, 0x6E, 0x43,
   0x69, 0xCA, 0xEB, 0xC5, 0x26, 0x28, 0x88, 0x37,
   0x7B, 0x1D, 0xDA, 0xA5, 0x80, 0x0E, 0xA4, 0x96,
   0xA2, 0xBD, 0xFF, 0x0F, 0x9A, 0x10, 0x31, 0xE7,
   0x12, 0x9C, 0x9A, 0x20, 0xE3, 0x56, 0x21, 0xE7,
   0xF0, 0xB8, 0xBA, 0xCA, 0x0D, 0x87, 0x03, 0x0F,
   0x2A, 0xE7, 0xCA, 0x85, 0x93, 0xC8, 0x59, 0x96,
   0x77, 0xA0, 0x6F, 0xD4, 0xB2, 0x60, 0x09, 0xEA,
   0xD0, 0x8F, 0xEC, 0xAC, 0x24, 0xCA, 0xA9, 0xCF,
   0x2C, 0xAD, 0x3B, 0x47, 0x0C, 0x82, 0x27, 0x41,
   0x5A, 0x7B, 0x1E, 0x0F, 0x2E, 0xAB, 0x3F, 0xAD,
   0x96, 0xD7, 0x0A, 0x20, 0x9C, 0x8B, 0xB2, 0x6C,
   0x62, 0x76, 0x77, 0xE2, 0x53, 0x1B, 0x94, 0x35,
   0xCA, 0x6E, 0x3C, 0x44, 0x4D, 0x19, 0x5B, 0x5F
};

static UINT8_A aes192_plain_text_cbc_12[] =
{
   0xBE, 0x8A, 0xBF, 0x00, 0x90, 0x13, 0x63, 0x98,
   0x7A, 0x82, 0xCC, 0x77, 0xD0, 0xEC, 0x91, 0x69,
   0x7B, 0xA3, 0x85, 0x7F, 0x9E, 0x4F, 0x84, 0xBD,
   0x79, 0x40, 0x6C, 0x13, 0x8D, 0x02, 0x69, 0x8F,
   0x00, 0x32, 0x76, 0xD0, 0x44, 0x91, 0x20, 0xBE,
   0xF4, 0x57, 0x8D, 0x78, 0xFE, 0xCA, 0xBE, 0x8E,
   0x07, 0x0E, 0x11, 0x71, 0x0B, 0x3F, 0x0A, 0x27,
   0x44, 0xBD, 0x52, 0x43, 0x4E, 0xC7, 0x00, 0x15,
   0x88, 0x4C, 0x18, 0x1E, 0xBD, 0xFD, 0x51, 0xC6,
   0x04, 0xA7, 0x1C, 0x52, 0xE4, 0xC0, 0xE1, 0x10,
   0xBC, 0x40, 0x8C, 0xD4, 0x62, 0xB2, 0x48, 0xA8,
   0x0B, 0x8A, 0x8A, 0xC0, 0x6B, 0xB9, 0x52, 0xAC,
   0x1D, 0x7F, 0xAE, 0xD1, 0x44, 0x80, 0x7F, 0x1A,
   0x73, 0x1B, 0x7F, 0xEB, 0xCA, 0xF7, 0x83, 0x57,
   0x62, 0xDE, 0xFE, 0x92, 0xEC, 0xCF, 0xC7, 0xA9,
   0x94, 0x4E, 0x1C, 0x70, 0x2C, 0xFF, 0xE6, 0xBC,
   0x86, 0x73, 0x3E, 0xD3, 0x21, 0x42, 0x31, 0x21,
   0x08, 0x5A, 0xC0, 0x2D, 0xF8, 0x96, 0x2B, 0xCB,
   0xC1, 0x93, 0x70, 0x92, 0xEE, 0xBF, 0x0E, 0x90,
   0xA8, 0xB2, 0x0E, 0x3D, 0xD8, 0xC2, 0x44, 0xAE
};
static UINT8_A aes192_key_cbc_12[] =
{
   0x16, 0x2A, 0xD5, 0x0E, 0xE6, 0x4A, 0x07, 0x02,
   0xAA, 0x55, 0x1F, 0x57, 0x1D, 0xED, 0xC1, 0x6B,
   0x2C, 0x1B, 0x6A, 0x1E, 0x4D, 0x4B, 0x5E, 0xEE
};
static UINT8_A aes192_iv_cbc_12[] =
{
   0x24, 0x40, 0x80, 0x38, 0x16, 0x1A, 0x2C, 0xCA,
   0xE0, 0x7B, 0x02, 0x9B, 0xB6, 0x63, 0x55, 0xC1
};
static UINT8_A aes192_cipher_text_cbc_12[] =
{
   0xC8, 0x2C, 0xF2, 0xC4, 0x76, 0xDE, 0xA8, 0xCB,
   0x6A, 0x6E, 0x60, 0x7A, 0x40, 0xD2, 0xF0, 0x39,
   0x1B, 0xE8, 0x2E, 0xA9, 0xEC, 0x84, 0xA5, 0x37,
   0xA6, 0x82, 0x0F, 0x9A, 0xFB, 0x99, 0x7B, 0x76,
   0x39, 0x7D, 0x00, 0x54, 0x24, 0xFA, 0xA6, 0xA7,
   0x4D, 0xC4, 0xE8, 0xC7, 0xAA, 0x4A, 0x89, 0x00,
   0x69, 0x0F, 0x89, 0x4B, 0x6D, 0x1D, 0xCA, 0x80,
   0x67, 0x53, 0x93, 0xD2, 0x24, 0x3A, 0xDA, 0xC7,
   0x62, 0xF1, 0x59, 0x30, 0x1E, 0x35, 0x7E, 0x98,
   0xB7, 0x24, 0x76, 0x23, 0x10, 0xCD, 0x5A, 0x7B,
   0xAF, 0xE1, 0xC2, 0xA0, 0x30, 0xDB, 0xA4, 0x6F,
   0xD9, 0x3A, 0x9F, 0xDB, 0x89, 0xCC, 0x13, 0x2C,
   0xA9, 0xC1, 0x7D, 0xC7, 0x20, 0x31, 0xEC, 0x68,
   0x22, 0xEE, 0x5A, 0x9D, 0x99, 0xDB, 0xCA, 0x66,
   0xC7, 0x84, 0xC0, 0x1B, 0x08, 0x85, 0xCB, 0xB6,
   0x2E, 0x29, 0xD9, 0x78, 0x01, 0x92, 0x7E, 0xC4,
   0x15, 0xA5, 0xD2, 0x15, 0x15, 0x8D, 0x32, 0x5F,
   0x9E, 0xE6, 0x89, 0x43, 0x7A, 0xD1, 0xB7, 0x68,
   0x4A, 0xD3, 0x3C, 0x0D, 0x92, 0x73, 0x94, 0x51,
   0xAC, 0x87, 0xF3, 0x9F, 0xF8, 0xC3, 0x1B, 0x84
};

uf_aes_vector_type_t sw_aes192_cbc_test_vectors[] =
{
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes192_plain_text_cbc_1, //0
      sizeof(aes192_plain_text_cbc_1), aes192_key_cbc_1, 24,
      aes192_iv_cbc_1, aes192_cipher_text_cbc_1},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes192_plain_text_cbc_2, //1
      sizeof(aes192_plain_text_cbc_2), aes192_key_cbc_2, 24,
      aes192_iv_cbc_2, aes192_cipher_text_cbc_2},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes192_plain_text_cbc_3, //2
      sizeof(aes192_plain_text_cbc_3), aes192_key_cbc_3, 24,
      aes192_iv_cbc_3, aes192_cipher_text_cbc_3},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes192_plain_text_cbc_4, //3
      sizeof(aes192_plain_text_cbc_4), aes192_key_cbc_4, 24,
      aes192_iv_cbc_4, aes192_cipher_text_cbc_4},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes192_plain_text_cbc_5, //4
      sizeof(aes192_plain_text_cbc_5), aes192_key_cbc_5, 24,
      aes192_iv_cbc_5, aes192_cipher_text_cbc_5},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes192_plain_text_cbc_6, //5
      sizeof(aes192_plain_text_cbc_6), aes192_key_cbc_6, 24,
      aes192_iv_cbc_6, aes192_cipher_text_cbc_6},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes192_plain_text_cbc_7, //6
      sizeof(aes192_plain_text_cbc_7), aes192_key_cbc_7, 24,
      aes192_iv_cbc_7, aes192_cipher_text_cbc_7},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes192_plain_text_cbc_8, //7
      sizeof(aes192_plain_text_cbc_8), aes192_key_cbc_8, 24,
      aes192_iv_cbc_8, aes192_cipher_text_cbc_8},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes192_plain_text_cbc_9, //8
      sizeof(aes192_plain_text_cbc_9), aes192_key_cbc_9, 24,
      aes192_iv_cbc_9, aes192_cipher_text_cbc_9},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes192_plain_text_cbc_10, //9
      sizeof(aes192_plain_text_cbc_10), aes192_key_cbc_10, 24,
      aes192_iv_cbc_10, aes192_cipher_text_cbc_10},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes192_plain_text_cbc_11, //10
      sizeof(aes192_plain_text_cbc_11), aes192_key_cbc_11, 24,
      aes192_iv_cbc_11, aes192_cipher_text_cbc_11},
   {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes192_plain_text_cbc_12, //11
      sizeof(aes192_plain_text_cbc_12), aes192_key_cbc_12, 24,
      aes192_iv_cbc_12, aes192_cipher_text_cbc_12}

};

/* AES-192 CTR test vectors */
/* taken from https://tools.ietf.org/html/rfc3686.html#page-9 */
static UINT8_A aes192_plain_text_ctr_1[] =
{
   0x53, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x20, 0x62,
   0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x6D, 0x73, 0x67
};
static UINT8_A aes192_key_ctr_1[] =
{
   0x16, 0xAF, 0x5B, 0x14, 0x5F, 0xC9, 0xF5, 0x79,
   0xC1, 0x75, 0xF9, 0x3E, 0x3B, 0xFB, 0x0E, 0xED,
   0x86, 0x3D, 0x06, 0xCC, 0xFD, 0xB7, 0x85, 0x15
};
static UINT8_A aes192_iv_ctr_1[] =
{
   0x00, 0x00, 0x00, 0x48, 0x36, 0x73, 0x3C, 0x14,
   0x7D, 0x6D, 0x93, 0xCB, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A aes192_cipher_text_ctr_1[] =
{
   0x4B, 0x55, 0x38, 0x4F, 0xE2, 0x59, 0xC9, 0xC8,
   0x4E, 0x79, 0x35, 0xA0, 0x03, 0xCB, 0xE9, 0x28
};

static UINT8_A aes192_plain_text_ctr_2[] = //multiblock
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
};
static UINT8_A aes192_key_ctr_2[] =
{
   0x7C, 0x5C, 0xB2, 0x40, 0x1B, 0x3D, 0xC3, 0x3C,
   0x19, 0xE7, 0x34, 0x08, 0x19, 0xE0, 0xF6, 0x9C,
   0x67, 0x8C, 0x3D, 0xB8, 0xE6, 0xF6, 0xA9, 0x1A
};
static UINT8_A aes192_iv_ctr_2[] =
{
   0x00, 0x96, 0xB0, 0x3B, 0x02, 0x0C, 0x6E, 0xAD,
   0xC2, 0xCB, 0x50, 0x0D, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A aes192_cipher_text_ctr_2[] =
{
   0x45, 0x32, 0x43, 0xFC, 0x60, 0x9B, 0x23, 0x32,
   0x7E, 0xDF, 0xAA, 0xFA, 0x71, 0x31, 0xCD, 0x9F,
   0x84, 0x90, 0x70, 0x1C, 0x5A, 0xD4, 0xA7, 0x9C,
   0xFC, 0x1F, 0xE0, 0xFF, 0x42, 0xF4, 0xFB, 0x00
};

/* CTR Mode Operation
AES 192 ECB Encryption with Key = Key = 02BF391EE8ECB159B959617B0965279BF59B60A786D3E0FE
and input = iv = 0007BDFD5CBD60278DCC091200000001
which results in op = 96883dc65a5974285c0277dad1fae957 (http://aes.online-domain-tools.com/)

Now xor op with first 16 bytes of input ie 000102030405060708090A0B0C0D0E0F
96883dc65a5974285c0277dad1fae957 xor 000102030405060708090A0B0C0D0E0F
results in 96893fc55e5c722f540b7dd1ddf7e758

So first 16 bytes of output = 96893fc55e5c722f540b7dd1ddf7e758

For next 16 bytes of input,
AES 192 ECB Encryption with Key = Key = 02BF391EE8ECB159B959617B0965279BF59B60A786D3E0FE
and input = iv + 1 (counter mode) = 0007BDFD5CBD60278DCC091200000001 + 1
                                  = 0007BDFD5CBD60278DCC091200000002
which results in op = c299ae86d284739f5d2fd20a7a323f97 (http://aes.online-domain-tools.com/)

Now xor op with second 16 bytes of input ie 101112131415161718191A1B1C1D1E1F
c299ae86d284739f5d2fd20a7a323f97 xor 101112131415161718191A1B1C1D1E1F
results in d288bc95c69165884536c811662f2188

So second 16 bytes of output = d288bc95c69165884536c811662f2188

For next 16 bytes of input,
AES 192 ECB Encryption with Key = Key = 02BF391EE8ECB159B959617B0965279BF59B60A786D3E0FE
and input = iv + 2 (counter mode) = 0007BDFD5CBD60278DCC091200000001 + 2
                                  = 0007BDFD5CBD60278DCC091200000003
which results in op = 8bcf2b163999b22615b49cd4fe573998 (http://aes.online-domain-tools.com/)

Now xor op with third 16 bytes of input. In input as we only 4 bytes, we will zero pad
ie 20212223 becomes 20212223000000000000000000000000
8bcf2b163999b22615b49cd4fe573998 xor 20212223000000000000000000000000
results in abee09353999b22615b49cd4fe573998

As our third input was only 4 bytes, we pick first 4 bytes as output.
So our final output from this iteration will be = abee0935

Now final output will be calculated by joining above output as follows

96893fc55e5c722f540b7dd1ddf7e758d288bc95c69165884536c811662f2188abee0935

*/
static UINT8_A aes192_plain_text_ctr_3[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
   0x20, 0x21, 0x22, 0x23
};
static UINT8_A aes192_key_ctr_3[] =
{
   0x02, 0xBF, 0x39, 0x1E, 0xE8, 0xEC, 0xB1, 0x59,
   0xB9, 0x59, 0x61, 0x7B, 0x09, 0x65, 0x27, 0x9B,
   0xF5, 0x9B, 0x60, 0xA7, 0x86, 0xD3, 0xE0, 0xFE
};
static UINT8_A aes192_iv_ctr_3[] =
{
   0x00, 0x07, 0xBD, 0xFD, 0x5C, 0xBD, 0x60, 0x27,
   0x8D, 0xCC, 0x09, 0x12, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A aes192_cipher_text_ctr_3[] =
{
   0x96, 0x89, 0x3F, 0xC5, 0x5E, 0x5C, 0x72, 0x2F,
   0x54, 0x0B, 0x7D, 0xD1, 0xDD, 0xF7, 0xE7, 0x58,
   0xD2, 0x88, 0xBC, 0x95, 0xC6, 0x91, 0x65, 0x88,
   0x45, 0x36, 0xC8, 0x11, 0x66, 0x2F, 0x21, 0x88,
   0xAB, 0xEE, 0x09, 0x35
};

uf_aes_vector_type_t sw_aes192_ctr_test_vectors[] =
{
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_CTR, aes192_plain_text_ctr_1, //0
      sizeof(aes192_plain_text_ctr_1), aes192_key_ctr_1, 24,
      aes192_iv_ctr_1, aes192_cipher_text_ctr_1},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_CTR, aes192_plain_text_ctr_2, //1
      sizeof(aes192_plain_text_ctr_2), aes192_key_ctr_2, 24,
      aes192_iv_ctr_2, aes192_cipher_text_ctr_2},
   {SW_CIPHER_ALG_AES192, SW_CIPHER_MODE_CTR, aes192_plain_text_ctr_3, //2
      sizeof(aes192_plain_text_ctr_3), aes192_key_ctr_3, 24,
      aes192_iv_ctr_3, aes192_cipher_text_ctr_3}

};

/* Needed for SW AES test vectors */
UINT8_A plain_text[] =
{
   0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
   0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
   0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
   0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
};

UINT8_A key_128[] =
{
   0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
};

// no iv needed for ecb
UINT8_A ecb_cipher_text[] =
{
   0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97,
   0xf5, 0xd3, 0xd5, 0x85, 0x03, 0xb9, 0x69, 0x9d, 0xe7, 0x85, 0x89, 0x5a, 0x96, 0xfd, 0xba, 0xaf,
   0x43, 0xb1, 0xcd, 0x7f, 0x59, 0x8e, 0xce, 0x23, 0x88, 0x1b, 0x00, 0xe3, 0xed, 0x03, 0x06, 0x88,
   0x7b, 0x0c, 0x78, 0x5e, 0x27, 0xe8, 0xad, 0x3f, 0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5d, 0xd4
};

UINT8_A iv_cbc[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
};

UINT8_A cbc_cipher_text[] =
{
   0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
   0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
   0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
   0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7
};

UINT8_A key_cts[] =
{
   0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x20, 0x74, 0x65, 0x72, 0x69, 0x79, 0x61, 0x6b, 0x69
};

UINT8_A iv_cts[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

UINT8_A plain_text_cts_1[] =
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
   0x20
};

UINT8_A cipher_text_cts_1[] =
{
   0xc6, 0x35, 0x35, 0x68, 0xf2, 0xbf, 0x8c, 0xb4, 0xd8, 0xa5, 0x80, 0x36, 0x2d, 0xa7, 0xff, 0x7f,
   0x97
};

UINT8_A plain_text_cts_2[] =
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
   0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20
};

UINT8_A cipher_text_cts_2[] =
{
   0xfc, 0x00, 0x78, 0x3e, 0x0e, 0xfd, 0xb2, 0xc1, 0xd4, 0x45, 0xd4, 0xc8, 0xef, 0xf7, 0xed, 0x22,
   0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0, 0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5
};

UINT8_A plain_text_cts_3[] =
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
   0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20, 0x43
};

UINT8_A cipher_text_cts_3[] =
{
   0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0, 0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5, 0x84,
   0x39, 0x31, 0x25, 0x23, 0xa7, 0x86, 0x62, 0xd5, 0xbe, 0x7f, 0xcb, 0xcc, 0x98, 0xeb, 0xf5, 0xa8
};

UINT8_A plain_text_cts_4[] =
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
   0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20, 0x43,
   0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2c
};

UINT8_A cipher_text_cts_4[] =
{
   0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0, 0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5, 0x84,
   0xb3, 0xff, 0xfd, 0x94, 0x0c, 0x16, 0xa1, 0x8c, 0x1b, 0x55, 0x49, 0xd2, 0xf8, 0x38, 0x02, 0x9e,
   0x39, 0x31, 0x25, 0x23, 0xa7, 0x86, 0x62, 0xd5, 0xbe, 0x7f, 0xcb, 0xcc, 0x98, 0xeb, 0xf5
};

/* AES-128 test vectors array */
uf_aes_vector_type_t sw_aes_test_vectors[] =
{
    {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_ecb_1,
        sizeof(aes_plain_text_ecb_1), aes_key_ecb_1, 16, NULL,
        aes_cipher_text_ecb_1}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_cbc_2,
            sizeof(aes_plain_text_cbc_2), aes_key_cbc_2, 16,
            aes_iv_cbc_2, aes_cipher_text_cbc_2}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTR, aes_plain_text_ctr_3,
            sizeof(aes_plain_text_ctr_3), aes_key_ctr_3, 16,
            aes_iv_ctr_3, aes_cipher_text_ctr_3}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, plain_text,
            sizeof(plain_text), key_128, 16,
            NULL, ecb_cipher_text}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, plain_text,
            sizeof(plain_text), key_128, 16,
            iv_cbc, cbc_cipher_text}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, plain_text_cts_1,
            sizeof(plain_text_cts_1), key_cts, 16,
            iv_cts, cipher_text_cts_1}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, plain_text_cts_2,
            sizeof(plain_text_cts_2), key_cts, 16,
            iv_cts, cipher_text_cts_2}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, plain_text_cts_3,
            sizeof(plain_text_cts_3), key_cts, 16,
            iv_cts, cipher_text_cts_3}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, plain_text_cts_4,
            sizeof(plain_text_cts_4), key_cts, 16,
            iv_cts, cipher_text_cts_4}
    ,

};

/* AES GCM test vectors */
#define MAX_TESTS   6

int key_index_gcm[MAX_TESTS] =
{
   0, 0, 1, 1, 1, 1
};

unsigned char key_gcm[MAX_TESTS][32] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
      0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
      0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
      0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08 },
};

size_t iv_len_gcm[MAX_TESTS] =
{
   12, 12, 12, 12, 8, 60
};

int iv_index_gcm[MAX_TESTS] =
{
   0, 0, 1, 1, 1, 2
};

unsigned char iv_gcm[MAX_TESTS][64] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00 },
    { 0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
      0xde, 0xca, 0xf8, 0x88 },
    { 0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,
      0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
      0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,
      0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
      0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,
      0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
      0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
      0xa6, 0x37, 0xb3, 0x9b },
};

size_t add_len_gcm[MAX_TESTS] =
{
   0, 0, 0, 20, 20, 20
};

int add_index_gcm[MAX_TESTS] =
{
   0, 0, 0, 1, 1, 1
};

unsigned char additional_gcm[MAX_TESTS][64] =
{
    { 0x00 },
    { 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
      0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
      0xab, 0xad, 0xda, 0xd2 },
};

size_t pt_len_gcm[MAX_TESTS] =
{
   0, 16, 64, 60, 60, 60
};

int pt_index_gcm[MAX_TESTS] =
{
   0, 0, 1, 1, 1, 1
};

unsigned char pt_gcm[MAX_TESTS][64] =
{
   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
      0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
      0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
      0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
      0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
      0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
      0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
      0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55 },
};

unsigned char ct_gcm[MAX_TESTS * 3][64] =
{
   { 0x00 },
   { 0x03, 0x88, 0xda, 0xce, 0x60, 0xb6, 0xa3, 0x92,
      0xf3, 0x28, 0xc2, 0xb9, 0x71, 0xb2, 0xfe, 0x78 },
   { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
      0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
      0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
      0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
      0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
      0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
      0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
      0x3d, 0x58, 0xe0, 0x91, 0x47, 0x3f, 0x59, 0x85 },
   { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
      0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
      0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
      0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
      0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
      0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
      0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
      0x3d, 0x58, 0xe0, 0x91 },
   { 0x61, 0x35, 0x3b, 0x4c, 0x28, 0x06, 0x93, 0x4a,
      0x77, 0x7f, 0xf5, 0x1f, 0xa2, 0x2a, 0x47, 0x55,
      0x69, 0x9b, 0x2a, 0x71, 0x4f, 0xcd, 0xc6, 0xf8,
      0x37, 0x66, 0xe5, 0xf9, 0x7b, 0x6c, 0x74, 0x23,
      0x73, 0x80, 0x69, 0x00, 0xe4, 0x9f, 0x24, 0xb2,
      0x2b, 0x09, 0x75, 0x44, 0xd4, 0x89, 0x6b, 0x42,
      0x49, 0x89, 0xb5, 0xe1, 0xeb, 0xac, 0x0f, 0x07,
      0xc2, 0x3f, 0x45, 0x98 },
   { 0x8c, 0xe2, 0x49, 0x98, 0x62, 0x56, 0x15, 0xb6,
      0x03, 0xa0, 0x33, 0xac, 0xa1, 0x3f, 0xb8, 0x94,
      0xbe, 0x91, 0x12, 0xa5, 0xc3, 0xa2, 0x11, 0xa8,
      0xba, 0x26, 0x2a, 0x3c, 0xca, 0x7e, 0x2c, 0xa7,
      0x01, 0xe4, 0xa9, 0xa4, 0xfb, 0xa4, 0x3c, 0x90,
      0xcc, 0xdc, 0xb2, 0x81, 0xd4, 0x8c, 0x7c, 0x6f,
      0xd6, 0x28, 0x75, 0xd2, 0xac, 0xa4, 0x17, 0x03,
      0x4c, 0x34, 0xae, 0xe5 },
   { 0x00 },
   { 0x98, 0xe7, 0x24, 0x7c, 0x07, 0xf0, 0xfe, 0x41,
      0x1c, 0x26, 0x7e, 0x43, 0x84, 0xb0, 0xf6, 0x00 },
   { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
      0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
      0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
      0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
      0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
      0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
      0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
      0xcc, 0xda, 0x27, 0x10, 0xac, 0xad, 0xe2, 0x56 },
   { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
      0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
      0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
      0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
      0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
      0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
      0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
      0xcc, 0xda, 0x27, 0x10 },
   { 0x0f, 0x10, 0xf5, 0x99, 0xae, 0x14, 0xa1, 0x54,
      0xed, 0x24, 0xb3, 0x6e, 0x25, 0x32, 0x4d, 0xb8,
      0xc5, 0x66, 0x63, 0x2e, 0xf2, 0xbb, 0xb3, 0x4f,
      0x83, 0x47, 0x28, 0x0f, 0xc4, 0x50, 0x70, 0x57,
      0xfd, 0xdc, 0x29, 0xdf, 0x9a, 0x47, 0x1f, 0x75,
      0xc6, 0x65, 0x41, 0xd4, 0xd4, 0xda, 0xd1, 0xc9,
      0xe9, 0x3a, 0x19, 0xa5, 0x8e, 0x8b, 0x47, 0x3f,
      0xa0, 0xf0, 0x62, 0xf7 },
   { 0xd2, 0x7e, 0x88, 0x68, 0x1c, 0xe3, 0x24, 0x3c,
      0x48, 0x30, 0x16, 0x5a, 0x8f, 0xdc, 0xf9, 0xff,
      0x1d, 0xe9, 0xa1, 0xd8, 0xe6, 0xb4, 0x47, 0xef,
      0x6e, 0xf7, 0xb7, 0x98, 0x28, 0x66, 0x6e, 0x45,
      0x81, 0xe7, 0x90, 0x12, 0xaf, 0x34, 0xdd, 0xd9,
      0xe2, 0xf0, 0x37, 0x58, 0x9b, 0x29, 0x2d, 0xb3,
      0xe6, 0x7c, 0x03, 0x67, 0x45, 0xfa, 0x22, 0xe7,
      0xe9, 0xb7, 0x37, 0x3b },
   { 0x00 },
   { 0xce, 0xa7, 0x40, 0x3d, 0x4d, 0x60, 0x6b, 0x6e,
      0x07, 0x4e, 0xc5, 0xd3, 0xba, 0xf3, 0x9d, 0x18 },
   { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
      0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
      0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
      0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
      0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
      0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
      0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
      0xbc, 0xc9, 0xf6, 0x62, 0x89, 0x80, 0x15, 0xad },
   { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
      0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
      0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
      0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
      0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
      0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
      0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
      0xbc, 0xc9, 0xf6, 0x62 },
   { 0xc3, 0x76, 0x2d, 0xf1, 0xca, 0x78, 0x7d, 0x32,
      0xae, 0x47, 0xc1, 0x3b, 0xf1, 0x98, 0x44, 0xcb,
      0xaf, 0x1a, 0xe1, 0x4d, 0x0b, 0x97, 0x6a, 0xfa,
      0xc5, 0x2f, 0xf7, 0xd7, 0x9b, 0xba, 0x9d, 0xe0,
      0xfe, 0xb5, 0x82, 0xd3, 0x39, 0x34, 0xa4, 0xf0,
      0x95, 0x4c, 0xc2, 0x36, 0x3b, 0xc7, 0x3f, 0x78,
      0x62, 0xac, 0x43, 0x0e, 0x64, 0xab, 0xe4, 0x99,
      0xf4, 0x7c, 0x9b, 0x1f },
   { 0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1,
      0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,
      0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19,
      0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,
      0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45,
      0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,
      0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,
      0x44, 0xae, 0x7e, 0x3f },
};

unsigned char tag_gcm[MAX_TESTS * 3][16] =
{
   { 0x58, 0xe2, 0xfc, 0xce, 0xfa, 0x7e, 0x30, 0x61,
      0x36, 0x7f, 0x1d, 0x57, 0xa4, 0xe7, 0x45, 0x5a },
   { 0xab, 0x6e, 0x47, 0xd4, 0x2c, 0xec, 0x13, 0xbd,
      0xf5, 0x3a, 0x67, 0xb2, 0x12, 0x57, 0xbd, 0xdf },
   { 0x4d, 0x5c, 0x2a, 0xf3, 0x27, 0xcd, 0x64, 0xa6,
      0x2c, 0xf3, 0x5a, 0xbd, 0x2b, 0xa6, 0xfa, 0xb4 },
   { 0x5b, 0xc9, 0x4f, 0xbc, 0x32, 0x21, 0xa5, 0xdb,
      0x94, 0xfa, 0xe9, 0x5a, 0xe7, 0x12, 0x1a, 0x47 },
   { 0x36, 0x12, 0xd2, 0xe7, 0x9e, 0x3b, 0x07, 0x85,
      0x56, 0x1b, 0xe1, 0x4a, 0xac, 0xa2, 0xfc, 0xcb },
   { 0x61, 0x9c, 0xc5, 0xae, 0xff, 0xfe, 0x0b, 0xfa,
      0x46, 0x2a, 0xf4, 0x3c, 0x16, 0x99, 0xd0, 0x50 },
   { 0xcd, 0x33, 0xb2, 0x8a, 0xc7, 0x73, 0xf7, 0x4b,
      0xa0, 0x0e, 0xd1, 0xf3, 0x12, 0x57, 0x24, 0x35 },
   { 0x2f, 0xf5, 0x8d, 0x80, 0x03, 0x39, 0x27, 0xab,
      0x8e, 0xf4, 0xd4, 0x58, 0x75, 0x14, 0xf0, 0xfb },
   { 0x99, 0x24, 0xa7, 0xc8, 0x58, 0x73, 0x36, 0xbf,
      0xb1, 0x18, 0x02, 0x4d, 0xb8, 0x67, 0x4a, 0x14 },
   { 0x25, 0x19, 0x49, 0x8e, 0x80, 0xf1, 0x47, 0x8f,
      0x37, 0xba, 0x55, 0xbd, 0x6d, 0x27, 0x61, 0x8c },
   { 0x65, 0xdc, 0xc5, 0x7f, 0xcf, 0x62, 0x3a, 0x24,
      0x09, 0x4f, 0xcc, 0xa4, 0x0d, 0x35, 0x33, 0xf8 },
   { 0xdc, 0xf5, 0x66, 0xff, 0x29, 0x1c, 0x25, 0xbb,
      0xb8, 0x56, 0x8f, 0xc3, 0xd3, 0x76, 0xa6, 0xd9 },
   { 0x53, 0x0f, 0x8a, 0xfb, 0xc7, 0x45, 0x36, 0xb9,
      0xa9, 0x63, 0xb4, 0xf1, 0xc4, 0xcb, 0x73, 0x8b },
   { 0xd0, 0xd1, 0xc8, 0xa7, 0x99, 0x99, 0x6b, 0xf0,
      0x26, 0x5b, 0x98, 0xb5, 0xd4, 0x8a, 0xb9, 0x19 },
   { 0xb0, 0x94, 0xda, 0xc5, 0xd9, 0x34, 0x71, 0xbd,
      0xec, 0x1a, 0x50, 0x22, 0x70, 0xe3, 0xcc, 0x6c },
   { 0x76, 0xfc, 0x6e, 0xce, 0x0f, 0x4e, 0x17, 0x68,
      0xcd, 0xdf, 0x88, 0x53, 0xbb, 0x2d, 0x55, 0x1b },
   { 0x3a, 0x33, 0x7d, 0xbf, 0x46, 0xa7, 0x92, 0xc4,
      0x5e, 0x45, 0x49, 0x13, 0xfe, 0x2e, 0xa8, 0xf2 },
   { 0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0,
      0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9, 0xf1, 0x9a },
};

//Triple DES vectors

//CBC vectors
static UINT8_A triple_des_iv_1_cbc[] =
{
   0x21, 0xC1, 0xB0, 0xA1, 0xD8, 0x50, 0x6C, 0x28
};
static UINT8_A triple_des_key_1_cbc[] =
{
   0x9A, 0x72, 0xED, 0x27, 0x5C, 0x8E, 0x8B, 0x3F,
   0x17, 0xAF, 0x0D, 0x56, 0xC9, 0x14, 0x42, 0x9A,
   0x9A, 0x72, 0xED, 0x27, 0x5C, 0x8E, 0x8B, 0x3F
};
static UINT8_A triple_des_plain_text_1_cbc[] =
{
   0x3F, 0xD5, 0xBF, 0xAB, 0xFF, 0x94, 0x5F, 0x8B,
   0x8F, 0x84, 0x67, 0x83, 0x93, 0x80, 0x69, 0x81,
   0x94, 0x81, 0xCA, 0x40, 0x65, 0x20, 0x12, 0xD1,
   0x89, 0x68, 0x64, 0xF5, 0xB2, 0x7A, 0x59, 0x3D,
   0x8C, 0xDF, 0xC6, 0x6F, 0xE3, 0x37, 0xD1, 0xDA,
   0x48, 0xAC, 0x24, 0x56, 0x12, 0x2B, 0x89, 0x15,
   0xE4, 0xCB, 0xF2, 0x65, 0xF9, 0x32, 0x5C, 0xD8,
   0x2E, 0x6C, 0x17, 0x36, 0x2B, 0xDA, 0x35, 0xAC
};
static UINT8_A triple_des_cipher_text_1_cbc[] =
{
   0xF5, 0xEB, 0x5A, 0x83, 0x52, 0x97, 0x21, 0xAC,
   0x07, 0x60, 0x6B, 0x58, 0x2D, 0xF7, 0x9F, 0x2B,
   0x5B, 0x68, 0x20, 0x53, 0x2C, 0x4F, 0xD7, 0x0F,
   0x5B, 0xDD, 0x23, 0xE7, 0x69, 0xA7, 0x55, 0x17,
   0x62, 0x94, 0x51, 0x31, 0x24, 0xCE, 0x84, 0x35,
   0x45, 0x16, 0xB9, 0x80, 0xBE, 0x7C, 0x8B, 0xF0,
   0x70, 0x3E, 0x8C, 0x63, 0x6E, 0x52, 0x83, 0xD9,
   0xBC, 0x57, 0xFF, 0x5A, 0xFF, 0x41, 0x89, 0xB8
};

static UINT8_A triple_des_iv_2_cbc[] =
{
   0x6E, 0xAB, 0x13, 0xB8, 0x36, 0xEE, 0xF5, 0xC3
};
static UINT8_A triple_des_key_2_cbc[] =
{
   0x21, 0x28, 0xCA, 0x88, 0xFC, 0xB8, 0x3C, 0xB7,
   0x22, 0xF3, 0xDB, 0x35, 0x74, 0xA9, 0x5C, 0xC5,
   0x50, 0x99, 0x48, 0x99, 0xE8, 0x21, 0xD4, 0x8B
};
static UINT8_A triple_des_plain_text_2_cbc[] =
{
   0x4E, 0xBD, 0x88, 0xB7, 0xBA, 0xBC, 0xEF, 0x94,
   0x51, 0x07, 0x81, 0x35, 0x1A, 0x9B, 0x74, 0x6C,
   0x04, 0xDA, 0x15, 0x4C, 0x33, 0x42, 0x4C, 0x00,
   0xB6, 0x20, 0x9B, 0x6C, 0x6B, 0x9D, 0x21, 0x25,
   0x65, 0x8B, 0xB4, 0xE4, 0x2B, 0x46, 0x32, 0x85,
   0xFC, 0xFA, 0xDB, 0x3A, 0x91, 0x76, 0x18, 0x09,
   0x5C, 0xA4, 0xC9, 0xE9, 0x46, 0xC4, 0x8F, 0xE5,
   0xCB, 0x79, 0x24, 0x0D, 0xEA, 0x9D, 0xAC, 0x7B,
   0xBE, 0x06, 0x8B, 0xE9, 0x49, 0x99, 0x71, 0x10,
   0x7E, 0x6F, 0x25, 0x01, 0x33, 0x79, 0xE8, 0x22,
   0x58, 0xCB, 0x35, 0x7E, 0xEC, 0xEE, 0x55, 0x41,
   0x51, 0xC7, 0xC0, 0xAE, 0x15, 0xE4, 0xA8, 0xED,
   0x3A, 0x16, 0xBE, 0x85, 0x71, 0x7B, 0xC2, 0x1C,
   0xC2, 0x7E, 0x5E, 0xB4, 0x98, 0xA0, 0x61, 0xDF,
   0xB6, 0x5B, 0x03, 0x62, 0x8B, 0xAF, 0x44, 0xB8,
   0xE8, 0x68, 0xAE, 0x27, 0xCB, 0x5F, 0x0B, 0x87
};
static UINT8_A triple_des_cipher_text_2_cbc[] =
{
   0x4F, 0x76, 0x86, 0xDA, 0x38, 0x4D, 0xAA, 0x3B,
   0x0C, 0x20, 0x04, 0x76, 0x00, 0x94, 0x22, 0x69,
   0xE0, 0x16, 0x4E, 0x72, 0x9C, 0xBB, 0x44, 0x6E,
   0x33, 0x0B, 0x40, 0x49, 0xC2, 0x93, 0x96, 0xC2,
   0xA1, 0x17, 0x7F, 0x78, 0xF3, 0xC9, 0x54, 0x89,
   0xC5, 0x2D, 0x18, 0x07, 0x45, 0xBC, 0x09, 0x85,
   0xC3, 0xB4, 0x17, 0xCB, 0x2C, 0x24, 0xC1, 0xE8,
   0xFA, 0x4D, 0x59, 0x95, 0x7B, 0x62, 0x7D, 0x9A,
   0x53, 0xD2, 0x41, 0x8F, 0x2F, 0x0A, 0x8F, 0x36,
   0x13, 0xDB, 0xFC, 0xAA, 0x8F, 0x09, 0x01, 0x04,
   0x3B, 0x2E, 0x92, 0xDD, 0xF8, 0x56, 0x3B, 0xD4,
   0x3D, 0xCC, 0xEA, 0xAB, 0xEF, 0x6C, 0x26, 0xAA,
   0x4E, 0x1C, 0x6C, 0xBD, 0x9E, 0x0E, 0x70, 0xC2,
   0xF7, 0x45, 0x41, 0x35, 0xE2, 0x70, 0x34, 0x08,
   0xD7, 0x01, 0x27, 0x75, 0xC9, 0x09, 0xE2, 0x62,
   0x8C, 0x03, 0x04, 0xFB, 0x4A, 0xDE, 0xAA, 0x11
};

/* new */
static UINT8_A triple_des_key_3_cbc[] =
{
   0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
   0xf1, 0xe0, 0xd3, 0xc2, 0xb5, 0xa4, 0x97, 0x86,
   0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10
};
static UINT8_A triple_des_iv_3_cbc[] =
{
   0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10
};
static UINT8_A triple_des_plain_text_3_cbc[] =
{
   0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x20,
   0x4E, 0x6F, 0x77, 0x20, 0x69, 0x73, 0x20, 0x74,
   0x68, 0x65, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x20,
   0x66, 0x6F, 0x72, 0x20, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A triple_des_cipher_text_3_cbc[] =
{
   0x3F, 0xE3, 0x01, 0xC9, 0x62, 0xAC, 0x01, 0xD0,
   0x22, 0x13, 0x76, 0x3C, 0x1C, 0xBD, 0x4C, 0xDC,
   0x79, 0x96, 0x57, 0xC0, 0x64, 0xEC, 0xF5, 0xD4,
   0x1C, 0x67, 0x38, 0x12, 0xCF, 0xDE, 0x96, 0x75
};

//ECB vectors
static UINT8_A triple_des_key_1_ecb[] =
{
   0x21, 0x28, 0xCA, 0x88, 0xFC, 0xB8, 0x3C, 0xB7,
   0x22, 0xF3, 0xDB, 0x35, 0x74, 0xA9, 0x5C, 0xC5,
   0x50, 0x99, 0x48, 0x99, 0xE8, 0x21, 0xD4, 0x8B
};
static UINT8_A triple_des_plain_text_1_ecb[] =
{
   0x69, 0xA7, 0xEF, 0x44, 0x63, 0x07, 0x1C, 0x13,
   0xA4, 0x47, 0x70, 0x82, 0xBE, 0x36, 0x3B, 0x65,
   0x52, 0x9F, 0xD5, 0xFD, 0x46, 0xE8, 0x2B, 0xE0,
   0x0A, 0xA6, 0xC9, 0x79, 0x19, 0x8A, 0x62, 0x53,
   0x92, 0x11, 0x66, 0x4D, 0x10, 0x21, 0xB4, 0xEB,
   0xDB, 0xCD, 0x6F, 0x15, 0xA5, 0x91, 0x27, 0x2B,
   0x96, 0xD7, 0xC8, 0xE0, 0x00, 0xD7, 0xA3, 0xFB,
   0x47, 0x49, 0xE8, 0xE2, 0x74, 0x33, 0x92, 0xD8,
   0x43, 0xDC, 0x1A, 0xEB, 0x82, 0x72, 0x4A, 0x15,
   0x7D, 0xFF, 0xCC, 0x71, 0x87, 0x51, 0x5E, 0x5C,
   0x86, 0x12, 0xE3, 0x13, 0x8F, 0x53, 0x84, 0xD9,
   0x84, 0x41, 0x5E, 0xCA, 0xFA, 0xB8, 0x16, 0x7C,
   0x40, 0xCD, 0x76, 0xAA, 0xFD, 0x12, 0x0E, 0xC4,
   0x93, 0x13, 0xBC, 0xD3, 0xE9, 0xA4, 0xB1, 0xE9,
   0x1C, 0xB7, 0xB5, 0xF5, 0x38, 0x84, 0x99, 0x75,
   0xD9, 0xA5, 0x95, 0x4E, 0xC4, 0xC5, 0xB8, 0xA6
};
static UINT8_A triple_des_cipher_text_1_ecb[] =
{
   0xDA, 0x72, 0x1D, 0x0F, 0x23, 0x6F, 0xDD, 0x0B,
   0x3A, 0xD0, 0x0C, 0xC7, 0x09, 0x02, 0xAE, 0x3F,
   0x37, 0xDE, 0x22, 0xBB, 0x5C, 0x89, 0x49, 0x85,
   0x1C, 0xB0, 0x6D, 0x80, 0x78, 0xC6, 0x56, 0xFC,
   0x31, 0x9D, 0xDF, 0xBB, 0xD9, 0xBA, 0x65, 0x99,
   0x47, 0xCB, 0xA7, 0x61, 0x9A, 0xE5, 0x5B, 0xAD,
   0x01, 0xAD, 0xA7, 0x07, 0xA3, 0x8F, 0xE8, 0xE3,
   0xA4, 0xE0, 0x0B, 0x97, 0xE8, 0xBB, 0x0A, 0x46,
   0x7C, 0xD5, 0x16, 0x17, 0xAD, 0x6E, 0x4E, 0x46,
   0x37, 0xA2, 0x08, 0xAF, 0xBF, 0xF1, 0x64, 0xB7,
   0x17, 0xC6, 0xDA, 0xA4, 0x1F, 0x29, 0xC2, 0xB8,
   0x24, 0xAE, 0x4B, 0xA7, 0x5F, 0x06, 0x10, 0x3C,
   0x85, 0x98, 0xE9, 0xF1, 0xEA, 0xF7, 0xF2, 0x17,
   0xA7, 0x2D, 0x80, 0xFF, 0xF3, 0xF7, 0x11, 0x8D,
   0x0D, 0xF8, 0xAD, 0x2D, 0x0E, 0x69, 0x4B, 0x2D,
   0x57, 0x5E, 0xD4, 0x14, 0x2C, 0xBF, 0xA6, 0x34
};

static UINT8_A triple_des_key_2_ecb[] =
{
   0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
   0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01,
   0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23
};
static UINT8_A triple_des_plain_text_2_ecb[] =
{
   0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x66, 0x63,
   0x6B, 0x20, 0x62, 0x72, 0x6F, 0x77, 0x6E, 0x20,
   0x66, 0x6F, 0x78, 0x20, 0x6A, 0x75, 0x6D, 0x70
};
static UINT8_A triple_des_cipher_text_2_ecb[] =
{
   0xA8, 0x26, 0xFD, 0x8C, 0xE5, 0x3B, 0x85, 0x5F,
   0xCC, 0xE2, 0x1C, 0x81, 0x12, 0x25, 0x6F, 0xE6,
   0x68, 0xD5, 0xC0, 0x5D, 0xD9, 0xB6, 0xB9, 0x00
};

static UINT8_A triple_des_key_3_ecb[] =
{
   0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
   0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01,
   0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x23,
};
static UINT8_A triple_des_plain_text_3_ecb[] =
{
   0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x66, 0x63,
};
static UINT8_A triple_des_cipher_text_3_ecb[] =
{
   0xa8, 0x26, 0xfd, 0x8c, 0xe5, 0x3b, 0x85, 0x5f,
};

/* new */
static UINT8_A triple_des_key_4_ecb[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A triple_des_plain_text_4_ecb[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A triple_des_cipher_text_4_ecb[] =
{
   0x8C, 0xA6, 0x4D, 0xE9, 0xC1, 0xB1, 0x23, 0xA7
};

static UINT8_A triple_des_key_5_ecb[] =
{
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};
static UINT8_A triple_des_plain_text_5_ecb[] =
{
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};
static UINT8_A triple_des_cipher_text_5_ecb[] =
{
   0x73, 0x59, 0xB2, 0x16, 0x3E, 0x4E, 0xDC, 0x58
};

static UINT8_A triple_des_key_6_ecb[] =
{
   0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A triple_des_plain_text_6_ecb[] =
{
   0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A triple_des_cipher_text_6_ecb[] =
{
   0x95, 0x8E, 0x6E, 0x62, 0x7A, 0x05, 0x55, 0x7B
};

static UINT8_A triple_des_key_7_ecb[] =
{
   0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
};
static UINT8_A triple_des_plain_text_7_ecb[] =
{
   0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
};
static UINT8_A triple_des_cipher_text_7_ecb[] =
{
   0xF4, 0x03, 0x79, 0xAB, 0x9E, 0x0E, 0xC5, 0x33
};

static UINT8_A triple_des_key_8_ecb[] =
{
   0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF
};
static UINT8_A triple_des_plain_text_8_ecb[] =
{
   0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
};
static UINT8_A triple_des_cipher_text_8_ecb[] =
{
   0x17, 0x66, 0x8D, 0xFC, 0x72, 0x92, 0x53, 0x2D
};

static UINT8_A triple_des_key_9_ecb[] =
{
   0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
};
static UINT8_A triple_des_plain_text_9_ecb[] =
{
   0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF
};
static UINT8_A triple_des_cipher_text_9_ecb[] =
{
   0x8A, 0x5A, 0xE1, 0xF8, 0x1A, 0xB8, 0xF2, 0xDD
};

static UINT8_A triple_des_key_10_ecb[] =
{
   0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
};
static UINT8_A triple_des_plain_text_10_ecb[] =
{
   0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF
};
static UINT8_A triple_des_cipher_text_10_ecb[] =
{
   0xED, 0x39, 0xD9, 0x50, 0xFA, 0x74, 0xBC, 0xC4
};

typedef struct triple_des_vector
{
   QSEE_CIPHER_ALGO_ET  alg;
   QSEE_CIPHER_MODE_ET  mode;
   uint8_t*             pt;
   uint32_t             pt_len;
   uint8_t*             key;
   uint8_t*             iv;
   uint8_t*             ct;
} __attribute__ ((packed)) triple_des_vector_t;

triple_des_vector_t triple_des_test_vectors[] =
{
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_CBC, triple_des_plain_text_1_cbc, sizeof(triple_des_plain_text_1_cbc),
      triple_des_key_1_cbc, triple_des_iv_1_cbc, triple_des_cipher_text_1_cbc},
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_CBC, triple_des_plain_text_2_cbc, sizeof(triple_des_plain_text_2_cbc),
      triple_des_key_2_cbc, triple_des_iv_2_cbc, triple_des_cipher_text_2_cbc},
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_CBC, triple_des_plain_text_3_cbc, sizeof(triple_des_plain_text_3_cbc),
      triple_des_key_3_cbc, triple_des_iv_3_cbc, triple_des_cipher_text_3_cbc},
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_1_ecb, sizeof(triple_des_plain_text_1_ecb),
      triple_des_key_1_ecb, NULL, triple_des_cipher_text_1_ecb},
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_2_ecb, sizeof(triple_des_plain_text_2_ecb),
      triple_des_key_2_ecb, NULL, triple_des_cipher_text_2_ecb},
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_3_ecb, sizeof(triple_des_plain_text_3_ecb),
      triple_des_key_3_ecb, NULL, triple_des_cipher_text_3_ecb},
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_4_ecb, sizeof(triple_des_plain_text_4_ecb),
      triple_des_key_4_ecb, NULL, triple_des_cipher_text_4_ecb},
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_5_ecb, sizeof(triple_des_plain_text_5_ecb),
      triple_des_key_5_ecb, NULL, triple_des_cipher_text_5_ecb},
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_6_ecb, sizeof(triple_des_plain_text_6_ecb),
      triple_des_key_6_ecb, NULL, triple_des_cipher_text_6_ecb},
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_7_ecb, sizeof(triple_des_plain_text_7_ecb),
      triple_des_key_7_ecb, NULL, triple_des_cipher_text_7_ecb},
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_8_ecb, sizeof(triple_des_plain_text_8_ecb),
      triple_des_key_8_ecb, NULL, triple_des_cipher_text_8_ecb},
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_9_ecb, sizeof(triple_des_plain_text_9_ecb),
      triple_des_key_9_ecb, NULL, triple_des_cipher_text_9_ecb},
   {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_10_ecb, sizeof(triple_des_plain_text_10_ecb),
      triple_des_key_10_ecb, NULL, triple_des_cipher_text_10_ecb},
};

typedef struct triple_des_vector_2
{
   QSEE_CIPHER_ALGO_ET  alg;
   QSEE_CIPHER_MODE_ET  mode;
   uint8_t*             pt;
   uint32_t             pt_len;
   uint8_t*             key;
   uint8_t*             iv;
   uint8_t*             ct;
   uint8_t*             ct2;
} __attribute__ ((packed)) triple_des_vector_2_t;

triple_des_vector_2_t triple_des_test_vectors_2 =
{
   QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_CBC, triple_des_plain_text_1_cbc, sizeof(triple_des_plain_text_1_cbc),
   triple_des_key_1_cbc, triple_des_iv_1_cbc, triple_des_cipher_text_1_cbc, triple_des_cipher_text_1_cbc
};

typedef struct uf_triple_des_vector
{
   SW_Cipher_DES_Alg_Type  alg;
   SW_CipherDESModeType    mode;
   uint8_t*                pt;
   uint32_t                pt_len;
   uint8_t*                key;
   uint8_t*                iv;
   uint8_t*                ct;
} __attribute__ ((packed)) uf_triple_des_vector_t;

uf_triple_des_vector_t sw_triple_des_test_vectors[] =
{
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_CBC, triple_des_plain_text_1_cbc, sizeof(triple_des_plain_text_1_cbc),
      triple_des_key_1_cbc, triple_des_iv_1_cbc, triple_des_cipher_text_1_cbc},
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_CBC, triple_des_plain_text_2_cbc, sizeof(triple_des_plain_text_2_cbc),
      triple_des_key_2_cbc, triple_des_iv_2_cbc, triple_des_cipher_text_2_cbc},
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_CBC, triple_des_plain_text_3_cbc, sizeof(triple_des_plain_text_3_cbc),
      triple_des_key_3_cbc, triple_des_iv_3_cbc, triple_des_cipher_text_3_cbc},
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_ECB, triple_des_plain_text_1_ecb, sizeof(triple_des_plain_text_1_ecb),
      triple_des_key_1_ecb, NULL, triple_des_cipher_text_1_ecb},
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_ECB, triple_des_plain_text_2_ecb, sizeof(triple_des_plain_text_2_ecb),
      triple_des_key_2_ecb, NULL, triple_des_cipher_text_2_ecb},
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_ECB, triple_des_plain_text_3_ecb, sizeof(triple_des_plain_text_3_ecb),
      triple_des_key_3_ecb, NULL, triple_des_cipher_text_3_ecb},
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_ECB, triple_des_plain_text_4_ecb, sizeof(triple_des_plain_text_4_ecb),
      triple_des_key_4_ecb, NULL, triple_des_cipher_text_4_ecb},
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_ECB, triple_des_plain_text_5_ecb, sizeof(triple_des_plain_text_5_ecb),
      triple_des_key_5_ecb, NULL, triple_des_cipher_text_5_ecb},
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_ECB, triple_des_plain_text_6_ecb, sizeof(triple_des_plain_text_6_ecb),
      triple_des_key_6_ecb, NULL, triple_des_cipher_text_6_ecb},
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_ECB, triple_des_plain_text_7_ecb, sizeof(triple_des_plain_text_7_ecb),
      triple_des_key_7_ecb, NULL, triple_des_cipher_text_7_ecb},
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_ECB, triple_des_plain_text_8_ecb, sizeof(triple_des_plain_text_8_ecb),
      triple_des_key_8_ecb, NULL, triple_des_cipher_text_8_ecb},
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_ECB, triple_des_plain_text_9_ecb, sizeof(triple_des_plain_text_9_ecb),
      triple_des_key_9_ecb, NULL, triple_des_cipher_text_9_ecb},
   {SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_ECB, triple_des_plain_text_10_ecb, sizeof(triple_des_plain_text_10_ecb),
      triple_des_key_10_ecb, NULL, triple_des_cipher_text_10_ecb},
};

typedef struct uf_triple_des_vector_2
{
   SW_Cipher_DES_Alg_Type  alg;
   SW_CipherDESModeType    mode;
   uint8_t*                pt;
   uint32_t                pt_len;
   uint8_t*                key;
   uint8_t*                iv;
   uint8_t*                ct;
   uint8_t*                ct2;
} __attribute__ ((packed)) uf_triple_des_vector_2_t;

uf_triple_des_vector_2_t sw_triple_des_test_vectors_2 =
{
   SW_CIPHER_ALG_DES3, SW_CIPHER_DES_MODE_CBC, triple_des_plain_text_1_cbc, sizeof(triple_des_plain_text_1_cbc),
   triple_des_key_1_cbc, triple_des_iv_1_cbc, triple_des_cipher_text_1_cbc, triple_des_cipher_text_1_cbc
};

/* AES-XTS-128 test vectors */
//Vector 1 in "IEEE Std 1619-2007"
static UINT8_A aesxts128_plain_text_1[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aesxts128_key1_1[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aesxts128_key2_1[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aesxts128_iv_1[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aesxts128_cipher_text_1[] =
{
   0x91, 0x7c, 0xf6, 0x9e, 0xbd, 0x68, 0xb2, 0xec,
   0x9b, 0x9f, 0xe9, 0xa3, 0xea, 0xdd, 0xa6, 0x92,
   0xcd, 0x43, 0xd2, 0xf5, 0x95, 0x98, 0xed, 0x85,
   0x8c, 0x02, 0xc2, 0x65, 0x2f, 0xbf, 0x92, 0x2e
};

//Vector 2 in "IEEE Std 1619-2007"
static UINT8_A aesxts128_plain_text_2[] =
{
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
   0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
};
static UINT8_A aesxts128_key1_2[] =
{
   0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
   0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
};
static UINT8_A aesxts128_key2_2[] =
{
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
   0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
};
static UINT8_A aesxts128_iv_2[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33
};
static UINT8_A aesxts128_iv_2_sw[] =
{
    0x33, 0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
static UINT8_A aesxts128_cipher_text_2[] =
{
   0xc4, 0x54, 0x18, 0x5e, 0x6a, 0x16, 0x93, 0x6e,
   0x39, 0x33, 0x40, 0x38, 0xac, 0xef, 0x83, 0x8b,
   0xfb, 0x18, 0x6f, 0xff, 0x74, 0x80, 0xad, 0xc4,
   0x28, 0x93, 0x82, 0xec, 0xd6, 0xd3, 0x94, 0xf0
};

//Vector 5 in "IEEE Std 1619-2007"
static UINT8_A aesxts128_plain_text_3[] =
{
   0x27, 0xa7, 0x47, 0x9b, 0xef, 0xa1, 0xd4, 0x76, 0x48, 0x9f, 0x30, 0x8c, 0xd4, 0xcf, 0xa6, 0xe2,
   0xa9, 0x6e, 0x4b, 0xbe, 0x32, 0x08, 0xff, 0x25, 0x28, 0x7d, 0xd3, 0x81, 0x96, 0x16, 0xe8, 0x9c,
   0xc7, 0x8c, 0xf7, 0xf5, 0xe5, 0x43, 0x44, 0x5f, 0x83, 0x33, 0xd8, 0xfa, 0x7f, 0x56, 0x00, 0x00,
   0x05, 0x27, 0x9f, 0xa5, 0xd8, 0xb5, 0xe4, 0xad, 0x40, 0xe7, 0x36, 0xdd, 0xb4, 0xd3, 0x54, 0x12,
   0x32, 0x80, 0x63, 0xfd, 0x2a, 0xab, 0x53, 0xe5, 0xea, 0x1e, 0x0a, 0x9f, 0x33, 0x25, 0x00, 0xa5,
   0xdf, 0x94, 0x87, 0xd0, 0x7a, 0x5c, 0x92, 0xcc, 0x51, 0x2c, 0x88, 0x66, 0xc7, 0xe8, 0x60, 0xce,
   0x93, 0xfd, 0xf1, 0x66, 0xa2, 0x49, 0x12, 0xb4, 0x22, 0x97, 0x61, 0x46, 0xae, 0x20, 0xce, 0x84,
   0x6b, 0xb7, 0xdc, 0x9b, 0xa9, 0x4a, 0x76, 0x7a, 0xae, 0xf2, 0x0c, 0x0d, 0x61, 0xad, 0x02, 0x65,
   0x5e, 0xa9, 0x2d, 0xc4, 0xc4, 0xe4, 0x1a, 0x89, 0x52, 0xc6, 0x51, 0xd3, 0x31, 0x74, 0xbe, 0x51,
   0xa1, 0x0c, 0x42, 0x11, 0x10, 0xe6, 0xd8, 0x15, 0x88, 0xed, 0xe8, 0x21, 0x03, 0xa2, 0x52, 0xd8,
   0xa7, 0x50, 0xe8, 0x76, 0x8d, 0xef, 0xff, 0xed, 0x91, 0x22, 0x81, 0x0a, 0xae, 0xb9, 0x9f, 0x91,
   0x72, 0xaf, 0x82, 0xb6, 0x04, 0xdc, 0x4b, 0x8e, 0x51, 0xbc, 0xb0, 0x82, 0x35, 0xa6, 0xf4, 0x34,
   0x13, 0x32, 0xe4, 0xca, 0x60, 0x48, 0x2a, 0x4b, 0xa1, 0xa0, 0x3b, 0x3e, 0x65, 0x00, 0x8f, 0xc5,
   0xda, 0x76, 0xb7, 0x0b, 0xf1, 0x69, 0x0d, 0xb4, 0xea, 0xe2, 0x9c, 0x5f, 0x1b, 0xad, 0xd0, 0x3c,
   0x5c, 0xcf, 0x2a, 0x55, 0xd7, 0x05, 0xdd, 0xcd, 0x86, 0xd4, 0x49, 0x51, 0x1c, 0xeb, 0x7e, 0xc3,
   0x0b, 0xf1, 0x2b, 0x1f, 0xa3, 0x5b, 0x91, 0x3f, 0x9f, 0x74, 0x7a, 0x8a, 0xfd, 0x1b, 0x13, 0x0e,
   0x94, 0xbf, 0xf9, 0x4e, 0xff, 0xd0, 0x1a, 0x91, 0x73, 0x5c, 0xa1, 0x72, 0x6a, 0xcd, 0x0b, 0x19,
   0x7c, 0x4e, 0x5b, 0x03, 0x39, 0x36, 0x97, 0xe1, 0x26, 0x82, 0x6f, 0xb6, 0xbb, 0xde, 0x8e, 0xcc,
   0x1e, 0x08, 0x29, 0x85, 0x16, 0xe2, 0xc9, 0xed, 0x03, 0xff, 0x3c, 0x1b, 0x78, 0x60, 0xf6, 0xde,
   0x76, 0xd4, 0xce, 0xcd, 0x94, 0xc8, 0x11, 0x98, 0x55, 0xef, 0x52, 0x97, 0xca, 0x67, 0xe9, 0xf3,
   0xe7, 0xff, 0x72, 0xb1, 0xe9, 0x97, 0x85, 0xca, 0x0a, 0x7e, 0x77, 0x20, 0xc5, 0xb3, 0x6d, 0xc6,
   0xd7, 0x2c, 0xac, 0x95, 0x74, 0xc8, 0xcb, 0xbc, 0x2f, 0x80, 0x1e, 0x23, 0xe5, 0x6f, 0xd3, 0x44,
   0xb0, 0x7f, 0x22, 0x15, 0x4b, 0xeb, 0xa0, 0xf0, 0x8c, 0xe8, 0x89, 0x1e, 0x64, 0x3e, 0xd9, 0x95,
   0xc9, 0x4d, 0x9a, 0x69, 0xc9, 0xf1, 0xb5, 0xf4, 0x99, 0x02, 0x7a, 0x78, 0x57, 0x2a, 0xee, 0xbd,
   0x74, 0xd2, 0x0c, 0xc3, 0x98, 0x81, 0xc2, 0x13, 0xee, 0x77, 0x0b, 0x10, 0x10, 0xe4, 0xbe, 0xa7,
   0x18, 0x84, 0x69, 0x77, 0xae, 0x11, 0x9f, 0x7a, 0x02, 0x3a, 0xb5, 0x8c, 0xca, 0x0a, 0xd7, 0x52,
   0xaf, 0xe6, 0x56, 0xbb, 0x3c, 0x17, 0x25, 0x6a, 0x9f, 0x6e, 0x9b, 0xf1, 0x9f, 0xdd, 0x5a, 0x38,
   0xfc, 0x82, 0xbb, 0xe8, 0x72, 0xc5, 0x53, 0x9e, 0xdb, 0x60, 0x9e, 0xf4, 0xf7, 0x9c, 0x20, 0x3e,
   0xbb, 0x14, 0x0f, 0x2e, 0x58, 0x3c, 0xb2, 0xad, 0x15, 0xb4, 0xaa, 0x5b, 0x65, 0x50, 0x16, 0xa8,
   0x44, 0x92, 0x77, 0xdb, 0xd4, 0x77, 0xef, 0x2c, 0x8d, 0x6c, 0x01, 0x7d, 0xb7, 0x38, 0xb1, 0x8d,
   0xeb, 0x4a, 0x42, 0x7d, 0x19, 0x23, 0xce, 0x3f, 0xf2, 0x62, 0x73, 0x57, 0x79, 0xa4, 0x18, 0xf2,
   0x0a, 0x28, 0x2d, 0xf9, 0x20, 0x14, 0x7b, 0xea, 0xbe, 0x42, 0x1e, 0xe5, 0x31, 0x9d, 0x05, 0x68
};
static UINT8_A aesxts128_key1_3[] =
{
   0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45,
   0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26
};
static UINT8_A aesxts128_key2_3[] =
{
   0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93,
   0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95
};
static UINT8_A aesxts128_iv_3[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
};
static UINT8_A aesxts128_iv_3_sw[] =
{
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aesxts128_cipher_text_3[] =
{
   0x26, 0x4d, 0x3c, 0xa8, 0x51, 0x21, 0x94, 0xfe, 0xc3, 0x12, 0xc8, 0xc9, 0x89, 0x1f, 0x27, 0x9f,
   0xef, 0xdd, 0x60, 0x8d, 0x0c, 0x02, 0x7b, 0x60, 0x48, 0x3a, 0x3f, 0xa8, 0x11, 0xd6, 0x5e, 0xe5,
   0x9d, 0x52, 0xd9, 0xe4, 0x0e, 0xc5, 0x67, 0x2d, 0x81, 0x53, 0x2b, 0x38, 0xb6, 0xb0, 0x89, 0xce,
   0x95, 0x1f, 0x0f, 0x9c, 0x35, 0x59, 0x0b, 0x8b, 0x97, 0x8d, 0x17, 0x52, 0x13, 0xf3, 0x29, 0xbb,
   0x1c, 0x2f, 0xd3, 0x0f, 0x2f, 0x7f, 0x30, 0x49, 0x2a, 0x61, 0xa5, 0x32, 0xa7, 0x9f, 0x51, 0xd3,
   0x6f, 0x5e, 0x31, 0xa7, 0xc9, 0xa1, 0x2c, 0x28, 0x60, 0x82, 0xff, 0x7d, 0x23, 0x94, 0xd1, 0x8f,
   0x78, 0x3e, 0x1a, 0x8e, 0x72, 0xc7, 0x22, 0xca, 0xaa, 0xa5, 0x2d, 0x8f, 0x06, 0x56, 0x57, 0xd2,
   0x63, 0x1f, 0xd2, 0x5b, 0xfd, 0x8e, 0x5b, 0xaa, 0xd6, 0xe5, 0x27, 0xd7, 0x63, 0x51, 0x75, 0x01,
   0xc6, 0x8c, 0x5e, 0xdc, 0x3c, 0xdd, 0x55, 0x43, 0x5c, 0x53, 0x2d, 0x71, 0x25, 0xc8, 0x61, 0x4d,
   0xee, 0xd9, 0xad, 0xaa, 0x3a, 0xca, 0xde, 0x58, 0x88, 0xb8, 0x7b, 0xef, 0x64, 0x1c, 0x4c, 0x99,
   0x4c, 0x80, 0x91, 0xb5, 0xbc, 0xd3, 0x87, 0xf3, 0x96, 0x3f, 0xb5, 0xbc, 0x37, 0xaa, 0x92, 0x2f,
   0xbf, 0xe3, 0xdf, 0x4e, 0x5b, 0x91, 0x5e, 0x6e, 0xb5, 0x14, 0x71, 0x7b, 0xdd, 0x2a, 0x74, 0x07,
   0x9a, 0x50, 0x73, 0xf5, 0xc4, 0xbf, 0xd4, 0x6a, 0xdf, 0x7d, 0x28, 0x2e, 0x7a, 0x39, 0x3a, 0x52,
   0x57, 0x9d, 0x11, 0xa0, 0x28, 0xda, 0x4d, 0x9c, 0xd9, 0xc7, 0x71, 0x24, 0xf9, 0x64, 0x8e, 0xe3,
   0x83, 0xb1, 0xac, 0x76, 0x39, 0x30, 0xe7, 0x16, 0x2a, 0x8d, 0x37, 0xf3, 0x50, 0xb2, 0xf7, 0x4b,
   0x84, 0x72, 0xcf, 0x09, 0x90, 0x20, 0x63, 0xc6, 0xb3, 0x2e, 0x8c, 0x2d, 0x92, 0x90, 0xce, 0xfb,
   0xd7, 0x34, 0x6d, 0x1c, 0x77, 0x9a, 0x0d, 0xf5, 0x0e, 0xdc, 0xde, 0x45, 0x31, 0xda, 0x07, 0xb0,
   0x99, 0xc6, 0x38, 0xe8, 0x3a, 0x75, 0x59, 0x44, 0xdf, 0x2a, 0xef, 0x1a, 0xa3, 0x17, 0x52, 0xfd,
   0x32, 0x3d, 0xcb, 0x71, 0x0f, 0xb4, 0xbf, 0xbb, 0x9d, 0x22, 0xb9, 0x25, 0xbc, 0x35, 0x77, 0xe1,
   0xb8, 0x94, 0x9e, 0x72, 0x9a, 0x90, 0xbb, 0xaf, 0xea, 0xcf, 0x7f, 0x78, 0x79, 0xe7, 0xb1, 0x14,
   0x7e, 0x28, 0xba, 0x0b, 0xae, 0x94, 0x0d, 0xb7, 0x95, 0xa6, 0x1b, 0x15, 0xec, 0xf4, 0xdf, 0x8d,
   0xb0, 0x7b, 0x82, 0x4b, 0xb0, 0x62, 0x80, 0x2c, 0xc9, 0x8a, 0x95, 0x45, 0xbb, 0x2a, 0xae, 0xed,
   0x77, 0xcb, 0x3f, 0xc6, 0xdb, 0x15, 0xdc, 0xd7, 0xd8, 0x0d, 0x7d, 0x5b, 0xc4, 0x06, 0xc4, 0x97,
   0x0a, 0x34, 0x78, 0xad, 0xa8, 0x89, 0x9b, 0x32, 0x91, 0x98, 0xeb, 0x61, 0xc1, 0x93, 0xfb, 0x62,
   0x75, 0xaa, 0x8c, 0xa3, 0x40, 0x34, 0x4a, 0x75, 0xa8, 0x62, 0xae, 0xbe, 0x92, 0xee, 0xe1, 0xce,
   0x03, 0x2f, 0xd9, 0x50, 0xb4, 0x7d, 0x77, 0x04, 0xa3, 0x87, 0x69, 0x23, 0xb4, 0xad, 0x62, 0x84,
   0x4b, 0xf4, 0xa0, 0x9c, 0x4d, 0xbe, 0x8b, 0x43, 0x97, 0x18, 0x4b, 0x74, 0x71, 0x36, 0x0c, 0x95,
   0x64, 0x88, 0x0a, 0xed, 0xdd, 0xb9, 0xba, 0xa4, 0xaf, 0x2e, 0x75, 0x39, 0x4b, 0x08, 0xcd, 0x32,
   0xff, 0x47, 0x9c, 0x57, 0xa0, 0x7d, 0x3e, 0xab, 0x5d, 0x54, 0xde, 0x5f, 0x97, 0x38, 0xb8, 0xd2,
   0x7f, 0x27, 0xa9, 0xf0, 0xab, 0x11, 0x79, 0x9d, 0x7b, 0x7f, 0xfe, 0xfb, 0x27, 0x04, 0xc9, 0x5c,
   0x6a, 0xd1, 0x2c, 0x39, 0xf1, 0xe8, 0x67, 0xa4, 0xb7, 0xb1, 0xd7, 0x81, 0x8a, 0x4b, 0x75, 0x3d,
   0xfd, 0x2a, 0x89, 0xcc, 0xb4, 0x5e, 0x00, 0x1a, 0x03, 0xa8, 0x67, 0xb1, 0x87, 0xf2, 0x25, 0xdd
};

//Vector 11 in "IEEE Std 1619-2007"
static UINT8_A aesxts256_plain_text_4[] =
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
   0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
   0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
   0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
   0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
   0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
   0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
   0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
   0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
   0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
   0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
   0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
   0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
   0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
   0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
   0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
   0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
   0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
   0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
   0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
   0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
   0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
   0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
   0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
   0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
   0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
   0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
   0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
};
static UINT8_A aesxts256_key1_4[] =
{
   0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45,
   0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26,
   0x62, 0x49, 0x77, 0x57, 0x24, 0x70, 0x93, 0x69,
   0x99, 0x59, 0x57, 0x49, 0x66, 0x96, 0x76, 0x27
};
static UINT8_A aesxts256_key2_4[] =
{
   0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93,
   0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95,
   0x02, 0x88, 0x41, 0x97, 0x16, 0x93, 0x99, 0x37,
   0x51, 0x05, 0x82, 0x09, 0x74, 0x94, 0x45, 0x92
};
static UINT8_A aesxts256_iv_4[] =
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff
};
static UINT8_A aesxts256_iv_4_sw[] =
{
    0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static UINT8_A aesxts256_cipher_text_4[] =
{
   0x77, 0xa3, 0x12, 0x51, 0x61, 0x8a, 0x15, 0xe6, 0xb9, 0x2d, 0x1d, 0x66, 0xdf, 0xfe, 0x7b, 0x50,
   0xb5, 0x0b, 0xad, 0x55, 0x23, 0x05, 0xba, 0x02, 0x17, 0xa6, 0x10, 0x68, 0x8e, 0xff, 0x7e, 0x11,
   0xe1, 0xd0, 0x22, 0x54, 0x38, 0xe0, 0x93, 0x24, 0x2d, 0x6d, 0xb2, 0x74, 0xfd, 0xe8, 0x01, 0xd4,
   0xca, 0xe0, 0x6f, 0x20, 0x92, 0xc7, 0x28, 0xb2, 0x47, 0x85, 0x59, 0xdf, 0x58, 0xe8, 0x37, 0xc2,
   0x46, 0x9e, 0xe4, 0xa4, 0xfa, 0x79, 0x4e, 0x4b, 0xbc, 0x7f, 0x39, 0xbc, 0x02, 0x6e, 0x3c, 0xb7,
   0x2c, 0x33, 0xb0, 0x88, 0x8f, 0x25, 0xb4, 0xac, 0xf5, 0x6a, 0x2a, 0x98, 0x04, 0xf1, 0xce, 0x6d,
   0x3d, 0x6e, 0x1d, 0xc6, 0xca, 0x18, 0x1d, 0x4b, 0x54, 0x61, 0x79, 0xd5, 0x55, 0x44, 0xaa, 0x77,
   0x60, 0xc4, 0x0d, 0x06, 0x74, 0x15, 0x39, 0xc7, 0xe3, 0xcd, 0x9d, 0x2f, 0x66, 0x50, 0xb2, 0x01,
   0x3f, 0xd0, 0xee, 0xb8, 0xc2, 0xb8, 0xe3, 0xd8, 0xd2, 0x40, 0xcc, 0xae, 0x2d, 0x4c, 0x98, 0x32,
   0x0a, 0x74, 0x42, 0xe1, 0xc8, 0xd7, 0x5a, 0x42, 0xd6, 0xe6, 0xcf, 0xa4, 0xc2, 0xec, 0xa1, 0x79,
   0x8d, 0x15, 0x8c, 0x7a, 0xec, 0xdf, 0x82, 0x49, 0x0f, 0x24, 0xbb, 0x9b, 0x38, 0xe1, 0x08, 0xbc,
   0xda, 0x12, 0xc3, 0xfa, 0xf9, 0xa2, 0x11, 0x41, 0xc3, 0x61, 0x3b, 0x58, 0x36, 0x7f, 0x92, 0x2a,
   0xaa, 0x26, 0xcd, 0x22, 0xf2, 0x3d, 0x70, 0x8d, 0xae, 0x69, 0x9a, 0xd7, 0xcb, 0x40, 0xa8, 0xad,
   0x0b, 0x6e, 0x27, 0x84, 0x97, 0x3d, 0xcb, 0x60, 0x56, 0x84, 0xc0, 0x8b, 0x8d, 0x69, 0x98, 0xc6,
   0x9a, 0xac, 0x04, 0x99, 0x21, 0x87, 0x1e, 0xbb, 0x65, 0x30, 0x1a, 0x46, 0x19, 0xca, 0x80, 0xec,
   0xb4, 0x85, 0xa3, 0x1d, 0x74, 0x42, 0x23, 0xce, 0x8d, 0xdc, 0x23, 0x94, 0x82, 0x8d, 0x6a, 0x80,
   0x47, 0x0c, 0x09, 0x2f, 0x5b, 0xa4, 0x13, 0xc3, 0x37, 0x8f, 0xa6, 0x05, 0x42, 0x55, 0xc6, 0xf9,
   0xdf, 0x44, 0x95, 0x86, 0x2b, 0xbb, 0x32, 0x87, 0x68, 0x1f, 0x93, 0x1b, 0x68, 0x7c, 0x88, 0x8a,
   0xbf, 0x84, 0x4d, 0xfc, 0x8f, 0xc2, 0x83, 0x31, 0xe5, 0x79, 0x92, 0x8c, 0xd1, 0x2b, 0xd2, 0x39,
   0x0a, 0xe1, 0x23, 0xcf, 0x03, 0x81, 0x8d, 0x14, 0xde, 0xdd, 0xe5, 0xc0, 0xc2, 0x4c, 0x8a, 0xb0,
   0x18, 0xbf, 0xca, 0x75, 0xca, 0x09, 0x6f, 0x2d, 0x53, 0x1f, 0x3d, 0x16, 0x19, 0xe7, 0x85, 0xf1,
   0xad, 0xa4, 0x37, 0xca, 0xb9, 0x2e, 0x98, 0x05, 0x58, 0xb3, 0xdc, 0xe1, 0x47, 0x4a, 0xfb, 0x75,
   0xbf, 0xed, 0xbf, 0x8f, 0xf5, 0x4c, 0xb2, 0x61, 0x8e, 0x02, 0x44, 0xc9, 0xac, 0x0d, 0x3c, 0x66,
   0xfb, 0x51, 0x59, 0x8c, 0xd2, 0xdb, 0x11, 0xf9, 0xbe, 0x39, 0x79, 0x1a, 0xbe, 0x44, 0x7c, 0x63,
   0x09, 0x4f, 0x7c, 0x45, 0x3b, 0x7f, 0xf8, 0x7c, 0xb5, 0xbb, 0x36, 0xb7, 0xc7, 0x9e, 0xfb, 0x08,
   0x72, 0xd1, 0x70, 0x58, 0xb8, 0x3b, 0x15, 0xab, 0x08, 0x66, 0xad, 0x8a, 0x58, 0x65, 0x6c, 0x5a,
   0x7e, 0x20, 0xdb, 0xdf, 0x30, 0x8b, 0x24, 0x61, 0xd9, 0x7c, 0x0e, 0xc0, 0x02, 0x4a, 0x27, 0x15,
   0x05, 0x52, 0x49, 0xcf, 0x3b, 0x47, 0x8d, 0xdd, 0x47, 0x40, 0xde, 0x65, 0x4f, 0x75, 0xca, 0x68,
   0x6e, 0x0d, 0x73, 0x45, 0xc6, 0x9e, 0xd5, 0x0c, 0xdc, 0x2a, 0x8b, 0x33, 0x2b, 0x1f, 0x88, 0x24,
   0x10, 0x8a, 0xc9, 0x37, 0xeb, 0x05, 0x05, 0x85, 0x60, 0x8e, 0xe7, 0x34, 0x09, 0x7f, 0xc0, 0x90,
   0x54, 0xfb, 0xff, 0x89, 0xee, 0xae, 0xea, 0x79, 0x1f, 0x4a, 0x7a, 0xb1, 0xf9, 0x86, 0x82, 0x94,
   0xa4, 0xf9, 0xe2, 0x7b, 0x42, 0xaf, 0x81, 0x00, 0xcb, 0x9d, 0x59, 0xce, 0xf9, 0x64, 0x58, 0x03
};

/* AES-XTS test vectors */
typedef struct
{
   QSEE_CIPHER_ALGO_ET  alg;
   QSEE_CIPHER_MODE_ET  mode;
   uint8_t *pt;
   uint32_t pt_len;
   uint8_t *key;
   uint32_t key_len;
   uint8_t *xts_key;
   uint32_t xts_key_len;
   uint32_t xts_du_size;
   uint8_t *iv;
   uint8_t *ct;
}__attribute__ ((packed)) aes_xts_vector_t;

// Offtarget test uses SW implementation, so we will use SW test vectors
#ifdef OFFTARGET
aes_xts_vector_t aes_xts_test_vectors[] =
{
    { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_1, sizeof(aesxts128_plain_text_1),
        aesxts128_key1_1, sizeof(aesxts128_key1_1), aesxts128_key2_1, sizeof(aesxts128_key2_1),
        32, aesxts128_iv_1, aesxts128_cipher_text_1 },
    { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_2, sizeof(aesxts128_plain_text_2),
        aesxts128_key1_2, sizeof(aesxts128_key1_2), aesxts128_key2_2, sizeof(aesxts128_key2_2),
        32, aesxts128_iv_2_sw, aesxts128_cipher_text_2 },
    { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_3, sizeof(aesxts128_plain_text_3),
        aesxts128_key1_3, sizeof(aesxts128_key1_3), aesxts128_key2_3, sizeof(aesxts128_key2_3),
        512, aesxts128_iv_3_sw, aesxts128_cipher_text_3 },
    { QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_XTS, aesxts256_plain_text_4, sizeof(aesxts256_plain_text_4),
        aesxts256_key1_4, sizeof(aesxts256_key1_4), aesxts256_key2_4, sizeof(aesxts256_key2_4),
        512, aesxts256_iv_4_sw, aesxts256_cipher_text_4 },
};
#else
aes_xts_vector_t aes_xts_test_vectors[] =
{
   { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_1, sizeof(aesxts128_plain_text_1),
      aesxts128_key1_1, sizeof(aesxts128_key1_1), aesxts128_key2_1, sizeof(aesxts128_key2_1),
      32, aesxts128_iv_1, aesxts128_cipher_text_1 },
   { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_1, sizeof(aesxts128_plain_text_1),
      aesxts128_key1_1, sizeof(aesxts128_key1_1), aesxts128_key2_1, sizeof(aesxts128_key2_1),
      0, aesxts128_iv_1, aesxts128_cipher_text_1 },
   { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_2, sizeof(aesxts128_plain_text_2),
      aesxts128_key1_2, sizeof(aesxts128_key1_2), aesxts128_key2_2, sizeof(aesxts128_key2_2),
      32, aesxts128_iv_2, aesxts128_cipher_text_2 },
   { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_2, sizeof(aesxts128_plain_text_2),
      aesxts128_key1_2, sizeof(aesxts128_key1_2), aesxts128_key2_2, sizeof(aesxts128_key2_2),
      0, aesxts128_iv_2, aesxts128_cipher_text_2 },
   { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_3, sizeof(aesxts128_plain_text_3),
      aesxts128_key1_3, sizeof(aesxts128_key1_3), aesxts128_key2_3, sizeof(aesxts128_key2_3),
      512, aesxts128_iv_3, aesxts128_cipher_text_3 },
   { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_3, sizeof(aesxts128_plain_text_3),
      aesxts128_key1_3, sizeof(aesxts128_key1_3), aesxts128_key2_3, sizeof(aesxts128_key2_3),
      0, aesxts128_iv_3, aesxts128_cipher_text_3 },
   { QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_XTS,aesxts256_plain_text_4, sizeof(aesxts256_plain_text_4),
      aesxts256_key1_4, sizeof(aesxts256_key1_4), aesxts256_key2_4, sizeof(aesxts256_key2_4),
      512, aesxts256_iv_4, aesxts256_cipher_text_4 },
   { QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_XTS, aesxts256_plain_text_4, sizeof(aesxts256_plain_text_4),
      aesxts256_key1_4, sizeof(aesxts256_key1_4), aesxts256_key2_4, sizeof(aesxts256_key2_4),
      0, aesxts256_iv_4, aesxts256_cipher_text_4 }
};

#endif

/* AES-XTS SW test vectors */
typedef struct
{
    SW_Cipher_Alg_Type alg;
    SW_CipherModeType mode;
    uint8_t *pt;
    uint32_t pt_len;
    uint8_t *key;
    uint32_t key_len;
    uint8_t *xts_key;
    uint32_t xts_key_len;
    uint32_t xts_du_size;
    uint8_t *iv;
    uint8_t *ct;
}__attribute__ ((packed)) aes_xts_sw_vector_t;

aes_xts_sw_vector_t aes_xts_sw_test_vectors[] =
{
    { SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_XTS, aesxts128_plain_text_1, sizeof(aesxts128_plain_text_1),
        aesxts128_key1_1, sizeof(aesxts128_key1_1), aesxts128_key2_1, sizeof(aesxts128_key2_1),
        32, aesxts128_iv_1, aesxts128_cipher_text_1 },
    { SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_XTS, aesxts128_plain_text_2, sizeof(aesxts128_plain_text_2),
        aesxts128_key1_2, sizeof(aesxts128_key1_2), aesxts128_key2_2, sizeof(aesxts128_key2_2),
        32, aesxts128_iv_2_sw, aesxts128_cipher_text_2 },
    { SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_XTS, aesxts128_plain_text_3, sizeof(aesxts128_plain_text_3),
        aesxts128_key1_3, sizeof(aesxts128_key1_3), aesxts128_key2_3, sizeof(aesxts128_key2_3),
        512, aesxts128_iv_3_sw, aesxts128_cipher_text_3 },
    { SW_CIPHER_ALG_AES256, SW_CIPHER_MODE_XTS, aesxts256_plain_text_4, sizeof(aesxts256_plain_text_4),
        aesxts256_key1_4, sizeof(aesxts256_key1_4), aesxts256_key2_4, sizeof(aesxts256_key2_4),
        512, aesxts256_iv_4_sw, aesxts256_cipher_text_4 },
};

static const uint8_t patt_proc_ct_0[] =
{
    0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d, // Cipher
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Plain
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, // Plain
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, // Plain

	0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d, // Cipher
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Plain
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, // Plain
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, // Plain
};

static const uint8_t patt_proc_pt_0[] =
{
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a, // Decrypt
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Skip
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, // Skip
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, // Skip

	0x1d, 0x89, 0x17, 0x4d, 0xab, 0x5c, 0x2b, 0xd7, 0x2f, 0xdd, 0xfa, 0x81, 0x6d, 0x77, 0x00, 0x58, // Decrypt
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Skip
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, // Skip
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, // Skip
};

static const uint8_t patt_proc_key_0[] =
{
    0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
};

static const uint8_t patt_proc_iv_0[] =
{
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
};

static const uint8_t patt_proc_ct_1[] =
{
    0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5, 0xb7, 0xa7, 0xf5, 0x04, 0xbb, 0xf3, 0xd2, 0x28, // Cipher
    0xf4, 0x43, 0xe3, 0xca, 0x4d, 0x62, 0xb5, 0x9a, 0xca, 0x84, 0xe9, 0x90, 0xca, 0xca, 0xf5, 0xc5, // Cipher
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip

    0x2b, 0x09, 0x30, 0xda, 0xa2, 0x3d, 0xe9, 0x4c, 0xe8, 0x70, 0x17, 0xba, 0x2d, 0x84, 0x98, 0x8d, // Cipher
    0xdf, 0xc9, 0xc5, 0x8d, 0xb6, 0x7a, 0xad, 0xa6, 0x13, 0xc2, 0xdd, 0x08, 0x45, 0x79, 0x41, 0xa6, // Cipher
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
};

static const uint8_t patt_proc_pt_1[] =
{
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a, // Decrypt
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51, // Decrypt
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Plain
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Plain
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Plain

    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, // Decrypt
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10, // Decrypt
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
};

static const uint8_t patt_proc_key_1[] =
{
    0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
    0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
};

static const uint8_t patt_proc_iv_1[] =
{
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};

static const uint8_t patt_proc_ct_2[] =
{
	0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5, 0xb7, 0xa7, 0xf5, 0x04, 0xbb, 0xf3, 0xd2, 0x28, // Cipher
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip

	0xf4, 0x43, 0xe3, 0xca, 0x4d, 0x62, 0xb5, 0x9a, 0xca, 0x84, 0xe9, 0x90, 0xca, 0xca, 0xf5, 0xc5, // Cipher
    0x2b, 0x09, 0x30, 0xda, 0xa2, 0x3d, 0xe9, 0x4c, 0xe8, 0x70, 0x17, 0xba, 0x2d, 0x84, 0x98, 0x8d, // Cipher
    0xdf, 0xc9, 0xc5, 0x8d, 0xb6, 0x7a, 0xad, 0xa6, 0x13, 0xc2, 0xdd, 0x08, 0x45, 0x79, 0x41, 0xa6, // Cipher
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
};

static const uint8_t patt_proc_pt_2[] =
{
	0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a, // Decrypt
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Plain
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Plain
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Plain

	0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51, // Decrypt
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, // Decrypt
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10, // Decrypt
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Skip
};

static const uint8_t patt_proc_key_2[] =
{
    0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
    0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
};

static const uint8_t patt_proc_iv_2[] =
{
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};

typedef struct
{
    const uint32_t alg;
    const uint32_t mode;
    const uint8_t* ct;
    const uint8_t* pt;
    const uint32_t datalen;
    const uint8_t* key;
    const uint32_t keylen;
    const uint8_t* iv;
    const uint32_t patt_size; // Pattern size in blocks. 1 block = 16 bytes.
    const uint32_t patt_data_size; // Number of blocks to be processed
    const uint32_t patt_offset; // Offset into the pattern to start processing
} pattern_processing_test_t;

pattern_processing_test_t pattern_processing_test_vectors[] =
{
	{
		CCipherAES128_UID,
		ICipher_MODE_CBC,
		patt_proc_ct_0,
		patt_proc_pt_0,
		sizeof(patt_proc_ct_0),
		patt_proc_key_0,
		sizeof(patt_proc_key_0),
		patt_proc_iv_0,
		4, // 4 total blocks in pattern
		1, // 1 block to be processed
		0  // 0 block offset into pattern
	},
	{
		CCipherAES256_UID,
		ICipher_MODE_CTR,
		patt_proc_ct_1,
		patt_proc_pt_1,
		sizeof(patt_proc_ct_1),
		patt_proc_key_1,
		sizeof(patt_proc_key_1),
		patt_proc_iv_1,
		5, // 5 total blocks in pattern
		2, // 2 block to be processed
		0  // 0 block offset into pattern
	},
	{
		CCipherAES256_UID,
		ICipher_MODE_CTR,
		patt_proc_ct_2,
		patt_proc_pt_2,
		sizeof(patt_proc_ct_2),
		patt_proc_key_2,
		sizeof(patt_proc_key_2),
		patt_proc_iv_2,
		6, // 5 total blocks in pattern
		3, // 2 block to be processed
		2  // 0 block offset into pattern
	},
};

static const uint8_t block_offset_ct_0[] =
{
    0x77, 0x57, 0x89, 0xa5, 0xb7, 0xa7, 0xf5, 0x04, 0xbb, 0xf3, 0xd2, 0x28
};

static const uint8_t block_offset_pt_0[] =
{
    0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};

static const uint8_t block_offset_key_0[] =
{
    0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
    0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
};

static const uint8_t block_offset_iv_0[] =
{
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};

static const uint8_t block_offset_ct_1[] =
{
    0xbb, 0xf3, 0xd2, 0x28,
    0xf4, 0x43, 0xe3, 0xca, 0x4d, 0x62, 0xb5, 0x9a, 0xca, 0x84, 0xe9, 0x90, 0xca, 0xca, 0xf5, 0xc5,
};

static const uint8_t block_offset_pt_1[] =
{
    0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
};

static const uint8_t block_offset_key_1[] =
{
    0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
    0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
};

static const uint8_t block_offset_iv_1[] =
{
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};

static const uint8_t block_offset_ct_2[] =
{
    0xf5, 0x04, 0xbb, 0xf3, 0xd2, 0x28,
    0xf4, 0x43, 0xe3, 0xca, 0x4d, 0x62, 0xb5, 0x9a, 0xca, 0x84, 0xe9, 0x90, 0xca, 0xca, 0xf5, 0xc5,
    0x2b, 0x09, 0x30, 0xda, 0xa2, 0x3d, 0xe9, 0x4c, 0xe8, 0x70, 0x17, 0xba, 0x2d, 0x84, 0x98, 0x8d,
    0xdf, 0xc9, 0xc5, 0x8d, 0xb6, 0x7a, 0xad, 0xa6, 0x13, 0xc2, 0xdd, 0x08, 0x45, 0x79, 0x41, 0xa6,
};

static const uint8_t block_offset_pt_2[] =
{
    0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
};

static const uint8_t block_offset_key_2[] =
{
    0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
    0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
};

static const uint8_t block_offset_iv_2[] =
{
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};

typedef struct
{
    const uint32_t alg;
    const uint32_t mode;
    const uint8_t* ct;
    const uint8_t* pt;
    const uint32_t datalen;
    const uint8_t* key;
    const uint32_t keylen;
    const uint8_t* iv;
    const uint32_t partial_block_offset; // Number of bytes into the block to start.
} block_offset_test_t;

block_offset_test_t block_offset_test_vectors[] =
{
	{
		CCipherAES256_UID,
		ICipher_MODE_CTR,
		block_offset_ct_0,
		block_offset_pt_0,
		sizeof(block_offset_ct_0),
		block_offset_key_0,
		sizeof(block_offset_key_0),
		block_offset_iv_0,
		4
	},
	{
		CCipherAES256_UID,
		ICipher_MODE_CTR,
		block_offset_ct_1,
		block_offset_pt_1,
		sizeof(block_offset_ct_1),
		block_offset_key_1,
		sizeof(block_offset_key_1),
		block_offset_iv_1,
		12
	},
    {
		CCipherAES256_UID,
		ICipher_MODE_CTR,
		block_offset_ct_2,
		block_offset_pt_2,
		sizeof(block_offset_ct_2),
		block_offset_key_2,
		sizeof(block_offset_key_2),
		block_offset_iv_2,
		10
	}
};

#endif // __CRYPTO_CIPHER_TEST_VECTORS_H__

